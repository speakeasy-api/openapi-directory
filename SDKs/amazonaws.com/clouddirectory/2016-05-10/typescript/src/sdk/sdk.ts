/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * The Amazon CloudDirectory multi-region endpoint
   */
  "http://clouddirectory.{region}.amazonaws.com",
  /**
   * The Amazon CloudDirectory multi-region endpoint
   */
  "https://clouddirectory.{region}.amazonaws.com",
  /**
   * The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)
   */
  "http://clouddirectory.{region}.amazonaws.com.cn",
  /**
   * The Amazon CloudDirectory endpoint for China (Beijing) and China (Ningxia)
   */
  "https://clouddirectory.{region}.amazonaws.com.cn",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href="https://aws.amazon.com/directoryservice/">AWS Directory Service</a> and the <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html">AWS Directory Service Administration Guide</a>.</p>
 *
 * @see {@link https://docs.aws.amazon.com/clouddirectory/} - Amazon Web Services documentation
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Adds a new <a>Facet</a> to an object. An object can have more than one facet applied on it.
   */
  addFacetToObject(
    req: operations.AddFacetToObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddFacetToObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddFacetToObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/facets#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddFacetToObjectResponse =
        new operations.AddFacetToObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.addFacetToObjectResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Copies the input published schema, at the specified version, into the <a>Directory</a> with the same name and version as that of the published schema.
   */
  applySchema(
    req: operations.ApplySchemaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ApplySchemaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ApplySchemaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/apply#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ApplySchemaResponse =
        new operations.ApplySchemaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.applySchemaResponse = utils.objectToClass(
              httpRes?.data,
              shared.ApplySchemaResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidAttachmentException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidAttachmentException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Attaches an existing object to another object. An object can be accessed in two ways:</p> <ol> <li> <p>Using the path</p> </li> <li> <p>Using <code>ObjectIdentifier</code> </p> </li> </ol>
   */
  attachObject(
    req: operations.AttachObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AttachObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AttachObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/attach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AttachObjectResponse =
        new operations.AttachObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attachObjectResponse = utils.objectToClass(
              httpRes?.data,
              shared.AttachObjectResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case [483, 490].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.linkNameAlreadyInUseException = utils.objectToClass(
              httpRes?.data,
              shared.LinkNameAlreadyInUseException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidAttachmentException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidAttachmentException
            );
          }
          break;
        case httpRes?.status == 491:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Attaches a policy object to a regular object. An object can have a limited number of attached policies.
   */
  attachPolicy(
    req: operations.AttachPolicyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AttachPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AttachPolicyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/policy/attach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AttachPolicyResponse =
        new operations.AttachPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attachPolicyResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notPolicyException = utils.objectToClass(
              httpRes?.data,
              shared.NotPolicyException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Attaches the specified object to the specified index.
   */
  attachToIndex(
    req: operations.AttachToIndexRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AttachToIndexResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AttachToIndexRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/index/attach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AttachToIndexResponse =
        new operations.AttachToIndexResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attachToIndexResponse = utils.objectToClass(
              httpRes?.data,
              shared.AttachToIndexResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidAttachmentException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidAttachmentException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.linkNameAlreadyInUseException = utils.objectToClass(
              httpRes?.data,
              shared.LinkNameAlreadyInUseException
            );
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.indexedAttributeMissingException = utils.objectToClass(
              httpRes?.data,
              shared.IndexedAttributeMissingException
            );
          }
          break;
        case httpRes?.status == 491:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notIndexException = utils.objectToClass(
              httpRes?.data,
              shared.NotIndexException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Attaches a typed link to a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  attachTypedLink(
    req: operations.AttachTypedLinkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AttachTypedLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AttachTypedLinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/attach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AttachTypedLinkResponse =
        new operations.AttachTypedLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.attachTypedLinkResponse = utils.objectToClass(
              httpRes?.data,
              shared.AttachTypedLinkResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case [483, 489].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidAttachmentException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidAttachmentException
            );
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Performs all the read operations in a batch.
   */
  batchRead(
    req: operations.BatchReadRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BatchReadResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BatchReadRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/batchread#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BatchReadResponse =
        new operations.BatchReadResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchReadResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchReadResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Performs all the write operations in a batch. Either all the operations succeed or none.
   */
  batchWrite(
    req: operations.BatchWriteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BatchWriteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BatchWriteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/batchwrite#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BatchWriteResponse =
        new operations.BatchWriteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchWriteResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchWriteResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchWriteException = utils.objectToClass(
              httpRes?.data,
              shared.BatchWriteException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a <a>Directory</a> by copying the published schema into the directory. A directory cannot be created without a schema.
   */
  createDirectory(
    req: operations.CreateDirectoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDirectoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDirectoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/directory/create#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDirectoryResponse =
        new operations.CreateDirectoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDirectoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateDirectoryResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryAlreadyExistsException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryAlreadyExistsException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new <a>Facet</a> in a schema. Facet creation is allowed only in development or applied schemas.
   */
  createFacet(
    req: operations.CreateFacetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateFacetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateFacetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/facet/create#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateFacetResponse =
        new operations.CreateFacetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createFacetResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetAlreadyExistsException = utils.objectToClass(
              httpRes?.data,
              shared.FacetAlreadyExistsException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRuleException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidRuleException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an index object. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html">Indexing</a> for more information.
   */
  createIndex(
    req: operations.CreateIndexRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateIndexResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateIndexRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/index#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateIndexResponse =
        new operations.CreateIndexResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createIndexResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateIndexResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.linkNameAlreadyInUseException = utils.objectToClass(
              httpRes?.data,
              shared.LinkNameAlreadyInUseException
            );
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsupportedIndexTypeException = utils.objectToClass(
              httpRes?.data,
              shared.UnsupportedIndexTypeException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet.
   */
  createObject(
    req: operations.CreateObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateObjectResponse =
        new operations.CreateObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createObjectResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateObjectResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.linkNameAlreadyInUseException = utils.objectToClass(
              httpRes?.data,
              shared.LinkNameAlreadyInUseException
            );
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unsupportedIndexTypeException = utils.objectToClass(
              httpRes?.data,
              shared.UnsupportedIndexTypeException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Creates a new schema in a development state. A schema can exist in three phases:</p> <ul> <li> <p> <i>Development:</i> This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.</p> </li> <li> <p> <i>Published:</i> Published schemas are immutable and have a version associated with them.</p> </li> <li> <p> <i>Applied:</i> Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. </p> </li> </ul>
   */
  createSchema(
    req: operations.CreateSchemaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSchemaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateSchemaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/create";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSchemaResponse =
        new operations.CreateSchemaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSchemaResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateSchemaResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case [485, 487].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schemaAlreadyExistsException = utils.objectToClass(
              httpRes?.data,
              shared.SchemaAlreadyExistsException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  createTypedLinkFacet(
    req: operations.CreateTypedLinkFacetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTypedLinkFacetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateTypedLinkFacetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/facet/create#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTypedLinkFacetResponse =
        new operations.CreateTypedLinkFacetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createTypedLinkFacetResponse = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetAlreadyExistsException = utils.objectToClass(
              httpRes?.data,
              shared.FacetAlreadyExistsException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRuleException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidRuleException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
   */
  deleteDirectory(
    req: operations.DeleteDirectoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDirectoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDirectoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/directory#x-amz-data-partition";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDirectoryResponse =
        new operations.DeleteDirectoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteDirectoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeleteDirectoryResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotDisabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotDisabledException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryDeletedException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryDeletedException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a given <a>Facet</a>. All attributes and <a>Rule</a>s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
   */
  deleteFacet(
    req: operations.DeleteFacetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteFacetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteFacetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/facet/delete#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteFacetResponse =
        new operations.DeleteFacetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteFacetResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetInUseException = utils.objectToClass(
              httpRes?.data,
              shared.FacetInUseException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted.
   */
  deleteObject(
    req: operations.DeleteObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/delete#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteObjectResponse =
        new operations.DeleteObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteObjectResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.objectNotDetachedException = utils.objectToClass(
              httpRes?.data,
              shared.ObjectNotDetachedException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a given schema. Schemas in a development and published state can only be deleted.
   */
  deleteSchema(
    req: operations.DeleteSchemaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSchemaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteSchemaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema#x-amz-data-partition";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSchemaResponse =
        new operations.DeleteSchemaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSchemaResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeleteSchemaResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.stillContainsLinksException = utils.objectToClass(
              httpRes?.data,
              shared.StillContainsLinksException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  deleteTypedLinkFacet(
    req: operations.DeleteTypedLinkFacetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteTypedLinkFacetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteTypedLinkFacetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/facet/delete#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteTypedLinkFacetResponse =
        new operations.DeleteTypedLinkFacetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteTypedLinkFacetResponse = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detaches the specified object from the specified index.
   */
  detachFromIndex(
    req: operations.DetachFromIndexRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DetachFromIndexResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DetachFromIndexRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/index/detach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DetachFromIndexResponse =
        new operations.DetachFromIndexResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.detachFromIndexResponse = utils.objectToClass(
              httpRes?.data,
              shared.DetachFromIndexResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.objectAlreadyDetachedException = utils.objectToClass(
              httpRes?.data,
              shared.ObjectAlreadyDetachedException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notIndexException = utils.objectToClass(
              httpRes?.data,
              shared.NotIndexException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
   */
  detachObject(
    req: operations.DetachObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DetachObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DetachObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/detach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DetachObjectResponse =
        new operations.DetachObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.detachObjectResponse = utils.objectToClass(
              httpRes?.data,
              shared.DetachObjectResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notNodeException = utils.objectToClass(
              httpRes?.data,
              shared.NotNodeException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detaches a policy from an object.
   */
  detachPolicy(
    req: operations.DetachPolicyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DetachPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DetachPolicyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/policy/detach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DetachPolicyResponse =
        new operations.DetachPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.detachPolicyResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notPolicyException = utils.objectToClass(
              httpRes?.data,
              shared.NotPolicyException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Detaches a typed link from a specified source and target object. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  detachTypedLink(
    req: operations.DetachTypedLinkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DetachTypedLinkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DetachTypedLinkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/detach#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DetachTypedLinkResponse =
        new operations.DetachTypedLinkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
   */
  disableDirectory(
    req: operations.DisableDirectoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DisableDirectoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisableDirectoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/directory/disable#x-amz-data-partition";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisableDirectoryResponse =
        new operations.DisableDirectoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.disableDirectoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.DisableDirectoryResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryDeletedException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryDeletedException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
   */
  enableDirectory(
    req: operations.EnableDirectoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.EnableDirectoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EnableDirectoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/directory/enable#x-amz-data-partition";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EnableDirectoryResponse =
        new operations.EnableDirectoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.enableDirectoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.EnableDirectoryResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryDeletedException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryDeletedException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns current applied schema version ARN, including the minor version in use.
   */
  getAppliedSchemaVersion(
    req: operations.GetAppliedSchemaVersionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAppliedSchemaVersionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAppliedSchemaVersionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/getappliedschema";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAppliedSchemaVersionResponse =
        new operations.GetAppliedSchemaVersionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAppliedSchemaVersionResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetAppliedSchemaVersionResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves metadata about a directory.
   */
  getDirectory(
    req: operations.GetDirectoryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDirectoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDirectoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/directory/get#x-amz-data-partition";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDirectoryResponse =
        new operations.GetDirectoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getDirectoryResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetDirectoryResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of the <a>Facet</a>, such as facet name, attributes, <a>Rule</a>s, or <code>ObjectType</code>. You can call this on all kinds of schema facets -- published, development, or applied.
   */
  getFacet(
    req: operations.GetFacetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFacetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFacetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFacetResponse = new operations.GetFacetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getFacetResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetFacetResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves attributes that are associated with a typed link.
   */
  getLinkAttributes(
    req: operations.GetLinkAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetLinkAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetLinkAttributesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/attributes/get#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetLinkAttributesResponse =
        new operations.GetLinkAttributesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getLinkAttributesResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetLinkAttributesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves attributes within a facet that are associated with an object.
   */
  getObjectAttributes(
    req: operations.GetObjectAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetObjectAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetObjectAttributesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/attributes/get#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetObjectAttributesResponse =
        new operations.GetObjectAttributesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getObjectAttributesResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetObjectAttributesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves metadata about an object.
   */
  getObjectInformation(
    req: operations.GetObjectInformationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetObjectInformationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetObjectInformationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/information#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetObjectInformationResponse =
        new operations.GetObjectInformationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getObjectInformationResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetObjectInformationResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a JSON representation of the schema. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat">JSON Schema Format</a> for more information.
   */
  getSchemaAsJson(
    req: operations.GetSchemaAsJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSchemaAsJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSchemaAsJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSchemaAsJsonResponse =
        new operations.GetSchemaAsJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSchemaAsJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetSchemaAsJsonResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case [483, 487].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the identity attribute order for a specific <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  getTypedLinkFacetInformation(
    req: operations.GetTypedLinkFacetInformationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTypedLinkFacetInformationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTypedLinkFacetInformationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/facet/get#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTypedLinkFacetInformationResponse =
        new operations.GetTypedLinkFacetInformationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTypedLinkFacetInformationResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTypedLinkFacetInformationResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists schema major versions applied to a directory. If <code>SchemaArn</code> is provided, lists the minor version.
   */
  listAppliedSchemaArns(
    req: operations.ListAppliedSchemaArnsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListAppliedSchemaArnsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListAppliedSchemaArnsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/applied";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAppliedSchemaArnsResponse =
        new operations.ListAppliedSchemaArnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAppliedSchemaArnsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAppliedSchemaArnsResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists indices attached to the specified object.
   */
  listAttachedIndices(
    req: operations.ListAttachedIndicesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListAttachedIndicesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListAttachedIndicesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/indices#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListAttachedIndicesResponse =
        new operations.ListAttachedIndicesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAttachedIndicesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAttachedIndicesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
   */
  listDevelopmentSchemaArns(
    req: operations.ListDevelopmentSchemaArnsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListDevelopmentSchemaArnsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListDevelopmentSchemaArnsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/development";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListDevelopmentSchemaArnsResponse =
        new operations.ListDevelopmentSchemaArnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDevelopmentSchemaArnsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDevelopmentSchemaArnsResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists directories created within an account.
   */
  listDirectories(
    req: operations.ListDirectoriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListDirectoriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListDirectoriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/directory/list";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListDirectoriesResponse =
        new operations.ListDirectoriesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDirectoriesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDirectoriesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves attributes attached to the facet.
   */
  listFacetAttributes(
    req: operations.ListFacetAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListFacetAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListFacetAttributesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/facet/attributes#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListFacetAttributesResponse =
        new operations.ListFacetAttributesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFacetAttributesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFacetAttributesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the names of facets that exist in a schema.
   */
  listFacetNames(
    req: operations.ListFacetNamesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListFacetNamesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListFacetNamesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/facet/list#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListFacetNamesResponse =
        new operations.ListFacetNamesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFacetNamesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFacetNamesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a paginated list of all the incoming <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  listIncomingTypedLinks(
    req: operations.ListIncomingTypedLinksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListIncomingTypedLinksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListIncomingTypedLinksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/incoming#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListIncomingTypedLinksResponse =
        new operations.ListIncomingTypedLinksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listIncomingTypedLinksResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListIncomingTypedLinksResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists objects attached to the specified index.
   */
  listIndex(
    req: operations.ListIndexRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListIndexResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListIndexRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/index/targets#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListIndexResponse =
        new operations.ListIndexResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listIndexResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListIndexResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notIndexException = utils.objectToClass(
              httpRes?.data,
              shared.NotIndexException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all attributes that are associated with an object.
   */
  listObjectAttributes(
    req: operations.ListObjectAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListObjectAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListObjectAttributesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/attributes#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListObjectAttributesResponse =
        new operations.ListObjectAttributesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listObjectAttributesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListObjectAttributesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a paginated list of child objects that are associated with a given object.
   */
  listObjectChildren(
    req: operations.ListObjectChildrenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListObjectChildrenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListObjectChildrenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/children#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListObjectChildrenResponse =
        new operations.ListObjectChildrenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listObjectChildrenResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListObjectChildrenResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notNodeException = utils.objectToClass(
              httpRes?.data,
              shared.NotNodeException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure">Directory Structure</a>.</p> <p>Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined <code>MaxResults</code>, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.</p>
   */
  listObjectParentPaths(
    req: operations.ListObjectParentPathsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListObjectParentPathsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListObjectParentPathsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/parentpaths#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListObjectParentPathsResponse =
        new operations.ListObjectParentPathsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listObjectParentPathsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListObjectParentPathsResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists parent objects that are associated with a given object in pagination fashion.
   */
  listObjectParents(
    req: operations.ListObjectParentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListObjectParentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListObjectParentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/parent#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListObjectParentsResponse =
        new operations.ListObjectParentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listObjectParentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListObjectParentsResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cannotListParentOfRootException = utils.objectToClass(
              httpRes?.data,
              shared.CannotListParentOfRootException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns policies attached to an object in pagination fashion.
   */
  listObjectPolicies(
    req: operations.ListObjectPoliciesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListObjectPoliciesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListObjectPoliciesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/policy#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListObjectPoliciesResponse =
        new operations.ListObjectPoliciesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listObjectPoliciesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListObjectPoliciesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a paginated list of all the outgoing <a>TypedLinkSpecifier</a> information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  listOutgoingTypedLinks(
    req: operations.ListOutgoingTypedLinksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListOutgoingTypedLinksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListOutgoingTypedLinksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/outgoing#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListOutgoingTypedLinksResponse =
        new operations.ListOutgoingTypedLinksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOutgoingTypedLinksResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOutgoingTypedLinksResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all of the <code>ObjectIdentifiers</code> to which a given policy is attached.
   */
  listPolicyAttachments(
    req: operations.ListPolicyAttachmentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPolicyAttachmentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPolicyAttachmentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/policy/attachment#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPolicyAttachmentsResponse =
        new operations.ListPolicyAttachmentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPolicyAttachmentsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPolicyAttachmentsResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notPolicyException = utils.objectToClass(
              httpRes?.data,
              shared.NotPolicyException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the major version families of each published schema. If a major version ARN is provided as <code>SchemaArn</code>, the minor version revisions in that family are listed instead.
   */
  listPublishedSchemaArns(
    req: operations.ListPublishedSchemaArnsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPublishedSchemaArnsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPublishedSchemaArnsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/published";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPublishedSchemaArnsResponse =
        new operations.ListPublishedSchemaArnsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPublishedSchemaArnsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListPublishedSchemaArnsResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
   */
  listTagsForResource(
    req: operations.ListTagsForResourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTagsForResourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTagsForResourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/amazonclouddirectory/2017-01-11/tags";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTagsForResourceResponse =
        new operations.ListTagsForResourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTagsForResourceResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTagsForResourceResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidTaggingRequestException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidTaggingRequestException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a paginated list of all attribute definitions for a particular <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  listTypedLinkFacetAttributes(
    req: operations.ListTypedLinkFacetAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTypedLinkFacetAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTypedLinkFacetAttributesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTypedLinkFacetAttributesResponse =
        new operations.ListTypedLinkFacetAttributesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTypedLinkFacetAttributesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTypedLinkFacetAttributesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a paginated list of <code>TypedLink</code> facet names for a particular schema. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  listTypedLinkFacetNames(
    req: operations.ListTypedLinkFacetNamesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTypedLinkFacetNamesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTypedLinkFacetNamesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/facet/list#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTypedLinkFacetNamesResponse =
        new operations.ListTypedLinkFacetNamesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTypedLinkFacetNamesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTypedLinkFacetNamesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all policies from the root of the <a>Directory</a> to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the <code>ObjectIdentifier</code> for such objects. If policies are present, it returns <code>ObjectIdentifier</code>, <code>policyId</code>, and <code>policyType</code>. Paths that don't lead to the root from the target object are ignored. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies">Policies</a>.
   */
  lookupPolicy(
    req: operations.LookupPolicyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.LookupPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.LookupPolicyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/policy/lookup#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.LookupPolicyResponse =
        new operations.LookupPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.lookupPolicyResponse = utils.objectToClass(
              httpRes?.data,
              shared.LookupPolicyResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidNextTokenException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidNextTokenException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Publishes a development schema with a major version and a recommended minor version.
   */
  publishSchema(
    req: operations.PublishSchemaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PublishSchemaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PublishSchemaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/publish#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PublishSchemaResponse =
        new operations.PublishSchemaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publishSchemaResponse = utils.objectToClass(
              httpRes?.data,
              shared.PublishSchemaResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.schemaAlreadyPublishedException = utils.objectToClass(
              httpRes?.data,
              shared.SchemaAlreadyPublishedException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Allows a schema to be updated using JSON upload. Only available for development schemas. See <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat">JSON Schema Format</a> for more information.
   */
  putSchemaFromJson(
    req: operations.PutSchemaFromJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutSchemaFromJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutSchemaFromJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutSchemaFromJsonResponse =
        new operations.PutSchemaFromJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.putSchemaFromJsonResponse = utils.objectToClass(
              httpRes?.data,
              shared.PutSchemaFromJsonResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidSchemaDocException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidSchemaDocException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRuleException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidRuleException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Removes the specified facet from the specified object.
   */
  removeFacetFromObject(
    req: operations.RemoveFacetFromObjectRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveFacetFromObjectResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveFacetFromObjectRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/facets/delete#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveFacetFromObjectResponse =
        new operations.RemoveFacetFromObjectResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.removeFacetFromObjectResponse = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * An API operation for adding tags to a resource.
   */
  tagResource(
    req: operations.TagResourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TagResourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TagResourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/amazonclouddirectory/2017-01-11/tags/add";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TagResourceResponse =
        new operations.TagResourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.tagResourceResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidTaggingRequestException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidTaggingRequestException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * An API operation for removing tags from a resource.
   */
  untagResource(
    req: operations.UntagResourceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UntagResourceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UntagResourceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/tags/remove";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UntagResourceResponse =
        new operations.UntagResourceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.untagResourceResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidTaggingRequestException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidTaggingRequestException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * <p>Does the following:</p> <ol> <li> <p>Adds new <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Updates existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> <li> <p>Deletes existing <code>Attributes</code>, <code>Rules</code>, or <code>ObjectTypes</code>.</p> </li> </ol>
   */
  updateFacet(
    req: operations.UpdateFacetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateFacetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateFacetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateFacetResponse =
        new operations.UpdateFacetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateFacetResponse = utils.objectToClass(httpRes?.data);
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidFacetUpdateException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidFacetUpdateException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRuleException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidRuleException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its <code>IdentityAttributeOrder</code>.
   */
  updateLinkAttributes(
    req: operations.UpdateLinkAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateLinkAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateLinkAttributesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/attributes/update#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateLinkAttributesResponse =
        new operations.UpdateLinkAttributesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateLinkAttributesResponse = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a given object's attributes.
   */
  updateObjectAttributes(
    req: operations.UpdateObjectAttributesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateObjectAttributesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateObjectAttributesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/object/update#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateObjectAttributesResponse =
        new operations.UpdateObjectAttributesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateObjectAttributesResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateObjectAttributesResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.directoryNotEnabledException = utils.objectToClass(
              httpRes?.data,
              shared.DirectoryNotEnabledException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.linkNameAlreadyInUseException = utils.objectToClass(
              httpRes?.data,
              shared.LinkNameAlreadyInUseException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the schema name with a new name. Only development schema names can be updated.
   */
  updateSchema(
    req: operations.UpdateSchemaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateSchemaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateSchemaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/update#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateSchemaResponse =
        new operations.UpdateSchemaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateSchemaResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateSchemaResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a <a>TypedLinkFacet</a>. For more information, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink">Typed link</a>.
   */
  updateTypedLinkFacet(
    req: operations.UpdateTypedLinkFacetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateTypedLinkFacetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateTypedLinkFacetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/typedlink/facet#x-amz-data-partition";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateTypedLinkFacetResponse =
        new operations.UpdateTypedLinkFacetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateTypedLinkFacetResponse = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetValidationException = utils.objectToClass(
              httpRes?.data,
              shared.FacetValidationException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidFacetUpdateException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidFacetUpdateException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 489:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.facetNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.FacetNotFoundException
            );
          }
          break;
        case httpRes?.status == 490:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidRuleException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidRuleException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upgrades a single directory in-place using the <code>PublishedSchemaArn</code> with schema updates found in <code>MinorVersion</code>. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.
   */
  upgradeAppliedSchema(
    req: operations.UpgradeAppliedSchemaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpgradeAppliedSchemaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpgradeAppliedSchemaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/upgradeapplied";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpgradeAppliedSchemaResponse =
        new operations.UpgradeAppliedSchemaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upgradeAppliedSchemaResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpgradeAppliedSchemaResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incompatibleSchemaException = utils.objectToClass(
              httpRes?.data,
              shared.IncompatibleSchemaException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidAttachmentException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidAttachmentException
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Upgrades a published schema under a new minor version revision using the current contents of <code>DevelopmentSchemaArn</code>.
   */
  upgradePublishedSchema(
    req: operations.UpgradePublishedSchemaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpgradePublishedSchemaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpgradePublishedSchemaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/amazonclouddirectory/2017-01-11/schema/upgradepublished";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpgradePublishedSchemaResponse =
        new operations.UpgradePublishedSchemaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.upgradePublishedSchemaResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpgradePublishedSchemaResponse
            );
          }
          break;
        case httpRes?.status == 480:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalServiceException = utils.objectToClass(
              httpRes?.data,
              shared.InternalServiceException
            );
          }
          break;
        case httpRes?.status == 481:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidArnException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidArnException
            );
          }
          break;
        case httpRes?.status == 482:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retryableConflictException = utils.objectToClass(
              httpRes?.data,
              shared.RetryableConflictException
            );
          }
          break;
        case httpRes?.status == 483:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationException = utils.objectToClass(
              httpRes?.data,
              shared.ValidationException
            );
          }
          break;
        case httpRes?.status == 484:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.incompatibleSchemaException = utils.objectToClass(
              httpRes?.data,
              shared.IncompatibleSchemaException
            );
          }
          break;
        case httpRes?.status == 485:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accessDeniedException = utils.objectToClass(
              httpRes?.data,
              shared.AccessDeniedException
            );
          }
          break;
        case httpRes?.status == 486:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resourceNotFoundException = utils.objectToClass(
              httpRes?.data,
              shared.ResourceNotFoundException
            );
          }
          break;
        case httpRes?.status == 487:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.invalidAttachmentException = utils.objectToClass(
              httpRes?.data,
              shared.InvalidAttachmentException
            );
          }
          break;
        case httpRes?.status == 488:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.limitExceededException = utils.objectToClass(
              httpRes?.data,
              shared.LimitExceededException
            );
          }
          break;
      }

      return res;
    });
  }
}
