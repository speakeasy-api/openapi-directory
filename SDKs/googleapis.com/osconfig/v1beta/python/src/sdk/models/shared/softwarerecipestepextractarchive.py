"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SoftwareRecipeStepExtractArchiveTypeEnum(str, Enum):
    r"""Required. The type of the archive to extract."""
    ARCHIVE_TYPE_UNSPECIFIED = 'ARCHIVE_TYPE_UNSPECIFIED'
    TAR = 'TAR'
    TAR_GZIP = 'TAR_GZIP'
    TAR_BZIP = 'TAR_BZIP'
    TAR_LZMA = 'TAR_LZMA'
    TAR_XZ = 'TAR_XZ'
    ZIP = 'ZIP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SoftwareRecipeStepExtractArchive:
    r"""Extracts an archive of the type specified in the specified directory."""
    
    artifact_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artifactId'), 'exclude': lambda f: f is None }})
    r"""Required. The id of the relevant artifact in the recipe."""  
    destination: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""Directory to extract archive to. Defaults to `/` on Linux or `C:\` on Windows."""  
    type: Optional[SoftwareRecipeStepExtractArchiveTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. The type of the archive to extract."""  
    