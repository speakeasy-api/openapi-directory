<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Thermostat 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * The method createnewschedule creates a new schedule stored in the backup list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleResponse
     */
	public function createnewschedule(
        \OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/createnewschedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatenewscheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naNewScheduleResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NANewScheduleResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The method getmeasure returns the measurements of a device or a module.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetmeasureRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetmeasureSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetmeasureResponse
     */
	public function getmeasure(
        \OpenAPI\OpenAPI\Models\Operations\GetmeasureRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetmeasureSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetmeasureResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getmeasure');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetmeasureRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetmeasureResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naMeasureResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAMeasureResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The method getthermostatsdata returns information about user's thermostats such as their last measurements.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataResponse
     */
	public function getthermostatsdata(
        \OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getthermostatsdata');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetthermostatsdataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naThermostatDataResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAThermostatDataResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The method setthermpoint changes the Thermostat manual temperature setpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetthermpointRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SetthermpointSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SetthermpointResponse
     */
	public function setthermpoint(
        \OpenAPI\OpenAPI\Models\Operations\SetthermpointRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SetthermpointSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SetthermpointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setthermpoint');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SetthermpointRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetthermpointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naOkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAOkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The method switchschedule switches the Thermostat's schedule to another existing schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SwitchscheduleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SwitchscheduleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SwitchscheduleResponse
     */
	public function switchschedule(
        \OpenAPI\OpenAPI\Models\Operations\SwitchscheduleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SwitchscheduleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SwitchscheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/switchschedule');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SwitchscheduleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SwitchscheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naOkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAOkResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * The method syncschedule changes the Thermostat weekly schedule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SyncscheduleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SyncscheduleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SyncscheduleResponse
     */
	public function syncschedule(
        \OpenAPI\OpenAPI\Models\Operations\SyncscheduleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SyncscheduleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SyncscheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/syncschedule');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SyncscheduleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SyncscheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->naOkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NAOkResponse', 'json');
            }
        }

        return $response;
    }
}