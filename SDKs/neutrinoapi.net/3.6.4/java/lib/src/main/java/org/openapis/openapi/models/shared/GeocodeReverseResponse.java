/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

public class GeocodeReverseResponse {
    /**
     * The complete address using comma-separated values
     */
    @JsonProperty("address")
    public String address;

    public GeocodeReverseResponse withAddress(String address) {
        this.address = address;
        return this;
    }
    
    /**
     * The components which make up the address such as road, city, state, etc
     */
    @JsonProperty("address-components")
    public java.util.Map<String, String> addressComponents;

    public GeocodeReverseResponse withAddressComponents(java.util.Map<String, String> addressComponents) {
        this.addressComponents = addressComponents;
        return this;
    }
    
    /**
     * The city of the location
     */
    @JsonProperty("city")
    public String city;

    public GeocodeReverseResponse withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * The country of the location
     */
    @JsonProperty("country")
    public String country;

    public GeocodeReverseResponse withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The ISO 2-letter country code of the location
     */
    @JsonProperty("country-code")
    public String countryCode;

    public GeocodeReverseResponse withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * The ISO 3-letter country code of the location
     */
    @JsonProperty("country-code3")
    public String countryCode3;

    public GeocodeReverseResponse withCountryCode3(String countryCode3) {
        this.countryCode3 = countryCode3;
        return this;
    }
    
    /**
     * ISO 4217 currency code associated with the country
     */
    @JsonProperty("currency-code")
    public String currencyCode;

    public GeocodeReverseResponse withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * True if these coordinates map to a real location
     */
    @JsonProperty("found")
    public Boolean found;

    public GeocodeReverseResponse withFound(Boolean found) {
        this.found = found;
        return this;
    }
    
    /**
     * The location latitude
     */
    @JsonProperty("latitude")
    public Double latitude;

    public GeocodeReverseResponse withLatitude(Double latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * Array of strings containing any location tags associated with the address. Tags are additional pieces of metadata about a specific location, there are thousands of different tags. Some examples of tags: shop, office, cafe, bank, pub
     */
    @JsonProperty("location-tags")
    public String[] locationTags;

    public GeocodeReverseResponse withLocationTags(String[] locationTags) {
        this.locationTags = locationTags;
        return this;
    }
    
    /**
     * The detected location type ordered roughly from most to least precise, possible values are: &lt;br&gt; &lt;ul&gt; &lt;li&gt;address - indicates a precise street address&lt;/li&gt; &lt;li&gt;street - accurate to the street level but may not point to the exact location of the house/building number&lt;/li&gt; &lt;li&gt;city - accurate to the city level, this includes villages, towns, suburbs, etc&lt;/li&gt; &lt;li&gt;postal-code - indicates a postal code area (no house or street information present)&lt;/li&gt; &lt;li&gt;railway - location is part of a rail network such as a station or railway track&lt;/li&gt; &lt;li&gt;natural - indicates a natural feature, for example a mountain peak or a waterway&lt;/li&gt; &lt;li&gt;island - location is an island or archipelago&lt;/li&gt; &lt;li&gt;administrative - indicates an administrative boundary such as a country, state or province&lt;/li&gt; &lt;/ul&gt;
     */
    @JsonProperty("location-type")
    public String locationType;

    public GeocodeReverseResponse withLocationType(String locationType) {
        this.locationType = locationType;
        return this;
    }
    
    /**
     * The location longitude
     */
    @JsonProperty("longitude")
    public Double longitude;

    public GeocodeReverseResponse withLongitude(Double longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * The formatted address using local standards suitable for printing on an envelope
     */
    @JsonProperty("postal-address")
    public String postalAddress;

    public GeocodeReverseResponse withPostalAddress(String postalAddress) {
        this.postalAddress = postalAddress;
        return this;
    }
    
    /**
     * The postal code for the location
     */
    @JsonProperty("postal-code")
    public String postalCode;

    public GeocodeReverseResponse withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * The ISO 3166-2 region code for the location
     */
    @JsonProperty("region-code")
    public String regionCode;

    public GeocodeReverseResponse withRegionCode(String regionCode) {
        this.regionCode = regionCode;
        return this;
    }
    
    /**
     * The state of the location
     */
    @JsonProperty("state")
    public String state;

    public GeocodeReverseResponse withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Map containing timezone details for the location
     */
    @JsonProperty("timezone")
    public java.util.Map<String, Timezone> timezone;

    public GeocodeReverseResponse withTimezone(java.util.Map<String, Timezone> timezone) {
        this.timezone = timezone;
        return this;
    }
    
    public GeocodeReverseResponse(@JsonProperty("address") String address, @JsonProperty("address-components") java.util.Map<String, String> addressComponents, @JsonProperty("city") String city, @JsonProperty("country") String country, @JsonProperty("country-code") String countryCode, @JsonProperty("country-code3") String countryCode3, @JsonProperty("currency-code") String currencyCode, @JsonProperty("found") Boolean found, @JsonProperty("latitude") Double latitude, @JsonProperty("location-tags") String[] locationTags, @JsonProperty("location-type") String locationType, @JsonProperty("longitude") Double longitude, @JsonProperty("postal-address") String postalAddress, @JsonProperty("postal-code") String postalCode, @JsonProperty("region-code") String regionCode, @JsonProperty("state") String state, @JsonProperty("timezone") java.util.Map<String, Timezone> timezone) {
        this.address = address;
        this.addressComponents = addressComponents;
        this.city = city;
        this.country = country;
        this.countryCode = countryCode;
        this.countryCode3 = countryCode3;
        this.currencyCode = currencyCode;
        this.found = found;
        this.latitude = latitude;
        this.locationTags = locationTags;
        this.locationType = locationType;
        this.longitude = longitude;
        this.postalAddress = postalAddress;
        this.postalCode = postalCode;
        this.regionCode = regionCode;
        this.state = state;
        this.timezone = timezone;
  }
}
