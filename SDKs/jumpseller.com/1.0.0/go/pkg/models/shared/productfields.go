// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProductFieldsPackageFormatEnum - Format the product package
type ProductFieldsPackageFormatEnum string

const (
	ProductFieldsPackageFormatEnumBox      ProductFieldsPackageFormatEnum = "box"
	ProductFieldsPackageFormatEnumCylinder ProductFieldsPackageFormatEnum = "cylinder"
)

func (e ProductFieldsPackageFormatEnum) ToPointer() *ProductFieldsPackageFormatEnum {
	return &e
}

func (e *ProductFieldsPackageFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "box":
		fallthrough
	case "cylinder":
		*e = ProductFieldsPackageFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductFieldsPackageFormatEnum: %v", v)
	}
}

// ProductFieldsStatusEnum - Status of the product
type ProductFieldsStatusEnum string

const (
	ProductFieldsStatusEnumAvailable    ProductFieldsStatusEnum = "available"
	ProductFieldsStatusEnumNotAvailable ProductFieldsStatusEnum = "not-available"
	ProductFieldsStatusEnumDisabled     ProductFieldsStatusEnum = "disabled"
)

func (e ProductFieldsStatusEnum) ToPointer() *ProductFieldsStatusEnum {
	return &e
}

func (e *ProductFieldsStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "available":
		fallthrough
	case "not-available":
		fallthrough
	case "disabled":
		*e = ProductFieldsStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProductFieldsStatusEnum: %v", v)
	}
}

type ProductFields struct {
	// Barcode of the product
	Barcode    *string          `json:"barcode,omitempty"`
	Categories []CategoryFields `json:"categories,omitempty"`
	// Date of product creation
	CreatedAt *string `json:"created_at,omitempty"`
	// Description of the product
	Description *string `json:"description,omitempty"`
	// Diameter of the product
	Diameter *float32 `json:"diameter,omitempty"`
	// Discount of the product
	Discount *float32 `json:"discount,omitempty"`
	// True if the product is featured
	Featured *bool `json:"featured,omitempty"`
	// Category of a Product based on the Google product taxonomy
	GoogleProductCategory *string `json:"google_product_category,omitempty"`
	// Height of the product
	Height *float32 `json:"height,omitempty"`
	// Unique identifier of the product
	ID     *int          `json:"id,omitempty"`
	Images []ImageFields `json:"images,omitempty"`
	// Length of the product
	Length *float32 `json:"length,omitempty"`
	// Name of the product
	Name *string `json:"name,omitempty"`
	// Format the product package
	PackageFormat *ProductFieldsPackageFormatEnum `json:"package_format,omitempty"`
	// Product unique URL path
	Permalink *string `json:"permalink,omitempty"`
	// Price of the product
	Price *float32 `json:"price,omitempty"`
	// Stock Keeping Unit of the product
	Sku *string `json:"sku,omitempty"`
	// Status of the product
	Status *ProductFieldsStatusEnum `json:"status,omitempty"`
	// Quantity in stock for the product
	Stock *int `json:"stock,omitempty"`
	// True if the Product has unlimited stock
	StockUnlimited *bool           `json:"stock_unlimited,omitempty"`
	Variants       []VariantFields `json:"variants,omitempty"`
	// Weight of the product
	Weight *float32 `json:"weight,omitempty"`
	// Width of the product
	Width *float32 `json:"width,omitempty"`
}
