"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import facetattributeupdate as shared_facetattributeupdate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateFacetRequestBodyObjectTypeEnum(str, Enum):
    r"""The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details."""
    NODE = 'NODE'
    LEAF_NODE = 'LEAF_NODE'
    POLICY = 'POLICY'
    INDEX = 'INDEX'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFacetRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})
    r"""The name of the facet."""  
    attribute_updates: Optional[list[shared_facetattributeupdate.FacetAttributeUpdate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttributeUpdates'), 'exclude': lambda f: f is None }})
    r"""List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform."""  
    object_type: Optional[UpdateFacetRequestBodyObjectTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObjectType'), 'exclude': lambda f: f is None }})
    r"""The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details."""  
    

@dataclasses.dataclass
class UpdateFacetRequest:
    
    request_body: UpdateFacetRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_data_partition: str = dataclasses.field(metadata={'header': { 'field_name': 'x-amz-data-partition', 'style': 'simple', 'explode': False }})
    r"""The Amazon Resource Name (ARN) that is associated with the <a>Facet</a>. For more information, see <a>arns</a>."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateFacetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    facet_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""FacetNotFoundException"""  
    facet_validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""FacetValidationException"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    invalid_arn_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidArnException"""  
    invalid_facet_update_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidFacetUpdateException"""  
    invalid_rule_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRuleException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    retryable_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RetryableConflictException"""  
    update_facet_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    