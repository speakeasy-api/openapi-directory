"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import contenttype_enum as shared_contenttype_enum
from ..shared import hilliness_enum as shared_hilliness_enum
from ..shared import report_enum as shared_report_enum
from ..shared import routetype_enum as shared_routetype_enum
from ..shared import travelmode_enum as shared_travelmode_enum
from ..shared import versionnumber_enum as shared_versionnumber_enum
from ..shared import windingness_enum as shared_windingness_enum
from enum import Enum
from typing import Optional

class GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeVehicleEngineTypeEnum(str, Enum):
    r"""Engine type of the vehicle."""
    COMBUSTION = 'combustion'
    ELECTRIC = 'electric'


@dataclasses.dataclass
class GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeRequest:
    
    content_type: shared_contenttype_enum.ContentTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'contentType', 'style': 'simple', 'explode': False }})
    r"""The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters."""  
    origin: str = dataclasses.field(metadata={'path_param': { 'field_name': 'origin', 'style': 'simple', 'explode': False }})
    r"""Point from which the range calculation should start."""  
    version_number: shared_versionnumber_enum.VersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Service version number. The current value is 1."""  
    acceleration_efficiency: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'accelerationEfficiency', 'style': 'form', 'explode': True }})
    r"""Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed)."""  
    arrive_at: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'arriveAt', 'style': 'form', 'explode': True }})
    r"""The date and time of arrival at the destination point. It must be specified as a dateTime."""  
    auxiliary_power_in_liters_per_hour: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'auxiliaryPowerInLitersPerHour', 'style': 'form', 'explode': True }})
    r"""Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour."""  
    avoid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'avoid', 'style': 'form', 'explode': True }})
    r"""Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
    Possible values:
      - tollRoads
      - motorways
      - ferries
      - unpavedRoads
      - carpools
    """  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""Specifies the jsonp callback method."""  
    constant_speed_consumption_ink_wh_per_hundredkm: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'constantSpeedConsumptionInkWhPerHundredkm', 'style': 'form', 'explode': True }})
    r"""Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs."""  
    constant_speed_consumption_in_liters_per_hundredkm: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'constantSpeedConsumptionInLitersPerHundredkm', 'style': 'form', 'explode': True }})
    r"""Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs."""  
    current_fuel_in_liters: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'currentFuelInLiters', 'style': 'form', 'explode': True }})
    r"""Specifies the current supply of fuel in liters."""  
    deceleration_efficiency: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'decelerationEfficiency', 'style': 'form', 'explode': True }})
    r"""Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost)."""  
    depart_at: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'departAt', 'style': 'form', 'explode': True }})
    r"""The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime."""  
    downhill_efficiency: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'downhillEfficiency', 'style': 'form', 'explode': True }})
    r"""Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost)."""  
    energy_budget_ink_wh: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'energyBudgetInkWh', 'style': 'form', 'explode': True }})
    r"""Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model."""  
    fuel_budget_in_liters: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fuelBudgetInLiters', 'style': 'form', 'explode': True }})
    r"""Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model."""  
    fuel_energy_density_in_m_joules_per_liter: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fuelEnergyDensityInMJoulesPerLiter', 'style': 'form', 'explode': True }})
    r"""Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ)."""  
    hilliness: Optional[shared_hilliness_enum.HillinessEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'hilliness', 'style': 'form', 'explode': True }})
    r"""Degree of hilliness for calculating a thrilling route."""  
    report: Optional[shared_report_enum.ReportEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'report', 'style': 'form', 'explode': True }})
    r"""Specifies which data should be reported for diagnosis purposes."""  
    route_type: Optional[shared_routetype_enum.RouteTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'routeType', 'style': 'form', 'explode': True }})
    r"""The type of route requested."""  
    time_budget_in_sec: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timeBudgetInSec', 'style': 'form', 'explode': True }})
    r"""Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time."""  
    traffic: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'traffic', 'style': 'form', 'explode': True }})
    r"""Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used."""  
    travel_mode: Optional[shared_travelmode_enum.TravelModeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'travelMode', 'style': 'form', 'explode': True }})
    r"""The mode of travel for the requested route."""  
    uphill_efficiency: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uphillEfficiency', 'style': 'form', 'explode': True }})
    r"""Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed)."""  
    vehicle_axle_weight: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleAxleWeight', 'style': 'form', 'explode': True }})
    r"""Weight per axle of the vehicle in kg."""  
    vehicle_commercial: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleCommercial', 'style': 'form', 'explode': True }})
    r"""Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads."""  
    vehicle_engine_type: Optional[GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeVehicleEngineTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleEngineType', 'style': 'form', 'explode': True }})
    r"""Engine type of the vehicle."""  
    vehicle_height: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleHeight', 'style': 'form', 'explode': True }})
    r"""Height of the vehicle in meters."""  
    vehicle_length: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleLength', 'style': 'form', 'explode': True }})
    r"""Length of the vehicle in meters."""  
    vehicle_load_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleLoadType', 'style': 'form', 'explode': True }})
    r"""Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
    Use these for routing in the US:
    
      - <i>USHazmatClass1</i> Explosives
      - <i>USHazmatClass2</i> Compressed gas
      - <i>USHazmatClass3</i> Flammable liquids
      - <i>USHazmatClass4</i> Flammable solids
      - <i>USHazmatClass5</i> Oxidizers
      - <i>USHazmatClass6</i> Poisons
      - <i>USHazmatClass7</i> Radioactive
      - <i>USHazmatClass8</i> Corrosives
      - <i>USHazmatClass9</i> Miscellaneous
    
    Use these for routing in all other countries:
    
      - <i>otherHazmatExplosive</i> Explosives
      - <i>otherHazmatGeneral</i> Miscellaneous
      - <i>otherHazmatHarmfulToWater</i> Harmful to water
    
    vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
    """  
    vehicle_max_speed: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleMaxSpeed', 'style': 'form', 'explode': True }})
    r"""Maximum speed of the vehicle in km/hour."""  
    vehicle_weight: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleWeight', 'style': 'form', 'explode': True }})
    r"""Weight of the vehicle in kilograms."""  
    vehicle_width: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleWidth', 'style': 'form', 'explode': True }})
    r"""Width of the vehicle in meters."""  
    windingness: Optional[shared_windingness_enum.WindingnessEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'windingness', 'style': 'form', 'explode': True }})
    r"""Amount that a thrilling route should wind."""  
    

@dataclasses.dataclass
class GetRoutingVersionNumberCalculateReachableRangeOriginContentTypeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    