// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TypesEnum string

const (
	TypesEnumAirport       TypesEnum = "airport"
	TypesEnumMinusAirport  TypesEnum = "-airport"
	TypesEnumBus           TypesEnum = "bus"
	TypesEnumMinusBus      TypesEnum = "-bus"
	TypesEnumCity          TypesEnum = "city"
	TypesEnumMinusCity     TypesEnum = "-city"
	TypesEnumCountry       TypesEnum = "country"
	TypesEnumMinusCountry  TypesEnum = "-country"
	TypesEnumStreet        TypesEnum = "street"
	TypesEnumMinusStreet   TypesEnum = "-street"
	TypesEnumTourism       TypesEnum = "tourism"
	TypesEnumMinusTourism  TypesEnum = "-tourism"
	TypesEnumTownhall      TypesEnum = "townhall"
	TypesEnumMinusTownhall TypesEnum = "-townhall"
	TypesEnumTrain         TypesEnum = "train"
	TypesEnumMinusTrain    TypesEnum = "-train"
)

func (e TypesEnum) ToPointer() *TypesEnum {
	return &e
}

func (e *TypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "airport":
		fallthrough
	case "-airport":
		fallthrough
	case "bus":
		fallthrough
	case "-bus":
		fallthrough
	case "city":
		fallthrough
	case "-city":
		fallthrough
	case "country":
		fallthrough
	case "-country":
		fallthrough
	case "street":
		fallthrough
	case "-street":
		fallthrough
	case "tourism":
		fallthrough
	case "-tourism":
		fallthrough
	case "townhall":
		fallthrough
	case "-townhall":
		fallthrough
	case "train":
		fallthrough
	case "-train":
		*e = TypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypesEnum: %v", v)
	}
}
