// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type SchemaResponsePatchPathParams struct {
	// The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`.
	SchemaResponseID string `pathParam:"style=simple,explode=false,name=schema_response_id"`
}

// SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum - A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
type SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum string

const (
	SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnumInitial           SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum = "initial"
	SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnumInProgress        SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum = "in_progress"
	SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnumApproved          SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum = "approved"
	SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnumPendingModeration SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum = "pending_moderation"
)

func (e *SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initial":
		fallthrough
	case "in_progress":
		fallthrough
	case "approved":
		fallthrough
	case "pending_moderation":
		*e = SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum: %s", s)
	}
}

// SchemaResponsePatchSchemaResponsesAttributesInput - The properties of the Schema Response.
type SchemaResponsePatchSchemaResponsesAttributesInput struct {
	// The date the Schema Response was created
	DateCreated *int64 `json:"date_created,omitempty"`
	// The date the Schema Response was most recently changed.
	DateModified *int64 `json:"date_modified,omitempty"`
	// The date the Schema Response was submitted for approval.
	DateSubmitted *int64 `json:"date_submitted,omitempty"`
	// A bool that represents whether the Schema Response is the original one that was made when the registration was created.
	IsOriginalResponse *bool `json:"is_original_response,omitempty"`
	// A bool that represents whether the Schema Response needs the current user to approve the state transition.
	IsPendingCurrentUserApproval *bool `json:"is_pending_current_user_approval,omitempty"`
	// A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
	ReviewsState *SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum `json:"reviews_state,omitempty"`
	// A user provided string representing the reason a new Schema Response was needed.
	RevisionJustification *string `json:"revision_justification,omitempty"`
	// A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{"q1": "Answer 1"}` the block key is `q1`..
	RevisionResponses map[string]interface{} `json:"revision_responses,omitempty"`
}

// SchemaResponsePatchSchemaResponsesLinks - URLs to alternative representations of the Schema Response entity.
type SchemaResponsePatchSchemaResponsesLinks struct {
	// A link to the detail page for a Schema Response.
	Self *string `json:"self,omitempty"`
}

// SchemaResponsePatchSchemaResponsesRelationships - Links to other entities or entity collections that have a relationship to the file entity.
type SchemaResponsePatchSchemaResponsesRelationships struct {
	// A link to the Registration Schema Actions endpoint for this Schema Response.
	Actions *string `json:"actions,omitempty"`
	// A link to the User who initiated the creation of the Schema Response.
	InitiatedBy *string `json:"initiated_by,omitempty"`
	// A link to the Registration for this Schema Response.
	Registration *string `json:"registration,omitempty"`
	// A link to the Registration Schema for this Schema Response.
	RegistrationSchema *string `json:"registration_schema,omitempty"`
}

type SchemaResponsePatchSchemaResponsesInput struct {
	// The properties of the Schema Response.
	Attributes SchemaResponsePatchSchemaResponsesAttributesInput `json:"attributes"`
	// URLs to alternative representations of the Schema Response entity.
	Links *SchemaResponsePatchSchemaResponsesLinks `json:"links,omitempty"`
	// Links to other entities or entity collections that have a relationship to the file entity.
	Relationships *SchemaResponsePatchSchemaResponsesRelationships `json:"relationships,omitempty"`
	// The type identifier of the Schema Response (`schema-response`).
	Type string `json:"type"`
}

type SchemaResponsePatchRequest struct {
	PathParams SchemaResponsePatchPathParams
	Request    SchemaResponsePatchSchemaResponsesInput `request:"mediaType=application/json"`
}

// SchemaResponsePatchSchemaResponsesAttributes - The properties of the Schema Response.
type SchemaResponsePatchSchemaResponsesAttributes struct {
	// The date the Schema Response was created
	DateCreated *int64
	// The date the Schema Response was most recently changed.
	DateModified *int64
	// The date the Schema Response was submitted for approval.
	DateSubmitted *int64
	// A bool that represents whether the Schema Response is the original one that was made when the registration was created.
	IsOriginalResponse *bool
	// A bool that represents whether the Schema Response needs the current user to approve the state transition.
	IsPendingCurrentUserApproval *bool
	// A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission.
	ReviewsState *SchemaResponsePatchSchemaResponsesAttributesReviewsStateEnum
	// A user provided string representing the reason a new Schema Response was needed.
	RevisionJustification *string
	// A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{"q1": "Answer 1"}` the block key is `q1`..
	RevisionResponses map[string]interface{}
	// A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema.
	UpdatedResponseKeys []interface{}
}

// SchemaResponsePatchSchemaResponses - OK
type SchemaResponsePatchSchemaResponses struct {
	// The properties of the Schema Response.
	Attributes SchemaResponsePatchSchemaResponsesAttributes
	// The unique identifier of the Schema Response.
	ID *string
	// URLs to alternative representations of the Schema Response entity.
	Links *SchemaResponsePatchSchemaResponsesLinks
	// Links to other entities or entity collections that have a relationship to the file entity.
	Relationships *SchemaResponsePatchSchemaResponsesRelationships
	// The type identifier of the Schema Response (`schema-response`).
	Type string
}

type SchemaResponsePatchResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
