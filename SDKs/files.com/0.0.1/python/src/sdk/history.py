"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class History:
    r"""Operations about histories"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def history_list(self, request: operations.HistoryListRequest) -> operations.HistoryListResponse:
        r"""List site full action history.
        List site full action history.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/history'
        
        query_params = utils.get_query_params(operations.HistoryListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HistoryListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActionEntity]])
                res.action_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def history_list_for_file(self, request: operations.HistoryListForFileRequest) -> operations.HistoryListForFileResponse:
        r"""List history for specific file.
        List history for specific file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.HistoryListForFileRequest, base_url, '/history/files/{path}', request)
        
        query_params = utils.get_query_params(operations.HistoryListForFileRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HistoryListForFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActionEntity]])
                res.action_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def history_list_for_folder(self, request: operations.HistoryListForFolderRequest) -> operations.HistoryListForFolderResponse:
        r"""List history for specific folder.
        List history for specific folder.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.HistoryListForFolderRequest, base_url, '/history/folders/{path}', request)
        
        query_params = utils.get_query_params(operations.HistoryListForFolderRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HistoryListForFolderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActionEntity]])
                res.action_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def history_list_for_user(self, request: operations.HistoryListForUserRequest) -> operations.HistoryListForUserResponse:
        r"""List history for specific user.
        List history for specific user.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.HistoryListForUserRequest, base_url, '/history/users/{user_id}', request)
        
        query_params = utils.get_query_params(operations.HistoryListForUserRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HistoryListForUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActionEntity]])
                res.action_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def history_list_logins(self, request: operations.HistoryListLoginsRequest) -> operations.HistoryListLoginsResponse:
        r"""List site login history.
        List site login history.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/history/login'
        
        query_params = utils.get_query_params(operations.HistoryListLoginsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HistoryListLoginsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ActionEntity]])
                res.action_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    