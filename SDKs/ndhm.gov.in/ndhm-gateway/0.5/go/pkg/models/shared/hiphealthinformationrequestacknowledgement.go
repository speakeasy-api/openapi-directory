// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum string

const (
	HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnumAcknowledged HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum = "ACKNOWLEDGED"
)

func (e HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum) ToPointer() *HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum {
	return &e
}

func (e *HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACKNOWLEDGED":
		*e = HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum: %v", v)
	}
}

type HIPHealthInformationRequestAcknowledgementHiRequest struct {
	SessionStatus HIPHealthInformationRequestAcknowledgementHiRequestSessionStatusEnum `json:"sessionStatus"`
	TransactionID string                                                               `json:"transactionId"`
}

type HIPHealthInformationRequestAcknowledgement struct {
	Error     *Error                                               `json:"error,omitempty"`
	HiRequest *HIPHealthInformationRequestAcknowledgementHiRequest `json:"hiRequest,omitempty"`
	// a nonce, unique for each HTTP request
	RequestID string           `json:"requestId"`
	Resp      RequestReference `json:"resp"`
	// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
	Timestamp time.Time `json:"timestamp"`
}
