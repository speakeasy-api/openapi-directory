// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

// GetPayoutsForPayorV3StatusEnum - Payout Status
type GetPayoutsForPayorV3StatusEnum string

const (
	GetPayoutsForPayorV3StatusEnumAccepted   GetPayoutsForPayorV3StatusEnum = "ACCEPTED"
	GetPayoutsForPayorV3StatusEnumRejected   GetPayoutsForPayorV3StatusEnum = "REJECTED"
	GetPayoutsForPayorV3StatusEnumSubmitted  GetPayoutsForPayorV3StatusEnum = "SUBMITTED"
	GetPayoutsForPayorV3StatusEnumQuoted     GetPayoutsForPayorV3StatusEnum = "QUOTED"
	GetPayoutsForPayorV3StatusEnumInstructed GetPayoutsForPayorV3StatusEnum = "INSTRUCTED"
	GetPayoutsForPayorV3StatusEnumCompleted  GetPayoutsForPayorV3StatusEnum = "COMPLETED"
	GetPayoutsForPayorV3StatusEnumIncomplete GetPayoutsForPayorV3StatusEnum = "INCOMPLETE"
	GetPayoutsForPayorV3StatusEnumConfirmed  GetPayoutsForPayorV3StatusEnum = "CONFIRMED"
	GetPayoutsForPayorV3StatusEnumWithdrawn  GetPayoutsForPayorV3StatusEnum = "WITHDRAWN"
)

func (e GetPayoutsForPayorV3StatusEnum) ToPointer() *GetPayoutsForPayorV3StatusEnum {
	return &e
}

func (e *GetPayoutsForPayorV3StatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCEPTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "SUBMITTED":
		fallthrough
	case "QUOTED":
		fallthrough
	case "INSTRUCTED":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "INCOMPLETE":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "WITHDRAWN":
		*e = GetPayoutsForPayorV3StatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPayoutsForPayorV3StatusEnum: %v", v)
	}
}

type GetPayoutsForPayorV3Request struct {
	// Page number. Default is 1.
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results to return in a page
	PageSize *int `queryParam:"style=form,explode=true,name=pageSize"`
	// The account owner Payor ID
	PayorID string `queryParam:"style=form,explode=true,name=payorId"`
	// Payout Memo filter - case insensitive sub-string match
	PayoutMemo *string `queryParam:"style=form,explode=true,name=payoutMemo"`
	// List of sort fields (e.g. ?sort=submittedDateTime:asc,instructedDateTime:asc,status:asc)
	// Default is submittedDateTime:asc
	// The supported sort fields are: submittedDateTime, instructedDateTime, status.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Payout Status
	Status *GetPayoutsForPayorV3StatusEnum `queryParam:"style=form,explode=true,name=status"`
	// The submitted date from range filter. Format is yyyy-MM-dd.
	SubmittedDateFrom *types.Date `queryParam:"style=form,explode=true,name=submittedDateFrom"`
	// The submitted date to range filter. Format is yyyy-MM-dd.
	SubmittedDateTo *types.Date `queryParam:"style=form,explode=true,name=submittedDateTo"`
}

type GetPayoutsForPayorV3Response struct {
	ContentType string
	// Payor data found
	GetPayoutsResponseV3 *shared.GetPayoutsResponseV3
	StatusCode           int
	RawResponse          *http.Response
	// Invalid request. See Error message payload for details of failure
	InlineResponse400 *shared.InlineResponse400
	// Invalid access token. May be expired or invalid
	InlineResponse401 *shared.InlineResponse401
	// The authentication does not have permissions to access the resource
	// This usually occurs when there is a valid authentication instance (client or user) but they do not have the required permissions
	//
	InlineResponse403 *shared.InlineResponse403
	// The resource was not found or is no longer available
	//
	InlineResponse404 *shared.InlineResponse404
}
