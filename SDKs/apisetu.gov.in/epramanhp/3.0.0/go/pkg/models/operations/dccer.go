// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DccerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type DccerRequestBodyCertificateParameters struct {
	// Applicant Name
	Name string `json:"Name"`
	// Certificate Id
	RefNo string `json:"RefNo"`
}

// DccerRequestBodyFormatEnum - The format of the certificate in response.
type DccerRequestBodyFormatEnum string

const (
	DccerRequestBodyFormatEnumPdf DccerRequestBodyFormatEnum = "pdf"
)

func (e *DccerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = DccerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DccerRequestBodyFormatEnum: %s", s)
	}
}

// DccerRequestBody - Request format
type DccerRequestBody struct {
	CertificateParameters *DccerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format DccerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Dccer504ApplicationJSONErrorEnum string

const (
	Dccer504ApplicationJSONErrorEnumGatewayTimeout Dccer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Dccer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Dccer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Dccer504ApplicationJSONErrorDescriptionEnum string

const (
	Dccer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Dccer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Dccer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Dccer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dccer504ApplicationJSON - Gateway timeout
type Dccer504ApplicationJSON struct {
	Error            *Dccer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dccer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dccer503ApplicationJSONErrorEnum string

const (
	Dccer503ApplicationJSONErrorEnumServiceUnavailable Dccer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Dccer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Dccer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Dccer503ApplicationJSONErrorDescriptionEnum string

const (
	Dccer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Dccer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Dccer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Dccer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dccer503ApplicationJSON - Service unavailable
type Dccer503ApplicationJSON struct {
	Error            *Dccer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dccer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dccer502ApplicationJSONErrorEnum string

const (
	Dccer502ApplicationJSONErrorEnumBadGatewy Dccer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Dccer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Dccer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Dccer502ApplicationJSONErrorDescriptionEnum string

const (
	Dccer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Dccer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Dccer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Dccer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dccer502ApplicationJSON - Bad gateway
type Dccer502ApplicationJSON struct {
	Error            *Dccer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dccer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dccer500ApplicationJSONErrorEnum string

const (
	Dccer500ApplicationJSONErrorEnumInternalServerError Dccer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Dccer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Dccer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Dccer500ApplicationJSONErrorDescriptionEnum string

const (
	Dccer500ApplicationJSONErrorDescriptionEnumInternalServerError Dccer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Dccer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Dccer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dccer500ApplicationJSON - Internal server error
type Dccer500ApplicationJSON struct {
	Error            *Dccer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dccer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dccer404ApplicationJSONErrorEnum string

const (
	Dccer404ApplicationJSONErrorEnumRecordNotFound Dccer404ApplicationJSONErrorEnum = "record_not_found"
	Dccer404ApplicationJSONErrorEnumURLNotFound    Dccer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Dccer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Dccer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Dccer404ApplicationJSONErrorDescriptionEnum string

const (
	Dccer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Dccer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Dccer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Dccer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Dccer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Dccer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dccer404ApplicationJSON - No record found
type Dccer404ApplicationJSON struct {
	Error            *Dccer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dccer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dccer401ApplicationJSONErrorEnum string

const (
	Dccer401ApplicationJSONErrorEnumInvalidAuthentication Dccer401ApplicationJSONErrorEnum = "invalid_authentication"
	Dccer401ApplicationJSONErrorEnumInvalidAuthorization  Dccer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Dccer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Dccer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Dccer401ApplicationJSONErrorDescriptionEnum string

const (
	Dccer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Dccer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Dccer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Dccer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Dccer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Dccer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dccer401ApplicationJSON - Unauthorized access
type Dccer401ApplicationJSON struct {
	Error            *Dccer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dccer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Dccer400ApplicationJSONErrorEnum string

const (
	Dccer400ApplicationJSONErrorEnumMissingParameter Dccer400ApplicationJSONErrorEnum = "missing_parameter"
	Dccer400ApplicationJSONErrorEnumInvalidParameter Dccer400ApplicationJSONErrorEnum = "invalid_parameter"
	Dccer400ApplicationJSONErrorEnumInvalidFormat    Dccer400ApplicationJSONErrorEnum = "invalid_format"
	Dccer400ApplicationJSONErrorEnumInvalidTxnid     Dccer400ApplicationJSONErrorEnum = "invalid_txnid"
	Dccer400ApplicationJSONErrorEnumInvalidConsentid Dccer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Dccer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Dccer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Dccer400ApplicationJSONErrorDescriptionEnum string

const (
	Dccer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Dccer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Dccer400ApplicationJSONErrorDescriptionEnumBadRequest                              Dccer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Dccer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Dccer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Dccer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Dccer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Dccer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Dccer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Dccer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Dccer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Dccer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Dccer400ApplicationJSON - Bad request
type Dccer400ApplicationJSON struct {
	Error            *Dccer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Dccer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type DccerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Dccer400ApplicationJSONObject *Dccer400ApplicationJSON
	// Unauthorized access
	Dccer401ApplicationJSONObject *Dccer401ApplicationJSON
	// No record found
	Dccer404ApplicationJSONObject *Dccer404ApplicationJSON
	// Internal server error
	Dccer500ApplicationJSONObject *Dccer500ApplicationJSON
	// Bad gateway
	Dccer502ApplicationJSONObject *Dccer502ApplicationJSON
	// Service unavailable
	Dccer503ApplicationJSONObject *Dccer503ApplicationJSON
	// Gateway timeout
	Dccer504ApplicationJSONObject *Dccer504ApplicationJSON
}
