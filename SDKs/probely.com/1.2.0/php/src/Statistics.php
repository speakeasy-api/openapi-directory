<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Statistics 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Average fix time graph data (all targets)
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllAverageFixTimeResponse
     */
	public function getTargetsAllAverageFixTime(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllAverageFixTimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/average_fix_time/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllAverageFixTimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllAverageFixTime200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsAllAverageFixTime200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Targets with open vulnerabilities pie chart data
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionPieResponse
     */
	public function getTargetsAllNeedsAttentionPie(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionPieResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/needs_attention_pie/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionPieResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllNeedsAttentionPie200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionPie200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Targets with open vulnerabilities
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionTopResponse
     */
	public function getTargetsAllNeedsAttentionTop(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionTopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/needs_attention_top/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionTopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllNeedsAttentionTop200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetTargetsAllNeedsAttentionTop200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Risk trend graph data (all targets)
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllRiskTrendResponse
     */
	public function getTargetsAllRiskTrend(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllRiskTrendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/risk_trend/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllRiskTrendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllRiskTrend200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetTargetsAllRiskTrend200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Severity trend graph data (all targets)
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllSeverityTrendResponse
     */
	public function getTargetsAllSeverityTrend(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllSeverityTrendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/severity_trend/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllSeverityTrendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllSeverityTrend200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsAllSeverityTrend200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Top 5 vulnerabilities (all targets).
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllTopVulnsResponse
     */
	public function getTargetsAllTopVulns(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllTopVulnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/all/top_vulns/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsAllTopVulnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsAllTopVulns200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetTargetsAllTopVulns200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Average vulnerability trend graph data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdAverageFixTimeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdAverageFixTimeResponse
     */
	public function getTargetsTargetIdAverageFixTime(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdAverageFixTimeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdAverageFixTimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/average_fix_time/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdAverageFixTimeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdAverageFixTimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdAverageFixTime200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdAverageFixTime200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Risk trend graph data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdRiskTrendRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdRiskTrendResponse
     */
	public function getTargetsTargetIdRiskTrend(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdRiskTrendRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdRiskTrendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/risk_trend/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdRiskTrendRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdRiskTrendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdRiskTrend200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdRiskTrend200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Severity trend graph data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdSeverityTrendRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdSeverityTrendResponse
     */
	public function getTargetsTargetIdSeverityTrend(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdSeverityTrendRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdSeverityTrendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/severity_trend/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdSeverityTrendRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdSeverityTrendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdSeverityTrend200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdSeverityTrend200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Top 5 vulnerabilities
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdTopVulnsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdTopVulnsResponse
     */
	public function getTargetsTargetIdTopVulns(
        \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdTopVulnsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdTopVulnsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/targets/{target_id}/top_vulns/', \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdTopVulnsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdTopVulnsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTargetsTargetIdTopVulns200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetTargetsTargetIdTopVulns200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
}