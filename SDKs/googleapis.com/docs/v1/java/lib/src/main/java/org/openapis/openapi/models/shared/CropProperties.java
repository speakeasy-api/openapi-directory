/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CropProperties - The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content's 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image's original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped.
 */
public class CropProperties {
    /**
     * The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("angle")
    public Float angle;

    public CropProperties withAngle(Float angle) {
        this.angle = angle;
        return this;
    }
    
    /**
     * The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offsetBottom")
    public Float offsetBottom;

    public CropProperties withOffsetBottom(Float offsetBottom) {
        this.offsetBottom = offsetBottom;
        return this;
    }
    
    /**
     * The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offsetLeft")
    public Float offsetLeft;

    public CropProperties withOffsetLeft(Float offsetLeft) {
        this.offsetLeft = offsetLeft;
        return this;
    }
    
    /**
     * The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offsetRight")
    public Float offsetRight;

    public CropProperties withOffsetRight(Float offsetRight) {
        this.offsetRight = offsetRight;
        return this;
    }
    
    /**
     * The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offsetTop")
    public Float offsetTop;

    public CropProperties withOffsetTop(Float offsetTop) {
        this.offsetTop = offsetTop;
        return this;
    }
    
    public CropProperties(){}
}
