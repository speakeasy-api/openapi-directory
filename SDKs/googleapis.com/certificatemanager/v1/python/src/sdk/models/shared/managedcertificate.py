"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authorizationattemptinfo as shared_authorizationattemptinfo
from ..shared import provisioningissue as shared_provisioningissue
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ManagedCertificateStateEnum(str, Enum):
    r"""Output only. State of the managed certificate resource."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PROVISIONING = 'PROVISIONING'
    FAILED = 'FAILED'
    ACTIVE = 'ACTIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ManagedCertificate:
    r"""Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so."""
    
    authorization_attempt_info: Optional[list[shared_authorizationattemptinfo.AuthorizationAttemptInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationAttemptInfo'), 'exclude': lambda f: f is None }})
    r"""Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource."""  
    dns_authorizations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsAuthorizations'), 'exclude': lambda f: f is None }})
    r"""Immutable. Authorizations that will be used for performing domain authorization."""  
    domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domains'), 'exclude': lambda f: f is None }})
    r"""Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution."""  
    issuance_config: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuanceConfig'), 'exclude': lambda f: f is None }})
    r"""Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa."""  
    provisioning_issue: Optional[shared_provisioningissue.ProvisioningIssue] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioningIssue'), 'exclude': lambda f: f is None }})
    r"""Information about issues with provisioning a Managed Certificate."""  
    state: Optional[ManagedCertificateStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. State of the managed certificate resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ManagedCertificateInput:
    r"""Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so."""
    
    dns_authorizations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dnsAuthorizations'), 'exclude': lambda f: f is None }})
    r"""Immutable. Authorizations that will be used for performing domain authorization."""  
    domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domains'), 'exclude': lambda f: f is None }})
    r"""Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution."""  
    issuance_config: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuanceConfig'), 'exclude': lambda f: f is None }})
    r"""Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa."""  
    