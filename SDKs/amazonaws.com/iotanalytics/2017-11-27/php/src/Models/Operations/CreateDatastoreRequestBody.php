<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateDatastoreRequestBody
{
    /**
     * The name of the data store.
     * 
     * @var string $datastoreName
     */
	#[\JMS\Serializer\Annotation\SerializedName('datastoreName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $datastoreName;
    
    /**
     *  Contains information about the partition dimensions in a data store. 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyDatastorePartitions $datastorePartitions
     */
	#[\JMS\Serializer\Annotation\SerializedName('datastorePartitions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyDatastorePartitions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateDatastoreRequestBodyDatastorePartitions $datastorePartitions = null;
    
    /**
     * Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyDatastoreStorage $datastoreStorage
     */
	#[\JMS\Serializer\Annotation\SerializedName('datastoreStorage')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyDatastoreStorage')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateDatastoreRequestBodyDatastoreStorage $datastoreStorage = null;
    
    /**
     * <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyFileFormatConfiguration $fileFormatConfiguration
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileFormatConfiguration')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyFileFormatConfiguration')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateDatastoreRequestBodyFileFormatConfiguration $fileFormatConfiguration = null;
    
    /**
     * How long, in days, message data is kept.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyRetentionPeriod $retentionPeriod
     */
	#[\JMS\Serializer\Annotation\SerializedName('retentionPeriod')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateDatastoreRequestBodyRetentionPeriod')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateDatastoreRequestBodyRetentionPeriod $retentionPeriod = null;
    
    /**
     * Metadata which can be used to manage the data store.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Tag> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('tags')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Tag>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
	public function __construct()
	{
		$this->datastoreName = "";
		$this->datastorePartitions = null;
		$this->datastoreStorage = null;
		$this->fileFormatConfiguration = null;
		$this->retentionPeriod = null;
		$this->tags = null;
	}
}
