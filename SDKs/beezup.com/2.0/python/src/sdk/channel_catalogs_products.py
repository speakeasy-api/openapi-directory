"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelCatalogsProducts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def export_channel_catalog_product_info_list(self, request: operations.ExportChannelCatalogProductInfoListRequest) -> operations.ExportChannelCatalogProductInfoListResponse:
        r"""Export channel catalog product information list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ExportChannelCatalogProductInfoListRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/products/export', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_channel_catalog_product_info_list_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ExportChannelCatalogProductInfoListRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ExportChannelCatalogProductInfoListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonLink3])
                res.beez_up_common_link3 = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_channel_catalog_product_by_channel_catalog(self, request: shared.ChannelCatalogProductByChannelCatalogRequest) -> operations.GetChannelCatalogProductByChannelCatalogResponse:
        r"""Get channel catalog products related to these channel catalogs"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/user/channelCatalogs/products'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCatalogProductByChannelCatalogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelCatalogProductByChannelCatalogResponse])
                res.channel_catalog_product_by_channel_catalog_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_channel_catalog_product_info(self, request: operations.GetChannelCatalogProductInfoRequest) -> operations.GetChannelCatalogProductInfoResponse:
        r"""Get channel catalog product information"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelCatalogProductInfoRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCatalogProductInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelCatalogProductInfo])
                res.channel_catalog_product_info = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_channel_catalog_product_info_list(self, request: operations.GetChannelCatalogProductInfoListRequest) -> operations.GetChannelCatalogProductInfoListResponse:
        r"""Get channel catalog product information list"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelCatalogProductInfoListRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/products', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_channel_catalog_product_info_list_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCatalogProductInfoListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelCatalogProductInfoList])
                res.channel_catalog_product_info_list = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_channel_catalog_products_counters(self, request: operations.GetChannelCatalogProductsCountersRequest) -> operations.GetChannelCatalogProductsCountersResponse:
        r"""Get channel catalog products' counters"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelCatalogProductsCountersRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/products/counters', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelCatalogProductsCountersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ChannelCatalogProductsCounters])
                res.channel_catalog_products_counters = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    