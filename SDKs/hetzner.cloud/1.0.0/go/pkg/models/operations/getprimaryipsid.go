// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetPrimaryIpsIDRequest struct {
	// ID of the resource
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum - Resource type the Primary IP can be assigned to
type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum string

const (
	GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnumServer GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum = "server"
)

func (e *GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		*e = GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum: %s", s)
	}
}

type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterServerTypes - The Server types the Datacenter can handle
type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterServerTypes struct {
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	Available []float64 `json:"available"`
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	AvailableForMigration []float64 `json:"available_for_migration"`
	// IDs of Server types that are supported in the Datacenter
	Supported []float64 `json:"supported"`
}

// GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenter - Datacenter this Primary IP is located at
type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenter struct {
	// Description of the Datacenter
	Description string `json:"description"`
	// ID of the Resource
	ID       int64                                                       `json:"id"`
	Location GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterLocation `json:"location"`
	// Unique identifier of the Datacenter
	Name string `json:"name"`
	// The Server types the Datacenter can handle
	ServerTypes GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenterServerTypes `json:"server_types"`
}

type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDNSPtr struct {
	// DNS pointer for the specific IP address
	DNSPtr string `json:"dns_ptr"`
	// Single IPv4 or IPv6 address
	IP string `json:"ip"`
}

// GetPrimaryIpsIDPrimaryIPResponsePrimaryIPProtection - Protection configuration for the Resource
type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum - Type of the Primary IP
type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum string

const (
	GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnumIpv4 GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum = "ipv4"
	GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnumIpv6 GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum = "ipv6"
)

func (e *GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum: %s", s)
	}
}

type GetPrimaryIpsIDPrimaryIPResponsePrimaryIP struct {
	// ID of the resource the Primary IP is assigned to, null if it is not assigned at all
	AssigneeID int64 `json:"assignee_id"`
	// Resource type the Primary IP can be assigned to
	AssigneeType GetPrimaryIpsIDPrimaryIPResponsePrimaryIPAssigneeTypeEnum `json:"assignee_type"`
	// Delete this Primary IP when the resource it is assigned to is deleted
	AutoDelete bool `json:"auto_delete"`
	// Whether the IP is blocked
	Blocked bool `json:"blocked"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Datacenter this Primary IP is located at
	Datacenter GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDatacenter `json:"datacenter"`
	// Array of reverse DNS entries
	DNSPtr []GetPrimaryIpsIDPrimaryIPResponsePrimaryIPDNSPtr `json:"dns_ptr"`
	// ID of the Resource
	ID int64 `json:"id"`
	// IP address
	IP string `json:"ip"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection GetPrimaryIpsIDPrimaryIPResponsePrimaryIPProtection `json:"protection"`
	// Type of the Primary IP
	Type GetPrimaryIpsIDPrimaryIPResponsePrimaryIPTypeEnum `json:"type"`
}

// GetPrimaryIpsIDPrimaryIPResponse - The `primary_ip` key contains a Primary IP object
type GetPrimaryIpsIDPrimaryIPResponse struct {
	PrimaryIP GetPrimaryIpsIDPrimaryIPResponsePrimaryIP `json:"primary_ip"`
}

type GetPrimaryIpsIDResponse struct {
	ContentType string
	// The `primary_ip` key contains a Primary IP object
	PrimaryIPResponse *GetPrimaryIpsIDPrimaryIPResponse
	StatusCode        int
	RawResponse       *http.Response
}
