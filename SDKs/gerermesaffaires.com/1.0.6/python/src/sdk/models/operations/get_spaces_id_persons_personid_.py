"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetSpacesIDPersonsPersonIDRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    person_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'personId', 'style': 'simple', 'explode': False }})
    r"""Id of the person to get or memberId"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpacesIDPersonsPersonID200ApplicationJSONAddress:
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    complement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Complement'), 'exclude': lambda f: f is None }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country'), 'exclude': lambda f: f is None }})  
    street: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Street'), 'exclude': lambda f: f is None }})  
    zip_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZipCode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpacesIDPersonsPersonID200ApplicationJSONBirth:
    
    date_: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    place: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Place'), 'exclude': lambda f: f is None }})  
    
class GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum(str, Enum):
    MALE = 'male'
    FEMALE = 'female'

class GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum(str, Enum):
    TRUE = 'true'
    FALSE = 'false'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSpacesIDPersonsPersonID200ApplicationJSON:
    r"""A person"""
    
    address: Optional[GetSpacesIDPersonsPersonID200ApplicationJSONAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address'), 'exclude': lambda f: f is None }})  
    archival_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivalDate'), 'exclude': lambda f: f is None }})  
    birth: Optional[GetSpacesIDPersonsPersonID200ApplicationJSONBirth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Birth'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Email'), 'exclude': lambda f: f is None }})  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstName'), 'exclude': lambda f: f is None }})  
    function: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Function'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    member_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemberId'), 'exclude': lambda f: f is None }})  
    mobile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mobile'), 'exclude': lambda f: f is None }})  
    modification_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModificationDate'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    sex: Optional[GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sex'), 'exclude': lambda f: f is None }})  
    validated: Optional[GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Validated'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetSpacesIDPersonsPersonIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_spaces_id_persons_person_id_200_application_json_object: Optional[GetSpacesIDPersonsPersonID200ApplicationJSON] = dataclasses.field(default=None)
    r"""A person"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    