"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import links_changeorderlink as shared_links_changeorderlink
from ..shared import orderitem as shared_orderitem
from ..shared import orderlinks as shared_orderlinks
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderWithLinks:
    r"""Describe in details all informations related to an order. All properties with the prefix order_ are translated in the list of values /user/lov/OrderMetaInfoOrderDetails."""
    
    account_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId') }})
    r"""The marketplace account identifier in BeezUP. This account identifier is based on your api settings."""  
    beez_up_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPOrderId') }})
    r"""The BeezUP Order identifier"""  
    etag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag') }})
    r"""ETag value to identify the order.\ 
    This information is required for the operation GetOrder and ChangeOrder.\
    For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3
    """  
    links: shared_orderlinks.OrderLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})  
    marketplace_business_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceBusinessCode') }})
    r"""In an marketplace technical code like CDiscount you can have several marketplaces like GO SPORT, etc. We identify them by a business code."""  
    marketplace_technical_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marketplaceTechnicalCode') }})
    r"""The technical code of the marketplace."""  
    order_last_modification_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_LastModificationUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The last modification UTC date done by BeezUP of this order"""  
    order_marketplace_last_modification_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MarketplaceLastModificationUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The last modification UTC date done by the marketplace on this order"""  
    order_marketplace_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MarketplaceOrderId') }})
    r"""The order marketplace identifier"""  
    order_purchase_utc_date: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_PurchaseUtcDate'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The purchase date of this order"""  
    order_status_beez_up_order_status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Status_BeezUPOrderStatus') }})
    r"""BeezUP order status. Unified for all marketplaces."""  
    order_items: list[shared_orderitem.OrderItem] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderItems') }})  
    processing: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing') }})
    r"""If true, there is currently a harvest or an order change in progress. Otherwise false."""  
    transition_links: list[shared_links_changeorderlink.LinksChangeOrderLink] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transitionLinks') }})
    r"""Contains the authorized change actions for an order"""  
    beez_up_order_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beezUPOrderUrl'), 'exclude': lambda f: f is None }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    order_buyer_address_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressCity'), 'exclude': lambda f: f is None }})
    r"""The Buyer address city of this order"""  
    order_buyer_address_country_iso_code_alpha2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressCountryIsoCodeAlpha2'), 'exclude': lambda f: f is None }})
    r"""The Buyer address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)"""  
    order_buyer_address_country_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressCountryName'), 'exclude': lambda f: f is None }})
    r"""The Buyer address country name"""  
    order_buyer_address_line1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressLine1'), 'exclude': lambda f: f is None }})
    r"""The Buyer address line 1 of this order"""  
    order_buyer_address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressLine2'), 'exclude': lambda f: f is None }})
    r"""The Buyer address line 2 of this order"""  
    order_buyer_address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressLine3'), 'exclude': lambda f: f is None }})
    r"""The Buyer address line 3 of this order"""  
    order_buyer_address_postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressPostalCode'), 'exclude': lambda f: f is None }})
    r"""The Buyer address postal code of this order"""  
    order_buyer_address_state_or_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_AddressStateOrRegion'), 'exclude': lambda f: f is None }})
    r"""The Buyer address state or region of this order"""  
    order_buyer_civility: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_Civility'), 'exclude': lambda f: f is None }})
    r"""The buyer civility for this order"""  
    order_buyer_company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_CompanyName'), 'exclude': lambda f: f is None }})
    r"""The buyer company name for this order"""  
    order_buyer_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_Email'), 'exclude': lambda f: f is None }})
    r"""The email of the buyer for this order"""  
    order_buyer_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_FirstName'), 'exclude': lambda f: f is None }})
    r"""Order Buyer first name"""  
    order_buyer_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_Identifier'), 'exclude': lambda f: f is None }})
    r"""The buyer identifier for this order"""  
    order_buyer_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_LastName'), 'exclude': lambda f: f is None }})
    r"""Order Buyer last name"""  
    order_buyer_mobile_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_MobilePhone'), 'exclude': lambda f: f is None }})
    r"""The mobile phone number of the buyer for this order"""  
    order_buyer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_Name'), 'exclude': lambda f: f is None }})
    r"""Buyer full name"""  
    order_buyer_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Buyer_Phone'), 'exclude': lambda f: f is None }})
    r"""The phone number of the buyer for this order"""  
    order_comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Comment'), 'exclude': lambda f: f is None }})
    r"""The comment associated to this order"""  
    order_currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_CurrencyCode'), 'exclude': lambda f: f is None }})
    r"""The currency code <a href=\\"https://en.wikipedia.org/wiki/ISO_4217\\">(ISO 4217)</a>"""  
    order_fulfilled_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_FulfilledBy'), 'exclude': lambda f: f is None }})
    r"""The order FulfilledBy"""  
    order_invoice_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Invoice_Number'), 'exclude': lambda f: f is None }})
    r"""The order invoice number"""  
    order_invoice_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Invoice_Uri'), 'exclude': lambda f: f is None }})
    r"""The order invoice URI"""  
    order_is_business: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_IsBusiness'), 'exclude': lambda f: f is None }})
    r"""The order IsBusiness"""  
    order_is_prime: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_IsPrime'), 'exclude': lambda f: f is None }})
    r"""Indicates if the order is considered as Prime (only on Amazon)"""  
    order_market_place_channel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MarketPlaceChannel'), 'exclude': lambda f: f is None }})
    r"""Useful to identify the origin of the order. For example in Amazon."""  
    order_merchant_e_commerce_software_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MerchantECommerceSoftwareName'), 'exclude': lambda f: f is None }})
    r"""The e-commerce software name of the merchant"""  
    order_merchant_e_commerce_software_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MerchantECommerceSoftwareVersion'), 'exclude': lambda f: f is None }})
    r"""The e-commece software version of the merchant"""  
    order_merchant_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_MerchantOrderId'), 'exclude': lambda f: f is None }})
    r"""The order merchant identifier"""  
    order_order_items_source_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_OrderItemsSourceUri'), 'exclude': lambda f: f is None }})
    r"""Technical information: The url to the source of this order items. We received this information from the marketplace."""  
    order_order_source_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_OrderSourceUri'), 'exclude': lambda f: f is None }})
    r"""Technical information: The url to the source of this order. We received this information from the marketplace."""  
    order_paying_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_PayingUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The UTC date of the payment of this order"""  
    order_payment_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_PaymentMethod'), 'exclude': lambda f: f is None }})
    r"""The payment method of this order"""  
    order_shipping_address_city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressCity'), 'exclude': lambda f: f is None }})
    r"""The shipping address city of this order"""  
    order_shipping_address_country_iso_code_alpha2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressCountryIsoCodeAlpha2'), 'exclude': lambda f: f is None }})
    r"""The shipping address country iso code alpha 2 (see http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#/decoding_table for more details)"""  
    order_shipping_address_country_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressCountryName'), 'exclude': lambda f: f is None }})
    r"""The shipping address country name"""  
    order_shipping_address_line1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressLine1'), 'exclude': lambda f: f is None }})
    r"""The shipping address line 1 of this order"""  
    order_shipping_address_line2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressLine2'), 'exclude': lambda f: f is None }})
    r"""The shipping address line 2 of this order"""  
    order_shipping_address_line3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressLine3'), 'exclude': lambda f: f is None }})
    r"""The shipping address line 3 of this order"""  
    order_shipping_address_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressName'), 'exclude': lambda f: f is None }})
    r"""The name of the person in the shipping address for this order"""  
    order_shipping_address_postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressPostalCode'), 'exclude': lambda f: f is None }})
    r"""The shipping address postal code of this order"""  
    order_shipping_address_state_or_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_AddressStateOrRegion'), 'exclude': lambda f: f is None }})
    r"""The shipping address state or region of this order"""  
    order_shipping_civility: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_Civility'), 'exclude': lambda f: f is None }})
    r"""The civility of the person in the shipping address for this order"""  
    order_shipping_company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_CompanyName'), 'exclude': lambda f: f is None }})
    r"""The company name of the shipping address for this order"""  
    order_shipping_earliest_ship_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_EarliestShipUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The UTC date of the earliest ship for this order"""  
    order_shipping_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_Email'), 'exclude': lambda f: f is None }})
    r"""The email of the person in the shipping address for this order"""  
    order_shipping_first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_FirstName'), 'exclude': lambda f: f is None }})
    r"""Order Shipping first name"""  
    order_shipping_last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_LastName'), 'exclude': lambda f: f is None }})
    r"""Order Shipping last name"""  
    order_shipping_latest_ship_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_LatestShipUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The UTC date of the latest ship for this order"""  
    order_shipping_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_Method'), 'exclude': lambda f: f is None }})
    r"""The shipping method of this order"""  
    order_shipping_mobile_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_MobilePhone'), 'exclude': lambda f: f is None }})
    r"""The mobile phone number of the person in the shipping address for this order"""  
    order_shipping_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_Phone'), 'exclude': lambda f: f is None }})
    r"""The phone number of the person in the shipping address for this order"""  
    order_shipping_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_Price'), 'exclude': lambda f: f is None }})
    r"""The shipping price of this order"""  
    order_shipping_shipping_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Shipping_ShippingTax'), 'exclude': lambda f: f is None }})
    r"""The shipping tax for this order"""  
    order_status_marketplace_order_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_Status_MarketplaceOrderStatus'), 'exclude': lambda f: f is None }})
    r"""The marketplace order state"""  
    order_total_commission: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_TotalCommission'), 'exclude': lambda f: f is None }})
    r"""The total commission of this order"""  
    order_total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_TotalPrice'), 'exclude': lambda f: f is None }})
    r"""The total price of this order (corresponding to the amount paid by the customer)"""  
    order_total_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_TotalTax'), 'exclude': lambda f: f is None }})
    r"""The total tax of this order"""  
    