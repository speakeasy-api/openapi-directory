// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type BknocSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type BknocRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// BknocRequestBodyFormatEnum - The format of the certificate in response.
type BknocRequestBodyFormatEnum string

const (
	BknocRequestBodyFormatEnumPdf BknocRequestBodyFormatEnum = "pdf"
)

func (e BknocRequestBodyFormatEnum) ToPointer() *BknocRequestBodyFormatEnum {
	return &e
}

func (e *BknocRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = BknocRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BknocRequestBodyFormatEnum: %v", v)
	}
}

// BknocRequestBody - Request format
type BknocRequestBody struct {
	CertificateParameters *BknocRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format BknocRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Bknoc504ApplicationJSONErrorEnum string

const (
	Bknoc504ApplicationJSONErrorEnumGatewayTimeout Bknoc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Bknoc504ApplicationJSONErrorEnum) ToPointer() *Bknoc504ApplicationJSONErrorEnum {
	return &e
}

func (e *Bknoc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Bknoc504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc504ApplicationJSONErrorEnum: %v", v)
	}
}

type Bknoc504ApplicationJSONErrorDescriptionEnum string

const (
	Bknoc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Bknoc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Bknoc504ApplicationJSONErrorDescriptionEnum) ToPointer() *Bknoc504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bknoc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Bknoc504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bknoc504ApplicationJSON - Gateway timeout
type Bknoc504ApplicationJSON struct {
	Error            *Bknoc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bknoc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bknoc503ApplicationJSONErrorEnum string

const (
	Bknoc503ApplicationJSONErrorEnumServiceUnavailable Bknoc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Bknoc503ApplicationJSONErrorEnum) ToPointer() *Bknoc503ApplicationJSONErrorEnum {
	return &e
}

func (e *Bknoc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Bknoc503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc503ApplicationJSONErrorEnum: %v", v)
	}
}

type Bknoc503ApplicationJSONErrorDescriptionEnum string

const (
	Bknoc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Bknoc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Bknoc503ApplicationJSONErrorDescriptionEnum) ToPointer() *Bknoc503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bknoc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Bknoc503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bknoc503ApplicationJSON - Service unavailable
type Bknoc503ApplicationJSON struct {
	Error            *Bknoc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bknoc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bknoc502ApplicationJSONErrorEnum string

const (
	Bknoc502ApplicationJSONErrorEnumBadGatewy Bknoc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Bknoc502ApplicationJSONErrorEnum) ToPointer() *Bknoc502ApplicationJSONErrorEnum {
	return &e
}

func (e *Bknoc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Bknoc502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc502ApplicationJSONErrorEnum: %v", v)
	}
}

type Bknoc502ApplicationJSONErrorDescriptionEnum string

const (
	Bknoc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Bknoc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Bknoc502ApplicationJSONErrorDescriptionEnum) ToPointer() *Bknoc502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bknoc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Bknoc502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bknoc502ApplicationJSON - Bad gateway
type Bknoc502ApplicationJSON struct {
	Error            *Bknoc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bknoc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bknoc500ApplicationJSONErrorEnum string

const (
	Bknoc500ApplicationJSONErrorEnumInternalServerError Bknoc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Bknoc500ApplicationJSONErrorEnum) ToPointer() *Bknoc500ApplicationJSONErrorEnum {
	return &e
}

func (e *Bknoc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Bknoc500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc500ApplicationJSONErrorEnum: %v", v)
	}
}

type Bknoc500ApplicationJSONErrorDescriptionEnum string

const (
	Bknoc500ApplicationJSONErrorDescriptionEnumInternalServerError Bknoc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Bknoc500ApplicationJSONErrorDescriptionEnum) ToPointer() *Bknoc500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bknoc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Bknoc500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bknoc500ApplicationJSON - Internal server error
type Bknoc500ApplicationJSON struct {
	Error            *Bknoc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bknoc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bknoc404ApplicationJSONErrorEnum string

const (
	Bknoc404ApplicationJSONErrorEnumRecordNotFound Bknoc404ApplicationJSONErrorEnum = "record_not_found"
	Bknoc404ApplicationJSONErrorEnumURLNotFound    Bknoc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Bknoc404ApplicationJSONErrorEnum) ToPointer() *Bknoc404ApplicationJSONErrorEnum {
	return &e
}

func (e *Bknoc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Bknoc404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc404ApplicationJSONErrorEnum: %v", v)
	}
}

type Bknoc404ApplicationJSONErrorDescriptionEnum string

const (
	Bknoc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Bknoc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Bknoc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Bknoc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Bknoc404ApplicationJSONErrorDescriptionEnum) ToPointer() *Bknoc404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bknoc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Bknoc404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bknoc404ApplicationJSON - No record found
type Bknoc404ApplicationJSON struct {
	Error            *Bknoc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bknoc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bknoc401ApplicationJSONErrorEnum string

const (
	Bknoc401ApplicationJSONErrorEnumInvalidAuthentication Bknoc401ApplicationJSONErrorEnum = "invalid_authentication"
	Bknoc401ApplicationJSONErrorEnumInvalidAuthorization  Bknoc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Bknoc401ApplicationJSONErrorEnum) ToPointer() *Bknoc401ApplicationJSONErrorEnum {
	return &e
}

func (e *Bknoc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Bknoc401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc401ApplicationJSONErrorEnum: %v", v)
	}
}

type Bknoc401ApplicationJSONErrorDescriptionEnum string

const (
	Bknoc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Bknoc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Bknoc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Bknoc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Bknoc401ApplicationJSONErrorDescriptionEnum) ToPointer() *Bknoc401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bknoc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Bknoc401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bknoc401ApplicationJSON - Unauthorized access
type Bknoc401ApplicationJSON struct {
	Error            *Bknoc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bknoc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Bknoc400ApplicationJSONErrorEnum string

const (
	Bknoc400ApplicationJSONErrorEnumMissingParameter Bknoc400ApplicationJSONErrorEnum = "missing_parameter"
	Bknoc400ApplicationJSONErrorEnumInvalidParameter Bknoc400ApplicationJSONErrorEnum = "invalid_parameter"
	Bknoc400ApplicationJSONErrorEnumInvalidFormat    Bknoc400ApplicationJSONErrorEnum = "invalid_format"
	Bknoc400ApplicationJSONErrorEnumInvalidTxnid     Bknoc400ApplicationJSONErrorEnum = "invalid_txnid"
	Bknoc400ApplicationJSONErrorEnumInvalidConsentid Bknoc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Bknoc400ApplicationJSONErrorEnum) ToPointer() *Bknoc400ApplicationJSONErrorEnum {
	return &e
}

func (e *Bknoc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Bknoc400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc400ApplicationJSONErrorEnum: %v", v)
	}
}

type Bknoc400ApplicationJSONErrorDescriptionEnum string

const (
	Bknoc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Bknoc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Bknoc400ApplicationJSONErrorDescriptionEnumBadRequest                              Bknoc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Bknoc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Bknoc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Bknoc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Bknoc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Bknoc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Bknoc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Bknoc400ApplicationJSONErrorDescriptionEnum) ToPointer() *Bknoc400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Bknoc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Bknoc400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Bknoc400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Bknoc400ApplicationJSON - Bad request
type Bknoc400ApplicationJSON struct {
	Error            *Bknoc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Bknoc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type BknocResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Bknoc400ApplicationJSONObject *Bknoc400ApplicationJSON
	// Unauthorized access
	Bknoc401ApplicationJSONObject *Bknoc401ApplicationJSON
	// No record found
	Bknoc404ApplicationJSONObject *Bknoc404ApplicationJSON
	// Internal server error
	Bknoc500ApplicationJSONObject *Bknoc500ApplicationJSON
	// Bad gateway
	Bknoc502ApplicationJSONObject *Bknoc502ApplicationJSON
	// Service unavailable
	Bknoc503ApplicationJSONObject *Bknoc503ApplicationJSON
	// Gateway timeout
	Bknoc504ApplicationJSONObject *Bknoc504ApplicationJSON
}
