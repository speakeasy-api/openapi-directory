// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type AuditLogsGetAuditLogsRequest struct {
	// Namespace to query audit logs for.
	Account string `pathParam:"style=simple,explode=false,name=account"`
	// action name one of ["repo.tag.push", ...]. Optional parameter to filter specific audit log actions.
	Action *string `queryParam:"style=form,explode=true,name=action"`
	// actor name. Optional parameter to filter audit log events to the specific user who triggered the event.
	Actor *string `queryParam:"style=form,explode=true,name=actor"`
	// Start of the time window you wish to query audit events for.
	From *time.Time `queryParam:"style=form,explode=true,name=from"`
	// name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// page - specify page number. Page number to get.
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// page_size - specify page size. Number of events to return per page.
	PageSize *int `queryParam:"style=form,explode=true,name=page_size"`
	// End of the time window you wish to query audit events for.
	To *time.Time `queryParam:"style=form,explode=true,name=to"`
}

type AuditLogsGetAuditLogsResponse struct {
	AuditLogsGetAuditLogs429ApplicationJSONAny interface{}
	AuditLogsGetAuditLogs500ApplicationJSONAny interface{}
	ContentType                                string
	// A successful response.
	GetAuditLogsResponse *shared.GetAuditLogsResponse
	StatusCode           int
	RawResponse          *http.Response
	// An unexpected error response.
	RPCStatus *shared.RPCStatus
}
