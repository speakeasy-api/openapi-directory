<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an account with the specified name and type under the given parent. - Personal accounts and Organizations cannot be created. - User Groups cannot be created with a Personal account as primary owner. - Location Groups cannot be created with a primary owner of a Personal account if the Personal account is in an Organization. - Location Groups cannot own Location Groups. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsCreateResponse
     */
	public function mybusinessAccountsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/accounts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "account", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates an account number for this account. The account number is not provisioned when an account is created. Use this request to create an account number when it is required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsGenerateAccountNumberRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsGenerateAccountNumberResponse
     */
	public function mybusinessAccountsGenerateAccountNumber(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsGenerateAccountNumberRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsGenerateAccountNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:generateAccountNumber', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsGenerateAccountNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsGenerateAccountNumberRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsGenerateAccountNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accepts the specified invitation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsAcceptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsAcceptResponse
     */
	public function mybusinessAccountsInvitationsAccept(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsAcceptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsAcceptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:accept', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsAcceptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsAcceptRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsAcceptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Declines the specified invitation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsDeclineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsDeclineResponse
     */
	public function mybusinessAccountsInvitationsDecline(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsDeclineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsDeclineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:decline', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsDeclineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsDeclineRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsDeclineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists pending invitations for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsListResponse
     */
	public function mybusinessAccountsInvitationsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/invitations', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsInvitationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInvitationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInvitationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the accounts for the authenticated user. This includes all accounts that the user owns, as well as any accounts for which the user has management rights.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListResponse
     */
	public function mybusinessAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAccountsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the GoogleLocations that have been recommended to the specified Business Profile account. Recommendations are provided for personal accounts and location groups only, requests for all other account types will result in an error. The recommendations for location groups are based on the locations in that group. The recommendations for personal accounts are based on all of the locations that the user has access to on Business Profile (which includes locations they can access through location groups), and is a superset of all recommendations generated for the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRecommendGoogleLocationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRecommendGoogleLocationsResponse
     */
	public function mybusinessAccountsListRecommendGoogleLocations(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRecommendGoogleLocationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRecommendGoogleLocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:recommendGoogleLocations', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRecommendGoogleLocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRecommendGoogleLocationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsListRecommendGoogleLocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRecommendedGoogleLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRecommendedGoogleLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invites the specified user to become an administrator for the specified location. The invitee must accept the invitation in order to be granted access to the location. See AcceptInvitation to programmatically accept an invitation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsCreateResponse
     */
	public function mybusinessAccountsLocationsAdminsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/admins', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "admin", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->admin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Admin', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the admins for the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsListResponse
     */
	public function mybusinessAccountsLocationsAdminsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/admins', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAdminsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationAdminsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationAdminsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it appears in the list of `FindMatchingLocations`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAssociateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAssociateResponse
     */
	public function mybusinessAccountsLocationsAssociate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAssociateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAssociateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:associate', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAssociateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "associateLocationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAssociateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsAssociateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets all of the specified locations in the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetResponse
     */
	public function mybusinessAccountsLocationsBatchGet(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}/locations:batchGet', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchGetLocationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchGetLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchGetLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the paginated list of reviews for all specified locations. This operation is only valid if the specified locations are verified. *Note:* Reviews are limited to a batch size of 200 `location_names` per call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetReviewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetReviewsResponse
     */
	public function mybusinessAccountsLocationsBatchGetReviews(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetReviewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetReviewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}/locations:batchGetReviews', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetReviewsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchGetReviewsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetReviewsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsBatchGetReviewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchGetReviewsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchGetReviewsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clears an association between a location and its place ID. This operation is only valid if the location is unverified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsClearAssociationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsClearAssociationResponse
     */
	public function mybusinessAccountsLocationsClearAssociation(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsClearAssociationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsClearAssociationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:clearAssociation', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsClearAssociationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsClearAssociationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsClearAssociationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new location owned by the specified account, and returns it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsCreateResponse
     */
	public function mybusinessAccountsLocationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/locations', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "locationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reports all eligible verification options for a location in a specific language.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFetchVerificationOptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFetchVerificationOptionsResponse
     */
	public function mybusinessAccountsLocationsFetchVerificationOptions(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFetchVerificationOptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFetchVerificationOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:fetchVerificationOptions', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFetchVerificationOptionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "fetchVerificationOptionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFetchVerificationOptionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFetchVerificationOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fetchVerificationOptionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FetchVerificationOptionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Finds all of the possible locations that are a match to the specified location. This operation is only valid if the location is unverified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFindMatchesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFindMatchesResponse
     */
	public function mybusinessAccountsLocationsFindMatches(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFindMatchesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFindMatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:findMatches', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFindMatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "findMatchingLocationsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFindMatchesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsFindMatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->findMatchingLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FindMatchingLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Google-updated version of the specified location. Returns `NOT_FOUND` if the location does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsGetGoogleUpdatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsGetGoogleUpdatedResponse
     */
	public function mybusinessAccountsLocationsGetGoogleUpdated(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsGetGoogleUpdatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsGetGoogleUpdatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:googleUpdated', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsGetGoogleUpdatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsGetGoogleUpdatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsGetGoogleUpdatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleUpdatedLocation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleUpdatedLocation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all insurance networks supported by Google.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsInsuranceNetworksListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsInsuranceNetworksListResponse
     */
	public function mybusinessAccountsLocationsInsuranceNetworksList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsInsuranceNetworksListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsInsuranceNetworksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/insuranceNetworks', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsInsuranceNetworksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsInsuranceNetworksListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsInsuranceNetworksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsuranceNetworksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListInsuranceNetworksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the locations for the specified account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsListResponse
     */
	public function mybusinessAccountsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/locations', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new local post associated with the specified location, and returns it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsCreateResponse
     */
	public function mybusinessAccountsLocationsLocalPostsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/localPosts', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "localPost", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->localPost = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LocalPost', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of local posts associated with a location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsListResponse
     */
	public function mybusinessAccountsLocationsLocalPostsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/localPosts', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocalPostsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocalPostsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns insights for a set of local posts associated with a single listing. Which metrics and how they are reported are options specified in the request proto. *Note:* Insight reports are limited to 100 `local_post_names` per call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsReportInsightsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsReportInsightsResponse
     */
	public function mybusinessAccountsLocationsLocalPostsReportInsights(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsReportInsightsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsReportInsightsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}/localPosts:reportInsights', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsReportInsightsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportLocalPostInsightsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsReportInsightsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLocalPostsReportInsightsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportLocalPostInsightsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportLocalPostInsightsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the Google updated Lodging of a specific location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLodgingGetGoogleUpdatedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLodgingGetGoogleUpdatedResponse
     */
	public function mybusinessAccountsLocationsLodgingGetGoogleUpdated(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLodgingGetGoogleUpdatedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLodgingGetGoogleUpdatedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:getGoogleUpdated', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLodgingGetGoogleUpdatedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLodgingGetGoogleUpdatedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsLodgingGetGoogleUpdatedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getGoogleUpdatedLodgingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetGoogleUpdatedLodgingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new media item for the location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCreateResponse
     */
	public function mybusinessAccountsLocationsMediaCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/media', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "mediaItem", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaItem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of media items associated with a location that have been contributed by customers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCustomersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCustomersListResponse
     */
	public function mybusinessAccountsLocationsMediaCustomersList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCustomersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCustomersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/media/customers', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCustomersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCustomersListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaCustomersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomerMediaItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomerMediaItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of media items associated with a location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaListResponse
     */
	public function mybusinessAccountsLocationsMediaList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/media', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMediaItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMediaItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates a `MediaItemDataRef` for media item uploading.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaStartUploadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaStartUploadResponse
     */
	public function mybusinessAccountsLocationsMediaStartUpload(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaStartUploadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaStartUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/media:startUpload', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaStartUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaStartUploadRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsMediaStartUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->mediaItemDataRef = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MediaItemDataRef', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the answer written by the current user to a question.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersDeleteResponse
     */
	public function mybusinessAccountsLocationsQuestionsAnswersDelete(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/answers:delete', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the paginated list of answers for a specified question.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersListResponse
     */
	public function mybusinessAccountsLocationsQuestionsAnswersList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/answers', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAnswersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAnswersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an answer or updates the existing answer written by the user for the specified question. A user can only create one answer per question.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersUpsertRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersUpsertResponse
     */
	public function mybusinessAccountsLocationsQuestionsAnswersUpsert(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersUpsertRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersUpsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/answers:upsert', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersUpsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "upsertAnswerRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersUpsertRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsAnswersUpsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->answer = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Answer', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a question for the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsCreateResponse
     */
	public function mybusinessAccountsLocationsQuestionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/questions', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "question", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->question = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Question', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a specific question written by the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsDeleteResponse
     */
	public function mybusinessAccountsLocationsQuestionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the paginated list of questions and some of its answers for a specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsListResponse
     */
	public function mybusinessAccountsLocationsQuestionsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/questions', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listQuestionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListQuestionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a specific question written by the current user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsPatchResponse
     */
	public function mybusinessAccountsLocationsQuestionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "question", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsPatchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsQuestionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->question = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Question', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a report containing insights on one or more metrics by location. *Note:* Insight reports are limited to a batch size of 10 `location_names` per call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReportInsightsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReportInsightsResponse
     */
	public function mybusinessAccountsLocationsReportInsights(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReportInsightsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReportInsightsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}/locations:reportInsights', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReportInsightsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reportLocationInsightsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReportInsightsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReportInsightsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportLocationInsightsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportLocationInsightsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the response to the specified review. This operation is only valid if the specified location is verified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsDeleteReplyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsDeleteReplyResponse
     */
	public function mybusinessAccountsLocationsReviewsDeleteReply(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsDeleteReplyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsDeleteReplyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}/reply', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsDeleteReplyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsDeleteReplyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsDeleteReplyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the paginated list of reviews for the specified location. This operation is only valid if the specified location is verified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsListResponse
     */
	public function mybusinessAccountsLocationsReviewsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/reviews', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listReviewsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListReviewsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the reply to the specified review. A reply is created if one does not exist. This operation is only valid if the specified location is verified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsUpdateReplyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsUpdateReplyResponse
     */
	public function mybusinessAccountsLocationsReviewsUpdateReply(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsUpdateReplyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsUpdateReplyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}/reply', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsUpdateReplyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "reviewReply", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsUpdateReplyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsReviewsUpdateReplyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reviewReply = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReviewReply', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a location from an account that the user owns to another account that the same user administers. The user must be an owner of the account the location is currently associated with and must also be at least a manager of the destination account. Returns the Location with its new resource name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsTransferRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsTransferResponse
     */
	public function mybusinessAccountsLocationsTransfer(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsTransferRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsTransferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:transfer', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsTransferRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "transferLocationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsTransferRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsTransferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->location = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Location', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Completes a `PENDING` verification. It is only necessary for non `AUTO` verification methods. `AUTO` verification request is instantly `VERIFIED` upon creation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsCompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsCompleteResponse
     */
	public function mybusinessAccountsLocationsVerificationsComplete(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsCompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:complete', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "completeVerificationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsCompleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->completeVerificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompleteVerificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List verifications of a location, ordered by create time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsListResponse
     */
	public function mybusinessAccountsLocationsVerificationsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{parent}/verifications', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerificationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVerificationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVerificationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts the verification process for a location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerifyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerifyResponse
     */
	public function mybusinessAccountsLocationsVerify(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerifyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerifyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}:verify', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerifyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "verifyLocationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerifyRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsLocationsVerifyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyLocationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyLocationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the pubsub notification settings for the account informing Business Profile which topic to send pubsub notifications for: - New reviews for locations administered by the account. - Updated reviews for locations administered by the account. - New `GoogleUpdates` for locations administered by the account. An account will only have one notification settings resource, and only one pubsub topic can be set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsUpdateNotificationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsUpdateNotificationsResponse
     */
	public function mybusinessAccountsUpdateNotifications(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsUpdateNotificationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsUpdateNotificationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v4/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsUpdateNotificationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "notifications", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsUpdateNotificationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessAccountsUpdateNotificationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifications = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Notifications', 'json');
            }
        }

        return $response;
    }
}