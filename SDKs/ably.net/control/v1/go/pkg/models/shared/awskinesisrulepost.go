// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type AwsKinesisRulePostRuleTypeEnum string

const (
	AwsKinesisRulePostRuleTypeEnumAwsKinesis AwsKinesisRulePostRuleTypeEnum = "aws/kinesis"
)

func (e AwsKinesisRulePostRuleTypeEnum) ToPointer() *AwsKinesisRulePostRuleTypeEnum {
	return &e
}

func (e *AwsKinesisRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws/kinesis":
		*e = AwsKinesisRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AwsKinesisRulePostRuleTypeEnum: %v", v)
	}
}

type AwsKinesisRulePostTargetAuthenticationType string

const (
	AwsKinesisRulePostTargetAuthenticationTypeAssumeRole  AwsKinesisRulePostTargetAuthenticationType = "assumeRole"
	AwsKinesisRulePostTargetAuthenticationTypeCredentials AwsKinesisRulePostTargetAuthenticationType = "credentials"
)

type AwsKinesisRulePostTargetAuthentication struct {
	AwsAccessKeys *AwsAccessKeys
	AwsAssumeRole *AwsAssumeRole

	Type AwsKinesisRulePostTargetAuthenticationType
}

func CreateAwsKinesisRulePostTargetAuthenticationAssumeRole(assumeRole AwsAssumeRole) AwsKinesisRulePostTargetAuthentication {
	typ := AwsKinesisRulePostTargetAuthenticationTypeAssumeRole
	typStr := AwsAssumeRoleAuthenticationModeEnum(typ)
	assumeRole.AuthenticationMode = &typStr

	return AwsKinesisRulePostTargetAuthentication{
		AwsAssumeRole: &assumeRole,
		Type:          typ,
	}
}

func CreateAwsKinesisRulePostTargetAuthenticationCredentials(credentials AwsAccessKeys) AwsKinesisRulePostTargetAuthentication {
	typ := AwsKinesisRulePostTargetAuthenticationTypeCredentials
	typStr := AwsAccessKeysAuthenticationModeEnum(typ)
	credentials.AuthenticationMode = &typStr

	return AwsKinesisRulePostTargetAuthentication{
		AwsAccessKeys: &credentials,
		Type:          typ,
	}
}

func (u *AwsKinesisRulePostTargetAuthentication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		AuthenticationMode string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.AuthenticationMode {
	case "assumeRole":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAssumeRole := new(AwsAssumeRole)
		if err := d.Decode(&awsAssumeRole); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAssumeRole = awsAssumeRole
		u.Type = AwsKinesisRulePostTargetAuthenticationTypeAssumeRole
		return nil
	case "credentials":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsAccessKeys := new(AwsAccessKeys)
		if err := d.Decode(&awsAccessKeys); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsAccessKeys = awsAccessKeys
		u.Type = AwsKinesisRulePostTargetAuthenticationTypeCredentials
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u AwsKinesisRulePostTargetAuthentication) MarshalJSON() ([]byte, error) {
	if u.AwsAccessKeys != nil {
		return json.Marshal(u.AwsAccessKeys)
	}

	if u.AwsAssumeRole != nil {
		return json.Marshal(u.AwsAssumeRole)
	}

	return nil, nil
}

type AwsKinesisRulePostTarget struct {
	Authentication AwsKinesisRulePostTargetAuthentication `json:"authentication"`
	Enveloped      *bool                                  `json:"enveloped,omitempty"`
	Format         string                                 `json:"format"`
	PartitionKey   string                                 `json:"partitionKey"`
	Region         string                                 `json:"region"`
	StreamName     string                                 `json:"streamName"`
}

type AwsKinesisRulePost struct {
	RequestMode string                         `json:"requestMode"`
	RuleType    AwsKinesisRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                     `json:"source"`
	Status      *string                        `json:"status,omitempty"`
	Target      AwsKinesisRulePostTarget       `json:"target"`
}
