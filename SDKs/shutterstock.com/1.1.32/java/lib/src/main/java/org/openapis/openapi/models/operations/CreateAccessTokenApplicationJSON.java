/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateAccessTokenApplicationJSON {
    /**
     * Client ID (Consumer Key) of your application
     */
    @JsonProperty("client_id")
    public String clientId;
    public CreateAccessTokenApplicationJSON withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Client Secret (Consumer Secret) of your application
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_secret")
    public String clientSecret;
    public CreateAccessTokenApplicationJSON withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * Response code from the /oauth/authorize flow; required if grant_type=authorization_code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;
    public CreateAccessTokenApplicationJSON withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires")
    public Boolean expires;
    public CreateAccessTokenApplicationJSON withExpires(Boolean expires) {
        this.expires = expires;
        return this;
    }
    
    /**
     * Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
     */
    @JsonProperty("grant_type")
    public CreateAccessTokenApplicationJSONGrantTypeEnum grantType;
    public CreateAccessTokenApplicationJSON withGrantType(CreateAccessTokenApplicationJSONGrantTypeEnum grantType) {
        this.grantType = grantType;
        return this;
    }
    
    /**
     * User type to be authorized (usually 'customer')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("realm")
    public CreateAccessTokenApplicationJSONRealmEnum realm;
    public CreateAccessTokenApplicationJSON withRealm(CreateAccessTokenApplicationJSONRealmEnum realm) {
        this.realm = realm;
        return this;
    }
    
    /**
     * Pass this along with grant_type=refresh_token to get a fresh access token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    public String refreshToken;
    public CreateAccessTokenApplicationJSON withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }
    
}
