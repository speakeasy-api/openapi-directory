/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Create and manage your own Quotes. You need an API key to access this service.
 */
export class PrivateQuotes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a quote. The user needs to be the owner of the quote to be able to delete it.
   *
   */
  deleteQuote(
    req: operations.DeleteQuoteRequest,
    security: operations.DeleteQuoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteQuoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteQuoteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteQuoteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteQuoteResponse =
        new operations.DeleteQuoteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Gets a `Quote` with a given `id`.
   */
  getQuote(
    req: operations.GetQuoteRequest,
    security: operations.GetQuoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteResponse = new operations.GetQuoteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.quoteResponse = utils.objectToClass(
              httpRes?.data,
              shared.QuoteResponse
            );
          }
          break;
        case httpRes?.status == 401:
          break;
      }

      return res;
    });
  }

  /**
   * Get the list of quotes in your private collection.
   */
  getQuoteList(
    req: operations.GetQuoteListRequest,
    security: operations.GetQuoteListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetQuoteListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetQuoteListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/list";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetQuoteListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetQuoteListResponse =
        new operations.GetQuoteListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a quote
   */
  patchQuote(
    req: operations.PatchQuoteRequest,
    security: operations.PatchQuoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PatchQuoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PatchQuoteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PatchQuoteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PatchQuoteResponse =
        new operations.PatchQuoteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a new quote to your private collection. Same as 'PUT' but added since some clients don't handle PUT well.
   */
  postQuote(
    req: operations.PostQuoteRequest,
    security: operations.PostQuoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteResponse =
        new operations.PostQuoteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a tag to a given Quote.
   */
  postQuoteTagsAdd(
    req: operations.PostQuoteTagsAddRequest,
    security: operations.PostQuoteTagsAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteTagsAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteTagsAddRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/tags/add";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteTagsAddSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteTagsAddResponse =
        new operations.PostQuoteTagsAddResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove a tag from a given quote.
   */
  postQuoteTagsRemove(
    req: operations.PostQuoteTagsRemoveRequest,
    security: operations.PostQuoteTagsRemoveSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostQuoteTagsRemoveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostQuoteTagsRemoveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote/tags/remove";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostQuoteTagsRemoveSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostQuoteTagsRemoveResponse =
        new operations.PostQuoteTagsRemoveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 401, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add a new quote to your private collection.
   */
  putQuote(
    req: operations.PutQuoteRequest,
    security: operations.PutQuoteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutQuoteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutQuoteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/quote";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutQuoteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutQuoteResponse = new operations.PutQuoteResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case [200, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
