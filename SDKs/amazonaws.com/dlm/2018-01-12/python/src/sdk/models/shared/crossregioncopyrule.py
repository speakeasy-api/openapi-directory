"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import crossregioncopydeprecaterule as shared_crossregioncopydeprecaterule
from ..shared import crossregioncopyretainrule as shared_crossregioncopyretainrule
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CrossRegionCopyRule:
    r"""<p> <b>[Snapshot and AMI policies only]</b> Specifies a cross-Region copy rule for snapshot and AMI policies.</p> <note> <p>To specify a cross-Region copy action for event-based polices, use <a>CrossRegionCopyAction</a>.</p> </note>"""
    
    encrypted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encrypted') }})  
    cmk_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CmkArn'), 'exclude': lambda f: f is None }})  
    copy_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTags'), 'exclude': lambda f: f is None }})  
    deprecate_rule: Optional[shared_crossregioncopydeprecaterule.CrossRegionCopyDeprecateRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeprecateRule'), 'exclude': lambda f: f is None }})  
    retain_rule: Optional[shared_crossregioncopyretainrule.CrossRegionCopyRetainRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetainRule'), 'exclude': lambda f: f is None }})  
    target: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Target'), 'exclude': lambda f: f is None }})  
    target_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetRegion'), 'exclude': lambda f: f is None }})  
    