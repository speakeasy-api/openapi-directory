// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssumeImpersonationRoleXAmzTargetEnum
type AssumeImpersonationRoleXAmzTargetEnum string

const (
	AssumeImpersonationRoleXAmzTargetEnumWorkMailServiceAssumeImpersonationRole AssumeImpersonationRoleXAmzTargetEnum = "WorkMailService.AssumeImpersonationRole"
)

func (e *AssumeImpersonationRoleXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WorkMailService.AssumeImpersonationRole":
		*e = AssumeImpersonationRoleXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AssumeImpersonationRoleXAmzTargetEnum: %s", s)
	}
}

type AssumeImpersonationRoleHeaders struct {
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AssumeImpersonationRoleXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AssumeImpersonationRoleRequest struct {
	Headers AssumeImpersonationRoleHeaders
	Request shared.AssumeImpersonationRoleRequest `request:"mediaType=application/json"`
}

type AssumeImpersonationRoleResponse struct {
	// Success
	AssumeImpersonationRoleResponse *shared.AssumeImpersonationRoleResponse
	ContentType                     string
	// InvalidParameterException
	InvalidParameterException interface{}
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	// OrganizationStateException
	OrganizationStateException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
