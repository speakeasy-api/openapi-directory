"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ErrorsAvailableVersionsSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class ErrorsAvailableVersionsDollarInlinecountEnum(str, Enum):
    r"""Controls whether or not to include a count of all the items across all pages."""
    ALLPAGES = 'allpages'
    NONE = 'none'

class ErrorsAvailableVersionsErrorTypeEnum(str, Enum):
    r"""Type of error (handled vs unhandled), including All"""
    ALL = 'all'
    UNHANDLED_ERROR = 'unhandledError'
    HANDLED_ERROR = 'handledError'


@dataclasses.dataclass
class ErrorsAvailableVersionsRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    start: datetime = dataclasses.field(metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""Start date time in data in ISO 8601 date time format"""  
    dollar_filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$filter', 'style': 'form', 'explode': True }})
    r"""A filter as specified in https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md#97-filtering."""  
    dollar_inlinecount: Optional[ErrorsAvailableVersionsDollarInlinecountEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$inlinecount', 'style': 'form', 'explode': True }})
    r"""Controls whether or not to include a count of all the items across all pages."""  
    dollar_skip: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$skip', 'style': 'form', 'explode': True }})
    r"""The offset (starting at 0) of the first result to return. This parameter along with limit is used to perform pagination."""  
    dollar_top: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$top', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return. (0 will fetch all results till the max number.)"""  
    end: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end', 'style': 'form', 'explode': True }})
    r"""Last date time in data in ISO 8601 date time format"""  
    error_type: Optional[ErrorsAvailableVersionsErrorTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'errorType', 'style': 'form', 'explode': True }})
    r"""Type of error (handled vs unhandled), including All"""  
    
class ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsAvailableVersionsDefaultApplicationJSONError:
    
    code: ErrorsAvailableVersionsDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsAvailableVersionsDefaultApplicationJSON:
    r"""Error code with reason."""
    
    error: ErrorsAvailableVersionsDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorsAvailableVersions200ApplicationJSON:
    r"""A list of available versions in the time range."""
    
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_count'), 'exclude': lambda f: f is None }})
    r"""The full number of versions across all pages."""  
    versions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('versions'), 'exclude': lambda f: f is None }})
    r"""List of available versions."""  
    

@dataclasses.dataclass
class ErrorsAvailableVersionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    errors_available_versions_200_application_json_object: Optional[ErrorsAvailableVersions200ApplicationJSON] = dataclasses.field(default=None)
    r"""A list of available versions in the time range."""  
    errors_available_versions_default_application_json_object: Optional[ErrorsAvailableVersionsDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    