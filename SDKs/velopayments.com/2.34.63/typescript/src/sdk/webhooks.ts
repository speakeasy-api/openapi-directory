/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Webhooks {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Webhook
   *
   * @remarks
   * Create Webhook
   */
  createWebhookV1(
    req: shared.CreateWebhookRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateWebhookV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateWebhookRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/webhooks";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateWebhookV1Response =
        new operations.CreateWebhookV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get details about the given webhook.
   *
   * @remarks
   * Get details about the given webhook.
   */
  getWebhookV1(
    req: operations.GetWebhookV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWebhookV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWebhookV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/webhooks/{webhookId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWebhookV1Response =
        new operations.GetWebhookV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webhookResponse = utils.objectToClass(
              httpRes?.data,
              shared.WebhookResponse
            );
          }
          break;
        case httpRes?.status == 400:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List the details about the webhooks for the given payor.
   *
   * @remarks
   * List the details about the webhooks for the given payor.
   */
  listWebhooksV1(
    req: operations.ListWebhooksV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.ListWebhooksV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListWebhooksV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/webhooks";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListWebhooksV1Response =
        new operations.ListWebhooksV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.webhooksResponse = utils.objectToClass(
              httpRes?.data,
              shared.WebhooksResponse
            );
          }
          break;
        case httpRes?.status == 400:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
      }

      return res;
    });
  }

  pingWebhookV1(
    req: operations.PingWebhookV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.PingWebhookV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PingWebhookV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/webhooks/{webhookId}/ping",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PingWebhookV1Response =
        new operations.PingWebhookV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pingResponse = utils.objectToClass(
              httpRes?.data,
              shared.PingResponse
            );
          }
          break;
        case httpRes?.status == 400:
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Webhook
   *
   * @remarks
   * Update Webhook
   */
  updateWebhookV1(
    req: operations.UpdateWebhookV1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateWebhookV1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateWebhookV1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/webhooks/{webhookId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateWebhookRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateWebhookV1Response =
        new operations.UpdateWebhookV1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse400 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse400
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse401 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse401
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse403 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse403
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inlineResponse404 = utils.objectToClass(
              httpRes?.data,
              shared.InlineResponse404
            );
          }
          break;
      }

      return res;
    });
  }
}
