"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import automaticterminationmode_enum as shared_automaticterminationmode_enum
from ..shared import sessionpersistencemode_enum as shared_sessionpersistencemode_enum
from ..shared import streamconfigurationsessionbackup as shared_streamconfigurationsessionbackup
from ..shared import streamconfigurationsessionstorage as shared_streamconfigurationsessionstorage
from ..shared import streamingclipboardmode_enum as shared_streamingclipboardmode_enum
from ..shared import streaminginstancetype_enum as shared_streaminginstancetype_enum
from ..shared import volumeconfiguration as shared_volumeconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StreamConfiguration:
    r"""A configuration for a streaming session."""
    
    clipboard_mode: shared_streamingclipboardmode_enum.StreamingClipboardModeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clipboardMode') }})  
    ec2_instance_types: list[shared_streaminginstancetype_enum.StreamingInstanceTypeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2InstanceTypes') }})  
    streaming_image_ids: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamingImageIds') }})  
    automatic_termination_mode: Optional[shared_automaticterminationmode_enum.AutomaticTerminationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automaticTerminationMode'), 'exclude': lambda f: f is None }})  
    max_session_length_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxSessionLengthInMinutes'), 'exclude': lambda f: f is None }})  
    max_stopped_session_length_in_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxStoppedSessionLengthInMinutes'), 'exclude': lambda f: f is None }})  
    session_backup: Optional[shared_streamconfigurationsessionbackup.StreamConfigurationSessionBackup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionBackup'), 'exclude': lambda f: f is None }})  
    session_persistence_mode: Optional[shared_sessionpersistencemode_enum.SessionPersistenceModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionPersistenceMode'), 'exclude': lambda f: f is None }})  
    session_storage: Optional[shared_streamconfigurationsessionstorage.StreamConfigurationSessionStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sessionStorage'), 'exclude': lambda f: f is None }})  
    volume_configuration: Optional[shared_volumeconfiguration.VolumeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeConfiguration'), 'exclude': lambda f: f is None }})  
    