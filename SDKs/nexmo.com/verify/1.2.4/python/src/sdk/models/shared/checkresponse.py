"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckResponse:
    r"""Success"""
    
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency code."""  
    estimated_price_messages_sent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_price_messages_sent'), 'exclude': lambda f: f is None }})
    r"""This field may not be present, depending on your pricing model. The
    value indicates the cost (in EUR) of the calls made and messages sent
    for the verification process. This value may be updated during and
    shortly after the request completes because user input events can
    overlap with message/call events. When this field is present, the total
    cost of the verification is the sum of this field and the `price` field.
    """  
    event_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_id'), 'exclude': lambda f: f is None }})
    r"""The ID of the verification event, such as an SMS or TTS call."""  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""The cost incurred for this request."""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id'), 'exclude': lambda f: f is None }})
    r"""The `request_id` that you received in the response to the Verify request and used in the Verify check request."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""A value of `0` indicates that your user entered the correct code. If it is non-zero, check the `error_text`."""  
    