/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * View, modify your gists.
 */
export class Gists {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Check if a gist is starred
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#check-if-a-gist-is-starred} - API method documentation
   */
  gistsCheckIsStarred(
    req: operations.GistsCheckIsStarredRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsCheckIsStarredResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsCheckIsStarredRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/star",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsCheckIsStarredResponse =
        new operations.GistsCheckIsStarredResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistsCheckIsStarred404ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a gist
   *
   * @remarks
   * Allows you to add a new gist with one or more files.
   *
   * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#create-a-gist} - API method documentation
   */
  gistsCreate(
    req: operations.GistsCreateRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsCreateRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gists";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsCreateResponse =
        new operations.GistsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistSimple = utils.objectToClass(
              httpRes?.data,
              shared.GistSimple
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a gist comment
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#create-a-gist-comment} - API method documentation
   */
  gistsCreateComment(
    req: operations.GistsCreateCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsCreateCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsCreateCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/comments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsCreateCommentResponse =
        new operations.GistsCreateCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistComment = utils.objectToClass(
              httpRes?.data,
              shared.GistComment
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a gist
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#delete-a-gist} - API method documentation
   */
  gistsDelete(
    req: operations.GistsDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/gists/{gist_id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsDeleteResponse =
        new operations.GistsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a gist comment
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#delete-a-gist-comment} - API method documentation
   */
  gistsDeleteComment(
    req: operations.GistsDeleteCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsDeleteCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsDeleteCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/comments/{comment_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsDeleteCommentResponse =
        new operations.GistsDeleteCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Fork a gist
   *
   * @remarks
   * **Note**: This was previously `/gists/:gist_id/fork`.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#fork-a-gist} - API method documentation
   */
  gistsFork(
    req: operations.GistsForkRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsForkResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsForkRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/forks",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsForkResponse =
        new operations.GistsForkResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.baseGist = utils.objectToClass(httpRes?.data, shared.BaseGist);
          }
          break;
        case httpRes?.status == 304:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a gist
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#get-a-gist} - API method documentation
   */
  gistsGet(
    req: operations.GistsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/gists/{gist_id}", req);

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsGetResponse = new operations.GistsGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistSimple = utils.objectToClass(
              httpRes?.data,
              shared.GistSimple
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistsGet403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GistsGet403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a gist comment
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#get-a-gist-comment} - API method documentation
   */
  gistsGetComment(
    req: operations.GistsGetCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsGetCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsGetCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/comments/{comment_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsGetCommentResponse =
        new operations.GistsGetCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistComment = utils.objectToClass(
              httpRes?.data,
              shared.GistComment
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistsGetComment403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GistsGetComment403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a gist revision
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#get-a-gist-revision} - API method documentation
   */
  gistsGetRevision(
    req: operations.GistsGetRevisionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsGetRevisionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsGetRevisionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/{sha}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsGetRevisionResponse =
        new operations.GistsGetRevisionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistSimple = utils.objectToClass(
              httpRes?.data,
              shared.GistSimple
            );
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List gists for the authenticated user
   *
   * @remarks
   * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#list-gists-for-the-authenticated-user} - API method documentation
   */
  gistsList(
    req: operations.GistsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gists";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsListResponse =
        new operations.GistsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.baseGists = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.baseGists = utils.objectToClass(
              httpRes?.data,
              shared.BaseGist,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List gist comments
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#list-gist-comments} - API method documentation
   */
  gistsListComments(
    req: operations.GistsListCommentsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsListCommentsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsListCommentsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/comments",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsListCommentsResponse =
        new operations.GistsListCommentsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistComments = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.gistComments = utils.objectToClass(
              httpRes?.data,
              shared.GistComment,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List gist commits
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#list-gist-commits} - API method documentation
   */
  gistsListCommits(
    req: operations.GistsListCommitsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsListCommitsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsListCommitsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/commits",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsListCommitsResponse =
        new operations.GistsListCommitsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistCommits = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.gistCommits = utils.objectToClass(
              httpRes?.data,
              shared.GistCommit,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List gists for a user
   *
   * @remarks
   * Lists public gists for the specified user:
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#list-gists-for-a-user} - API method documentation
   */
  gistsListForUser(
    req: operations.GistsListForUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsListForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsListForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{username}/gists",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsListForUserResponse =
        new operations.GistsListForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.baseGists = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.baseGists = utils.objectToClass(
              httpRes?.data,
              shared.BaseGist,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List gist forks
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#list-gist-forks} - API method documentation
   */
  gistsListForks(
    req: operations.GistsListForksRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsListForksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsListForksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/forks",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsListForksResponse =
        new operations.GistsListForksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistSimples = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.gistSimples = utils.objectToClass(
              httpRes?.data,
              shared.GistSimple,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List public gists
   *
   * @remarks
   * List public gists sorted by most recently updated to least recently updated.
   *
   * Note: With [pagination](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#list-public-gists} - API method documentation
   */
  gistsListPublic(
    req: operations.GistsListPublicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsListPublicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsListPublicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gists/public";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsListPublicResponse =
        new operations.GistsListPublicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.baseGists = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.baseGists = utils.objectToClass(
              httpRes?.data,
              shared.BaseGist,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List starred gists
   *
   * @remarks
   * List the authenticated user's starred gists:
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#list-starred-gists} - API method documentation
   */
  gistsListStarred(
    req: operations.GistsListStarredRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsListStarredResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsListStarredRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/gists/starred";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsListStarredResponse =
        new operations.GistsListStarredResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.baseGists = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.baseGists = utils.objectToClass(
              httpRes?.data,
              shared.BaseGist,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Star a gist
   *
   * @remarks
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@2.20/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#star-a-gist} - API method documentation
   */
  gistsStar(
    req: operations.GistsStarRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsStarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsStarRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/star",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsStarResponse =
        new operations.GistsStarResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unstar a gist
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#unstar-a-gist} - API method documentation
   */
  gistsUnstar(
    req: operations.GistsUnstarRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsUnstarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsUnstarRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/star",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsUnstarResponse =
        new operations.GistsUnstarResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 304].includes(httpRes?.status):
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a gist
   *
   * @remarks
   * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists/#update-a-gist} - API method documentation
   */
  gistsUpdate(
    req: operations.GistsUpdateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/gists/{gist_id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsUpdateResponse =
        new operations.GistsUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistSimple = utils.objectToClass(
              httpRes?.data,
              shared.GistSimple
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a gist comment
   *
   * @see {@link https://docs.github.com/enterprise-server@2.20/rest/reference/gists#update-a-gist-comment} - API method documentation
   */
  gistsUpdateComment(
    req: operations.GistsUpdateCommentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GistsUpdateCommentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GistsUpdateCommentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/gists/{gist_id}/comments/{comment_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GistsUpdateCommentResponse =
        new operations.GistsUpdateCommentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gistComment = utils.objectToClass(
              httpRes?.data,
              shared.GistComment
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }
}
