// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ImportSourceCredentialsXAmzTargetEnum
type ImportSourceCredentialsXAmzTargetEnum string

const (
	ImportSourceCredentialsXAmzTargetEnumCodeBuild20161006ImportSourceCredentials ImportSourceCredentialsXAmzTargetEnum = "CodeBuild_20161006.ImportSourceCredentials"
)

func (e *ImportSourceCredentialsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeBuild_20161006.ImportSourceCredentials":
		*e = ImportSourceCredentialsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportSourceCredentialsXAmzTargetEnum: %s", s)
	}
}

type ImportSourceCredentialsRequest struct {
	ImportSourceCredentialsInput shared.ImportSourceCredentialsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256            *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential               *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                     *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken            *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders            *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                   ImportSourceCredentialsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ImportSourceCredentialsResponse struct {
	// AccountLimitExceededException
	AccountLimitExceededException interface{}
	ContentType                   string
	// Success
	ImportSourceCredentialsOutput *shared.ImportSourceCredentialsOutput
	// InvalidInputException
	InvalidInputException interface{}
	StatusCode            int
	RawResponse           *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
