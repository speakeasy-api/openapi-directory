// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EmbedSettingsButtons - A collection of information about the buttons that appear on the interface of the embeddable player.
type EmbedSettingsButtons struct {
	// Whether the Embed button appears in the embeddable player for this video.
	Embed bool `json:"embed"`
	// Whether the Fullscreen button appears in the embeddable player for this video.
	Fullscreen bool `json:"fullscreen"`
	// Whether the HD button appears in the embeddable player for this video.
	Hd bool `json:"hd"`
	// Whether the Like button appears in the embeddable player for this video.
	Like bool `json:"like"`
	// Whether the Scaling button appears in the embeddable player for this video.
	Scaling bool `json:"scaling"`
	// Whether the Share button appears in the embeddable player for this video.
	Share bool `json:"share"`
	// Whether the Watch Later button appears in the embeddable player for this video.
	Watchlater bool `json:"watchlater"`
}

// EmbedSettingsLogosCustom - A collection of information relating to custom logos in the embeddable player.
type EmbedSettingsLogosCustom struct {
	// Whether the custom logo appears in the embeddable player.
	Active bool `json:"active"`
	// The URL that loads upon clicking the custom logo.
	Link string `json:"link"`
	// Whether the custom logo appears even when the player interface is hidden.
	Sticky bool `json:"sticky"`
}

// EmbedSettingsLogos - A collection of information about the logo in the corner of the embeddable player.
type EmbedSettingsLogos struct {
	// A collection of information relating to custom logos in the embeddable player.
	Custom EmbedSettingsLogosCustom `json:"custom"`
	// Whether the Vimeo logo appears in the embeddable player for this video.
	Vimeo bool `json:"vimeo"`
}

// EmbedSettingsTitleNameEnum - How the embeddable player handles the video title:
//
// Option descriptions:
//   - `hide` - The title is hidden.
//   - `show` - The title is shown.
type EmbedSettingsTitleNameEnum string

const (
	EmbedSettingsTitleNameEnumHide EmbedSettingsTitleNameEnum = "hide"
	EmbedSettingsTitleNameEnumShow EmbedSettingsTitleNameEnum = "show"
	EmbedSettingsTitleNameEnumUser EmbedSettingsTitleNameEnum = "user"
)

func (e *EmbedSettingsTitleNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = EmbedSettingsTitleNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmbedSettingsTitleNameEnum: %s", s)
	}
}

// EmbedSettingsTitleOwnerEnum - How the embeddable player handles the video owner's information:
//
// Option descriptions:
//   - `hide` - The owner's information is hidden.
//   - `show` - The owner's information is shown.
type EmbedSettingsTitleOwnerEnum string

const (
	EmbedSettingsTitleOwnerEnumHide EmbedSettingsTitleOwnerEnum = "hide"
	EmbedSettingsTitleOwnerEnumShow EmbedSettingsTitleOwnerEnum = "show"
	EmbedSettingsTitleOwnerEnumUser EmbedSettingsTitleOwnerEnum = "user"
)

func (e *EmbedSettingsTitleOwnerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = EmbedSettingsTitleOwnerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmbedSettingsTitleOwnerEnum: %s", s)
	}
}

// EmbedSettingsTitlePortraitEnum - How the embeddable player handles the video owner's portrait:
//
// Option descriptions:
//   - `hide` - The owner's portrait is hidden
//   - `show` - The owner's portrait is shown.
type EmbedSettingsTitlePortraitEnum string

const (
	EmbedSettingsTitlePortraitEnumHide EmbedSettingsTitlePortraitEnum = "hide"
	EmbedSettingsTitlePortraitEnumShow EmbedSettingsTitlePortraitEnum = "show"
	EmbedSettingsTitlePortraitEnumUser EmbedSettingsTitlePortraitEnum = "user"
)

func (e *EmbedSettingsTitlePortraitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hide":
		fallthrough
	case "show":
		fallthrough
	case "user":
		*e = EmbedSettingsTitlePortraitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EmbedSettingsTitlePortraitEnum: %s", s)
	}
}

// EmbedSettingsTitle - A collection of information relating to the embeddable player's title bar.
type EmbedSettingsTitle struct {
	// How the embeddable player handles the video title:
	//
	// Option descriptions:
	//  * `hide` - The title is hidden.
	//  * `show` - The title is shown.
	//
	Name EmbedSettingsTitleNameEnum `json:"name"`
	// How the embeddable player handles the video owner's information:
	//
	// Option descriptions:
	//  * `hide` - The owner's information is hidden.
	//  * `show` - The owner's information is shown.
	//
	Owner EmbedSettingsTitleOwnerEnum `json:"owner"`
	// How the embeddable player handles the video owner's portrait:
	//
	// Option descriptions:
	//  * `hide` - The owner's portrait is hidden
	//  * `show` - The owner's portrait is shown.
	//
	Portrait EmbedSettingsTitlePortraitEnum `json:"portrait"`
}

type EmbedSettings struct {
	// A collection of information about the buttons that appear on the interface of the embeddable player.
	Buttons EmbedSettingsButtons `json:"buttons"`
	// The primary player color, which controls the color of the progress bar, buttons, and more.
	Color string `json:"color"`
	// A collection of information about the logo in the corner of the embeddable player.
	Logos EmbedSettingsLogos `json:"logos"`
	// Whether the playbar appears in the embeddable player for this video.
	Playbar bool `json:"playbar"`
	// Whether the speed controls appear in the embeddable player for this video.
	Speed bool `json:"speed"`
	// A collection of information relating to the embeddable player's title bar.
	Title EmbedSettingsTitle `json:"title"`
	// The URI of the embed preset.
	URI *string `json:"uri,omitempty"`
	// Whether the volume controls appear in the embeddable player for this video.
	Volume bool `json:"volume"`
}
