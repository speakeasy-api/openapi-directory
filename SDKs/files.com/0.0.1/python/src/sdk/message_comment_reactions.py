"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MessageCommentReactions:
    r"""Operations about message_comment_reactions"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_message_comment_reactions_id(self, request: operations.DeleteMessageCommentReactionsIDRequest) -> operations.DeleteMessageCommentReactionsIDResponse:
        r"""Delete Message Comment Reaction
        Delete Message Comment Reaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMessageCommentReactionsIDRequest, base_url, '/message_comment_reactions/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMessageCommentReactionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_message_comment_reactions(self, request: operations.GetMessageCommentReactionsRequest) -> operations.GetMessageCommentReactionsResponse:
        r"""List Message Comment Reactions
        List Message Comment Reactions
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/message_comment_reactions'
        
        query_params = utils.get_query_params(operations.GetMessageCommentReactionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMessageCommentReactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MessageCommentReactionEntity]])
                res.message_comment_reaction_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_message_comment_reactions_id(self, request: operations.GetMessageCommentReactionsIDRequest) -> operations.GetMessageCommentReactionsIDResponse:
        r"""Show Message Comment Reaction
        Show Message Comment Reaction
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMessageCommentReactionsIDRequest, base_url, '/message_comment_reactions/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMessageCommentReactionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageCommentReactionEntity])
                res.message_comment_reaction_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_message_comment_reactions(self, request: operations.PostMessageCommentReactionsRequestBody) -> operations.PostMessageCommentReactionsResponse:
        r"""Create Message Comment Reaction
        Create Message Comment Reaction
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/message_comment_reactions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMessageCommentReactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageCommentReactionEntity])
                res.message_comment_reaction_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    