"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import on_demand_page as shared_on_demand_page
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CreateVodRequestBodyAcceptedCurrenciesEnum(str, Enum):
    r"""An array of accepted currencies.
    
    Option descriptions:
     * `AUD` - Australian Dollar
     * `CAD` - Canadian Dollar
     * `CHF` - Swiss Franc
     * `DKK` - Danish Krone
     * `EUR` - Euro
     * `GBP` - British Pound
     * `JPY` - Japanese Yen
     * `KRW` - South Korean Won
     * `NOK` - Norwegian Krone
     * `PLN` - Polish Zloty
     * `SEK` - Swedish Krona
     * `USD` - US Dollar
    """
    AUD = 'AUD'
    CAD = 'CAD'
    CHF = 'CHF'
    DKK = 'DKK'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    KRW = 'KRW'
    NOK = 'NOK'
    PLN = 'PLN'
    SEK = 'SEK'
    USD = 'USD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyBuyPrice:
    
    aud: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AUD'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in AUD."""  
    cad: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CAD'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in CAD."""  
    chf: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CHF'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in CHF."""  
    dkk: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DKK'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in DKK."""  
    eur: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EUR'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in EUR."""  
    gbp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GBP'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in GBP."""  
    jpy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JPY'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in JPY."""  
    krw: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KRW'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in KRW."""  
    nok: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NOK'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in NOK."""  
    pln: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PLN'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in PLN."""  
    sek: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SEK'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in SEK."""  
    usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('USD'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyBuy:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether the Buy action is active. *Required if `rent.active` is false."""  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether people who buy the video can download it. To use this field, `type` must be `film`."""  
    price: Optional[CreateVodRequestBodyBuyPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    
class CreateVodRequestBodyContentRatingEnum(str, Enum):
    r"""One or more ratings, either as a comma-separated list or as a JSON array depending on the request format."""
    DRUGS = 'drugs'
    LANGUAGE = 'language'
    NUDITY = 'nudity'
    SAFE = 'safe'
    UNRATED = 'unrated'
    VIOLENCE = 'violence'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyEpisodesBuyPrice:
    
    usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('USD'), 'exclude': lambda f: f is None }})
    r"""The purchase price per episode. *Required if `episodes.buy.active` is true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyEpisodesBuy:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether episodes can be bought."""  
    download: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download'), 'exclude': lambda f: f is None }})
    r"""Whether people who buy the episode can download it. To use this field, `type` must be `series`."""  
    price: Optional[CreateVodRequestBodyEpisodesBuyPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    
class CreateVodRequestBodyEpisodesRentPeriodEnum(str, Enum):
    r"""The period in which this episode can be rented for."""
    ONE_WEEK = '1 week'
    ONE_YEAR = '1 year'
    TWENTY_FOUR_HOUR = '24 hour'
    THREE_MONTH = '3 month'
    THIRTY_DAY = '30 day'
    FORTY_EIGHT_HOUR = '48 hour'
    SIX_MONTH = '6 month'
    SEVENTY_TWO_HOUR = '72 hour'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyEpisodesRentPrice:
    
    usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('USD'), 'exclude': lambda f: f is None }})
    r"""The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyEpisodesRent:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether episodes can be rented"""  
    period: Optional[CreateVodRequestBodyEpisodesRentPeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""The period in which this episode can be rented for."""  
    price: Optional[CreateVodRequestBodyEpisodesRentPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyEpisodes:
    
    buy: Optional[CreateVodRequestBodyEpisodesBuy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy'), 'exclude': lambda f: f is None }})  
    rent: Optional[CreateVodRequestBodyEpisodesRent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rent'), 'exclude': lambda f: f is None }})  
    
class CreateVodRequestBodyRentPeriodEnum(str, Enum):
    r"""The period in which this can be rented for."""
    ONE_WEEK = '1 week'
    ONE_YEAR = '1 year'
    TWENTY_FOUR_HOUR = '24 hour'
    THREE_MONTH = '3 month'
    THIRTY_DAY = '30 day'
    FORTY_EIGHT_HOUR = '48 hour'
    SIX_MONTH = '6 month'
    SEVENTY_TWO_HOUR = '72 hour'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyRentPrice:
    
    aud: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AUD'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in AUD."""  
    cad: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CAD'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in CAD."""  
    chf: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CHF'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in CHF."""  
    dkk: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DKK'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in DKK."""  
    eur: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EUR'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in EUR."""  
    gbp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GBP'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in GBP."""  
    jpy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JPY'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in JPY."""  
    krw: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KRW'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in KRW."""  
    nok: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NOK'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in NOK."""  
    pln: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PLN'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in PLN."""  
    sek: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SEK'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in SEK."""  
    usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('USD'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodyRent:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether the video can be rented. *Required if `buy.active` is false."""  
    period: Optional[CreateVodRequestBodyRentPeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})
    r"""The period in which this can be rented for."""  
    price: Optional[CreateVodRequestBodyRentPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodySubscriptionMonthlyPrice:
    
    usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('USD'), 'exclude': lambda f: f is None }})
    r"""The monthly subscription price in USD. *Required if `subscription.active` is true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodySubscriptionMonthly:
    
    active: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active'), 'exclude': lambda f: f is None }})
    r"""Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false."""  
    price: Optional[CreateVodRequestBodySubscriptionMonthlyPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBodySubscription:
    
    monthly: Optional[CreateVodRequestBodySubscriptionMonthly] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monthly'), 'exclude': lambda f: f is None }})  
    
class CreateVodRequestBodyTypeEnum(str, Enum):
    r"""The type of On Demand page."""
    FILM = 'film'
    SERIES = 'series'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodRequestBody:
    
    content_rating: CreateVodRequestBodyContentRatingEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_rating') }})
    r"""One or more ratings, either as a comma-separated list or as a JSON array depending on the request format."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The description of the On Demand page."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the On Demand page."""  
    type: CreateVodRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of On Demand page."""  
    accepted_currencies: Optional[CreateVodRequestBodyAcceptedCurrenciesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accepted_currencies'), 'exclude': lambda f: f is None }})
    r"""An array of accepted currencies.
    
    Option descriptions:
     * `AUD` - Australian Dollar
     * `CAD` - Canadian Dollar
     * `CHF` - Swiss Franc
     * `DKK` - Danish Krone
     * `EUR` - Euro
     * `GBP` - British Pound
     * `JPY` - Japanese Yen
     * `KRW` - South Korean Won
     * `NOK` - Norwegian Krone
     * `PLN` - Polish Zloty
     * `SEK` - Swedish Krona
     * `USD` - US Dollar
    """  
    buy: Optional[CreateVodRequestBodyBuy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy'), 'exclude': lambda f: f is None }})  
    domain_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_link'), 'exclude': lambda f: f is None }})
    r"""The custom domain of the On Demand page."""  
    episodes: Optional[CreateVodRequestBodyEpisodes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episodes'), 'exclude': lambda f: f is None }})  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The custom string to use in this On Demand page's Vimeo URL."""  
    rent: Optional[CreateVodRequestBodyRent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rent'), 'exclude': lambda f: f is None }})  
    subscription: Optional[CreateVodRequestBodySubscription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscription'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateVodRequest:
    
    request_body: CreateVodRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    user_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the user."""  
    

@dataclasses.dataclass
class CreateVodResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    on_demand_page: Optional[shared_on_demand_page.OnDemandPage] = dataclasses.field(default=None)
    r"""The On Demand page was created."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    