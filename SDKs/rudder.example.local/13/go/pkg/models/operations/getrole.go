// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetRole200ApplicationJSONActionEnum - The id of the action
type GetRole200ApplicationJSONActionEnum string

const (
	GetRole200ApplicationJSONActionEnumGetRole GetRole200ApplicationJSONActionEnum = "getRole"
)

func (e *GetRole200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getRole":
		*e = GetRole200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRole200ApplicationJSONActionEnum: %s", s)
	}
}

// GetRole200ApplicationJSONDataIDEnum - Name of the role
type GetRole200ApplicationJSONDataIDEnum string

const (
	GetRole200ApplicationJSONDataIDEnumInventory     GetRole200ApplicationJSONDataIDEnum = "inventory"
	GetRole200ApplicationJSONDataIDEnumCompliance    GetRole200ApplicationJSONDataIDEnum = "compliance"
	GetRole200ApplicationJSONDataIDEnumAdministrator GetRole200ApplicationJSONDataIDEnum = "administrator"
	GetRole200ApplicationJSONDataIDEnumEtc           GetRole200ApplicationJSONDataIDEnum = "etc"
)

func (e *GetRole200ApplicationJSONDataIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "inventory":
		fallthrough
	case "compliance":
		fallthrough
	case "administrator":
		fallthrough
	case "etc":
		*e = GetRole200ApplicationJSONDataIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRole200ApplicationJSONDataIDEnum: %s", s)
	}
}

type GetRole200ApplicationJSONDataRightsEnum string

const (
	GetRole200ApplicationJSONDataRightsEnumNodeRead       GetRole200ApplicationJSONDataRightsEnum = "node_read"
	GetRole200ApplicationJSONDataRightsEnumUserAccountAll GetRole200ApplicationJSONDataRightsEnum = "userAccount_all"
)

func (e *GetRole200ApplicationJSONDataRightsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "node_read":
		fallthrough
	case "userAccount_all":
		*e = GetRole200ApplicationJSONDataRightsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRole200ApplicationJSONDataRightsEnum: %s", s)
	}
}

type GetRole200ApplicationJSONData struct {
	// Name of the role
	ID GetRole200ApplicationJSONDataIDEnum `json:"id"`
	// Role's rights
	Rights []GetRole200ApplicationJSONDataRightsEnum `json:"rights"`
}

// GetRole200ApplicationJSONResultEnum - Result of the request
type GetRole200ApplicationJSONResultEnum string

const (
	GetRole200ApplicationJSONResultEnumSuccess GetRole200ApplicationJSONResultEnum = "success"
	GetRole200ApplicationJSONResultEnumError   GetRole200ApplicationJSONResultEnum = "error"
)

func (e *GetRole200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetRole200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRole200ApplicationJSONResultEnum: %s", s)
	}
}

// GetRole200ApplicationJSON - Roles informations
type GetRole200ApplicationJSON struct {
	// The id of the action
	Action GetRole200ApplicationJSONActionEnum `json:"action"`
	Data   []GetRole200ApplicationJSONData     `json:"data"`
	// Result of the request
	Result GetRole200ApplicationJSONResultEnum `json:"result"`
}

type GetRoleResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Roles informations
	GetRole200ApplicationJSONObject *GetRole200ApplicationJSON
}
