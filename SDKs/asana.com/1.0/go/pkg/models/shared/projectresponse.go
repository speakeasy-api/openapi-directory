// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// ProjectResponseColorEnum - Color of the project.
type ProjectResponseColorEnum string

const (
	ProjectResponseColorEnumDarkPink      ProjectResponseColorEnum = "dark-pink"
	ProjectResponseColorEnumDarkGreen     ProjectResponseColorEnum = "dark-green"
	ProjectResponseColorEnumDarkBlue      ProjectResponseColorEnum = "dark-blue"
	ProjectResponseColorEnumDarkRed       ProjectResponseColorEnum = "dark-red"
	ProjectResponseColorEnumDarkTeal      ProjectResponseColorEnum = "dark-teal"
	ProjectResponseColorEnumDarkBrown     ProjectResponseColorEnum = "dark-brown"
	ProjectResponseColorEnumDarkOrange    ProjectResponseColorEnum = "dark-orange"
	ProjectResponseColorEnumDarkPurple    ProjectResponseColorEnum = "dark-purple"
	ProjectResponseColorEnumDarkWarmGray  ProjectResponseColorEnum = "dark-warm-gray"
	ProjectResponseColorEnumLightPink     ProjectResponseColorEnum = "light-pink"
	ProjectResponseColorEnumLightGreen    ProjectResponseColorEnum = "light-green"
	ProjectResponseColorEnumLightBlue     ProjectResponseColorEnum = "light-blue"
	ProjectResponseColorEnumLightRed      ProjectResponseColorEnum = "light-red"
	ProjectResponseColorEnumLightTeal     ProjectResponseColorEnum = "light-teal"
	ProjectResponseColorEnumLightBrown    ProjectResponseColorEnum = "light-brown"
	ProjectResponseColorEnumLightOrange   ProjectResponseColorEnum = "light-orange"
	ProjectResponseColorEnumLightPurple   ProjectResponseColorEnum = "light-purple"
	ProjectResponseColorEnumLightWarmGray ProjectResponseColorEnum = "light-warm-gray"
)

func (e *ProjectResponseColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark-pink":
		fallthrough
	case "dark-green":
		fallthrough
	case "dark-blue":
		fallthrough
	case "dark-red":
		fallthrough
	case "dark-teal":
		fallthrough
	case "dark-brown":
		fallthrough
	case "dark-orange":
		fallthrough
	case "dark-purple":
		fallthrough
	case "dark-warm-gray":
		fallthrough
	case "light-pink":
		fallthrough
	case "light-green":
		fallthrough
	case "light-blue":
		fallthrough
	case "light-red":
		fallthrough
	case "light-teal":
		fallthrough
	case "light-brown":
		fallthrough
	case "light-orange":
		fallthrough
	case "light-purple":
		fallthrough
	case "light-warm-gray":
		*e = ProjectResponseColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectResponseColorEnum: %s", s)
	}
}

// ProjectResponseCurrentStatusColorEnum - The color associated with the status update.
type ProjectResponseCurrentStatusColorEnum string

const (
	ProjectResponseCurrentStatusColorEnumGreen  ProjectResponseCurrentStatusColorEnum = "green"
	ProjectResponseCurrentStatusColorEnumYellow ProjectResponseCurrentStatusColorEnum = "yellow"
	ProjectResponseCurrentStatusColorEnumRed    ProjectResponseCurrentStatusColorEnum = "red"
	ProjectResponseCurrentStatusColorEnumBlue   ProjectResponseCurrentStatusColorEnum = "blue"
)

func (e *ProjectResponseCurrentStatusColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "green":
		fallthrough
	case "yellow":
		fallthrough
	case "red":
		fallthrough
	case "blue":
		*e = ProjectResponseCurrentStatusColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectResponseCurrentStatusColorEnum: %s", s)
	}
}

// ProjectResponseCurrentStatus - A *project status* is an update on the progress of a particular project, and is sent out to all project followers when created. These updates include both text describing the update and a color code intended to represent the overall state of the project: "green" for projects that are on track, "yellow" for projects at risk, and "red" for projects that are behind.
type ProjectResponseCurrentStatus struct {
	Author *UserCompact `json:"author,omitempty"`
	// The color associated with the status update.
	Color ProjectResponseCurrentStatusColorEnum `json:"color"`
	// The time at which this resource was created.
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	CreatedBy *UserCompact `json:"created_by,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// [Opt In](/docs/input-output-options). The text content of the status update with formatting as HTML.
	HTMLText *string `json:"html_text,omitempty"`
	// The time at which this project status was last modified.
	// *Note: This does not currently reflect any changes in associations such as comments that may have been added or removed from the project status.*
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
	// The text content of the status update.
	Text string `json:"text"`
	// The title of the project status update.
	Title *string `json:"title,omitempty"`
}

// ProjectResponseDefaultViewEnum - The default view (list, board, calendar, or timeline) of a project.
type ProjectResponseDefaultViewEnum string

const (
	ProjectResponseDefaultViewEnumList     ProjectResponseDefaultViewEnum = "list"
	ProjectResponseDefaultViewEnumBoard    ProjectResponseDefaultViewEnum = "board"
	ProjectResponseDefaultViewEnumCalendar ProjectResponseDefaultViewEnum = "calendar"
	ProjectResponseDefaultViewEnumTimeline ProjectResponseDefaultViewEnum = "timeline"
)

func (e *ProjectResponseDefaultViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "list":
		fallthrough
	case "board":
		fallthrough
	case "calendar":
		fallthrough
	case "timeline":
		*e = ProjectResponseDefaultViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectResponseDefaultViewEnum: %s", s)
	}
}

// ProjectResponseIconEnum - The icon for a project.
type ProjectResponseIconEnum string

const (
	ProjectResponseIconEnumList           ProjectResponseIconEnum = "list"
	ProjectResponseIconEnumBoard          ProjectResponseIconEnum = "board"
	ProjectResponseIconEnumTimeline       ProjectResponseIconEnum = "timeline"
	ProjectResponseIconEnumCalendar       ProjectResponseIconEnum = "calendar"
	ProjectResponseIconEnumRocket         ProjectResponseIconEnum = "rocket"
	ProjectResponseIconEnumPeople         ProjectResponseIconEnum = "people"
	ProjectResponseIconEnumGraph          ProjectResponseIconEnum = "graph"
	ProjectResponseIconEnumStar           ProjectResponseIconEnum = "star"
	ProjectResponseIconEnumBug            ProjectResponseIconEnum = "bug"
	ProjectResponseIconEnumLightBulb      ProjectResponseIconEnum = "light_bulb"
	ProjectResponseIconEnumGlobe          ProjectResponseIconEnum = "globe"
	ProjectResponseIconEnumGear           ProjectResponseIconEnum = "gear"
	ProjectResponseIconEnumNotebook       ProjectResponseIconEnum = "notebook"
	ProjectResponseIconEnumComputer       ProjectResponseIconEnum = "computer"
	ProjectResponseIconEnumCheck          ProjectResponseIconEnum = "check"
	ProjectResponseIconEnumTarget         ProjectResponseIconEnum = "target"
	ProjectResponseIconEnumHTML           ProjectResponseIconEnum = "html"
	ProjectResponseIconEnumMegaphone      ProjectResponseIconEnum = "megaphone"
	ProjectResponseIconEnumChatBubbles    ProjectResponseIconEnum = "chat_bubbles"
	ProjectResponseIconEnumBriefcase      ProjectResponseIconEnum = "briefcase"
	ProjectResponseIconEnumPageLayout     ProjectResponseIconEnum = "page_layout"
	ProjectResponseIconEnumMountainFlag   ProjectResponseIconEnum = "mountain_flag"
	ProjectResponseIconEnumPuzzle         ProjectResponseIconEnum = "puzzle"
	ProjectResponseIconEnumPresentation   ProjectResponseIconEnum = "presentation"
	ProjectResponseIconEnumLineAndSymbols ProjectResponseIconEnum = "line_and_symbols"
	ProjectResponseIconEnumSpeedDial      ProjectResponseIconEnum = "speed_dial"
	ProjectResponseIconEnumRibbon         ProjectResponseIconEnum = "ribbon"
	ProjectResponseIconEnumShoe           ProjectResponseIconEnum = "shoe"
	ProjectResponseIconEnumShoppingBasket ProjectResponseIconEnum = "shopping_basket"
	ProjectResponseIconEnumMap            ProjectResponseIconEnum = "map"
	ProjectResponseIconEnumTicket         ProjectResponseIconEnum = "ticket"
	ProjectResponseIconEnumCoins          ProjectResponseIconEnum = "coins"
)

func (e *ProjectResponseIconEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "list":
		fallthrough
	case "board":
		fallthrough
	case "timeline":
		fallthrough
	case "calendar":
		fallthrough
	case "rocket":
		fallthrough
	case "people":
		fallthrough
	case "graph":
		fallthrough
	case "star":
		fallthrough
	case "bug":
		fallthrough
	case "light_bulb":
		fallthrough
	case "globe":
		fallthrough
	case "gear":
		fallthrough
	case "notebook":
		fallthrough
	case "computer":
		fallthrough
	case "check":
		fallthrough
	case "target":
		fallthrough
	case "html":
		fallthrough
	case "megaphone":
		fallthrough
	case "chat_bubbles":
		fallthrough
	case "briefcase":
		fallthrough
	case "page_layout":
		fallthrough
	case "mountain_flag":
		fallthrough
	case "puzzle":
		fallthrough
	case "presentation":
		fallthrough
	case "line_and_symbols":
		fallthrough
	case "speed_dial":
		fallthrough
	case "ribbon":
		fallthrough
	case "shoe":
		fallthrough
	case "shopping_basket":
		fallthrough
	case "map":
		fallthrough
	case "ticket":
		fallthrough
	case "coins":
		*e = ProjectResponseIconEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectResponseIconEnum: %s", s)
	}
}

// ProjectResponseOwner - A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks.
type ProjectResponseOwner struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// *Read-only except when same user as requester*. The user’s name.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// ProjectResponseTeam - A *team* is used to group related projects and people together within an organization. Each project in an organization is associated with a team.
type ProjectResponseTeam struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The name of the team.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// ProjectResponseWorkspace - A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.
type ProjectResponseWorkspace struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The name of the workspace.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// ProjectResponse - A *project* represents a prioritized list of tasks in Asana or a board with columns of tasks represented as cards. It exists in a single workspace or organization and is accessible to a subset of users in that workspace or organization, depending on its permissions.
type ProjectResponse struct {
	// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
	Archived *bool `json:"archived,omitempty"`
	// Color of the project.
	Color *ProjectResponseColorEnum `json:"color,omitempty"`
	// The time at which this resource was created.
	CreatedAt     *time.Time                    `json:"created_at,omitempty"`
	CurrentStatus *ProjectResponseCurrentStatus `json:"current_status,omitempty"`
	// Array of Custom Field Settings (in compact form).
	CustomFieldSettings []CustomFieldSettingCompact `json:"custom_field_settings,omitempty"`
	// Array of Custom Fields.
	CustomFields []CustomFieldCompact `json:"custom_fields,omitempty"`
	// The default view (list, board, calendar, or timeline) of a project.
	DefaultView *ProjectResponseDefaultViewEnum `json:"default_view,omitempty"`
	// *Deprecated: new integrations should prefer the due_on field.*
	DueDate *time.Time `json:"due_date,omitempty"`
	// The day on which this project is due. This takes a date with format YYYY-MM-DD.
	DueOn *time.Time `json:"due_on,omitempty"`
	// Array of users following this project. Followers are a subset of members who receive all notifications for a project, the default notification setting when adding members to a project in-product.
	Followers []UserCompact `json:"followers,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
	HTMLNotes *string `json:"html_notes,omitempty"`
	// The icon for a project.
	Icon *ProjectResponseIconEnum `json:"icon,omitempty"`
	// [Opt In](/docs/input-output-options). Determines if the project is a template.
	IsTemplate *bool `json:"is_template,omitempty"`
	// Array of users who are members of this project.
	Members []UserCompact `json:"members,omitempty"`
	// The time at which this project was last modified.
	// *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
	ModifiedAt *time.Time `json:"modified_at,omitempty"`
	// Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name *string `json:"name,omitempty"`
	// Free-form textual information associated with the project (ie., its description).
	Notes *string `json:"notes,omitempty"`
	// The current owner of the project, may be null.
	Owner *ProjectResponseOwner `json:"owner,omitempty"`
	// A url that points directly to the object within Asana.
	PermalinkURL *string `json:"permalink_url,omitempty"`
	// True if the project is public to the organization. If false, do not share this project with other users in this organization without explicitly checking to see if they have access.
	Public *bool `json:"public,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
	// The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*
	StartOn   *types.Date               `json:"start_on,omitempty"`
	Team      *ProjectResponseTeam      `json:"team,omitempty"`
	Workspace *ProjectResponseWorkspace `json:"workspace,omitempty"`
}
