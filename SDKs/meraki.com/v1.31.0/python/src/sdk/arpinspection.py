"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class ArpInspection:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_network_switch_dhcp_server_policy_arp_inspection_trusted_server(self, request: operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) -> operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse:
        r"""Add a server to be trusted by Dynamic ARP Inspection on this network
        Add a server to be trusted by Dynamic ARP Inspection on this network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, base_url, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSON])
                res.create_network_switch_dhcp_server_policy_arp_inspection_trusted_server_201_application_json_object = out

        return res

    def delete_network_switch_dhcp_server_policy_arp_inspection_trusted_server(self, request: operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) -> operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse:
        r"""Remove a server from being trusted by Dynamic ARP Inspection on this network
        Remove a server from being trusted by Dynamic ARP Inspection on this network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, base_url, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers(self, request: operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest) -> operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse:
        r"""Return the list of servers trusted by Dynamic ARP Inspection on this network
        Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest, base_url, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSON]])
                res.get_network_switch_dhcp_server_policy_arp_inspection_trusted_servers_200_application_json_objects = out

        return res

    def get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device(self, request: operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest) -> operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse:
        r"""Return the devices that have a Dynamic ARP Inspection warning and their warnings
        Return the devices that have a Dynamic ARP Inspection warning and their warnings
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest, base_url, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSON]])
                res.get_network_switch_dhcp_server_policy_arp_inspection_warnings_by_device_200_application_json_objects = out

        return res

    def update_network_switch_dhcp_server_policy_arp_inspection_trusted_server(self, request: operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest) -> operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse:
        r"""Update a server that is trusted by Dynamic ARP Inspection on this network
        Update a server that is trusted by Dynamic ARP Inspection on this network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest, base_url, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer200ApplicationJSON])
                res.update_network_switch_dhcp_server_policy_arp_inspection_trusted_server_200_application_json_object = out

        return res

    