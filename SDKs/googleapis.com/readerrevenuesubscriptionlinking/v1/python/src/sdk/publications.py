"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Publications:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def readerrevenuesubscriptionlinking_publications_readers_delete(self, request: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteRequest) -> operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteResponse:
        r"""Removes a publication reader, effectively severing the association with a Google user. If `force` is set to true, any entitlements for this reader will also be deleted. (Otherwise, the request will only work if the reader has no entitlements.) - If the reader does not exist, return NOT_FOUND. - Return FAILED_PRECONDITION if the force field is false (or unset) and entitlements are present."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReaderrevenuesubscriptionlinkingPublicationsReadersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_reader_response = out

        return res

    def readerrevenuesubscriptionlinking_publications_readers_get_entitlements(self, request: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsRequest) -> operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsResponse:
        r"""Gets the reader entitlements for a publication reader. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReaderrevenuesubscriptionlinkingPublicationsReadersGetEntitlementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReaderEntitlements])
                res.reader_entitlements = out

        return res

    def readerrevenuesubscriptionlinking_publications_readers_update_entitlements(self, request: operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsRequest) -> operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsResponse:
        r"""Updates the reader entitlements for a publication reader. The entire reader entitlements will be overwritten by the new reader entitlements in the payload, like a PUT. - Returns PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if the reader does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "reader_entitlements_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReaderrevenuesubscriptionlinkingPublicationsReadersUpdateEntitlementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReaderEntitlements])
                res.reader_entitlements = out

        return res

    