"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HolidaysHoliday:
    
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryCode'), 'exclude': lambda f: f is None }})
    r"""The CLDR territory code of the country in which the holiday is available. For example, \\"US\\", \\"DE\\", \\"GB\\". A holiday cutoff can only be configured in a shipping settings service with matching delivery country. Always present."""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""Date of the holiday, in ISO 8601 format. For example, \\"2016-12-25\\" for Christmas 2016. Always present."""  
    delivery_guarantee_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryGuaranteeDate'), 'exclude': lambda f: f is None }})
    r"""Date on which the order has to arrive at the customer's, in ISO 8601 format. For example, \\"2016-12-24\\" for 24th December 2016. Always present."""  
    delivery_guarantee_hour: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryGuaranteeHour'), 'exclude': lambda f: f is None }})
    r"""Hour of the day in the delivery location's timezone on the guaranteed delivery date by which the order has to arrive at the customer's. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Always present."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the holiday to be used when configuring holiday cutoffs. Always present."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The holiday type. Always present. Acceptable values are: - \\"`Christmas`\\" - \\"`Easter`\\" - \\"`Father's Day`\\" - \\"`Halloween`\\" - \\"`Independence Day (USA)`\\" - \\"`Mother's Day`\\" - \\"`Thanksgiving`\\" - \\"`Valentine's Day`\\" """  
    