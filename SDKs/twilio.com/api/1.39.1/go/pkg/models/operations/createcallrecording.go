// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

var CreateCallRecordingServerList = []string{
	"https://api.twilio.com",
}

type CreateCallRecordingSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type CreateCallRecordingPathParams struct {
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
	AccountSid string `pathParam:"style=simple,explode=false,name=AccountSid"`
	// The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
	CallSid string `pathParam:"style=simple,explode=false,name=CallSid"`
}

// CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum - The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
type CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum string

const (
	CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnumHead   CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum = "HEAD"
	CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnumGet    CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum = "GET"
	CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnumPost   CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum = "POST"
	CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnumPatch  CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum = "PATCH"
	CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnumPut    CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum = "PUT"
	CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnumDelete CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum = "DELETE"
)

func (e *CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum: %s", s)
	}
}

type CreateCallRecordingCreateCallRecordingRequest struct {
	// The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
	RecordingChannels *string `form:"name=RecordingChannels"`
	// The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
	RecordingStatusCallback *string `form:"name=RecordingStatusCallback"`
	// The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
	RecordingStatusCallbackEvent []string `form:"name=RecordingStatusCallbackEvent"`
	// The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
	RecordingStatusCallbackMethod *CreateCallRecordingCreateCallRecordingRequestRecordingStatusCallbackMethodEnum `form:"name=RecordingStatusCallbackMethod"`
	// The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
	RecordingTrack *string `form:"name=RecordingTrack"`
	// Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
	Trim *string `form:"name=Trim"`
}

type CreateCallRecordingRequest struct {
	PathParams CreateCallRecordingPathParams
	Request    *CreateCallRecordingCreateCallRecordingRequest `request:"mediaType=application/x-www-form-urlencoded"`
	Security   CreateCallRecordingSecurity
	ServerURL  *string
}

type CreateCallRecordingResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	APIV2010AccountCallCallRecording *shared.APIV2010AccountCallCallRecording
}
