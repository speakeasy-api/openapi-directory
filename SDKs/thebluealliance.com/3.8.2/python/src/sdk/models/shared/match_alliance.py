"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MatchAlliance:
    
    score: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('score') }})
    r"""Score for this alliance. Will be null or -1 for an unplayed match."""  
    team_keys: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_keys') }})  
    dq_team_keys: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dq_team_keys'), 'exclude': lambda f: f is None }})
    r"""TBA team keys (eg `frc254`) of any disqualified teams."""  
    surrogate_team_keys: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surrogate_team_keys'), 'exclude': lambda f: f is None }})
    r"""TBA team keys (eg `frc254`) of any teams playing as a surrogate."""  
    