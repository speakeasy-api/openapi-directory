/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Split } from "./split";
import { TableInput } from "./table";
import { Expose, Type } from "class-transformer";

/**
 * Request message for google.bigtable.admin.v2.BigtableTableAdmin.CreateTable
 */
export class CreateTableRequestInput extends SpeakeasyBase {
  /**
   * The optional list of row keys that will be used to initially split the table into several tablets (tablets are similar to HBase regions). Given two split keys, `s1` and `s2`, three tablets will be created, spanning the key ranges: `[, s1), [s1, s2), [s2, )`. Example: * Row keys := `["a", "apple", "custom", "customer_1", "customer_2",` `"other", "zz"]` * initial_split_keys := `["apple", "customer_1", "customer_2", "other"]` * Key assignment: - Tablet 1 `[, apple) => {"a"}.` - Tablet 2 `[apple, customer_1) => {"apple", "custom"}.` - Tablet 3 `[customer_1, customer_2) => {"customer_1"}.` - Tablet 4 `[customer_2, other) => {"customer_2"}.` - Tablet 5 `[other, ) => {"other", "zz"}.`
   */
  @SpeakeasyMetadata({ elemType: Split })
  @Expose({ name: "initialSplits" })
  @Type(() => Split)
  initialSplits?: Split[];

  /**
   * A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "table" })
  @Type(() => TableInput)
  table?: TableInput;

  /**
   * Required. The name by which the new table should be referred to within the parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`. Maximum 50 characters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tableId" })
  tableId?: string;
}
