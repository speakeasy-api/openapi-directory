<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Edits 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedResponse
     */
	public function androidpublisherEditsApksAddexternallyhosted(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "apksAddExternallyHostedRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksAddexternallyhostedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apksAddExternallyHostedResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApksAddExternallyHostedResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all current APKs of the app and edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListResponse
     */
	public function androidpublisherEditsApksList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apksListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApksListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads an APK and adds to the current edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadResponse
     */
	public function androidpublisherEditsApksUpload(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsApksUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apk = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Apk', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all current Android App Bundles of the app and edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListResponse
     */
	public function androidpublisherEditsBundlesList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bundlesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BundlesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadResponse
     */
	public function androidpublisherEditsBundlesUpload(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsBundlesUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bundle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bundle', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Commits an app edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitResponse
     */
	public function androidpublisherEditsCommit(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}:commit', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCommitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appEdit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppEdit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets country availability.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetResponse
     */
	public function androidpublisherEditsCountryavailabilityGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsCountryavailabilityGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trackCountryAvailability = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrackCountryAvailability', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an app edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteResponse
     */
	public function androidpublisherEditsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Uploads a new deobfuscation file and attaches to the specified APK.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadResponse
     */
	public function androidpublisherEditsDeobfuscationfilesUpload(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDeobfuscationfilesUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deobfuscationFilesUploadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeobfuscationFilesUploadResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets details of an app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetResponse
     */
	public function androidpublisherEditsDetailsGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches details of an app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchResponse
     */
	public function androidpublisherEditsDetailsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "appDetails", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates details of an app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateResponse
     */
	public function androidpublisherEditsDetailsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "appDetails", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsDetailsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppDetails', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches the expansion file configuration for the specified APK.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetResponse
     */
	public function androidpublisherEditsExpansionfilesGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->expansionFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExpansionFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchResponse
     */
	public function androidpublisherEditsExpansionfilesPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "expansionFile", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->expansionFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExpansionFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateResponse
     */
	public function androidpublisherEditsExpansionfilesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "expansionFile", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->expansionFile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExpansionFile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads a new expansion file and attaches to the specified APK.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadResponse
     */
	public function androidpublisherEditsExpansionfilesUpload(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsExpansionfilesUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->expansionFilesUploadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExpansionFilesUploadResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets an app edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetResponse
     */
	public function androidpublisherEditsGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appEdit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppEdit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the image (specified by id) from the edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteResponse
     */
	public function androidpublisherEditsImagesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes all images for the specified language and image type. Returns an empty response if no images are found.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallResponse
     */
	public function androidpublisherEditsImagesDeleteall(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesDeleteallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imagesDeleteAllResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImagesDeleteAllResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all images. The response may be empty.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListResponse
     */
	public function androidpublisherEditsImagesList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imagesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImagesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Uploads an image of the specified language and image type, and adds to the edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadResponse
     */
	public function androidpublisherEditsImagesUpload(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsImagesUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->imagesUploadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImagesUploadResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new edit for an app.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertResponse
     */
	public function androidpublisherEditsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appEdit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppEdit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a localized store listing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteResponse
     */
	public function androidpublisherEditsListingsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deletes all store listings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallResponse
     */
	public function androidpublisherEditsListingsDeleteall(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsDeleteallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a localized store listing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetResponse
     */
	public function androidpublisherEditsListingsGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Listing', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all localized store listings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListResponse
     */
	public function androidpublisherEditsListingsList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listingsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListingsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a localized store listing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchResponse
     */
	public function androidpublisherEditsListingsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listing", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Listing', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates or updates a localized store listing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateResponse
     */
	public function androidpublisherEditsListingsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listing", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsListingsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listing = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Listing', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets testers. Note: Testers resource does not support email lists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetResponse
     */
	public function androidpublisherEditsTestersGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testers = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Testers', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches testers. Note: Testers resource does not support email lists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchResponse
     */
	public function androidpublisherEditsTestersPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testers", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testers = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Testers', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates testers. Note: Testers resource does not support email lists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateResponse
     */
	public function androidpublisherEditsTestersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testers", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTestersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testers = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Testers', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetResponse
     */
	public function androidpublisherEditsTracksGet(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all tracks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListResponse
     */
	public function androidpublisherEditsTracksList(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tracksListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TracksListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchResponse
     */
	public function androidpublisherEditsTracksPatch(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "track1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a track.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateResponse
     */
	public function androidpublisherEditsTracksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "track1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsTracksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->track = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Track', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates an app edit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateResponse
     */
	public function androidpublisherEditsValidate(
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/androidpublisher/v3/applications/{packageName}/edits/{editId}:validate', \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AndroidpublisherEditsValidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->appEdit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AppEdit', 'json');
            }
        }

        return $response;
    }
}