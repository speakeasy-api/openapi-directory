// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SettingValueResponseWrapperMethodEnum - The HTTP method. It is the same as that of the corresponding request.
type SettingValueResponseWrapperMethodEnum string

const (
	SettingValueResponseWrapperMethodEnumGet     SettingValueResponseWrapperMethodEnum = "GET"
	SettingValueResponseWrapperMethodEnumHead    SettingValueResponseWrapperMethodEnum = "HEAD"
	SettingValueResponseWrapperMethodEnumPost    SettingValueResponseWrapperMethodEnum = "POST"
	SettingValueResponseWrapperMethodEnumPut     SettingValueResponseWrapperMethodEnum = "PUT"
	SettingValueResponseWrapperMethodEnumPatch   SettingValueResponseWrapperMethodEnum = "PATCH"
	SettingValueResponseWrapperMethodEnumDelete  SettingValueResponseWrapperMethodEnum = "DELETE"
	SettingValueResponseWrapperMethodEnumOptions SettingValueResponseWrapperMethodEnum = "OPTIONS"
	SettingValueResponseWrapperMethodEnumTrace   SettingValueResponseWrapperMethodEnum = "TRACE"
)

func (e *SettingValueResponseWrapperMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GET":
		fallthrough
	case "HEAD":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "PATCH":
		fallthrough
	case "DELETE":
		fallthrough
	case "OPTIONS":
		fallthrough
	case "TRACE":
		*e = SettingValueResponseWrapperMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SettingValueResponseWrapperMethodEnum: %s", s)
	}
}

type SettingValueResponseWrapper struct {
	// The Id of the corresponding request.
	//
	ID *string `json:"id,omitempty"`
	// The HTTP method. It is the same as that of the corresponding request.
	//
	Method   *SettingValueResponseWrapperMethodEnum `json:"method,omitempty"`
	Response *SettingValueResponse                  `json:"response,omitempty"`
	// The url as specified in the corresponding request.
	//
	URL *string `json:"url,omitempty"`
}
