"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import clientdetailsapimodel as shared_clientdetailsapimodel
from ..shared import currencydetailsapimodel as shared_currencydetailsapimodel
from ..shared import estimationactivityapimodel as shared_estimationactivityapimodel
from ..shared import estimationattachmentapimodel as shared_estimationattachmentapimodel
from ..shared import estimationgatewayapimodel as shared_estimationgatewayapimodel
from ..shared import estimationitemapimodel as shared_estimationitemapimodel
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class EstimationFullDetailsAPIModelStatusEnum(str, Enum):
    r"""Indicate the status of the estimation (paid/unpaid/overdue)"""
    DRAFT = 'Draft'
    ACCEPTED = 'Accepted'
    REJECTED = 'Rejected'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EstimationFullDetailsAPIModel:
    r"""OK"""
    
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessToken'), 'exclude': lambda f: f is None }})
    r"""Security access token used for accessing the estimation anonymously"""  
    activities: Optional[list[shared_estimationactivityapimodel.EstimationActivityAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Activities'), 'exclude': lambda f: f is None }})
    r"""List of estimation activities. estimation audit log"""  
    attachments: Optional[list[shared_estimationattachmentapimodel.EstimationAttachmentAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attachments'), 'exclude': lambda f: f is None }})
    r"""List of estimation attachments"""  
    client: Optional[shared_clientdetailsapimodel.ClientDetailsAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Client'), 'exclude': lambda f: f is None }})  
    cloned_from_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClonedFromId'), 'exclude': lambda f: f is None }})
    r"""Indicate from which estimation this estimation has been cloned from"""  
    currency: Optional[shared_currencydetailsapimodel.CurrencyDetailsAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})  
    discount_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DiscountAmount'), 'exclude': lambda f: f is None }})
    r"""Amount that goes as a discount"""  
    expires_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpiresOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indicates when the estimation will be proclamed as due"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Estimation id"""  
    issued_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Indicates when the estimation was issued"""  
    items: Optional[list[shared_estimationitemapimodel.EstimationItemAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Items'), 'exclude': lambda f: f is None }})
    r"""List of estimation items"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notes'), 'exclude': lambda f: f is None }})
    r"""Internal note regarding the estimation"""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }})
    r"""Unique estimation number"""  
    payment_gateways: Optional[list[shared_estimationgatewayapimodel.EstimationGatewayAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentGateways'), 'exclude': lambda f: f is None }})
    r"""List of enabled payment gateways for this estimation"""  
    po_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PoNumber'), 'exclude': lambda f: f is None }})
    r"""Unique number generated by the buyer"""  
    status: Optional[EstimationFullDetailsAPIModelStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""Indicate the status of the estimation (paid/unpaid/overdue)"""  
    sub_total_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubTotalAmount'), 'exclude': lambda f: f is None }})
    r"""Total amount of the estimation without tax"""  
    tax_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxAmount'), 'exclude': lambda f: f is None }})
    r"""Amount that goes to the tax"""  
    terms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Terms'), 'exclude': lambda f: f is None }})
    r"""Terms of agreement"""  
    total_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalAmount'), 'exclude': lambda f: f is None }})
    r"""Total amount of the estimation with tax"""  
    