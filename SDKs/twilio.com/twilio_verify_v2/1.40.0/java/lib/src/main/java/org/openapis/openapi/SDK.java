/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://verify.twilio.com",
	};
    /**
	 * CREATE_ACCESS_TOKEN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ACCESS_TOKEN_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_BUCKET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BUCKET_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_CHALLENGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CHALLENGE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_ENTITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ENTITY_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_MESSAGING_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MESSAGING_CONFIGURATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_NEW_FACTOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_NEW_FACTOR_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_NOTIFICATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_RATE_LIMIT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_RATE_LIMIT_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_SAFELIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SAFELIST_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_VERIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_VERIFICATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_VERIFICATION_CHECK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_VERIFICATION_CHECK_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * CREATE_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WEBHOOK_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_BUCKET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_BUCKET_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_ENTITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ENTITY_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_FACTOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FACTOR_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_MESSAGING_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MESSAGING_CONFIGURATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_RATE_LIMIT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_RATE_LIMIT_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_SAFELIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SAFELIST_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * DELETE_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WEBHOOK_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_ACCESS_TOKEN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ACCESS_TOKEN_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_BUCKET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BUCKET_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_CHALLENGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CHALLENGE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_ENTITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ENTITY_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_FACTOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FACTOR_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_FORM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FORM_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_MESSAGING_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MESSAGING_CONFIGURATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_RATE_LIMIT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RATE_LIMIT_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_SAFELIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SAFELIST_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_VERIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_VERIFICATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_VERIFICATION_ATTEMPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_VERIFICATION_ATTEMPT_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_VERIFICATION_ATTEMPTS_SUMMARY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_VERIFICATION_ATTEMPTS_SUMMARY_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * FETCH_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WEBHOOK_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_BUCKET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BUCKET_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_CHALLENGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CHALLENGE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_ENTITY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ENTITY_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_FACTOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FACTOR_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_MESSAGING_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MESSAGING_CONFIGURATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_RATE_LIMIT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_RATE_LIMIT_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_VERIFICATION_ATTEMPT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_VERIFICATION_ATTEMPT_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_VERIFICATION_TEMPLATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_VERIFICATION_TEMPLATE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * LIST_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WEBHOOK_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_BUCKET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_BUCKET_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_CHALLENGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CHALLENGE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_FACTOR_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FACTOR_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_MESSAGING_CONFIGURATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MESSAGING_CONFIGURATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_RATE_LIMIT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_RATE_LIMIT_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_VERIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_VERIFICATION_SERVERS = {
        "https://verify.twilio.com",
    };
	
    /**
	 * UPDATE_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WEBHOOK_SERVERS = {
        "https://verify.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Create a new enrollment Access Token for the Entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateAccessTokenResponse createAccessToken(org.openapis.openapi.models.operations.CreateAccessTokenRequest request) throws Exception {
        String baseUrl = CREATE_ACCESS_TOKEN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateAccessTokenPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/AccessTokens", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAccessTokenResponse res = new org.openapis.openapi.models.operations.CreateAccessTokenResponse() {{
            verifyV2ServiceAccessToken = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceAccessToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceAccessToken.class);
                res.verifyV2ServiceAccessToken = out;
            }
        }

        return res;
    }

    /**
     * Create a new Bucket for a Rate Limit
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateBucketResponse createBucket(org.openapis.openapi.models.operations.CreateBucketRequest request) throws Exception {
        String baseUrl = CREATE_BUCKET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateBucketPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBucketResponse res = new org.openapis.openapi.models.operations.CreateBucketResponse() {{
            verifyV2ServiceRateLimitBucket = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceRateLimitBucket out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceRateLimitBucket.class);
                res.verifyV2ServiceRateLimitBucket = out;
            }
        }

        return res;
    }

    /**
     * Create a new Challenge for the Factor
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateChallengeResponse createChallenge(org.openapis.openapi.models.operations.CreateChallengeRequest request) throws Exception {
        String baseUrl = CREATE_CHALLENGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateChallengePathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateChallengeResponse res = new org.openapis.openapi.models.operations.CreateChallengeResponse() {{
            verifyV2ServiceEntityChallenge = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallenge out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallenge.class);
                res.verifyV2ServiceEntityChallenge = out;
            }
        }

        return res;
    }

    /**
     * Create a new Entity for the Service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateEntityResponse createEntity(org.openapis.openapi.models.operations.CreateEntityRequest request) throws Exception {
        String baseUrl = CREATE_ENTITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateEntityPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateEntityResponse res = new org.openapis.openapi.models.operations.CreateEntityResponse() {{
            verifyV2ServiceEntity = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntity.class);
                res.verifyV2ServiceEntity = out;
            }
        }

        return res;
    }

    /**
     * Create a new MessagingConfiguration for a service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMessagingConfigurationResponse createMessagingConfiguration(org.openapis.openapi.models.operations.CreateMessagingConfigurationRequest request) throws Exception {
        String baseUrl = CREATE_MESSAGING_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateMessagingConfigurationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/MessagingConfigurations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMessagingConfigurationResponse res = new org.openapis.openapi.models.operations.CreateMessagingConfigurationResponse() {{
            verifyV2ServiceMessagingConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceMessagingConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceMessagingConfiguration.class);
                res.verifyV2ServiceMessagingConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Create a new Factor for the Entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNewFactorResponse createNewFactor(org.openapis.openapi.models.operations.CreateNewFactorRequest request) throws Exception {
        String baseUrl = CREATE_NEW_FACTOR_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNewFactorPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNewFactorResponse res = new org.openapis.openapi.models.operations.CreateNewFactorResponse() {{
            verifyV2ServiceEntityNewFactor = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntityNewFactor out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntityNewFactor.class);
                res.verifyV2ServiceEntityNewFactor = out;
            }
        }

        return res;
    }

    /**
     * Create a new Notification for the corresponding Challenge
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateNotificationResponse createNotification(org.openapis.openapi.models.operations.CreateNotificationRequest request) throws Exception {
        String baseUrl = CREATE_NOTIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNotificationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{ChallengeSid}/Notifications", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNotificationResponse res = new org.openapis.openapi.models.operations.CreateNotificationResponse() {{
            verifyV2ServiceEntityChallengeNotification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallengeNotification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallengeNotification.class);
                res.verifyV2ServiceEntityChallengeNotification = out;
            }
        }

        return res;
    }

    /**
     * Create a new Rate Limit for a Service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateRateLimitResponse createRateLimit(org.openapis.openapi.models.operations.CreateRateLimitRequest request) throws Exception {
        String baseUrl = CREATE_RATE_LIMIT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateRateLimitPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateRateLimitResponse res = new org.openapis.openapi.models.operations.CreateRateLimitResponse() {{
            verifyV2ServiceRateLimit = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceRateLimit out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceRateLimit.class);
                res.verifyV2ServiceRateLimit = out;
            }
        }

        return res;
    }

    /**
     * Add a new phone number to SafeList.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateSafelistResponse createSafelist(org.openapis.openapi.models.operations.CreateSafelistRequest request) throws Exception {
        String baseUrl = CREATE_SAFELIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/SafeList/Numbers");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSafelistResponse res = new org.openapis.openapi.models.operations.CreateSafelistResponse() {{
            verifyV2Safelist = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2Safelist out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2Safelist.class);
                res.verifyV2Safelist = out;
            }
        }

        return res;
    }

    /**
     * Create a new Verification Service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceRequest request) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse() {{
            verifyV2Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2Service.class);
                res.verifyV2Service = out;
            }
        }

        return res;
    }

    /**
     * Create a new Verification using a Service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateVerificationResponse createVerification(org.openapis.openapi.models.operations.CreateVerificationRequest request) throws Exception {
        String baseUrl = CREATE_VERIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateVerificationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Verifications", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateVerificationResponse res = new org.openapis.openapi.models.operations.CreateVerificationResponse() {{
            verifyV2ServiceVerification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceVerification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceVerification.class);
                res.verifyV2ServiceVerification = out;
            }
        }

        return res;
    }

    /**
     * challenge a specific Verification Check.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateVerificationCheckResponse createVerificationCheck(org.openapis.openapi.models.operations.CreateVerificationCheckRequest request) throws Exception {
        String baseUrl = CREATE_VERIFICATION_CHECK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateVerificationCheckPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/VerificationCheck", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateVerificationCheckResponse res = new org.openapis.openapi.models.operations.CreateVerificationCheckResponse() {{
            verifyV2ServiceVerificationCheck = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceVerificationCheck out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceVerificationCheck.class);
                res.verifyV2ServiceVerificationCheck = out;
            }
        }

        return res;
    }

    /**
     * Create a new Webhook for the Service
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateWebhookResponse createWebhook(org.openapis.openapi.models.operations.CreateWebhookRequest request) throws Exception {
        String baseUrl = CREATE_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateWebhookPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWebhookResponse res = new org.openapis.openapi.models.operations.CreateWebhookResponse() {{
            verifyV2ServiceWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceWebhook.class);
                res.verifyV2ServiceWebhook = out;
            }
        }

        return res;
    }

    /**
     * Delete a specific Bucket.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBucketResponse deleteBucket(org.openapis.openapi.models.operations.DeleteBucketRequest request) throws Exception {
        String baseUrl = DELETE_BUCKET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBucketPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBucketResponse res = new org.openapis.openapi.models.operations.DeleteBucketResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Entity.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteEntityResponse deleteEntity(org.openapis.openapi.models.operations.DeleteEntityRequest request) throws Exception {
        String baseUrl = DELETE_ENTITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteEntityPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteEntityResponse res = new org.openapis.openapi.models.operations.DeleteEntityResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Factor.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteFactorResponse deleteFactor(org.openapis.openapi.models.operations.DeleteFactorRequest request) throws Exception {
        String baseUrl = DELETE_FACTOR_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFactorPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFactorResponse res = new org.openapis.openapi.models.operations.DeleteFactorResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific MessagingConfiguration.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMessagingConfigurationResponse deleteMessagingConfiguration(org.openapis.openapi.models.operations.DeleteMessagingConfigurationRequest request) throws Exception {
        String baseUrl = DELETE_MESSAGING_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMessagingConfigurationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMessagingConfigurationResponse res = new org.openapis.openapi.models.operations.DeleteMessagingConfigurationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Rate Limit.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRateLimitResponse deleteRateLimit(org.openapis.openapi.models.operations.DeleteRateLimitRequest request) throws Exception {
        String baseUrl = DELETE_RATE_LIMIT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRateLimitPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRateLimitResponse res = new org.openapis.openapi.models.operations.DeleteRateLimitResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove a phone number from SafeList.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSafelistResponse deleteSafelist(org.openapis.openapi.models.operations.DeleteSafelistRequest request) throws Exception {
        String baseUrl = DELETE_SAFELIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSafelistPathParams.class, baseUrl, "/v2/SafeList/Numbers/{PhoneNumber}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSafelistResponse res = new org.openapis.openapi.models.operations.DeleteSafelistResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Verification Service Instance.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServicePathParams.class, baseUrl, "/v2/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Webhook.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteWebhookResponse deleteWebhook(org.openapis.openapi.models.operations.DeleteWebhookRequest request) throws Exception {
        String baseUrl = DELETE_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWebhookPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWebhookResponse res = new org.openapis.openapi.models.operations.DeleteWebhookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch an Access Token for the Entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchAccessTokenResponse fetchAccessToken(org.openapis.openapi.models.operations.FetchAccessTokenRequest request) throws Exception {
        String baseUrl = FETCH_ACCESS_TOKEN_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAccessTokenPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/AccessTokens/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAccessTokenResponse res = new org.openapis.openapi.models.operations.FetchAccessTokenResponse() {{
            verifyV2ServiceAccessToken = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceAccessToken out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceAccessToken.class);
                res.verifyV2ServiceAccessToken = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Bucket.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchBucketResponse fetchBucket(org.openapis.openapi.models.operations.FetchBucketRequest request) throws Exception {
        String baseUrl = FETCH_BUCKET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBucketPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBucketResponse res = new org.openapis.openapi.models.operations.FetchBucketResponse() {{
            verifyV2ServiceRateLimitBucket = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceRateLimitBucket out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceRateLimitBucket.class);
                res.verifyV2ServiceRateLimitBucket = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Challenge.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchChallengeResponse fetchChallenge(org.openapis.openapi.models.operations.FetchChallengeRequest request) throws Exception {
        String baseUrl = FETCH_CHALLENGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchChallengePathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchChallengeResponse res = new org.openapis.openapi.models.operations.FetchChallengeResponse() {{
            verifyV2ServiceEntityChallenge = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallenge out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallenge.class);
                res.verifyV2ServiceEntityChallenge = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Entity.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchEntityResponse fetchEntity(org.openapis.openapi.models.operations.FetchEntityRequest request) throws Exception {
        String baseUrl = FETCH_ENTITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchEntityPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchEntityResponse res = new org.openapis.openapi.models.operations.FetchEntityResponse() {{
            verifyV2ServiceEntity = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntity.class);
                res.verifyV2ServiceEntity = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Factor.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFactorResponse fetchFactor(org.openapis.openapi.models.operations.FetchFactorRequest request) throws Exception {
        String baseUrl = FETCH_FACTOR_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFactorPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFactorResponse res = new org.openapis.openapi.models.operations.FetchFactorResponse() {{
            verifyV2ServiceEntityFactor = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntityFactor out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntityFactor.class);
                res.verifyV2ServiceEntityFactor = out;
            }
        }

        return res;
    }

    /**
     * Fetch the forms for a specific Form Type.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchFormResponse fetchForm(org.openapis.openapi.models.operations.FetchFormRequest request) throws Exception {
        String baseUrl = FETCH_FORM_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFormPathParams.class, baseUrl, "/v2/Forms/{FormType}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFormResponse res = new org.openapis.openapi.models.operations.FetchFormResponse() {{
            verifyV2Form = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2Form out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2Form.class);
                res.verifyV2Form = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific MessagingConfiguration.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMessagingConfigurationResponse fetchMessagingConfiguration(org.openapis.openapi.models.operations.FetchMessagingConfigurationRequest request) throws Exception {
        String baseUrl = FETCH_MESSAGING_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMessagingConfigurationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMessagingConfigurationResponse res = new org.openapis.openapi.models.operations.FetchMessagingConfigurationResponse() {{
            verifyV2ServiceMessagingConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceMessagingConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceMessagingConfiguration.class);
                res.verifyV2ServiceMessagingConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Rate Limit.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRateLimitResponse fetchRateLimit(org.openapis.openapi.models.operations.FetchRateLimitRequest request) throws Exception {
        String baseUrl = FETCH_RATE_LIMIT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRateLimitPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRateLimitResponse res = new org.openapis.openapi.models.operations.FetchRateLimitResponse() {{
            verifyV2ServiceRateLimit = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceRateLimit out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceRateLimit.class);
                res.verifyV2ServiceRateLimit = out;
            }
        }

        return res;
    }

    /**
     * Check if a phone number exists in SafeList.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSafelistResponse fetchSafelist(org.openapis.openapi.models.operations.FetchSafelistRequest request) throws Exception {
        String baseUrl = FETCH_SAFELIST_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSafelistPathParams.class, baseUrl, "/v2/SafeList/Numbers/{PhoneNumber}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSafelistResponse res = new org.openapis.openapi.models.operations.FetchSafelistResponse() {{
            verifyV2Safelist = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2Safelist out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2Safelist.class);
                res.verifyV2Safelist = out;
            }
        }

        return res;
    }

    /**
     * Fetch specific Verification Service Instance.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServicePathParams.class, baseUrl, "/v2/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse() {{
            verifyV2Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2Service.class);
                res.verifyV2Service = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Verification
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVerificationResponse fetchVerification(org.openapis.openapi.models.operations.FetchVerificationRequest request) throws Exception {
        String baseUrl = FETCH_VERIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchVerificationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Verifications/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchVerificationResponse res = new org.openapis.openapi.models.operations.FetchVerificationResponse() {{
            verifyV2ServiceVerification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceVerification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceVerification.class);
                res.verifyV2ServiceVerification = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific verification attempt.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVerificationAttemptResponse fetchVerificationAttempt(org.openapis.openapi.models.operations.FetchVerificationAttemptRequest request) throws Exception {
        String baseUrl = FETCH_VERIFICATION_ATTEMPT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchVerificationAttemptPathParams.class, baseUrl, "/v2/Attempts/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchVerificationAttemptResponse res = new org.openapis.openapi.models.operations.FetchVerificationAttemptResponse() {{
            verifyV2VerificationAttempt = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2VerificationAttempt out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2VerificationAttempt.class);
                res.verifyV2VerificationAttempt = out;
            }
        }

        return res;
    }

    /**
     * Get a summary of how many attempts were made and how many were converted.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchVerificationAttemptsSummaryResponse fetchVerificationAttemptsSummary(org.openapis.openapi.models.operations.FetchVerificationAttemptsSummaryRequest request) throws Exception {
        String baseUrl = FETCH_VERIFICATION_ATTEMPTS_SUMMARY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Attempts/Summary");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchVerificationAttemptsSummaryQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchVerificationAttemptsSummaryResponse res = new org.openapis.openapi.models.operations.FetchVerificationAttemptsSummaryResponse() {{
            verifyV2VerificationAttemptsSummary = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2VerificationAttemptsSummary out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2VerificationAttemptsSummary.class);
                res.verifyV2VerificationAttemptsSummary = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Webhook.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchWebhookResponse fetchWebhook(org.openapis.openapi.models.operations.FetchWebhookRequest request) throws Exception {
        String baseUrl = FETCH_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWebhookPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWebhookResponse res = new org.openapis.openapi.models.operations.FetchWebhookResponse() {{
            verifyV2ServiceWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceWebhook.class);
                res.verifyV2ServiceWebhook = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Buckets for a Rate Limit.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListBucketResponse listBucket(org.openapis.openapi.models.operations.ListBucketRequest request) throws Exception {
        String baseUrl = LIST_BUCKET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBucketPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBucketQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBucketResponse res = new org.openapis.openapi.models.operations.ListBucketResponse() {{
            listBucketResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBucketListBucketResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBucketListBucketResponse.class);
                res.listBucketResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Challenges for a Factor.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListChallengeResponse listChallenge(org.openapis.openapi.models.operations.ListChallengeRequest request) throws Exception {
        String baseUrl = LIST_CHALLENGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListChallengePathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListChallengeQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListChallengeResponse res = new org.openapis.openapi.models.operations.ListChallengeResponse() {{
            listChallengeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListChallengeListChallengeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListChallengeListChallengeResponse.class);
                res.listChallengeResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Entities for a Service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListEntityResponse listEntity(org.openapis.openapi.models.operations.ListEntityRequest request) throws Exception {
        String baseUrl = LIST_ENTITY_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListEntityPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListEntityQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListEntityResponse res = new org.openapis.openapi.models.operations.ListEntityResponse() {{
            listEntityResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListEntityListEntityResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListEntityListEntityResponse.class);
                res.listEntityResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Factors for an Entity.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListFactorResponse listFactor(org.openapis.openapi.models.operations.ListFactorRequest request) throws Exception {
        String baseUrl = LIST_FACTOR_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFactorPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFactorQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFactorResponse res = new org.openapis.openapi.models.operations.ListFactorResponse() {{
            listFactorResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFactorListFactorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFactorListFactorResponse.class);
                res.listFactorResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Messaging Configurations for a Service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMessagingConfigurationResponse listMessagingConfiguration(org.openapis.openapi.models.operations.ListMessagingConfigurationRequest request) throws Exception {
        String baseUrl = LIST_MESSAGING_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMessagingConfigurationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/MessagingConfigurations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMessagingConfigurationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMessagingConfigurationResponse res = new org.openapis.openapi.models.operations.ListMessagingConfigurationResponse() {{
            listMessagingConfigurationResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMessagingConfigurationListMessagingConfigurationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMessagingConfigurationListMessagingConfigurationResponse.class);
                res.listMessagingConfigurationResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Rate Limits for a service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRateLimitResponse listRateLimit(org.openapis.openapi.models.operations.ListRateLimitRequest request) throws Exception {
        String baseUrl = LIST_RATE_LIMIT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRateLimitPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRateLimitQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRateLimitResponse res = new org.openapis.openapi.models.operations.ListRateLimitResponse() {{
            listRateLimitResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRateLimitListRateLimitResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRateLimitListRateLimitResponse.class);
                res.listRateLimitResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Verification Services for an account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse() {{
            listServiceResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    /**
     * List all the verification attempts for a given Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVerificationAttemptResponse listVerificationAttempt(org.openapis.openapi.models.operations.ListVerificationAttemptRequest request) throws Exception {
        String baseUrl = LIST_VERIFICATION_ATTEMPT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Attempts");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListVerificationAttemptQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListVerificationAttemptResponse res = new org.openapis.openapi.models.operations.ListVerificationAttemptResponse() {{
            listVerificationAttemptResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListVerificationAttemptListVerificationAttemptResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListVerificationAttemptListVerificationAttemptResponse.class);
                res.listVerificationAttemptResponse = out;
            }
        }

        return res;
    }

    /**
     * List all the available templates for a given Account.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListVerificationTemplateResponse listVerificationTemplate(org.openapis.openapi.models.operations.ListVerificationTemplateRequest request) throws Exception {
        String baseUrl = LIST_VERIFICATION_TEMPLATE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/Templates");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListVerificationTemplateQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListVerificationTemplateResponse res = new org.openapis.openapi.models.operations.ListVerificationTemplateResponse() {{
            listVerificationTemplateResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListVerificationTemplateListVerificationTemplateResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListVerificationTemplateListVerificationTemplateResponse.class);
                res.listVerificationTemplateResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Webhooks for a Service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListWebhookResponse listWebhook(org.openapis.openapi.models.operations.ListWebhookRequest request) throws Exception {
        String baseUrl = LIST_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWebhookPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Webhooks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWebhookQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWebhookResponse res = new org.openapis.openapi.models.operations.ListWebhookResponse() {{
            listWebhookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWebhookListWebhookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWebhookListWebhookResponse.class);
                res.listWebhookResponse = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Bucket.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateBucketResponse updateBucket(org.openapis.openapi.models.operations.UpdateBucketRequest request) throws Exception {
        String baseUrl = UPDATE_BUCKET_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateBucketPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{RateLimitSid}/Buckets/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateBucketResponse res = new org.openapis.openapi.models.operations.UpdateBucketResponse() {{
            verifyV2ServiceRateLimitBucket = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceRateLimitBucket out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceRateLimitBucket.class);
                res.verifyV2ServiceRateLimitBucket = out;
            }
        }

        return res;
    }

    /**
     * Verify a specific Challenge.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateChallengeResponse updateChallenge(org.openapis.openapi.models.operations.UpdateChallengeRequest request) throws Exception {
        String baseUrl = UPDATE_CHALLENGE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateChallengePathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Challenges/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateChallengeResponse res = new org.openapis.openapi.models.operations.UpdateChallengeResponse() {{
            verifyV2ServiceEntityChallenge = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallenge out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntityChallenge.class);
                res.verifyV2ServiceEntityChallenge = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Factor. This endpoint can be used to Verify a Factor if passed an `AuthPayload` param.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateFactorResponse updateFactor(org.openapis.openapi.models.operations.UpdateFactorRequest request) throws Exception {
        String baseUrl = UPDATE_FACTOR_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFactorPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Entities/{Identity}/Factors/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFactorResponse res = new org.openapis.openapi.models.operations.UpdateFactorResponse() {{
            verifyV2ServiceEntityFactor = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceEntityFactor out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceEntityFactor.class);
                res.verifyV2ServiceEntityFactor = out;
            }
        }

        return res;
    }

    /**
     * Update a specific MessagingConfiguration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMessagingConfigurationResponse updateMessagingConfiguration(org.openapis.openapi.models.operations.UpdateMessagingConfigurationRequest request) throws Exception {
        String baseUrl = UPDATE_MESSAGING_CONFIGURATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMessagingConfigurationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/MessagingConfigurations/{Country}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMessagingConfigurationResponse res = new org.openapis.openapi.models.operations.UpdateMessagingConfigurationResponse() {{
            verifyV2ServiceMessagingConfiguration = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceMessagingConfiguration out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceMessagingConfiguration.class);
                res.verifyV2ServiceMessagingConfiguration = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Rate Limit.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRateLimitResponse updateRateLimit(org.openapis.openapi.models.operations.UpdateRateLimitRequest request) throws Exception {
        String baseUrl = UPDATE_RATE_LIMIT_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRateLimitPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/RateLimits/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRateLimitResponse res = new org.openapis.openapi.models.operations.UpdateRateLimitResponse() {{
            verifyV2ServiceRateLimit = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceRateLimit out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceRateLimit.class);
                res.verifyV2ServiceRateLimit = out;
            }
        }

        return res;
    }

    /**
     * Update a specific Verification Service.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServicePathParams.class, baseUrl, "/v2/Services/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse() {{
            verifyV2Service = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2Service.class);
                res.verifyV2Service = out;
            }
        }

        return res;
    }

    /**
     * Update a Verification status
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateVerificationResponse updateVerification(org.openapis.openapi.models.operations.UpdateVerificationRequest request) throws Exception {
        String baseUrl = UPDATE_VERIFICATION_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateVerificationPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Verifications/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateVerificationResponse res = new org.openapis.openapi.models.operations.UpdateVerificationResponse() {{
            verifyV2ServiceVerification = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceVerification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceVerification.class);
                res.verifyV2ServiceVerification = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWebhookResponse updateWebhook(org.openapis.openapi.models.operations.UpdateWebhookRequest request) throws Exception {
        String baseUrl = UPDATE_WEBHOOK_SERVERS[0];
        if (request.serverURL != null && !request.serverURL.isBlank()) {
            baseUrl = request.serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWebhookPathParams.class, baseUrl, "/v2/Services/{ServiceSid}/Webhooks/{Sid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWebhookResponse res = new org.openapis.openapi.models.operations.UpdateWebhookResponse() {{
            verifyV2ServiceWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VerifyV2ServiceWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VerifyV2ServiceWebhook.class);
                res.verifyV2ServiceWebhook = out;
            }
        }

        return res;
    }
}