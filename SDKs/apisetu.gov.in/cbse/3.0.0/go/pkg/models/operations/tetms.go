// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TetmsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type TetmsRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year-Month
	YearMonth string `json:"year_month"`
}

// TetmsRequestBodyFormatEnum - The format of the certificate in response.
type TetmsRequestBodyFormatEnum string

const (
	TetmsRequestBodyFormatEnumPdf TetmsRequestBodyFormatEnum = "pdf"
)

func (e TetmsRequestBodyFormatEnum) ToPointer() *TetmsRequestBodyFormatEnum {
	return &e
}

func (e *TetmsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = TetmsRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TetmsRequestBodyFormatEnum: %v", v)
	}
}

// TetmsRequestBody - Request format
type TetmsRequestBody struct {
	CertificateParameters *TetmsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TetmsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Tetms504ApplicationJSONErrorEnum string

const (
	Tetms504ApplicationJSONErrorEnumGatewayTimeout Tetms504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Tetms504ApplicationJSONErrorEnum) ToPointer() *Tetms504ApplicationJSONErrorEnum {
	return &e
}

func (e *Tetms504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Tetms504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms504ApplicationJSONErrorEnum: %v", v)
	}
}

type Tetms504ApplicationJSONErrorDescriptionEnum string

const (
	Tetms504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Tetms504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Tetms504ApplicationJSONErrorDescriptionEnum) ToPointer() *Tetms504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tetms504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Tetms504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tetms504ApplicationJSON - Gateway timeout
type Tetms504ApplicationJSON struct {
	Error            *Tetms504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetms504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetms503ApplicationJSONErrorEnum string

const (
	Tetms503ApplicationJSONErrorEnumServiceUnavailable Tetms503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Tetms503ApplicationJSONErrorEnum) ToPointer() *Tetms503ApplicationJSONErrorEnum {
	return &e
}

func (e *Tetms503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Tetms503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms503ApplicationJSONErrorEnum: %v", v)
	}
}

type Tetms503ApplicationJSONErrorDescriptionEnum string

const (
	Tetms503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Tetms503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Tetms503ApplicationJSONErrorDescriptionEnum) ToPointer() *Tetms503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tetms503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Tetms503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tetms503ApplicationJSON - Service unavailable
type Tetms503ApplicationJSON struct {
	Error            *Tetms503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetms503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetms502ApplicationJSONErrorEnum string

const (
	Tetms502ApplicationJSONErrorEnumBadGatewy Tetms502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Tetms502ApplicationJSONErrorEnum) ToPointer() *Tetms502ApplicationJSONErrorEnum {
	return &e
}

func (e *Tetms502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Tetms502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms502ApplicationJSONErrorEnum: %v", v)
	}
}

type Tetms502ApplicationJSONErrorDescriptionEnum string

const (
	Tetms502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Tetms502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Tetms502ApplicationJSONErrorDescriptionEnum) ToPointer() *Tetms502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tetms502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Tetms502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tetms502ApplicationJSON - Bad gateway
type Tetms502ApplicationJSON struct {
	Error            *Tetms502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetms502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetms500ApplicationJSONErrorEnum string

const (
	Tetms500ApplicationJSONErrorEnumInternalServerError Tetms500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Tetms500ApplicationJSONErrorEnum) ToPointer() *Tetms500ApplicationJSONErrorEnum {
	return &e
}

func (e *Tetms500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Tetms500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms500ApplicationJSONErrorEnum: %v", v)
	}
}

type Tetms500ApplicationJSONErrorDescriptionEnum string

const (
	Tetms500ApplicationJSONErrorDescriptionEnumInternalServerError Tetms500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Tetms500ApplicationJSONErrorDescriptionEnum) ToPointer() *Tetms500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tetms500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Tetms500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tetms500ApplicationJSON - Internal server error
type Tetms500ApplicationJSON struct {
	Error            *Tetms500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetms500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetms404ApplicationJSONErrorEnum string

const (
	Tetms404ApplicationJSONErrorEnumRecordNotFound Tetms404ApplicationJSONErrorEnum = "record_not_found"
	Tetms404ApplicationJSONErrorEnumURLNotFound    Tetms404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Tetms404ApplicationJSONErrorEnum) ToPointer() *Tetms404ApplicationJSONErrorEnum {
	return &e
}

func (e *Tetms404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Tetms404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms404ApplicationJSONErrorEnum: %v", v)
	}
}

type Tetms404ApplicationJSONErrorDescriptionEnum string

const (
	Tetms404ApplicationJSONErrorDescriptionEnumNoRecordFound               Tetms404ApplicationJSONErrorDescriptionEnum = "No record found"
	Tetms404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Tetms404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Tetms404ApplicationJSONErrorDescriptionEnum) ToPointer() *Tetms404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tetms404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Tetms404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tetms404ApplicationJSON - No record found
type Tetms404ApplicationJSON struct {
	Error            *Tetms404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetms404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetms401ApplicationJSONErrorEnum string

const (
	Tetms401ApplicationJSONErrorEnumInvalidAuthentication Tetms401ApplicationJSONErrorEnum = "invalid_authentication"
	Tetms401ApplicationJSONErrorEnumInvalidAuthorization  Tetms401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Tetms401ApplicationJSONErrorEnum) ToPointer() *Tetms401ApplicationJSONErrorEnum {
	return &e
}

func (e *Tetms401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Tetms401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms401ApplicationJSONErrorEnum: %v", v)
	}
}

type Tetms401ApplicationJSONErrorDescriptionEnum string

const (
	Tetms401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Tetms401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Tetms401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Tetms401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Tetms401ApplicationJSONErrorDescriptionEnum) ToPointer() *Tetms401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tetms401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Tetms401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tetms401ApplicationJSON - Unauthorized access
type Tetms401ApplicationJSON struct {
	Error            *Tetms401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetms401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Tetms400ApplicationJSONErrorEnum string

const (
	Tetms400ApplicationJSONErrorEnumMissingParameter Tetms400ApplicationJSONErrorEnum = "missing_parameter"
	Tetms400ApplicationJSONErrorEnumInvalidParameter Tetms400ApplicationJSONErrorEnum = "invalid_parameter"
	Tetms400ApplicationJSONErrorEnumInvalidFormat    Tetms400ApplicationJSONErrorEnum = "invalid_format"
	Tetms400ApplicationJSONErrorEnumInvalidTxnid     Tetms400ApplicationJSONErrorEnum = "invalid_txnid"
	Tetms400ApplicationJSONErrorEnumInvalidConsentid Tetms400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Tetms400ApplicationJSONErrorEnum) ToPointer() *Tetms400ApplicationJSONErrorEnum {
	return &e
}

func (e *Tetms400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Tetms400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms400ApplicationJSONErrorEnum: %v", v)
	}
}

type Tetms400ApplicationJSONErrorDescriptionEnum string

const (
	Tetms400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Tetms400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Tetms400ApplicationJSONErrorDescriptionEnumBadRequest                              Tetms400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Tetms400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Tetms400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Tetms400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Tetms400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Tetms400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Tetms400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Tetms400ApplicationJSONErrorDescriptionEnum) ToPointer() *Tetms400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Tetms400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Tetms400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tetms400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Tetms400ApplicationJSON - Bad request
type Tetms400ApplicationJSON struct {
	Error            *Tetms400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Tetms400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TetmsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Tetms400ApplicationJSONObject *Tetms400ApplicationJSON
	// Unauthorized access
	Tetms401ApplicationJSONObject *Tetms401ApplicationJSON
	// No record found
	Tetms404ApplicationJSONObject *Tetms404ApplicationJSON
	// Internal server error
	Tetms500ApplicationJSONObject *Tetms500ApplicationJSON
	// Bad gateway
	Tetms502ApplicationJSONObject *Tetms502ApplicationJSON
	// Service unavailable
	Tetms503ApplicationJSONObject *Tetms503ApplicationJSON
	// Gateway timeout
	Tetms504ApplicationJSONObject *Tetms504ApplicationJSON
}
