// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DirectivePolicyModeEnum - Policy mode of the directive
type DirectivePolicyModeEnum string

const (
	DirectivePolicyModeEnumEnforce DirectivePolicyModeEnum = "enforce"
	DirectivePolicyModeEnumAudit   DirectivePolicyModeEnum = "audit"
)

func (e *DirectivePolicyModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enforce":
		fallthrough
	case "audit":
		*e = DirectivePolicyModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DirectivePolicyModeEnum: %s", s)
	}
}

type DirectiveTags struct {
	// Value of the `name` key
	Name *string `json:"name,omitempty"`
}

type Directive struct {
	// Human readable name of the directive
	DisplayName *string `json:"displayName,omitempty"`
	// Is the directive enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Directive id
	ID *string `json:"id,omitempty"`
	// Description of the technique (rendered as markdown)
	LongDescription *string `json:"longDescription,omitempty"`
	// Directive parameters (depends on the source technique)
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// Policy mode of the directive
	PolicyMode *DirectivePolicyModeEnum `json:"policyMode,omitempty"`
	// Directive priority. `0` has highest priority.
	Priority *int64 `json:"priority,omitempty"`
	// One line directive description
	ShortDescription *string `json:"shortDescription,omitempty"`
	// If true it is an internal Rudder directive
	System *bool           `json:"system,omitempty"`
	Tags   []DirectiveTags `json:"tags,omitempty"`
	// Directive id
	TechniqueName *string `json:"techniqueName,omitempty"`
	// Directive id
	TechniqueVersion *string `json:"techniqueVersion,omitempty"`
}
