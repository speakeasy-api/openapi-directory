"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Warehouses:
    r"""warehouses"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_warehouse(self, request: shared.CreateWarehouseRequestBodyInput) -> operations.CreateWarehouseResponse:
        r"""Create Warehouse
        Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id.
        If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/warehouses'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWarehouseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateWarehouseResponseBody])
                res.create_warehouse_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def delete_warehouse(self, request: operations.DeleteWarehouseRequest) -> operations.DeleteWarehouseResponse:
        r"""Delete Warehouse By ID
        Delete a warehouse by ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteWarehouseRequest, base_url, '/v1/warehouses/{warehouse_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWarehouseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def get_warehouse_by_id(self, request: operations.GetWarehouseByIDRequest) -> operations.GetWarehouseByIDResponse:
        r"""Get Warehouse By Id
        Retrieve warehouse data based on the warehouse ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWarehouseByIDRequest, base_url, '/v1/warehouses/{warehouse_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWarehouseByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetWarehouseByIDResponseBody])
                res.get_warehouse_by_id_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def list_warehouses(self) -> operations.ListWarehousesResponse:
        r"""List Warehouses
        Retrieve a list of warehouses associated with this account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/warehouses'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWarehousesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWarehousesResponseBody])
                res.list_warehouses_response_body = out
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def update_warehouse(self, request: operations.UpdateWarehouseRequest) -> operations.UpdateWarehouseResponse:
        r"""Update Warehouse By Id
        Update Warehouse object information
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateWarehouseRequest, base_url, '/v1/warehouses/{warehouse_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_warehouse_request_body_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWarehouseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    def update_warehouse_settings(self, request: operations.UpdateWarehouseSettingsRequest) -> operations.UpdateWarehouseSettingsResponse:
        r"""Update Warehouse Settings
        Update Warehouse settings object information
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateWarehouseSettingsRequest, base_url, '/v1/warehouses/{warehouse_id}/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_warehouse_settings_request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWarehouseSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/json'):
                res.empty_response_body = http_res.content
            if utils.match_content_type(content_type, 'text/plain'):
                res.empty_response_body = http_res.content
        elif http_res.status_code in [400, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseBody])
                res.error_response_body = out

        return res

    