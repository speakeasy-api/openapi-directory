/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * RealTimeDecision - Real Time Decisions are created when your application needs to take action in real-time to some event such as a card authorization. Real time decisions are currently in beta; please contact support@increase.com if you're interested in trying them out!
 */
public class RealTimeDecision {
    /**
     * Fields related to a card authorization.
     */
    @JsonProperty("card_authorization")
    public RealTimeDecisionCardAuthorization cardAuthorization;
    public RealTimeDecision withCardAuthorization(RealTimeDecisionCardAuthorization cardAuthorization) {
        this.cardAuthorization = cardAuthorization;
        return this;
    }
    
    /**
     * The category of the Real-Time Decision.
     */
    @JsonProperty("category")
    public RealTimeDecisionCategoryEnum category;
    public RealTimeDecision withCategory(RealTimeDecisionCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public RealTimeDecision withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Fields related to a digital wallet authentication attempt.
     */
    @JsonProperty("digital_wallet_authentication")
    public RealTimeDecisionDigitalWalletAuthentication digitalWalletAuthentication;
    public RealTimeDecision withDigitalWalletAuthentication(RealTimeDecisionDigitalWalletAuthentication digitalWalletAuthentication) {
        this.digitalWalletAuthentication = digitalWalletAuthentication;
        return this;
    }
    
    /**
     * Fields related to a digital wallet token provisioning attempt.
     */
    @JsonProperty("digital_wallet_token")
    public RealTimeDecisionDigitalWalletToken digitalWalletToken;
    public RealTimeDecision withDigitalWalletToken(RealTimeDecisionDigitalWalletToken digitalWalletToken) {
        this.digitalWalletToken = digitalWalletToken;
        return this;
    }
    
    /**
     * The Real-Time Decision identifier.
     */
    @JsonProperty("id")
    public String id;
    public RealTimeDecision withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The status of the Real-Time Decision.
     */
    @JsonProperty("status")
    public RealTimeDecisionStatusEnum status;
    public RealTimeDecision withStatus(RealTimeDecisionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeout_at")
    public OffsetDateTime timeoutAt;
    public RealTimeDecision withTimeoutAt(OffsetDateTime timeoutAt) {
        this.timeoutAt = timeoutAt;
        return this;
    }
    
    /**
     * A constant representing the object's type. For this resource it will always be `real_time_decision`.
     */
    @JsonProperty("type")
    public RealTimeDecisionTypeEnum type;
    public RealTimeDecision withType(RealTimeDecisionTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
