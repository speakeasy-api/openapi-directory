<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Attachments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieve attachment
     * 
     * Use this API to retrieve a file.
     * 
     * Be sure to include the file extension in the name. Like in this example:
     * ```
     * /dataentities/CL/documents/123/file/attachments/image.png
     * ```
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RetrieveattachmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RetrieveattachmentResponse
     */
	public function retrieveattachment(
        \OpenAPI\OpenAPI\Models\Operations\RetrieveattachmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RetrieveattachmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents/{id}/{field}/attachments/{file-name}', \OpenAPI\OpenAPI\Models\Operations\RetrieveattachmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RetrieveattachmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Save attachment
     * 
     * This API allows you to save a file in a field of type `File`.
     * 
     * 
     * When using in javascript, you must add the header `content-type` with value `multipart/form-data;`
     * 
     * 
     * You can upload more than one file. Just add a new field in the `form-data` with type `File`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveattachmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveattachmentResponse
     */
	public function saveattachment(
        \OpenAPI\OpenAPI\Models\Operations\SaveattachmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveattachmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/dataentities/{acronym}/documents/{id}/{field}/attachments', \OpenAPI\OpenAPI\Models\Operations\SaveattachmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveattachmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}