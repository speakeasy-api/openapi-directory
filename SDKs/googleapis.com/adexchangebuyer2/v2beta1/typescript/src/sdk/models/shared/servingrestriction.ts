/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Disapproval } from "./disapproval";
import { ServingContext } from "./servingcontext";
import { Expose, Type } from "class-transformer";

/**
 * The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).
 */
export enum ServingRestrictionStatusEnum {
  StatusUnspecified = "STATUS_UNSPECIFIED",
  Disapproval = "DISAPPROVAL",
  PendingReview = "PENDING_REVIEW",
}

/**
 * Output only. A representation of the status of an ad in a specific context. A context here relates to where something ultimately serves (for example, a user or publisher geo, a platform, an HTTPS versus HTTP request, or the type of auction).
 */
export class ServingRestriction extends SpeakeasyBase {
  /**
   * The contexts for the restriction.
   */
  @SpeakeasyMetadata({ elemType: ServingContext })
  @Expose({ name: "contexts" })
  @Type(() => ServingContext)
  contexts?: ServingContext[];

  /**
   * Output only. The reason and details for a disapproval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disapproval" })
  @Type(() => Disapproval)
  disapproval?: Disapproval;

  /**
   * Any disapprovals bound to this restriction. Only present if status=DISAPPROVED. Can be used to filter the response of the creatives.list method. Deprecated; use disapproval field instead.
   */
  @SpeakeasyMetadata({ elemType: Disapproval })
  @Expose({ name: "disapprovalReasons" })
  @Type(() => Disapproval)
  disapprovalReasons?: Disapproval[];

  /**
   * The status of the creative in this context (for example, it has been explicitly disapproved or is pending review).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: ServingRestrictionStatusEnum;
}
