/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AccountReference16CH } from "./accountreference16ch";
import { Address } from "./address";
import { Amount } from "./amount";
import { CreditorAgent7CH } from "./creditoragent7ch";
import { DayOfExecutionEnum } from "./dayofexecutionenum";
import { ExecutionRuleEnum } from "./executionruleenum";
import { FrequencyCodeEnum } from "./frequencycodeenum";
import { PurposeCodeEnum } from "./purposecodeenum";
import { RemittanceInformationStructured } from "./remittanceinformationstructured";
import { TransactionStatusEnum } from "./transactionstatusenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Generic JSON response body consistion of the corresponding periodic payment initation JSON body together with an optional transaction status field.
 *
 * @remarks
 *
 */
export class PeriodicPaymentInitiationWithStatusResponse extends SpeakeasyBase {
  /**
   * Reference to an account by either
   *
   * @remarks
   *   * IBAN, of a payment accounts, or
   *   * otherAccountIdentification, for payment accounts if there is no IBAN
   * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditorAccount" })
  @Type(() => AccountReference16CH)
  creditorAccount: AccountReference16CH;

  @SpeakeasyMetadata()
  @Expose({ name: "creditorAddress" })
  @Type(() => Address)
  creditorAddress?: Address;

  /**
   * Reference to an creditorAgent by either
   *
   * @remarks
   *   * BIC, of the creditor bank, or
   *   * IID, of the creditor bank, or
   *   * IID and optional name and address of the creditor bank or
   *   * Name and address of the creditor bank
   * adapted from ISO pain.001.001.03.ch.02 FinancialInstitutionIdentification7-CH
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditorAgent" })
  @Type(() => CreditorAgent7CH)
  creditorAgent?: CreditorAgent7CH;

  /**
   * Creditor name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditorName" })
  creditorName: string;

  /**
   * Day of execution as string.
   *
   * @remarks
   *
   * This string consists of up two characters.
   * Leading zeroes are not allowed.
   *
   * 31 is ultimo of the month.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dayOfExecution" })
  dayOfExecution?: DayOfExecutionEnum;

  /**
   * Reference to an account by either
   *
   * @remarks
   *   * IBAN, of a payment accounts, or
   *   * otherAccountIdentification, for payment accounts if there is no IBAN
   * adapted from ISO pain.001.001.03.ch.02 CashAccount16-CH_IdTpCcy
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtorAccount" })
  @Type(() => AccountReference16CH)
  debtorAccount: AccountReference16CH;

  /**
   * The last applicable day of execution.
   *
   * @remarks
   * If not given, it is an infinite standing order.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "endToEndIdentification" })
  endToEndIdentification?: string;

  /**
   * "following" or "preceding" supported as values.
   *
   * @remarks
   * This data attribute defines the behaviour when recurring payment dates falls on a weekend or bank holiday.
   * The payment is then executed either the "preceding" or "following" working day.
   * ASPSP might reject the request due to the communicated value, if rules in Online-Banking are not supporting
   * this execution rule.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "executionRule" })
  executionRule?: ExecutionRuleEnum;

  /**
   * The following codes from the "EventFrequency7Code" of ISO 20022 are supported:
   *
   * @remarks
   * - "Daily"
   * - "Weekly"
   * - "EveryTwoWeeks"
   * - "Monthly"
   * - "EveryTwoMonths"
   * - "Quarterly"
   * - "SemiAnnual"
   * - "Annual"
   * - "MonthlyVariable"
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "frequency" })
  frequency: FrequencyCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "instructedAmount" })
  @Type(() => Amount)
  instructedAmount: Amount;

  /**
   * ExternalPurpose1Code from ISO 20022.
   *
   * @remarks
   *
   * Values from ISO 20022 External Code List ExternalCodeSets_1Q2018 June 2018.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "purposeCode" })
  purposeCode?: PurposeCodeEnum;

  /**
   * Structured remittance information.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittanceInformationStructured" })
  @Type(() => RemittanceInformationStructured)
  remittanceInformationStructured?: RemittanceInformationStructured;

  /**
   * Unstructured remittance information.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittanceInformationUnstructured" })
  remittanceInformationUnstructured?: string;

  /**
   * Array of unstructured remittance information.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittanceInformationUnstructuredArray" })
  remittanceInformationUnstructuredArray?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "requestedExecutionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedExecutionDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "requestedExecutionTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedExecutionTime?: Date;

  /**
   * The first applicable day of execution starting from this date is the first payment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate: Date;

  /**
   * The transaction status is filled with codes of the ISO 20022 data table:
   *
   * @remarks
   * - 'ACCC': 'AcceptedSettlementCompleted' -
   *   Settlement on the creditor's account has been completed.
   * - 'ACCP': 'AcceptedCustomerProfile' -
   *   Preceding check of technical validation was successful.
   *   Customer profile check was also successful.
   * - 'ACSC': 'AcceptedSettlementCompleted' -
   *   Settlement on the debtoro?=s account has been completed.
   *
   *   **Usage:** this can be used by the first agent to report to the debtor that the transaction has been completed.
   *
   *   **Warning:** this status is provided for transaction status reasons, not for financial information.
   *   It can only be used after bilateral agreement.
   * - 'ACSP': 'AcceptedSettlementInProcess' -
   *   All preceding checks such as technical validation and customer profile were successful and therefore the payment initiation has been accepted for execution.
   * - 'ACTC': 'AcceptedTechnicalValidation' -
   *   Authentication and syntactical and semantical validation are successful.
   * - 'ACWC': 'AcceptedWithChange' -
   *   Instruction is accepted but a change will be made, such as date or remittance not sent.
   * - 'ACWP': 'AcceptedWithoutPosting' -
   *   Payment instruction included in the credit transfer is accepted without being posted to the creditor customero?=s account.
   * - 'RCVD': 'Received' -
   *   Payment initiation has been received by the receiving agent.
   * - 'PDNG': 'Pending' -
   *   Payment initiation or individual transaction included in the payment initiation is pending.
   *   Further checks and status update will be performed.
   * - 'RJCT': 'Rejected' -
   *   Payment initiation or individual transaction included in the payment initiation has been rejected.
   * - 'CANC': 'Cancelled'
   *   Payment initiation has been cancelled before execution
   *   Remark: This codeis accepted as new code by ISO20022.
   * - 'ACFC': 'AcceptedFundsChecked' -
   *   Preceding check of technical validation and customer profile was successful and an automatic funds check was positive .
   *   Remark: This code is accepted as new code by ISO20022.
   * - 'PATC': 'PartiallyAcceptedTechnical'
   *   Correct The payment initiation needs multiple authentications, where some but not yet all have been performed. Syntactical and semantical validations are successful.
   *   Remark: This code is accepted as new code by ISO20022.
   * - 'PART': 'PartiallyAccepted' -
   *   A number of transactions have been accepted, whereas another number of transactions have not yet achieved 'accepted' status.
   *   Remark: This code may be used only in case of bulk payments. It is only used in a situation where all mandated authorisations have been applied, but some payments have been rejected.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transactionStatus" })
  transactionStatus?: TransactionStatusEnum;

  /**
   * Ultimate creditor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ultimateCreditor" })
  ultimateCreditor?: string;

  /**
   * Ultimate debtor.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ultimateDebtor" })
  ultimateDebtor?: string;
}
