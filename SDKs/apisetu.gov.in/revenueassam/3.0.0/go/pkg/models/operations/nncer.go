// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type NncerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type NncerRequestBodyCertificateParameters struct {
	// Application Reference No
	RefNo string `json:"RefNo"`
}

// NncerRequestBodyFormatEnum - The format of the certificate in response.
type NncerRequestBodyFormatEnum string

const (
	NncerRequestBodyFormatEnumPdf NncerRequestBodyFormatEnum = "pdf"
)

func (e NncerRequestBodyFormatEnum) ToPointer() *NncerRequestBodyFormatEnum {
	return &e
}

func (e *NncerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = NncerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NncerRequestBodyFormatEnum: %v", v)
	}
}

// NncerRequestBody - Request format
type NncerRequestBody struct {
	CertificateParameters *NncerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format NncerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Nncer504ApplicationJSONErrorEnum string

const (
	Nncer504ApplicationJSONErrorEnumGatewayTimeout Nncer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Nncer504ApplicationJSONErrorEnum) ToPointer() *Nncer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Nncer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Nncer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Nncer504ApplicationJSONErrorDescriptionEnum string

const (
	Nncer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Nncer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Nncer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Nncer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nncer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Nncer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nncer504ApplicationJSON - Gateway timeout
type Nncer504ApplicationJSON struct {
	Error            *Nncer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nncer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nncer503ApplicationJSONErrorEnum string

const (
	Nncer503ApplicationJSONErrorEnumServiceUnavailable Nncer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Nncer503ApplicationJSONErrorEnum) ToPointer() *Nncer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Nncer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Nncer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Nncer503ApplicationJSONErrorDescriptionEnum string

const (
	Nncer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Nncer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Nncer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Nncer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nncer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Nncer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nncer503ApplicationJSON - Service unavailable
type Nncer503ApplicationJSON struct {
	Error            *Nncer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nncer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nncer502ApplicationJSONErrorEnum string

const (
	Nncer502ApplicationJSONErrorEnumBadGatewy Nncer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Nncer502ApplicationJSONErrorEnum) ToPointer() *Nncer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Nncer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Nncer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Nncer502ApplicationJSONErrorDescriptionEnum string

const (
	Nncer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Nncer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Nncer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Nncer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nncer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Nncer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nncer502ApplicationJSON - Bad gateway
type Nncer502ApplicationJSON struct {
	Error            *Nncer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nncer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nncer500ApplicationJSONErrorEnum string

const (
	Nncer500ApplicationJSONErrorEnumInternalServerError Nncer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Nncer500ApplicationJSONErrorEnum) ToPointer() *Nncer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Nncer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Nncer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Nncer500ApplicationJSONErrorDescriptionEnum string

const (
	Nncer500ApplicationJSONErrorDescriptionEnumInternalServerError Nncer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Nncer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Nncer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nncer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Nncer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nncer500ApplicationJSON - Internal server error
type Nncer500ApplicationJSON struct {
	Error            *Nncer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nncer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nncer404ApplicationJSONErrorEnum string

const (
	Nncer404ApplicationJSONErrorEnumRecordNotFound Nncer404ApplicationJSONErrorEnum = "record_not_found"
	Nncer404ApplicationJSONErrorEnumURLNotFound    Nncer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Nncer404ApplicationJSONErrorEnum) ToPointer() *Nncer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Nncer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Nncer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Nncer404ApplicationJSONErrorDescriptionEnum string

const (
	Nncer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Nncer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Nncer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Nncer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Nncer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Nncer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nncer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Nncer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nncer404ApplicationJSON - No record found
type Nncer404ApplicationJSON struct {
	Error            *Nncer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nncer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nncer401ApplicationJSONErrorEnum string

const (
	Nncer401ApplicationJSONErrorEnumInvalidAuthentication Nncer401ApplicationJSONErrorEnum = "invalid_authentication"
	Nncer401ApplicationJSONErrorEnumInvalidAuthorization  Nncer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Nncer401ApplicationJSONErrorEnum) ToPointer() *Nncer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Nncer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Nncer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Nncer401ApplicationJSONErrorDescriptionEnum string

const (
	Nncer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Nncer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Nncer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Nncer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Nncer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Nncer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nncer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Nncer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nncer401ApplicationJSON - Unauthorized access
type Nncer401ApplicationJSON struct {
	Error            *Nncer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nncer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Nncer400ApplicationJSONErrorEnum string

const (
	Nncer400ApplicationJSONErrorEnumMissingParameter Nncer400ApplicationJSONErrorEnum = "missing_parameter"
	Nncer400ApplicationJSONErrorEnumInvalidParameter Nncer400ApplicationJSONErrorEnum = "invalid_parameter"
	Nncer400ApplicationJSONErrorEnumInvalidFormat    Nncer400ApplicationJSONErrorEnum = "invalid_format"
	Nncer400ApplicationJSONErrorEnumInvalidTxnid     Nncer400ApplicationJSONErrorEnum = "invalid_txnid"
	Nncer400ApplicationJSONErrorEnumInvalidConsentid Nncer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Nncer400ApplicationJSONErrorEnum) ToPointer() *Nncer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Nncer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Nncer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Nncer400ApplicationJSONErrorDescriptionEnum string

const (
	Nncer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Nncer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Nncer400ApplicationJSONErrorDescriptionEnumBadRequest                              Nncer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Nncer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Nncer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Nncer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Nncer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Nncer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Nncer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Nncer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Nncer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Nncer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Nncer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Nncer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Nncer400ApplicationJSON - Bad request
type Nncer400ApplicationJSON struct {
	Error            *Nncer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Nncer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type NncerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Nncer400ApplicationJSONObject *Nncer400ApplicationJSON
	// Unauthorized access
	Nncer401ApplicationJSONObject *Nncer401ApplicationJSON
	// No record found
	Nncer404ApplicationJSONObject *Nncer404ApplicationJSON
	// Internal server error
	Nncer500ApplicationJSONObject *Nncer500ApplicationJSON
	// Bad gateway
	Nncer502ApplicationJSONObject *Nncer502ApplicationJSON
	// Service unavailable
	Nncer503ApplicationJSONObject *Nncer503ApplicationJSON
	// Gateway timeout
	Nncer504ApplicationJSONObject *Nncer504ApplicationJSON
}
