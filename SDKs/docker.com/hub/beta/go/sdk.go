// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://hub.docker.com/",
	"https://docker.com/{version}",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// SDK - Docker Hub is a service provided by Docker for finding and sharing container
// images with your team.
//
// It is the world's largest library and community for container images.
//
// In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),
//
// Docker provides an API that allows you to interact with Docker Hub.
//
// Browse through the Docker Hub API documentation to explore the supported endpoints.
type SDK struct {
	// AccessTokens - The Personal Access Token endpoints lets you manage personal access tokens. For more
	// information, see [Access Tokens](https://docs.docker.com/docker-hub/access-tokens/).
	//
	// You can use a personal access token instead of a password in the [Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/)
	// or in the [Create an authentication token](#operation/PostUsersLogin) route to obtain a bearer
	// token.
	//
	// ### Scopes
	//
	// For each scope grouping (in this case "repo"), you only need to define 1 scope as any lower
	// scopes are assumed. For example: If you define `repo:write`, the API assumes the scope of both
	// `repo:read` *and* `repo:public_read` as well. If you were to define both `repo:write` *and*
	// `repo:read`, then `repo:read` is assumed by `repo:write` and ignored.
	//
	// ***Treat your personal access token like your password and keep it secret. You cannot retrieve
	// your token after it is generated.***
	//
	AccessTokens *accessTokens
	// AuditLogs - The Audit Logs API endpoints allow you to query audit log events across a
	// namespace.
	//
	// For more information, see [Audit Log](https://docs.docker.com/docker-hub/audit-log/)
	//
	AuditLogs *auditLogs
	// Authentication - Most Docker Hub API endpoints require you to authenticate using your
	// Docker credentials before using them.
	//
	// Additionally, similar to the Docker Hub UI features, API endpoint responses may vary depending
	// on your plan (Free, Pro, or Team) and your account's permissions.
	//
	// To learn more about the features available in each plan and to upgrade your existing plan, see [Docker Pricing](https://www.docker.com/pricing).
	//
	Authentication *authentication
	// Images - The Advanced Image Management API endpoints allow you to manage Docker
	// images across all repositories.
	//
	// For more information, see [Advanced Image Management dashboard](https://docs.docker.com/docker-hub/image-management/).
	//
	Images *images
	// OrgSettings - The Org Settings API endpoints allow you to manage your organization's
	// settings.
	//
	OrgSettings *orgSettings
	// Repositories - The repository endpoints allow you to manage your repository's
	// configuration like description.
	//
	Repositories *repositories
	// Scim - SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
	// For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
	//
	Scim *scim

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.AccessTokens = newAccessTokens(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.AuditLogs = newAuditLogs(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Authentication = newAuthentication(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Images = newImages(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.OrgSettings = newOrgSettings(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Repositories = newRepositories(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Scim = newScim(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
