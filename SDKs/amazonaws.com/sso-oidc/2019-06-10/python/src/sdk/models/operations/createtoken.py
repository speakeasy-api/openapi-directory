"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createtokenresponse as shared_createtokenresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateTokenRequestBody:
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId') }})
    r"""The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API."""  
    client_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret') }})
    r"""A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API."""  
    grant_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grantType') }})
    r"""<p>Supports grant types for the authorization code, refresh token, and device code request. For device code requests, specify the following value:</p> <p> <code>urn:ietf:params:oauth:grant-type:<i>device_code</i> </code> </p> <p>For information about how to obtain the device code, see the <a>StartDeviceAuthorization</a> topic.</p>"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token."""  
    device_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceCode'), 'exclude': lambda f: f is None }})
    r"""Used only when calling this API for the device code grant type. This short-term code is used to identify this authentication attempt. This should come from an in-memory reference to the result of the <a>StartDeviceAuthorization</a> API."""  
    redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectUri'), 'exclude': lambda f: f is None }})
    r"""The location of the application that will receive the authorization code. Users authorize the service to send the request to this location."""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refreshToken'), 'exclude': lambda f: f is None }})
    r"""<p>Currently, <code>refreshToken</code> is not yet implemented and is not supported. For more information about the features and limitations of the current IAM Identity Center OIDC implementation, see <i>Considerations for Using this Guide</i> in the <a href=\\"https://docs.aws.amazon.com/singlesignon/latest/OIDCAPIReference/Welcome.html\\">IAM Identity Center OIDC API Reference</a>.</p> <p>The token used to obtain an access token in the event that the access token is invalid or expired.</p>"""  
    scope: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""The list of scopes that is defined by the client. Upon authorization, this list is used to restrict permissions when granting an access token."""  
    

@dataclasses.dataclass
class CreateTokenRequest:
    
    request_body: CreateTokenRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateTokenResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    authorization_pending_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AuthorizationPendingException"""  
    create_token_response: Optional[shared_createtokenresponse.CreateTokenResponse] = dataclasses.field(default=None)
    r"""Success"""  
    expired_token_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ExpiredTokenException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidClientException"""  
    invalid_grant_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidGrantException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    invalid_scope_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidScopeException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    slow_down_exception: Optional[Any] = dataclasses.field(default=None)
    r"""SlowDownException"""  
    unauthorized_client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnauthorizedClientException"""  
    unsupported_grant_type_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnsupportedGrantTypeException"""  
    