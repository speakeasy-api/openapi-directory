"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GETAccountType = exports.GETAccountTypeTaxInfo = exports.GETAccountTypeMetrics = exports.GETAccountTypeBillingAndPayment = void 0;
var utils_1 = require("../../../internal/utils");
var getaccounttypebasicinfo_1 = require("./getaccounttypebasicinfo");
var getaccounttypebilltocontact_1 = require("./getaccounttypebilltocontact");
var getaccounttypesoldtocontact_1 = require("./getaccounttypesoldtocontact");
var class_transformer_1 = require("class-transformer");
/**
 * Container for billing and payment information for the account.
 *
 * @remarks
 *
 */
var GETAccountTypeBillingAndPayment = /** @class */ (function (_super) {
    __extends(GETAccountTypeBillingAndPayment, _super);
    function GETAccountTypeBillingAndPayment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "additionalEmailAddresses" }),
        __metadata("design:type", Array)
    ], GETAccountTypeBillingAndPayment.prototype, "additionalEmailAddresses", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "billCycleDay" }),
        __metadata("design:type", String)
    ], GETAccountTypeBillingAndPayment.prototype, "billCycleDay", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "currency" }),
        __metadata("design:type", String)
    ], GETAccountTypeBillingAndPayment.prototype, "currency", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "invoiceDeliveryPrefsEmail" }),
        __metadata("design:type", Boolean)
    ], GETAccountTypeBillingAndPayment.prototype, "invoiceDeliveryPrefsEmail", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "invoiceDeliveryPrefsPrint" }),
        __metadata("design:type", Boolean)
    ], GETAccountTypeBillingAndPayment.prototype, "invoiceDeliveryPrefsPrint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentGateway" }),
        __metadata("design:type", String)
    ], GETAccountTypeBillingAndPayment.prototype, "paymentGateway", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "paymentTerm" }),
        __metadata("design:type", String)
    ], GETAccountTypeBillingAndPayment.prototype, "paymentTerm", void 0);
    return GETAccountTypeBillingAndPayment;
}(utils_1.SpeakeasyBase));
exports.GETAccountTypeBillingAndPayment = GETAccountTypeBillingAndPayment;
/**
 * Container for account metrics.
 *
 * @remarks
 *
 */
var GETAccountTypeMetrics = /** @class */ (function (_super) {
    __extends(GETAccountTypeMetrics, _super);
    function GETAccountTypeMetrics() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "balance" }),
        __metadata("design:type", String)
    ], GETAccountTypeMetrics.prototype, "balance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "contractedMrr" }),
        __metadata("design:type", String)
    ], GETAccountTypeMetrics.prototype, "contractedMrr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creditBalance" }),
        __metadata("design:type", String)
    ], GETAccountTypeMetrics.prototype, "creditBalance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "totalDebitMemoBalance" }),
        __metadata("design:type", String)
    ], GETAccountTypeMetrics.prototype, "totalDebitMemoBalance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "totalInvoiceBalance" }),
        __metadata("design:type", String)
    ], GETAccountTypeMetrics.prototype, "totalInvoiceBalance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "unappliedCreditMemoAmount" }),
        __metadata("design:type", String)
    ], GETAccountTypeMetrics.prototype, "unappliedCreditMemoAmount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "unappliedPaymentAmount" }),
        __metadata("design:type", String)
    ], GETAccountTypeMetrics.prototype, "unappliedPaymentAmount", void 0);
    return GETAccountTypeMetrics;
}(utils_1.SpeakeasyBase));
exports.GETAccountTypeMetrics = GETAccountTypeMetrics;
/**
 * Container for tax exempt information, used to establish the tax exempt status of a customer account.
 *
 * @remarks
 *
 */
var GETAccountTypeTaxInfo = /** @class */ (function (_super) {
    __extends(GETAccountTypeTaxInfo, _super);
    function GETAccountTypeTaxInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "VATId" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "vatId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "companyCode" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "companyCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptCertificateId" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "exemptCertificateId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptCertificateType" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "exemptCertificateType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptDescription" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "exemptDescription", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptEffectiveDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountTypeTaxInfo.prototype, "exemptEffectiveDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptEntityUseCode" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "exemptEntityUseCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptExpirationDate" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], GETAccountTypeTaxInfo.prototype, "exemptExpirationDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptIssuingJurisdiction" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "exemptIssuingJurisdiction", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exemptStatus" }),
        __metadata("design:type", String)
    ], GETAccountTypeTaxInfo.prototype, "exemptStatus", void 0);
    return GETAccountTypeTaxInfo;
}(utils_1.SpeakeasyBase));
exports.GETAccountTypeTaxInfo = GETAccountTypeTaxInfo;
var GETAccountType = /** @class */ (function (_super) {
    __extends(GETAccountType, _super);
    function GETAccountType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "basicInfo" }),
        (0, class_transformer_1.Type)(function () { return getaccounttypebasicinfo_1.GETAccountTypeBasicInfo; }),
        __metadata("design:type", getaccounttypebasicinfo_1.GETAccountTypeBasicInfo)
    ], GETAccountType.prototype, "basicInfo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "billToContact" }),
        (0, class_transformer_1.Type)(function () { return getaccounttypebilltocontact_1.GETAccountTypeBillToContact; }),
        __metadata("design:type", getaccounttypebilltocontact_1.GETAccountTypeBillToContact)
    ], GETAccountType.prototype, "billToContact", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "billingAndPayment" }),
        (0, class_transformer_1.Type)(function () { return GETAccountTypeBillingAndPayment; }),
        __metadata("design:type", GETAccountTypeBillingAndPayment)
    ], GETAccountType.prototype, "billingAndPayment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metrics" }),
        (0, class_transformer_1.Type)(function () { return GETAccountTypeMetrics; }),
        __metadata("design:type", GETAccountTypeMetrics)
    ], GETAccountType.prototype, "metrics", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "soldToContact" }),
        (0, class_transformer_1.Type)(function () { return getaccounttypesoldtocontact_1.GETAccountTypeSoldToContact; }),
        __metadata("design:type", getaccounttypesoldtocontact_1.GETAccountTypeSoldToContact)
    ], GETAccountType.prototype, "soldToContact", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "success" }),
        __metadata("design:type", Boolean)
    ], GETAccountType.prototype, "success", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "taxInfo" }),
        (0, class_transformer_1.Type)(function () { return GETAccountTypeTaxInfo; }),
        __metadata("design:type", GETAccountTypeTaxInfo)
    ], GETAccountType.prototype, "taxInfo", void 0);
    return GETAccountType;
}(utils_1.SpeakeasyBase));
exports.GETAccountType = GETAccountType;
