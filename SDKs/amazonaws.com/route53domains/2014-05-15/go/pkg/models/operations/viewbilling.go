// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ViewBillingQueryParams struct {
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxItems *string `queryParam:"style=form,explode=true,name=MaxItems"`
}

// ViewBillingXAmzTargetEnum
type ViewBillingXAmzTargetEnum string

const (
	ViewBillingXAmzTargetEnumRoute53DomainsV20140515ViewBilling ViewBillingXAmzTargetEnum = "Route53Domains_v20140515.ViewBilling"
)

func (e *ViewBillingXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53Domains_v20140515.ViewBilling":
		*e = ViewBillingXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewBillingXAmzTargetEnum: %s", s)
	}
}

type ViewBillingHeaders struct {
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ViewBillingXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ViewBillingRequest struct {
	QueryParams ViewBillingQueryParams
	Headers     ViewBillingHeaders
	Request     shared.ViewBillingRequest `request:"mediaType=application/json"`
}

type ViewBillingResponse struct {
	ContentType string
	// InvalidInput
	InvalidInput interface{}
	StatusCode   int
	RawResponse  *http.Response
	// Success
	ViewBillingResponse *shared.ViewBillingResponse
}
