/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
 */
export class CreateDeliverabilityTestReportRequestBodyContent extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Raw" })
  @Type(() => shared.RawMessage)
  raw?: shared.RawMessage;

  @SpeakeasyMetadata()
  @Expose({ name: "Simple" })
  @Type(() => shared.Message)
  simple?: shared.Message;

  @SpeakeasyMetadata()
  @Expose({ name: "Template" })
  @Type(() => shared.Template)
  template?: shared.Template;
}

export class CreateDeliverabilityTestReportRequestBody extends SpeakeasyBase {
  /**
   * An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Content" })
  @Type(() => CreateDeliverabilityTestReportRequestBodyContent)
  content: CreateDeliverabilityTestReportRequestBodyContent;

  /**
   * The email address that the predictive inbox placement test email was sent from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FromEmailAddress" })
  fromEmailAddress: string;

  /**
   * A name that helps you identify a report generated by the Deliverability dashboard.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReportName" })
  reportName?: string;

  /**
   * An array of objects that define the tags (keys and values) that you want to associate with the predictive inbox placement test.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "Tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];
}

export class CreateDeliverabilityTestReportRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateDeliverabilityTestReportRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateDeliverabilityTestReportResponse extends SpeakeasyBase {
  /**
   * AccountSuspendedException
   */
  @SpeakeasyMetadata()
  accountSuspendedException?: any;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConcurrentModificationException
   */
  @SpeakeasyMetadata()
  concurrentModificationException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDeliverabilityTestReportResponse?: shared.CreateDeliverabilityTestReportResponse;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  /**
   * MailFromDomainNotVerifiedException
   */
  @SpeakeasyMetadata()
  mailFromDomainNotVerifiedException?: any;

  /**
   * MessageRejected
   */
  @SpeakeasyMetadata()
  messageRejected?: any;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SendingPausedException
   */
  @SpeakeasyMetadata()
  sendingPausedException?: any;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;
}
