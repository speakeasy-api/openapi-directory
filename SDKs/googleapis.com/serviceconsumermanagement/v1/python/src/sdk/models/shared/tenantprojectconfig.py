"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import billingconfig as shared_billingconfig
from ..shared import serviceaccountconfig as shared_serviceaccountconfig
from ..shared import tenantprojectpolicy as shared_tenantprojectpolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TenantProjectConfig:
    r"""This structure defines a tenant project to be added to the specified tenancy unit and its initial configuration and properties. A project lien is created for the tenant project to prevent the tenant project from being deleted accidentally. The lien is deleted as part of tenant project removal."""
    
    billing_config: Optional[shared_billingconfig.BillingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingConfig'), 'exclude': lambda f: f is None }})
    r"""Describes the billing configuration for a new tenant project."""  
    folder: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folder'), 'exclude': lambda f: f is None }})
    r"""Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a project in it. Valid folder resource names have the format `folders/{folder_number}` (for example, `folders/123456`)."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Labels that are applied to this project."""  
    service_account_config: Optional[shared_serviceaccountconfig.ServiceAccountConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccountConfig'), 'exclude': lambda f: f is None }})
    r"""Describes the service account configuration for the tenant project."""  
    services: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('services'), 'exclude': lambda f: f is None }})
    r"""Google Cloud API names of services that are activated on this project during provisioning. If any of these services can't be activated, the request fails. For example: 'compute.googleapis.com','cloudfunctions.googleapis.com'"""  
    tenant_project_policy: Optional[shared_tenantprojectpolicy.TenantProjectPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenantProjectPolicy'), 'exclude': lambda f: f is None }})
    r"""Describes policy settings that can be applied to a newly created tenant project."""  
    