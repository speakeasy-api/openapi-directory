"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CompositeTypes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def deploymentmanager_composite_types_delete(self, request: operations.DeploymentmanagerCompositeTypesDeleteRequest, security: operations.DeploymentmanagerCompositeTypesDeleteSecurity) -> operations.DeploymentmanagerCompositeTypesDeleteResponse:
        r"""Deletes a composite type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerCompositeTypesDeleteRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerCompositeTypesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerCompositeTypesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_composite_types_get(self, request: operations.DeploymentmanagerCompositeTypesGetRequest, security: operations.DeploymentmanagerCompositeTypesGetSecurity) -> operations.DeploymentmanagerCompositeTypesGetResponse:
        r"""Gets information about a specific composite type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerCompositeTypesGetRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerCompositeTypesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerCompositeTypesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompositeType])
                res.composite_type = out

        return res

    def deploymentmanager_composite_types_insert(self, request: operations.DeploymentmanagerCompositeTypesInsertRequest, security: operations.DeploymentmanagerCompositeTypesInsertSecurity) -> operations.DeploymentmanagerCompositeTypesInsertResponse:
        r"""Creates a composite type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerCompositeTypesInsertRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/compositeTypes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "composite_type", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerCompositeTypesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerCompositeTypesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_composite_types_list(self, request: operations.DeploymentmanagerCompositeTypesListRequest, security: operations.DeploymentmanagerCompositeTypesListSecurity) -> operations.DeploymentmanagerCompositeTypesListResponse:
        r"""Lists all composite types for Deployment Manager."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerCompositeTypesListRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/compositeTypes', request)
        
        query_params = utils.get_query_params(operations.DeploymentmanagerCompositeTypesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerCompositeTypesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompositeTypesListResponse])
                res.composite_types_list_response = out

        return res

    def deploymentmanager_composite_types_patch(self, request: operations.DeploymentmanagerCompositeTypesPatchRequest, security: operations.DeploymentmanagerCompositeTypesPatchSecurity) -> operations.DeploymentmanagerCompositeTypesPatchResponse:
        r"""Patches a composite type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerCompositeTypesPatchRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "composite_type1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerCompositeTypesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerCompositeTypesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def deploymentmanager_composite_types_update(self, request: operations.DeploymentmanagerCompositeTypesUpdateRequest, security: operations.DeploymentmanagerCompositeTypesUpdateSecurity) -> operations.DeploymentmanagerCompositeTypesUpdateResponse:
        r"""Updates a composite type."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeploymentmanagerCompositeTypesUpdateRequest, base_url, '/deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "composite_type1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DeploymentmanagerCompositeTypesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeploymentmanagerCompositeTypesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    