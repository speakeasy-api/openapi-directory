"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customer as shared_customer
from ..shared import orderadditionalfields as shared_orderadditionalfields
from ..shared import orderbillingaddress as shared_orderbillingaddress
from ..shared import orderproduct as shared_orderproduct
from ..shared import ordershippingaddress as shared_ordershippingaddress
from ..shared import ordershippingtax as shared_ordershippingtax
from ..shared import trafficsource as shared_trafficsource
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OrderFieldsShipmentStatusEnum(str, Enum):
    r"""Shipment Status for Order Fulfillment."""
    DELIVERED = 'delivered'
    REQUESTED = 'requested'
    IN_TRANSIT = 'in_transit'
    FAILED = 'failed'
    PICKUP_AVAILABLE = 'pickup_available'

class OrderFieldsShippingOptionEnum(str, Enum):
    r"""Shipping option for this order."""
    DELIVERY = 'delivery'
    STORE_PICKUP = 'store_pickup'
    NO_SHIPPING = 'no_shipping'

class OrderFieldsStatusEnum(str, Enum):
    r"""Status of the Order"""
    ABANDONED = 'Abandoned'
    CANCELED = 'Canceled'
    PENDING_PAYMENT = 'Pending Payment'
    PAID = 'Paid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderFields:
    
    additional_fields: Optional[list[shared_orderadditionalfields.OrderAdditionalFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_fields'), 'exclude': lambda f: f is None }})
    r"""Array of additional fields for the given Order"""  
    additional_information: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additional_information'), 'exclude': lambda f: f is None }})
    r"""Additional information for the given Order"""  
    billing_address: Optional[shared_orderbillingaddress.OrderBillingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})  
    checkout_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkout_url'), 'exclude': lambda f: f is None }})
    r"""Store Checkout Order URL for the given Order"""  
    coupons: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coupons'), 'exclude': lambda f: f is None }})
    r"""Promotion Coupons used on the given Order"""  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})
    r"""Order date"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Currency of the Order"""  
    customer: Optional[shared_customer.Customer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer'), 'exclude': lambda f: f is None }})  
    discount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount'), 'exclude': lambda f: f is None }})
    r"""Discount value for the given Order"""  
    duplicate_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicate_url'), 'exclude': lambda f: f is None }})
    r"""Duplicate Order URL for the given Order"""  
    external_shipping_rate_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_shipping_rate_id'), 'exclude': lambda f: f is None }})
    r"""Rate id for selected External Shipping Method rate"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the Order"""  
    payment_information: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_information'), 'exclude': lambda f: f is None }})
    r"""Payment information for the given Order"""  
    payment_method_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_method_name'), 'exclude': lambda f: f is None }})
    r"""Payment Method name used e.g. PayPal"""  
    payment_method_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_method_type'), 'exclude': lambda f: f is None }})
    r"""Payment Method type used e.g. paypal"""  
    products: Optional[list[shared_orderproduct.OrderProduct]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('products'), 'exclude': lambda f: f is None }})  
    recovery_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recovery_url'), 'exclude': lambda f: f is None }})
    r"""Recovery Order URL for the given Order"""  
    shipment_status: Optional[OrderFieldsShipmentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipment_status'), 'exclude': lambda f: f is None }})
    r"""Shipment Status for Order Fulfillment."""  
    shipping: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping'), 'exclude': lambda f: f is None }})
    r"""Shipping value for the given Order"""  
    shipping_address: Optional[shared_ordershippingaddress.OrderShippingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_address'), 'exclude': lambda f: f is None }})  
    shipping_discount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_discount'), 'exclude': lambda f: f is None }})
    r"""Shipping Discount value for the given order"""  
    shipping_method_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_method_id'), 'exclude': lambda f: f is None }})
    r"""Shipping method e.g. Royal Mail"""  
    shipping_method_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_method_name'), 'exclude': lambda f: f is None }})
    r"""Shipping method e.g. Royal Mail"""  
    shipping_option: Optional[OrderFieldsShippingOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_option'), 'exclude': lambda f: f is None }})
    r"""Shipping option for this order."""  
    shipping_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_required'), 'exclude': lambda f: f is None }})
    r"""False if the order is digital."""  
    shipping_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_tax'), 'exclude': lambda f: f is None }})
    r"""Shipping Tax value for the given order"""  
    shipping_taxes: Optional[list[shared_ordershippingtax.OrderShippingTax]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_taxes'), 'exclude': lambda f: f is None }})  
    source: Optional[shared_trafficsource.TrafficSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})  
    status: Optional[OrderFieldsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the Order"""  
    subtotal: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subtotal'), 'exclude': lambda f: f is None }})
    r"""Subtotal value for the given Order. Excluding taxes, shipping and discounts"""  
    tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tax'), 'exclude': lambda f: f is None }})
    r"""Tax value for the given order"""  
    total: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""Total value for the given Order. Including taxes, shipping and discounts"""  
    tracking_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_company'), 'exclude': lambda f: f is None }})
    r"""Company Used for Order Fulfillment."""  
    tracking_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_number'), 'exclude': lambda f: f is None }})
    r"""Tracking Number for Order Fulfillment."""  
    tracking_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tracking_url'), 'exclude': lambda f: f is None }})
    r"""Tracking URL for Order Fulfillment."""  
    