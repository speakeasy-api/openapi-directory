// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobFailureEnum - Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions
type JobFailureEnum string

const (
	JobFailureEnumInternalProcessing     JobFailureEnum = "internal_processing"
	JobFailureEnumDownloadFailure        JobFailureEnum = "download_failure"
	JobFailureEnumDurationExceeded       JobFailureEnum = "duration_exceeded"
	JobFailureEnumDurationTooShort       JobFailureEnum = "duration_too_short"
	JobFailureEnumInvalidMedia           JobFailureEnum = "invalid_media"
	JobFailureEnumEmptyMedia             JobFailureEnum = "empty_media"
	JobFailureEnumTranscription          JobFailureEnum = "transcription"
	JobFailureEnumInsufficientBalance    JobFailureEnum = "insufficient_balance"
	JobFailureEnumInvoicingLimitExceeded JobFailureEnum = "invoicing_limit_exceeded"
)

func (e *JobFailureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_processing":
		fallthrough
	case "download_failure":
		fallthrough
	case "duration_exceeded":
		fallthrough
	case "duration_too_short":
		fallthrough
	case "invalid_media":
		fallthrough
	case "empty_media":
		fallthrough
	case "transcription":
		fallthrough
	case "insufficient_balance":
		fallthrough
	case "invoicing_limit_exceeded":
		*e = JobFailureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobFailureEnum: %s", s)
	}
}

type JobLanguageEnum string

const (
	JobLanguageEnumEn  JobLanguageEnum = "en"
	JobLanguageEnumAr  JobLanguageEnum = "ar"
	JobLanguageEnumBg  JobLanguageEnum = "bg"
	JobLanguageEnumCa  JobLanguageEnum = "ca"
	JobLanguageEnumCmn JobLanguageEnum = "cmn"
	JobLanguageEnumCs  JobLanguageEnum = "cs"
	JobLanguageEnumDa  JobLanguageEnum = "da"
	JobLanguageEnumDe  JobLanguageEnum = "de"
	JobLanguageEnumEl  JobLanguageEnum = "el"
	JobLanguageEnumEs  JobLanguageEnum = "es"
	JobLanguageEnumFi  JobLanguageEnum = "fi"
	JobLanguageEnumFr  JobLanguageEnum = "fr"
	JobLanguageEnumHi  JobLanguageEnum = "hi"
	JobLanguageEnumHr  JobLanguageEnum = "hr"
	JobLanguageEnumHu  JobLanguageEnum = "hu"
	JobLanguageEnumIt  JobLanguageEnum = "it"
	JobLanguageEnumJa  JobLanguageEnum = "ja"
	JobLanguageEnumKo  JobLanguageEnum = "ko"
	JobLanguageEnumLt  JobLanguageEnum = "lt"
	JobLanguageEnumLv  JobLanguageEnum = "lv"
	JobLanguageEnumMs  JobLanguageEnum = "ms"
	JobLanguageEnumNl  JobLanguageEnum = "nl"
	JobLanguageEnumNo  JobLanguageEnum = "no"
	JobLanguageEnumPl  JobLanguageEnum = "pl"
	JobLanguageEnumPt  JobLanguageEnum = "pt"
	JobLanguageEnumRo  JobLanguageEnum = "ro"
	JobLanguageEnumRu  JobLanguageEnum = "ru"
	JobLanguageEnumSk  JobLanguageEnum = "sk"
	JobLanguageEnumSl  JobLanguageEnum = "sl"
	JobLanguageEnumSv  JobLanguageEnum = "sv"
	JobLanguageEnumTr  JobLanguageEnum = "tr"
)

func (e *JobLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "en":
		fallthrough
	case "ar":
		fallthrough
	case "bg":
		fallthrough
	case "ca":
		fallthrough
	case "cmn":
		fallthrough
	case "cs":
		fallthrough
	case "da":
		fallthrough
	case "de":
		fallthrough
	case "el":
		fallthrough
	case "es":
		fallthrough
	case "fi":
		fallthrough
	case "fr":
		fallthrough
	case "hi":
		fallthrough
	case "hr":
		fallthrough
	case "hu":
		fallthrough
	case "it":
		fallthrough
	case "ja":
		fallthrough
	case "ko":
		fallthrough
	case "lt":
		fallthrough
	case "lv":
		fallthrough
	case "ms":
		fallthrough
	case "nl":
		fallthrough
	case "no":
		fallthrough
	case "pl":
		fallthrough
	case "pt":
		fallthrough
	case "ro":
		fallthrough
	case "ru":
		fallthrough
	case "sk":
		fallthrough
	case "sl":
		fallthrough
	case "sv":
		fallthrough
	case "tr":
		*e = JobLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobLanguageEnum: %s", s)
	}
}

// JobStatusEnum - Current status of the job
type JobStatusEnum string

const (
	JobStatusEnumInProgress  JobStatusEnum = "in_progress"
	JobStatusEnumTranscribed JobStatusEnum = "transcribed"
	JobStatusEnumFailed      JobStatusEnum = "failed"
)

func (e *JobStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "in_progress":
		fallthrough
	case "transcribed":
		fallthrough
	case "failed":
		*e = JobStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatusEnum: %s", s)
	}
}

// JobTypeEnum - Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs
type JobTypeEnum string

const (
	JobTypeEnumAsync JobTypeEnum = "async"
)

func (e *JobTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "async":
		*e = JobTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobTypeEnum: %s", s)
	}
}

// Job - Rev.ai Transcription Job
// ***
// Note: properties are not displayed in the returned object if they are null
type Job struct {
	CallbackURL *string `json:"callback_url,omitempty"`
	// The date and time the job was completed, whether successfully or failing, in ISO-8601 UTC form
	CompletedOn *string `json:"completed_on,omitempty"`
	// The date and time the job was created in ISO-8601 UTC form
	CreatedOn          *string `json:"created_on,omitempty"`
	CustomVocabularyID *string `json:"custom_vocabulary_id,omitempty"`
	DeleteAfterSeconds *int64  `json:"delete_after_seconds,omitempty"`
	// Duration of the file in seconds. Null if the file could not be retrieved or there was not a valid media file
	DurationSeconds *float64 `json:"duration_seconds,omitempty"`
	// Simple reason of why the transcription job failed. Check `failure_detail` for specific details and solutions
	Failure *JobFailureEnum `json:"failure,omitempty"`
	// Human-readable reason why the job failed
	FailureDetail   *string `json:"failure_detail,omitempty"`
	FilterProfanity *bool   `json:"filter_profanity,omitempty"`
	// Id of the job
	ID       *string          `json:"id,omitempty"`
	Language *JobLanguageEnum `json:"language,omitempty"`
	MediaURL *string          `json:"media_url,omitempty"`
	Metadata *string          `json:"metadata,omitempty"`
	// Name of the file provided. Present when the file name is available
	Name                 *string `json:"name,omitempty"`
	RemoveDisfluencies   *bool   `json:"remove_disfluencies,omitempty"`
	SkipDiarization      *bool   `json:"skip_diarization,omitempty"`
	SkipPunctuation      *bool   `json:"skip_punctuation,omitempty"`
	SpeakerChannelsCount *int64  `json:"speaker_channels_count,omitempty"`
	// Current status of the job
	Status *JobStatusEnum `json:"status,omitempty"`
	// Type of speech recognition performed. Currently the only supported values are 'async' for asynchronous jobs and `stream` for streaming jobs
	Type *JobTypeEnum `json:"type,omitempty"`
}
