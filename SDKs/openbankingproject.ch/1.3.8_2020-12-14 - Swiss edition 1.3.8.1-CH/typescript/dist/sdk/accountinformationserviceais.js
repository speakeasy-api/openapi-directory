"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountInformationServiceAIS = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * The Account Information Service (AIS) offers the following services:
 *
 * @remarks
 *   * Transaction reports for a given account or card account including balances if applicable
 *   * Balances of a given account or card account
 *   * A list of available accounts or card account
 *   * Account details of a given account or card account or of the list of all accessible accounts or card account  relative to a granted consent
 *
 */
var AccountInformationServiceAIS = /** @class */ (function () {
    function AccountInformationServiceAIS(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Create consent
     *
     * @remarks
     * This method create a consent resource, defining access rights to dedicated accounts of
     * a given PSU-ID. These accounts are addressed explicitly in the method as
     * parameters as a core function.
     *
     * **Side Effects**
     * When this consent request is a request where the "recurringIndicator" equals "true",
     * and if it exists already a former consent for recurring access on account information
     * for the addressed PSU, then the former consent automatically expires as soon as the new
     * consent request is authorised by the PSU.
     *
     * Optional Extension:
     * As an option, an ASPSP might optionally accept a specific access right on the access on all PSD2 related services for all available accounts.
     *
     * As another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account.
     * The relation to accounts is then handled afterwards between PSU and ASPSP.
     * This option is not supported for the Embedded SCA Approach.
     * As a last option, an ASPSP might in addition accept a command with access rights
     *   * to see the list of available payment accounts or
     *   * to see the list of available payment accounts with balances.
     *
     */
    AccountInformationServiceAIS.prototype.createConsent = function (req, security, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateConsentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/v1/consents";
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "consents", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateConsentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateConsentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.consentsResponse201 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ConsentsResponse201);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete Consent
     *
     * @remarks
     * The TPP can delete an account information consent object if needed.
     */
    AccountInformationServiceAIS.prototype.deleteConsent = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteConsentRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/consents/{consentId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteConsentSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "delete", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DeleteConsentResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case [204, 408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Read account list
     *
     * @remarks
     * Read the identifiers of the available payment account together with
     * booking balance information, depending on the consent granted.
     *
     * It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.
     * The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,
     * respectively the OAuth2 access token.
     *
     * Returns all identifiers of the accounts, to which an account access has been granted to through
     * the /consents endpoint by the PSU.
     * In addition, relevant information about the accounts and hyperlinks to corresponding account
     * information resources are provided if a related consent has been already granted.
     *
     * Remark: Note that the /consents endpoint optionally offers to grant an access on all available
     * payment accounts of a PSU.
     * In this case, this endpoint will deliver the information about all available payment accounts
     * of the PSU at this ASPSP.
     *
     */
    AccountInformationServiceAIS.prototype.getAccountList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAccountListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/v1/accounts";
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetAccountListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetAccountListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.accountList = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.AccountList);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Read balance
     *
     * @remarks
     * Reads account data from a given account addressed by "account-id".
     *
     * **Remark:** This account-id can be a tokenised identification due to data protection reason since the path
     * information might be logged on intermediary servers within the ASPSP sphere.
     * This account-id then can be retrieved by the "Get account list" call.
     *
     * The account-id is constant at least throughout the lifecycle of a given consent.
     *
     */
    AccountInformationServiceAIS.prototype.getBalances = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetBalancesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/accounts/{account-id}/balances", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetBalancesSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetBalancesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.readAccountBalanceResponse200 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ReadAccountBalanceResponse200);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get consent authorisation sub-resources request
     *
     * @remarks
     * Return a list of all authorisation subresources IDs which have been created.
     *
     * This function returns an array of hyperlinks to all generated authorisation sub-resources.
     *
     */
    AccountInformationServiceAIS.prototype.getConsentAuthorisation = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetConsentAuthorisationRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/consents/{consentId}/authorisations", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetConsentAuthorisationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetConsentAuthorisationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.authorisations = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Authorisations);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get consent request
     *
     * @remarks
     * Returns the content of an account information consent object.
     * This is returning the data for the TPP especially in cases,
     * where the consent was directly managed between ASPSP and PSU e.g. in a redirect SCA Approach.
     *
     */
    AccountInformationServiceAIS.prototype.getConsentInformation = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetConsentInformationRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/consents/{consentId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetConsentInformationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetConsentInformationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.consentInformationResponse200Json = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ConsentInformationResponse200Json);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Read the SCA status of the consent authorisation
     *
     * @remarks
     * This method returns the SCA status of a consent initiation's authorisation sub-resource.
     *
     */
    AccountInformationServiceAIS.prototype.getConsentScaStatus = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetConsentScaStatusRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/consents/{consentId}/authorisations/{authorisationId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetConsentScaStatusSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetConsentScaStatusResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.scaStatusResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ScaStatusResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Consent status request
     *
     * @remarks
     * Read the status of an account information consent resource.
     */
    AccountInformationServiceAIS.prototype.getConsentStatus = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetConsentStatusRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/consents/{consentId}/status", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetConsentStatusSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetConsentStatusResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.consentStatusResponse200 = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ConsentStatusResponse200);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Read transaction details
     *
     * @remarks
     * Reads transaction details from a given transaction addressed by "transactionId" on a given account addressed by "account-id".
     * This call is only available on transactions as reported in a JSON format.
     *
     * **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the
     * "Read Transaction List" call within the _links subfield.
     *
     */
    AccountInformationServiceAIS.prototype.getTransactionDetails = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTransactionDetailsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/accounts/{account-id}/transactions/{transactionId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetTransactionDetailsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetTransactionDetailsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.getTransactionDetails200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.GetTransactionDetails200ApplicationJSON);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Read transaction list of an account
     *
     * @remarks
     * Read transaction reports or transaction lists of a given account ddressed by "account-id", depending on the steering parameter
     * "bookingStatus" together with balances.
     *
     * For a given account, additional parameters are e.g. the attributes "dateFrom" and "dateTo".
     * The ASPSP might add balance information, if transaction lists without balances are not supported.
     *
     */
    AccountInformationServiceAIS.prototype.getTransactionList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetTransactionListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/accounts/{account-id}/transactions", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetTransactionListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GetTransactionListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.transactionsResponse200Json = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.TransactionsResponse200Json);
                    }
                    if (utils.matchContentType(contentType, "application/xml")) {
                        var resBody = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, null, 0);
                        var out = new Uint8Array(resBody.length);
                        for (var i = 0; i < resBody.length; i++)
                            out[i] = resBody.charCodeAt(i);
                        res.body = out;
                    }
                    if (utils.matchContentType(contentType, "text/plain")) {
                        res.getTransactionList200TextPlainOneOf = JSON.stringify(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Read account details
     *
     * @remarks
     * Reads details about an account, with balances where required.
     * It is assumed that a consent of the PSU to
     * this access is already given and stored on the ASPSP system.
     * The addressed details of this account depends then on the stored consent addressed by consentId,
     * respectively the OAuth2 access token.
     *
     * **NOTE:** The account-id can represent a multicurrency account.
     * In this case the currency code is set to "XXX".
     *
     * Give detailed information about the addressed account.
     *
     * Give detailed information about the addressed account together with balance information
     *
     */
    AccountInformationServiceAIS.prototype.readAccountDetails = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ReadAccountDetailsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/accounts/{account-id}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ReadAccountDetailsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, utils.getHeadersFromRequest(req)), config === null || config === void 0 ? void 0 : config.headers);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get", headers: headers }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ReadAccountDetailsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.readAccountDetails200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ReadAccountDetails200ApplicationJSON);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Start the authorisation process for a consent
     *
     * @remarks
     * Create an authorisation sub-resource and start the authorisation process of a consent.
     * The message might in addition transmit authentication and authorisation related data.
     *
     * his method is iterated n times for a n times SCA authorisation in a
     * corporate context, each creating an own authorisation sub-endpoint for
     * the corresponding PSU authorising the consent.
     *
     * The ASPSP might make the usage of this access method unnecessary,
     * since the related authorisation resource will be automatically created by
     * the ASPSP after the submission of the consent data with the first POST consents call.
     *
     * The start authorisation process is a process which is needed for creating a new authorisation
     * or cancellation sub-resource.
     *
     * This applies in the following scenarios:
     *
     *   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding Payment
     *     initiation response that an explicit start of the authorisation process is needed by the TPP.
     *     The 'startAuthorisation' hyperlink can transport more information about data which needs to be
     *     uploaded by using the extended forms:
     *     * 'startAuthorisationWithPsuIdentfication',
     *     * 'startAuthorisationWithPsuAuthentication'
     *     * 'startAuthorisationWithEncryptedPsuAuthentication'
     *     * 'startAuthorisationWithAuthentciationMethodSelection'
     *   * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.
     *   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceding
     *     payment cancellation response that an explicit start of the authorisation process is needed by the TPP.
     *     The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded
     *     by using the extended forms as indicated above.
     *   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for
     *     executing the cancellation.
     *   * The signing basket needs to be authorised yet.
     *
     */
    AccountInformationServiceAIS.prototype.startConsentAuthorisation = function (req, security, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.StartConsentAuthorisationRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/consents/{consentId}/authorisations", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.StartConsentAuthorisationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.StartConsentAuthorisationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.startScaprocessResponse = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.StartScaprocessResponse);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update PSU Data for consents
     *
     * @remarks
     * This method update PSU data on the consents  resource if needed.
     * It may authorise a consent within the Embedded SCA Approach where needed.
     *
     * Independently from the SCA Approach it supports e.g. the selection of
     * the authentication method and a non-SCA PSU authentication.
     *
     * There are several possible update PSU data requests in the context of a consent request if needed,
     * which depends on the SCA approach:
     *
     * * Redirect SCA Approach:
     *   A specific Update PSU data request is applicable for
     *     * the selection of authentication methods, before choosing the actual SCA approach.
     * * Decoupled SCA Approach:
     *   A specific update PSU data request is only applicable for
     *   * adding the PSU Identification, if not provided yet in the payment initiation request or the Account Information Consent Request, or if no OAuth2 access token is used, or
     *   * the selection of authentication methods.
     * * Embedded SCA Approach:
     *   The Update PSU data request might be used
     *   * to add credentials as a first factor authentication data of the PSU and
     *   * to select the authentication method and
     *   * transaction authorisation.
     *
     * The SCA Approach might depend on the chosen SCA method.
     * For that reason, the following possible update PSU data request can apply to all SCA approaches:
     *
     * * Select an SCA method in case of several SCA methods are available for the customer.
     *
     * There are the following request types on this access path:
     *   * Update PSU identification
     *   * Update PSU authentication
     *   * Select PSU autorization method
     *     WARNING: This method needs a reduced header,
     *     therefore many optional elements are not present.
     *     Maybe in a later version the access path will change.
     *   * Transaction Authorisation
     *     WARNING: This method needs a reduced header,
     *     therefore many optional elements are not present.
     *     Maybe in a later version the access path will change.
     *
     */
    AccountInformationServiceAIS.prototype.updateConsentsPsuData = function (req, security, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateConsentsPsuDataRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v1/consents/{consentId}/authorisations/{authorisationId}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateConsentsPsuDataSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign(__assign({}, utils.getHeadersFromRequest(req)), reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateConsentsPsuDataResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
                headers: utils.getHeadersFromResponse(httpRes.headers),
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.updateConsentsPsuData200ApplicationJSONOneOf = httpRes === null || httpRes === void 0 ? void 0 : httpRes.data;
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error400NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error400AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error400AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 401:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error401NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error401AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error401AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 403:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error403NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error403AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error403AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 404:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error404NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error404AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error404AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 405:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error405NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error405AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error405AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 406:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error406NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error406AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error406AIS);
                    }
                    break;
                case [408, 415, 500, 503].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 409:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error409NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error409AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error409AIS);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 429:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.error429NGAIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429NGAIS);
                    }
                    if (utils.matchContentType(contentType, "application/problem+json")) {
                        res.error429AIS = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.Error429AIS);
                    }
                    break;
            }
            return res;
        });
    };
    return AccountInformationServiceAIS;
}());
exports.AccountInformationServiceAIS = AccountInformationServiceAIS;
