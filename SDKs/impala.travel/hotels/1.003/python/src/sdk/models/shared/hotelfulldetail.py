"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import address as shared_address
from ..shared import amenity as shared_amenity
from ..shared import externalurl as shared_externalurl
from ..shared import image as shared_image
from ..shared import location as shared_location
from ..shared import roomtype as shared_roomtype
from ..shared import timerange as shared_timerange
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HotelFullDetailDescription:
    
    short: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('short'), 'exclude': lambda f: f is None }})
    r"""A short description that helps highlight what's special about this hotel."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HotelFullDetail:
    r"""Full details on a hotel, including its room types and available rates"""
    
    address: shared_address.Address = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    r"""Physical address"""  
    amenities: list[shared_amenity.Amenity] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amenities') }})  
    check_in: shared_timerange.TimeRange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkIn') }})
    r"""A time range. Open-ended time ranges are indicated by omitting either `start` or `end` in the object."""  
    check_out: shared_timerange.TimeRange = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkOut') }})
    r"""A time range. Open-ended time ranges are indicated by omitting either `start` or `end` in the object."""  
    contractable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contractable') }})
    r"""This determines if you can negotiate directly with the hotel."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The standard currency code used by the hotel."""  
    emails: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails') }})  
    external_urls: list[shared_externalurl.ExternalURL] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalUrls') }})  
    hotel_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotelId') }})
    r"""Unique identifier for this hotel within the Impala platform."""  
    images: list[shared_image.Image] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images') }})
    r"""Photos of the hotel, sorted in the recommended display order (e.g. for photo galleries) starting with the recommended hero image."""  
    location: shared_location.Location = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location') }})
    r"""Precise location on a map (using WGS 84 longitude and latitude notation)"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the hotel."""  
    phone_numbers: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phoneNumbers') }})
    r"""The hotel's phone number(s)"""  
    room_count: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roomCount') }})
    r"""The number of rooms at the hotel."""  
    room_types: list[shared_roomtype.RoomType] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roomTypes') }})
    r"""List of room types available at this hotel."""  
    star_rating: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starRating') }})
    r"""The star rating (or star-equivalent rating)"""  
    terms_and_conditions: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions') }})
    r"""Rules and terms that apply to this hotel and have to be shown to your guest before the make their booking."""  
    website_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('websiteUrl') }})
    r"""The URL to the hotel's website."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates) was created."""  
    description: Optional[HotelFullDetailDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""The timezone the hotel is in - e.g AST"""  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time (in UTC and ISO 8601 format) when the hotel's stable content (i.e. all the details of the hotel excluding its rates)  was last updated."""  
    