"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .client import Client
from .estimation import Estimation
from .general import General
from .invoice import Invoice
from .order import Order
from .payment import Payment
from .paymentlink import PaymentLink
from .product import Product
from .tax import Tax
from .worktype import WorkType

SERVERS = [
    "https://www.envoice.in",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)
    <span style='margin-left: 0.5em;'>or</span>
    <a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6>View Postman docs</a>
    
    # Quickstart
    
    Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.
    
    <div class='postman-tutorial'>
    
    # Tutorial for running the API in postman
    
    Click on \"\"Run in Postman\"\" button
    <br /><br />
    ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)
    
     --- 
    
    A new page will open.
    Click the \"\"Postman for windows\"\" to run postman as a desktop app.
    Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.
    <br /><br />
    ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)
    
     --- 
    
    In chrome an alert might show up to set a default app for opening postman links. Click on \"\"Open Postman\"\".
    <br /><br />
    ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)
    
     --- 
    
    The OpenAPI specification will be imported in Postman as a new collection named \"\"Envoice api\"\"
    <br /><br />
    ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)
    
     --- 
    
    When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.  
    <sub>\*Eye button in top right corner </sub>
    <br /><br /> 
    ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)
    <br /><br /> 
    ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)
    
     --- 
    
    You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.
    <br /><br />
    ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)
    
     --- 
    
    Modify the example data to suit your needs and send a request.
    <br /><br />
    ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)
    </div>
    
    # Webhooks
    
    Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities. 
    When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL. 
    Webhooks can be used to update an external invoice data storage.
    
    In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.
    All nonworking webhooks will be ignored after a certain period of time and several retry attempts.
    If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.
    
    The payload of the webhook is in format:
    ```
    {
        Signature: \"\"sha256 string\"\",
        Timestamp: \"\"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"\",
        Activity: {
            Message: \"string\",
            Link: \"share url\",
            Type: int,        
            InvoiceNumber: \"string\",
            InvoiceId: int,        
            OrderNumber: \"string\",
            OrderId: int,
            Id: int,
            CreatedOn: \"YYYY-MM-DDTHH:mm:ss.FFFFFFFZ\"
        }
    }
    ```
    """
    client: Client
    estimation: Estimation
    general: General
    invoice: Invoice
    order: Order
    payment: Payment
    payment_link: PaymentLink
    product: Product
    tax: Tax
    work_type: WorkType

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.client = Client(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.estimation = Estimation(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.general = General(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.invoice = Invoice(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.order = Order(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.payment = Payment(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.payment_link = PaymentLink(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.product = Product(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tax = Tax(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.work_type = WorkType(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    