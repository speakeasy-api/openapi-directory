/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LivenessCheck - Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.
 */
public class LivenessCheck {
    /**
     * Interval between health checks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkInterval")
    public String checkInterval;

    public LivenessCheck withCheckInterval(String checkInterval) {
        this.checkInterval = checkInterval;
        return this;
    }
    
    /**
     * Number of consecutive failed checks required before considering the VM unhealthy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureThreshold")
    public Long failureThreshold;

    public LivenessCheck withFailureThreshold(Long failureThreshold) {
        this.failureThreshold = failureThreshold;
        return this;
    }
    
    /**
     * Host header to send when performing a HTTP Liveness check. Example: "myapp.appspot.com"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;

    public LivenessCheck withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * The initial delay before starting to execute the checks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initialDelay")
    public String initialDelay;

    public LivenessCheck withInitialDelay(String initialDelay) {
        this.initialDelay = initialDelay;
        return this;
    }
    
    /**
     * The request path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public LivenessCheck withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * Number of consecutive successful checks required before considering the VM healthy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("successThreshold")
    public Long successThreshold;

    public LivenessCheck withSuccessThreshold(Long successThreshold) {
        this.successThreshold = successThreshold;
        return this;
    }
    
    /**
     * Time before the check is considered failed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public String timeout;

    public LivenessCheck withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }
    
    public LivenessCheck(){}
}
