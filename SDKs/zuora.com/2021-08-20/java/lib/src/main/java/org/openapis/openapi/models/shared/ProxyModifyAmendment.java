/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * ProxyModifyAmendment - Container for custom fields of an Amendment object.
 * 
 */
public class ProxyModifyAmendment {
    /**
     *  Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed. This field can be updated when Status is `Draft`. **Required:** For amendment of type TermsAndConditions when changing the automatic renewal status of a subscription.
     * **Values**: true, false 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AutoRenew")
    public Boolean autoRenew;
    public ProxyModifyAmendment withAutoRenew(Boolean autoRenew) {
        this.autoRenew = autoRenew;
        return this;
    }
    
    /**
     *  The date when the amendment's changes become effective for billing purposes.
     * **Version notes**: -- 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ContractEffectiveDate")
    public LocalDate contractEffectiveDate;
    public ProxyModifyAmendment withContractEffectiveDate(LocalDate contractEffectiveDate) {
        this.contractEffectiveDate = contractEffectiveDate;
        return this;
    }
    
    /**
     *  The length of the period for the current subscription term. This field can be updated when Status is `Draft`.
     * **Required**: Only if the value of the Type field is set to `TermsAndConditions` and TermType is set to `TERMED`. This field is not required if TermType is set to `EVERGREEN`.
     * **Character limit**: **Values**: a valid number 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentTerm")
    public Long currentTerm;
    public ProxyModifyAmendment withCurrentTerm(Long currentTerm) {
        this.currentTerm = currentTerm;
        return this;
    }
    
    /**
     *  The period type for the current subscription term. This field can be updated when Status is `Draft`. **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * **Note**:
     * 
     * - This field can be updated when Status is `Draft`.
     * - This field is used with the CurrentTerm field to specify the current subscription term.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CurrentTermPeriodType")
    public String currentTermPeriodType;
    public ProxyModifyAmendment withCurrentTermPeriodType(String currentTermPeriodType) {
        this.currentTermPeriodType = currentTermPeriodType;
        return this;
    }
    
    /**
     * The date when the customer accepts the amendment's changes to the subscription.
     * 
     * This field is only required if [Zuora is configured to require customer acceptance in Z-Billing](https://knowledgecenter.zuora.com/CB_Billing/W_Billing_and_Payments_Settings/Define_Default_Subscription_Settings) and the subscription is currently in the Pending Acceptance status (the value of the `Status` field is currently `PendingAcceptance`).
     * 
     * Use this field together with the `Status` field. When you set a date in this field as a customer acceptance date, you should also set the `Status` field as `Completed`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("CustomerAcceptanceDate")
    public LocalDate customerAcceptanceDate;
    public ProxyModifyAmendment withCustomerAcceptanceDate(LocalDate customerAcceptanceDate) {
        this.customerAcceptanceDate = customerAcceptanceDate;
        return this;
    }
    
    /**
     *  A description of the amendment. This field can be updated when Status is `Draft`.
     * **Character limit**: 500 **Values**: maximum 500 characters 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Description")
    public String description;
    public ProxyModifyAmendment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     *  The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.
     * **Required**: For the cancellation amendments. Optional for other types of amendments.
     * **Version notes**: -- 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("EffectiveDate")
    public LocalDate effectiveDate;
    public ProxyModifyAmendment withEffectiveDate(LocalDate effectiveDate) {
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    /**
     *  The name of the amendment. This field can be updated when Status is `Draft`.
     * **Character limit**: 100 **Values**: a string of 100 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Name")
    public String name;
    public ProxyModifyAmendment withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     *  Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
     * **Required**: If TermType is Termed **Values**: RENEW_WITH_SPECIFIC_TERM (default), RENEW_TO_EVERGREEN 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalSetting")
    public String renewalSetting;
    public ProxyModifyAmendment withRenewalSetting(String renewalSetting) {
        this.renewalSetting = renewalSetting;
        return this;
    }
    
    /**
     *  The term of renewal for the amended subscription. This field can be updated when Status is `Draft`.
     * **Required**: Only if the value of the Type field is set to `TermsAndConditions`.
     * **Character limit**: **Values:** a valid number 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalTerm")
    public Long renewalTerm;
    public ProxyModifyAmendment withRenewalTerm(Long renewalTerm) {
        this.renewalTerm = renewalTerm;
        return this;
    }
    
    /**
     *  The period type for the subscription renewal term. This field can be updated when Status is `Draft`.
     * **Required**: Only if the value of the Type field is set to `TermsAndConditions`. This field is used with the RenewalTerm field to specify the subscription renewal term.
     * **Values**:
     * 
     * - `Month` (default)
     * - `Year`
     * - `Day`
     * - `Week`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenewalTermPeriodType")
    public String renewalTermPeriodType;
    public ProxyModifyAmendment withRenewalTermPeriodType(String renewalTermPeriodType) {
        this.renewalTermPeriodType = renewalTermPeriodType;
        return this;
    }
    
    /**
     * The date when service is activated.
     * 
     * This field is only required if [Zuora is configured to require service activation in Z-Billing](https://knowledgecenter.zuora.com/CB_Billing/W_Billing_and_Payments_Settings/Define_Default_Subscription_Settings) and the subscription is currently in the Pending Activation status (the value of the `Status` field is currently `PendingActivation`).
     * 
     * Use this field together with the `Status` field. When you set a date in this field as a service activation date, you should also set the `Status` field as the expected next phase status: `Completed` or `PendingAcceptance`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("ServiceActivationDate")
    public LocalDate serviceActivationDate;
    public ProxyModifyAmendment withServiceActivationDate(LocalDate serviceActivationDate) {
        this.serviceActivationDate = serviceActivationDate;
        return this;
    }
    
    /**
     *  The date when the UpdateProduct amendment takes effect. This field is only applicable if there is already a future-dated UpdateProduct amendment on the subscription.
     * **Required**: Only for the UpdateProduct amendments if there is already a future-dated UpdateProduct amendment on the subscription.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("SpecificUpdateDate")
    public LocalDate specificUpdateDate;
    public ProxyModifyAmendment withSpecificUpdateDate(LocalDate specificUpdateDate) {
        this.specificUpdateDate = specificUpdateDate;
        return this;
    }
    
    /**
     *  The status of the amendment. Type: string (enum) **Character limit**: 17 **Values**: one of the following:
     * 
     * - Draft (default, if left null)
     * - Pending Activation
     * - Pending Acceptance
     * - Completed
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public ProxyModifyAmendment withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     *  The ID of the subscription that the amendment changes. This field can be updated when Status is `Draft`.
     * **Character limit**: 32 **Values**: a valid subscription ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SubscriptionId")
    public String subscriptionId;
    public ProxyModifyAmendment withSubscriptionId(String subscriptionId) {
        this.subscriptionId = subscriptionId;
        return this;
    }
    
    /**
     *  The date when the new terms and conditions take effect.
     * **Required**: Only if the value of the Type field is set to TermsAndConditions.
     * **Version notes**: -- 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TermStartDate")
    public LocalDate termStartDate;
    public ProxyModifyAmendment withTermStartDate(LocalDate termStartDate) {
        this.termStartDate = termStartDate;
        return this;
    }
    
    /**
     *  Indicates if the subscription is TERMED or EVERGREEN. This field can be updated when Status is `Draft`.
     * 
     * - A TERMED subscription has an expiration date, and must be manually renewed.
     * - An EVERGREEN subscription doesn't have an expiration date, and must be manually ended.
     * 
     * **Required**: Only when as part of an amendment of type TermsAndConditions &amp;#65279;to change the term type of a subscription. Type: string **Character limit**: 9 **Values**: TERMED, EVERGREEN 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TermType")
    public String termType;
    public ProxyModifyAmendment withTermType(String termType) {
        this.termType = termType;
        return this;
    }
    
    /**
     *  The type of amendment. This field can be updated when Status is `Draft`.
     * **Character limit**: 18 **Values**: one of the following:
     * 
     * - Cancellation
     * - NewProduct
     * - OwnerTransfer
     * - RemoveProduct
     * - Renewal
     * - UpdateProduct
     * - TermsAndConditions
     * - SuspendSubscription
     * - ResumeSubscription
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public String type;
    public ProxyModifyAmendment withType(String type) {
        this.type = type;
        return this;
    }
    
}
