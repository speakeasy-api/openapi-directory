// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum - Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
type UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum string

const (
	UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnumUpload   UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum = "upload"
	UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnumDownload UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum = "download"
	UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnumDelete   UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum = "delete"
	UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnumAll      UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum = "all"
)

func (e *UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "upload":
		fallthrough
	case "download":
		fallthrough
	case "delete":
		fallthrough
	case "all":
		*e = UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum: %s", s)
	}
}

type UpdateNotificationByIDUpdateNotificationByIDRequestBody struct {
	// Type of action be notified about. Notifications will only be sent for the given type of action. Valid choices are **upload**, **download**, **delete** or **all** (upload/download/delete)
	Action *UpdateNotificationByIDUpdateNotificationByIDRequestBodyActionEnum `json:"action,omitempty"`
	// Custom message to insert into the notification emails, along with the matching activity.
	Message *string `json:"message,omitempty"`
	// Email addresses to send notification emails to. If empty, sends to the current user's email address.
	Recipients []string `json:"recipients,omitempty"`
	// Whether an email should be sent to the recipients when matching activity happens.
	SendEmail *bool `json:"sendEmail,omitempty"`
	// Determines which users' actions should trigger the notification.
	//
	// Rather than listing  individual users, you can also use 3 special options:
	//
	// - **notice\_user\_all** for activity by any user or share recipient
	// - **notice\_user\_all\_users** for activity only by user accounts
	// - **notice\_user\_all\_recipients** for activity only by share recipients
	Usernames []string `json:"usernames,omitempty"`
}

type UpdateNotificationByIDRequest struct {
	RequestBody *UpdateNotificationByIDUpdateNotificationByIDRequestBody `request:"mediaType=application/json"`
	// Access token required to make the API call.
	EvAccessToken string `header:"style=simple,explode=false,name=ev-access-token"`
	// API Key required to make the API call.
	EvAPIKey string `header:"style=simple,explode=false,name=ev-api-key"`
	// ID of the notification. Use [GET /notifications](#operation/listNotifications) if you need to lookup an ID.
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

type UpdateNotificationByIDResponse struct {
	ContentType string
	// Successful Operation
	NotificationResponse *shared.NotificationResponse
	StatusCode           int
	RawResponse          *http.Response
}
