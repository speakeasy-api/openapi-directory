// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum - Type of the algorithm
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum string

const (
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnumRoundRobin       PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum = "round_robin"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnumLeastConnections PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum = "least_connections"
)

func (e PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum) ToPointer() *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum {
	return &e
}

func (e *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "round_robin":
		fallthrough
	case "least_connections":
		*e = PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum: %v", v)
	}
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithm - Algorithm of the Load Balancer
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithm struct {
	// Type of the algorithm
	Type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithmTypeEnum `json:"type"`
}

// PostLoadBalancersCreateLoadBalancerRequestLabels - User-defined labels (key-value pairs)
type PostLoadBalancersCreateLoadBalancerRequestLabels struct {
	// New label
	Labelkey *string `json:"labelkey,omitempty"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP - Additional configuration for protocol http
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP struct {
	// Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
	Domain string `json:"domain"`
	// HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
	Path string `json:"path"`
	// String that must be contained in HTTP response in order to pass the health check
	Response *string `json:"response,omitempty"`
	// List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
	StatusCodes []string `json:"status_codes,omitempty"`
	// Use HTTPS for health check
	TLS *bool `json:"tls,omitempty"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum - Type of the health check
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum string

const (
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumTCP  PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "tcp"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumHTTP PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "http"
)

func (e PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) ToPointer() *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum {
	return &e
}

func (e *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "http":
		*e = PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum: %v", v)
	}
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheck - Service health check
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheck struct {
	// Additional configuration for protocol http
	HTTP *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP `json:"http,omitempty"`
	// Time interval in seconds health checks are performed
	Interval int64 `json:"interval"`
	// Port the health check will be performed on
	Port int64 `json:"port"`
	// Type of the health check
	Protocol PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum `json:"protocol"`
	// Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
	Retries int64 `json:"retries"`
	// Time in seconds after an attempt is considered a timeout
	Timeout int64 `json:"timeout"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHTTP - Configuration option for protocols http and https
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHTTP struct {
	// IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"
	Certificates []int64 `json:"certificates,omitempty"`
	// Lifetime of the cookie used for sticky sessions
	CookieLifetime *int64 `json:"cookie_lifetime,omitempty"`
	// Name of the cookie used for sticky sessions
	CookieName *string `json:"cookie_name,omitempty"`
	// Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`
	RedirectHTTP *bool `json:"redirect_http,omitempty"`
	// Use sticky sessions. Only available if protocol is "http" or "https". Default `false`
	StickySessions *bool `json:"sticky_sessions,omitempty"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum - Protocol of the Load Balancer
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum string

const (
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnumTCP   PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum = "tcp"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnumHTTP  PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum = "http"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnumHTTPS PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum = "https"
)

func (e PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum) ToPointer() *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum {
	return &e
}

func (e *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum: %v", v)
	}
}

type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerService struct {
	// Port the Load Balancer will balance to
	DestinationPort int64 `json:"destination_port"`
	// Service health check
	HealthCheck PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHealthCheck `json:"health_check"`
	// Configuration option for protocols http and https
	HTTP *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceLoadBalancerServiceHTTP `json:"http,omitempty"`
	// Port the Load Balancer listens on
	ListenPort int64 `json:"listen_port"`
	// Protocol of the Load Balancer
	Protocol PostLoadBalancersCreateLoadBalancerRequestLoadBalancerServiceProtocolEnum `json:"protocol"`
	// Is Proxyprotocol enabled or not
	Proxyprotocol bool `json:"proxyprotocol"`
}

type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum string

const (
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnumHealthy   PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum = "healthy"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnumUnhealthy PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum = "unhealthy"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnumUnknown   PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum = "unknown"
)

func (e PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum) ToPointer() *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum {
	return &e
}

func (e *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "healthy":
		fallthrough
	case "unhealthy":
		fallthrough
	case "unknown":
		*e = PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum: %v", v)
	}
}

type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatus struct {
	ListenPort *int64                                                                              `json:"listen_port,omitempty"`
	Status     *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatusStatusEnum `json:"status,omitempty"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetIP - IP targets where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type "ip".
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetIP struct {
	// IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.
	IP string `json:"ip"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetLabelSelector - Label selector used to determine targets. Only present for target type "label_selector".
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetServer - Server where the traffic should be routed to. Only present for target type "server".
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum string

const (
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnumHealthy   PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum = "healthy"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnumUnhealthy PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum = "unhealthy"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnumUnknown   PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum = "unknown"
)

func (e PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum) ToPointer() *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum {
	return &e
}

func (e *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "healthy":
		fallthrough
	case "unhealthy":
		fallthrough
	case "unknown":
		*e = PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum: %v", v)
	}
}

type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatus struct {
	ListenPort *int64                                                                                                      `json:"listen_port,omitempty"`
	Status     *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum `json:"status,omitempty"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetLoadBalancerTargetServer - Server where the traffic should be routed to. Only present for target type "server".
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetLoadBalancerTargetServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTarget struct {
	// List of health statuses of the services on this target. Only present for target types "server" and "ip".
	HealthStatus []PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetHealthStatus `json:"health_status,omitempty"`
	// Server where the traffic should be routed to. Only present for target type "server".
	Server *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTargetLoadBalancerTargetServer `json:"server,omitempty"`
	// Type of the resource. Here always "server".
	Type *string `json:"type,omitempty"`
	// Use the private network IP instead of the public IP. Default value is false. Only present for target types "server" and "label_selector".
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

// PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum - Type of the resource
type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum string

const (
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnumServer        PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum = "server"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnumLabelSelector PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum = "label_selector"
	PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnumIP            PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum = "ip"
)

func (e PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum) ToPointer() *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum {
	return &e
}

func (e *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		fallthrough
	case "label_selector":
		fallthrough
	case "ip":
		*e = PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum: %v", v)
	}
}

type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTarget struct {
	// List of health statuses of the services on this target. Only present for target types "server" and "ip".
	HealthStatus []PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetHealthStatus `json:"health_status,omitempty"`
	// IP targets where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type "ip".
	IP *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetIP `json:"ip,omitempty"`
	// Label selector used to determine targets. Only present for target type "label_selector".
	LabelSelector *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetLabelSelector `json:"label_selector,omitempty"`
	// Server where the traffic should be routed to. Only present for target type "server".
	Server *PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetServer `json:"server,omitempty"`
	// List of resolved label selector target Servers. Only present for type "label_selector".
	Targets []PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetLoadBalancerTargetTarget `json:"targets,omitempty"`
	// Type of the resource
	Type PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTargetTypeEnum `json:"type"`
	// Use the private network IP instead of the public IP. Default value is false. Only present for target types "server" and "label_selector".
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

type PostLoadBalancersCreateLoadBalancerRequest struct {
	// Algorithm of the Load Balancer
	Algorithm PostLoadBalancersCreateLoadBalancerRequestLoadBalancerAlgorithm `json:"algorithm"`
	// User-defined labels (key-value pairs)
	Labels *PostLoadBalancersCreateLoadBalancerRequestLabels `json:"labels,omitempty"`
	// ID or name of the Load Balancer type this Load Balancer should be created with
	LoadBalancerType string `json:"load_balancer_type"`
	// ID or name of Location to create Load Balancer in
	Location *string `json:"location,omitempty"`
	// Name of the Load Balancer
	Name string `json:"name"`
	// ID of the network the Load Balancer should be attached to on creation
	Network *int64 `json:"network,omitempty"`
	// Name of network zone
	NetworkZone *string `json:"network_zone,omitempty"`
	// Enable or disable the public interface of the Load Balancer
	PublicInterface *bool `json:"public_interface,omitempty"`
	// Array of services
	Services []PostLoadBalancersCreateLoadBalancerRequestLoadBalancerService `json:"services,omitempty"`
	// Array of targets
	Targets []PostLoadBalancersCreateLoadBalancerRequestLoadBalancerTarget `json:"targets,omitempty"`
}

// PostLoadBalancers201ApplicationJSONActionError - Error message for the Action if error occurred, otherwise null
type PostLoadBalancers201ApplicationJSONActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostLoadBalancers201ApplicationJSONActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostLoadBalancers201ApplicationJSONActionStatusEnum - Status of the Action
type PostLoadBalancers201ApplicationJSONActionStatusEnum string

const (
	PostLoadBalancers201ApplicationJSONActionStatusEnumSuccess PostLoadBalancers201ApplicationJSONActionStatusEnum = "success"
	PostLoadBalancers201ApplicationJSONActionStatusEnumRunning PostLoadBalancers201ApplicationJSONActionStatusEnum = "running"
	PostLoadBalancers201ApplicationJSONActionStatusEnumError   PostLoadBalancers201ApplicationJSONActionStatusEnum = "error"
)

func (e PostLoadBalancers201ApplicationJSONActionStatusEnum) ToPointer() *PostLoadBalancers201ApplicationJSONActionStatusEnum {
	return &e
}

func (e *PostLoadBalancers201ApplicationJSONActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostLoadBalancers201ApplicationJSONActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancers201ApplicationJSONActionStatusEnum: %v", v)
	}
}

type PostLoadBalancers201ApplicationJSONAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostLoadBalancers201ApplicationJSONActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostLoadBalancers201ApplicationJSONActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostLoadBalancers201ApplicationJSONActionStatusEnum `json:"status"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum - Type of the algorithm
type PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum string

const (
	PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnumRoundRobin       PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum = "round_robin"
	PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnumLeastConnections PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum = "least_connections"
)

func (e PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum) ToPointer() *PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum {
	return &e
}

func (e *PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "round_robin":
		fallthrough
	case "least_connections":
		*e = PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum: %v", v)
	}
}

// PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithm - Algorithm of the Load Balancer
type PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithm struct {
	// Type of the algorithm
	Type PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithmTypeEnum `json:"type"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly - Hourly costs for a Resource in this Location
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly - Monthly costs for a Resource in this Location
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePrices struct {
	// Name of the Location the price is for
	Location string `json:"location"`
	// Hourly costs for a Resource in this Location
	PriceHourly PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceHourly `json:"price_hourly"`
	// Monthly costs for a Resource in this Location
	PriceMonthly PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePricesPriceMonthly `json:"price_monthly"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerType struct {
	// Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Load Balancer type
	Description string `json:"description"`
	// ID of the Load Balancer type
	ID float64 `json:"id"`
	// Number of SSL Certificates that can be assigned to a single Load Balancer
	MaxAssignedCertificates float64 `json:"max_assigned_certificates"`
	// Number of maximum simultaneous open connections
	MaxConnections float64 `json:"max_connections"`
	// Number of services a Load Balancer of this type can have
	MaxServices float64 `json:"max_services"`
	// Number of targets a single Load Balancer can have
	MaxTargets float64 `json:"max_targets"`
	// Unique identifier of the Load Balancer type
	Name string `json:"name"`
	// Prices in different network zones
	Prices []PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTypePrices `json:"prices"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancerPrivateNet struct {
	IP      *string `json:"ip,omitempty"`
	Network *int64  `json:"network,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerProtection - Protection configuration for the Resource
type PostLoadBalancers201ApplicationJSONLoadBalancerProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerPublicNetIpv4 - IP address (v4)
type PostLoadBalancers201ApplicationJSONLoadBalancerPublicNetIpv4 struct {
	// Reverse DNS PTR entry for the IPv4 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v4) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerPublicNetIpv6 - IP address (v6)
type PostLoadBalancers201ApplicationJSONLoadBalancerPublicNetIpv6 struct {
	// Reverse DNS PTR entry for the IPv6 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v6) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerPublicNet - Public network information
type PostLoadBalancers201ApplicationJSONLoadBalancerPublicNet struct {
	// Public Interface enabled or not
	Enabled bool `json:"enabled"`
	// IP address (v4)
	Ipv4 PostLoadBalancers201ApplicationJSONLoadBalancerPublicNetIpv4 `json:"ipv4"`
	// IP address (v6)
	Ipv6 PostLoadBalancers201ApplicationJSONLoadBalancerPublicNetIpv6 `json:"ipv6"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP - Additional configuration for protocol http
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP struct {
	// Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
	Domain string `json:"domain"`
	// HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
	Path string `json:"path"`
	// String that must be contained in HTTP response in order to pass the health check
	Response *string `json:"response,omitempty"`
	// List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
	StatusCodes []string `json:"status_codes,omitempty"`
	// Use HTTPS for health check
	TLS *bool `json:"tls,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum - Type of the health check
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum string

const (
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumTCP  PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "tcp"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumHTTP PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "http"
)

func (e PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) ToPointer() *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum {
	return &e
}

func (e *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "http":
		*e = PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum: %v", v)
	}
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck - Service health check
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck struct {
	// Additional configuration for protocol http
	HTTP *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP `json:"http,omitempty"`
	// Time interval in seconds health checks are performed
	Interval int64 `json:"interval"`
	// Port the health check will be performed on
	Port int64 `json:"port"`
	// Type of the health check
	Protocol PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum `json:"protocol"`
	// Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
	Retries int64 `json:"retries"`
	// Time in seconds after an attempt is considered a timeout
	Timeout int64 `json:"timeout"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHTTP - Configuration option for protocols http and https
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHTTP struct {
	// IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"
	Certificates []int64 `json:"certificates,omitempty"`
	// Lifetime of the cookie used for sticky sessions
	CookieLifetime *int64 `json:"cookie_lifetime,omitempty"`
	// Name of the cookie used for sticky sessions
	CookieName *string `json:"cookie_name,omitempty"`
	// Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`
	RedirectHTTP *bool `json:"redirect_http,omitempty"`
	// Use sticky sessions. Only available if protocol is "http" or "https". Default `false`
	StickySessions *bool `json:"sticky_sessions,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum - Protocol of the Load Balancer
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum string

const (
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumTCP   PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "tcp"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumHTTP  PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "http"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnumHTTPS PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum = "https"
)

func (e PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum) ToPointer() *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum {
	return &e
}

func (e *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum: %v", v)
	}
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerService struct {
	// Port the Load Balancer will balance to
	DestinationPort int64 `json:"destination_port"`
	// Service health check
	HealthCheck PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHealthCheck `json:"health_check"`
	// Configuration option for protocols http and https
	HTTP *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceLoadBalancerServiceHTTP `json:"http,omitempty"`
	// Port the Load Balancer listens on
	ListenPort int64 `json:"listen_port"`
	// Protocol of the Load Balancer
	Protocol PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerServiceProtocolEnum `json:"protocol"`
	// Is Proxyprotocol enabled or not
	Proxyprotocol bool `json:"proxyprotocol"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum string

const (
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnumHealthy   PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum = "healthy"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnumUnhealthy PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum = "unhealthy"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnumUnknown   PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum = "unknown"
)

func (e PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum) ToPointer() *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum {
	return &e
}

func (e *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "healthy":
		fallthrough
	case "unhealthy":
		fallthrough
	case "unknown":
		*e = PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum: %v", v)
	}
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus struct {
	ListenPort *int64                                                                                   `json:"listen_port,omitempty"`
	Status     *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatusStatusEnum `json:"status,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetIP - IP targets where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type "ip".
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetIP struct {
	// IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.
	IP string `json:"ip"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetLabelSelector - Label selector used to determine targets. Only present for target type "label_selector".
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer - Server where the traffic should be routed to. Only present for target type "server".
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum string

const (
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnumHealthy   PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum = "healthy"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnumUnhealthy PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum = "unhealthy"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnumUnknown   PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum = "unknown"
)

func (e PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum) ToPointer() *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum {
	return &e
}

func (e *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "healthy":
		fallthrough
	case "unhealthy":
		fallthrough
	case "unknown":
		*e = PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum: %v", v)
	}
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatus struct {
	ListenPort *int64                                                                                                           `json:"listen_port,omitempty"`
	Status     *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatusStatusEnum `json:"status,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetLoadBalancerTargetServer - Server where the traffic should be routed to. Only present for target type "server".
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetLoadBalancerTargetServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTarget struct {
	// List of health statuses of the services on this target. Only present for target types "server" and "ip".
	HealthStatus []PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetHealthStatus `json:"health_status,omitempty"`
	// Server where the traffic should be routed to. Only present for target type "server".
	Server *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTargetLoadBalancerTargetServer `json:"server,omitempty"`
	// Type of the resource. Here always "server".
	Type *string `json:"type,omitempty"`
	// Use the private network IP instead of the public IP. Default value is false. Only present for target types "server" and "label_selector".
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

// PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum - Type of the resource
type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum string

const (
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumServer        PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "server"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumLabelSelector PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "label_selector"
	PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnumIP            PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum = "ip"
)

func (e PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum) ToPointer() *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum {
	return &e
}

func (e *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		fallthrough
	case "label_selector":
		fallthrough
	case "ip":
		*e = PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum: %v", v)
	}
}

type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTarget struct {
	// List of health statuses of the services on this target. Only present for target types "server" and "ip".
	HealthStatus []PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus `json:"health_status,omitempty"`
	// IP targets where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type "ip".
	IP *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetIP `json:"ip,omitempty"`
	// Label selector used to determine targets. Only present for target type "label_selector".
	LabelSelector *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetLabelSelector `json:"label_selector,omitempty"`
	// Server where the traffic should be routed to. Only present for target type "server".
	Server *PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer `json:"server,omitempty"`
	// List of resolved label selector target Servers. Only present for type "label_selector".
	Targets []PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetTarget `json:"targets,omitempty"`
	// Type of the resource
	Type PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum `json:"type"`
	// Use the private network IP instead of the public IP. Default value is false. Only present for target types "server" and "label_selector".
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

type PostLoadBalancers201ApplicationJSONLoadBalancer struct {
	// Algorithm of the Load Balancer
	Algorithm PostLoadBalancers201ApplicationJSONLoadBalancerAlgorithm `json:"algorithm"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Free Traffic for the current billing period in bytes
	IncludedTraffic int64 `json:"included_traffic"`
	// Inbound Traffic for the current billing period in bytes
	IngoingTraffic int64 `json:"ingoing_traffic"`
	// User-defined labels (key-value pairs)
	Labels           map[string]string                                               `json:"labels"`
	LoadBalancerType PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerType `json:"load_balancer_type"`
	Location         PostLoadBalancers201ApplicationJSONLoadBalancerLocation         `json:"location"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Outbound Traffic for the current billing period in bytes
	OutgoingTraffic int64 `json:"outgoing_traffic"`
	// Private networks information
	PrivateNet []PostLoadBalancers201ApplicationJSONLoadBalancerPrivateNet `json:"private_net"`
	// Protection configuration for the Resource
	Protection PostLoadBalancers201ApplicationJSONLoadBalancerProtection `json:"protection"`
	// Public network information
	PublicNet PostLoadBalancers201ApplicationJSONLoadBalancerPublicNet `json:"public_net"`
	// List of services that belong to this Load Balancer
	Services []PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerService `json:"services"`
	// List of targets that belong to this Load Balancer
	Targets []PostLoadBalancers201ApplicationJSONLoadBalancerLoadBalancerTarget `json:"targets"`
}

// PostLoadBalancers201ApplicationJSON - The `load_balancer` key contains the Load Balancer that was just created
type PostLoadBalancers201ApplicationJSON struct {
	Action       PostLoadBalancers201ApplicationJSONAction       `json:"action"`
	LoadBalancer PostLoadBalancers201ApplicationJSONLoadBalancer `json:"load_balancer"`
}

type PostLoadBalancersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `load_balancer` key contains the Load Balancer that was just created
	PostLoadBalancers201ApplicationJSONObject *PostLoadBalancers201ApplicationJSON
}
