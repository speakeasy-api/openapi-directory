<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteResponse
     */
	public function dialogflowProjectsLocationsAgentEntityTypesBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entityTypes:batchDelete', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2BatchDeleteEntityTypesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates/Creates multiple entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateEntityTypesResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateResponse
     */
	public function dialogflowProjectsLocationsAgentEntityTypesBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entityTypes:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2BatchUpdateEntityTypesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates multiple new entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateResponse
     */
	public function dialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entities:batchCreate', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2BatchCreateEntitiesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteResponse
     */
	public function dialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entities:batchDelete', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2BatchDeleteEntitiesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateResponse
     */
	public function dialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entities:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2BatchUpdateEntitiesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEntityTypesEntitiesBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an agent environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentEnvironmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2EnvironmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Environment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Environment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the history of the specified environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistoryResponse
     */
	public function dialogflowProjectsLocationsAgentEnvironmentsGetHistory(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/history', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsGetHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2EnvironmentHistory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2EnvironmentHistory', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all non-default environments of the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListResponse
     */
	public function dialogflowProjectsLocationsAgentEnvironmentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentEnvironmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListEnvironmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListEnvironmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports the specified agent to a ZIP file. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportResponse
     */
	public function dialogflowProjectsLocationsAgentExport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent:export', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ExportAgentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultResponse
     */
	public function dialogflowProjectsLocationsAgentGetValidationResult(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent/validationResult', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentGetValidationResultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ValidationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ValidationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when importing is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportResponse
     */
	public function dialogflowProjectsLocationsAgentImport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent:import', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ImportAgentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteResponse
     */
	public function dialogflowProjectsLocationsAgentIntentsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/intents:batchDelete', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2BatchDeleteIntentsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates/Creates multiple intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateIntentsResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateResponse
     */
	public function dialogflowProjectsLocationsAgentIntentsBatchUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/intents:batchUpdate', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2BatchUpdateIntentsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsBatchUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an intent in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentIntentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/intents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2IntentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Intent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Intent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all intents in the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListResponse
     */
	public function dialogflowProjectsLocationsAgentIntentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/intents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentIntentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListIntentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListIntentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore, the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when restoring is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreResponse
     */
	public function dialogflowProjectsLocationsAgentRestore(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent:restore', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2RestoreAgentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to. One can achieve that with a wildcard project collection id "-". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchResponse
     */
	public function dialogflowProjectsLocationsAgentSearch(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent:search', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2SearchAgentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2SearchAgentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a context. If the specified context already exists, overrides the context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentSessionsContextsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/contexts', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2Context", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Context = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Context', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all contexts in the specified session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListResponse
     */
	public function dialogflowProjectsLocationsAgentSessionsContextsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/contexts', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsContextsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListContextsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListContextsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes all active contexts in the specified session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsResponse
     */
	public function dialogflowProjectsLocationsAgentSessionsDeleteContexts(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/contexts', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDeleteContextsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentResponse
     */
	public function dialogflowProjectsLocationsAgentSessionsDetectIntent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{session}:detectIntent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2DetectIntentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsDetectIntentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2DetectIntentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2DetectIntentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateResponse
     */
	public function dialogflowProjectsLocationsAgentSessionsEntityTypesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entityTypes', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2SessionEntityType", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2SessionEntityType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2SessionEntityType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListResponse
     */
	public function dialogflowProjectsLocationsAgentSessionsEntityTypesList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/entityTypes', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentSessionsEntityTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListSessionEntityTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListSessionEntityTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trains the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainResponse
     */
	public function dialogflowProjectsLocationsAgentTrain(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent:train', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentTrainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an agent version. The new version points to the agent instance in the "default" environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2VersionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all versions of the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListResponse
     */
	public function dialogflowProjectsLocationsAgentVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all answer records in the specified project in reverse chronological order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListResponse
     */
	public function dialogflowProjectsLocationsAnswerRecordsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/answerRecords', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAnswerRecordsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListAnswerRecordsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListAnswerRecordsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new conversation dataset. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateConversationDatasetOperationMetadata - `response`: ConversationDataset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateResponse
     */
	public function dialogflowProjectsLocationsConversationDatasetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversationDatasets', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ConversationDatasetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Import data into the specified conversation dataset. Note that it is not allowed to import data to a conversation dataset that already has data in it. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportConversationDataOperationMetadata - `response`: ImportConversationDataOperationResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataResponse
     */
	public function dialogflowProjectsLocationsConversationDatasetsImportConversationData(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:importConversationData', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ImportConversationDataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsImportConversationDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all conversation datasets in the specified project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListResponse
     */
	public function dialogflowProjectsLocationsConversationDatasetsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversationDatasets', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationDatasetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListConversationDatasetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListConversationDatasetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a model. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateConversationModelOperationMetadata - `response`: ConversationModel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateResponse
     */
	public function dialogflowProjectsLocationsConversationModelsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversationModels', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ConversationModelInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deploys a model. If a model is already deployed, deploying it has no effect. A model can only serve prediction requests after it gets deployed. For article suggestion, custom model will not be used unless it is deployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeployRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeploySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeployResponse
     */
	public function dialogflowProjectsLocationsConversationModelsDeploy(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeployRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeploySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeployResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:deploy', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeployRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeployRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsDeployResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates evaluation of a conversation model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateResponse
     */
	public function dialogflowProjectsLocationsConversationModelsEvaluationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/evaluations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2CreateConversationModelEvaluationRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists evaluations of a conversation model.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListResponse
     */
	public function dialogflowProjectsLocationsConversationModelsEvaluationsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/evaluations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsEvaluationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListConversationModelEvaluationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListConversationModelEvaluationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists conversation models.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListResponse
     */
	public function dialogflowProjectsLocationsConversationModelsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversationModels', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListConversationModelsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListConversationModelsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undeploys a model. If the model is not deployed this method has no effect. If the model is currently being used: - For article suggestion, article suggestion will fallback to the default model if model is undeployed. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: UndeployConversationModelOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeployRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeploySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeployResponse
     */
	public function dialogflowProjectsLocationsConversationModelsUndeploy(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeployRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeploySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeployResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:undeploy', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeployRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeployRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationModelsUndeployResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clears a suggestion feature from a conversation profile for the given participant role. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: ClearSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigResponse
     */
	public function dialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfig(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{conversationProfile}:clearSuggestionFeatureConfig', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ClearSuggestionFeatureConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesClearSuggestionFeatureConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a conversation profile in the specified project. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateResponse
     */
	public function dialogflowProjectsLocationsConversationProfilesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversationProfiles', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ConversationProfileInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ConversationProfile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ConversationProfile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all conversation profiles in the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListResponse
     */
	public function dialogflowProjectsLocationsConversationProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversationProfiles', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListConversationProfilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListConversationProfilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds or updates a suggestion feature in a conversation profile. If the conversation profile contains the type of suggestion feature for the participant role, it will update it. Otherwise it will insert the suggestion feature. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: SetSuggestionFeatureConfigOperationMetadata - `response`: ConversationProfile If a long running operation to add or update suggestion feature config for the same conversation profile, participant role and suggestion feature type exists, please cancel the existing long running operation before sending such request, otherwise the request will be rejected.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigResponse
     */
	public function dialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfig(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{conversationProfile}:setSuggestionFeatureConfig', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2SetSuggestionFeatureConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationProfilesSetSuggestionFeatureConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Completes the specified conversation. Finished conversations are purged from the database after 30 days.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteResponse
     */
	public function dialogflowProjectsLocationsConversationsComplete(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:complete', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Conversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Conversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new conversation. Conversations are auto-completed after 24 hours. Conversation Lifecycle: There are two stages during a conversation: Automated Agent Stage and Assist Stage. For Automated Agent Stage, there will be a dialogflow agent responding to user queries. For Assist Stage, there's no dialogflow agent responding to user queries. But we will provide suggestions which are generated from conversation. If Conversation.conversation_profile is configured for a dialogflow agent, conversation will start from `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And during `Automated Agent Stage`, once an Intent with Intent.live_agent_handoff is triggered, conversation will transfer to Assist Stage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateResponse
     */
	public function dialogflowProjectsLocationsConversationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ConversationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Conversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Conversation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all conversations in the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListResponse
     */
	public function dialogflowProjectsLocationsConversationsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/conversations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListConversationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListConversationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists messages that belong to a given conversation. `messages` are ordered by `create_time` in descending order. To fetch updates without duplication, send request with filter `create_time_epoch_microseconds > [first item's create_time of previous request]` and empty page_token.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListResponse
     */
	public function dialogflowProjectsLocationsConversationsMessagesList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/messages', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsMessagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListMessagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListMessagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a text (chat, for example), or audio (phone recording, for example) message from a participant into the conversation. Note: Always use agent versions for production traffic sent to virtual agents. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentResponse
     */
	public function dialogflowProjectsLocationsConversationsParticipantsAnalyzeContent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{participant}:analyzeContent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2AnalyzeContentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsAnalyzeContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2AnalyzeContentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2AnalyzeContentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new participant in a conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateResponse
     */
	public function dialogflowProjectsLocationsConversationsParticipantsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/participants', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2Participant", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Participant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Participant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all participants in the specified conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListResponse
     */
	public function dialogflowProjectsLocationsConversationsParticipantsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/participants', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListParticipantsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListParticipantsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets suggested articles for a participant based on specific historical messages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesResponse
     */
	public function dialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticles(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/suggestions:suggestArticles', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2SuggestArticlesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2SuggestArticlesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2SuggestArticlesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets suggested faq answers for a participant based on specific historical messages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersResponse
     */
	public function dialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswers(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/suggestions:suggestFaqAnswers', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2SuggestFaqAnswersRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestFaqAnswersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2SuggestFaqAnswersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2SuggestFaqAnswersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets smart replies for a participant based on specific historical messages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesResponse
     */
	public function dialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartReplies(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/suggestions:suggestSmartReplies', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2SuggestSmartRepliesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsParticipantsSuggestionsSuggestSmartRepliesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2SuggestSmartRepliesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2SuggestSmartRepliesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Suggests summary for a conversation based on specific historical messages. The range of the messages to be used for summary can be specified in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummarySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummaryResponse
     */
	public function dialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummary(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummarySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{conversation}/suggestions:suggestConversationSummary', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2SuggestConversationSummaryRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummaryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsConversationsSuggestionsSuggestConversationSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2SuggestConversationSummaryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2SuggestConversationSummaryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentResponse
     */
	public function dialogflowProjectsLocationsDeleteAgent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsDeleteAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentResponse
     */
	public function dialogflowProjectsLocationsGetAgent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsGetAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Agent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Agent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a knowledge base.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/knowledgeBases', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2KnowledgeBase", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2KnowledgeBase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2KnowledgeBase', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesDocumentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/documents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2DocumentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesDocumentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports a smart messaging candidate document into the specified destination. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesDocumentsExport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:export', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ExportDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates documents by importing data from external sources. Dialogflow supports up to 350 documents in each request. If you try to import more, Dialogflow will return an error. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: ImportDocumentsResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesDocumentsImport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/documents:import', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ImportDocumentsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all documents of the knowledge base.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesDocumentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/documents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListDocumentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListDocumentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesDocumentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2DocumentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesDocumentsReload(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:reload', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2ReloadDocumentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesDocumentsReloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all knowledge bases of the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListResponse
     */
	public function dialogflowProjectsLocationsKnowledgeBasesList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/knowledgeBases', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsKnowledgeBasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2ListKnowledgeBasesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2ListKnowledgeBasesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListResponse
     */
	public function dialogflowProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudLocationListLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudLocationListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates/updates the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentResponse
     */
	public function dialogflowProjectsLocationsSetAgent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/agent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowV2Agent", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSetAgentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowV2Agent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowV2Agent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelResponse
     */
	public function dialogflowProjectsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetResponse
     */
	public function dialogflowProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListResponse
     */
	public function dialogflowProjectsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}