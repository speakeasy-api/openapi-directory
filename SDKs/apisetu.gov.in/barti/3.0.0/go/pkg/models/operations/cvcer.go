// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CvcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type CvcerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// VC No
	VCNo string `json:"VCNo"`
}

// CvcerRequestBodyFormatEnum - The format of the certificate in response.
type CvcerRequestBodyFormatEnum string

const (
	CvcerRequestBodyFormatEnumPdf CvcerRequestBodyFormatEnum = "pdf"
)

func (e *CvcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = CvcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CvcerRequestBodyFormatEnum: %s", s)
	}
}

// CvcerRequestBody - Request format
type CvcerRequestBody struct {
	CertificateParameters *CvcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format CvcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Cvcer504ApplicationJSONErrorEnum string

const (
	Cvcer504ApplicationJSONErrorEnumGatewayTimeout Cvcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Cvcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Cvcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Cvcer504ApplicationJSONErrorDescriptionEnum string

const (
	Cvcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Cvcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Cvcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Cvcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cvcer504ApplicationJSON - Gateway timeout
type Cvcer504ApplicationJSON struct {
	Error            *Cvcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvcer503ApplicationJSONErrorEnum string

const (
	Cvcer503ApplicationJSONErrorEnumServiceUnavailable Cvcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Cvcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Cvcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Cvcer503ApplicationJSONErrorDescriptionEnum string

const (
	Cvcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Cvcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Cvcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Cvcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cvcer503ApplicationJSON - Service unavailable
type Cvcer503ApplicationJSON struct {
	Error            *Cvcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvcer502ApplicationJSONErrorEnum string

const (
	Cvcer502ApplicationJSONErrorEnumBadGatewy Cvcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Cvcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Cvcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Cvcer502ApplicationJSONErrorDescriptionEnum string

const (
	Cvcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Cvcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Cvcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Cvcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cvcer502ApplicationJSON - Bad gateway
type Cvcer502ApplicationJSON struct {
	Error            *Cvcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvcer500ApplicationJSONErrorEnum string

const (
	Cvcer500ApplicationJSONErrorEnumInternalServerError Cvcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Cvcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Cvcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Cvcer500ApplicationJSONErrorDescriptionEnum string

const (
	Cvcer500ApplicationJSONErrorDescriptionEnumInternalServerError Cvcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Cvcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Cvcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cvcer500ApplicationJSON - Internal server error
type Cvcer500ApplicationJSON struct {
	Error            *Cvcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvcer404ApplicationJSONErrorEnum string

const (
	Cvcer404ApplicationJSONErrorEnumRecordNotFound Cvcer404ApplicationJSONErrorEnum = "record_not_found"
	Cvcer404ApplicationJSONErrorEnumURLNotFound    Cvcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Cvcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Cvcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Cvcer404ApplicationJSONErrorDescriptionEnum string

const (
	Cvcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Cvcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Cvcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Cvcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Cvcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Cvcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cvcer404ApplicationJSON - No record found
type Cvcer404ApplicationJSON struct {
	Error            *Cvcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvcer401ApplicationJSONErrorEnum string

const (
	Cvcer401ApplicationJSONErrorEnumInvalidAuthentication Cvcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Cvcer401ApplicationJSONErrorEnumInvalidAuthorization  Cvcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Cvcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Cvcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Cvcer401ApplicationJSONErrorDescriptionEnum string

const (
	Cvcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Cvcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Cvcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Cvcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Cvcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Cvcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cvcer401ApplicationJSON - Unauthorized access
type Cvcer401ApplicationJSON struct {
	Error            *Cvcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Cvcer400ApplicationJSONErrorEnum string

const (
	Cvcer400ApplicationJSONErrorEnumMissingParameter Cvcer400ApplicationJSONErrorEnum = "missing_parameter"
	Cvcer400ApplicationJSONErrorEnumInvalidParameter Cvcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Cvcer400ApplicationJSONErrorEnumInvalidFormat    Cvcer400ApplicationJSONErrorEnum = "invalid_format"
	Cvcer400ApplicationJSONErrorEnumInvalidTxnid     Cvcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Cvcer400ApplicationJSONErrorEnumInvalidConsentid Cvcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Cvcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Cvcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Cvcer400ApplicationJSONErrorDescriptionEnum string

const (
	Cvcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Cvcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Cvcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Cvcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Cvcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Cvcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Cvcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Cvcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Cvcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Cvcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Cvcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Cvcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Cvcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Cvcer400ApplicationJSON - Bad request
type Cvcer400ApplicationJSON struct {
	Error            *Cvcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Cvcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type CvcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Cvcer400ApplicationJSONObject *Cvcer400ApplicationJSON
	// Unauthorized access
	Cvcer401ApplicationJSONObject *Cvcer401ApplicationJSON
	// No record found
	Cvcer404ApplicationJSONObject *Cvcer404ApplicationJSON
	// Internal server error
	Cvcer500ApplicationJSONObject *Cvcer500ApplicationJSON
	// Bad gateway
	Cvcer502ApplicationJSONObject *Cvcer502ApplicationJSON
	// Service unavailable
	Cvcer503ApplicationJSONObject *Cvcer503ApplicationJSON
	// Gateway timeout
	Cvcer504ApplicationJSONObject *Cvcer504ApplicationJSON
}
