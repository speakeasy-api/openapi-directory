/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class RouteResponsePath {
    /**
     * The total ascent, in meters.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ascend")
    public Double ascend;

    public RouteResponsePath withAscend(Double ascend) {
        this.ascend = ascend;
        return this;
    }
    
    /**
     * The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bbox")
    public Double[] bbox;

    public RouteResponsePath withBbox(Double[] bbox) {
        this.bbox = bbox;
        return this;
    }
    
    /**
     * The total descent, in meters.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("descend")
    public Double descend;

    public RouteResponsePath withDescend(Double descend) {
        this.descend = descend;
        return this;
    }
    
    /**
     * Details, as requested with the `details` parameter. Consider the value `{"street_name": [[0,2,"Frankfurter Stra\u00dfe"],[2,6,"Zollweg"]]}`.
     * In this example, the route uses two streets: The first, Frankfurter Stra\u00dfe, is
     * used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.
     * See [here](https://discuss.graphhopper.com/t/2539) for discussion.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    public java.util.Map<String, Object> details;

    public RouteResponsePath withDetails(java.util.Map<String, Object> details) {
        this.details = details;
        return this;
    }
    
    /**
     * The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distance")
    public Double distance;

    public RouteResponsePath withDistance(Double distance) {
        this.distance = distance;
        return this;
    }
    
    /**
     * The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,
     * so be mindful when using them for navigation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instructions")
    public RouteResponsePathInstructions[] instructions;

    public RouteResponsePath withInstructions(RouteResponsePathInstructions[] instructions) {
        this.instructions = instructions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("points")
    public Object points;

    public RouteResponsePath withPoints(Object points) {
        this.points = points;
        return this;
    }
    
    /**
     * Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays
     * of coordinates. See the field description for more information on the two formats.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("points_encoded")
    public Boolean pointsEncoded;

    public RouteResponsePath withPointsEncoded(Boolean pointsEncoded) {
        this.pointsEncoded = pointsEncoded;
        return this;
    }
    
    /**
     * An array of indices (zero-based), specifiying the order in which the input points are visited.
     * Only present if the `optimize` parameter was used.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("points_order")
    public Long[] pointsOrder;

    public RouteResponsePath withPointsOrder(Long[] pointsOrder) {
        this.pointsOrder = pointsOrder;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapped_waypoints")
    public Object snappedWaypoints;

    public RouteResponsePath withSnappedWaypoints(Object snappedWaypoints) {
        this.snappedWaypoints = snappedWaypoints;
        return this;
    }
    
    /**
     * The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time")
    public Long time;

    public RouteResponsePath withTime(Long time) {
        this.time = time;
        return this;
    }
    
    public RouteResponsePath(){}
}
