<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class MarketplacesOrdersV3Batches 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
     * 
     * The purpose of this operation is to reduce the amount of request to the API. 
     * Max 100 items per call.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV2Response
     */
	public function changeOrderListV2(
        \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/v3/batches/changeOrders/{changeOrderType}', \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changeOrderListRequestV2", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV2Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchOrderOperationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchOrderOperationResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
     * 
     * The purpose of this operation is to reduce the amount of request to the API. 
     * Max 100 items per call.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV3Response
     */
	public function changeOrderListV3(
        \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/v3/batches/changeOrders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "changeOrderListRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV3Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangeOrderListV3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchOrderOperationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchOrderOperationResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a batch of operations to clear an Order's merchant information (max 100 items per call)
     * 
     * The purpose of this operation is to reduce the amount of request to the API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ClearMerchantOrderInfoListV3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ClearMerchantOrderInfoListV3Response
     */
	public function clearMerchantOrderInfoListV3(
        \OpenAPI\OpenAPI\Models\Operations\ClearMerchantOrderInfoListV3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ClearMerchantOrderInfoListV3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/v3/batches/clearMerchantOrderInfos');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clearMerchantOrderInfoListRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ClearMerchantOrderInfoListV3Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ClearMerchantOrderInfoListV3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchOrderOperationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchOrderOperationResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a batch of operations to set an Order's merchant information  (max 100 items per call)
     * 
     * The purpose of this operation is to reduce the amount of request to the API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetMerchantOrderInfoListV3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetMerchantOrderInfoListV3Response
     */
	public function setMerchantOrderInfoListV3(
        \OpenAPI\OpenAPI\Models\Operations\SetMerchantOrderInfoListV3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetMerchantOrderInfoListV3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/v3/batches/setMerchantOrderInfos');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMerchantOrderInfoListRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SetMerchantOrderInfoListV3Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetMerchantOrderInfoListV3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchOrderOperationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchOrderOperationResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseMessage', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}