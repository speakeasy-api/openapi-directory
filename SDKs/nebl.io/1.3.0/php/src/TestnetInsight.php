<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TestnetInsight 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns address object
     * 
     * Returns NEBL address object containing information on a specific address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressResponse
     */
	public function testnetGetAddress(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/addr/{address}', \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetAddressResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns address balance in sats
     * 
     * Returns NEBL address balance in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressBalanceResponse
     */
	public function testnetGetAddressBalance(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/addr/{address}/balance', \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressBalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressBalanceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns total received by address in sats
     * 
     * Returns total NEBL received by address in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalReceivedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalReceivedResponse
     */
	public function testnetGetAddressTotalReceived(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalReceivedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalReceivedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/addr/{address}/totalReceived', \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalReceivedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalReceivedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressTotalReceivedResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns total sent by address in sats
     * 
     * Returns total NEBL sent by address in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalSentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalSentResponse
     */
	public function testnetGetAddressTotalSent(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalSentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalSentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/addr/{address}/totalSent', \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalSentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressTotalSentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressTotalSentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns address unconfirmed balance in sats
     * 
     * Returns NEBL address unconfirmed balance in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUnconfirmedBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUnconfirmedBalanceResponse
     */
	public function testnetGetAddressUnconfirmedBalance(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUnconfirmedBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUnconfirmedBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/addr/{address}/unconfirmedBalance', \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUnconfirmedBalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUnconfirmedBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressUnconfirmedBalanceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all UTXOs at a given address
     * 
     * Returns information on each Unspent Transaction Output contained at an address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUtxosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUtxosResponse
     */
	public function testnetGetAddressUtxos(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUtxosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUtxosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/addr/{address}/utxo', \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUtxosRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetAddressUtxosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressUtxosResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GetAddressUtxosResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information regarding a Neblio block
     * 
     * Returns blockchain data for a given block based upon the block hash
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockResponse
     */
	public function testnetGetBlock(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/block/{blockhash}', \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlockResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetBlockResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns block hash of block
     * 
     * Returns the block hash of a block at a given block index
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockIndexRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockIndexResponse
     */
	public function testnetGetBlockIndex(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockIndexRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/block-index/{blockindex}', \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetBlockIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlockIndexResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetBlockIndexResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns raw transaction hex
     * 
     * Returns raw transaction hex representing a NEBL transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetRawTxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetRawTxResponse
     */
	public function testnetGetRawTx(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetRawTxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetRawTxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/rawtx/{txid}', \OpenAPI\OpenAPI\Models\Operations\TestnetGetRawTxRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetRawTxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRawTxResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetRawTxResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Utility API for calling several blockchain node functions
     * 
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetStatusResponse
     */
	public function testnetGetStatus(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/status');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TestnetGetStatusRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get node sync status
     * 
     * Returns information on the node's sync progress
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetSyncResponse
     */
	public function testnetGetSync(
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/sync');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSyncResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetSyncResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns transaction object
     * 
     * Returns NEBL transaction object representing a NEBL transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxResponse
     */
	public function testnetGetTx(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/tx/{txid}', \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTxResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTxResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get transactions by block or address
     * 
     * Returns all transactions by block or address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxsResponse
     */
	public function testnetGetTxs(
        \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/txs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TestnetGetTxsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetGetTxsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTxsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTxsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * 
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SendTxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TestnetSendTxResponse
     */
	public function testnetSendTx(
        \OpenAPI\OpenAPI\Models\Shared\SendTxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TestnetSendTxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/testnet/ins/tx/send');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TestnetSendTxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->broadcastTxResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BroadcastTxResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}