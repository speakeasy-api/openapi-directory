/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class V3PatternDeparture {
    /**
     * Indicates if the metropolitan train service is at the platform at the time of query; returns false for other modes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("at_platform")
    public Boolean atPlatform;

    public V3PatternDeparture withAtPlatform(Boolean atPlatform) {
        this.atPlatform = atPlatform;
        return this;
    }
    
    /**
     * Chronological sequence for the departures in a run. Order ascendingly by this field to get chronological order (earliest first) of departures with the same run_ref. NOTE, this field is not always N+1 or N-1 of the previous or following departure. e.g 100, 200, 250, 300 instead of 1, 2, 3, 4
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departure_sequence")
    public Integer departureSequence;

    public V3PatternDeparture withDepartureSequence(Integer departureSequence) {
        this.departureSequence = departureSequence;
        return this;
    }
    
    /**
     * Direction of travel identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("direction_id")
    public Integer directionId;

    public V3PatternDeparture withDirectionId(Integer directionId) {
        this.directionId = directionId;
        return this;
    }
    
    /**
     * Disruption information identifier(s)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disruption_ids")
    public Long[] disruptionIds;

    public V3PatternDeparture withDisruptionIds(Long[] disruptionIds) {
        this.disruptionIds = disruptionIds;
        return this;
    }
    
    /**
     * Real-time estimate of departure time and date in ISO 8601 UTC format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("estimated_departure_utc")
    public OffsetDateTime estimatedDepartureUtc;

    public V3PatternDeparture withEstimatedDepartureUtc(OffsetDateTime estimatedDepartureUtc) {
        this.estimatedDepartureUtc = estimatedDepartureUtc;
        return this;
    }
    
    /**
     * Flag indicating special condition for run (e.g. RR Reservations Required, GC Guaranteed Connection, DOO Drop Off Only, PUO Pick Up Only, MO Mondays only, TU Tuesdays only, WE Wednesdays only, TH Thursdays only, FR Fridays only, SS School days only; ignore E flag)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flags")
    public String flags;

    public V3PatternDeparture withFlags(String flags) {
        this.flags = flags;
        return this;
    }
    
    /**
     * Platform number at stop (metropolitan train only; returns null for other modes)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform_number")
    public String platformNumber;

    public V3PatternDeparture withPlatformNumber(String platformNumber) {
        this.platformNumber = platformNumber;
        return this;
    }
    
    /**
     * Route identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("route_id")
    public Integer routeId;

    public V3PatternDeparture withRouteId(Integer routeId) {
        this.routeId = routeId;
        return this;
    }
    
    /**
     * Numeric trip/service run identifier. Defaults to -1 when run identifier is Alphanumeric
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_id")
    public Integer runId;

    public V3PatternDeparture withRunId(Integer runId) {
        this.runId = runId;
        return this;
    }
    
    /**
     * Alphanumeric trip/service run identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_ref")
    public String runRef;

    public V3PatternDeparture withRunRef(String runRef) {
        this.runRef = runRef;
        return this;
    }
    
    /**
     * Scheduled (i.e. timetabled) departure time and date in ISO 8601 UTC format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("scheduled_departure_utc")
    public OffsetDateTime scheduledDepartureUtc;

    public V3PatternDeparture withScheduledDepartureUtc(OffsetDateTime scheduledDepartureUtc) {
        this.scheduledDepartureUtc = scheduledDepartureUtc;
        return this;
    }
    
    /**
     * The stops to be skipped following the current departure in order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipped_stops")
    public V3StopModel[] skippedStops;

    public V3PatternDeparture withSkippedStops(V3StopModel[] skippedStops) {
        this.skippedStops = skippedStops;
        return this;
    }
    
    /**
     * Stop identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stop_id")
    public Integer stopId;

    public V3PatternDeparture withStopId(Integer stopId) {
        this.stopId = stopId;
        return this;
    }
    
    public V3PatternDeparture(){}
}
