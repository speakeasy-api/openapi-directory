/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ActionParameter } from "./actionparameter";
import { ActionTarget } from "./actiontarget";
import { Expose, Transform } from "class-transformer";

/**
 * Describes an action. For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html">FIS actions</a> in the <i>Fault Injection Simulator User Guide</i>.
 */
export class Action extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata({ elemType: ActionParameter })
  @Expose({ name: "parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ActionParameter> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ActionParameter);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, ActionParameter>;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: ActionTarget })
  @Expose({ name: "targets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ActionTarget> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ActionTarget);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  targets?: Record<string, ActionTarget>;
}
