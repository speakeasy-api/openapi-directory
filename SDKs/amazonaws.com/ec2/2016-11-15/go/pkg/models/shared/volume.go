// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// VolumeAttachmentsStateEnum - The attachment state of the volume.
type VolumeAttachmentsStateEnum string

const (
	VolumeAttachmentsStateEnumAttaching VolumeAttachmentsStateEnum = "attaching"
	VolumeAttachmentsStateEnumAttached  VolumeAttachmentsStateEnum = "attached"
	VolumeAttachmentsStateEnumDetaching VolumeAttachmentsStateEnum = "detaching"
	VolumeAttachmentsStateEnumDetached  VolumeAttachmentsStateEnum = "detached"
	VolumeAttachmentsStateEnumBusy      VolumeAttachmentsStateEnum = "busy"
)

func (e VolumeAttachmentsStateEnum) ToPointer() *VolumeAttachmentsStateEnum {
	return &e
}

func (e *VolumeAttachmentsStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "attaching":
		fallthrough
	case "attached":
		fallthrough
	case "detaching":
		fallthrough
	case "detached":
		fallthrough
	case "busy":
		*e = VolumeAttachmentsStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VolumeAttachmentsStateEnum: %v", v)
	}
}

// VolumeAttachments - Describes volume attachment details.
type VolumeAttachments struct {
	AttachTime          *time.Time
	DeleteOnTermination *bool
	Device              *string
	InstanceID          *string
	State               *VolumeAttachmentsStateEnum
	VolumeID            *string
}

// VolumeStateEnum - The volume state.
type VolumeStateEnum string

const (
	VolumeStateEnumCreating  VolumeStateEnum = "creating"
	VolumeStateEnumAvailable VolumeStateEnum = "available"
	VolumeStateEnumInUse     VolumeStateEnum = "in-use"
	VolumeStateEnumDeleting  VolumeStateEnum = "deleting"
	VolumeStateEnumDeleted   VolumeStateEnum = "deleted"
	VolumeStateEnumError     VolumeStateEnum = "error"
)

func (e VolumeStateEnum) ToPointer() *VolumeStateEnum {
	return &e
}

func (e *VolumeStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "creating":
		fallthrough
	case "available":
		fallthrough
	case "in-use":
		fallthrough
	case "deleting":
		fallthrough
	case "deleted":
		fallthrough
	case "error":
		*e = VolumeStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VolumeStateEnum: %v", v)
	}
}

// VolumeTags - Describes a tag.
type VolumeTags struct {
	Key   *string
	Value *string
}

// VolumeVolumeTypeEnum - The volume type.
type VolumeVolumeTypeEnum string

const (
	VolumeVolumeTypeEnumStandard VolumeVolumeTypeEnum = "standard"
	VolumeVolumeTypeEnumIo1      VolumeVolumeTypeEnum = "io1"
	VolumeVolumeTypeEnumIo2      VolumeVolumeTypeEnum = "io2"
	VolumeVolumeTypeEnumGp2      VolumeVolumeTypeEnum = "gp2"
	VolumeVolumeTypeEnumSc1      VolumeVolumeTypeEnum = "sc1"
	VolumeVolumeTypeEnumSt1      VolumeVolumeTypeEnum = "st1"
	VolumeVolumeTypeEnumGp3      VolumeVolumeTypeEnum = "gp3"
)

func (e VolumeVolumeTypeEnum) ToPointer() *VolumeVolumeTypeEnum {
	return &e
}

func (e *VolumeVolumeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "io1":
		fallthrough
	case "io2":
		fallthrough
	case "gp2":
		fallthrough
	case "sc1":
		fallthrough
	case "st1":
		fallthrough
	case "gp3":
		*e = VolumeVolumeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VolumeVolumeTypeEnum: %v", v)
	}
}

// Volume - Describes a volume.
type Volume struct {
	Attachments        []VolumeAttachments
	AvailabilityZone   *string
	CreateTime         *time.Time
	Encrypted          *bool
	FastRestored       *bool
	Iops               *int64
	KmsKeyID           *string
	MultiAttachEnabled *bool
	OutpostArn         *string
	Size               *int64
	SnapshotID         *string
	State              *VolumeStateEnum
	Tags               []VolumeTags
	Throughput         *int64
	VolumeID           *string
	VolumeType         *VolumeVolumeTypeEnum
}
