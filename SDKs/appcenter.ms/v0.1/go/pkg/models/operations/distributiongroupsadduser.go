// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DistributionGroupsAddUserSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// DistributionGroupsAddUserRequestBody - The list of members to add
type DistributionGroupsAddUserRequestBody struct {
	// The list of emails of the users
	UserEmails []string `json:"user_emails,omitempty"`
}

type DistributionGroupsAddUserRequest struct {
	// The list of members to add
	RequestBody DistributionGroupsAddUserRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the distribution group
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type DistributionGroupsAddUserDefaultApplicationJSONError struct {
	Code    DistributionGroupsAddUserDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                       `json:"message"`
}

// DistributionGroupsAddUserDefaultApplicationJSON - Error
type DistributionGroupsAddUserDefaultApplicationJSON struct {
	Error DistributionGroupsAddUserDefaultApplicationJSONError `json:"error"`
}

type DistributionGroupsAddUser200ApplicationJSON struct {
	// The code of the result
	Code *string `json:"code,omitempty"`
	// Whether the has accepted the invite. Available when an invite is pending, and the value will be "true".
	InvitePending *bool `json:"invite_pending,omitempty"`
	// The message of the result
	Message *string `json:"message,omitempty"`
	// The status code of the result
	Status int64 `json:"status"`
	// The email of the user
	UserEmail *string `json:"user_email,omitempty"`
}

type DistributionGroupsAddUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsAddUser200ApplicationJSONObjects []DistributionGroupsAddUser200ApplicationJSON
	// Error
	DistributionGroupsAddUserDefaultApplicationJSONObject *DistributionGroupsAddUserDefaultApplicationJSON
}
