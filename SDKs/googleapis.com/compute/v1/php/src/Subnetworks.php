<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Subnetworks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of subnetworks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListResponse
     */
	public function computeSubnetworksAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/subnetworks', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subnetworkAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubnetworkAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified subnetwork.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteResponse
     */
	public function computeSubnetworksDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{subnetwork}', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Expands the IP CIDR range of the subnetwork to a specified value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeResponse
     */
	public function computeSubnetworksExpandIpCidrRange(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subnetworksExpandIpCidrRangeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksExpandIpCidrRangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified subnetwork.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetResponse
     */
	public function computeSubnetworksGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{subnetwork}', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subnetwork = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Subnetwork', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. May be empty if no such policy or resource exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicyResponse
     */
	public function computeSubnetworksGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a subnetwork in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertResponse
     */
	public function computeSubnetworksInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subnetwork", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of subnetworks available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListResponse
     */
	public function computeSubnetworksList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subnetworkList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SubnetworkList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an aggregated list of all usable subnetworks in the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableResponse
     */
	public function computeSubnetworksListUsable(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/subnetworks/listUsable', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksListUsableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->usableSubnetworksAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UsableSubnetworksAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchResponse
     */
	public function computeSubnetworksPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{subnetwork}', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subnetwork1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicyResponse
     */
	public function computeSubnetworksSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionSetPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessResponse
     */
	public function computeSubnetworksSetPrivateIpGoogleAccess(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "subnetworksSetPrivateIpGoogleAccessRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksSetPrivateIpGoogleAccessResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsResponse
     */
	public function computeSubnetworksTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSubnetworksTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}