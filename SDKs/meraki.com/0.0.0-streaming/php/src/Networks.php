<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Networks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bind a network to a template.
     * 
     * Bind a network to a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BindNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BindNetworkResponse
     */
	public function bindNetwork(
        \OpenAPI\OpenAPI\Models\Operations\BindNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BindNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/bind', \OpenAPI\OpenAPI\Models\Operations\BindNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BindNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Combine multiple networks into a single network
     * 
     * Combine multiple networks into a single network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse
     */
	public function combineOrganizationNetworks(
        \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks/combine', \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CombineOrganizationNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->combineOrganizationNetworks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a network
     * 
     * Create a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse
     */
	public function createOrganizationNetwork(
        \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks', \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateOrganizationNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createOrganizationNetwork201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a network
     * 
     * Delete a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkResponse
     */
	public function deleteNetwork(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return a network
     * 
     * Return a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkResponse
     */
	public function getNetwork(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Air Marshal scan results from a network
     * 
     * List Air Marshal scan results from a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkAirMarshalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkAirMarshalResponse
     */
	public function getNetworkAirMarshal(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkAirMarshalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkAirMarshalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/airMarshal', \OpenAPI\OpenAPI\Models\Operations\GetNetworkAirMarshalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkAirMarshalRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkAirMarshalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkAirMarshal200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the site-to-site VPN settings of a network
     * 
     * Return the site-to-site VPN settings of a network. Only valid for MX networks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSiteToSiteVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSiteToSiteVpnResponse
     */
	public function getNetworkSiteToSiteVpn(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSiteToSiteVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSiteToSiteVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/siteToSiteVpn', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSiteToSiteVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSiteToSiteVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSiteToSiteVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the traffic analysis data for this network
     * 
     * Return the traffic analysis data for this network. Traffic analysis with hostname visibility must be enabled on the network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficResponse
     */
	public function getNetworkTraffic(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/traffic', \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkTrafficResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkTraffic200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the networks in an organization
     * 
     * List the networks in an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse
     */
	public function getOrganizationNetworks(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/networks', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationNetworksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationNetworks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Split a combined network into individual networks for each type of device
     * 
     * Split a combined network into individual networks for each type of device
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SplitNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SplitNetworkResponse
     */
	public function splitNetwork(
        \OpenAPI\OpenAPI\Models\Operations\SplitNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SplitNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/split', \OpenAPI\OpenAPI\Models\Operations\SplitNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SplitNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->splitNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unbind a network from a template.
     * 
     * Unbind a network from a template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkResponse
     */
	public function unbindNetwork(
        \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/unbind', \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnbindNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Update a network
     * 
     * Update a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkResponse
     */
	public function updateNetwork(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetwork200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the site-to-site VPN settings of a network
     * 
     * Update the site-to-site VPN settings of a network. Only valid for MX networks in NAT mode.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSiteToSiteVpnRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSiteToSiteVpnResponse
     */
	public function updateNetworkSiteToSiteVpn(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSiteToSiteVpnRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSiteToSiteVpnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/siteToSiteVpn', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSiteToSiteVpnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSiteToSiteVpnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSiteToSiteVpn200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}