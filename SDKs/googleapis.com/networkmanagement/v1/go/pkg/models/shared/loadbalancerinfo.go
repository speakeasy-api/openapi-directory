// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LoadBalancerInfoBackendTypeEnum - Type of load balancer's backend configuration.
type LoadBalancerInfoBackendTypeEnum string

const (
	LoadBalancerInfoBackendTypeEnumBackendTypeUnspecified LoadBalancerInfoBackendTypeEnum = "BACKEND_TYPE_UNSPECIFIED"
	LoadBalancerInfoBackendTypeEnumBackendService         LoadBalancerInfoBackendTypeEnum = "BACKEND_SERVICE"
	LoadBalancerInfoBackendTypeEnumTargetPool             LoadBalancerInfoBackendTypeEnum = "TARGET_POOL"
	LoadBalancerInfoBackendTypeEnumTargetInstance         LoadBalancerInfoBackendTypeEnum = "TARGET_INSTANCE"
)

func (e LoadBalancerInfoBackendTypeEnum) ToPointer() *LoadBalancerInfoBackendTypeEnum {
	return &e
}

func (e *LoadBalancerInfoBackendTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BACKEND_TYPE_UNSPECIFIED":
		fallthrough
	case "BACKEND_SERVICE":
		fallthrough
	case "TARGET_POOL":
		fallthrough
	case "TARGET_INSTANCE":
		*e = LoadBalancerInfoBackendTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoadBalancerInfoBackendTypeEnum: %v", v)
	}
}

// LoadBalancerInfoLoadBalancerTypeEnum - Type of the load balancer.
type LoadBalancerInfoLoadBalancerTypeEnum string

const (
	LoadBalancerInfoLoadBalancerTypeEnumLoadBalancerTypeUnspecified LoadBalancerInfoLoadBalancerTypeEnum = "LOAD_BALANCER_TYPE_UNSPECIFIED"
	LoadBalancerInfoLoadBalancerTypeEnumInternalTCPUDP              LoadBalancerInfoLoadBalancerTypeEnum = "INTERNAL_TCP_UDP"
	LoadBalancerInfoLoadBalancerTypeEnumNetworkTCPUDP               LoadBalancerInfoLoadBalancerTypeEnum = "NETWORK_TCP_UDP"
	LoadBalancerInfoLoadBalancerTypeEnumHTTPProxy                   LoadBalancerInfoLoadBalancerTypeEnum = "HTTP_PROXY"
	LoadBalancerInfoLoadBalancerTypeEnumTCPProxy                    LoadBalancerInfoLoadBalancerTypeEnum = "TCP_PROXY"
	LoadBalancerInfoLoadBalancerTypeEnumSslProxy                    LoadBalancerInfoLoadBalancerTypeEnum = "SSL_PROXY"
)

func (e LoadBalancerInfoLoadBalancerTypeEnum) ToPointer() *LoadBalancerInfoLoadBalancerTypeEnum {
	return &e
}

func (e *LoadBalancerInfoLoadBalancerTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOAD_BALANCER_TYPE_UNSPECIFIED":
		fallthrough
	case "INTERNAL_TCP_UDP":
		fallthrough
	case "NETWORK_TCP_UDP":
		fallthrough
	case "HTTP_PROXY":
		fallthrough
	case "TCP_PROXY":
		fallthrough
	case "SSL_PROXY":
		*e = LoadBalancerInfoLoadBalancerTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LoadBalancerInfoLoadBalancerTypeEnum: %v", v)
	}
}

// LoadBalancerInfo - For display only. Metadata associated with a load balancer.
type LoadBalancerInfo struct {
	// Type of load balancer's backend configuration.
	BackendType *LoadBalancerInfoBackendTypeEnum `json:"backendType,omitempty"`
	// Backend configuration URI.
	BackendURI *string `json:"backendUri,omitempty"`
	// Information for the loadbalancer backends.
	Backends []LoadBalancerBackend `json:"backends,omitempty"`
	// URI of the health check for the load balancer.
	HealthCheckURI *string `json:"healthCheckUri,omitempty"`
	// Type of the load balancer.
	LoadBalancerType *LoadBalancerInfoLoadBalancerTypeEnum `json:"loadBalancerType,omitempty"`
}
