/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The attribute by which to filter the results.
 */
export enum GetLikesAlt1FilterEnum {
  Embeddable = "embeddable",
}

/**
 * The way to sort the results.
 */
export enum GetLikesAlt1SortEnum {
  Alphabetical = "alphabetical",
  Comments = "comments",
  Date = "date",
  Duration = "duration",
  Likes = "likes",
  Plays = "plays",
}

export class GetLikesAlt1Request extends SpeakeasyBase {
  /**
   * The attribute by which to filter the results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: GetLikesAlt1FilterEnum;

  /**
   * Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_embeddable",
  })
  filterEmbeddable?: boolean;

  /**
   * The page number of the results to show.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of items to show on each page of results, up to a maximum of 100.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The search query to use to filter the results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * The way to sort the results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetLikesAlt1SortEnum;
}

export class GetLikesAlt1Response extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The videos were returned.
   */
  @SpeakeasyMetadata({ elemType: shared.Video })
  videos?: shared.Video[];
}
