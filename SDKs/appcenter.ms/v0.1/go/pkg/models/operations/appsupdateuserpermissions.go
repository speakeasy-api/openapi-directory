// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppsUpdateUserPermissionsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppsUpdateUserPermissionsRequestBodyPermissionsEnum string

const (
	AppsUpdateUserPermissionsRequestBodyPermissionsEnumManager   AppsUpdateUserPermissionsRequestBodyPermissionsEnum = "manager"
	AppsUpdateUserPermissionsRequestBodyPermissionsEnumDeveloper AppsUpdateUserPermissionsRequestBodyPermissionsEnum = "developer"
	AppsUpdateUserPermissionsRequestBodyPermissionsEnumViewer    AppsUpdateUserPermissionsRequestBodyPermissionsEnum = "viewer"
)

func (e AppsUpdateUserPermissionsRequestBodyPermissionsEnum) ToPointer() *AppsUpdateUserPermissionsRequestBodyPermissionsEnum {
	return &e
}

func (e *AppsUpdateUserPermissionsRequestBodyPermissionsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		*e = AppsUpdateUserPermissionsRequestBodyPermissionsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsUpdateUserPermissionsRequestBodyPermissionsEnum: %v", v)
	}
}

// AppsUpdateUserPermissionsRequestBody - The value to update the user permission for the app.
type AppsUpdateUserPermissionsRequestBody struct {
	// The permissions the user has for the app
	Permissions []AppsUpdateUserPermissionsRequestBodyPermissionsEnum `json:"permissions"`
}

type AppsUpdateUserPermissionsRequest struct {
	// The value to update the user permission for the app.
	RequestBody AppsUpdateUserPermissionsRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The user email of the user to patch
	UserEmail string `pathParam:"style=simple,explode=false,name=user_email"`
}

type AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum string

const (
	AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnumBadRequest          AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnumConflict            AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnumNotFound            AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnumInternalServerError AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnumUnauthorized        AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AppsUpdateUserPermissionsDefaultApplicationJSONError struct {
	Code    AppsUpdateUserPermissionsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                       `json:"message"`
}

// AppsUpdateUserPermissionsDefaultApplicationJSON - BadRequest
type AppsUpdateUserPermissionsDefaultApplicationJSON struct {
	Error AppsUpdateUserPermissionsDefaultApplicationJSONError `json:"error"`
}

type AppsUpdateUserPermissionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// BadRequest
	AppsUpdateUserPermissionsDefaultApplicationJSONObject *AppsUpdateUserPermissionsDefaultApplicationJSON
}
