// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// GetDeploymentResponseDeploymentStatusEnum - The status of the deployment: PENDING, FAILED, or SUCCEEDED.
type GetDeploymentResponseDeploymentStatusEnum string

const (
	GetDeploymentResponseDeploymentStatusEnumPending  GetDeploymentResponseDeploymentStatusEnum = "PENDING"
	GetDeploymentResponseDeploymentStatusEnumFailed   GetDeploymentResponseDeploymentStatusEnum = "FAILED"
	GetDeploymentResponseDeploymentStatusEnumDeployed GetDeploymentResponseDeploymentStatusEnum = "DEPLOYED"
)

func (e GetDeploymentResponseDeploymentStatusEnum) ToPointer() *GetDeploymentResponseDeploymentStatusEnum {
	return &e
}

func (e *GetDeploymentResponseDeploymentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "FAILED":
		fallthrough
	case "DEPLOYED":
		*e = GetDeploymentResponseDeploymentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentResponseDeploymentStatusEnum: %v", v)
	}
}

// GetDeploymentResponse - Success
type GetDeploymentResponse struct {
	AutoDeployed            *bool                                      `json:"AutoDeployed,omitempty"`
	CreatedDate             *time.Time                                 `json:"CreatedDate,omitempty"`
	DeploymentID            *string                                    `json:"DeploymentId,omitempty"`
	DeploymentStatus        *GetDeploymentResponseDeploymentStatusEnum `json:"DeploymentStatus,omitempty"`
	DeploymentStatusMessage *string                                    `json:"DeploymentStatusMessage,omitempty"`
	Description             *string                                    `json:"Description,omitempty"`
}
