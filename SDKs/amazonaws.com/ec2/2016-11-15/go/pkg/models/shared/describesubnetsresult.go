// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum - The state of a CIDR block.
type DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum string

const (
	DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociating    DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associating"
	DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociated     DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associated"
	DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociating DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociating"
	DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociated  DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociated"
	DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailing        DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failing"
	DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailed         DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failed"
)

func (e DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) ToPointer() *DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum {
	return &e
}

func (e *DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum: %v", v)
	}
}

// DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState - The state of the CIDR block.
type DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState struct {
	State         *DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum
	StatusMessage *string
}

// DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet - Describes an association between a subnet and an IPv6 CIDR block.
type DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet struct {
	AssociationID      *string
	Ipv6CidrBlock      *string
	Ipv6CidrBlockState *DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSetIpv6CidrBlockState
}

// DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum - The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
type DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum string

const (
	DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnumIPName       DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum = "ip-name"
	DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnumResourceName DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum = "resource-name"
)

func (e DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum) ToPointer() *DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum {
	return &e
}

func (e *DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip-name":
		fallthrough
	case "resource-name":
		*e = DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum: %v", v)
	}
}

// DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunch - The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
type DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunch struct {
	EnableResourceNameDNSAAAARecord *bool
	EnableResourceNameDNSARecord    *bool
	HostnameType                    *DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunchHostnameTypeEnum
}

// DescribeSubnetsResultSubnetsStateEnum - The current state of the subnet.
type DescribeSubnetsResultSubnetsStateEnum string

const (
	DescribeSubnetsResultSubnetsStateEnumPending   DescribeSubnetsResultSubnetsStateEnum = "pending"
	DescribeSubnetsResultSubnetsStateEnumAvailable DescribeSubnetsResultSubnetsStateEnum = "available"
)

func (e DescribeSubnetsResultSubnetsStateEnum) ToPointer() *DescribeSubnetsResultSubnetsStateEnum {
	return &e
}

func (e *DescribeSubnetsResultSubnetsStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "available":
		*e = DescribeSubnetsResultSubnetsStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeSubnetsResultSubnetsStateEnum: %v", v)
	}
}

// DescribeSubnetsResultSubnetsTags - Describes a tag.
type DescribeSubnetsResultSubnetsTags struct {
	Key   *string
	Value *string
}

// DescribeSubnetsResultSubnets - Describes a subnet.
type DescribeSubnetsResultSubnets struct {
	AssignIpv6AddressOnCreation   *bool
	AvailabilityZone              *string
	AvailabilityZoneID            *string
	AvailableIPAddressCount       *int64
	CidrBlock                     *string
	CustomerOwnedIpv4Pool         *string
	DefaultForAz                  *bool
	EnableDns64                   *bool
	EnableLniAtDeviceIndex        *int64
	Ipv6CidrBlockAssociationSet   []DescribeSubnetsResultSubnetsIpv6CidrBlockAssociationSet
	Ipv6Native                    *bool
	MapCustomerOwnedIPOnLaunch    *bool
	MapPublicIPOnLaunch           *bool
	OutpostArn                    *string
	OwnerID                       *string
	PrivateDNSNameOptionsOnLaunch *DescribeSubnetsResultSubnetsPrivateDNSNameOptionsOnLaunch
	State                         *DescribeSubnetsResultSubnetsStateEnum
	SubnetArn                     *string
	SubnetID                      *string
	Tags                          []DescribeSubnetsResultSubnetsTags
	VpcID                         *string
}

// DescribeSubnetsResult - Success
type DescribeSubnetsResult struct {
	NextToken *string
	Subnets   []DescribeSubnetsResultSubnets
}
