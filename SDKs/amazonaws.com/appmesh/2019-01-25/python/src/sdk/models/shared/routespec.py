"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import grpcroute as shared_grpcroute
from ..shared import httproute as shared_httproute
from ..shared import tcproute as shared_tcproute
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RouteSpec:
    r"""An object that represents a route specification. Specify one route type."""
    
    grpc_route: Optional[shared_grpcroute.GrpcRoute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grpcRoute'), 'exclude': lambda f: f is None }})  
    http2_route: Optional[shared_httproute.HTTPRoute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http2Route'), 'exclude': lambda f: f is None }})  
    http_route: Optional[shared_httproute.HTTPRoute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpRoute'), 'exclude': lambda f: f is None }})  
    priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})  
    tcp_route: Optional[shared_tcproute.TCPRoute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tcpRoute'), 'exclude': lambda f: f is None }})  
    