/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DestinationFieldProperties } from "./destinationfieldproperties";
import { SourceFieldProperties } from "./sourcefieldproperties";
import { SupportedFieldTypeDetails } from "./supportedfieldtypedetails";
import { Expose, Type } from "class-transformer";

/**
 *  Describes the data model of a connector field. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on.
 */
export class ConnectorEntityField extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "customProperties" })
  customProperties?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "defaultValue" })
  defaultValue?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "destinationProperties" })
  @Type(() => DestinationFieldProperties)
  destinationProperties?: DestinationFieldProperties;

  @SpeakeasyMetadata()
  @Expose({ name: "identifier" })
  identifier: string;

  @SpeakeasyMetadata()
  @Expose({ name: "isDeprecated" })
  isDeprecated?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "isPrimaryKey" })
  isPrimaryKey?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "parentIdentifier" })
  parentIdentifier?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceProperties" })
  @Type(() => SourceFieldProperties)
  sourceProperties?: SourceFieldProperties;

  @SpeakeasyMetadata()
  @Expose({ name: "supportedFieldTypeDetails" })
  @Type(() => SupportedFieldTypeDetails)
  supportedFieldTypeDetails?: SupportedFieldTypeDetails;
}
