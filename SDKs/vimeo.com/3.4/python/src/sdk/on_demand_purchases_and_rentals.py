"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class OnDemandPurchasesAndRentals:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def check_if_vod_was_purchased(self, request: operations.CheckIfVodWasPurchasedRequest, security: operations.CheckIfVodWasPurchasedSecurity) -> operations.CheckIfVodWasPurchasedResponse:
        r"""Check if a user has made a purchase or rental from an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfVodWasPurchasedRequest, base_url, '/users/{user_id}/ondemand/purchases', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfVodWasPurchasedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandPage])
                res.on_demand_page = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def check_if_vod_was_purchased_alt1(self, request: operations.CheckIfVodWasPurchasedAlt1Request, security: operations.CheckIfVodWasPurchasedAlt1Security) -> operations.CheckIfVodWasPurchasedAlt1Response:
        r"""Check if a user has made a purchase or rental from an On Demand page"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckIfVodWasPurchasedAlt1Request, base_url, '/me/ondemand/purchases/{ondemand_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckIfVodWasPurchasedAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnDemandPage])
                res.on_demand_page = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_vod_purchases(self, request: operations.GetVodPurchasesRequest, security: operations.GetVodPurchasesSecurity) -> operations.GetVodPurchasesResponse:
        r"""Get all the On Demand purchases and rentals that a user has made"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/ondemand/purchases'
        
        query_params = utils.get_query_params(operations.GetVodPurchasesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetVodPurchasesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnDemandPage]])
                res.on_demand_pages = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.ondemand.page+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    