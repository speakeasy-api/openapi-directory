"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import advertiseradserverconfig as shared_advertiseradserverconfig
from ..shared import advertiserbillingconfig as shared_advertiserbillingconfig
from ..shared import advertisercreativeconfig as shared_advertisercreativeconfig
from ..shared import advertiserdataaccessconfig as shared_advertiserdataaccessconfig
from ..shared import advertisergeneralconfig as shared_advertisergeneralconfig
from ..shared import advertisertargetingconfig as shared_advertisertargetingconfig
from ..shared import integrationdetails as shared_integrationdetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AdvertiserEntityStatusEnum(str, Enum):
    r"""Required. Controls whether or not insertion orders and line items of the advertiser can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_PAUSED` and `ENTITY_STATUS_SCHEDULED_FOR_DELETION`. * If set to `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30 days from when it was first scheduled for deletion."""
    ENTITY_STATUS_UNSPECIFIED = 'ENTITY_STATUS_UNSPECIFIED'
    ENTITY_STATUS_ACTIVE = 'ENTITY_STATUS_ACTIVE'
    ENTITY_STATUS_ARCHIVED = 'ENTITY_STATUS_ARCHIVED'
    ENTITY_STATUS_DRAFT = 'ENTITY_STATUS_DRAFT'
    ENTITY_STATUS_PAUSED = 'ENTITY_STATUS_PAUSED'
    ENTITY_STATUS_SCHEDULED_FOR_DELETION = 'ENTITY_STATUS_SCHEDULED_FOR_DELETION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdvertiserInput:
    r"""A single advertiser in Display & Video 360 (DV360)."""
    
    ad_server_config: Optional[shared_advertiseradserverconfig.AdvertiserAdServerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adServerConfig'), 'exclude': lambda f: f is None }})
    r"""Ad server related settings of an advertiser."""  
    billing_config: Optional[shared_advertiserbillingconfig.AdvertiserBillingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingConfig'), 'exclude': lambda f: f is None }})
    r"""Billing related settings of an advertiser."""  
    creative_config: Optional[shared_advertisercreativeconfig.AdvertiserCreativeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeConfig'), 'exclude': lambda f: f is None }})
    r"""Creatives related settings of an advertiser."""  
    data_access_config: Optional[shared_advertiserdataaccessconfig.AdvertiserDataAccessConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataAccessConfig'), 'exclude': lambda f: f is None }})
    r"""Settings that control how advertiser related data may be accessed."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the advertiser. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[AdvertiserEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not insertion orders and line items of the advertiser can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_PAUSED` and `ENTITY_STATUS_SCHEDULED_FOR_DELETION`. * If set to `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30 days from when it was first scheduled for deletion."""  
    general_config: Optional[shared_advertisergeneralconfig.AdvertiserGeneralConfigInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalConfig'), 'exclude': lambda f: f is None }})
    r"""General settings of an advertiser."""  
    integration_details: Optional[shared_integrationdetails.IntegrationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrationDetails'), 'exclude': lambda f: f is None }})
    r"""Integration details of an entry."""  
    partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique ID of the partner that the advertiser belongs to."""  
    prisma_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prismaEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether integration with Mediaocean (Prisma) is enabled. By enabling this, you agree to the following: On behalf of my company, I authorize Mediaocean (Prisma) to send budget segment plans to Google, and I authorize Google to send corresponding reporting and invoices from DV360 to Mediaocean for the purposes of budget planning, billing, and reconciliation for this advertiser."""  
    serving_config: Optional[shared_advertisertargetingconfig.AdvertiserTargetingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servingConfig'), 'exclude': lambda f: f is None }})
    r"""Targeting settings related to ad serving of an advertiser."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Advertiser:
    r"""A single advertiser in Display & Video 360 (DV360)."""
    
    ad_server_config: Optional[shared_advertiseradserverconfig.AdvertiserAdServerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adServerConfig'), 'exclude': lambda f: f is None }})
    r"""Ad server related settings of an advertiser."""  
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the advertiser. Assigned by the system."""  
    billing_config: Optional[shared_advertiserbillingconfig.AdvertiserBillingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingConfig'), 'exclude': lambda f: f is None }})
    r"""Billing related settings of an advertiser."""  
    creative_config: Optional[shared_advertisercreativeconfig.AdvertiserCreativeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creativeConfig'), 'exclude': lambda f: f is None }})
    r"""Creatives related settings of an advertiser."""  
    data_access_config: Optional[shared_advertiserdataaccessconfig.AdvertiserDataAccessConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataAccessConfig'), 'exclude': lambda f: f is None }})
    r"""Settings that control how advertiser related data may be accessed."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the advertiser. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[AdvertiserEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Required. Controls whether or not insertion orders and line items of the advertiser can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_PAUSED` and `ENTITY_STATUS_SCHEDULED_FOR_DELETION`. * If set to `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30 days from when it was first scheduled for deletion."""  
    general_config: Optional[shared_advertisergeneralconfig.AdvertiserGeneralConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalConfig'), 'exclude': lambda f: f is None }})
    r"""General settings of an advertiser."""  
    integration_details: Optional[shared_integrationdetails.IntegrationDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrationDetails'), 'exclude': lambda f: f is None }})
    r"""Integration details of an entry."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the advertiser."""  
    partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique ID of the partner that the advertiser belongs to."""  
    prisma_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prismaEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether integration with Mediaocean (Prisma) is enabled. By enabling this, you agree to the following: On behalf of my company, I authorize Mediaocean (Prisma) to send budget segment plans to Google, and I authorize Google to send corresponding reporting and invoices from DV360 to Mediaocean for the purposes of budget planning, billing, and reconciliation for this advertiser."""  
    serving_config: Optional[shared_advertisertargetingconfig.AdvertiserTargetingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('servingConfig'), 'exclude': lambda f: f is None }})
    r"""Targeting settings related to ad serving of an advertiser."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the advertiser was last updated. Assigned by the system."""  
    