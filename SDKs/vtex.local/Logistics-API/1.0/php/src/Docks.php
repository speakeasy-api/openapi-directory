<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Docks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Activate dock
     * 
     * Activates dock through dock ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ActivateDockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ActivateDockResponse
     */
	public function activateDock(
        \OpenAPI\OpenAPI\Models\Operations\ActivateDockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ActivateDockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/docks/{dockId}/activation', \OpenAPI\OpenAPI\Models\Operations\ActivateDockRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ActivateDockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List all  docks
     * 
     * Informs a list of all docks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AllDocksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AllDocksResponse
     */
	public function allDocks(
        \OpenAPI\OpenAPI\Models\Operations\AllDocksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AllDocksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/docks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllDocksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allDocks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\AllDocks200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create/update dock
     * 
     * Creates or updates docks to be used in your logistic operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUpdateDockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUpdateDockResponse
     */
	public function createUpdateDock(
        \OpenAPI\OpenAPI\Models\Operations\CreateUpdateDockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUpdateDockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/docks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUpdateDockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Deactivate dock
     * 
     * Deactivate dock by dock ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeactivateDockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeactivateDockResponse
     */
	public function deactivateDock(
        \OpenAPI\OpenAPI\Models\Operations\DeactivateDockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeactivateDockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/docks/{dockId}/deactivation', \OpenAPI\OpenAPI\Models\Operations\DeactivateDockRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeactivateDockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Delete dock
     * 
     * Deletes dock by dock ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DockResponse
     */
	public function dock(
        \OpenAPI\OpenAPI\Models\Operations\DockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/docks/{dockId}', \OpenAPI\OpenAPI\Models\Operations\DockRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List dock by ID
     * 
     * Informs a given dock's information, searching by dock ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DockByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DockByIdResponse
     */
	public function dockById(
        \OpenAPI\OpenAPI\Models\Operations\DockByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DockByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/configuration/docks/{dockId}', \OpenAPI\OpenAPI\Models\Operations\DockByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DockByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dockById200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DockById200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}