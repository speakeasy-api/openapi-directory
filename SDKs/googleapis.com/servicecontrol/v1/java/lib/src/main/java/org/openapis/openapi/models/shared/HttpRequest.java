/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HttpRequest - A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
 */
public class HttpRequest {
    /**
     * The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheFillBytes")
    public String cacheFillBytes;
    public HttpRequest withCacheFillBytes(String cacheFillBytes) {
        this.cacheFillBytes = cacheFillBytes;
        return this;
    }
    
    /**
     * Whether or not an entity was served from cache (with or without validation).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheHit")
    public Boolean cacheHit;
    public HttpRequest withCacheHit(Boolean cacheHit) {
        this.cacheHit = cacheHit;
        return this;
    }
    
    /**
     * Whether or not a cache lookup was attempted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheLookup")
    public Boolean cacheLookup;
    public HttpRequest withCacheLookup(Boolean cacheLookup) {
        this.cacheLookup = cacheLookup;
        return this;
    }
    
    /**
     * Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if `cache_hit` is True.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheValidatedWithOriginServer")
    public Boolean cacheValidatedWithOriginServer;
    public HttpRequest withCacheValidatedWithOriginServer(Boolean cacheValidatedWithOriginServer) {
        this.cacheValidatedWithOriginServer = cacheValidatedWithOriginServer;
        return this;
    }
    
    /**
     * The request processing latency on the server, from the time the request was received until the response was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latency")
    public String latency;
    public HttpRequest withLatency(String latency) {
        this.latency = latency;
        return this;
    }
    
    /**
     * Protocol used for the request. Examples: "HTTP/1.1", "HTTP/2", "websocket"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;
    public HttpRequest withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    /**
     * The referer URL of the request, as defined in [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referer")
    public String referer;
    public HttpRequest withReferer(String referer) {
        this.referer = referer;
        return this;
    }
    
    /**
     * The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteIp")
    public String remoteIp;
    public HttpRequest withRemoteIp(String remoteIp) {
        this.remoteIp = remoteIp;
        return this;
    }
    
    /**
     * The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestMethod")
    public String requestMethod;
    public HttpRequest withRequestMethod(String requestMethod) {
        this.requestMethod = requestMethod;
        return this;
    }
    
    /**
     * The size of the HTTP request message in bytes, including the request headers and the request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestSize")
    public String requestSize;
    public HttpRequest withRequestSize(String requestSize) {
        this.requestSize = requestSize;
        return this;
    }
    
    /**
     * The scheme (http, https), the host name, the path, and the query portion of the URL that was requested. Example: `"http://example.com/some/info?color=red"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestUrl")
    public String requestUrl;
    public HttpRequest withRequestUrl(String requestUrl) {
        this.requestUrl = requestUrl;
        return this;
    }
    
    /**
     * The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseSize")
    public String responseSize;
    public HttpRequest withResponseSize(String responseSize) {
        this.responseSize = responseSize;
        return this;
    }
    
    /**
     * The IP address (IPv4 or IPv6) of the origin server that the request was sent to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverIp")
    public String serverIp;
    public HttpRequest withServerIp(String serverIp) {
        this.serverIp = serverIp;
        return this;
    }
    
    /**
     * The response code indicating the status of the response. Examples: 200, 404.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Integer status;
    public HttpRequest withStatus(Integer status) {
        this.status = status;
        return this;
    }
    
    /**
     * The user agent sent by the client. Example: `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userAgent")
    public String userAgent;
    public HttpRequest withUserAgent(String userAgent) {
        this.userAgent = userAgent;
        return this;
    }
    
}
