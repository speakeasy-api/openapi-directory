// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EnvironmentStatusEnum string

const (
	EnvironmentStatusEnumCreating     EnvironmentStatusEnum = "CREATING"
	EnvironmentStatusEnumCreateFailed EnvironmentStatusEnum = "CREATE_FAILED"
	EnvironmentStatusEnumAvailable    EnvironmentStatusEnum = "AVAILABLE"
	EnvironmentStatusEnumUpdating     EnvironmentStatusEnum = "UPDATING"
	EnvironmentStatusEnumDeleting     EnvironmentStatusEnum = "DELETING"
	EnvironmentStatusEnumDeleted      EnvironmentStatusEnum = "DELETED"
	EnvironmentStatusEnumUnavailable  EnvironmentStatusEnum = "UNAVAILABLE"
	EnvironmentStatusEnumUpdateFailed EnvironmentStatusEnum = "UPDATE_FAILED"
)

func (e EnvironmentStatusEnum) ToPointer() *EnvironmentStatusEnum {
	return &e
}

func (e *EnvironmentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREATING":
		fallthrough
	case "CREATE_FAILED":
		fallthrough
	case "AVAILABLE":
		fallthrough
	case "UPDATING":
		fallthrough
	case "DELETING":
		fallthrough
	case "DELETED":
		fallthrough
	case "UNAVAILABLE":
		fallthrough
	case "UPDATE_FAILED":
		*e = EnvironmentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvironmentStatusEnum: %v", v)
	}
}
