// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TagAPIGetListFieldsEnum - List of optional fields (optional).
type TagAPIGetListFieldsEnum string

const (
	TagAPIGetListFieldsEnumNone                  TagAPIGetListFieldsEnum = "None"
	TagAPIGetListFieldsEnumAdditionalNames       TagAPIGetListFieldsEnum = "AdditionalNames"
	TagAPIGetListFieldsEnumAliasedTo             TagAPIGetListFieldsEnum = "AliasedTo"
	TagAPIGetListFieldsEnumDescription           TagAPIGetListFieldsEnum = "Description"
	TagAPIGetListFieldsEnumMainPicture           TagAPIGetListFieldsEnum = "MainPicture"
	TagAPIGetListFieldsEnumNames                 TagAPIGetListFieldsEnum = "Names"
	TagAPIGetListFieldsEnumParent                TagAPIGetListFieldsEnum = "Parent"
	TagAPIGetListFieldsEnumRelatedTags           TagAPIGetListFieldsEnum = "RelatedTags"
	TagAPIGetListFieldsEnumTranslatedDescription TagAPIGetListFieldsEnum = "TranslatedDescription"
	TagAPIGetListFieldsEnumWebLinks              TagAPIGetListFieldsEnum = "WebLinks"
)

func (e *TagAPIGetListFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "AliasedTo":
		fallthrough
	case "Description":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "Parent":
		fallthrough
	case "RelatedTags":
		fallthrough
	case "TranslatedDescription":
		fallthrough
	case "WebLinks":
		*e = TagAPIGetListFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagAPIGetListFieldsEnum: %s", s)
	}
}

// TagAPIGetListLangEnum - Content language preference (optional).
type TagAPIGetListLangEnum string

const (
	TagAPIGetListLangEnumDefault  TagAPIGetListLangEnum = "Default"
	TagAPIGetListLangEnumJapanese TagAPIGetListLangEnum = "Japanese"
	TagAPIGetListLangEnumRomaji   TagAPIGetListLangEnum = "Romaji"
	TagAPIGetListLangEnumEnglish  TagAPIGetListLangEnum = "English"
)

func (e *TagAPIGetListLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = TagAPIGetListLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagAPIGetListLangEnum: %s", s)
	}
}

// TagAPIGetListNameMatchModeEnum - Match mode for song name (optional, defaults to Exact).
type TagAPIGetListNameMatchModeEnum string

const (
	TagAPIGetListNameMatchModeEnumAuto       TagAPIGetListNameMatchModeEnum = "Auto"
	TagAPIGetListNameMatchModeEnumPartial    TagAPIGetListNameMatchModeEnum = "Partial"
	TagAPIGetListNameMatchModeEnumStartsWith TagAPIGetListNameMatchModeEnum = "StartsWith"
	TagAPIGetListNameMatchModeEnumExact      TagAPIGetListNameMatchModeEnum = "Exact"
	TagAPIGetListNameMatchModeEnumWords      TagAPIGetListNameMatchModeEnum = "Words"
)

func (e *TagAPIGetListNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = TagAPIGetListNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagAPIGetListNameMatchModeEnum: %s", s)
	}
}

// TagAPIGetListSortEnum - Sort rule (optional, by default tags are sorted by name).Possible values are Name and UsageCount.
type TagAPIGetListSortEnum string

const (
	TagAPIGetListSortEnumNothing      TagAPIGetListSortEnum = "Nothing"
	TagAPIGetListSortEnumName         TagAPIGetListSortEnum = "Name"
	TagAPIGetListSortEnumAdditionDate TagAPIGetListSortEnum = "AdditionDate"
	TagAPIGetListSortEnumUsageCount   TagAPIGetListSortEnum = "UsageCount"
)

func (e *TagAPIGetListSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Name":
		fallthrough
	case "AdditionDate":
		fallthrough
	case "UsageCount":
		*e = TagAPIGetListSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagAPIGetListSortEnum: %s", s)
	}
}

// TagAPIGetListTargetEnum
type TagAPIGetListTargetEnum string

const (
	TagAPIGetListTargetEnumNothing     TagAPIGetListTargetEnum = "Nothing"
	TagAPIGetListTargetEnumAlbum       TagAPIGetListTargetEnum = "Album"
	TagAPIGetListTargetEnumArtist      TagAPIGetListTargetEnum = "Artist"
	TagAPIGetListTargetEnumAlbumArtist TagAPIGetListTargetEnum = "AlbumArtist"
	TagAPIGetListTargetEnumEvent       TagAPIGetListTargetEnum = "Event"
	TagAPIGetListTargetEnumSong        TagAPIGetListTargetEnum = "Song"
	TagAPIGetListTargetEnumAlbumSong   TagAPIGetListTargetEnum = "AlbumSong"
	TagAPIGetListTargetEnumArtistSong  TagAPIGetListTargetEnum = "ArtistSong"
	TagAPIGetListTargetEnumAll         TagAPIGetListTargetEnum = "All"
)

func (e *TagAPIGetListTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Album":
		fallthrough
	case "Artist":
		fallthrough
	case "AlbumArtist":
		fallthrough
	case "Event":
		fallthrough
	case "Song":
		fallthrough
	case "AlbumSong":
		fallthrough
	case "ArtistSong":
		fallthrough
	case "All":
		*e = TagAPIGetListTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TagAPIGetListTargetEnum: %s", s)
	}
}

type TagAPIGetListQueryParams struct {
	// Whether to allow child tags. If this is false, only root tags (that aren't children of any other tag) will be included.
	AllowChildren *bool `queryParam:"style=form,explode=true,name=allowChildren"`
	// Filter tags by category (optional). If specified, this must be an exact match (case insensitive).
	CategoryName *string `queryParam:"style=form,explode=true,name=categoryName"`
	// List of optional fields (optional).
	Fields *TagAPIGetListFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Whether to load total number of items (optional, default to false).
	GetTotalCount *bool `queryParam:"style=form,explode=true,name=getTotalCount"`
	// Content language preference (optional).
	Lang *TagAPIGetListLangEnum `queryParam:"style=form,explode=true,name=lang"`
	// Maximum number of results to be loaded (optional, defaults to 10, maximum of 30).
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Match mode for song name (optional, defaults to Exact).
	NameMatchMode *TagAPIGetListNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Whether the search should prefer accurate matches.
	//             If this is true, entries that match by prefix will be moved first, instead of being sorted alphabetically.
	//             Requires a text query. Does not support pagination.
	//             This is mostly useful for autocomplete boxes.
	PreferAccurateMatches *bool `queryParam:"style=form,explode=true,name=preferAccurateMatches"`
	// Tag name query (optional).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Sort rule (optional, by default tags are sorted by name).Possible values are Name and UsageCount.
	Sort *TagAPIGetListSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// First item to be retrieved (optional, defaults to 0).
	Start  *int                     `queryParam:"style=form,explode=true,name=start"`
	Target *TagAPIGetListTargetEnum `queryParam:"style=form,explode=true,name=target"`
}

type TagAPIGetListRequest struct {
	QueryParams TagAPIGetListQueryParams
}

type TagAPIGetListResponse struct {
	Body        []byte
	ContentType string
	// OK
	PartialFindResultTagForAPIContract *shared.PartialFindResultTagForAPIContract
	StatusCode                         int
	RawResponse                        *http.Response
}
