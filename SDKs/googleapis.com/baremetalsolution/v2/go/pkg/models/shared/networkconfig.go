// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NetworkConfigBandwidthEnum - Interconnect bandwidth. Set only when type is CLIENT.
type NetworkConfigBandwidthEnum string

const (
	NetworkConfigBandwidthEnumBandwidthUnspecified NetworkConfigBandwidthEnum = "BANDWIDTH_UNSPECIFIED"
	NetworkConfigBandwidthEnumBw1Gbps              NetworkConfigBandwidthEnum = "BW_1_GBPS"
	NetworkConfigBandwidthEnumBw2Gbps              NetworkConfigBandwidthEnum = "BW_2_GBPS"
	NetworkConfigBandwidthEnumBw5Gbps              NetworkConfigBandwidthEnum = "BW_5_GBPS"
	NetworkConfigBandwidthEnumBw10Gbps             NetworkConfigBandwidthEnum = "BW_10_GBPS"
)

func (e *NetworkConfigBandwidthEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BANDWIDTH_UNSPECIFIED":
		fallthrough
	case "BW_1_GBPS":
		fallthrough
	case "BW_2_GBPS":
		fallthrough
	case "BW_5_GBPS":
		fallthrough
	case "BW_10_GBPS":
		*e = NetworkConfigBandwidthEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkConfigBandwidthEnum: %s", s)
	}
}

// NetworkConfigServiceCidrEnum - Service CIDR, if any.
type NetworkConfigServiceCidrEnum string

const (
	NetworkConfigServiceCidrEnumServiceCidrUnspecified NetworkConfigServiceCidrEnum = "SERVICE_CIDR_UNSPECIFIED"
	NetworkConfigServiceCidrEnumDisabled               NetworkConfigServiceCidrEnum = "DISABLED"
	NetworkConfigServiceCidrEnumHigh26                 NetworkConfigServiceCidrEnum = "HIGH_26"
	NetworkConfigServiceCidrEnumHigh27                 NetworkConfigServiceCidrEnum = "HIGH_27"
	NetworkConfigServiceCidrEnumHigh28                 NetworkConfigServiceCidrEnum = "HIGH_28"
)

func (e *NetworkConfigServiceCidrEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SERVICE_CIDR_UNSPECIFIED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "HIGH_26":
		fallthrough
	case "HIGH_27":
		fallthrough
	case "HIGH_28":
		*e = NetworkConfigServiceCidrEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkConfigServiceCidrEnum: %s", s)
	}
}

// NetworkConfigTypeEnum - The type of this network, either Client or Private.
type NetworkConfigTypeEnum string

const (
	NetworkConfigTypeEnumTypeUnspecified NetworkConfigTypeEnum = "TYPE_UNSPECIFIED"
	NetworkConfigTypeEnumClient          NetworkConfigTypeEnum = "CLIENT"
	NetworkConfigTypeEnumPrivate         NetworkConfigTypeEnum = "PRIVATE"
)

func (e *NetworkConfigTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "CLIENT":
		fallthrough
	case "PRIVATE":
		*e = NetworkConfigTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkConfigTypeEnum: %s", s)
	}
}

// NetworkConfigInput - Configuration parameters for a new network.
type NetworkConfigInput struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth *NetworkConfigBandwidthEnum `json:"bandwidth,omitempty"`
	// CIDR range of the network.
	Cidr *string `json:"cidr,omitempty"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService *string `json:"gcpService,omitempty"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	ID *string `json:"id,omitempty"`
	// The JumboFramesEnabled option for customer to set.
	JumboFramesEnabled *bool `json:"jumboFramesEnabled,omitempty"`
	// Service CIDR, if any.
	ServiceCidr *NetworkConfigServiceCidrEnum `json:"serviceCidr,omitempty"`
	// The type of this network, either Client or Private.
	Type *NetworkConfigTypeEnum `json:"type,omitempty"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `json:"userNote,omitempty"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments []IntakeVlanAttachment `json:"vlanAttachments,omitempty"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject *bool `json:"vlanSameProject,omitempty"`
}

// NetworkConfig - Configuration parameters for a new network.
type NetworkConfig struct {
	// Interconnect bandwidth. Set only when type is CLIENT.
	Bandwidth *NetworkConfigBandwidthEnum `json:"bandwidth,omitempty"`
	// CIDR range of the network.
	Cidr *string `json:"cidr,omitempty"`
	// The GCP service of the network. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
	GcpService *string `json:"gcpService,omitempty"`
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	ID *string `json:"id,omitempty"`
	// The JumboFramesEnabled option for customer to set.
	JumboFramesEnabled *bool `json:"jumboFramesEnabled,omitempty"`
	// Output only. The name of the network config.
	Name *string `json:"name,omitempty"`
	// Service CIDR, if any.
	ServiceCidr *NetworkConfigServiceCidrEnum `json:"serviceCidr,omitempty"`
	// The type of this network, either Client or Private.
	Type *NetworkConfigTypeEnum `json:"type,omitempty"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team .
	UserNote *string `json:"userNote,omitempty"`
	// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
	VlanAttachments []IntakeVlanAttachment `json:"vlanAttachments,omitempty"`
	// Whether the VLAN attachment pair is located in the same project.
	VlanSameProject *bool `json:"vlanSameProject,omitempty"`
}
