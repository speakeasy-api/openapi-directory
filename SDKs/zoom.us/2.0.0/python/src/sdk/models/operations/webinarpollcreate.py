"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class WebinarPollCreateSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class WebinarPollCreatePollQuestionsTypeEnum(str, Enum):
    r"""Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice"""
    SINGLE = 'single'
    MULTIPLE = 'multiple'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPollCreatePollQuestions:
    
    answers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answers'), 'exclude': lambda f: f is None }})
    r"""Answers to the questions"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Question to be asked to the attendees."""  
    type: Optional[WebinarPollCreatePollQuestionsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPollCreatePoll:
    r"""Poll"""
    
    questions: Optional[list[WebinarPollCreatePollQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'questions', 'json': True }})
    r"""Array of Polls"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'title' }})
    r"""Title for the poll."""  
    

@dataclasses.dataclass
class WebinarPollCreateRequest:
    
    request_body: WebinarPollCreatePoll = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Webinar poll object"""  
    webinar_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID in \\"**long**\\" format(represented as int64 data type in JSON)."""  
    
class WebinarPollCreatePollStatusEnum(str, Enum):
    r"""Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results"""
    NOTSTART = 'notstart'
    STARTED = 'started'
    ENDED = 'ended'
    SHARING = 'sharing'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarPollCreatePoll2:
    r"""Poll"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Webinar Poll ID"""  
    questions: Optional[list[WebinarPollCreatePollQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }})
    r"""Array of Polls"""  
    status: Optional[WebinarPollCreatePollStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the Webinar Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title for the poll."""  
    

@dataclasses.dataclass
class WebinarPollCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    poll: Optional[WebinarPollCreatePoll2] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `201`<br>
    Webinar Poll Created
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    