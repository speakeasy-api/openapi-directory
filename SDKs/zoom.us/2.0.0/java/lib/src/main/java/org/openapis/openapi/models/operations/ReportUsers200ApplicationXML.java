/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;

/**
 * ReportUsers200ApplicationXML - **HTTP Status Code:** `200`&lt;br&gt;
 * Active or inactive hosts report returned.&lt;br&gt;
 * This is only available for paid account: {accountId}.
 */
public class ReportUsers200ApplicationXML {
    /**
     * Start date for this report.
     */
    
    public LocalDate from;
    public ReportUsers200ApplicationXML withFrom(LocalDate from) {
        this.from = from;
        return this;
    }
    
    
    public String nextPageToken;
    public ReportUsers200ApplicationXML withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
    /**
     * The number of pages returned for the request made.
     */
    
    public Long pageCount;
    public ReportUsers200ApplicationXML withPageCount(Long pageCount) {
        this.pageCount = pageCount;
        return this;
    }
    
    /**
     * The page number of the current results.
     */
    
    public Long pageNumber;
    public ReportUsers200ApplicationXML withPageNumber(Long pageNumber) {
        this.pageNumber = pageNumber;
        return this;
    }
    
    /**
     * The number of records returned with a single API call.
     */
    
    public Long pageSize;
    public ReportUsers200ApplicationXML withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * End date for this report.
     */
    
    public LocalDate to;
    public ReportUsers200ApplicationXML withTo(LocalDate to) {
        this.to = to;
        return this;
    }
    
    /**
     * Number of meeting minutes for this range.
     */
    
    public Long totalMeetingMinutes;
    public ReportUsers200ApplicationXML withTotalMeetingMinutes(Long totalMeetingMinutes) {
        this.totalMeetingMinutes = totalMeetingMinutes;
        return this;
    }
    
    /**
     * Number of meetings for this range.
     */
    
    public Long totalMeetings;
    public ReportUsers200ApplicationXML withTotalMeetings(Long totalMeetings) {
        this.totalMeetings = totalMeetings;
        return this;
    }
    
    /**
     * Number of participants for this range.
     */
    
    public Long totalParticipants;
    public ReportUsers200ApplicationXML withTotalParticipants(Long totalParticipants) {
        this.totalParticipants = totalParticipants;
        return this;
    }
    
    /**
     * The total number of all the records available across pages.
     */
    
    public Long totalRecords;
    public ReportUsers200ApplicationXML withTotalRecords(Long totalRecords) {
        this.totalRecords = totalRecords;
        return this;
    }
    
    /**
     * Array of user objects.
     */
    
    public ReportUsers200ApplicationXMLUsers[] users;
    public ReportUsers200ApplicationXML withUsers(ReportUsers200ApplicationXMLUsers[] users) {
        this.users = users;
        return this;
    }
    
}
