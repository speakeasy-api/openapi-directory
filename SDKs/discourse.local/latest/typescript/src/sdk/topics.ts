/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Topics {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Bookmark topic
   */
  bookmarkTopic(
    req: operations.BookmarkTopicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.BookmarkTopicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.BookmarkTopicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/t/{id}/bookmark.json",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BookmarkTopicResponse =
        new operations.BookmarkTopicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new topic, a new post, or a private message
   */
  createTopicPostPM(
    req: operations.CreateTopicPostPMRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTopicPostPMResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateTopicPostPMRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/posts.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTopicPostPMResponse =
        new operations.CreateTopicPostPMResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createTopicPostPM200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateTopicPostPm200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create topic timer
   */
  createTopicTimer(
    req: operations.CreateTopicTimerRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTopicTimerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateTopicTimerRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/t/{id}/timer.json", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTopicTimerResponse =
        new operations.CreateTopicTimerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createTopicTimer200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateTopicTimer200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a single topic
   */
  getTopic(
    req: operations.GetTopicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTopicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTopicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/t/{id}.json", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTopicResponse = new operations.GetTopicResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTopic200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetTopic200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get topic by external_id
   */
  getTopicByExternalId(
    req: operations.GetTopicByExternalIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetTopicByExternalIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetTopicByExternalIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/t/external_id/{external_id}.json",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTopicByExternalIdResponse =
        new operations.GetTopicByExternalIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 301:
          break;
      }

      return res;
    });
  }

  /**
   * Invite to topic
   */
  inviteToTopic(
    req: operations.InviteToTopicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.InviteToTopicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.InviteToTopicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/t/{id}/invite.json", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.InviteToTopicResponse =
        new operations.InviteToTopicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.inviteToTopic200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.InviteToTopic200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the latest topics
   */
  listLatestTopics(
    req: operations.ListLatestTopicsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListLatestTopicsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListLatestTopicsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/latest.json";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListLatestTopicsResponse =
        new operations.ListLatestTopicsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLatestTopics200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListLatestTopics200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the top topics filtered by period
   */
  listTopTopics(
    req: operations.ListTopTopicsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTopTopicsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTopTopicsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/top.json";

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTopTopicsResponse =
        new operations.ListTopTopicsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTopTopics200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.ListTopTopics200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a topic
   */
  removeTopic(
    req: operations.RemoveTopicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RemoveTopicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RemoveTopicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/t/{id}.json", req);

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RemoveTopicResponse =
        new operations.RemoveTopicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Set notification level
   */
  setNotificationLevel(
    req: operations.SetNotificationLevelRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SetNotificationLevelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SetNotificationLevelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/t/{id}/notifications.json",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SetNotificationLevelResponse =
        new operations.SetNotificationLevelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.setNotificationLevel200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.SetNotificationLevel200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a topic
   */
  updateTopic(
    req: operations.UpdateTopicRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateTopicResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateTopicRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/t/-/{id}.json", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateTopicResponse =
        new operations.UpdateTopicResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateTopic200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateTopic200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update the status of a topic
   */
  updateTopicStatus(
    req: operations.UpdateTopicStatusRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateTopicStatusResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateTopicStatusRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/t/{id}/status.json", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateTopicStatusResponse =
        new operations.UpdateTopicStatusResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateTopicStatus200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateTopicStatus200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update topic timestamp
   */
  updateTopicTimestamp(
    req: operations.UpdateTopicTimestampRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateTopicTimestampResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateTopicTimestampRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/t/{id}/change-timestamp.json",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateTopicTimestampResponse =
        new operations.UpdateTopicTimestampResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateTopicTimestamp200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateTopicTimestamp200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
