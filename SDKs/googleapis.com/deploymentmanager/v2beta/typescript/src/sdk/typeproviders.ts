/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TypeProviders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes a type provider.
   */
  deploymentmanagerTypeProvidersDelete(
    req: operations.DeploymentmanagerTypeProvidersDeleteRequest,
    security: operations.DeploymentmanagerTypeProvidersDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersDeleteResponse =
        new operations.DeploymentmanagerTypeProvidersDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about a specific type provider.
   */
  deploymentmanagerTypeProvidersGet(
    req: operations.DeploymentmanagerTypeProvidersGetRequest,
    security: operations.DeploymentmanagerTypeProvidersGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersGetResponse =
        new operations.DeploymentmanagerTypeProvidersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeProvider = utils.objectToClass(
              httpRes?.data,
              shared.TypeProvider
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets a type info for a type provided by a TypeProvider.
   */
  deploymentmanagerTypeProvidersGetType(
    req: operations.DeploymentmanagerTypeProvidersGetTypeRequest,
    security: operations.DeploymentmanagerTypeProvidersGetTypeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersGetTypeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersGetTypeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types/{type}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersGetTypeSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersGetTypeResponse =
        new operations.DeploymentmanagerTypeProvidersGetTypeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeInfo = utils.objectToClass(httpRes?.data, shared.TypeInfo);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a type provider.
   */
  deploymentmanagerTypeProvidersInsert(
    req: operations.DeploymentmanagerTypeProvidersInsertRequest,
    security: operations.DeploymentmanagerTypeProvidersInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "typeProvider",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersInsertResponse =
        new operations.DeploymentmanagerTypeProvidersInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all resource type providers for Deployment Manager.
   */
  deploymentmanagerTypeProvidersList(
    req: operations.DeploymentmanagerTypeProvidersListRequest,
    security: operations.DeploymentmanagerTypeProvidersListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersListResponse =
        new operations.DeploymentmanagerTypeProvidersListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeProvidersListResponse = utils.objectToClass(
              httpRes?.data,
              shared.TypeProvidersListResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the type info for a TypeProvider.
   */
  deploymentmanagerTypeProvidersListTypes(
    req: operations.DeploymentmanagerTypeProvidersListTypesRequest,
    security: operations.DeploymentmanagerTypeProvidersListTypesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersListTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersListTypesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}/types",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersListTypesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersListTypesResponse =
        new operations.DeploymentmanagerTypeProvidersListTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.typeProvidersListTypesResponse = utils.objectToClass(
              httpRes?.data,
              shared.TypeProvidersListTypesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches a type provider.
   */
  deploymentmanagerTypeProvidersPatch(
    req: operations.DeploymentmanagerTypeProvidersPatchRequest,
    security: operations.DeploymentmanagerTypeProvidersPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "typeProvider1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersPatchResponse =
        new operations.DeploymentmanagerTypeProvidersPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a type provider.
   */
  deploymentmanagerTypeProvidersUpdate(
    req: operations.DeploymentmanagerTypeProvidersUpdateRequest,
    security: operations.DeploymentmanagerTypeProvidersUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeploymentmanagerTypeProvidersUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeploymentmanagerTypeProvidersUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/deploymentmanager/v2beta/projects/{project}/global/typeProviders/{typeProvider}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "typeProvider1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeploymentmanagerTypeProvidersUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeploymentmanagerTypeProvidersUpdateResponse =
        new operations.DeploymentmanagerTypeProvidersUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
