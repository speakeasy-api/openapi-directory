/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DescribeIndexStatsResponse - A successful response
 */
public class DescribeIndexStatsResponse {
    /**
     * The number of dimensions in the vector representation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimension")
    public Integer dimension;

    public DescribeIndexStatsResponse withDimension(Integer dimension) {
        this.dimension = dimension;
        return this;
    }
    
    /**
     * The fullness of the index, regardless of whether a metadata filter expression was passed. The granularity of this metric is 10%.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexFullness")
    public Float indexFullness;

    public DescribeIndexStatsResponse withIndexFullness(Float indexFullness) {
        this.indexFullness = indexFullness;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaces")
    public java.util.Map<String, IndexNamespaceStats> namespaces;

    public DescribeIndexStatsResponse withNamespaces(java.util.Map<String, IndexNamespaceStats> namespaces) {
        this.namespaces = namespaces;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalVectorCount")
    public Long totalVectorCount;

    public DescribeIndexStatsResponse withTotalVectorCount(Long totalVectorCount) {
        this.totalVectorCount = totalVectorCount;
        return this;
    }
    
    public DescribeIndexStatsResponse(){}
}
