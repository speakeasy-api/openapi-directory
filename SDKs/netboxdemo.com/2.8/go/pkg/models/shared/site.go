// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type SiteStatusLabelEnum string

const (
	SiteStatusLabelEnumActive  SiteStatusLabelEnum = "Active"
	SiteStatusLabelEnumPlanned SiteStatusLabelEnum = "Planned"
	SiteStatusLabelEnumRetired SiteStatusLabelEnum = "Retired"
)

func (e *SiteStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Active":
		fallthrough
	case "Planned":
		fallthrough
	case "Retired":
		*e = SiteStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SiteStatusLabelEnum: %s", s)
	}
}

type SiteStatusValueEnum string

const (
	SiteStatusValueEnumActive  SiteStatusValueEnum = "active"
	SiteStatusValueEnumPlanned SiteStatusValueEnum = "planned"
	SiteStatusValueEnumRetired SiteStatusValueEnum = "retired"
)

func (e *SiteStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "planned":
		fallthrough
	case "retired":
		*e = SiteStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SiteStatusValueEnum: %s", s)
	}
}

type SiteStatus struct {
	Label SiteStatusLabelEnum `json:"label"`
	Value SiteStatusValueEnum `json:"value"`
}

type Site struct {
	// 32-bit autonomous system number
	Asn          *int64                 `json:"asn,omitempty"`
	CircuitCount *int64                 `json:"circuit_count,omitempty"`
	Comments     *string                `json:"comments,omitempty"`
	ContactEmail *string                `json:"contact_email,omitempty"`
	ContactName  *string                `json:"contact_name,omitempty"`
	ContactPhone *string                `json:"contact_phone,omitempty"`
	Created      *types.Date            `json:"created,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                `json:"description,omitempty"`
	DeviceCount  *int64                 `json:"device_count,omitempty"`
	// Local facility ID or description
	Facility    *string    `json:"facility,omitempty"`
	ID          *int64     `json:"id,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	// GPS coordinate (latitude)
	Latitude *string `json:"latitude,omitempty"`
	// GPS coordinate (longitude)
	Longitude           *string       `json:"longitude,omitempty"`
	Name                string        `json:"name"`
	PhysicalAddress     *string       `json:"physical_address,omitempty"`
	PrefixCount         *int64        `json:"prefix_count,omitempty"`
	RackCount           *int64        `json:"rack_count,omitempty"`
	Region              *NestedRegion `json:"region,omitempty"`
	ShippingAddress     *string       `json:"shipping_address,omitempty"`
	Slug                string        `json:"slug"`
	Status              *SiteStatus   `json:"status,omitempty"`
	Tags                []string      `json:"tags,omitempty"`
	Tenant              *NestedTenant `json:"tenant,omitempty"`
	TimeZone            *string       `json:"time_zone,omitempty"`
	VirtualmachineCount *int64        `json:"virtualmachine_count,omitempty"`
	VlanCount           *int64        `json:"vlan_count,omitempty"`
}
