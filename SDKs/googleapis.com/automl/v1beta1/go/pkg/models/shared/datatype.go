// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataTypeTypeCodeEnum - Required. The TypeCode for this type.
type DataTypeTypeCodeEnum string

const (
	DataTypeTypeCodeEnumTypeCodeUnspecified DataTypeTypeCodeEnum = "TYPE_CODE_UNSPECIFIED"
	DataTypeTypeCodeEnumFloat64             DataTypeTypeCodeEnum = "FLOAT64"
	DataTypeTypeCodeEnumTimestamp           DataTypeTypeCodeEnum = "TIMESTAMP"
	DataTypeTypeCodeEnumString              DataTypeTypeCodeEnum = "STRING"
	DataTypeTypeCodeEnumArray               DataTypeTypeCodeEnum = "ARRAY"
	DataTypeTypeCodeEnumStruct              DataTypeTypeCodeEnum = "STRUCT"
	DataTypeTypeCodeEnumCategory            DataTypeTypeCodeEnum = "CATEGORY"
)

func (e *DataTypeTypeCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TYPE_CODE_UNSPECIFIED":
		fallthrough
	case "FLOAT64":
		fallthrough
	case "TIMESTAMP":
		fallthrough
	case "STRING":
		fallthrough
	case "ARRAY":
		fallthrough
	case "STRUCT":
		fallthrough
	case "CATEGORY":
		*e = DataTypeTypeCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataTypeTypeCodeEnum: %s", s)
	}
}

// DataType - Indicated the type of data that can be stored in a structured data entity (e.g. a table).
type DataType struct {
	// Indicated the type of data that can be stored in a structured data entity (e.g. a table).
	ListElementType *DataType `json:"listElementType,omitempty"`
	// If true, this DataType can also be `NULL`. In .CSV files `NULL` value is expressed as an empty string.
	Nullable *bool `json:"nullable,omitempty"`
	// `StructType` defines the DataType-s of a STRUCT type.
	StructType *StructType `json:"structType,omitempty"`
	// If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must either be one of: * `UNIX_SECONDS` * `UNIX_MILLISECONDS` * `UNIX_MICROSECONDS` * `UNIX_NANOSECONDS` (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in `strftime` syntax. If time_format is not set, then the default format as described on the type_code is used.
	TimeFormat *string `json:"timeFormat,omitempty"`
	// Required. The TypeCode for this type.
	TypeCode *DataTypeTypeCodeEnum `json:"typeCode,omitempty"`
}
