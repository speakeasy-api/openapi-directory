// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DependencyEdgeLabelEnum - The parse label for the token.
type DependencyEdgeLabelEnum string

const (
	DependencyEdgeLabelEnumUnknown      DependencyEdgeLabelEnum = "UNKNOWN"
	DependencyEdgeLabelEnumAbbrev       DependencyEdgeLabelEnum = "ABBREV"
	DependencyEdgeLabelEnumAcomp        DependencyEdgeLabelEnum = "ACOMP"
	DependencyEdgeLabelEnumAdvcl        DependencyEdgeLabelEnum = "ADVCL"
	DependencyEdgeLabelEnumAdvmod       DependencyEdgeLabelEnum = "ADVMOD"
	DependencyEdgeLabelEnumAmod         DependencyEdgeLabelEnum = "AMOD"
	DependencyEdgeLabelEnumAppos        DependencyEdgeLabelEnum = "APPOS"
	DependencyEdgeLabelEnumAttr         DependencyEdgeLabelEnum = "ATTR"
	DependencyEdgeLabelEnumAux          DependencyEdgeLabelEnum = "AUX"
	DependencyEdgeLabelEnumAuxpass      DependencyEdgeLabelEnum = "AUXPASS"
	DependencyEdgeLabelEnumCc           DependencyEdgeLabelEnum = "CC"
	DependencyEdgeLabelEnumCcomp        DependencyEdgeLabelEnum = "CCOMP"
	DependencyEdgeLabelEnumConj         DependencyEdgeLabelEnum = "CONJ"
	DependencyEdgeLabelEnumCsubj        DependencyEdgeLabelEnum = "CSUBJ"
	DependencyEdgeLabelEnumCsubjpass    DependencyEdgeLabelEnum = "CSUBJPASS"
	DependencyEdgeLabelEnumDep          DependencyEdgeLabelEnum = "DEP"
	DependencyEdgeLabelEnumDet          DependencyEdgeLabelEnum = "DET"
	DependencyEdgeLabelEnumDiscourse    DependencyEdgeLabelEnum = "DISCOURSE"
	DependencyEdgeLabelEnumDobj         DependencyEdgeLabelEnum = "DOBJ"
	DependencyEdgeLabelEnumExpl         DependencyEdgeLabelEnum = "EXPL"
	DependencyEdgeLabelEnumGoeswith     DependencyEdgeLabelEnum = "GOESWITH"
	DependencyEdgeLabelEnumIobj         DependencyEdgeLabelEnum = "IOBJ"
	DependencyEdgeLabelEnumMark         DependencyEdgeLabelEnum = "MARK"
	DependencyEdgeLabelEnumMwe          DependencyEdgeLabelEnum = "MWE"
	DependencyEdgeLabelEnumMwv          DependencyEdgeLabelEnum = "MWV"
	DependencyEdgeLabelEnumNeg          DependencyEdgeLabelEnum = "NEG"
	DependencyEdgeLabelEnumNn           DependencyEdgeLabelEnum = "NN"
	DependencyEdgeLabelEnumNpadvmod     DependencyEdgeLabelEnum = "NPADVMOD"
	DependencyEdgeLabelEnumNsubj        DependencyEdgeLabelEnum = "NSUBJ"
	DependencyEdgeLabelEnumNsubjpass    DependencyEdgeLabelEnum = "NSUBJPASS"
	DependencyEdgeLabelEnumNum          DependencyEdgeLabelEnum = "NUM"
	DependencyEdgeLabelEnumNumber       DependencyEdgeLabelEnum = "NUMBER"
	DependencyEdgeLabelEnumP            DependencyEdgeLabelEnum = "P"
	DependencyEdgeLabelEnumParataxis    DependencyEdgeLabelEnum = "PARATAXIS"
	DependencyEdgeLabelEnumPartmod      DependencyEdgeLabelEnum = "PARTMOD"
	DependencyEdgeLabelEnumPcomp        DependencyEdgeLabelEnum = "PCOMP"
	DependencyEdgeLabelEnumPobj         DependencyEdgeLabelEnum = "POBJ"
	DependencyEdgeLabelEnumPoss         DependencyEdgeLabelEnum = "POSS"
	DependencyEdgeLabelEnumPostneg      DependencyEdgeLabelEnum = "POSTNEG"
	DependencyEdgeLabelEnumPrecomp      DependencyEdgeLabelEnum = "PRECOMP"
	DependencyEdgeLabelEnumPreconj      DependencyEdgeLabelEnum = "PRECONJ"
	DependencyEdgeLabelEnumPredet       DependencyEdgeLabelEnum = "PREDET"
	DependencyEdgeLabelEnumPref         DependencyEdgeLabelEnum = "PREF"
	DependencyEdgeLabelEnumPrep         DependencyEdgeLabelEnum = "PREP"
	DependencyEdgeLabelEnumPronl        DependencyEdgeLabelEnum = "PRONL"
	DependencyEdgeLabelEnumPrt          DependencyEdgeLabelEnum = "PRT"
	DependencyEdgeLabelEnumPs           DependencyEdgeLabelEnum = "PS"
	DependencyEdgeLabelEnumQuantmod     DependencyEdgeLabelEnum = "QUANTMOD"
	DependencyEdgeLabelEnumRcmod        DependencyEdgeLabelEnum = "RCMOD"
	DependencyEdgeLabelEnumRcmodrel     DependencyEdgeLabelEnum = "RCMODREL"
	DependencyEdgeLabelEnumRdrop        DependencyEdgeLabelEnum = "RDROP"
	DependencyEdgeLabelEnumRef          DependencyEdgeLabelEnum = "REF"
	DependencyEdgeLabelEnumRemnant      DependencyEdgeLabelEnum = "REMNANT"
	DependencyEdgeLabelEnumReparandum   DependencyEdgeLabelEnum = "REPARANDUM"
	DependencyEdgeLabelEnumRoot         DependencyEdgeLabelEnum = "ROOT"
	DependencyEdgeLabelEnumSnum         DependencyEdgeLabelEnum = "SNUM"
	DependencyEdgeLabelEnumSuff         DependencyEdgeLabelEnum = "SUFF"
	DependencyEdgeLabelEnumTmod         DependencyEdgeLabelEnum = "TMOD"
	DependencyEdgeLabelEnumTopic        DependencyEdgeLabelEnum = "TOPIC"
	DependencyEdgeLabelEnumVmod         DependencyEdgeLabelEnum = "VMOD"
	DependencyEdgeLabelEnumVocative     DependencyEdgeLabelEnum = "VOCATIVE"
	DependencyEdgeLabelEnumXcomp        DependencyEdgeLabelEnum = "XCOMP"
	DependencyEdgeLabelEnumSuffix       DependencyEdgeLabelEnum = "SUFFIX"
	DependencyEdgeLabelEnumTitle        DependencyEdgeLabelEnum = "TITLE"
	DependencyEdgeLabelEnumAdvphmod     DependencyEdgeLabelEnum = "ADVPHMOD"
	DependencyEdgeLabelEnumAuxcaus      DependencyEdgeLabelEnum = "AUXCAUS"
	DependencyEdgeLabelEnumAuxvv        DependencyEdgeLabelEnum = "AUXVV"
	DependencyEdgeLabelEnumDtmod        DependencyEdgeLabelEnum = "DTMOD"
	DependencyEdgeLabelEnumForeign      DependencyEdgeLabelEnum = "FOREIGN"
	DependencyEdgeLabelEnumKw           DependencyEdgeLabelEnum = "KW"
	DependencyEdgeLabelEnumList         DependencyEdgeLabelEnum = "LIST"
	DependencyEdgeLabelEnumNomc         DependencyEdgeLabelEnum = "NOMC"
	DependencyEdgeLabelEnumNomcsubj     DependencyEdgeLabelEnum = "NOMCSUBJ"
	DependencyEdgeLabelEnumNomcsubjpass DependencyEdgeLabelEnum = "NOMCSUBJPASS"
	DependencyEdgeLabelEnumNumc         DependencyEdgeLabelEnum = "NUMC"
	DependencyEdgeLabelEnumCop          DependencyEdgeLabelEnum = "COP"
	DependencyEdgeLabelEnumDislocated   DependencyEdgeLabelEnum = "DISLOCATED"
	DependencyEdgeLabelEnumAsp          DependencyEdgeLabelEnum = "ASP"
	DependencyEdgeLabelEnumGmod         DependencyEdgeLabelEnum = "GMOD"
	DependencyEdgeLabelEnumGobj         DependencyEdgeLabelEnum = "GOBJ"
	DependencyEdgeLabelEnumInfmod       DependencyEdgeLabelEnum = "INFMOD"
	DependencyEdgeLabelEnumMes          DependencyEdgeLabelEnum = "MES"
	DependencyEdgeLabelEnumNcomp        DependencyEdgeLabelEnum = "NCOMP"
)

func (e *DependencyEdgeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNKNOWN":
		fallthrough
	case "ABBREV":
		fallthrough
	case "ACOMP":
		fallthrough
	case "ADVCL":
		fallthrough
	case "ADVMOD":
		fallthrough
	case "AMOD":
		fallthrough
	case "APPOS":
		fallthrough
	case "ATTR":
		fallthrough
	case "AUX":
		fallthrough
	case "AUXPASS":
		fallthrough
	case "CC":
		fallthrough
	case "CCOMP":
		fallthrough
	case "CONJ":
		fallthrough
	case "CSUBJ":
		fallthrough
	case "CSUBJPASS":
		fallthrough
	case "DEP":
		fallthrough
	case "DET":
		fallthrough
	case "DISCOURSE":
		fallthrough
	case "DOBJ":
		fallthrough
	case "EXPL":
		fallthrough
	case "GOESWITH":
		fallthrough
	case "IOBJ":
		fallthrough
	case "MARK":
		fallthrough
	case "MWE":
		fallthrough
	case "MWV":
		fallthrough
	case "NEG":
		fallthrough
	case "NN":
		fallthrough
	case "NPADVMOD":
		fallthrough
	case "NSUBJ":
		fallthrough
	case "NSUBJPASS":
		fallthrough
	case "NUM":
		fallthrough
	case "NUMBER":
		fallthrough
	case "P":
		fallthrough
	case "PARATAXIS":
		fallthrough
	case "PARTMOD":
		fallthrough
	case "PCOMP":
		fallthrough
	case "POBJ":
		fallthrough
	case "POSS":
		fallthrough
	case "POSTNEG":
		fallthrough
	case "PRECOMP":
		fallthrough
	case "PRECONJ":
		fallthrough
	case "PREDET":
		fallthrough
	case "PREF":
		fallthrough
	case "PREP":
		fallthrough
	case "PRONL":
		fallthrough
	case "PRT":
		fallthrough
	case "PS":
		fallthrough
	case "QUANTMOD":
		fallthrough
	case "RCMOD":
		fallthrough
	case "RCMODREL":
		fallthrough
	case "RDROP":
		fallthrough
	case "REF":
		fallthrough
	case "REMNANT":
		fallthrough
	case "REPARANDUM":
		fallthrough
	case "ROOT":
		fallthrough
	case "SNUM":
		fallthrough
	case "SUFF":
		fallthrough
	case "TMOD":
		fallthrough
	case "TOPIC":
		fallthrough
	case "VMOD":
		fallthrough
	case "VOCATIVE":
		fallthrough
	case "XCOMP":
		fallthrough
	case "SUFFIX":
		fallthrough
	case "TITLE":
		fallthrough
	case "ADVPHMOD":
		fallthrough
	case "AUXCAUS":
		fallthrough
	case "AUXVV":
		fallthrough
	case "DTMOD":
		fallthrough
	case "FOREIGN":
		fallthrough
	case "KW":
		fallthrough
	case "LIST":
		fallthrough
	case "NOMC":
		fallthrough
	case "NOMCSUBJ":
		fallthrough
	case "NOMCSUBJPASS":
		fallthrough
	case "NUMC":
		fallthrough
	case "COP":
		fallthrough
	case "DISLOCATED":
		fallthrough
	case "ASP":
		fallthrough
	case "GMOD":
		fallthrough
	case "GOBJ":
		fallthrough
	case "INFMOD":
		fallthrough
	case "MES":
		fallthrough
	case "NCOMP":
		*e = DependencyEdgeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DependencyEdgeLabelEnum: %s", s)
	}
}

// DependencyEdge - Represents dependency parse tree information for a token.
type DependencyEdge struct {
	// Represents the head of this token in the dependency tree. This is the index of the token which has an arc going to this token. The index is the position of the token in the array of tokens returned by the API method. If this token is a root token, then the `head_token_index` is its own index.
	HeadTokenIndex *int `json:"headTokenIndex,omitempty"`
	// The parse label for the token.
	Label *DependencyEdgeLabelEnum `json:"label,omitempty"`
}
