"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupLicense = exports.GroupLicensePermissionsEnum = exports.GroupLicenseApprovalEnum = exports.GroupLicenseAcquisitionKindEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * How this group license was acquired. "bulkPurchase" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is "free" (for free products).
 */
var GroupLicenseAcquisitionKindEnum;
(function (GroupLicenseAcquisitionKindEnum) {
    GroupLicenseAcquisitionKindEnum["Free"] = "free";
    GroupLicenseAcquisitionKindEnum["BulkPurchase"] = "bulkPurchase";
})(GroupLicenseAcquisitionKindEnum = exports.GroupLicenseAcquisitionKindEnum || (exports.GroupLicenseAcquisitionKindEnum = {}));
/**
 * Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.
 */
var GroupLicenseApprovalEnum;
(function (GroupLicenseApprovalEnum) {
    GroupLicenseApprovalEnum["Approved"] = "approved";
    GroupLicenseApprovalEnum["Unapproved"] = "unapproved";
})(GroupLicenseApprovalEnum = exports.GroupLicenseApprovalEnum || (exports.GroupLicenseApprovalEnum = {}));
/**
 * The permission approval status of the product. This field is only set if the product is approved. Possible states are: - "currentApproved", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), - "needsReapproval", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, - "allCurrentAndFutureApproved", the current permissions are approved and any future permission updates will be automatically approved without administrator review.
 */
var GroupLicensePermissionsEnum;
(function (GroupLicensePermissionsEnum) {
    GroupLicensePermissionsEnum["CurrentApproved"] = "currentApproved";
    GroupLicensePermissionsEnum["NeedsReapproval"] = "needsReapproval";
    GroupLicensePermissionsEnum["AllCurrentAndFutureApproved"] = "allCurrentAndFutureApproved";
})(GroupLicensePermissionsEnum = exports.GroupLicensePermissionsEnum || (exports.GroupLicensePermissionsEnum = {}));
/**
 * Group license objects allow you to keep track of licenses (called entitlements) for both free and paid apps. For a free app, a group license is created when an enterprise admin first approves the product in Google Play or when the first entitlement for the product is created for a user via the API. For a paid app, a group license object is only created when an enterprise admin purchases the product in Google Play for the first time. Use the API to query group licenses. A Grouplicenses resource includes the total number of licenses purchased (paid apps only) and the total number of licenses currently in use. In other words, the total number of Entitlements that exist for the product. Only one group license object is created per product and group license objects are never deleted. If a product is unapproved, its group license remains. This allows enterprise admins to keep track of any remaining entitlements for the product.
 */
var GroupLicense = /** @class */ (function (_super) {
    __extends(GroupLicense, _super);
    function GroupLicense() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "acquisitionKind" }),
        __metadata("design:type", String)
    ], GroupLicense.prototype, "acquisitionKind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "approval" }),
        __metadata("design:type", String)
    ], GroupLicense.prototype, "approval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "numProvisioned" }),
        __metadata("design:type", Number)
    ], GroupLicense.prototype, "numProvisioned", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "numPurchased" }),
        __metadata("design:type", Number)
    ], GroupLicense.prototype, "numPurchased", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "permissions" }),
        __metadata("design:type", String)
    ], GroupLicense.prototype, "permissions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "productId" }),
        __metadata("design:type", String)
    ], GroupLicense.prototype, "productId", void 0);
    return GroupLicense;
}(utils_1.SpeakeasyBase));
exports.GroupLicense = GroupLicense;
