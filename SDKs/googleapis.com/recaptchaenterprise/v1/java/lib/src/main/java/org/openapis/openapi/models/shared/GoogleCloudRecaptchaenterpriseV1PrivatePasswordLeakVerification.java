/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification - Private password leak verification info.
 */
public class GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification {
    /**
     * Output only. List of prefixes of the encrypted potential password leaks that matched the given parameters. They must be compared with the client-side decryption prefix of `reencrypted_user_credentials_hash`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptedLeakMatchPrefixes")
    public String[] encryptedLeakMatchPrefixes;

    public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification withEncryptedLeakMatchPrefixes(String[] encryptedLeakMatchPrefixes) {
        this.encryptedLeakMatchPrefixes = encryptedLeakMatchPrefixes;
        return this;
    }
    
    /**
     * Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by the server and returned through `reencrypted_user_credentials_hash`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptedUserCredentialsHash")
    public String encryptedUserCredentialsHash;

    public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification withEncryptedUserCredentialsHash(String encryptedUserCredentialsHash) {
        this.encryptedUserCredentialsHash = encryptedUserCredentialsHash;
        return this;
    }
    
    /**
     * Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used to look up password leaks associated with that hash prefix.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lookupHashPrefix")
    public String lookupHashPrefix;

    public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification withLookupHashPrefix(String lookupHashPrefix) {
        this.lookupHashPrefix = lookupHashPrefix;
        return this;
    }
    
    /**
     * Output only. Corresponds to the re-encryption of the `encrypted_user_credentials_hash` field. It is used to match potential password leaks within `encrypted_leak_match_prefixes`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reencryptedUserCredentialsHash")
    public String reencryptedUserCredentialsHash;

    public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification withReencryptedUserCredentialsHash(String reencryptedUserCredentialsHash) {
        this.reencryptedUserCredentialsHash = reencryptedUserCredentialsHash;
        return this;
    }
    
    public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification(){}
}
