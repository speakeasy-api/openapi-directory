"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PaymentInstructionV3TransmissionTypeEnum(str, Enum):
    r"""Optionally choose a specific transmission method for the payment"""
    SAME_DAY_ACH = 'SAME_DAY_ACH'
    WIRE = 'WIRE'
    ACH = 'ACH'
    LOCAL = 'LOCAL'
    SWIFT = 'SWIFT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentInstructionV3:
    r"""Instruction for creating a payment"""
    
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""<p>Amount to send to Payee</p>
    <p>The maximum payment amount is dependent on the currency</p>
    """  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""Valid ISO 4217 3 letter currency code. See the <a href=\\"https://www.iso.org/iso-4217-currency-codes.html\\" target=\\"_blank\\" a>ISO specification</a> for details."""  
    remote_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId') }})
    r"""Your identifier for the payee"""  
    source_account_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountName') }})
    r"""Must match a valid source account name belonging to the payor"""  
    payment_memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMemo'), 'exclude': lambda f: f is None }})
    r"""<p>Any value here will override the memo value in the parent payout</p>
    <p>This should be the reference field on the statement seen by the payee (but not via ACH)</p>
    """  
    payment_metadata: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMetadata'), 'exclude': lambda f: f is None }})
    r"""<p>Metadata about the payment that may be relevant to the specific rails or remote system making the payout</p>
    <p>The structure of the data will be dictated by the requirements of the payment rails</p>
    """  
    payor_payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorPaymentId'), 'exclude': lambda f: f is None }})
    r"""A reference identifier for the payor for the given payee payment"""  
    remote_system_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteSystemId'), 'exclude': lambda f: f is None }})
    r"""<p>The identifier for the remote payments system if not Velo</p>
    <p>Should only be used after consultation with Velo Payments</p>
    """  
    transmission_type: Optional[PaymentInstructionV3TransmissionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transmissionType'), 'exclude': lambda f: f is None }})
    r"""Optionally choose a specific transmission method for the payment"""  
    