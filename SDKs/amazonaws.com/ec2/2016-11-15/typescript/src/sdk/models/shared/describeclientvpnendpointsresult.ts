/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The target network type.
 */
export enum DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum {
  Vpc = "vpc",
}

/**
 * Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  networkId?: string;

  @SpeakeasyMetadata()
  networkType?: DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum;
}

/**
 * Information about the Active Directory, if applicable.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory extends SpeakeasyBase {
  @SpeakeasyMetadata()
  directoryId?: string;
}

/**
 * Information about the IAM SAML identity provider, if applicable.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication extends SpeakeasyBase {
  @SpeakeasyMetadata()
  samlProviderArn?: string;

  @SpeakeasyMetadata()
  selfServiceSamlProviderArn?: string;
}

/**
 * Information about the authentication certificates, if applicable.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication extends SpeakeasyBase {
  @SpeakeasyMetadata()
  clientRootCertificateChain?: string;
}

/**
 * The authentication type used.
 */
export enum DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum {
  CertificateAuthentication = "certificate-authentication",
  DirectoryServiceAuthentication = "directory-service-authentication",
  FederatedAuthentication = "federated-authentication",
}

/**
 * Describes the authentication methods used by a Client VPN endpoint. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html">Authentication</a> in the <i>Client VPN Administrator Guide</i>.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  activeDirectory?: DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory;

  @SpeakeasyMetadata()
  federatedAuthentication?: DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication;

  @SpeakeasyMetadata()
  mutualAuthentication?: DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication;

  @SpeakeasyMetadata()
  type?: DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum;
}

/**
 * The status code.
 */
export enum DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum {
  Applying = "applying",
  Applied = "applied",
}

/**
 * The status of any updates to the client connect options.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * The options for managing connection authorization for new client connections.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  enabled?: boolean;

  @SpeakeasyMetadata()
  lambdaFunctionArn?: string;

  @SpeakeasyMetadata()
  status?: DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus;
}

/**
 * Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  bannerText?: string;

  @SpeakeasyMetadata()
  enabled?: boolean;
}

/**
 * Information about the client connection logging options for the Client VPN endpoint.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cloudwatchLogGroup?: string;

  @SpeakeasyMetadata()
  cloudwatchLogStream?: string;

  @SpeakeasyMetadata()
  enabled?: boolean;
}

/**
 * <p>The state of the Client VPN endpoint. Possible states include:</p> <ul> <li> <p> <code>pending-associate</code> - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>available</code> - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.</p> </li> <li> <p> <code>deleting</code> - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>deleted</code> - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.</p> </li> </ul>
 */
export enum DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum {
  PendingAssociate = "pending-associate",
  Available = "available",
  Deleting = "deleting",
  Deleted = "deleted",
}

/**
 * The current state of the Client VPN endpoint.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsStatus extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * Describes a tag.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpointsTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The transport protocol used by the Client VPN endpoint.
 */
export enum DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum {
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * The protocol used by the VPN session.
 */
export enum DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum {
  Openvpn = "openvpn",
}

/**
 * Describes a Client VPN endpoint.
 */
export class DescribeClientVpnEndpointsResultClientVpnEndpoints extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks,
  })
  associatedTargetNetworks?: DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks[];

  @SpeakeasyMetadata({
    elemType:
      DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions,
  })
  authenticationOptions?: DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions[];

  @SpeakeasyMetadata()
  clientCidrBlock?: string;

  @SpeakeasyMetadata()
  clientConnectOptions?: DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions;

  @SpeakeasyMetadata()
  clientLoginBannerOptions?: DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions;

  @SpeakeasyMetadata()
  clientVpnEndpointId?: string;

  @SpeakeasyMetadata()
  connectionLogOptions?: DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions;

  @SpeakeasyMetadata()
  creationTime?: string;

  @SpeakeasyMetadata()
  deletionTime?: string;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  dnsName?: string;

  @SpeakeasyMetadata()
  dnsServers?: string[];

  @SpeakeasyMetadata()
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  selfServicePortalUrl?: string;

  @SpeakeasyMetadata()
  serverCertificateArn?: string;

  @SpeakeasyMetadata()
  sessionTimeoutHours?: number;

  @SpeakeasyMetadata()
  splitTunnel?: boolean;

  @SpeakeasyMetadata()
  status?: DescribeClientVpnEndpointsResultClientVpnEndpointsStatus;

  @SpeakeasyMetadata({
    elemType: DescribeClientVpnEndpointsResultClientVpnEndpointsTags,
  })
  tags?: DescribeClientVpnEndpointsResultClientVpnEndpointsTags[];

  @SpeakeasyMetadata()
  transportProtocol?: DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum;

  @SpeakeasyMetadata()
  vpcId?: string;

  @SpeakeasyMetadata()
  vpnPort?: number;

  @SpeakeasyMetadata()
  vpnProtocol?: DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum;
}

/**
 * Success
 */
export class DescribeClientVpnEndpointsResult extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: DescribeClientVpnEndpointsResultClientVpnEndpoints,
  })
  clientVpnEndpoints?: DescribeClientVpnEndpointsResultClientVpnEndpoints[];

  @SpeakeasyMetadata()
  nextToken?: string;
}
