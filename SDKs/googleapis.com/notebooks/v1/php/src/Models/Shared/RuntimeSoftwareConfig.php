<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RuntimeSoftwareConfig - Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RuntimeSoftwareConfig
{
    /**
     * Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.
     * 
     * @var ?string $customGpuDriverPath
     */
	#[\JMS\Serializer\Annotation\SerializedName('customGpuDriverPath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $customGpuDriverPath = null;
    
    /**
     * Bool indicating whether JupyterLab terminal will be available or not. Default: False
     * 
     * @var ?bool $disableTerminal
     */
	#[\JMS\Serializer\Annotation\SerializedName('disableTerminal')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $disableTerminal = null;
    
    /**
     * Verifies core internal services are running. Default: True
     * 
     * @var ?bool $enableHealthMonitoring
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableHealthMonitoring')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enableHealthMonitoring = null;
    
    /**
     * Runtime will automatically shutdown after idle_shutdown_time. Default: True
     * 
     * @var ?bool $idleShutdown
     */
	#[\JMS\Serializer\Annotation\SerializedName('idleShutdown')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $idleShutdown = null;
    
    /**
     * Time in minutes to wait before shutting down runtime. Default: 180 minutes
     * 
     * @var ?int $idleShutdownTimeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('idleShutdownTimeout')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $idleShutdownTimeout = null;
    
    /**
     * Install Nvidia Driver automatically. Default: True
     * 
     * @var ?bool $installGpuDriver
     */
	#[\JMS\Serializer\Annotation\SerializedName('installGpuDriver')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $installGpuDriver = null;
    
    /**
     * Optional. Use a list of container images to use as Kernels in the notebook instance.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ContainerImage> $kernels
     */
	#[\JMS\Serializer\Annotation\SerializedName('kernels')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ContainerImage>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $kernels = null;
    
    /**
     * Bool indicating whether mixer client should be disabled. Default: False
     * 
     * @var ?bool $mixerDisabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('mixerDisabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $mixerDisabled = null;
    
    /**
     * Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).
     * 
     * @var ?string $notebookUpgradeSchedule
     */
	#[\JMS\Serializer\Annotation\SerializedName('notebookUpgradeSchedule')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $notebookUpgradeSchedule = null;
    
    /**
     * Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).
     * 
     * @var ?string $postStartupScript
     */
	#[\JMS\Serializer\Annotation\SerializedName('postStartupScript')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $postStartupScript = null;
    
    /**
     * Behavior for the post startup script.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\RuntimeSoftwareConfigPostStartupScriptBehaviorEnum $postStartupScriptBehavior
     */
	#[\JMS\Serializer\Annotation\SerializedName('postStartupScriptBehavior')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\RuntimeSoftwareConfigPostStartupScriptBehaviorEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RuntimeSoftwareConfigPostStartupScriptBehaviorEnum $postStartupScriptBehavior = null;
    
    /**
     * Output only. Bool indicating whether an newer image is available in an image family.
     * 
     * @var ?bool $upgradeable
     */
	#[\JMS\Serializer\Annotation\SerializedName('upgradeable')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $upgradeable = null;
    
    /**
     * Output only. version of boot image such as M100, from release label of the image.
     * 
     * @var ?string $version
     */
	#[\JMS\Serializer\Annotation\SerializedName('version')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $version = null;
    
	public function __construct()
	{
		$this->customGpuDriverPath = null;
		$this->disableTerminal = null;
		$this->enableHealthMonitoring = null;
		$this->idleShutdown = null;
		$this->idleShutdownTimeout = null;
		$this->installGpuDriver = null;
		$this->kernels = null;
		$this->mixerDisabled = null;
		$this->notebookUpgradeSchedule = null;
		$this->postStartupScript = null;
		$this->postStartupScriptBehavior = null;
		$this->upgradeable = null;
		$this->version = null;
	}
}
