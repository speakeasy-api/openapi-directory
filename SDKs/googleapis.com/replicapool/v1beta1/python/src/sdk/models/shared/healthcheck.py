"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HealthCheck:
    
    check_interval_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkIntervalSec'), 'exclude': lambda f: f is None }})
    r"""How often (in seconds) to make HTTP requests for this healthcheck. The default value is 5 seconds."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description for this health check."""  
    healthy_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthyThreshold'), 'exclude': lambda f: f is None }})
    r"""The number of consecutive health check requests that need to succeed before the replica is considered healthy again. The default value is 2."""  
    host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host'), 'exclude': lambda f: f is None }})
    r"""The value of the host header in the HTTP health check request. If left empty (default value), the localhost IP 127.0.0.1 will be used."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of this health check."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""The localhost request path to send this health check, in the format /path/to/use. For example, /healthcheck."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""The TCP port for the health check requests."""  
    timeout_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutSec'), 'exclude': lambda f: f is None }})
    r"""How long (in seconds) to wait before a timeout failure for this healthcheck. The default value is 5 seconds."""  
    unhealthy_threshold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unhealthyThreshold'), 'exclude': lambda f: f is None }})
    r"""The number of consecutive health check requests that need to fail in order to consider the replica unhealthy. The default value is 2."""  
    