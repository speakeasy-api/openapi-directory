<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - The Ticketmaster Discovery API allows you to search for events, attractions, or venues.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'//www.ticketmaster.com/discovery/v2',
	];
  	
	public V2 $v2;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->v2 = new V2(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
	
    /**
     * Attraction Search
     * 
     * Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\FindResponse
     */
	public function find(
        \OpenAPI\OpenAPI\Models\Operations\FindRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\FindResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/attractions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Attraction Details
     * 
     * Get details for a specific attraction using the unique identifier for the attraction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetResponse
     */
	public function get(
        \OpenAPI\OpenAPI\Models\Operations\GetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/attractions/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Genre Details
     * 
     * Get details for a specific genre using its unique identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGenreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGenreResponse
     */
	public function getGenre(
        \OpenAPI\OpenAPI\Models\Operations\GetGenreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGenreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/classifications/genres/{id}', \OpenAPI\OpenAPI\Models\Operations\GetGenreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGenreRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGenreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Event Images
     * 
     * Get images for a specific event using the unique identifier for the event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetImagesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetImagesResponse
     */
	public function getImages(
        \OpenAPI\OpenAPI\Models\Operations\GetImagesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetImagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/events/{id}/images', \OpenAPI\OpenAPI\Models\Operations\GetImagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetImagesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetImagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Segment Details
     * 
     * Get details for a specific segment using its unique identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSegmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSegmentResponse
     */
	public function getSegment(
        \OpenAPI\OpenAPI\Models\Operations\GetSegmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSegmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/classifications/segments/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSegmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSegmentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSegmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Sub-Genre Details
     * 
     * Get details for a specific sub-genre using its unique identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubgenreRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubgenreResponse
     */
	public function getSubgenre(
        \OpenAPI\OpenAPI\Models\Operations\GetSubgenreRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubgenreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/classifications/subgenres/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSubgenreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSubgenreRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubgenreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Classification Search
     * 
     * Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsResponse
     */
	public function getDiscoveryV2Classifications(
        \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/classifications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Classification Details
     * 
     * Get details for a specific segment, genre, or sub-genre using its unique identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsIdResponse
     */
	public function getDiscoveryV2ClassificationsId(
        \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/classifications/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2ClassificationsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Event Search
     * 
     * Find events and filter your search by location, date, availability, and much more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsResponse
     */
	public function getDiscoveryV2Events(
        \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/events');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Event Details
     * 
     * Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsIdResponse
     */
	public function getDiscoveryV2EventsId(
        \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/events/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2EventsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Venue Search
     * 
     * Find venues and filter your search by name, and much more.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesResponse
     */
	public function getDiscoveryV2Venues(
        \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/venues');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get Venue Details
     * 
     * Get details for a specific venue using the unique identifier for the venue.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesIdResponse
     */
	public function getDiscoveryV2VenuesId(
        \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/discovery/v2/venues/{id}', \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDiscoveryV2VenuesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}