// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PaginationAuthScopeEnum - The token scope required.
type PaginationAuthScopeEnum string

const (
	PaginationAuthScopeEnumCatalog  PaginationAuthScopeEnum = "Catalog"
	PaginationAuthScopeEnumCommerce PaginationAuthScopeEnum = "Commerce"
	PaginationAuthScopeEnumSettings PaginationAuthScopeEnum = "Settings"
)

func (e PaginationAuthScopeEnum) ToPointer() *PaginationAuthScopeEnum {
	return &e
}

func (e *PaginationAuthScopeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Catalog":
		fallthrough
	case "Commerce":
		fallthrough
	case "Settings":
		*e = PaginationAuthScopeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaginationAuthScopeEnum: %v", v)
	}
}

// PaginationAuthTypeEnum - The token type required to load the list.
type PaginationAuthTypeEnum string

const (
	PaginationAuthTypeEnumUserAccount PaginationAuthTypeEnum = "UserAccount"
	PaginationAuthTypeEnumUserProfile PaginationAuthTypeEnum = "UserProfile"
)

func (e PaginationAuthTypeEnum) ToPointer() *PaginationAuthTypeEnum {
	return &e
}

func (e *PaginationAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UserAccount":
		fallthrough
	case "UserProfile":
		*e = PaginationAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaginationAuthTypeEnum: %v", v)
	}
}

type PaginationAuth struct {
	// The token scope required.
	Scope PaginationAuthScopeEnum `json:"scope"`
	// The token type required to load the list.
	Type PaginationAuthTypeEnum `json:"type"`
}
