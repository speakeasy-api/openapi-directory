/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TestStopTestRunTestRun - Summary single test run on Xamarin Test Cloud
 */
public class TestStopTestRunTestRun {
    /**
     * The compiled version of the app binary
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appVersion")
    public String appVersion;
    public TestStopTestRunTestRun withAppVersion(String appVersion) {
        this.appVersion = appVersion;
        return this;
    }
    
    /**
     * The date and time the test was uploaded
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    public String date;
    public TestStopTestRunTestRun withDate(String date) {
        this.date = date;
        return this;
    }
    
    /**
     * Human readable explanation of the current test status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public TestStopTestRunTestRun withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The unique id of the test upload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public TestStopTestRunTestRun withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The device platform targeted by the test. Possible values are 'ios' or 'android'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform")
    public String platform;
    public TestStopTestRunTestRun withPlatform(String platform) {
        this.platform = platform;
        return this;
    }
    
    /**
     * The passed/failed state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultStatus")
    public String resultStatus;
    public TestStopTestRunTestRun withResultStatus(String resultStatus) {
        this.resultStatus = resultStatus;
        return this;
    }
    
    /**
     * The current status of the test run, in relation to the various phases
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runStatus")
    public String runStatus;
    public TestStopTestRunTestRun withRunStatus(String runStatus) {
        this.runStatus = runStatus;
        return this;
    }
    
    /**
     * Deprecated. Use runStatus instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;
    public TestStopTestRunTestRun withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * Summary single test run on Xamarin Test Cloud
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stats")
    public TestStopTestRunTestRunTestRunStatistics stats;
    public TestStopTestRunTestRun withStats(TestStopTestRunTestRunTestRunStatistics stats) {
        this.stats = stats;
        return this;
    }
    
    /**
     * Deprecated. Use resultStatus instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public TestStopTestRunTestRun withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The name of the test series with which this test upload is associated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testSeries")
    public String testSeries;
    public TestStopTestRunTestRun withTestSeries(String testSeries) {
        this.testSeries = testSeries;
        return this;
    }
    
    /**
     * The name of the test framework used to run this test
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testType")
    public String testType;
    public TestStopTestRunTestRun withTestType(String testType) {
        this.testType = testType;
        return this;
    }
    
}
