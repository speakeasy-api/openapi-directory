"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GoogleCloudDialogflowCxV3Intent = void 0;
var utils_1 = require("../../../internal/utils");
var googleclouddialogflowcxv3intentparameter_1 = require("./googleclouddialogflowcxv3intentparameter");
var googleclouddialogflowcxv3intenttrainingphrase_1 = require("./googleclouddialogflowcxv3intenttrainingphrase");
var class_transformer_1 = require("class-transformer");
/**
 * An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent.
 */
var GoogleCloudDialogflowCxV3Intent = /** @class */ (function (_super) {
    __extends(GoogleCloudDialogflowCxV3Intent, _super);
    function GoogleCloudDialogflowCxV3Intent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "displayName" }),
        __metadata("design:type", String)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "displayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isFallback" }),
        __metadata("design:type", Boolean)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "isFallback", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: googleclouddialogflowcxv3intentparameter_1.GoogleCloudDialogflowCxV3IntentParameter }),
        (0, class_transformer_1.Expose)({ name: "parameters" }),
        (0, class_transformer_1.Type)(function () { return googleclouddialogflowcxv3intentparameter_1.GoogleCloudDialogflowCxV3IntentParameter; }),
        __metadata("design:type", Array)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "parameters", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "priority" }),
        __metadata("design:type", Number)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "priority", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: googleclouddialogflowcxv3intenttrainingphrase_1.GoogleCloudDialogflowCxV3IntentTrainingPhrase,
        }),
        (0, class_transformer_1.Expose)({ name: "trainingPhrases" }),
        (0, class_transformer_1.Type)(function () { return googleclouddialogflowcxv3intenttrainingphrase_1.GoogleCloudDialogflowCxV3IntentTrainingPhrase; }),
        __metadata("design:type", Array)
    ], GoogleCloudDialogflowCxV3Intent.prototype, "trainingPhrases", void 0);
    return GoogleCloudDialogflowCxV3Intent;
}(utils_1.SpeakeasyBase));
exports.GoogleCloudDialogflowCxV3Intent = GoogleCloudDialogflowCxV3Intent;
