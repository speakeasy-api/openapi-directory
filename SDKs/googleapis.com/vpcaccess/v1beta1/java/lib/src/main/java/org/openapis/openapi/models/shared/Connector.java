/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Connector - Definition of a Serverless VPC Access connector.
 */
public class Connector {
    /**
     * Output only. List of projects using the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectedProjects")
    public String[] connectedProjects;

    public Connector withConnectedProjects(String[] connectedProjects) {
        this.connectedProjects = connectedProjects;
        return this;
    }
    
    /**
     * The range of internal addresses that follows RFC 4632 notation. Example: `10.132.0.0/28`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipCidrRange")
    public String ipCidrRange;

    public Connector withIpCidrRange(String ipCidrRange) {
        this.ipCidrRange = ipCidrRange;
        return this;
    }
    
    /**
     * Machine type of VM Instance underlying connector. Default is e2-micro
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineType")
    public String machineType;

    public Connector withMachineType(String machineType) {
        this.machineType = machineType;
        return this;
    }
    
    /**
     * Maximum value of instances in autoscaling group underlying the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxInstances")
    public Integer maxInstances;

    public Connector withMaxInstances(Integer maxInstances) {
        this.maxInstances = maxInstances;
        return this;
    }
    
    /**
     * Maximum throughput of the connector in Mbps. Default is 300, max is 1000.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxThroughput")
    public Integer maxThroughput;

    public Connector withMaxThroughput(Integer maxThroughput) {
        this.maxThroughput = maxThroughput;
        return this;
    }
    
    /**
     * Minimum value of instances in autoscaling group underlying the connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minInstances")
    public Integer minInstances;

    public Connector withMinInstances(Integer minInstances) {
        this.minInstances = minInstances;
        return this;
    }
    
    /**
     * Minimum throughput of the connector in Mbps. Default and min is 200.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minThroughput")
    public Integer minThroughput;

    public Connector withMinThroughput(Integer minThroughput) {
        this.minThroughput = minThroughput;
        return this;
    }
    
    /**
     * The resource name in the format `projects/* /locations/* /connectors/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Connector withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Name of a VPC network.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")
    public String network;

    public Connector withNetwork(String network) {
        this.network = network;
        return this;
    }
    
    /**
     * Output only. State of the VPC access connector.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ConnectorStateEnum state;

    public Connector withState(ConnectorStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The subnet in which to house the connector
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnet")
    public Subnet subnet;

    public Connector withSubnet(Subnet subnet) {
        this.subnet = subnet;
        return this;
    }
    
    public Connector(){}
}
