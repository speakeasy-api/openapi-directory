// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type PutSessionPathParams struct {
	// The alias identifier of the bot that receives the session data.
	BotAliasID string `pathParam:"style=simple,explode=false,name=botAliasId"`
	// The identifier of the bot that receives the session data.
	BotID string `pathParam:"style=simple,explode=false,name=botId"`
	// The locale where the session is in use.
	LocaleID string `pathParam:"style=simple,explode=false,name=localeId"`
	// The identifier of the session that receives the session data.
	SessionID string `pathParam:"style=simple,explode=false,name=sessionId"`
}

type PutSessionHeaders struct {
	// <p>The message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter. </p> <ul> <li> <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex V2 returns text in the response.</p> </li> </ul>
	ResponseContentType *string `header:"style=simple,explode=false,name=ResponseContentType"`
	XAmzAlgorithm       *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// PutSessionRequestBodySessionState - The state of the user's session with Amazon Lex V2.
type PutSessionRequestBodySessionState struct {
	ActiveContexts       []shared.ActiveContext `json:"activeContexts,omitempty"`
	DialogAction         *shared.DialogAction   `json:"dialogAction,omitempty"`
	Intent               *shared.Intent         `json:"intent,omitempty"`
	OriginatingRequestID *string                `json:"originatingRequestId,omitempty"`
	RuntimeHints         *shared.RuntimeHints   `json:"runtimeHints,omitempty"`
	SessionAttributes    map[string]string      `json:"sessionAttributes,omitempty"`
}

type PutSessionRequestBody struct {
	// A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
	Messages []shared.Message `json:"messages,omitempty"`
	// <p>Request-specific information passed between Amazon Lex V2 and the client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>
	RequestAttributes map[string]string `json:"requestAttributes,omitempty"`
	// The state of the user's session with Amazon Lex V2.
	SessionState PutSessionRequestBodySessionState `json:"sessionState"`
}

type PutSessionRequest struct {
	PathParams PutSessionPathParams
	Headers    PutSessionHeaders
	Request    PutSessionRequestBody `request:"mediaType=application/json"`
}

type PutSessionResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// BadGatewayException
	BadGatewayException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// DependencyFailedException
	DependencyFailedException interface{}
	// InternalServerException
	InternalServerException interface{}
	// Success
	PutSessionResponse *shared.PutSessionResponse
	StatusCode         int
	RawResponse        *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
