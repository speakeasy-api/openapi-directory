// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateInstanceEventWindowResultInstanceEventWindowAssociationTargetTags - Describes a tag.
type CreateInstanceEventWindowResultInstanceEventWindowAssociationTargetTags struct {
	Key   *string
	Value *string
}

// CreateInstanceEventWindowResultInstanceEventWindowAssociationTarget - One or more targets associated with the event window.
type CreateInstanceEventWindowResultInstanceEventWindowAssociationTarget struct {
	DedicatedHostIds []string
	InstanceIds      []string
	Tags             []CreateInstanceEventWindowResultInstanceEventWindowAssociationTargetTags
}

// CreateInstanceEventWindowResultInstanceEventWindowStateEnum - The current state of the event window.
type CreateInstanceEventWindowResultInstanceEventWindowStateEnum string

const (
	CreateInstanceEventWindowResultInstanceEventWindowStateEnumCreating CreateInstanceEventWindowResultInstanceEventWindowStateEnum = "creating"
	CreateInstanceEventWindowResultInstanceEventWindowStateEnumDeleting CreateInstanceEventWindowResultInstanceEventWindowStateEnum = "deleting"
	CreateInstanceEventWindowResultInstanceEventWindowStateEnumActive   CreateInstanceEventWindowResultInstanceEventWindowStateEnum = "active"
	CreateInstanceEventWindowResultInstanceEventWindowStateEnumDeleted  CreateInstanceEventWindowResultInstanceEventWindowStateEnum = "deleted"
)

func (e *CreateInstanceEventWindowResultInstanceEventWindowStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "creating":
		fallthrough
	case "deleting":
		fallthrough
	case "active":
		fallthrough
	case "deleted":
		*e = CreateInstanceEventWindowResultInstanceEventWindowStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInstanceEventWindowResultInstanceEventWindowStateEnum: %s", s)
	}
}

// CreateInstanceEventWindowResultInstanceEventWindowTags - Describes a tag.
type CreateInstanceEventWindowResultInstanceEventWindowTags struct {
	Key   *string
	Value *string
}

// CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum - The day on which the time range ends.
type CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum string

const (
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumSunday    CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "sunday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumMonday    CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "monday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumTuesday   CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "tuesday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumWednesday CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "wednesday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumThursday  CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "thursday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumFriday    CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "friday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnumSaturday  CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum = "saturday"
)

func (e *CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum: %s", s)
	}
}

// CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum - The day on which the time range begins.
type CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum string

const (
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumSunday    CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "sunday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumMonday    CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "monday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumTuesday   CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "tuesday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumWednesday CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "wednesday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumThursday  CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "thursday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumFriday    CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "friday"
	CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnumSaturday  CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum = "saturday"
)

func (e *CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum: %s", s)
	}
}

// CreateInstanceEventWindowResultInstanceEventWindowTimeRanges - The start day and time and the end day and time of the time range, in UTC.
type CreateInstanceEventWindowResultInstanceEventWindowTimeRanges struct {
	EndHour      *int64
	EndWeekDay   *CreateInstanceEventWindowResultInstanceEventWindowTimeRangesEndWeekDayEnum
	StartHour    *int64
	StartWeekDay *CreateInstanceEventWindowResultInstanceEventWindowTimeRangesStartWeekDayEnum
}

// CreateInstanceEventWindowResultInstanceEventWindow - Information about the event window.
type CreateInstanceEventWindowResultInstanceEventWindow struct {
	AssociationTarget     *CreateInstanceEventWindowResultInstanceEventWindowAssociationTarget
	CronExpression        *string
	InstanceEventWindowID *string
	Name                  *string
	State                 *CreateInstanceEventWindowResultInstanceEventWindowStateEnum
	Tags                  []CreateInstanceEventWindowResultInstanceEventWindowTags
	TimeRanges            []CreateInstanceEventWindowResultInstanceEventWindowTimeRanges
}

// CreateInstanceEventWindowResult - Success
type CreateInstanceEventWindowResult struct {
	InstanceEventWindow *CreateInstanceEventWindowResultInstanceEventWindow
}
