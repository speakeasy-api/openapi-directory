"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import onenterlifecycle as shared_onenterlifecycle
from ..shared import onexitlifecycle as shared_onexitlifecycle
from ..shared import oninputlifecycle as shared_oninputlifecycle
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class State:
    r"""Information that defines a state of a detector."""
    
    state_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stateName') }})  
    on_enter: Optional[shared_onenterlifecycle.OnEnterLifecycle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onEnter'), 'exclude': lambda f: f is None }})  
    on_exit: Optional[shared_onexitlifecycle.OnExitLifecycle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onExit'), 'exclude': lambda f: f is None }})  
    on_input: Optional[shared_oninputlifecycle.OnInputLifecycle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('onInput'), 'exclude': lambda f: f is None }})  
    