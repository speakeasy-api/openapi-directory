// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TrainProjectJSONPathParams struct {
	// The project id.
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
}

// TrainProjectJSONTrainingTypeEnum - The type of training to use to train the project (default: Regular).
type TrainProjectJSONTrainingTypeEnum string

const (
	TrainProjectJSONTrainingTypeEnumRegular  TrainProjectJSONTrainingTypeEnum = "Regular"
	TrainProjectJSONTrainingTypeEnumAdvanced TrainProjectJSONTrainingTypeEnum = "Advanced"
)

func (e *TrainProjectJSONTrainingTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Regular":
		fallthrough
	case "Advanced":
		*e = TrainProjectJSONTrainingTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TrainProjectJSONTrainingTypeEnum: %s", s)
	}
}

type TrainProjectJSONQueryParams struct {
	// Whether to force train even if dataset and configuration does not change (default: false).
	ForceTrain *bool `queryParam:"style=form,explode=true,name=forceTrain"`
	// The email address to send notification to when training finishes (default: null).
	NotificationEmailAddress *string `queryParam:"style=form,explode=true,name=notificationEmailAddress"`
	// The number of hours reserved as budget for training (if applicable).
	ReservedBudgetInHours *int `queryParam:"style=form,explode=true,name=reservedBudgetInHours"`
	// The type of training to use to train the project (default: Regular).
	TrainingType *TrainProjectJSONTrainingTypeEnum `queryParam:"style=form,explode=true,name=trainingType"`
}

type TrainProjectJSONRequest struct {
	PathParams  TrainProjectJSONPathParams
	QueryParams TrainProjectJSONQueryParams
	// Additional training parameters passed in to control how the project is trained.
	Request *shared.TrainingParameters `request:"mediaType=application/json"`
}

type TrainProjectJSONResponse struct {
	Body        []byte
	ContentType string
	// Error response
	CustomVisionError *shared.CustomVisionError
	// OK
	Iteration   *shared.Iteration
	StatusCode  int
	RawResponse *http.Response
}
