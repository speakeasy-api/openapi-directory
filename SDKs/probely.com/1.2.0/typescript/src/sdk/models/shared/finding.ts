/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Assignee } from "./assignee";
import { ChangedBy } from "./changedby";
import { Definition } from "./definition";
import { FindingInsertionPointEnum } from "./findinginsertionpointenum";
import { FindingSeverityEnum } from "./findingseverityenum";
import { FindingStateEnum } from "./findingstateenum";
import { MethodEnum } from "./methodenum";
import { Reporter } from "./reporter";
import { Requests } from "./requests";
import { TargetSimple } from "./targetsimple";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Event object.
 */
export class Finding extends SpeakeasyBase {
  /**
   * Assigned user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee" })
  @Type(() => Assignee)
  assignee?: Assignee;

  /**
   * Date time of the last change
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  changed?: Date;

  /**
   * User that last modified the object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "changed_by" })
  @Type(() => ChangedBy)
  changedBy?: ChangedBy;

  /**
   * User comment left on the finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "comment" })
  comment?: string;

  /**
   * CVSS score
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cvss_score" })
  cvssScore?: number;

  /**
   * CVSS vector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cvss_vector" })
  cvssVector?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "definition" })
  @Type(() => Definition)
  definition?: Definition;

  /**
   * Evidence for the finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "evidence" })
  evidence?: string;

  /**
   * Extra data for the finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extra" })
  extra?: string;

  /**
   * Fix sugestion for the vulnerability and framework
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fix" })
  fix?: string;

  /**
   * Object id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * An insertion point is the place in the HTTP request where the
   *
   * @remarks
   * malicious payload is injected to exploit the vulnerability.
   *   * cookie - Payload injected into the value of an HTTP cookie
   *   * header - Payload injected into the header of an HTTP request
   *   * parameter - Payload injected into the value of a query string
   *   parameter
   *   * arbitrary_url_param - Payload injected into the value of an
   *   arbitrarily added query string parameter
   *   * url_filename - Payload injected into the URL filename part
   *   * url_folder - Payload injected into the URL folder part
   *   * multipart_parameter - Payload is inserted into the value of a
   *   parameter attribute within a multi-part message body (such as
   *   the name of an uploaded file).
   *   * <empty> - No payload to inject.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insertion_point" })
  insertionPoint?: FindingInsertionPointEnum;

  /**
   * User labels for the finding.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: string[];

  /**
   * Date time of the last time the vulnerability was found.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_found" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastFound?: Date;

  /**
   * HTTP method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: MethodEnum;

  /**
   * Vulnerable paramenter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameter" })
  parameter?: string;

  /**
   * Request parameters
   */
  @SpeakeasyMetadata()
  @Expose({ name: "params" })
  params?: string;

  /**
   * Finding path.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;

  /**
   * Reporting user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reporter" })
  @Type(() => Reporter)
  reporter?: Reporter;

  /**
   * Request response pairs that produced the finding
   */
  @SpeakeasyMetadata({ elemType: Requests })
  @Expose({ name: "requests" })
  @Type(() => Requests)
  requests?: Requests[];

  /**
   * Scan ids where this finding was present.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scans" })
  scans?: string[];

  /**
   * Severity, how serious the issue is considered:
   *
   * @remarks
   *   * 10 - low
   *   * 20 - medium
   *   * 30 - high
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: FindingSeverityEnum;

  /**
   * Finding state:
   *
   * @remarks
   *   * notfixed - Issue can still be exploited
   *   * invalid - Issue determined to be a false positive
   *   * accepted - Issue will not be solved and the risk was accepted
   *   * fixed - No problem here anymore
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: FindingStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "target" })
  @Type(() => TargetSimple)
  target?: TargetSimple;

  /**
   * Full finding URL
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  /**
   * Value for parameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}
