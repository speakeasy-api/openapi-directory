<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RbsHostOperationRequest - Configuration parameters to install RBS on a host.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RbsHostOperationRequest
{
    /**
     * IP address or hostname of the host.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The operation mode determines if the API call waits until the operation is completed or returns immediately. The default operation mode is synchronous.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OperationModeEnum $operationMode
     */
	#[\JMS\Serializer\Annotation\SerializedName('operationMode')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\OperationModeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OperationModeEnum $operationMode = null;
    
    /**
     * Number of seconds after which the operation is terminated if it has not completed execution. Default value is 600 seconds.
     * 
     * @var ?int $operationTimeout
     */
	#[\JMS\Serializer\Annotation\SerializedName('operationTimeout')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $operationTimeout = null;
    
    /**
     * Password associated with the username that has access to the host.
     * 
     * @var string $password
     */
	#[\JMS\Serializer\Annotation\SerializedName('password')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $password;
    
    /**
     * Name of the user account that has sudo/admin privileges on the RBS host. This is required to install/uninstall/upgrade RBS packages on the RBS host.
     * 
     * @var string $username
     */
	#[\JMS\Serializer\Annotation\SerializedName('username')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $username;
    
	public function __construct()
	{
		$this->name = "";
		$this->operationMode = null;
		$this->operationTimeout = null;
		$this->password = "";
		$this->username = "";
	}
}
