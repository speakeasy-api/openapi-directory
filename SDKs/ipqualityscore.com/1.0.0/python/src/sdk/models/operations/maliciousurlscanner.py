"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class MaliciousURLScannerRequest:
    
    url_here: str = dataclasses.field(metadata={'path_param': { 'field_name': 'URL_HERE', 'style': 'simple', 'explode': False }})
    r"""(Required) URL_HERE"""  
    your_api_key_here: str = dataclasses.field(metadata={'path_param': { 'field_name': 'YOUR_API_KEY_HERE', 'style': 'simple', 'explode': False }})
    r"""(Required) YOUR_API_KEY_HERE"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MaliciousURLScanner500ApplicationJSON:
    r"""Unexpected error"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MaliciousURLScanner400ApplicationJSON:
    r"""Bad Request"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MaliciousURLScanner200ApplicationJSONDomainAge:
    
    human: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('human'), 'exclude': lambda f: f is None }})  
    iso: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iso'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MaliciousURLScanner200ApplicationJSON:
    r"""Successful response"""
    
    adult: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adult'), 'exclude': lambda f: f is None }})  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_type'), 'exclude': lambda f: f is None }})  
    dns_valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_valid'), 'exclude': lambda f: f is None }})  
    domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain'), 'exclude': lambda f: f is None }})  
    domain_age: Optional[MaliciousURLScanner200ApplicationJSONDomainAge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_age'), 'exclude': lambda f: f is None }})  
    domain_rank: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_rank'), 'exclude': lambda f: f is None }})  
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip_address'), 'exclude': lambda f: f is None }})  
    malware: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('malware'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    page_size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})  
    parking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parking'), 'exclude': lambda f: f is None }})  
    phishing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phishing'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id'), 'exclude': lambda f: f is None }})  
    risk_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('risk_score'), 'exclude': lambda f: f is None }})  
    server: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})  
    spamming: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spamming'), 'exclude': lambda f: f is None }})  
    status_code: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_code'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    suspicious: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspicious'), 'exclude': lambda f: f is None }})  
    unsafe: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unsafe'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class MaliciousURLScannerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    malicious_url_scanner_200_application_json_object: Optional[MaliciousURLScanner200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful response"""  
    malicious_url_scanner_400_application_json_object: Optional[MaliciousURLScanner400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    malicious_url_scanner_500_application_json_object: Optional[MaliciousURLScanner500ApplicationJSON] = dataclasses.field(default=None)
    r"""Unexpected error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    