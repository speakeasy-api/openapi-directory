/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Schema of any given field described in the `properties` field.
 */
export class SchemaPropertiesFieldName extends SpeakeasyBase {
  /**
   * Object containing the type of the items if the field is an array. Typically, arrays will contain strings and will be used for fields such as `email`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "items" })
  items?: Record<string, any>;

  /**
   * Indicates whether property is Personal Identifiable Information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pii" })
  pii: boolean;

  /**
   * Indicates whether property is sensitive data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sensitive" })
  sensitive: boolean;

  /**
   * Schema property type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: `type` (string); `sensitive` (boolean); `pii` (boolean) and; `items.type` (if field is array).
 */
export class SchemaProperties extends SpeakeasyBase {
  /**
   * Schema of any given field described in the `properties` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "{fieldName}" })
  @Type(() => SchemaPropertiesFieldName)
  fieldName?: SchemaPropertiesFieldName;
}

export class Schema extends SpeakeasyBase {
  /**
   * Schema's human readable description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Document time to live, in days. After this many days from its creation or update, any document cerated from this schema will be deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentTTL" })
  documentTTL?: number;

  /**
   * Object describing each field in your desired schema. In this object, each property is a new object, describing the field according to: `type` (string); `sensitive` (boolean); `pii` (boolean) and; `items.type` (if field is array).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  @Type(() => SchemaProperties)
  properties: SchemaProperties;

  /**
   * Schema required fields.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required: string[];

  /**
   * Schema title.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;

  /**
   * Schema type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;

  @SpeakeasyMetadata()
  @Expose({ name: "v-indexed" })
  vIndexed?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "v-unique" })
  vUnique?: any[];

  /**
   * Schema version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: number;
}
