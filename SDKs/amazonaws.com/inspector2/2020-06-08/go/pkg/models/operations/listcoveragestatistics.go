// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListCoverageStatisticsQueryParams struct {
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type ListCoverageStatisticsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// ListCoverageStatisticsRequestBodyFilterCriteria - A structure that identifies filter criteria for <code>GetCoverageStatistics</code>.
type ListCoverageStatisticsRequestBodyFilterCriteria struct {
	AccountID             []shared.CoverageStringFilter `json:"accountId,omitempty"`
	Ec2InstanceTags       []shared.CoverageMapFilter    `json:"ec2InstanceTags,omitempty"`
	EcrImageTags          []shared.CoverageStringFilter `json:"ecrImageTags,omitempty"`
	EcrRepositoryName     []shared.CoverageStringFilter `json:"ecrRepositoryName,omitempty"`
	LambdaFunctionName    []shared.CoverageStringFilter `json:"lambdaFunctionName,omitempty"`
	LambdaFunctionRuntime []shared.CoverageStringFilter `json:"lambdaFunctionRuntime,omitempty"`
	LambdaFunctionTags    []shared.CoverageMapFilter    `json:"lambdaFunctionTags,omitempty"`
	ResourceID            []shared.CoverageStringFilter `json:"resourceId,omitempty"`
	ResourceType          []shared.CoverageStringFilter `json:"resourceType,omitempty"`
	ScanStatusCode        []shared.CoverageStringFilter `json:"scanStatusCode,omitempty"`
	ScanStatusReason      []shared.CoverageStringFilter `json:"scanStatusReason,omitempty"`
	ScanType              []shared.CoverageStringFilter `json:"scanType,omitempty"`
}

// ListCoverageStatisticsRequestBodyGroupByEnum - The value to group the results by.
type ListCoverageStatisticsRequestBodyGroupByEnum string

const (
	ListCoverageStatisticsRequestBodyGroupByEnumScanStatusCode    ListCoverageStatisticsRequestBodyGroupByEnum = "SCAN_STATUS_CODE"
	ListCoverageStatisticsRequestBodyGroupByEnumScanStatusReason  ListCoverageStatisticsRequestBodyGroupByEnum = "SCAN_STATUS_REASON"
	ListCoverageStatisticsRequestBodyGroupByEnumAccountID         ListCoverageStatisticsRequestBodyGroupByEnum = "ACCOUNT_ID"
	ListCoverageStatisticsRequestBodyGroupByEnumResourceType      ListCoverageStatisticsRequestBodyGroupByEnum = "RESOURCE_TYPE"
	ListCoverageStatisticsRequestBodyGroupByEnumEcrRepositoryName ListCoverageStatisticsRequestBodyGroupByEnum = "ECR_REPOSITORY_NAME"
)

func (e *ListCoverageStatisticsRequestBodyGroupByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SCAN_STATUS_CODE":
		fallthrough
	case "SCAN_STATUS_REASON":
		fallthrough
	case "ACCOUNT_ID":
		fallthrough
	case "RESOURCE_TYPE":
		fallthrough
	case "ECR_REPOSITORY_NAME":
		*e = ListCoverageStatisticsRequestBodyGroupByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCoverageStatisticsRequestBodyGroupByEnum: %s", s)
	}
}

type ListCoverageStatisticsRequestBody struct {
	// A structure that identifies filter criteria for <code>GetCoverageStatistics</code>.
	FilterCriteria *ListCoverageStatisticsRequestBodyFilterCriteria `json:"filterCriteria,omitempty"`
	// The value to group the results by.
	GroupBy *ListCoverageStatisticsRequestBodyGroupByEnum `json:"groupBy,omitempty"`
	// A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.
	NextToken *string `json:"nextToken,omitempty"`
}

type ListCoverageStatisticsRequest struct {
	QueryParams ListCoverageStatisticsQueryParams
	Headers     ListCoverageStatisticsHeaders
	Request     ListCoverageStatisticsRequestBody `request:"mediaType=application/json"`
}

type ListCoverageStatisticsResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListCoverageStatisticsResponse *shared.ListCoverageStatisticsResponse
	StatusCode                     int
	RawResponse                    *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
