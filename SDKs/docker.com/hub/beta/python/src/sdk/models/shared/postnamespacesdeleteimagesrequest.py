"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostNamespacesDeleteImagesRequestIgnoreWarningsWarningEnum(str, Enum):
    r"""Warning to ignore."""
    IS_ACTIVE = 'is_active'
    CURRENT_TAG = 'current_tag'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesRequestIgnoreWarnings:
    
    digest: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digest') }})
    r"""Digest of the image to ignore the warning for."""  
    repository: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository') }})
    r"""Name of the repository of the image to ignore the warning for."""  
    warning: PostNamespacesDeleteImagesRequestIgnoreWarningsWarningEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warning') }})
    r"""Warning to ignore."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Current tags to ignore."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesRequestManifests:
    
    digest: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('digest') }})
    r"""Digest of the image to delete."""  
    repository: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository') }})
    r"""Name of the repository to delete the image from."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostNamespacesDeleteImagesRequest:
    r"""Delete images request."""
    
    active_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_from'), 'exclude': lambda f: f is None }})
    r"""Sets the time from which an image must have been pushed or pulled to
    be counted as active.
    
    Defaults to 1 month before the current time.
    """  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dry_run'), 'exclude': lambda f: f is None }})
    r"""If `true` then will check and return errors and unignored warnings for the deletion request but will not delete any images."""  
    ignore_warnings: Optional[list[PostNamespacesDeleteImagesRequestIgnoreWarnings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignore_warnings'), 'exclude': lambda f: f is None }})
    r"""Warnings to ignore. If a warning is not ignored then no deletions will happen and the
    warning is returned in the response.
    
    These warnings include:
    
    - is_active: warning when attempting to delete an image that is marked as active.
    - current_tag: warning when attempting to delete an image that has one or more current 
    tags in the repository.
    
    Warnings can be copied from the response to the request.
    """  
    manifests: Optional[list[PostNamespacesDeleteImagesRequestManifests]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manifests'), 'exclude': lambda f: f is None }})
    r"""Image manifests to delete."""  
    