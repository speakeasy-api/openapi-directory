/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Href } from "./href";
import { Expose, Transform, Type } from "class-transformer";

export class DocumentLinks extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Href })
  @Expose({ name: "admins" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Href> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Href);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  admins?: Record<string, Href>;

  @SpeakeasyMetadata()
  @Expose({ name: "download" })
  @Type(() => Href)
  download?: Href;

  @SpeakeasyMetadata({ elemType: Href })
  @Expose({ name: "editors" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Href> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Href);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  editors?: Record<string, Href>;

  @SpeakeasyMetadata()
  @Expose({ name: "preview-box" })
  @Type(() => Href)
  previewBox?: Href;

  @SpeakeasyMetadata()
  @Expose({ name: "preview-pdf" })
  @Type(() => Href)
  previewPdf?: Href;

  @SpeakeasyMetadata()
  @Expose({ name: "preview-pdf-viewer" })
  @Type(() => Href)
  previewPdfViewer?: Href;

  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  @Type(() => Href)
  progress?: Href;

  @SpeakeasyMetadata()
  @Expose({ name: "project" })
  @Type(() => Href)
  project?: Href;

  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => Href)
  self?: Href;

  @SpeakeasyMetadata()
  @Expose({ name: "strings" })
  @Type(() => Href)
  strings?: Href;

  @SpeakeasyMetadata()
  @Expose({ name: "thumbnail" })
  @Type(() => Href)
  thumbnail?: Href;
}
