/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BuildingAddress - Public API: Resources.buildings
 */
public class BuildingAddress {
    /**
     * Unstructured address lines describing the lower levels of an address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressLines")
    public String[] addressLines;

    public BuildingAddress withAddressLines(String[] addressLines) {
        this.addressLines = addressLines;
        return this;
    }
    
    /**
     * Optional. Highest administrative subdivision which is used for postal addresses of a country or region.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("administrativeArea")
    public String administrativeArea;

    public BuildingAddress withAdministrativeArea(String administrativeArea) {
        this.administrativeArea = administrativeArea;
        return this;
    }
    
    /**
     * Optional. BCP-47 language code of the contents of this address (if known).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;

    public BuildingAddress withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locality")
    public String locality;

    public BuildingAddress withLocality(String locality) {
        this.locality = locality;
        return this;
    }
    
    /**
     * Optional. Postal code of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    public String postalCode;

    public BuildingAddress withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * Required. CLDR region code of the country/region of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regionCode")
    public String regionCode;

    public BuildingAddress withRegionCode(String regionCode) {
        this.regionCode = regionCode;
        return this;
    }
    
    /**
     * Optional. Sublocality of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sublocality")
    public String sublocality;

    public BuildingAddress withSublocality(String sublocality) {
        this.sublocality = sublocality;
        return this;
    }
    
    public BuildingAddress(){}
}
