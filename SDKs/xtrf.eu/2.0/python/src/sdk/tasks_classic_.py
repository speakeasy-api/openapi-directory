"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TasksClassic:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_file(self, request: operations.AddFileRequest) -> operations.AddFileResponse:
        r"""Adds files to a given task.
        Adds files to a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddFileRequest, base_url, '/tasks/{taskId}/files/input', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_14(self, request: operations.Delete14Request) -> operations.Delete14Response:
        r"""Removes a task.
        Removes a task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Delete14Request, base_url, '/tasks/{taskId}', request)
        
        query_params = utils.get_query_params(operations.Delete14Request, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Delete14Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_contacts_1(self, request: operations.GetContacts1Request) -> operations.GetContacts1Response:
        r"""Returns contacts of a given task.
        Returns contacts of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContacts1Request, base_url, '/tasks/{taskId}/contacts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContacts1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactsDTO])
                res.contacts_dto = out

        return res

    def get_custom_fields_7(self, request: operations.GetCustomFields7Request) -> operations.GetCustomFields7Response:
        r"""Returns custom fields of a given task.
        Returns custom fields of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields7Request, base_url, '/tasks/{taskId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields7Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_dates_3(self, request: operations.GetDates3Request) -> operations.GetDates3Response:
        r"""Returns dates of a given task.
        Returns dates of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDates3Request, base_url, '/tasks/{taskId}/dates', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDates3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDatesDTO])
                res.project_dates_dto = out

        return res

    def get_instructions_2(self, request: operations.GetInstructions2Request) -> operations.GetInstructions2Response:
        r"""Returns instructions of a given task.
        Returns instructions of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetInstructions2Request, base_url, '/tasks/{taskId}/instructions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInstructions2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InstructionsDTO])
                res.instructions_dto = out

        return res

    def get_progress(self, request: operations.GetProgressRequest) -> operations.GetProgressResponse:
        r"""Returns progress of a given task.
        Returns progress of a given task. Progress contains information about task's status (ie. opened or ready) and current phase (ie. translation). Workflow phase is defined as the first one which contains not ready jobs (ie. opened or started). When no such job exists then workflow phase is not included.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProgressRequest, base_url, '/tasks/{taskId}/progress', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgressResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskProgressDTO])
                res.task_progress_dto = out

        return res

    def get_task_files(self, request: operations.GetTaskFilesRequest) -> operations.GetTaskFilesResponse:
        r"""Returns lists of files of a given task.
        Returns several lists of files for a given task: input files divided by type, output files, bundles, files per job, preview files.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTaskFilesRequest, base_url, '/tasks/{taskId}/files', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTaskFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TaskFilesDTO])
                res.task_files_dto = out

        return res

    def start_1(self, request: operations.Start1Request) -> operations.Start1Response:
        r"""Starts a task.
        Starts a task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.Start1Request, base_url, '/tasks/{taskId}/start', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Start1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_client_task_po_number(self, request: operations.UpdateClientTaskPONumberRequest) -> operations.UpdateClientTaskPONumberResponse:
        r"""Updates Client Task PO Number of a given task.
        Updates Client Task PO Number of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientTaskPONumberRequest, base_url, '/tasks/{taskId}/clientTaskPONumber', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientTaskPONumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringDTO])
                res.string_dto = out

        return res

    def update_contacts_1(self, request: operations.UpdateContacts1Request) -> operations.UpdateContacts1Response:
        r"""Updates contacts of a given task.
        Updates contacts of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContacts1Request, base_url, '/tasks/{taskId}/contacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "contacts_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContacts1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContactsDTO])
                res.contacts_dto = out

        return res

    def update_custom_fields_5(self, request: operations.UpdateCustomFields5Request) -> operations.UpdateCustomFields5Response:
        r"""Updates custom fields of a given task.
        Updates custom fields of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomFields5Request, base_url, '/tasks/{taskId}/customFields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomFields5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def update_dates_2(self, request: operations.UpdateDates2Request) -> operations.UpdateDates2Response:
        r"""Updates dates of a given task.
        Updates dates of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDates2Request, base_url, '/tasks/{taskId}/dates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_dates_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDates2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDatesDTO])
                res.project_dates_dto = out

        return res

    def update_instructions_3(self, request: operations.UpdateInstructions3Request) -> operations.UpdateInstructions3Response:
        r"""Updates instructions of a given task.
        Updates instructions of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInstructions3Request, base_url, '/tasks/{taskId}/instructions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "instructions_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInstructions3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InstructionsDTO])
                res.instructions_dto = out

        return res

    def update_name(self, request: operations.UpdateNameRequest) -> operations.UpdateNameResponse:
        r"""Updates name of a given task.
        Updates name of a given task.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNameRequest, base_url, '/tasks/{taskId}/name', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StringDTO])
                res.string_dto = out

        return res

    