// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type RuleResponseType string

const (
	RuleResponseTypeAmqp                    RuleResponseType = "amqp"
	RuleResponseTypeAmqpExternal            RuleResponseType = "amqp/external"
	RuleResponseTypeAwsKinesis              RuleResponseType = "aws/kinesis"
	RuleResponseTypeAwsLambda               RuleResponseType = "aws/lambda"
	RuleResponseTypeAwsSqs                  RuleResponseType = "aws/sqs"
	RuleResponseTypeHTTP                    RuleResponseType = "http"
	RuleResponseTypeHTTPAzureFunction       RuleResponseType = "http/azure-function"
	RuleResponseTypeHTTPCloudflareWorker    RuleResponseType = "http/cloudflare-worker"
	RuleResponseTypeHTTPGoogleCloudFunction RuleResponseType = "http/google-cloud-function"
	RuleResponseTypeHTTPIfttt               RuleResponseType = "http/ifttt"
	RuleResponseTypeHTTPZapier              RuleResponseType = "http/zapier"
	RuleResponseTypeKafka                   RuleResponseType = "kafka"
	RuleResponseTypePulsar                  RuleResponseType = "pulsar"
	RuleResponseTypeUnsupported             RuleResponseType = "unsupported"
)

type RuleResponse struct {
	HTTPRuleResponse                *HTTPRuleResponse
	IftttRuleResponse               *IftttRuleResponse
	ZapierRuleResponse              *ZapierRuleResponse
	CloudflareWorkerRuleResponse    *CloudflareWorkerRuleResponse
	AzureFunctionRuleResponse       *AzureFunctionRuleResponse
	GoogleCloudFunctionRuleResponse *GoogleCloudFunctionRuleResponse
	AwsLambdaRuleResponse           *AwsLambdaRuleResponse
	AwsKinesisRuleResponse          *AwsKinesisRuleResponse
	AwsSqsRuleResponse              *AwsSqsRuleResponse
	AmqpRuleResponse                *AmqpRuleResponse
	AmqpExternalRuleResponse        *AmqpExternalRuleResponse
	KafkaRuleResponse               *KafkaRuleResponse
	PulsarRuleResponse              *PulsarRuleResponse
	UnsupportedRuleResponse         *UnsupportedRuleResponse

	Type RuleResponseType
}

func CreateRuleResponseAmqp(amqp AmqpRuleResponse) RuleResponse {
	typ := RuleResponseTypeAmqp
	typStr := AmqpRuleResponseRuleTypeEnum(typ)
	amqp.RuleType = typStr

	return RuleResponse{
		AmqpRuleResponse: &amqp,
		Type:             typ,
	}
}

func CreateRuleResponseAmqpExternal(amqpExternal AmqpExternalRuleResponse) RuleResponse {
	typ := RuleResponseTypeAmqpExternal
	typStr := AmqpExternalRuleResponseRuleTypeEnum(typ)
	amqpExternal.RuleType = typStr

	return RuleResponse{
		AmqpExternalRuleResponse: &amqpExternal,
		Type:                     typ,
	}
}

func CreateRuleResponseAwsKinesis(awsKinesis AwsKinesisRuleResponse) RuleResponse {
	typ := RuleResponseTypeAwsKinesis
	typStr := AwsKinesisRuleResponseRuleTypeEnum(typ)
	awsKinesis.RuleType = typStr

	return RuleResponse{
		AwsKinesisRuleResponse: &awsKinesis,
		Type:                   typ,
	}
}

func CreateRuleResponseAwsLambda(awsLambda AwsLambdaRuleResponse) RuleResponse {
	typ := RuleResponseTypeAwsLambda
	typStr := AwsLambdaRuleResponseRuleTypeEnum(typ)
	awsLambda.RuleType = typStr

	return RuleResponse{
		AwsLambdaRuleResponse: &awsLambda,
		Type:                  typ,
	}
}

func CreateRuleResponseAwsSqs(awsSqs AwsSqsRuleResponse) RuleResponse {
	typ := RuleResponseTypeAwsSqs
	typStr := AwsSqsRuleResponseRuleTypeEnum(typ)
	awsSqs.RuleType = typStr

	return RuleResponse{
		AwsSqsRuleResponse: &awsSqs,
		Type:               typ,
	}
}

func CreateRuleResponseHTTP(http HTTPRuleResponse) RuleResponse {
	typ := RuleResponseTypeHTTP
	typStr := HTTPRuleResponseRuleTypeEnum(typ)
	http.RuleType = typStr

	return RuleResponse{
		HTTPRuleResponse: &http,
		Type:             typ,
	}
}

func CreateRuleResponseHTTPAzureFunction(httpAzureFunction AzureFunctionRuleResponse) RuleResponse {
	typ := RuleResponseTypeHTTPAzureFunction
	typStr := AzureFunctionRuleResponseRuleTypeEnum(typ)
	httpAzureFunction.RuleType = typStr

	return RuleResponse{
		AzureFunctionRuleResponse: &httpAzureFunction,
		Type:                      typ,
	}
}

func CreateRuleResponseHTTPCloudflareWorker(httpCloudflareWorker CloudflareWorkerRuleResponse) RuleResponse {
	typ := RuleResponseTypeHTTPCloudflareWorker
	typStr := CloudflareWorkerRuleResponseRuleTypeEnum(typ)
	httpCloudflareWorker.RuleType = typStr

	return RuleResponse{
		CloudflareWorkerRuleResponse: &httpCloudflareWorker,
		Type:                         typ,
	}
}

func CreateRuleResponseHTTPGoogleCloudFunction(httpGoogleCloudFunction GoogleCloudFunctionRuleResponse) RuleResponse {
	typ := RuleResponseTypeHTTPGoogleCloudFunction
	typStr := GoogleCloudFunctionRuleResponseRuleTypeEnum(typ)
	httpGoogleCloudFunction.RuleType = typStr

	return RuleResponse{
		GoogleCloudFunctionRuleResponse: &httpGoogleCloudFunction,
		Type:                            typ,
	}
}

func CreateRuleResponseHTTPIfttt(httpIfttt IftttRuleResponse) RuleResponse {
	typ := RuleResponseTypeHTTPIfttt
	typStr := IftttRuleResponseRuleTypeEnum(typ)
	httpIfttt.RuleType = typStr

	return RuleResponse{
		IftttRuleResponse: &httpIfttt,
		Type:              typ,
	}
}

func CreateRuleResponseHTTPZapier(httpZapier ZapierRuleResponse) RuleResponse {
	typ := RuleResponseTypeHTTPZapier
	typStr := ZapierRuleResponseRuleTypeEnum(typ)
	httpZapier.RuleType = typStr

	return RuleResponse{
		ZapierRuleResponse: &httpZapier,
		Type:               typ,
	}
}

func CreateRuleResponseKafka(kafka KafkaRuleResponse) RuleResponse {
	typ := RuleResponseTypeKafka
	typStr := KafkaRuleResponseRuleTypeEnum(typ)
	kafka.RuleType = typStr

	return RuleResponse{
		KafkaRuleResponse: &kafka,
		Type:              typ,
	}
}

func CreateRuleResponsePulsar(pulsar PulsarRuleResponse) RuleResponse {
	typ := RuleResponseTypePulsar
	typStr := PulsarRuleResponseRuleTypeEnum(typ)
	pulsar.RuleType = typStr

	return RuleResponse{
		PulsarRuleResponse: &pulsar,
		Type:               typ,
	}
}

func CreateRuleResponseUnsupported(unsupported UnsupportedRuleResponse) RuleResponse {
	typ := RuleResponseTypeUnsupported
	typStr := UnsupportedRuleResponseRuleTypeEnum(typ)
	unsupported.RuleType = typStr

	return RuleResponse{
		UnsupportedRuleResponse: &unsupported,
		Type:                    typ,
	}
}

func (u *RuleResponse) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		RuleType string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.RuleType {
	case "amqp":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		amqpRuleResponse := new(AmqpRuleResponse)
		if err := d.Decode(&amqpRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AmqpRuleResponse = amqpRuleResponse
		u.Type = RuleResponseTypeAmqp
		return nil
	case "amqp/external":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		amqpExternalRuleResponse := new(AmqpExternalRuleResponse)
		if err := d.Decode(&amqpExternalRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AmqpExternalRuleResponse = amqpExternalRuleResponse
		u.Type = RuleResponseTypeAmqpExternal
		return nil
	case "aws/kinesis":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsKinesisRuleResponse := new(AwsKinesisRuleResponse)
		if err := d.Decode(&awsKinesisRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsKinesisRuleResponse = awsKinesisRuleResponse
		u.Type = RuleResponseTypeAwsKinesis
		return nil
	case "aws/lambda":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsLambdaRuleResponse := new(AwsLambdaRuleResponse)
		if err := d.Decode(&awsLambdaRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsLambdaRuleResponse = awsLambdaRuleResponse
		u.Type = RuleResponseTypeAwsLambda
		return nil
	case "aws/sqs":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		awsSqsRuleResponse := new(AwsSqsRuleResponse)
		if err := d.Decode(&awsSqsRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AwsSqsRuleResponse = awsSqsRuleResponse
		u.Type = RuleResponseTypeAwsSqs
		return nil
	case "http":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		httpRuleResponse := new(HTTPRuleResponse)
		if err := d.Decode(&httpRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.HTTPRuleResponse = httpRuleResponse
		u.Type = RuleResponseTypeHTTP
		return nil
	case "http/azure-function":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		azureFunctionRuleResponse := new(AzureFunctionRuleResponse)
		if err := d.Decode(&azureFunctionRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AzureFunctionRuleResponse = azureFunctionRuleResponse
		u.Type = RuleResponseTypeHTTPAzureFunction
		return nil
	case "http/cloudflare-worker":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		cloudflareWorkerRuleResponse := new(CloudflareWorkerRuleResponse)
		if err := d.Decode(&cloudflareWorkerRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CloudflareWorkerRuleResponse = cloudflareWorkerRuleResponse
		u.Type = RuleResponseTypeHTTPCloudflareWorker
		return nil
	case "http/google-cloud-function":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		googleCloudFunctionRuleResponse := new(GoogleCloudFunctionRuleResponse)
		if err := d.Decode(&googleCloudFunctionRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.GoogleCloudFunctionRuleResponse = googleCloudFunctionRuleResponse
		u.Type = RuleResponseTypeHTTPGoogleCloudFunction
		return nil
	case "http/ifttt":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		iftttRuleResponse := new(IftttRuleResponse)
		if err := d.Decode(&iftttRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.IftttRuleResponse = iftttRuleResponse
		u.Type = RuleResponseTypeHTTPIfttt
		return nil
	case "http/zapier":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		zapierRuleResponse := new(ZapierRuleResponse)
		if err := d.Decode(&zapierRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.ZapierRuleResponse = zapierRuleResponse
		u.Type = RuleResponseTypeHTTPZapier
		return nil
	case "kafka":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		kafkaRuleResponse := new(KafkaRuleResponse)
		if err := d.Decode(&kafkaRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.KafkaRuleResponse = kafkaRuleResponse
		u.Type = RuleResponseTypeKafka
		return nil
	case "pulsar":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		pulsarRuleResponse := new(PulsarRuleResponse)
		if err := d.Decode(&pulsarRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.PulsarRuleResponse = pulsarRuleResponse
		u.Type = RuleResponseTypePulsar
		return nil
	case "unsupported":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		unsupportedRuleResponse := new(UnsupportedRuleResponse)
		if err := d.Decode(&unsupportedRuleResponse); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.UnsupportedRuleResponse = unsupportedRuleResponse
		u.Type = RuleResponseTypeUnsupported
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RuleResponse) MarshalJSON() ([]byte, error) {
	if u.HTTPRuleResponse != nil {
		return json.Marshal(u.HTTPRuleResponse)
	}

	if u.IftttRuleResponse != nil {
		return json.Marshal(u.IftttRuleResponse)
	}

	if u.ZapierRuleResponse != nil {
		return json.Marshal(u.ZapierRuleResponse)
	}

	if u.CloudflareWorkerRuleResponse != nil {
		return json.Marshal(u.CloudflareWorkerRuleResponse)
	}

	if u.AzureFunctionRuleResponse != nil {
		return json.Marshal(u.AzureFunctionRuleResponse)
	}

	if u.GoogleCloudFunctionRuleResponse != nil {
		return json.Marshal(u.GoogleCloudFunctionRuleResponse)
	}

	if u.AwsLambdaRuleResponse != nil {
		return json.Marshal(u.AwsLambdaRuleResponse)
	}

	if u.AwsKinesisRuleResponse != nil {
		return json.Marshal(u.AwsKinesisRuleResponse)
	}

	if u.AwsSqsRuleResponse != nil {
		return json.Marshal(u.AwsSqsRuleResponse)
	}

	if u.AmqpRuleResponse != nil {
		return json.Marshal(u.AmqpRuleResponse)
	}

	if u.AmqpExternalRuleResponse != nil {
		return json.Marshal(u.AmqpExternalRuleResponse)
	}

	if u.KafkaRuleResponse != nil {
		return json.Marshal(u.KafkaRuleResponse)
	}

	if u.PulsarRuleResponse != nil {
		return json.Marshal(u.PulsarRuleResponse)
	}

	if u.UnsupportedRuleResponse != nil {
		return json.Marshal(u.UnsupportedRuleResponse)
	}

	return nil, nil
}
