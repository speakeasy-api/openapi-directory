/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://azure-api.sportsdata.io/nascar/v2",
  "https://azure-api.sportsdata.io/nascar/v2",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Driver Details
   */
  driverDetails(
    req: operations.DriverDetailsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DriverDetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriverDetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/driver/{driverid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriverDetailsResponse =
        new operations.DriverDetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.driver = utils.objectToClass(httpRes?.data, shared.Driver);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Driver Race Projections (Entry List)
   */
  driverRaceProjectionsEntryList(
    req: operations.DriverRaceProjectionsEntryListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DriverRaceProjectionsEntryListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriverRaceProjectionsEntryListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/DriverRaceProjections/{raceid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriverRaceProjectionsEntryListResponse =
        new operations.DriverRaceProjectionsEntryListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.driverRaceProjections = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.driverRaceProjections = utils.objectToClass(
              httpRes?.data,
              shared.DriverRaceProjection,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Drivers
   */
  drivers(
    req: operations.DriversRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DriversResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DriversRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/drivers", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DriversResponse = new operations.DriversResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.drivers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.drivers = utils.objectToClass(
              httpRes?.data,
              shared.Driver,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Race Results
   */
  raceResults(
    req: operations.RaceResultsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RaceResultsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RaceResultsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/raceresult/{raceid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RaceResultsResponse =
        new operations.RaceResultsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.raceResult = utils.objectToClass(
              httpRes?.data,
              shared.RaceResult
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Races / Schedule
   */
  racesSchedule(
    req: operations.RacesScheduleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RacesScheduleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RacesScheduleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{format}/races/{season}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RacesScheduleResponse =
        new operations.RacesScheduleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.races = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.races = utils.objectToClass(
              httpRes?.data,
              shared.Race,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Series
   */
  series(
    req: operations.SeriesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SeriesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SeriesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/{format}/series", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SeriesResponse = new operations.SeriesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.series = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.series = utils.objectToClass(
              httpRes?.data,
              shared.Series,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
