"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsec2vpcendpointserviceservicetypedetails as shared_awsec2vpcendpointserviceservicetypedetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2VpcEndpointServiceDetails:
    r"""Contains details about the service configuration for a VPC endpoint service."""
    
    acceptance_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AcceptanceRequired'), 'exclude': lambda f: f is None }})  
    availability_zones: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZones'), 'exclude': lambda f: f is None }})  
    base_endpoint_dns_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BaseEndpointDnsNames'), 'exclude': lambda f: f is None }})  
    gateway_load_balancer_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GatewayLoadBalancerArns'), 'exclude': lambda f: f is None }})  
    manages_vpc_endpoints: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ManagesVpcEndpoints'), 'exclude': lambda f: f is None }})  
    network_load_balancer_arns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkLoadBalancerArns'), 'exclude': lambda f: f is None }})  
    private_dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrivateDnsName'), 'exclude': lambda f: f is None }})  
    service_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceId'), 'exclude': lambda f: f is None }})  
    service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName'), 'exclude': lambda f: f is None }})  
    service_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceState'), 'exclude': lambda f: f is None }})  
    service_type: Optional[list[shared_awsec2vpcendpointserviceservicetypedetails.AwsEc2VpcEndpointServiceServiceTypeDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceType'), 'exclude': lambda f: f is None }})  
    