/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The sort direction of the results.
 */
export enum GetChannelsDirectionEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * The attribute by which to filter the results.
 */
export enum GetChannelsFilterEnum {
  Featured = "featured",
}

/**
 * The way to sort the results.
 *
 * @remarks
 *
 * Option descriptions:
 *  * `relevant` - Relevant sorting is available only for search queries.
 *
 */
export enum GetChannelsSortEnum {
  Alphabetical = "alphabetical",
  Date = "date",
  Followers = "followers",
  Relevant = "relevant",
  Videos = "videos",
}

export class GetChannelsRequest extends SpeakeasyBase {
  /**
   * The sort direction of the results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: GetChannelsDirectionEnum;

  /**
   * The attribute by which to filter the results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: GetChannelsFilterEnum;

  /**
   * The page number of the results to show.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of items to show on each page of results, up to a maximum of 100.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The search query to use to filter the results.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * The way to sort the results.
   *
   * @remarks
   *
   * Option descriptions:
   *  * `relevant` - Relevant sorting is available only for search queries.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetChannelsSortEnum;
}

export class GetChannelsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The channels were returned.
   */
  @SpeakeasyMetadata({ elemType: shared.Channel })
  channels?: shared.Channel[];

  /**
   * The relevant sort has no search query.
   */
  @SpeakeasyMetadata()
  legacyError?: shared.LegacyError;
}
