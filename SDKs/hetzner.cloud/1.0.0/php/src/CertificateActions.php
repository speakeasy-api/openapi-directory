<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CertificateActions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all Actions for a Certificate
     * 
     * Returns all Action objects for a Certificate. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
     * 
     * Only type `managed` Certificates can have Actions. For type `uploaded` Certificates the `actions` key will always contain an empty array.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsResponse
     */
	public function getCertificatesIdActions(
        \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates/{id}/actions', \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an Action for a Certificate
     * 
     * Returns a specific Action for a Certificate. Only type `managed` Certificates have Actions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionIdResponse
     */
	public function getCertificatesIdActionsActionId(
        \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates/{id}/actions/{action_id}', \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetCertificatesIdActionsActionIdActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retry Issuance or Renewal
     * 
     * Retry a failed Certificate issuance or renewal.
     * 
     * Only applicable if the type of the Certificate is `managed` and the issuance or renewal status is `failed`.
     * 
     * #### Call specific error codes
     * 
     * | Code                                                    | Description                                                               |
     * |---------------------------------------------------------|---------------------------------------------------------------------------|
     * | `caa_record_does_not_allow_ca`                          | CAA record does not allow certificate authority                           |
     * | `ca_dns_validation_failed`                              | Certificate Authority: DNS validation failed                              |
     * | `ca_too_many_authorizations_failed_recently`            | Certificate Authority: Too many authorizations failed recently            |
     * | `ca_too_many_certificates_issued_for_registered_domain` | Certificate Authority: Too many certificates issued for registered domain |
     * | `ca_too_many_duplicate_certificates`                    | Certificate Authority: Too many duplicate certificates                    |
     * | `could_not_verify_domain_delegated_to_zone`             | Could not verify domain delegated to zone                                 |
     * | `dns_zone_not_found`                                    | DNS zone not found                                                        |
     * | `dns_zone_is_secondary_zone`                            | DNS zone is a secondary zone                                              |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCertificatesIdActionsRetryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCertificatesIdActionsRetryResponse
     */
	public function postCertificatesIdActionsRetry(
        \OpenAPI\OpenAPI\Models\Operations\PostCertificatesIdActionsRetryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCertificatesIdActionsRetryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/certificates/{id}/actions/retry', \OpenAPI\OpenAPI\Models\Operations\PostCertificatesIdActionsRetryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCertificatesIdActionsRetryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostCertificatesIdActionsRetryActionResponse', 'json');
            }
        }

        return $response;
    }
}