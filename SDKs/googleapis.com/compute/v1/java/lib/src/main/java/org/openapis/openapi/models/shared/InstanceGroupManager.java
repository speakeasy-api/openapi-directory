/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * InstanceGroupManager - Represents a Managed Instance Group resource. An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups. For zonal Managed Instance Group, use the instanceGroupManagers resource. For regional Managed Instance Group, use the regionInstanceGroupManagers resource.
 */
public class InstanceGroupManager {
    /**
     * The autohealing policy for this managed instance group. You can specify only one value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoHealingPolicies")
    public InstanceGroupManagerAutoHealingPolicy[] autoHealingPolicies;
    public InstanceGroupManager withAutoHealingPolicies(InstanceGroupManagerAutoHealingPolicy[] autoHealingPolicies) {
        this.autoHealingPolicies = autoHealingPolicies;
        return this;
    }
    
    /**
     * The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baseInstanceName")
    public String baseInstanceName;
    public InstanceGroupManager withBaseInstanceName(String baseInstanceName) {
        this.baseInstanceName = baseInstanceName;
        return this;
    }
    
    /**
     * [Output Only] The creation timestamp for this managed instance group in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;
    public InstanceGroupManager withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentActions")
    public InstanceGroupManagerActionsSummary currentActions;
    public InstanceGroupManager withCurrentActions(InstanceGroupManagerActionsSummary currentActions) {
        this.currentActions = currentActions;
        return this;
    }
    
    /**
     * An optional description of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public InstanceGroupManager withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("distributionPolicy")
    public DistributionPolicy distributionPolicy;
    public InstanceGroupManager withDistributionPolicy(DistributionPolicy distributionPolicy) {
        this.distributionPolicy = distributionPolicy;
        return this;
    }
    
    /**
     * Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;
    public InstanceGroupManager withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * [Output Only] A unique identifier for this resource type. The server generates this identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public InstanceGroupManager withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output Only] The URL of the Instance Group resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceGroup")
    public String instanceGroup;
    public InstanceGroupManager withInstanceGroup(String instanceGroup) {
        this.instanceGroup = instanceGroup;
        return this;
    }
    
    /**
     * The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceTemplate")
    public String instanceTemplate;
    public InstanceGroupManager withInstanceTemplate(String instanceTemplate) {
        this.instanceTemplate = instanceTemplate;
        return this;
    }
    
    /**
     * [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public InstanceGroupManager withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Pagination behavior of the listManagedInstances API method for this managed instance group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listManagedInstancesResults")
    public InstanceGroupManagerListManagedInstancesResultsEnum listManagedInstancesResults;
    public InstanceGroupManager withListManagedInstancesResults(InstanceGroupManagerListManagedInstancesResultsEnum listManagedInstancesResults) {
        this.listManagedInstancesResults = listManagedInstancesResults;
        return this;
    }
    
    /**
     * The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public InstanceGroupManager withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Named ports configured for the Instance Groups complementary to this Instance Group Manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namedPorts")
    public NamedPort[] namedPorts;
    public InstanceGroupManager withNamedPorts(NamedPort[] namedPorts) {
        this.namedPorts = namedPorts;
        return this;
    }
    
    /**
     * [Output Only] The URL of the region where the managed instance group resides (for regional resources).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public InstanceGroupManager withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * [Output Only] The URL for this managed instance group. The server defines this URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public InstanceGroupManager withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statefulPolicy")
    public StatefulPolicy statefulPolicy;
    public InstanceGroupManager withStatefulPolicy(StatefulPolicy statefulPolicy) {
        this.statefulPolicy = statefulPolicy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public InstanceGroupManagerStatus status;
    public InstanceGroupManager withStatus(InstanceGroupManagerStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetPools")
    public String[] targetPools;
    public InstanceGroupManager withTargetPools(String[] targetPools) {
        this.targetPools = targetPools;
        return this;
    }
    
    /**
     * The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetSize")
    public Integer targetSize;
    public InstanceGroupManager withTargetSize(Integer targetSize) {
        this.targetSize = targetSize;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatePolicy")
    public InstanceGroupManagerUpdatePolicy updatePolicy;
    public InstanceGroupManager withUpdatePolicy(InstanceGroupManagerUpdatePolicy updatePolicy) {
        this.updatePolicy = updatePolicy;
        return this;
    }
    
    /**
     * Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versions")
    public InstanceGroupManagerVersion[] versions;
    public InstanceGroupManager withVersions(InstanceGroupManagerVersion[] versions) {
        this.versions = versions;
        return this;
    }
    
    /**
     * [Output Only] The URL of a zone where the managed instance group is located (for zonal resources).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public String zone;
    public InstanceGroupManager withZone(String zone) {
        this.zone = zone;
        return this;
    }
    
}
