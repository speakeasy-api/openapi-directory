/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Event - Represents user interaction event information sent using the &lt;code&gt;PutEvents&lt;/code&gt; API.
 */
public class Event {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventId")
    public String eventId;

    public Event withEventId(String eventId) {
        this.eventId = eventId;
        return this;
    }
    
    @JsonProperty("eventType")
    public String eventType;

    public Event withEventType(String eventType) {
        this.eventType = eventType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventValue")
    public Float eventValue;

    public Event withEventValue(Float eventValue) {
        this.eventValue = eventValue;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("impression")
    public String[] impression;

    public Event withImpression(String[] impression) {
        this.impression = impression;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemId")
    public String itemId;

    public Event withItemId(String itemId) {
        this.itemId = itemId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricAttribution")
    public MetricAttribution metricAttribution;

    public Event withMetricAttribution(MetricAttribution metricAttribution) {
        this.metricAttribution = metricAttribution;
        return this;
    }
    
    /**
     * &lt;p&gt;A string map of event-specific data that you might choose to record. For example, if a user rates a movie on your site, other than movie ID (&lt;code&gt;itemId&lt;/code&gt;) and rating (&lt;code&gt;eventValue&lt;/code&gt;) , you might also send the number of movie ratings made by the user.&lt;/p&gt; &lt;p&gt;Each item in the map consists of a key-value pair. For example,&lt;/p&gt; &lt;p&gt; &lt;code&gt;{"numberOfRatings": "12"}&lt;/code&gt; &lt;/p&gt; &lt;p&gt;The keys use camel case names that match the fields in the Interactions schema. In the above example, the &lt;code&gt;numberOfRatings&lt;/code&gt; would match the 'NUMBER_OF_RATINGS' field defined in the Interactions schema.&lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    public Object properties;

    public Event withProperties(Object properties) {
        this.properties = properties;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendationId")
    public String recommendationId;

    public Event withRecommendationId(String recommendationId) {
        this.recommendationId = recommendationId;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("sentAt")
    public OffsetDateTime sentAt;

    public Event withSentAt(OffsetDateTime sentAt) {
        this.sentAt = sentAt;
        return this;
    }
    
    public Event(@JsonProperty("eventType") String eventType, @JsonProperty("sentAt") OffsetDateTime sentAt) {
        this.eventType = eventType;
        this.sentAt = sentAt;
  }
}
