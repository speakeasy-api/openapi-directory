"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import criterionadditionalproperties as shared_criterionadditionalproperties
from ..shared import findingstatisticssortattributename_enum as shared_findingstatisticssortattributename_enum
from ..shared import getfindingstatisticsresponse as shared_getfindingstatisticsresponse
from ..shared import orderby_enum as shared_orderby_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFindingStatisticsRequestBodyFindingCriteria:
    r"""Specifies, as a map, one or more property-based conditions that filter the results of a query for findings."""
    
    criterion: Optional[dict[str, shared_criterionadditionalproperties.CriterionAdditionalProperties]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('criterion'), 'exclude': lambda f: f is None }})  
    
class GetFindingStatisticsRequestBodyGroupByEnum(str, Enum):
    r"""<p>The finding property to use to group the query results. Valid values are:</p> <ul><li><p>classificationDetails.jobId - The unique identifier for the classification job that produced the finding.</p></li> <li><p>resourcesAffected.s3Bucket.name - The name of the S3 bucket that the finding applies to.</p></li> <li><p>severity.description - The severity level of the finding, such as High or Medium.</p></li> <li><p>type - The type of finding, such as Policy:IAMUser/S3BucketPublic and SensitiveData:S3Object/Personal.</p></li></ul>"""
    RESOURCES_AFFECTED_S3_BUCKET_NAME = 'resourcesAffected.s3Bucket.name'
    TYPE = 'type'
    CLASSIFICATION_DETAILS_JOB_ID = 'classificationDetails.jobId'
    SEVERITY_DESCRIPTION = 'severity.description'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFindingStatisticsRequestBodySortCriteria:
    r"""Specifies criteria for sorting the results of a query that retrieves aggregated statistical data about findings."""
    
    attribute_name: Optional[shared_findingstatisticssortattributename_enum.FindingStatisticsSortAttributeNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributeName'), 'exclude': lambda f: f is None }})  
    order_by: Optional[shared_orderby_enum.OrderByEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orderBy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetFindingStatisticsRequestBody:
    
    group_by: GetFindingStatisticsRequestBodyGroupByEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupBy') }})
    r"""<p>The finding property to use to group the query results. Valid values are:</p> <ul><li><p>classificationDetails.jobId - The unique identifier for the classification job that produced the finding.</p></li> <li><p>resourcesAffected.s3Bucket.name - The name of the S3 bucket that the finding applies to.</p></li> <li><p>severity.description - The severity level of the finding, such as High or Medium.</p></li> <li><p>type - The type of finding, such as Policy:IAMUser/S3BucketPublic and SensitiveData:S3Object/Personal.</p></li></ul>"""  
    finding_criteria: Optional[GetFindingStatisticsRequestBodyFindingCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingCriteria'), 'exclude': lambda f: f is None }})
    r"""Specifies, as a map, one or more property-based conditions that filter the results of a query for findings."""  
    size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    r"""The maximum number of items to include in each page of the response."""  
    sort_criteria: Optional[GetFindingStatisticsRequestBodySortCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortCriteria'), 'exclude': lambda f: f is None }})
    r"""Specifies criteria for sorting the results of a query that retrieves aggregated statistical data about findings."""  
    

@dataclasses.dataclass
class GetFindingStatisticsRequest:
    
    request_body: GetFindingStatisticsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetFindingStatisticsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    get_finding_statistics_response: Optional[shared_getfindingstatisticsresponse.GetFindingStatisticsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    