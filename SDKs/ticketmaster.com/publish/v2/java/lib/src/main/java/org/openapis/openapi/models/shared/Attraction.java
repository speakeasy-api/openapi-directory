/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Attraction - Attraction
 */
public class Attraction {
    /**
     * Indicate if the entity is active, inactive entity won't appear in Discovery API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public Attraction withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Additional informations of the entity - multi-lingual fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalInfos")
    public java.util.Map<String, String> additionalInfos;
    public Attraction withAdditionalInfos(java.util.Map<String, String> additionalInfos) {
        this.additionalInfos = additionalInfos;
        return this;
    }
    
    /**
     * Attraction's classifications
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classifications")
    public Classification[] classifications;
    public Attraction withClassifications(Classification[] classifications) {
        this.classifications = classifications;
        return this;
    }
    
    /**
     * Descriptions of the entity - multi-lingual fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("descriptions")
    public java.util.Map<String, String> descriptions;
    public Attraction withDescriptions(java.util.Map<String, String> descriptions) {
        this.descriptions = descriptions;
        return this;
    }
    
    /**
     * True if the entity is dicoverable in discovery API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discoverable")
    public Boolean discoverable;
    public Attraction withDiscoverable(Boolean discoverable) {
        this.discoverable = discoverable;
        return this;
    }
    
    /**
     * Images of the entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("images")
    public Image[] images;
    public Attraction withImages(Image[] images) {
        this.images = images;
        return this;
    }
    
    /**
     * Names of the entity - multi-lingual fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("names")
    public java.util.Map<String, String> names;
    public Attraction withNames(java.util.Map<String, String> names) {
        this.names = names;
        return this;
    }
    
    /**
     * References of this entity in an other system. Reference is the exact same entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("references")
    public java.util.Map<String, String> references;
    public Attraction withReferences(java.util.Map<String, String> references) {
        this.references = references;
        return this;
    }
    
    /**
     * Relationships on the entity, like if the entity is a duplicate of another one
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationships")
    public java.util.Map<String, Object>[] relationships;
    public Attraction withRelationships(java.util.Map<String, Object>[] relationships) {
        this.relationships = relationships;
        return this;
    }
    
    /**
     * Source
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public Source source;
    public Attraction withSource(Source source) {
        this.source = source;
        return this;
    }
    
    /**
     * Indicate if this is a test entity, by default test entities won't appear in discovery API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("test")
    public Boolean test;
    public Attraction withTest(Boolean test) {
        this.test = test;
        return this;
    }
    
    /**
     * Type of the entity
     */
    @JsonProperty("type")
    public AttractionTypeEnum type;
    public Attraction withType(AttractionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * URL of a web site detail page of the entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public Attraction withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Version of the entity. Version is to avoid updated an entity with an older version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public Attraction withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
