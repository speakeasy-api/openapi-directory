/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateEsimProfileServerList = [
  "https://supersim.twilio.com",
] as const;

export class CreateEsimProfileSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST.
 */
export enum CreateEsimProfileCreateEsimProfileRequestCallbackMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class CreateEsimProfileCreateEsimProfileRequest extends SpeakeasyBase {
  /**
   * The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is POST.
   */
  @SpeakeasyMetadata({ data: "form, name=CallbackMethod" })
  callbackMethod?: CreateEsimProfileCreateEsimProfileRequestCallbackMethodEnum;

  /**
   * The URL we should call using the `callback_method` when the status of the eSIM Profile changes. At this stage of the eSIM Profile pilot, the a request to the URL will only be called when the ESimProfile resource changes from `reserving` to `available`.
   */
  @SpeakeasyMetadata({ data: "form, name=CallbackUrl" })
  callbackUrl?: string;

  /**
   * Identifier of the eUICC that will claim the eSIM Profile.
   */
  @SpeakeasyMetadata({ data: "form, name=Eid" })
  eid?: string;

  /**
   * When set to `true`, a value for `Eid` does not need to be provided. Instead, when the eSIM profile is reserved, a matching ID will be generated and returned via the `matching_id` property. This identifies the specific eSIM profile that can be used by any capable device to claim and download the profile.
   */
  @SpeakeasyMetadata({ data: "form, name=GenerateMatchingId" })
  generateMatchingId?: boolean;
}

export class CreateEsimProfileResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  supersimV1EsimProfile?: shared.SupersimV1EsimProfile;
}
