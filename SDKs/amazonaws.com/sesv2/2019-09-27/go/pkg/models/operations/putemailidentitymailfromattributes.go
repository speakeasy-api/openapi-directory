// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum - <p>The action to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
type PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum string

const (
	PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnumUseDefaultValue PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum = "USE_DEFAULT_VALUE"
	PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnumRejectMessage   PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum = "REJECT_MESSAGE"
)

func (e *PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "USE_DEFAULT_VALUE":
		fallthrough
	case "REJECT_MESSAGE":
		*e = PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum: %s", s)
	}
}

type PutEmailIdentityMailFromAttributesRequestBody struct {
	// <p>The action to take if the required MX record can't be found when you send an email. When you set this value to <code>UseDefaultValue</code>, the mail is sent using <i>amazonses.com</i> as the MAIL FROM domain. When you set this value to <code>RejectMessage</code>, the Amazon SES API v2 returns a <code>MailFromDomainNotVerified</code> error, and doesn't attempt to deliver the email.</p> <p>These behaviors are taken when the custom MAIL FROM domain configuration is in the <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code> states.</p>
	BehaviorOnMxFailure *PutEmailIdentityMailFromAttributesRequestBodyBehaviorOnMxFailureEnum `json:"BehaviorOnMxFailure,omitempty"`
	// The domain to use as a MAIL FROM domain.
	MailFromDomain *string `json:"MailFromDomain,omitempty"`
}

type PutEmailIdentityMailFromAttributesRequest struct {
	// The verified email identity.
	EmailIdentity     string                                        `pathParam:"style=simple,explode=false,name=EmailIdentity"`
	RequestBody       PutEmailIdentityMailFromAttributesRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type PutEmailIdentityMailFromAttributesResponse struct {
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// NotFoundException
	NotFoundException interface{}
	// Success
	PutEmailIdentityMailFromAttributesResponse map[string]interface{}
	StatusCode                                 int
	RawResponse                                *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
