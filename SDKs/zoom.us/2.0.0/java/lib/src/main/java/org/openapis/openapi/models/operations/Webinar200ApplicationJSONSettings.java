/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Webinar200ApplicationJSONSettings - Webinar settings.
 */
public class Webinar200ApplicationJSONSettings {
    /**
     * Allow attendees to join from multiple devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_multiple_devices")
    public Boolean allowMultipleDevices;
    public Webinar200ApplicationJSONSettings withAllowMultipleDevices(Boolean allowMultipleDevices) {
        this.allowMultipleDevices = allowMultipleDevices;
        return this;
    }
    
    /**
     * Alternative host emails or IDs. Multiple values separated by comma.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alternative_hosts")
    public String alternativeHosts;
    public Webinar200ApplicationJSONSettings withAlternativeHosts(String alternativeHosts) {
        this.alternativeHosts = alternativeHosts;
        return this;
    }
    
    /**
     * `0` - Automatically approve.&lt;br&gt;`1` - Manually approve.&lt;br&gt;`2` - No registration required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approval_type")
    public Webinar200ApplicationJSONSettingsApprovalTypeEnum approvalType;
    public Webinar200ApplicationJSONSettings withApprovalType(Webinar200ApplicationJSONSettingsApprovalTypeEnum approvalType) {
        this.approvalType = approvalType;
        return this;
    }
    
    /**
     * Send reminder email to attendees and panelists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendees_and_panelists_reminder_email_notification")
    public Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification attendeesAndPanelistsReminderEmailNotification;
    public Webinar200ApplicationJSONSettings withAttendeesAndPanelistsReminderEmailNotification(Webinar200ApplicationJSONSettingsAttendeesAndPanelistsReminderEmailNotification attendeesAndPanelistsReminderEmailNotification) {
        this.attendeesAndPanelistsReminderEmailNotification = attendeesAndPanelistsReminderEmailNotification;
        return this;
    }
    
    /**
     * Determine how participants can join the audio portion of the webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audio")
    public Webinar200ApplicationJSONSettingsAudioEnum audio;
    public Webinar200ApplicationJSONSettings withAudio(Webinar200ApplicationJSONSettingsAudioEnum audio) {
        this.audio = audio;
        return this;
    }
    
    /**
     * If user has configured ["Sign Into Zoom with Specified Domains"](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f) option, this will list the domains that are authenticated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_domains")
    public String authenticationDomains;
    public Webinar200ApplicationJSONSettings withAuthenticationDomains(String authenticationDomains) {
        this.authenticationDomains = authenticationDomains;
        return this;
    }
    
    /**
     * Authentication name set in the [authentication profile](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars#h_5c0df2e1-cfd2-469f-bb4a-c77d7c0cca6f).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_name")
    public String authenticationName;
    public Webinar200ApplicationJSONSettings withAuthenticationName(String authenticationName) {
        this.authenticationName = authenticationName;
        return this;
    }
    
    /**
     * Webinar authentication option id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_option")
    public String authenticationOption;
    public Webinar200ApplicationJSONSettings withAuthenticationOption(String authenticationOption) {
        this.authenticationOption = authenticationOption;
        return this;
    }
    
    /**
     * Automatic recording:&lt;br&gt;`local` - Record on local.&lt;br&gt;`cloud` -  Record on cloud.&lt;br&gt;`none` - Disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_recording")
    public Webinar200ApplicationJSONSettingsAutoRecordingEnum autoRecording;
    public Webinar200ApplicationJSONSettings withAutoRecording(Webinar200ApplicationJSONSettingsAutoRecordingEnum autoRecording) {
        this.autoRecording = autoRecording;
        return this;
    }
    
    /**
     * Close registration after event date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("close_registration")
    public Boolean closeRegistration;
    public Webinar200ApplicationJSONSettings withCloseRegistration(Boolean closeRegistration) {
        this.closeRegistration = closeRegistration;
        return this;
    }
    
    /**
     * Contact email for registration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_email")
    public String contactEmail;
    public Webinar200ApplicationJSONSettings withContactEmail(String contactEmail) {
        this.contactEmail = contactEmail;
        return this;
    }
    
    /**
     * Contact name for registration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_name")
    public String contactName;
    public Webinar200ApplicationJSONSettings withContactName(String contactName) {
        this.contactName = contactName;
        return this;
    }
    
    /**
     * Set the email language to one of the following:
     * `en-US`,`de-DE`,`es-ES`,`fr-FR`,`jp-JP`,`pt-PT`,`ru-RU`,`zh-CN`, `zh-TW`, `ko-KO`, `it-IT`, `vi-VN`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_language")
    public String emailLanguage;
    public Webinar200ApplicationJSONSettings withEmailLanguage(String emailLanguage) {
        this.emailLanguage = emailLanguage;
        return this;
    }
    
    /**
     * Only signed in users can join this meeting.
     * 
     * **This field is deprecated and will not be supported in the future.**  &lt;br&gt;&lt;br&gt;As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforce_login")
    public Boolean enforceLogin;
    public Webinar200ApplicationJSONSettings withEnforceLogin(Boolean enforceLogin) {
        this.enforceLogin = enforceLogin;
        return this;
    }
    
    /**
     * Only signed in users with specified domains can join meetings.
     * 
     * **This field is deprecated and will not be supported in the future.**  &lt;br&gt;&lt;br&gt;As an alternative, use the "meeting_authentication", "authentication_option" and "authentication_domains" fields to understand the [authentication configurations](https://support.zoom.us/hc/en-us/articles/360037117472-Authentication-Profiles-for-Meetings-and-Webinars) set for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enforce_login_domains")
    public String enforceLoginDomains;
    public Webinar200ApplicationJSONSettings withEnforceLoginDomains(String enforceLoginDomains) {
        this.enforceLoginDomains = enforceLoginDomains;
        return this;
    }
    
    /**
     * Send follow-up email to absentees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("follow_up_absentees_email_notification")
    public Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotification followUpAbsenteesEmailNotification;
    public Webinar200ApplicationJSONSettings withFollowUpAbsenteesEmailNotification(Webinar200ApplicationJSONSettingsFollowUpAbsenteesEmailNotification followUpAbsenteesEmailNotification) {
        this.followUpAbsenteesEmailNotification = followUpAbsenteesEmailNotification;
        return this;
    }
    
    /**
     * Send follow-up email to attendees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("follow_up_attendees_email_notification")
    public Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotification followUpAttendeesEmailNotification;
    public Webinar200ApplicationJSONSettings withFollowUpAttendeesEmailNotification(Webinar200ApplicationJSONSettingsFollowUpAttendeesEmailNotification followUpAttendeesEmailNotification) {
        this.followUpAttendeesEmailNotification = followUpAttendeesEmailNotification;
        return this;
    }
    
    /**
     * List of global dial-in countries
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("global_dial_in_countries")
    public String[] globalDialInCountries;
    public Webinar200ApplicationJSONSettings withGlobalDialInCountries(String[] globalDialInCountries) {
        this.globalDialInCountries = globalDialInCountries;
        return this;
    }
    
    /**
     * Default to HD video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hd_video")
    public Boolean hdVideo;
    public Webinar200ApplicationJSONSettings withHdVideo(Boolean hdVideo) {
        this.hdVideo = hdVideo;
        return this;
    }
    
    /**
     * Start video when host joins webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_video")
    public Boolean hostVideo;
    public Webinar200ApplicationJSONSettings withHostVideo(Boolean hostVideo) {
        this.hostVideo = hostVideo;
        return this;
    }
    
    /**
     * `true`- Only authenticated users can join Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meeting_authentication")
    public Boolean meetingAuthentication;
    public Webinar200ApplicationJSONSettings withMeetingAuthentication(Boolean meetingAuthentication) {
        this.meetingAuthentication = meetingAuthentication;
        return this;
    }
    
    /**
     * Send notification email to registrants when the host updates a webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notify_registrants")
    public Boolean notifyRegistrants;
    public Webinar200ApplicationJSONSettings withNotifyRegistrants(Boolean notifyRegistrants) {
        this.notifyRegistrants = notifyRegistrants;
        return this;
    }
    
    /**
     * Make the webinar on-demand
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_demand")
    public Boolean onDemand;
    public Webinar200ApplicationJSONSettings withOnDemand(Boolean onDemand) {
        this.onDemand = onDemand;
        return this;
    }
    
    /**
     * * `true`: Send invitation email to panelists.
     * 
     * * `false`: Do not send invitation email to panelists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("panelists_invitation_email_notification")
    public Boolean panelistsInvitationEmailNotification;
    public Webinar200ApplicationJSONSettings withPanelistsInvitationEmailNotification(Boolean panelistsInvitationEmailNotification) {
        this.panelistsInvitationEmailNotification = panelistsInvitationEmailNotification;
        return this;
    }
    
    /**
     * Start video when panelists join webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("panelists_video")
    public Boolean panelistsVideo;
    public Webinar200ApplicationJSONSettings withPanelistsVideo(Boolean panelistsVideo) {
        this.panelistsVideo = panelistsVideo;
        return this;
    }
    
    /**
     * Zoom will open a survey page in attendees' browsers after leaving the webinar
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_webinar_survey")
    public Boolean postWebinarSurvey;
    public Webinar200ApplicationJSONSettings withPostWebinarSurvey(Boolean postWebinarSurvey) {
        this.postWebinarSurvey = postWebinarSurvey;
        return this;
    }
    
    /**
     * Enable practice session.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("practice_session")
    public Boolean practiceSession;
    public Webinar200ApplicationJSONSettings withPracticeSession(Boolean practiceSession) {
        this.practiceSession = practiceSession;
        return this;
    }
    
    /**
     * [Q&amp;A](https://support.zoom.us/hc/en-us/articles/203686015-Using-Q-A-as-the-webinar-host#:~:text=Overview,and%20upvote%20each%20other's%20questions.) for webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("question_and_answer")
    public Webinar200ApplicationJSONSettingsQuestionAndAnswer questionAndAnswer;
    public Webinar200ApplicationJSONSettings withQuestionAndAnswer(Webinar200ApplicationJSONSettingsQuestionAndAnswer questionAndAnswer) {
        this.questionAndAnswer = questionAndAnswer;
        return this;
    }
    
    /**
     * Send confirmation email to registrants
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrants_confirmation_email")
    public Boolean registrantsConfirmationEmail;
    public Webinar200ApplicationJSONSettings withRegistrantsConfirmationEmail(Boolean registrantsConfirmationEmail) {
        this.registrantsConfirmationEmail = registrantsConfirmationEmail;
        return this;
    }
    
    /**
     * Send email notifications to registrants about approval, cancellation, denial of the registration. The value of this field must be set to true in order to use the `registrants_confirmation_email` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrants_email_notification")
    public Boolean registrantsEmailNotification;
    public Webinar200ApplicationJSONSettings withRegistrantsEmailNotification(Boolean registrantsEmailNotification) {
        this.registrantsEmailNotification = registrantsEmailNotification;
        return this;
    }
    
    /**
     * Restrict number of registrants for a webinar. By default, it is set to `0`. A `0` value means that the restriction option is disabled. Provide a number higher than 0 to restrict the webinar registrants by the that number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrants_restrict_number")
    public Long registrantsRestrictNumber;
    public Webinar200ApplicationJSONSettings withRegistrantsRestrictNumber(Long registrantsRestrictNumber) {
        this.registrantsRestrictNumber = registrantsRestrictNumber;
        return this;
    }
    
    /**
     * Registration types. Only used for recurring webinars with a fixed time.&lt;br&gt;`1` - Attendees register once and can attend any of the webinar sessions.&lt;br&gt;`2` - Attendees need to register for each session in order to attend.&lt;br&gt;`3` - Attendees register once and can choose one or more sessions to attend.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registration_type")
    public Webinar200ApplicationJSONSettingsRegistrationTypeEnum registrationType;
    public Webinar200ApplicationJSONSettings withRegistrationType(Webinar200ApplicationJSONSettingsRegistrationTypeEnum registrationType) {
        this.registrationType = registrationType;
        return this;
    }
    
    /**
     * Show social share buttons on the registration page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_share_button")
    public Boolean showShareButton;
    public Webinar200ApplicationJSONSettings withShowShareButton(Boolean showShareButton) {
        this.showShareButton = showShareButton;
        return this;
    }
    
    /**
     * Survey url for post webinar survey
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("survey_url")
    public String surveyUrl;
    public Webinar200ApplicationJSONSettings withSurveyUrl(String surveyUrl) {
        this.surveyUrl = surveyUrl;
        return this;
    }
    
}
