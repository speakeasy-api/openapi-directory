"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import glossarytermspair as shared_glossarytermspair
from ..shared import glossarytermsset as shared_glossarytermsset
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlossaryEntry:
    r"""Represents a single entry in a glossary."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Describes the glossary entry."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. The resource name of the entry. Format: \\"projects/*/locations/*/glossaries/*/glossaryEntries/*\\" """  
    terms_pair: Optional[shared_glossarytermspair.GlossaryTermsPair] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsPair'), 'exclude': lambda f: f is None }})
    r"""Represents a single entry for an unidirectional glossary."""  
    terms_set: Optional[shared_glossarytermsset.GlossaryTermsSet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsSet'), 'exclude': lambda f: f is None }})
    r"""Represents a single entry for an equivalent term set glossary. This is used for equivalent term sets where each term can be replaced by the other terms in the set."""  
    