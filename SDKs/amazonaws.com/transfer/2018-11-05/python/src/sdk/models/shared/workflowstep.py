"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import copystepdetails as shared_copystepdetails
from ..shared import customstepdetails as shared_customstepdetails
from ..shared import decryptstepdetails as shared_decryptstepdetails
from ..shared import deletestepdetails as shared_deletestepdetails
from ..shared import tagstepdetails as shared_tagstepdetails
from ..shared import workflowsteptype_enum as shared_workflowsteptype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WorkflowStep:
    r"""The basic building block of a workflow."""
    
    copy_step_details: Optional[shared_copystepdetails.CopyStepDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyStepDetails'), 'exclude': lambda f: f is None }})  
    custom_step_details: Optional[shared_customstepdetails.CustomStepDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomStepDetails'), 'exclude': lambda f: f is None }})  
    decrypt_step_details: Optional[shared_decryptstepdetails.DecryptStepDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DecryptStepDetails'), 'exclude': lambda f: f is None }})  
    delete_step_details: Optional[shared_deletestepdetails.DeleteStepDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeleteStepDetails'), 'exclude': lambda f: f is None }})  
    tag_step_details: Optional[shared_tagstepdetails.TagStepDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TagStepDetails'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_workflowsteptype_enum.WorkflowStepTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    