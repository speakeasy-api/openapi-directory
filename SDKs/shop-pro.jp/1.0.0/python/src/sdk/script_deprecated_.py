"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class ScriptDeprecated:
    r"""スクリプトタグを挿入するAPIです。※新規デベロッパーはこのエンドポイントを利用できません。代わりに [スクリプトタグ](/open_api#tag/script) をご利用ください"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_script_tag(self, request: operations.CreateScriptTagRequestBody, security: operations.CreateScriptTagSecurity) -> operations.CreateScriptTagResponse:
        r"""スクリプトタグの作成"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/script_tags.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateScriptTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateScriptTag200ApplicationJSON])
                res.create_script_tag_200_application_json_object = out

        return res

    def delete_v1_script_tags_script_tag_id_json(self, request: operations.DeleteV1ScriptTagsScriptTagIDJSONRequest, security: operations.DeleteV1ScriptTagsScriptTagIDJSONSecurity) -> operations.DeleteV1ScriptTagsScriptTagIDJSONResponse:
        r"""スクリプトタグの削除"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteV1ScriptTagsScriptTagIDJSONRequest, base_url, '/v1/script_tags/{scriptTagId}.json', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteV1ScriptTagsScriptTagIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_script_tag(self, request: operations.GetScriptTagRequest, security: operations.GetScriptTagSecurity) -> operations.GetScriptTagResponse:
        r"""スクリプトタグの取得"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScriptTagRequest, base_url, '/v1/script_tags/{scriptTagId}.json', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScriptTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetScriptTag200ApplicationJSON])
                res.get_script_tag_200_application_json_object = out

        return res

    def get_script_tags(self) -> operations.GetScriptTagsResponse:
        r"""スクリプトタグの取得"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/script_tags.json'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScriptTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetScriptTags200ApplicationJSON])
                res.get_script_tags_200_application_json_object = out

        return res

    def update_script_tag(self, request: operations.UpdateScriptTagRequest, security: operations.UpdateScriptTagSecurity) -> operations.UpdateScriptTagResponse:
        r"""スクリプトタグの更新"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateScriptTagRequest, base_url, '/v1/script_tags/{scriptTagId}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateScriptTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateScriptTag200ApplicationJSON])
                res.update_script_tag_200_application_json_object = out

        return res

    