"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import deliverabilitydashboardaccountstatus_enum as shared_deliverabilitydashboardaccountstatus_enum
from ..shared import domaindeliverabilitytrackingoption as shared_domaindeliverabilitytrackingoption
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetDeliverabilityDashboardOptionsResponse:
    r"""An object that shows the status of the Deliverability dashboard for your Amazon Pinpoint account."""
    
    dashboard_enabled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DashboardEnabled') }})  
    account_status: Optional[shared_deliverabilitydashboardaccountstatus_enum.DeliverabilityDashboardAccountStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountStatus'), 'exclude': lambda f: f is None }})  
    active_subscribed_domains: Optional[list[shared_domaindeliverabilitytrackingoption.DomainDeliverabilityTrackingOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActiveSubscribedDomains'), 'exclude': lambda f: f is None }})  
    pending_expiration_subscribed_domains: Optional[list[shared_domaindeliverabilitytrackingoption.DomainDeliverabilityTrackingOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PendingExpirationSubscribedDomains'), 'exclude': lambda f: f is None }})  
    subscription_expiry_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionExpiryDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    