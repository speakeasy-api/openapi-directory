// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum - Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
type UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum string

const (
	UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnumDisabled  UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum = "disabled"
	UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnumDisabling UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum = "disabling"
	UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnumEnabled   UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum = "enabled"
	UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnumPending   UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum = "pending"
)

func (e *UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "disabled":
		fallthrough
	case "disabling":
		fallthrough
	case "enabled":
		fallthrough
	case "pending":
		*e = UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum: %s", s)
	}
}

// UnmonitorInstancesResultInstanceMonitoringsMonitoring - The monitoring for the instance.
type UnmonitorInstancesResultInstanceMonitoringsMonitoring struct {
	State *UnmonitorInstancesResultInstanceMonitoringsMonitoringStateEnum
}

// UnmonitorInstancesResultInstanceMonitorings - Describes the monitoring of an instance.
type UnmonitorInstancesResultInstanceMonitorings struct {
	InstanceID *string
	Monitoring *UnmonitorInstancesResultInstanceMonitoringsMonitoring
}

// UnmonitorInstancesResult - Success
type UnmonitorInstancesResult struct {
	InstanceMonitorings []UnmonitorInstancesResultInstanceMonitorings
}
