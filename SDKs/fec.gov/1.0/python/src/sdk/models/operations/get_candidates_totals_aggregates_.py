"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import candidatetotalaggregatepage as shared_candidatetotalaggregatepage
from enum import Enum
from typing import Optional

class GetCandidatesTotalsAggregatesAggregateByEnum(str, Enum):
    r"""Candidate totals aggregate_by (Chose one of dropdown options):
            - ' ' grouped by election year
            - office grouped by election year, by office
            - office-state grouped by election year, by office, by state
            - office-state-district grouped by election year, by office, by state, by district
            - office-party grouped by election year, by office, by party
    """
    OFFICE = 'office'
    OFFICE_STATE = 'office-state'
    OFFICE_STATE_DISTRICT = 'office-state-district'
    OFFICE_PARTY = 'office-party'

class GetCandidatesTotalsAggregatesOfficeEnum(str, Enum):
    r"""Federal office candidate runs for: H, S or P"""
    UNKNOWN = ''
    H = 'H'
    S = 'S'
    P = 'P'

class GetCandidatesTotalsAggregatesPartyEnum(str, Enum):
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""
    UNKNOWN = ''
    DEM = 'DEM'
    REP = 'REP'
    OTHER = 'OTHER'


@dataclasses.dataclass
class GetCandidatesTotalsAggregatesRequest:
    
    api_key: str = dataclasses.field(metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""API key for https://api.data.gov. Get one at https://api.data.gov/signup."""  
    aggregate_by: Optional[GetCandidatesTotalsAggregatesAggregateByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'aggregate_by', 'style': 'form', 'explode': True }})
    r"""Candidate totals aggregate_by (Chose one of dropdown options):
            - ' ' grouped by election year
            - office grouped by election year, by office
            - office-state grouped by election year, by office, by state
            - office-state-district grouped by election year, by office, by state, by district
            - office-party grouped by election year, by office, by party
    """  
    district: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'district', 'style': 'form', 'explode': True }})
    r"""Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00."""  
    election_full: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_full', 'style': 'form', 'explode': True }})
    r"""`True` indicates that full election period of a candidate.
    `False` indicates that two year election cycle.
    """  
    election_year: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'election_year', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that were applicable to a given
    two-year period.The cycle begins with an odd year and is named
    for its ending, even year.
    """  
    is_active_candidate: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_active_candidate', 'style': 'form', 'explode': True }})
    r"""Candidates who are actively seeking office. If no value is specified, all candidates
    are returned. When True is specified, only active candidates are returned. When False is
    specified, only inactive candidates are returned.
    """  
    max_election_cycle: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_election_cycle', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that are applicable to a given two-year
    period. This cycle follows the traditional House election cycle and
    subdivides the presidential and Senate elections into comparable
    two-year blocks. The cycle begins with an odd year and is named for its
    ending, even year.
    """  
    min_election_cycle: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_election_cycle', 'style': 'form', 'explode': True }})
    r"""Filter records to only those that are applicable to a given two-year
    period. This cycle follows the traditional House election cycle and
    subdivides the presidential and Senate elections into comparable
    two-year blocks. The cycle begins with an odd year and is named for its
    ending, even year.
    """  
    office: Optional[GetCandidatesTotalsAggregatesOfficeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'office', 'style': 'form', 'explode': True }})
    r"""Federal office candidate runs for: H, S or P"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""For paginating through results, starting at page 1"""  
    party: Optional[GetCandidatesTotalsAggregatesPartyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'party', 'style': 'form', 'explode': True }})
    r"""Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""The number of results returned per page. Defaults to 20."""  
    sort: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Provide a field to sort by. Use `-` for descending order. ex: `-case_no`"""  
    sort_hide_null: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_hide_null', 'style': 'form', 'explode': True }})
    r"""Hide null values on sorted column(s)."""  
    sort_null_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_null_only', 'style': 'form', 'explode': True }})
    r"""Toggle that filters out all rows having sort column that is non-null"""  
    sort_nulls_last: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_nulls_last', 'style': 'form', 'explode': True }})
    r"""Toggle that sorts null values last"""  
    state: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""US state or territory where a candidate runs for office"""  
    

@dataclasses.dataclass
class GetCandidatesTotalsAggregatesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    candidate_total_aggregate_page: Optional[shared_candidatetotalaggregatepage.CandidateTotalAggregatePage] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    