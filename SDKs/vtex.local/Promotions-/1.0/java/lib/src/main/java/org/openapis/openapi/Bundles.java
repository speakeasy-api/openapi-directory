/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.SerializedBody;

public class Bundles {
	
    /**
	 * CALCULATEDISCOUNTSANDTAXES_BUNDLES_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CALCULATEDISCOUNTSANDTAXES_BUNDLES_SERVERS = {
        "http://example.com/.{environment}.com.br/api/rnb",
    };
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Bundles(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Calculate discounts and taxes (Bundles)
     * Calculate discounts and taxes
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CalculatediscountsandtaxesBundlesResponse calculatediscountsandtaxesBundles(org.openapis.openapi.models.operations.CalculatediscountsandtaxesBundlesRequest request) throws Exception {
        return this.calculatediscountsandtaxesBundles(request, null);
    }

    /**
     * Calculate discounts and taxes (Bundles)
     * Calculate discounts and taxes
     * @param request the request object containing all of the parameters for the API call
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CalculatediscountsandtaxesBundlesResponse calculatediscountsandtaxesBundles(org.openapis.openapi.models.operations.CalculatediscountsandtaxesBundlesRequest request, String serverURL) throws Exception {
        String baseUrl = CALCULATEDISCOUNTSANDTAXES_BUNDLES_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/pub/bundles");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "calculatediscountsandtaxesBundlesRequest", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CalculatediscountsandtaxesBundlesResponse res = new org.openapis.openapi.models.operations.CalculatediscountsandtaxesBundlesResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }
}