<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see Managing dashboards by API (https://cloud.google.com/monitoring/dashboards/api-dashboard). This method requires the monitoring.dashboards.create permission on the specified project. For more information about permissions, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateResponse
     */
	public function monitoringProjectsDashboardsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dashboards', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dashboard", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dashboard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dashboard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an existing custom dashboard.This method requires the monitoring.dashboards.delete permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteResponse
     */
	public function monitoringProjectsDashboardsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a specific dashboard.This method requires the monitoring.dashboards.get permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetResponse
     */
	public function monitoringProjectsDashboardsGet(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dashboard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dashboard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the existing dashboards.This method requires the monitoring.dashboards.list permission on the specified project. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListResponse
     */
	public function monitoringProjectsDashboardsList(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dashboards', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDashboardsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDashboardsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Replaces an existing custom dashboard with a new definition.This method requires the monitoring.dashboards.update permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchResponse
     */
	public function monitoringProjectsDashboardsPatch(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dashboard", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsDashboardsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dashboard = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Dashboard', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists possible values for a given label name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1LabelValues(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/label/{label}/values', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists labels for metrics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1Labels(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/labels', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "listLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists labels for metrics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1LabelsList(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/labels', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1LabelsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists metadata for metrics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1MetadataList(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/metadata', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1MetadataListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Evaluate a PromQL query at a single point in time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1Query(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/query', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queryInstantRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists exemplars relevant to a given PromQL query,
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1QueryExemplars(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/query_exemplars', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queryExemplarsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryExemplarsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Evaluate a PromQL query with start, end time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1QueryRange(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/query_range', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queryRangeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1QueryRangeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists metadata for metrics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesResponse
     */
	public function monitoringProjectsLocationPrometheusApiV1Series(
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/location/{location}/prometheus/api/v1/series', \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "querySeriesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MonitoringProjectsLocationPrometheusApiV1SeriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HttpBody', 'json');
            }
        }

        return $response;
    }
}