import { AxiosInstance, AxiosRequestConfig } from "axios";
import * as operations from "./models/operations";
export declare class Reports {
    _defaultClient: AxiosInstance;
    _securityClient: AxiosInstance;
    _serverURL: string;
    _language: string;
    _sdkVersion: string;
    _genVersion: string;
    constructor(defaultClient: AxiosInstance, securityClient: AxiosInstance, serverURL: string, language: string, sdkVersion: string, genVersion: string);
    /**
     * getReports - Obtain report output
     *
     * Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance.
    **/
    getReports(req: operations.GetReportsRequest, config?: AxiosRequestConfig): Promise<operations.GetReportsResponse>;
    /**
     * getReportsDates - Get report dates available for a specific report
     *
     * Get report dates available for a specific report.
     *
    **/
    getReportsDates(req: operations.GetReportsDatesRequest, config?: AxiosRequestConfig): Promise<operations.GetReportsDatesResponse>;
    /**
     * getReportsStatus - Get list of generated reports
     *
     * Returns a list of custom reports generated by user (report name to upload hash etc).
     *
    **/
    getReportsStatus(req: operations.GetReportsStatusRequest, config?: AxiosRequestConfig): Promise<operations.GetReportsStatusResponse>;
    /**
     * postReports - Obtain report output
     *
     * Output is ordered by Demographic and followed by Affinity information. For each data point the following metrics are provided value, count, mean, percentile, multiplicity and average. For Geographic, and Demographic data points an additional statistical_info metric will be present with information regarding statistical relevance.
     *
    **/
    postReports(req: operations.PostReportsRequest, config?: AxiosRequestConfig): Promise<operations.PostReportsResponse>;
    /**
     * postReportsDates - Get report dates available for a specific report
     *
     * Get report dates available for a specific report.
     *
    **/
    postReportsDates(req: operations.PostReportsDatesRequest, config?: AxiosRequestConfig): Promise<operations.PostReportsDatesResponse>;
    /**
     * postReportsStatus - Get list of generated reports
     *
     * Returns a list of custom reports generated by user (report name to upload hash etc).
     *
    **/
    postReportsStatus(req: operations.PostReportsStatusRequest, config?: AxiosRequestConfig): Promise<operations.PostReportsStatusResponse>;
}
