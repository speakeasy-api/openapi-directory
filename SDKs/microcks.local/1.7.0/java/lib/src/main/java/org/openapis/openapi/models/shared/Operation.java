/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Operation - An Operation of a Service or API
 */
public class Operation {
    /**
     * Map of protocol binding details for this operation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bindings")
    public java.util.Map<String, Binding> bindings;

    public Operation withBindings(java.util.Map<String, Binding> bindings) {
        this.bindings = bindings;
        return this;
    }
    
    /**
     * Default response time delay for mocks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultDelay")
    public Double defaultDelay;

    public Operation withDefaultDelay(Double defaultDelay) {
        this.defaultDelay = defaultDelay;
        return this;
    }
    
    /**
     * Dispatcher strategy used for mocks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dispatcher")
    public String dispatcher;

    public Operation withDispatcher(String dispatcher) {
        this.dispatcher = dispatcher;
        return this;
    }
    
    /**
     * DispatcherRules used for mocks
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dispatcherRules")
    public String dispatcherRules;

    public Operation withDispatcherRules(String dispatcherRules) {
        this.dispatcherRules = dispatcherRules;
        return this;
    }
    
    /**
     * Name of input parameters in case of Xml based Service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputName")
    public String inputName;

    public Operation withInputName(String inputName) {
        this.inputName = inputName;
        return this;
    }
    
    /**
     * Represents transport method
     */
    @JsonProperty("method")
    public String method;

    public Operation withMethod(String method) {
        this.method = method;
        return this;
    }
    
    /**
     * Unique name of this Operation within Service scope
     */
    @JsonProperty("name")
    public String name;

    public Operation withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Name of output parameters in case of Xml based Service
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outputName")
    public String outputName;

    public Operation withOutputName(String outputName) {
        this.outputName = outputName;
        return this;
    }
    
    /**
     * Contraints that may apply to mock invocatino on this operation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameterContraints")
    public ParameterConstraint[] parameterContraints;

    public Operation withParameterContraints(ParameterConstraint[] parameterContraints) {
        this.parameterContraints = parameterContraints;
        return this;
    }
    
    /**
     * Paths the mocks endpoints are mapped on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourcePaths")
    public String[] resourcePaths;

    public Operation withResourcePaths(String[] resourcePaths) {
        this.resourcePaths = resourcePaths;
        return this;
    }
    
    public Operation(@JsonProperty("method") String method, @JsonProperty("name") String name) {
        this.method = method;
        this.name = name;
  }
}
