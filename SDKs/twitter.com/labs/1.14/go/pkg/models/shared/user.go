// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type UserType string

const (
	UserTypeCompact  UserType = "compact"
	UserTypeDefault  UserType = "default"
	UserTypeDetailed UserType = "detailed"
)

type User struct {
	CompactUser  *CompactUser
	DefaultUser  *DefaultUser
	DetailedUser *DetailedUser

	Type UserType
}

func CreateUserCompact(compact CompactUser) User {
	typ := UserTypeCompact
	typStr := string(typ)
	compact.Format = typStr

	return User{
		CompactUser: &compact,
		Type:        typ,
	}
}

func CreateUserDefault(defaultT DefaultUser) User {
	typ := UserTypeDefault
	typStr := string(typ)
	defaultT.Format = typStr

	return User{
		DefaultUser: &defaultT,
		Type:        typ,
	}
}

func CreateUserDetailed(detailed DetailedUser) User {
	typ := UserTypeDetailed
	typStr := string(typ)
	detailed.Format = typStr

	return User{
		DetailedUser: &detailed,
		Type:         typ,
	}
}

func (u *User) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Format string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Format {
	case "compact":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		compactUser := new(CompactUser)
		if err := d.Decode(&compactUser); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.CompactUser = compactUser
		u.Type = UserTypeCompact
		return nil
	case "default":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		defaultUser := new(DefaultUser)
		if err := d.Decode(&defaultUser); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DefaultUser = defaultUser
		u.Type = UserTypeDefault
		return nil
	case "detailed":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		detailedUser := new(DetailedUser)
		if err := d.Decode(&detailedUser); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.DetailedUser = detailedUser
		u.Type = UserTypeDetailed
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u User) MarshalJSON() ([]byte, error) {
	if u.CompactUser != nil {
		return json.Marshal(u.CompactUser)
	}

	if u.DefaultUser != nil {
		return json.Marshal(u.DefaultUser)
	}

	if u.DetailedUser != nil {
		return json.Marshal(u.DetailedUser)
	}

	return nil, nil
}
