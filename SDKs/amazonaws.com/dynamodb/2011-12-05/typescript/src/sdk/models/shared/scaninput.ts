/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Condition } from "./condition";
import { Key } from "./key";
import { Expose, Transform, Type } from "class-transformer";

export class ScanInput extends SpeakeasyBase {
  /**
   * List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AttributesToGet" })
  attributesToGet?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Count" })
  count?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ExclusiveStartKey" })
  @Type(() => Key)
  exclusiveStartKey?: Key;

  @SpeakeasyMetadata()
  @Expose({ name: "Limit" })
  limit?: number;

  @SpeakeasyMetadata({ elemType: Condition })
  @Expose({ name: "ScanFilter" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Condition> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Condition);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  scanFilter?: Record<string, Condition>;

  @SpeakeasyMetadata()
  @Expose({ name: "TableName" })
  tableName: string;
}
