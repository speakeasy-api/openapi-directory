/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Author {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * this functions helps you to map your application author ids to Etherpad author ids
   */
  createAuthorIfNotExistsForUsingGET(
    req: operations.CreateAuthorIfNotExistsForUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAuthorIfNotExistsForUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAuthorIfNotExistsForUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/createAuthorIfNotExistsFor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAuthorIfNotExistsForUsingGETResponse =
        new operations.CreateAuthorIfNotExistsForUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * this functions helps you to map your application author ids to Etherpad author ids
   */
  createAuthorIfNotExistsForUsingPOST(
    req: operations.CreateAuthorIfNotExistsForUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAuthorIfNotExistsForUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAuthorIfNotExistsForUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/createAuthorIfNotExistsFor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAuthorIfNotExistsForUsingPOSTResponse =
        new operations.CreateAuthorIfNotExistsForUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorIfNotExistsForUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorIfNotExistsForUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new author
   */
  createAuthorUsingGET(
    req: operations.CreateAuthorUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAuthorUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAuthorUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createAuthor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAuthorUsingGETResponse =
        new operations.CreateAuthorUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new author
   */
  createAuthorUsingPOST(
    req: operations.CreateAuthorUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAuthorUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAuthorUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createAuthor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAuthorUsingPOSTResponse =
        new operations.CreateAuthorUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createAuthorUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateAuthorUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the Author Name of the author
   */
  getAuthorNameUsingGET(
    req: operations.GETAuthorNameUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAuthorNameUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAuthorNameUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getAuthorName";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAuthorNameUsingGETResponse =
        new operations.GETAuthorNameUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAuthorNameUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAuthorNameUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAuthorNameUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETAuthorNameUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the Author Name of the author
   */
  getAuthorNameUsingPOST(
    req: operations.GetAuthorNameUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAuthorNameUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAuthorNameUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getAuthorName";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAuthorNameUsingPOSTResponse =
        new operations.GetAuthorNameUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAuthorNameUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAuthorNameUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAuthorNameUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAuthorNameUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAuthorNameUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns an array of all pads this author contributed to
   */
  listPadsOfAuthorUsingGET(
    req: operations.ListPadsOfAuthorUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPadsOfAuthorUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPadsOfAuthorUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listPadsOfAuthor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPadsOfAuthorUsingGETResponse =
        new operations.ListPadsOfAuthorUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns an array of all pads this author contributed to
   */
  listPadsOfAuthorUsingPOST(
    req: operations.ListPadsOfAuthorUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPadsOfAuthorUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPadsOfAuthorUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listPadsOfAuthor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPadsOfAuthorUsingPOSTResponse =
        new operations.ListPadsOfAuthorUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPadsOfAuthorUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListPadsOfAuthorUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns all sessions of an author
   */
  listSessionsOfAuthorUsingGET(
    req: operations.ListSessionsOfAuthorUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSessionsOfAuthorUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSessionsOfAuthorUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listSessionsOfAuthor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSessionsOfAuthorUsingGETResponse =
        new operations.ListSessionsOfAuthorUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns all sessions of an author
   */
  listSessionsOfAuthorUsingPOST(
    req: operations.ListSessionsOfAuthorUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListSessionsOfAuthorUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListSessionsOfAuthorUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/listSessionsOfAuthor";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListSessionsOfAuthorUsingPOSTResponse =
        new operations.ListSessionsOfAuthorUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listSessionsOfAuthorUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.ListSessionsOfAuthorUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
