// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ExperimentActionStatusEnum string

const (
	ExperimentActionStatusEnumPending    ExperimentActionStatusEnum = "pending"
	ExperimentActionStatusEnumInitiating ExperimentActionStatusEnum = "initiating"
	ExperimentActionStatusEnumRunning    ExperimentActionStatusEnum = "running"
	ExperimentActionStatusEnumCompleted  ExperimentActionStatusEnum = "completed"
	ExperimentActionStatusEnumCancelled  ExperimentActionStatusEnum = "cancelled"
	ExperimentActionStatusEnumStopping   ExperimentActionStatusEnum = "stopping"
	ExperimentActionStatusEnumStopped    ExperimentActionStatusEnum = "stopped"
	ExperimentActionStatusEnumFailed     ExperimentActionStatusEnum = "failed"
)

func (e ExperimentActionStatusEnum) ToPointer() *ExperimentActionStatusEnum {
	return &e
}

func (e *ExperimentActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "initiating":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		fallthrough
	case "cancelled":
		fallthrough
	case "stopping":
		fallthrough
	case "stopped":
		fallthrough
	case "failed":
		*e = ExperimentActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExperimentActionStatusEnum: %v", v)
	}
}
