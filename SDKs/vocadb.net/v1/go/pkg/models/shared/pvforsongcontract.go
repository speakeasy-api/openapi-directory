// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type PVForSongContractPVTypeEnum string

const (
	PVForSongContractPVTypeEnumOriginal PVForSongContractPVTypeEnum = "Original"
	PVForSongContractPVTypeEnumReprint  PVForSongContractPVTypeEnum = "Reprint"
	PVForSongContractPVTypeEnumOther    PVForSongContractPVTypeEnum = "Other"
)

func (e *PVForSongContractPVTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Original":
		fallthrough
	case "Reprint":
		fallthrough
	case "Other":
		*e = PVForSongContractPVTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PVForSongContractPVTypeEnum: %s", s)
	}
}

type PVForSongContractServiceEnum string

const (
	PVForSongContractServiceEnumNicoNicoDouga PVForSongContractServiceEnum = "NicoNicoDouga"
	PVForSongContractServiceEnumYoutube       PVForSongContractServiceEnum = "Youtube"
	PVForSongContractServiceEnumSoundCloud    PVForSongContractServiceEnum = "SoundCloud"
	PVForSongContractServiceEnumVimeo         PVForSongContractServiceEnum = "Vimeo"
	PVForSongContractServiceEnumPiapro        PVForSongContractServiceEnum = "Piapro"
	PVForSongContractServiceEnumBilibili      PVForSongContractServiceEnum = "Bilibili"
	PVForSongContractServiceEnumFile          PVForSongContractServiceEnum = "File"
	PVForSongContractServiceEnumLocalFile     PVForSongContractServiceEnum = "LocalFile"
	PVForSongContractServiceEnumCreofuga      PVForSongContractServiceEnum = "Creofuga"
	PVForSongContractServiceEnumBandcamp      PVForSongContractServiceEnum = "Bandcamp"
)

func (e *PVForSongContractServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NicoNicoDouga":
		fallthrough
	case "Youtube":
		fallthrough
	case "SoundCloud":
		fallthrough
	case "Vimeo":
		fallthrough
	case "Piapro":
		fallthrough
	case "Bilibili":
		fallthrough
	case "File":
		fallthrough
	case "LocalFile":
		fallthrough
	case "Creofuga":
		fallthrough
	case "Bandcamp":
		*e = PVForSongContractServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PVForSongContractServiceEnum: %s", s)
	}
}

type PVForSongContract struct {
	Author           *string                       `json:"author,omitempty"`
	CreatedBy        *int                          `json:"createdBy,omitempty"`
	Disabled         *bool                         `json:"disabled,omitempty"`
	ExtendedMetadata *PVExtendedMetadata           `json:"extendedMetadata,omitempty"`
	ID               *int                          `json:"id,omitempty"`
	Length           *int                          `json:"length,omitempty"`
	Name             *string                       `json:"name,omitempty"`
	PublishDate      *time.Time                    `json:"publishDate,omitempty"`
	PvID             *string                       `json:"pvId,omitempty"`
	PvType           *PVForSongContractPVTypeEnum  `json:"pvType,omitempty"`
	Service          *PVForSongContractServiceEnum `json:"service,omitempty"`
	Song             *SongContract                 `json:"song,omitempty"`
	ThumbURL         *string                       `json:"thumbUrl,omitempty"`
	URL              *string                       `json:"url,omitempty"`
}
