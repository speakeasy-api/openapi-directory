// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateLagXAmzTargetEnum
type CreateLagXAmzTargetEnum string

const (
	CreateLagXAmzTargetEnumOvertureServiceCreateLag CreateLagXAmzTargetEnum = "OvertureService.CreateLag"
)

func (e CreateLagXAmzTargetEnum) ToPointer() *CreateLagXAmzTargetEnum {
	return &e
}

func (e *CreateLagXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OvertureService.CreateLag":
		*e = CreateLagXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLagXAmzTargetEnum: %v", v)
	}
}

type CreateLagRequest struct {
	CreateLagRequest  shared.CreateLagRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateLagXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateLagResponse struct {
	ContentType string
	// DirectConnectClientException
	DirectConnectClientException interface{}
	// DirectConnectServerException
	DirectConnectServerException interface{}
	// DuplicateTagKeysException
	DuplicateTagKeysException interface{}
	// Success
	Lag         *shared.Lag
	StatusCode  int
	RawResponse *http.Response
	// TooManyTagsException
	TooManyTagsException interface{}
}
