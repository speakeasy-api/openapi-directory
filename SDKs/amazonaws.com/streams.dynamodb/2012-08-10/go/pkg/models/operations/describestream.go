// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeStreamXAmzTargetEnum
type DescribeStreamXAmzTargetEnum string

const (
	DescribeStreamXAmzTargetEnumDynamoDbStreams20120810DescribeStream DescribeStreamXAmzTargetEnum = "DynamoDBStreams_20120810.DescribeStream"
)

func (e *DescribeStreamXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DynamoDBStreams_20120810.DescribeStream":
		*e = DescribeStreamXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeStreamXAmzTargetEnum: %s", s)
	}
}

type DescribeStreamHeaders struct {
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeStreamXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeStreamRequest struct {
	Headers DescribeStreamHeaders
	Request shared.DescribeStreamInput `request:"mediaType=application/json"`
}

type DescribeStreamResponse struct {
	ContentType string
	// Success
	DescribeStreamOutput *shared.DescribeStreamOutput
	// InternalServerError
	InternalServerError interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
