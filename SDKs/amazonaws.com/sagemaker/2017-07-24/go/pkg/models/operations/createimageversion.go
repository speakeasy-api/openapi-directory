// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateImageVersionXAmzTargetEnum
type CreateImageVersionXAmzTargetEnum string

const (
	CreateImageVersionXAmzTargetEnumSageMakerCreateImageVersion CreateImageVersionXAmzTargetEnum = "SageMaker.CreateImageVersion"
)

func (e *CreateImageVersionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.CreateImageVersion":
		*e = CreateImageVersionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateImageVersionXAmzTargetEnum: %s", s)
	}
}

type CreateImageVersionHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateImageVersionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateImageVersionRequest struct {
	Headers CreateImageVersionHeaders
	Request shared.CreateImageVersionRequest `request:"mediaType=application/json"`
}

type CreateImageVersionResponse struct {
	ContentType string
	// Success
	CreateImageVersionResponse *shared.CreateImageVersionResponse
	// ResourceInUse
	ResourceInUse interface{}
	// ResourceNotFound
	ResourceNotFound interface{}
	StatusCode       int
	RawResponse      *http.Response
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
}
