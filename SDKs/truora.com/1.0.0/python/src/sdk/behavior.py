"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Behavior:
    r"""Allows to anonymously report a person behavior. This information is fed to our machine learning platform to determine the reputational score of a person and produces a dataset; thus helping identify easily whether a candidate is reliable or not, based on all of their reputation against feedback reporters, visible via check API or user interface."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def report_behavior(self, request: shared.CreateBehaviorInput, security: operations.ReportBehaviorSecurity) -> operations.ReportBehaviorResponse:
        r"""Report Behavior
        Creates a behavior item to report employee conducts that do not or might not be included in their background check. This report includes both possitive and negative behaviors and sorts them by severity.
        
        ### Reasons to report a person
        
        <table>
          <tr>
            <td style=\"width: 100px\"><center><b>Very High</b><br>(Score: 1)</td>
            <td>Rape, Drug Dealing, Sexual Harassment</td>
          </tr>
          <tr>
            <td><center><b>High</b><br>(Score: 0.8)</td>
            <td>Theft, Fights, Aggressive Behaviour, Identity Fraud, Drunk, Drug Possession</td>
          </tr>
          <tr>
            <td><center><b>Medium</b><br>(Score: 0.6)</td>
            <td>Absences</td>
          </tr>
          <tr>
            <td><center><b>Low</b><br>(Score: 0.4)</td>
            <td>Tardiness, Confidentiality Breach</td>
          </tr>
          <tr>
            <td><center><b>None</b><br>(Score: 0)</td>
            <td>Good Reputation</td>
          </tr>
          <tr>
            <td><center><b>Unknown</b></td>
            <td>No information</td>
          </tr>
        </table>
        
        **NOTE:** If the reason of your report is not here, please contact Truora support team.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/behavior'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReportBehaviorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BehaviourOutput])
                res.behaviour_output = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    