/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ExecutionControls } from "./executioncontrols";
import { RemediationParameterValue } from "./remediationparametervalue";
import { RemediationTargetTypeEnum } from "./remediationtargettypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An object that represents the details about the remediation configuration that includes the remediation action, parameters, and data to execute the action.
 */
export class RemediationConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Automatic" })
  automatic?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ConfigRuleName" })
  configRuleName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedByService" })
  createdByService?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ExecutionControls" })
  @Type(() => ExecutionControls)
  executionControls?: ExecutionControls;

  @SpeakeasyMetadata()
  @Expose({ name: "MaximumAutomaticAttempts" })
  maximumAutomaticAttempts?: number;

  @SpeakeasyMetadata({ elemType: RemediationParameterValue })
  @Expose({ name: "Parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RemediationParameterValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RemediationParameterValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, RemediationParameterValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceType" })
  resourceType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "RetryAttemptSeconds" })
  retryAttemptSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetId" })
  targetId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetType" })
  targetType: RemediationTargetTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TargetVersion" })
  targetVersion?: string;
}
