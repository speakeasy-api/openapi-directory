// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetmeasureSecurity struct {
	CodeOauth     *shared.SchemeCodeOauth     `security:"scheme,type=oauth2"`
	PasswordOauth *shared.SchemePasswordOauth `security:"scheme,type=oauth2"`
}

// GetmeasureScaleEnum - Defines the time interval between two measurements.
// Possible values :
// max -> every value stored will be returned
// 30min -> 1 value every 30 minutes
// 1hour -> 1 value every hour
// 3hours -> 1 value every 3 hours
// 1day -> 1 value per day
// 1week -> 1 value per week
// 1month -> 1 value per month
type GetmeasureScaleEnum string

const (
	GetmeasureScaleEnumMax        GetmeasureScaleEnum = "max"
	GetmeasureScaleEnumThirtymin  GetmeasureScaleEnum = "30min"
	GetmeasureScaleEnumOnehour    GetmeasureScaleEnum = "1hour"
	GetmeasureScaleEnumThreehours GetmeasureScaleEnum = "3hours"
	GetmeasureScaleEnumOneday     GetmeasureScaleEnum = "1day"
	GetmeasureScaleEnumOneweek    GetmeasureScaleEnum = "1week"
	GetmeasureScaleEnumOnemonth   GetmeasureScaleEnum = "1month"
)

func (e *GetmeasureScaleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "max":
		fallthrough
	case "30min":
		fallthrough
	case "1hour":
		fallthrough
	case "3hours":
		fallthrough
	case "1day":
		fallthrough
	case "1week":
		fallthrough
	case "1month":
		*e = GetmeasureScaleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetmeasureScaleEnum: %s", s)
	}
}

type GetmeasureTypeEnum string

const (
	GetmeasureTypeEnumTemperature     GetmeasureTypeEnum = "Temperature"
	GetmeasureTypeEnumCo2             GetmeasureTypeEnum = "CO2"
	GetmeasureTypeEnumHumidity        GetmeasureTypeEnum = "Humidity"
	GetmeasureTypeEnumPressure        GetmeasureTypeEnum = "Pressure"
	GetmeasureTypeEnumNoise           GetmeasureTypeEnum = "Noise"
	GetmeasureTypeEnumRain            GetmeasureTypeEnum = "Rain"
	GetmeasureTypeEnumWindStrength    GetmeasureTypeEnum = "WindStrength"
	GetmeasureTypeEnumWindAngle       GetmeasureTypeEnum = "WindAngle"
	GetmeasureTypeEnumGuststrength    GetmeasureTypeEnum = "Guststrength"
	GetmeasureTypeEnumGustAngle       GetmeasureTypeEnum = "GustAngle"
	GetmeasureTypeEnumSpTemperature   GetmeasureTypeEnum = "Sp_Temperature"
	GetmeasureTypeEnumBoilerOn        GetmeasureTypeEnum = "BoilerOn"
	GetmeasureTypeEnumBoilerOff       GetmeasureTypeEnum = "BoilerOff"
	GetmeasureTypeEnumMinTemp         GetmeasureTypeEnum = "min_temp"
	GetmeasureTypeEnumDateMinTemp     GetmeasureTypeEnum = "date_min_temp"
	GetmeasureTypeEnumMaxTemp         GetmeasureTypeEnum = "max_temp"
	GetmeasureTypeEnumDateMaxTemp     GetmeasureTypeEnum = "date_max_temp"
	GetmeasureTypeEnumMinHum          GetmeasureTypeEnum = "min_hum"
	GetmeasureTypeEnumDateMinHum      GetmeasureTypeEnum = "date_min_hum"
	GetmeasureTypeEnumMaxHum          GetmeasureTypeEnum = "max_hum"
	GetmeasureTypeEnumDateMaxHum      GetmeasureTypeEnum = "date_max_hum"
	GetmeasureTypeEnumMinPressure     GetmeasureTypeEnum = "min_pressure"
	GetmeasureTypeEnumDateMinPressure GetmeasureTypeEnum = "date_min_pressure"
	GetmeasureTypeEnumMaxPressure     GetmeasureTypeEnum = "max_pressure"
	GetmeasureTypeEnumDateMaxPressure GetmeasureTypeEnum = "date_max_pressure"
	GetmeasureTypeEnumMinNoise        GetmeasureTypeEnum = "min_noise"
	GetmeasureTypeEnumDateMinNoise    GetmeasureTypeEnum = "date_min_noise"
	GetmeasureTypeEnumMaxNoise        GetmeasureTypeEnum = "max_noise"
	GetmeasureTypeEnumDateMaxNoise    GetmeasureTypeEnum = "date_max_noise"
	GetmeasureTypeEnumDateMinCo2      GetmeasureTypeEnum = "date_min_co2"
	GetmeasureTypeEnumDateMaxCo2      GetmeasureTypeEnum = "date_max_co2"
	GetmeasureTypeEnumDateMaxGust     GetmeasureTypeEnum = "date_max_gust"
	GetmeasureTypeEnumSumRain         GetmeasureTypeEnum = "sum_rain"
	GetmeasureTypeEnumSumBoilerOn     GetmeasureTypeEnum = "sum_boiler_on"
	GetmeasureTypeEnumSumBoilerOff    GetmeasureTypeEnum = "sum_boiler_off"
)

func (e *GetmeasureTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Temperature":
		fallthrough
	case "CO2":
		fallthrough
	case "Humidity":
		fallthrough
	case "Pressure":
		fallthrough
	case "Noise":
		fallthrough
	case "Rain":
		fallthrough
	case "WindStrength":
		fallthrough
	case "WindAngle":
		fallthrough
	case "Guststrength":
		fallthrough
	case "GustAngle":
		fallthrough
	case "Sp_Temperature":
		fallthrough
	case "BoilerOn":
		fallthrough
	case "BoilerOff":
		fallthrough
	case "min_temp":
		fallthrough
	case "date_min_temp":
		fallthrough
	case "max_temp":
		fallthrough
	case "date_max_temp":
		fallthrough
	case "min_hum":
		fallthrough
	case "date_min_hum":
		fallthrough
	case "max_hum":
		fallthrough
	case "date_max_hum":
		fallthrough
	case "min_pressure":
		fallthrough
	case "date_min_pressure":
		fallthrough
	case "max_pressure":
		fallthrough
	case "date_max_pressure":
		fallthrough
	case "min_noise":
		fallthrough
	case "date_min_noise":
		fallthrough
	case "max_noise":
		fallthrough
	case "date_max_noise":
		fallthrough
	case "date_min_co2":
		fallthrough
	case "date_max_co2":
		fallthrough
	case "date_max_gust":
		fallthrough
	case "sum_rain":
		fallthrough
	case "sum_boiler_on":
		fallthrough
	case "sum_boiler_off":
		*e = GetmeasureTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetmeasureTypeEnum: %s", s)
	}
}

type GetmeasureQueryParams struct {
	// Starting timestamp (utc) of the requested measurements.
	// Please note measurement retrieving is limited to 1024 measurements.
	//
	DateBegin *int `queryParam:"style=form,explode=true,name=date_begin"`
	// Ending timestamp (utc) of the request measurements.
	// If you want only the last measurement, do not provide date_begin, and set date_end to `last`.
	//
	DateEnd *string `queryParam:"style=form,explode=true,name=date_end"`
	// Id of the device whose module's measurements you want to retrieve. This _id can be found in the user's devices field.
	DeviceID string `queryParam:"style=form,explode=true,name=device_id"`
	// Limits the number of measurements returned (default & max is 1024)
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// If you don't specify any module_id you will retrieve the device's measurements. If you specify a module_id you will retrieve the module's measurements.
	ModuleID *string `queryParam:"style=form,explode=true,name=module_id"`
	// Allows you to choose the format of the answer.
	// If you build a mobile app and bandwith usage is an issue, use `optimize = true`.
	// Use `optimize = false`, for an easier parse. In this case, values are indexed by sorted timestamp.
	// Example of un-optimized response :
	// ```json
	// {"status": "ok",
	//   "body": {
	//     "1347575400": [18.3,39],
	//     "1347586200": [20.6,48]
	//   },
	// "time_exec": 0.012136936187744}
	// ```
	// If optimize is set true, measurements are returned as an array of series of regularly spaced measurements. Each series is defined by a beginning time beg_time and a step between measurements, step_time:
	// ```json
	// {"status": "ok",
	//   "body": [
	//     {"beg_time": 1347575400,
	//      "step_time": 10800,
	//      "value":
	//         [[18.3,39],
	//         [ 20.6,48]]
	//     }],
	// "time_exec": 0.014238119125366}
	// ```
	// Default value is `true`.
	//
	Optimize *bool `queryParam:"style=form,explode=true,name=optimize"`
	// In scales higher than max, since the data is aggregated, the timestamps returned are by default offset by +(scale/2).
	// For instance, if you ask for measurements at a daily scale, you will receive data timestamped at 12:00 if real_time is set to `false` (default case), and timestamped at 00:00 if real_time is set to `true`.
	// NB : The servers always store data with real_time set to `true` and data are offset by this parameter AFTER having being time-filtered, thus you could have data after date_end if real_time is set to `false`.
	//
	RealTime *bool `queryParam:"style=form,explode=true,name=real_time"`
	// Defines the time interval between two measurements.
	// Possible values :
	// max -> every value stored will be returned
	// 30min -> 1 value every 30 minutes
	// 1hour -> 1 value every hour
	// 3hours -> 1 value every 3 hours
	// 1day -> 1 value per day
	// 1week -> 1 value per week
	// 1month -> 1 value per month
	//
	Scale GetmeasureScaleEnum `queryParam:"style=form,explode=true,name=scale"`
	// Measures you are interested in. Data you can request depends on the scale.
	// **For Weather Station:**
	//   * max -> Temperature (°C), CO2 (ppm), Humidity (%), Pressure (mbar), Noise (db), Rain (mm), WindStrength (km/h), WindAngle (angles), Guststrength (km/h), GustAngle (angles)
	//   * 30min, 1hour, 3hours -> Same as above + min_temp, max_temp, min_hum, max_hum, min_pressure, max_pressure, min_noise, max_noise, sum_rain, date_max_gust
	//   * 1day, 1week, 1month -> Same as above + date_min_temp, date_max_temp, date_min_hum, date_max_hum, date_min_pressure, date_max_pressure, date_min_noise, date_max_noise, date_min_co2, date_max_co2
	//
	// **For Thermostat:**
	//   * max -> temperature (°C), sp_temperature (°C), boileron (sec), boileroff (sec)
	//   * 30min, 1hour, 3hours -> temperature, sp_temperature, min_temp,
	// max_temp, sum_boiler_on, sum_boiler_off
	//   * 1day, 1week, 1month -> temperature, min_temp, date_min_temp,
	// max_temp, sum_boiler_on, sum_boiler_off
	//
	Type []GetmeasureTypeEnum `queryParam:"style=form,explode=false,name=type"`
}

type GetmeasureRequest struct {
	QueryParams GetmeasureQueryParams
	Security    GetmeasureSecurity
}

type GetmeasureResponse struct {
	ContentType string
	// Successful response
	NAMeasureResponse *shared.NAMeasureResponse
	StatusCode        int
	RawResponse       *http.Response
}
