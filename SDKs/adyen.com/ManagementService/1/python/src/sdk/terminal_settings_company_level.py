"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TerminalSettingsCompanyLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_companies_company_id_terminal_logos(self, request: operations.GetCompaniesCompanyIDTerminalLogosRequest, security: operations.GetCompaniesCompanyIDTerminalLogosSecurity) -> operations.GetCompaniesCompanyIDTerminalLogosResponse:
        r"""Get the terminal logo
        Returns the logo that is configured for a specific payment terminal model at the company identified in the path. 
        
        The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file. 
        This logo applies to all terminals of the specified model under the company, unless a different logo is configured at a lower level (merchant account, store, or individual terminal).
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read
        * Management API—Terminal settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalLogosRequest, base_url, '/companies/{companyId}/terminalLogos', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDTerminalLogosRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalLogosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Logo])
                res.logo = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_terminal_settings(self, request: operations.GetCompaniesCompanyIDTerminalSettingsRequest, security: operations.GetCompaniesCompanyIDTerminalSettingsSecurity) -> operations.GetCompaniesCompanyIDTerminalSettingsResponse:
        r"""Get terminal settings
        Returns the payment terminal settings that are configured for the company identified in the path. These settings apply to all terminals under the company, unless different values are configured at a lower level (merchant account, store, or individual terminal).
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read
        * Management API—Terminal settings read and write
        
        For [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:
        * Management API—Terminal settings Advanced read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalSettingsRequest, base_url, '/companies/{companyId}/terminalSettings', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalSettings])
                res.terminal_settings = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_companies_company_id_terminal_logos(self, request: operations.PatchCompaniesCompanyIDTerminalLogosRequest, security: operations.PatchCompaniesCompanyIDTerminalLogosSecurity) -> operations.PatchCompaniesCompanyIDTerminalLogosResponse:
        r"""Update the terminal logo
        Updates the logo that is configured for a specific payment terminal model at the company identified in the path. You can update the logo for only one terminal model at a time.
        This logo applies to all terminals of the specified model under the company, unless a different logo is configured at a lower level (merchant account, store, or individual terminal). 
        * To change the logo, specify the image file as a Base64-encoded string.
        * To restore the logo inherited from the Adyen PSP level, specify an empty logo value.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchCompaniesCompanyIDTerminalLogosRequest, base_url, '/companies/{companyId}/terminalLogos', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "logo", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PatchCompaniesCompanyIDTerminalLogosRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCompaniesCompanyIDTerminalLogosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Logo])
                res.logo = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_companies_company_id_terminal_settings(self, request: operations.PatchCompaniesCompanyIDTerminalSettingsRequest, security: operations.PatchCompaniesCompanyIDTerminalSettingsSecurity) -> operations.PatchCompaniesCompanyIDTerminalSettingsResponse:
        r"""Update terminal settings
        Updates payment terminal settings for the company identified in the path. These settings apply to all terminals under the company, unless different values are configured at a lower level (merchant account, store, or individual terminal).
        
        * To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.
        * To restore a parameter value inherited from the Adyen PSP level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.
        * Objects that are not included in the request are not updated.
        
        To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal settings read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchCompaniesCompanyIDTerminalSettingsRequest, base_url, '/companies/{companyId}/terminalSettings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "terminal_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchCompaniesCompanyIDTerminalSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TerminalSettings])
                res.terminal_settings = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    