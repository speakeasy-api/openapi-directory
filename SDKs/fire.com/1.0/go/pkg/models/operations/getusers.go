// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetUsersUserMobileApplicationOSEnum - Operating system of device.
type GetUsersUserMobileApplicationOSEnum string

const (
	GetUsersUserMobileApplicationOSEnumAndroid GetUsersUserMobileApplicationOSEnum = "Android"
	GetUsersUserMobileApplicationOSEnumIos     GetUsersUserMobileApplicationOSEnum = "IOS"
	GetUsersUserMobileApplicationOSEnumOther   GetUsersUserMobileApplicationOSEnum = "OTHER"
)

func (e *GetUsersUserMobileApplicationOSEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "IOS":
		fallthrough
	case "OTHER":
		*e = GetUsersUserMobileApplicationOSEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersUserMobileApplicationOSEnum: %s", s)
	}
}

// GetUsersUserMobileApplicationDeviceNameEnum - type of device.
type GetUsersUserMobileApplicationDeviceNameEnum string

const (
	GetUsersUserMobileApplicationDeviceNameEnumIPhone  GetUsersUserMobileApplicationDeviceNameEnum = "iPhone"
	GetUsersUserMobileApplicationDeviceNameEnumAndroid GetUsersUserMobileApplicationDeviceNameEnum = "Android"
	GetUsersUserMobileApplicationDeviceNameEnumOther   GetUsersUserMobileApplicationDeviceNameEnum = "Other"
)

func (e *GetUsersUserMobileApplicationDeviceNameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "iPhone":
		fallthrough
	case "Android":
		fallthrough
	case "Other":
		*e = GetUsersUserMobileApplicationDeviceNameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersUserMobileApplicationDeviceNameEnum: %s", s)
	}
}

// GetUsersUserMobileApplicationStatusEnum - Status of user
type GetUsersUserMobileApplicationStatusEnum string

const (
	GetUsersUserMobileApplicationStatusEnumLive    GetUsersUserMobileApplicationStatusEnum = "LIVE"
	GetUsersUserMobileApplicationStatusEnumClosed  GetUsersUserMobileApplicationStatusEnum = "CLOSED"
	GetUsersUserMobileApplicationStatusEnumLocked  GetUsersUserMobileApplicationStatusEnum = "LOCKED"
	GetUsersUserMobileApplicationStatusEnumSmsSent GetUsersUserMobileApplicationStatusEnum = "SMS_SENT"
)

func (e *GetUsersUserMobileApplicationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIVE":
		fallthrough
	case "CLOSED":
		fallthrough
	case "LOCKED":
		fallthrough
	case "SMS_SENT":
		*e = GetUsersUserMobileApplicationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersUserMobileApplicationStatusEnum: %s", s)
	}
}

type GetUsersUserMobileApplication struct {
	// Operating system of device.
	Os *GetUsersUserMobileApplicationOSEnum `json:"OS,omitempty"`
	// Business user ID
	BusinessUserID *int64 `json:"businessUserId,omitempty"`
	// Client ID of user.
	ClientID *string `json:"clientID,omitempty"`
	// type of device.
	DeviceName *GetUsersUserMobileApplicationDeviceNameEnum `json:"deviceName,omitempty"`
	// OS version for device.
	DeviceOSVersion *string `json:"deviceOSVersion,omitempty"`
	// Mobile application id for user.
	MobileApplicationID *int64 `json:"mobileApplicationId,omitempty"`
	// Status of user
	Status *GetUsersUserMobileApplicationStatusEnum `json:"status,omitempty"`
}

// GetUsersUserRoleEnum - User role
type GetUsersUserRoleEnum string

const (
	GetUsersUserRoleEnumAdmin    GetUsersUserRoleEnum = "ADMIN"
	GetUsersUserRoleEnumFullUser GetUsersUserRoleEnum = "FULL_USER"
	GetUsersUserRoleEnumReadOnly GetUsersUserRoleEnum = "READ_ONLY"
	GetUsersUserRoleEnumCardOnly GetUsersUserRoleEnum = "CARD_ONLY"
)

func (e *GetUsersUserRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ADMIN":
		fallthrough
	case "FULL_USER":
		fallthrough
	case "READ_ONLY":
		fallthrough
	case "CARD_ONLY":
		*e = GetUsersUserRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersUserRoleEnum: %s", s)
	}
}

// GetUsersUserStatusEnum - Status of user
type GetUsersUserStatusEnum string

const (
	GetUsersUserStatusEnumLive        GetUsersUserStatusEnum = "LIVE"
	GetUsersUserStatusEnumClosed      GetUsersUserStatusEnum = "CLOSED"
	GetUsersUserStatusEnumFrozen      GetUsersUserStatusEnum = "FROZEN"
	GetUsersUserStatusEnumInviteSent  GetUsersUserStatusEnum = "INVITE_SENT"
	GetUsersUserStatusEnumSmsCodeSent GetUsersUserStatusEnum = "SMS_CODE_SENT"
)

func (e *GetUsersUserStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIVE":
		fallthrough
	case "CLOSED":
		fallthrough
	case "FROZEN":
		fallthrough
	case "INVITE_SENT":
		fallthrough
	case "SMS_CODE_SENT":
		*e = GetUsersUserStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUsersUserStatusEnum: %s", s)
	}
}

type GetUsersUser struct {
	// email address for user
	EmailAddress *string `json:"emailAddress,omitempty"`
	// User first name
	FirstName *string `json:"firstName,omitempty"`
	// The User ID for this User
	ID *int64 `json:"id,omitempty"`
	// User second name
	LastName *string `json:"lastName,omitempty"`
	// Timestamp on when user last logged in.
	Lastlogin                *string                        `json:"lastlogin,omitempty"`
	MobileApplicationDetails *GetUsersUserMobileApplication `json:"mobileApplicationDetails,omitempty"`
	// User mobile number
	MobileNumber *string `json:"mobileNumber,omitempty"`
	// User role
	Role *GetUsersUserRoleEnum `json:"role,omitempty"`
	// Status of user
	Status *GetUsersUserStatusEnum `json:"status,omitempty"`
	// Users Cvl type ID (shows up when status is LIVE)
	UserCvl *string `json:"userCvl,omitempty"`
}

type GetUsersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// List of all Users.
	Users []GetUsersUser
}
