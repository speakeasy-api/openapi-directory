"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Webhooks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_webhooks_firehose_test(self) -> operations.PostWebhooksFirehoseTestResponse:
        r"""Test Firehose Webhook
        Trigger a test payload to be sent to your configured Firehose Webhook url.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks/firehose/test'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostWebhooksFirehoseTestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                res.post_webhooks_firehose_test_default_application_json_string = http_res.content

        return res

    def put_webhooks_firehose(self, request: operations.PutWebhooksFirehoseRequestBody, security: operations.PutWebhooksFirehoseSecurity) -> operations.PutWebhooksFirehoseResponse:
        r"""Update Firehose Webhook"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/webhooks/firehose'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutWebhooksFirehoseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    