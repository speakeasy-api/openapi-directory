"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import analyticsconfigurationtype as shared_analyticsconfigurationtype
from ..shared import explicitauthflowstype_enum as shared_explicitauthflowstype_enum
from ..shared import oauthflowtype_enum as shared_oauthflowtype_enum
from ..shared import preventuserexistenceerrortypes_enum as shared_preventuserexistenceerrortypes_enum
from ..shared import tokenvalidityunitstype as shared_tokenvalidityunitstype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateUserPoolClientRequest:
    r"""Represents the request to update the user pool client."""
    
    client_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientId') }})  
    user_pool_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPoolId') }})  
    access_token_validity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessTokenValidity'), 'exclude': lambda f: f is None }})  
    allowed_o_auth_flows: Optional[list[shared_oauthflowtype_enum.OAuthFlowTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowedOAuthFlows'), 'exclude': lambda f: f is None }})  
    allowed_o_auth_flows_user_pool_client: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowedOAuthFlowsUserPoolClient'), 'exclude': lambda f: f is None }})  
    allowed_o_auth_scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowedOAuthScopes'), 'exclude': lambda f: f is None }})  
    analytics_configuration: Optional[shared_analyticsconfigurationtype.AnalyticsConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnalyticsConfiguration'), 'exclude': lambda f: f is None }})  
    auth_session_validity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthSessionValidity'), 'exclude': lambda f: f is None }})  
    callback_ur_ls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CallbackURLs'), 'exclude': lambda f: f is None }})  
    client_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientName'), 'exclude': lambda f: f is None }})  
    default_redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultRedirectURI'), 'exclude': lambda f: f is None }})  
    enable_propagate_additional_user_context_data: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnablePropagateAdditionalUserContextData'), 'exclude': lambda f: f is None }})  
    enable_token_revocation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableTokenRevocation'), 'exclude': lambda f: f is None }})  
    explicit_auth_flows: Optional[list[shared_explicitauthflowstype_enum.ExplicitAuthFlowsTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExplicitAuthFlows'), 'exclude': lambda f: f is None }})  
    id_token_validity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdTokenValidity'), 'exclude': lambda f: f is None }})  
    logout_ur_ls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogoutURLs'), 'exclude': lambda f: f is None }})  
    prevent_user_existence_errors: Optional[shared_preventuserexistenceerrortypes_enum.PreventUserExistenceErrorTypesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreventUserExistenceErrors'), 'exclude': lambda f: f is None }})  
    read_attributes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadAttributes'), 'exclude': lambda f: f is None }})  
    refresh_token_validity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RefreshTokenValidity'), 'exclude': lambda f: f is None }})  
    supported_identity_providers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedIdentityProviders'), 'exclude': lambda f: f is None }})  
    token_validity_units: Optional[shared_tokenvalidityunitstype.TokenValidityUnitsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TokenValidityUnits'), 'exclude': lambda f: f is None }})  
    write_attributes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WriteAttributes'), 'exclude': lambda f: f is None }})  
    