// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateComponentHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateComponentRequestBodyPlatformEnum - The operating system platform of the component.
type CreateComponentRequestBodyPlatformEnum string

const (
	CreateComponentRequestBodyPlatformEnumWindows CreateComponentRequestBodyPlatformEnum = "Windows"
	CreateComponentRequestBodyPlatformEnumLinux   CreateComponentRequestBodyPlatformEnum = "Linux"
)

func (e *CreateComponentRequestBodyPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Windows":
		fallthrough
	case "Linux":
		*e = CreateComponentRequestBodyPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateComponentRequestBodyPlatformEnum: %s", s)
	}
}

type CreateComponentRequestBody struct {
	// The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
	ChangeDescription *string `json:"changeDescription,omitempty"`
	// The idempotency token of the component.
	ClientToken string `json:"clientToken"`
	// Component <code>data</code> contains inline YAML document content for the component. Alternatively, you can specify the <code>uri</code> of a YAML document file stored in Amazon S3. However, you cannot specify both properties.
	Data *string `json:"data,omitempty"`
	// Describes the contents of the component.
	Description *string `json:"description,omitempty"`
	// The ID of the KMS key that is used to encrypt this component.
	KmsKeyID *string `json:"kmsKeyId,omitempty"`
	// The name of the component.
	Name string `json:"name"`
	// The operating system platform of the component.
	Platform CreateComponentRequestBodyPlatformEnum `json:"platform"`
	// <p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
	SemanticVersion string `json:"semanticVersion"`
	//  The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.
	SupportedOsVersions []string `json:"supportedOsVersions,omitempty"`
	// The tags that apply to the component.
	Tags map[string]string `json:"tags,omitempty"`
	// <p>The <code>uri</code> of a YAML component document file. This must be an S3 URL (<code>s3://bucket/key</code>), and the requester must have permission to access the S3 bucket it points to. If you use Amazon S3, you can specify component content up to your service quota.</p> <p>Alternatively, you can specify the YAML document inline, using the component <code>data</code> property. You cannot specify both properties.</p>
	URI *string `json:"uri,omitempty"`
}

type CreateComponentRequest struct {
	Headers CreateComponentHeaders
	Request CreateComponentRequestBody `request:"mediaType=application/json"`
}

type CreateComponentResponse struct {
	// CallRateLimitExceededException
	CallRateLimitExceededException interface{}
	// ClientException
	ClientException interface{}
	ContentType     string
	// Success
	CreateComponentResponse *shared.CreateComponentResponse
	// ForbiddenException
	ForbiddenException interface{}
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// InvalidVersionNumberException
	InvalidVersionNumberException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ServiceException
	ServiceException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
}
