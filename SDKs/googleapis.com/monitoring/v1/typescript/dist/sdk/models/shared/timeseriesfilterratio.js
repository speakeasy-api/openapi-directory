"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSeriesFilterRatio = void 0;
var utils_1 = require("../../../internal/utils");
var aggregation_1 = require("./aggregation");
var picktimeseriesfilter_1 = require("./picktimeseriesfilter");
var ratiopart_1 = require("./ratiopart");
var statisticaltimeseriesfilter_1 = require("./statisticaltimeseriesfilter");
var class_transformer_1 = require("class-transformer");
/**
 * A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series.
 */
var TimeSeriesFilterRatio = /** @class */ (function (_super) {
    __extends(TimeSeriesFilterRatio, _super);
    function TimeSeriesFilterRatio() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "denominator" }),
        (0, class_transformer_1.Type)(function () { return ratiopart_1.RatioPart; }),
        __metadata("design:type", ratiopart_1.RatioPart)
    ], TimeSeriesFilterRatio.prototype, "denominator", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "numerator" }),
        (0, class_transformer_1.Type)(function () { return ratiopart_1.RatioPart; }),
        __metadata("design:type", ratiopart_1.RatioPart)
    ], TimeSeriesFilterRatio.prototype, "numerator", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pickTimeSeriesFilter" }),
        (0, class_transformer_1.Type)(function () { return picktimeseriesfilter_1.PickTimeSeriesFilter; }),
        __metadata("design:type", picktimeseriesfilter_1.PickTimeSeriesFilter)
    ], TimeSeriesFilterRatio.prototype, "pickTimeSeriesFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "secondaryAggregation" }),
        (0, class_transformer_1.Type)(function () { return aggregation_1.Aggregation; }),
        __metadata("design:type", aggregation_1.Aggregation)
    ], TimeSeriesFilterRatio.prototype, "secondaryAggregation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "statisticalTimeSeriesFilter" }),
        (0, class_transformer_1.Type)(function () { return statisticaltimeseriesfilter_1.StatisticalTimeSeriesFilter; }),
        __metadata("design:type", statisticaltimeseriesfilter_1.StatisticalTimeSeriesFilter)
    ], TimeSeriesFilterRatio.prototype, "statisticalTimeSeriesFilter", void 0);
    return TimeSeriesFilterRatio;
}(utils_1.SpeakeasyBase));
exports.TimeSeriesFilterRatio = TimeSeriesFilterRatio;
