"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import address as shared_address
from ..shared import amount as shared_amount
from ..shared import bankaccount as shared_bankaccount
from ..shared import card as shared_card
from ..shared import name as shared_name
from ..shared import recurring as shared_recurring
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class StoreDetailAndSubmitRequestEntityTypeEnum(str, Enum):
    r"""The type of the entity the payout is processed for."""
    NATURAL_PERSON = 'NaturalPerson'
    COMPANY = 'Company'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StoreDetailAndSubmitRequest:
    
    amount: shared_amount.Amount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    date_of_birth: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfBirth'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date of birth.
    Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD
    For Paysafecard it must be the same as used when registering the Paysafecard account.
    > This field is mandatory for natural persons.
    """  
    entity_type: StoreDetailAndSubmitRequestEntityTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityType') }})
    r"""The type of the entity the payout is processed for."""  
    merchant_account: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantAccount') }})
    r"""The merchant account identifier, with which you want to process the transaction."""  
    nationality: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nationality') }})
    r"""The shopper's nationality.
    
    A valid value is an ISO 2-character country code (e.g. 'NL').
    """  
    recurring: shared_recurring.Recurring = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recurring') }})  
    reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference') }})
    r"""The merchant reference for this payment. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement."""  
    shopper_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperEmail') }})
    r"""The shopper's email address."""  
    shopper_reference: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperReference') }})
    r"""The shopper's reference for the payment transaction."""  
    additional_data: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalData'), 'exclude': lambda f: f is None }})
    r"""This field contains additional data, which may be required for a particular request."""  
    bank: Optional[shared_bankaccount.BankAccount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bank'), 'exclude': lambda f: f is None }})  
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingAddress'), 'exclude': lambda f: f is None }})  
    card: Optional[shared_card.Card] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card'), 'exclude': lambda f: f is None }})  
    fraud_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fraudOffset'), 'exclude': lambda f: f is None }})
    r"""An integer value that is added to the normal fraud score. The value can be either positive or negative."""  
    selected_brand: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedBrand'), 'exclude': lambda f: f is None }})
    r"""The name of the brand to make a payout to.
    
    For Paysafecard it must be set to `paysafecard`.
    """  
    shopper_name: Optional[shared_name.Name] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperName'), 'exclude': lambda f: f is None }})  
    shopper_statement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shopperStatement'), 'exclude': lambda f: f is None }})
    r"""The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method)."""  
    social_security_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('socialSecurityNumber'), 'exclude': lambda f: f is None }})
    r"""The shopper's social security number."""  
    