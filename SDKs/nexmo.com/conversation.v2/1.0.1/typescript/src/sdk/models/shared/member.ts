/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class MemberLinksSelf extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href?: string;
}

export class MemberLinks extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "self" })
  @Type(() => MemberLinksSelf)
  self?: MemberLinksSelf;
}

/**
 * The channel that the member joins with
 */
export enum MemberChannelTypeEnum {
  App = "app",
}

export class MemberChannel extends SpeakeasyBase {
  /**
   * The channel that the member joins with
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MemberChannelTypeEnum;
}

export class MemberInitiatorInvited extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "is_system" })
  isSystem?: boolean;
}

export class MemberInitiatorJoined extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "is_system" })
  isSystem?: boolean;
}

export class MemberInitiator extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "invited" })
  @Type(() => MemberInitiatorInvited)
  invited?: MemberInitiatorInvited;

  @SpeakeasyMetadata()
  @Expose({ name: "joined" })
  @Type(() => MemberInitiatorJoined)
  joined?: MemberInitiatorJoined;
}

/**
 * The current audio state for the member
 */
export class MemberMediaAudioSettings extends SpeakeasyBase {
  /**
   * Can the member hear other participants?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "earmuffed" })
  earmuffed?: boolean;

  /**
   * Is audio enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  /**
   * Can the member speak to other participants?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "muted" })
  muted?: boolean;
}

/**
 * The current media state for the member
 */
export class MemberMedia extends SpeakeasyBase {
  /**
   * The current audio state for the member
   */
  @SpeakeasyMetadata()
  @Expose({ name: "audio_settings" })
  @Type(() => MemberMediaAudioSettings)
  audioSettings?: MemberMediaAudioSettings;
}

/**
 * The state that the member is in for this conversation
 */
export enum MemberStateEnum {
  Invited = "INVITED",
  Joined = "JOINED",
}

export class MemberTimestamp extends SpeakeasyBase {
  /**
   * The time that an invitation was sent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invited" })
  invited?: string;

  /**
   * The time that the conversation was joined
   */
  @SpeakeasyMetadata()
  @Expose({ name: "joined" })
  joined?: string;

  /**
   * The time that the member left the conversation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "left" })
  left?: string;
}

export class Member extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => MemberLinks)
  links?: MemberLinks;

  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => MemberChannel)
  channel?: MemberChannel;

  /**
   * The display name of the User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * Member ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "initiator" })
  @Type(() => MemberInitiator)
  initiator?: MemberInitiator;

  /**
   * The current media state for the member
   */
  @SpeakeasyMetadata()
  @Expose({ name: "media" })
  @Type(() => MemberMedia)
  media?: MemberMedia;

  /**
   * The name of the User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The state that the member is in for this conversation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: MemberStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Type(() => MemberTimestamp)
  timestamp?: MemberTimestamp;

  /**
   * The ID of the User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}
