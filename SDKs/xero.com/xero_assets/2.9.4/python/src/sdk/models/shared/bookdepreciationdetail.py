"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookDepreciationDetail:
    
    cost_limit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costLimit'), 'exclude': lambda f: f is None }})
    r"""The value of the asset you want to depreciate, if this is less than the cost of the asset."""  
    current_accum_depreciation_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentAccumDepreciationAmount'), 'exclude': lambda f: f is None }})
    r"""All depreciation occurring in the current financial year."""  
    current_capital_gain: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentCapitalGain'), 'exclude': lambda f: f is None }})
    r"""When an asset is disposed, this will be the sell price minus the purchase price if a profit was made."""  
    current_gain_loss: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentGainLoss'), 'exclude': lambda f: f is None }})
    r"""When an asset is disposed, this will be the lowest one of sell price or purchase price, minus the current book value."""  
    depreciation_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('depreciationStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""YYYY-MM-DD"""  
    prior_accum_depreciation_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priorAccumDepreciationAmount'), 'exclude': lambda f: f is None }})
    r"""All depreciation prior to the current financial year."""  
    residual_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('residualValue'), 'exclude': lambda f: f is None }})
    r"""The value of the asset remaining when you've fully depreciated it."""  
    