"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AuditLogConfigLogTypeEnum(str, Enum):
    r"""The log type that this config enables."""
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuditLogConfig:
    r"""Provides the configuration for logging a type of permissions. Example: { \\"audit_log_configs\\": [ { \\"log_type\\": \\"DATA_READ\\", \\"exempted_members\\": [ \\"user:jose@example.com\\" ] }, { \\"log_type\\": \\"DATA_WRITE\\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging."""
    
    exempted_members: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptedMembers'), 'exclude': lambda f: f is None }})
    r"""Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members."""  
    log_type: Optional[AuditLogConfigLogTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logType'), 'exclude': lambda f: f is None }})
    r"""The log type that this config enables."""  
    