// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateMapHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateMapRequestBodyConfiguration - Specifies the map tile style selected from an available provider.
type CreateMapRequestBodyConfiguration struct {
	Style *string `json:"Style,omitempty"`
}

// CreateMapRequestBodyPricingPlanEnum - No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.
type CreateMapRequestBodyPricingPlanEnum string

const (
	CreateMapRequestBodyPricingPlanEnumRequestBasedUsage     CreateMapRequestBodyPricingPlanEnum = "RequestBasedUsage"
	CreateMapRequestBodyPricingPlanEnumMobileAssetTracking   CreateMapRequestBodyPricingPlanEnum = "MobileAssetTracking"
	CreateMapRequestBodyPricingPlanEnumMobileAssetManagement CreateMapRequestBodyPricingPlanEnum = "MobileAssetManagement"
)

func (e *CreateMapRequestBodyPricingPlanEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RequestBasedUsage":
		fallthrough
	case "MobileAssetTracking":
		fallthrough
	case "MobileAssetManagement":
		*e = CreateMapRequestBodyPricingPlanEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateMapRequestBodyPricingPlanEnum: %s", s)
	}
}

type CreateMapRequestBody struct {
	// Specifies the map tile style selected from an available provider.
	Configuration CreateMapRequestBodyConfiguration `json:"Configuration"`
	// An optional description for the map resource.
	Description *string `json:"Description,omitempty"`
	// <p>The name for the map resource.</p> <p>Requirements:</p> <ul> <li> <p>Must contain only alphanumeric characters (A–Z, a–z, 0–9), hyphens (-), periods (.), and underscores (_). </p> </li> <li> <p>Must be a unique map resource name. </p> </li> <li> <p>No spaces allowed. For example, <code>ExampleMap</code>.</p> </li> </ul>
	MapName string `json:"MapName"`
	// No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.
	PricingPlan *CreateMapRequestBodyPricingPlanEnum `json:"PricingPlan,omitempty"`
	// <p>Applies one or more tags to the map resource. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.</p> <p>Format: <code>"key" : "value"</code> </p> <p>Restrictions:</p> <ul> <li> <p>Maximum 50 tags per resource</p> </li> <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li> <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li> <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li> <li> <p>Cannot use "aws:" as a prefix for a key.</p> </li> </ul>
	Tags map[string]string `json:"Tags,omitempty"`
}

type CreateMapRequest struct {
	Headers CreateMapHeaders
	Request CreateMapRequestBody `request:"mediaType=application/json"`
}

type CreateMapResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateMapResponse *shared.CreateMapResponse
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
