"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import annotationimportitemdetail as shared_annotationimportitemdetail
from ..shared import formatoptions as shared_formatoptions
from ..shared import jobstatus_enum as shared_jobstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAnnotationImportResponse:
    r"""Success"""
    
    completion_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completionTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    destination_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationName') }})  
    format_options: shared_formatoptions.FormatOptions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formatOptions') }})
    r"""Formatting options for a file."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    items: list[shared_annotationimportitemdetail.AnnotationImportItemDetail] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roleArn') }})  
    run_left_normalization: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runLeftNormalization') }})  
    status: shared_jobstatus_enum.JobStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    status_message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage') }})  
    update_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    