/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export enum WebhookCreateEventsEnum {
  Call = "CALL",
}

/**
 * Metadata policy for the webhook
 */
export enum WebhookCreateMetadataPolicyEnum {
  None = "NONE",
  Header = "HEADER",
  Body = "BODY",
}

/**
 * Signing algorithm for the webhook
 */
export enum WebhookCreateSigningAlgoEnum {
  HmacSha256 = "HMAC_SHA256",
}

/**
 * Webhook create parameters
 */
export class WebhookCreate extends SpeakeasyBase {
  /**
   * Events to subscribe to the webhook
   */
  @SpeakeasyMetadata()
  @Expose({ name: "events" })
  events?: WebhookCreateEventsEnum[];

  /**
   * Metadata policy for the webhook
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadataPolicy" })
  metadataPolicy?: WebhookCreateMetadataPolicyEnum;

  /**
   * Signing algorithm for the webhook
   */
  @SpeakeasyMetadata()
  @Expose({ name: "signingAlgo" })
  signingAlgo?: WebhookCreateSigningAlgoEnum;

  /**
   * Signing key for the webhook
   */
  @SpeakeasyMetadata()
  @Expose({ name: "signingKey" })
  signingKey?: string;

  /**
   * Destination URL for events
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}
