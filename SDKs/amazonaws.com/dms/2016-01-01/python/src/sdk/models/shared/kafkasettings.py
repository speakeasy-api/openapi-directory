"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import kafkasaslmechanism_enum as shared_kafkasaslmechanism_enum
from ..shared import kafkasecurityprotocol_enum as shared_kafkasecurityprotocol_enum
from ..shared import messageformatvalue_enum as shared_messageformatvalue_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KafkaSettings:
    r"""Provides information that describes an Apache Kafka endpoint. This information includes the output format of records applied to the endpoint and details of transaction and control table data information."""
    
    broker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Broker'), 'exclude': lambda f: f is None }})  
    include_control_details: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeControlDetails'), 'exclude': lambda f: f is None }})  
    include_null_and_empty: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeNullAndEmpty'), 'exclude': lambda f: f is None }})  
    include_partition_value: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludePartitionValue'), 'exclude': lambda f: f is None }})  
    include_table_alter_operations: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeTableAlterOperations'), 'exclude': lambda f: f is None }})  
    include_transaction_details: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IncludeTransactionDetails'), 'exclude': lambda f: f is None }})  
    message_format: Optional[shared_messageformatvalue_enum.MessageFormatValueEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageFormat'), 'exclude': lambda f: f is None }})  
    message_max_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MessageMaxBytes'), 'exclude': lambda f: f is None }})  
    no_hex_prefix: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NoHexPrefix'), 'exclude': lambda f: f is None }})  
    partition_include_schema_table: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartitionIncludeSchemaTable'), 'exclude': lambda f: f is None }})  
    sasl_mechanism: Optional[shared_kafkasaslmechanism_enum.KafkaSaslMechanismEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SaslMechanism'), 'exclude': lambda f: f is None }})  
    sasl_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SaslPassword'), 'exclude': lambda f: f is None }})  
    sasl_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SaslUsername'), 'exclude': lambda f: f is None }})  
    security_protocol: Optional[shared_kafkasecurityprotocol_enum.KafkaSecurityProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityProtocol'), 'exclude': lambda f: f is None }})  
    ssl_ca_certificate_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslCaCertificateArn'), 'exclude': lambda f: f is None }})  
    ssl_client_certificate_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslClientCertificateArn'), 'exclude': lambda f: f is None }})  
    ssl_client_key_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslClientKeyArn'), 'exclude': lambda f: f is None }})  
    ssl_client_key_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslClientKeyPassword'), 'exclude': lambda f: f is None }})  
    topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Topic'), 'exclude': lambda f: f is None }})  
    