/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class MaliciousUrlScannerRequest extends SpeakeasyBase {
  /**
   * (Required) URL_HERE
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=URL_HERE",
  })
  urlHere: string;

  /**
   * (Required) YOUR_API_KEY_HERE
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=YOUR_API_KEY_HERE",
  })
  yourApiKeyHere: string;
}

/**
 * Unexpected error
 */
export class MaliciousUrlScanner500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;
}

/**
 * Bad Request
 */
export class MaliciousUrlScanner400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;
}

export class MaliciousUrlScanner200ApplicationJSONDomainAge extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "human" })
  human?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "iso" })
  iso?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  timestamp?: number;
}

/**
 * Successful response
 */
export class MaliciousUrlScanner200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "adult" })
  adult?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "content_type" })
  contentType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "dns_valid" })
  dnsValid?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "domain" })
  domain?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "domain_age" })
  @Type(() => MaliciousUrlScanner200ApplicationJSONDomainAge)
  domainAge?: MaliciousUrlScanner200ApplicationJSONDomainAge;

  @SpeakeasyMetadata()
  @Expose({ name: "domain_rank" })
  domainRank?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ip_address" })
  ipAddress?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "malware" })
  malware?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "parking" })
  parking?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "phishing" })
  phishing?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "risk_score" })
  riskScore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  server?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "spamming" })
  spamming?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "status_code" })
  statusCode?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "suspicious" })
  suspicious?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "unsafe" })
  unsafe?: boolean;
}

export class MaliciousUrlScannerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  maliciousUrlScanner200ApplicationJSONObject?: MaliciousUrlScanner200ApplicationJSON;

  /**
   * Bad Request
   */
  @SpeakeasyMetadata()
  maliciousUrlScanner400ApplicationJSONObject?: MaliciousUrlScanner400ApplicationJSON;

  /**
   * Unexpected error
   */
  @SpeakeasyMetadata()
  maliciousUrlScanner500ApplicationJSONObject?: MaliciousUrlScanner500ApplicationJSON;
}
