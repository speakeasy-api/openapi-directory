/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LifeCycleLastCutover } from "./lifecyclelastcutover";
import { LifeCycleLastTest } from "./lifecyclelasttest";
import { LifeCycleStateEnum } from "./lifecyclestateenum";
import { Expose, Type } from "class-transformer";

/**
 * Lifecycle.
 */
export class LifeCycle extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "addedToServiceDateTime" })
  addedToServiceDateTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "elapsedReplicationDuration" })
  elapsedReplicationDuration?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "firstByteDateTime" })
  firstByteDateTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastCutover" })
  @Type(() => LifeCycleLastCutover)
  lastCutover?: LifeCycleLastCutover;

  @SpeakeasyMetadata()
  @Expose({ name: "lastSeenByServiceDateTime" })
  lastSeenByServiceDateTime?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastTest" })
  @Type(() => LifeCycleLastTest)
  lastTest?: LifeCycleLastTest;

  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: LifeCycleStateEnum;
}
