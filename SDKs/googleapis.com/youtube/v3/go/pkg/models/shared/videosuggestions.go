// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type VideoSuggestionsEditorSuggestionsEnum string

const (
	VideoSuggestionsEditorSuggestionsEnumVideoAutoLevels     VideoSuggestionsEditorSuggestionsEnum = "videoAutoLevels"
	VideoSuggestionsEditorSuggestionsEnumVideoStabilize      VideoSuggestionsEditorSuggestionsEnum = "videoStabilize"
	VideoSuggestionsEditorSuggestionsEnumVideoCrop           VideoSuggestionsEditorSuggestionsEnum = "videoCrop"
	VideoSuggestionsEditorSuggestionsEnumAudioQuietAudioSwap VideoSuggestionsEditorSuggestionsEnum = "audioQuietAudioSwap"
)

func (e *VideoSuggestionsEditorSuggestionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "videoAutoLevels":
		fallthrough
	case "videoStabilize":
		fallthrough
	case "videoCrop":
		fallthrough
	case "audioQuietAudioSwap":
		*e = VideoSuggestionsEditorSuggestionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoSuggestionsEditorSuggestionsEnum: %s", s)
	}
}

type VideoSuggestionsProcessingErrorsEnum string

const (
	VideoSuggestionsProcessingErrorsEnumAudioFile                     VideoSuggestionsProcessingErrorsEnum = "audioFile"
	VideoSuggestionsProcessingErrorsEnumImageFile                     VideoSuggestionsProcessingErrorsEnum = "imageFile"
	VideoSuggestionsProcessingErrorsEnumProjectFile                   VideoSuggestionsProcessingErrorsEnum = "projectFile"
	VideoSuggestionsProcessingErrorsEnumNotAVideoFile                 VideoSuggestionsProcessingErrorsEnum = "notAVideoFile"
	VideoSuggestionsProcessingErrorsEnumDocFile                       VideoSuggestionsProcessingErrorsEnum = "docFile"
	VideoSuggestionsProcessingErrorsEnumArchiveFile                   VideoSuggestionsProcessingErrorsEnum = "archiveFile"
	VideoSuggestionsProcessingErrorsEnumUnsupportedSpatialAudioLayout VideoSuggestionsProcessingErrorsEnum = "unsupportedSpatialAudioLayout"
)

func (e *VideoSuggestionsProcessingErrorsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "audioFile":
		fallthrough
	case "imageFile":
		fallthrough
	case "projectFile":
		fallthrough
	case "notAVideoFile":
		fallthrough
	case "docFile":
		fallthrough
	case "archiveFile":
		fallthrough
	case "unsupportedSpatialAudioLayout":
		*e = VideoSuggestionsProcessingErrorsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoSuggestionsProcessingErrorsEnum: %s", s)
	}
}

type VideoSuggestionsProcessingHintsEnum string

const (
	VideoSuggestionsProcessingHintsEnumNonStreamableMov     VideoSuggestionsProcessingHintsEnum = "nonStreamableMov"
	VideoSuggestionsProcessingHintsEnumSendBestQualityVideo VideoSuggestionsProcessingHintsEnum = "sendBestQualityVideo"
	VideoSuggestionsProcessingHintsEnumSphericalVideo       VideoSuggestionsProcessingHintsEnum = "sphericalVideo"
	VideoSuggestionsProcessingHintsEnumSpatialAudio         VideoSuggestionsProcessingHintsEnum = "spatialAudio"
	VideoSuggestionsProcessingHintsEnumVrVideo              VideoSuggestionsProcessingHintsEnum = "vrVideo"
	VideoSuggestionsProcessingHintsEnumHdrVideo             VideoSuggestionsProcessingHintsEnum = "hdrVideo"
)

func (e *VideoSuggestionsProcessingHintsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "nonStreamableMov":
		fallthrough
	case "sendBestQualityVideo":
		fallthrough
	case "sphericalVideo":
		fallthrough
	case "spatialAudio":
		fallthrough
	case "vrVideo":
		fallthrough
	case "hdrVideo":
		*e = VideoSuggestionsProcessingHintsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoSuggestionsProcessingHintsEnum: %s", s)
	}
}

type VideoSuggestionsProcessingWarningsEnum string

const (
	VideoSuggestionsProcessingWarningsEnumUnknownContainer                   VideoSuggestionsProcessingWarningsEnum = "unknownContainer"
	VideoSuggestionsProcessingWarningsEnumUnknownVideoCodec                  VideoSuggestionsProcessingWarningsEnum = "unknownVideoCodec"
	VideoSuggestionsProcessingWarningsEnumUnknownAudioCodec                  VideoSuggestionsProcessingWarningsEnum = "unknownAudioCodec"
	VideoSuggestionsProcessingWarningsEnumInconsistentResolution             VideoSuggestionsProcessingWarningsEnum = "inconsistentResolution"
	VideoSuggestionsProcessingWarningsEnumHasEditlist                        VideoSuggestionsProcessingWarningsEnum = "hasEditlist"
	VideoSuggestionsProcessingWarningsEnumProblematicVideoCodec              VideoSuggestionsProcessingWarningsEnum = "problematicVideoCodec"
	VideoSuggestionsProcessingWarningsEnumProblematicAudioCodec              VideoSuggestionsProcessingWarningsEnum = "problematicAudioCodec"
	VideoSuggestionsProcessingWarningsEnumUnsupportedVrStereoMode            VideoSuggestionsProcessingWarningsEnum = "unsupportedVrStereoMode"
	VideoSuggestionsProcessingWarningsEnumUnsupportedSphericalProjectionType VideoSuggestionsProcessingWarningsEnum = "unsupportedSphericalProjectionType"
	VideoSuggestionsProcessingWarningsEnumUnsupportedHdrPixelFormat          VideoSuggestionsProcessingWarningsEnum = "unsupportedHdrPixelFormat"
	VideoSuggestionsProcessingWarningsEnumUnsupportedHdrColorMetadata        VideoSuggestionsProcessingWarningsEnum = "unsupportedHdrColorMetadata"
	VideoSuggestionsProcessingWarningsEnumProblematicHdrLookupTable          VideoSuggestionsProcessingWarningsEnum = "problematicHdrLookupTable"
)

func (e *VideoSuggestionsProcessingWarningsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unknownContainer":
		fallthrough
	case "unknownVideoCodec":
		fallthrough
	case "unknownAudioCodec":
		fallthrough
	case "inconsistentResolution":
		fallthrough
	case "hasEditlist":
		fallthrough
	case "problematicVideoCodec":
		fallthrough
	case "problematicAudioCodec":
		fallthrough
	case "unsupportedVrStereoMode":
		fallthrough
	case "unsupportedSphericalProjectionType":
		fallthrough
	case "unsupportedHdrPixelFormat":
		fallthrough
	case "unsupportedHdrColorMetadata":
		fallthrough
	case "problematicHdrLookupTable":
		*e = VideoSuggestionsProcessingWarningsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoSuggestionsProcessingWarningsEnum: %s", s)
	}
}

// VideoSuggestions - Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
type VideoSuggestions struct {
	// A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
	EditorSuggestions []VideoSuggestionsEditorSuggestionsEnum `json:"editorSuggestions,omitempty"`
	// A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
	ProcessingErrors []VideoSuggestionsProcessingErrorsEnum `json:"processingErrors,omitempty"`
	// A list of suggestions that may improve YouTube's ability to process the video.
	ProcessingHints []VideoSuggestionsProcessingHintsEnum `json:"processingHints,omitempty"`
	// A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
	ProcessingWarnings []VideoSuggestionsProcessingWarningsEnum `json:"processingWarnings,omitempty"`
	// A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
	TagSuggestions []VideoSuggestionsTagSuggestion `json:"tagSuggestions,omitempty"`
}
