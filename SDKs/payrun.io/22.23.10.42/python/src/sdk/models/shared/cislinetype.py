"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CisLineTypeCisLineTypeNominalCode:
    r"""The cis line types' nominal code"""
    
    at_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@href'), 'exclude': lambda f: f is None }})
    r"""The links' href"""  
    at_rel: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@rel'), 'exclude': lambda f: f is None }})
    r"""The links' target type"""  
    at_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@title'), 'exclude': lambda f: f is None }})
    r"""The links' title"""  
    
class CisLineTypeCisLineTypeTaxTreatmentEnum(str, Enum):
    r"""The cis line types' tax treatment"""
    TAXABLE = 'Taxable'
    NON_TAXABLE = 'NonTaxable'
    NOTIONAL = 'Notional'
    MATERIALS = 'Materials'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CisLineTypeCisLineType:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})
    r"""The cis line types' description"""  
    line_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LineType'), 'exclude': lambda f: f is None }})
    r"""The cis line types' line type"""  
    nominal_code: Optional[CisLineTypeCisLineTypeNominalCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NominalCode'), 'exclude': lambda f: f is None }})
    r"""The cis line types' nominal code"""  
    tax_treatment: Optional[CisLineTypeCisLineTypeTaxTreatmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxTreatment'), 'exclude': lambda f: f is None }})
    r"""The cis line types' tax treatment"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CisLineType:
    r"""The cis line type object."""
    
    cis_line_type: Optional[CisLineTypeCisLineType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CisLineType'), 'exclude': lambda f: f is None }})  
    