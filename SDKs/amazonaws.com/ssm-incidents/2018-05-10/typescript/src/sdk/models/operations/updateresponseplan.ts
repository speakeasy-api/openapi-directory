/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The Chatbot chat channel used for collaboration during an incident.
 */
export class UpdateResponsePlanRequestBodyChatChannel extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "chatbotSns" })
  chatbotSns?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "empty" })
  empty?: Record<string, any>;
}

export class UpdateResponsePlanRequestBody extends SpeakeasyBase {
  /**
   * The actions that this response plan takes at the beginning of an incident.
   */
  @SpeakeasyMetadata({ elemType: shared.Action })
  @Expose({ name: "actions" })
  @Type(() => shared.Action)
  actions?: shared.Action[];

  /**
   * The Amazon Resource Name (ARN) of the response plan.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn: string;

  /**
   * The Chatbot chat channel used for collaboration during an incident.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "chatChannel" })
  @Type(() => UpdateResponsePlanRequestBodyChatChannel)
  chatChannel?: UpdateResponsePlanRequestBodyChatChannel;

  /**
   * A token ensuring that the operation is called only once with the specified details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken?: string;

  /**
   * The long format name of the response plan. The display name can't contain spaces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "engagements" })
  engagements?: string[];

  /**
   * The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incidentTemplateDedupeString" })
  incidentTemplateDedupeString?: string;

  /**
   * <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>5</code> - Severe impact</p> </li> <li> <p> <code>4</code> - High impact</p> </li> <li> <p> <code>3</code> - Medium impact</p> </li> <li> <p> <code>2</code> - Low impact</p> </li> <li> <p> <code>1</code> - No impact</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incidentTemplateImpact" })
  incidentTemplateImpact?: number;

  /**
   * The Amazon SNS targets that are notified when updates are made to an incident.
   */
  @SpeakeasyMetadata({ elemType: shared.NotificationTargetItem })
  @Expose({ name: "incidentTemplateNotificationTargets" })
  @Type(() => shared.NotificationTargetItem)
  incidentTemplateNotificationTargets?: shared.NotificationTargetItem[];

  /**
   * A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incidentTemplateSummary" })
  incidentTemplateSummary?: string;

  /**
   * Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incidentTemplateTags" })
  incidentTemplateTags?: Record<string, string>;

  /**
   * The short format name of the incident. The title can't contain spaces.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "incidentTemplateTitle" })
  incidentTemplateTitle?: string;

  /**
   * Information about third-party services integrated into the response plan.
   */
  @SpeakeasyMetadata({ elemType: shared.Integration })
  @Expose({ name: "integrations" })
  @Type(() => shared.Integration)
  integrations?: shared.Integration[];
}

export class UpdateResponsePlanRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateResponsePlanRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateResponsePlanResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateResponsePlanOutput?: Record<string, any>;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
