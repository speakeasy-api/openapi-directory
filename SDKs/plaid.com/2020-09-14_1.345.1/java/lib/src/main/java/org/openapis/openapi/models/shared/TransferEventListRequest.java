/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * TransferEventListRequest - Defines the request schema for `/transfer/event/list`
 */
public class TransferEventListRequest {
    /**
     * The account ID to get events for all transactions to/from an account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    public String accountId;

    public TransferEventListRequest withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;

    public TransferEventListRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    public Long count;

    public TransferEventListRequest withCount(Long count) {
        this.count = count;
        return this;
    }
    
    /**
     * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_date")
    public OffsetDateTime endDate;

    public TransferEventListRequest withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Filter events by event type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_types")
    public TransferEventTypeEnum[] eventTypes;

    public TransferEventListRequest withEventTypes(TransferEventTypeEnum[] eventTypes) {
        this.eventTypes = eventTypes;
        return this;
    }
    
    /**
     * Filter transfer events to only those with the specified `funding_account_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("funding_account_id")
    public String fundingAccountId;

    public TransferEventListRequest withFundingAccountId(String fundingAccountId) {
        this.fundingAccountId = fundingAccountId;
        return this;
    }
    
    /**
     * The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 events will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Long offset;

    public TransferEventListRequest withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The origination account ID to get events for transfers from a specific origination account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origination_account_id")
    public String originationAccountId;

    public TransferEventListRequest withOriginationAccountId(String originationAccountId) {
        this.originationAccountId = originationAccountId;
        return this;
    }
    
    /**
     * Filter transfer events to only those with the specified originator client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originator_client_id")
    public String originatorClientId;

    public TransferEventListRequest withOriginatorClientId(String originatorClientId) {
        this.originatorClientId = originatorClientId;
        return this;
    }
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;

    public TransferEventListRequest withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_date")
    public OffsetDateTime startDate;

    public TransferEventListRequest withStartDate(OffsetDateTime startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * Plaid\u2019s unique identifier for a sweep.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sweep_id")
    public String sweepId;

    public TransferEventListRequest withSweepId(String sweepId) {
        this.sweepId = sweepId;
        return this;
    }
    
    /**
     * Plaid\u2019s unique identifier for a transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfer_id")
    public String transferId;

    public TransferEventListRequest withTransferId(String transferId) {
        this.transferId = transferId;
        return this;
    }
    
    /**
     * The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transfer_type")
    public TransferEventListTransferTypeEnum transferType;

    public TransferEventListRequest withTransferType(TransferEventListTransferTypeEnum transferType) {
        this.transferType = transferType;
        return this;
    }
    
    public TransferEventListRequest(){}
}
