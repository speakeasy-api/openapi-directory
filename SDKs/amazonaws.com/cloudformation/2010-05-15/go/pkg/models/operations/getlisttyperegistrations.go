// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETListTypeRegistrationsActionEnum
type GETListTypeRegistrationsActionEnum string

const (
	GETListTypeRegistrationsActionEnumListTypeRegistrations GETListTypeRegistrationsActionEnum = "ListTypeRegistrations"
)

func (e GETListTypeRegistrationsActionEnum) ToPointer() *GETListTypeRegistrationsActionEnum {
	return &e
}

func (e *GETListTypeRegistrationsActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ListTypeRegistrations":
		*e = GETListTypeRegistrationsActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeRegistrationsActionEnum: %v", v)
	}
}

// GETListTypeRegistrationsRegistrationStatusFilterEnum - <p>The current status of the extension registration request.</p> <p>The default is <code>IN_PROGRESS</code>.</p>
type GETListTypeRegistrationsRegistrationStatusFilterEnum string

const (
	GETListTypeRegistrationsRegistrationStatusFilterEnumComplete   GETListTypeRegistrationsRegistrationStatusFilterEnum = "COMPLETE"
	GETListTypeRegistrationsRegistrationStatusFilterEnumInProgress GETListTypeRegistrationsRegistrationStatusFilterEnum = "IN_PROGRESS"
	GETListTypeRegistrationsRegistrationStatusFilterEnumFailed     GETListTypeRegistrationsRegistrationStatusFilterEnum = "FAILED"
)

func (e GETListTypeRegistrationsRegistrationStatusFilterEnum) ToPointer() *GETListTypeRegistrationsRegistrationStatusFilterEnum {
	return &e
}

func (e *GETListTypeRegistrationsRegistrationStatusFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "COMPLETE":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "FAILED":
		*e = GETListTypeRegistrationsRegistrationStatusFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeRegistrationsRegistrationStatusFilterEnum: %v", v)
	}
}

// GETListTypeRegistrationsTypeEnum - <p>The kind of extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
type GETListTypeRegistrationsTypeEnum string

const (
	GETListTypeRegistrationsTypeEnumResource GETListTypeRegistrationsTypeEnum = "RESOURCE"
	GETListTypeRegistrationsTypeEnumModule   GETListTypeRegistrationsTypeEnum = "MODULE"
	GETListTypeRegistrationsTypeEnumHook     GETListTypeRegistrationsTypeEnum = "HOOK"
)

func (e GETListTypeRegistrationsTypeEnum) ToPointer() *GETListTypeRegistrationsTypeEnum {
	return &e
}

func (e *GETListTypeRegistrationsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETListTypeRegistrationsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeRegistrationsTypeEnum: %v", v)
	}
}

// GETListTypeRegistrationsVersionEnum
type GETListTypeRegistrationsVersionEnum string

const (
	GETListTypeRegistrationsVersionEnumTwoThousandAndTen0515 GETListTypeRegistrationsVersionEnum = "2010-05-15"
)

func (e GETListTypeRegistrationsVersionEnum) ToPointer() *GETListTypeRegistrationsVersionEnum {
	return &e
}

func (e *GETListTypeRegistrationsVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-15":
		*e = GETListTypeRegistrationsVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETListTypeRegistrationsVersionEnum: %v", v)
	}
}

type GETListTypeRegistrationsRequest struct {
	Action GETListTypeRegistrationsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=MaxResults"`
	// If the previous paginated request didn't return all the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>.
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
	// <p>The current status of the extension registration request.</p> <p>The default is <code>IN_PROGRESS</code>.</p>
	RegistrationStatusFilter *GETListTypeRegistrationsRegistrationStatusFilterEnum `queryParam:"style=form,explode=true,name=RegistrationStatusFilter"`
	// <p>The kind of extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	Type *GETListTypeRegistrationsTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The Amazon Resource Name (ARN) of the extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	TypeArn *string `queryParam:"style=form,explode=true,name=TypeArn"`
	// <p>The name of the extension.</p> <p>Conditional: You must specify either <code>TypeName</code> and <code>Type</code>, or <code>Arn</code>.</p>
	TypeName          *string                             `queryParam:"style=form,explode=true,name=TypeName"`
	Version           GETListTypeRegistrationsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETListTypeRegistrationsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
