"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import searchorderscustomerfilter as shared_searchorderscustomerfilter
from ..shared import searchordersdatetimefilter as shared_searchordersdatetimefilter
from ..shared import searchordersfulfillmentfilter as shared_searchordersfulfillmentfilter
from ..shared import searchorderssourcefilter as shared_searchorderssourcefilter
from ..shared import searchordersstatefilter as shared_searchordersstatefilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchOrdersFilter:
    r"""Filtering criteria to use for a `SearchOrders` request. Multiple filters
    are ANDed together.
    """
    
    customer_filter: Optional[shared_searchorderscustomerfilter.SearchOrdersCustomerFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_filter'), 'exclude': lambda f: f is None }})
    r"""A filter based on the order `customer_id` and any tender `customer_id`
    associated with the order. It does not filter based on the
    [FulfillmentRecipient](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillmentRecipient) `customer_id`.
    """  
    date_time_filter: Optional[shared_searchordersdatetimefilter.SearchOrdersDateTimeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time_filter'), 'exclude': lambda f: f is None }})
    r"""Filter for `Order` objects based on whether their `CREATED_AT`,
    `CLOSED_AT`, or `UPDATED_AT` timestamps fall within a specified time range.
    You can specify the time range and which timestamp to filter for. You can filter
    for only one time range at a time.
    
    For each time range, the start time and end time are inclusive. If the end time
    is absent, it defaults to the time of the first request for the cursor.
    
    __Important:__ If you use the `DateTimeFilter` in a `SearchOrders` query,
    you must set the `sort_field` in [OrdersSort](https://developer.squareup.com/reference/square_2021-08-18/objects/SearchOrdersSort)
    to the same field you filter for. For example, if you set the `CLOSED_AT` field
    in `DateTimeFilter`, you must set the `sort_field` in `SearchOrdersSort` to
    `CLOSED_AT`. Otherwise, `SearchOrders` throws an error.
    [Learn more about filtering orders by time range.](https://developer.squareup.com/docs/orders-api/manage-orders#important-note-on-filtering-orders-by-time-range)
    """  
    fulfillment_filter: Optional[shared_searchordersfulfillmentfilter.SearchOrdersFulfillmentFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fulfillment_filter'), 'exclude': lambda f: f is None }})
    r"""Filter based on [order fulfillment](https://developer.squareup.com/reference/square_2021-08-18/objects/OrderFulfillment) information."""  
    source_filter: Optional[shared_searchorderssourcefilter.SearchOrdersSourceFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_filter'), 'exclude': lambda f: f is None }})
    r"""A filter based on order `source` information."""  
    state_filter: Optional[shared_searchordersstatefilter.SearchOrdersStateFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state_filter'), 'exclude': lambda f: f is None }})
    r"""Filter by the current order `state`."""  
    