"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import backupretentionsettings as shared_backupretentionsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BackupConfiguration:
    r"""Database instance backup configuration."""
    
    backup_retention_settings: Optional[shared_backupretentionsettings.BackupRetentionSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backupRetentionSettings'), 'exclude': lambda f: f is None }})
    r"""We currently only support backup retention by specifying the number of backups we will retain."""  
    binary_log_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('binaryLogEnabled'), 'exclude': lambda f: f is None }})
    r"""(MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Whether this configuration is enabled."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""This is always `sql#backupConfiguration`."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Location of the backup"""  
    point_in_time_recovery_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointInTimeRecoveryEnabled'), 'exclude': lambda f: f is None }})
    r"""(Postgres only) Whether point in time recovery is enabled."""  
    replication_log_archiving_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replicationLogArchivingEnabled'), 'exclude': lambda f: f is None }})
    r"""Reserved for future use."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTime'), 'exclude': lambda f: f is None }})
    r"""Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`."""  
    transaction_log_retention_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionLogRetentionDays'), 'exclude': lambda f: f is None }})
    r"""The number of days of transaction logs we retain for point in time restore, from 1-7."""  
    