"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Region:
    r"""Region Restv 2 Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_game_region_options_using_get(self, request: operations.GETGameRegionOptionsUsingGETRequest) -> operations.GETGameRegionOptionsUsingGETResponse:
        r"""getGameRegionOptions"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETGameRegionOptionsUsingGETRequest, base_url, '/restv2/game/{gameApiKey}/regions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETGameRegionOptionsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GameRegionOptionsDTO])
                res.game_region_options_dto = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_region_options_using_get(self) -> operations.GETRegionOptionsUsingGETResponse:
        r"""getRegionOptions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/restv2/game/regions'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETRegionOptionsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GameRegionOptionsDTO])
                res.game_region_options_dto = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def set_game_region_using_post(self, request: operations.SetGameRegionUsingPOSTRequest) -> operations.SetGameRegionUsingPOSTResponse:
        r"""setGameRegion"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetGameRegionUsingPOSTRequest, base_url, '/restv2/game/{gameApiKey}/region/{regionCode}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetGameRegionUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegionResult])
                res.region_result = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    