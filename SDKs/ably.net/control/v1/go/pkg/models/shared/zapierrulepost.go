// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ZapierRulePostRuleTypeEnum string

const (
	ZapierRulePostRuleTypeEnumHTTPZapier ZapierRulePostRuleTypeEnum = "http/zapier"
)

func (e ZapierRulePostRuleTypeEnum) ToPointer() *ZapierRulePostRuleTypeEnum {
	return &e
}

func (e *ZapierRulePostRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/zapier":
		*e = ZapierRulePostRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ZapierRulePostRuleTypeEnum: %v", v)
	}
}

type ZapierRulePostTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type ZapierRulePostTarget struct {
	Headers      []ZapierRulePostTargetHeaders `json:"headers,omitempty"`
	SigningKeyID *string                       `json:"signingKeyId,omitempty"`
	URL          string                        `json:"url"`
}

type ZapierRulePost struct {
	RequestMode string                     `json:"requestMode"`
	RuleType    ZapierRulePostRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                 `json:"source"`
	Status      *string                    `json:"status,omitempty"`
	Target      ZapierRulePostTarget       `json:"target"`
}
