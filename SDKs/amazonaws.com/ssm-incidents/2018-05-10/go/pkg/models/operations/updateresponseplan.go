// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateResponsePlanRequestBodyChatChannel - The Chatbot chat channel used for collaboration during an incident.
type UpdateResponsePlanRequestBodyChatChannel struct {
	ChatbotSns []string               `json:"chatbotSns,omitempty"`
	Empty      map[string]interface{} `json:"empty,omitempty"`
}

type UpdateResponsePlanRequestBody struct {
	// The actions that this response plan takes at the beginning of an incident.
	Actions []shared.Action `json:"actions,omitempty"`
	// The Amazon Resource Name (ARN) of the response plan.
	Arn string `json:"arn"`
	// The Chatbot chat channel used for collaboration during an incident.
	ChatChannel *UpdateResponsePlanRequestBodyChatChannel `json:"chatChannel,omitempty"`
	// A token ensuring that the operation is called only once with the specified details.
	ClientToken *string `json:"clientToken,omitempty"`
	// The long format name of the response plan. The display name can't contain spaces.
	DisplayName *string `json:"displayName,omitempty"`
	// The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.
	Engagements []string `json:"engagements,omitempty"`
	// The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.
	IncidentTemplateDedupeString *string `json:"incidentTemplateDedupeString,omitempty"`
	// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p> <p class="title"> <b>Possible impacts:</b> </p> <ul> <li> <p> <code>5</code> - Severe impact</p> </li> <li> <p> <code>4</code> - High impact</p> </li> <li> <p> <code>3</code> - Medium impact</p> </li> <li> <p> <code>2</code> - Low impact</p> </li> <li> <p> <code>1</code> - No impact</p> </li> </ul>
	IncidentTemplateImpact *int64 `json:"incidentTemplateImpact,omitempty"`
	// The Amazon SNS targets that are notified when updates are made to an incident.
	IncidentTemplateNotificationTargets []shared.NotificationTargetItem `json:"incidentTemplateNotificationTargets,omitempty"`
	// A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.
	IncidentTemplateSummary *string `json:"incidentTemplateSummary,omitempty"`
	// Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.
	IncidentTemplateTags map[string]string `json:"incidentTemplateTags,omitempty"`
	// The short format name of the incident. The title can't contain spaces.
	IncidentTemplateTitle *string `json:"incidentTemplateTitle,omitempty"`
	// Information about third-party services integrated into the response plan.
	Integrations []shared.Integration `json:"integrations,omitempty"`
}

type UpdateResponsePlanRequest struct {
	RequestBody       UpdateResponsePlanRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateResponsePlanResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateResponsePlanOutput map[string]interface{}
	// ValidationException
	ValidationException interface{}
}
