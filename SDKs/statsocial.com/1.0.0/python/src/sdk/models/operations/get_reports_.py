"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import five_hundred_error as shared_five_hundred_error
from ..shared import four_hundred_and_four_error as shared_four_hundred_and_four_error
from ..shared import four_hundred_and_one_error as shared_four_hundred_and_one_error
from ..shared import four_hundred_and_three_error as shared_four_hundred_and_three_error
from ..shared import four_hundred_error as shared_four_hundred_error
from ..shared import report_success as shared_report_success
from typing import Optional


@dataclasses.dataclass
class GetReportsRequest:
    
    report_hash: str = dataclasses.field(metadata={'query_param': { 'field_name': 'report_hash', 'style': 'form', 'explode': True }})
    r"""Unique report hash"""  
    sample: int = dataclasses.field(metadata={'query_param': { 'field_name': 'sample', 'style': 'form', 'explode': True }})
    r"""Sample report indicator"""  
    baseline: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'baseline', 'style': 'form', 'explode': True }})
    r"""Default value will be 'world'"""  
    report_date: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'report_date', 'style': 'form', 'explode': True }})
    r"""report_date represents a Unix timestamp of when the report was generated. Default value will be the latest report generated. You can request the /report/dates/ endpoint in order to obtain available timestamps. Date must be in the future."""  
    

@dataclasses.dataclass
class GetReportsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_error: Optional[shared_four_hundred_error.FourHundredError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: Invalid API parameters, error_code_msg: API_INVALID_PARAMS}<br>{success: 0, msg: Error please include the 'action' parameter, error_code_msg: API_MISSING_ACTION_PARAMETER}<br>{success: 0, msg: Invalid or non-existent baseline supplied, error_code_msg: INVALID_BASELINE}<br>{success: 0, msg: Invalid report_date parameter value. Must be an integer, error_code_msg: INVALID_REPORT_DATE}"""  
    four_hundred_and_one_error: Optional[shared_four_hundred_and_one_error.FourHundredAndOneError] = dataclasses.field(default=None)
    r"""{success: 0, msg: Invalid API key, error_code_msg: API_INVALID_KEY}"""  
    four_hundred_and_three_error: Optional[shared_four_hundred_and_three_error.FourHundredAndThreeError] = dataclasses.field(default=None)
    r"""{success: 0, msg: You are going too fast}"""  
    four_hundred_and_four_error: Optional[shared_four_hundred_and_four_error.FourHundredAndFourError] = dataclasses.field(default=None)
    r"""{success: 0, msg: Report does not currently exist, error_code_msg: API_ERROR_RETRIEVING_REPORT}"""  
    five_hundred_error: Optional[shared_five_hundred_error.FiveHundredError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: Report has no data, error_code_msg: API_ERROR_EMPTY_REPORT}<br>{success: 0, msg: Internal database error, error_code_msg: API_ERROR_DATABASE_INITIATION_ERROR}<br>{success: 0, msg: Error getting application's credentials, error_code_msg: API_ERROR_GETTING_APPLICATION_INFO}"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_success: Optional[shared_report_success.ReportSuccess] = dataclasses.field(default=None)
    r"""Success"""  
    