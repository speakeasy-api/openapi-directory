// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type PostAssetsVarianceRequestBody3Assets struct {
	// The asset volatility
	AssetVolatility float64 `json:"assetVolatility"`
}

type PostAssetsVarianceRequestBody3 struct {
	Assets []PostAssetsVarianceRequestBody3Assets `json:"assets"`
}

type PostAssetsVarianceRequestBody2 struct {
	// The number of assets
	Assets int64 `json:"assets"`
	// assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j
	AssetsCovarianceMatrix [][]float64 `json:"assetsCovarianceMatrix"`
}

type PostAssetsVarianceRequestBody1Assets struct {
	// assetReturns[t] is the return of the asset at the time t
	AssetReturns []float64 `json:"assetReturns"`
}

type PostAssetsVarianceRequestBody1 struct {
	Assets []PostAssetsVarianceRequestBody1Assets `json:"assets"`
}

type PostAssetsVarianceRequestBodyType string

const (
	PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody1 PostAssetsVarianceRequestBodyType = "post_/assets/variance_requestBody_1"
	PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody2 PostAssetsVarianceRequestBodyType = "post_/assets/variance_requestBody_2"
	PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody3 PostAssetsVarianceRequestBodyType = "post_/assets/variance_requestBody_3"
)

type PostAssetsVarianceRequestBody struct {
	PostAssetsVarianceRequestBody1 *PostAssetsVarianceRequestBody1
	PostAssetsVarianceRequestBody2 *PostAssetsVarianceRequestBody2
	PostAssetsVarianceRequestBody3 *PostAssetsVarianceRequestBody3

	Type PostAssetsVarianceRequestBodyType
}

func CreatePostAssetsVarianceRequestBodyPostAssetsVarianceRequestBody1(postAssetsVarianceRequestBody1 PostAssetsVarianceRequestBody1) PostAssetsVarianceRequestBody {
	typ := PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody1

	return PostAssetsVarianceRequestBody{
		PostAssetsVarianceRequestBody1: &postAssetsVarianceRequestBody1,
		Type:                           typ,
	}
}

func CreatePostAssetsVarianceRequestBodyPostAssetsVarianceRequestBody2(postAssetsVarianceRequestBody2 PostAssetsVarianceRequestBody2) PostAssetsVarianceRequestBody {
	typ := PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody2

	return PostAssetsVarianceRequestBody{
		PostAssetsVarianceRequestBody2: &postAssetsVarianceRequestBody2,
		Type:                           typ,
	}
}

func CreatePostAssetsVarianceRequestBodyPostAssetsVarianceRequestBody3(postAssetsVarianceRequestBody3 PostAssetsVarianceRequestBody3) PostAssetsVarianceRequestBody {
	typ := PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody3

	return PostAssetsVarianceRequestBody{
		PostAssetsVarianceRequestBody3: &postAssetsVarianceRequestBody3,
		Type:                           typ,
	}
}

func (u *PostAssetsVarianceRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postAssetsVarianceRequestBody1 := new(PostAssetsVarianceRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAssetsVarianceRequestBody1); err == nil {
		u.PostAssetsVarianceRequestBody1 = postAssetsVarianceRequestBody1
		u.Type = PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody1
		return nil
	}

	postAssetsVarianceRequestBody2 := new(PostAssetsVarianceRequestBody2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAssetsVarianceRequestBody2); err == nil {
		u.PostAssetsVarianceRequestBody2 = postAssetsVarianceRequestBody2
		u.Type = PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody2
		return nil
	}

	postAssetsVarianceRequestBody3 := new(PostAssetsVarianceRequestBody3)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postAssetsVarianceRequestBody3); err == nil {
		u.PostAssetsVarianceRequestBody3 = postAssetsVarianceRequestBody3
		u.Type = PostAssetsVarianceRequestBodyTypePostAssetsVarianceRequestBody3
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostAssetsVarianceRequestBody) MarshalJSON() ([]byte, error) {
	if u.PostAssetsVarianceRequestBody1 != nil {
		return json.Marshal(u.PostAssetsVarianceRequestBody1)
	}

	if u.PostAssetsVarianceRequestBody2 != nil {
		return json.Marshal(u.PostAssetsVarianceRequestBody2)
	}

	if u.PostAssetsVarianceRequestBody3 != nil {
		return json.Marshal(u.PostAssetsVarianceRequestBody3)
	}

	return nil, nil
}

type PostAssetsVarianceRequest struct {
	Request PostAssetsVarianceRequestBody `request:"mediaType=application/json"`
}

type PostAssetsVariance200ApplicationJSONAssets struct {
	// The variance of the asset
	AssetVariance float64 `json:"assetVariance"`
}

// PostAssetsVariance200ApplicationJSON - OK
type PostAssetsVariance200ApplicationJSON struct {
	Assets []PostAssetsVariance200ApplicationJSONAssets `json:"assets"`
}

type PostAssetsVarianceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostAssetsVariance200ApplicationJSONObject *PostAssetsVariance200ApplicationJSON
}
