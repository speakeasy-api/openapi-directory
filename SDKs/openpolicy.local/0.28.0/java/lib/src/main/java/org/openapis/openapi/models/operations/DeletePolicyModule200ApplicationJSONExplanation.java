/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class DeletePolicyModule200ApplicationJSONExplanation {
    /**
     * The query's term bindings at the point when the trace event was emitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locals")
    public DeletePolicyModule200ApplicationJSONExplanationLocals[] locals;
    public DeletePolicyModule200ApplicationJSONExplanation withLocals(DeletePolicyModule200ApplicationJSONExplanationLocals[] locals) {
        this.locals = locals;
        return this;
    }
    
    /**
     * The AST element associated with the evaluation step.
     * https://godoc.org/github.com/open-policy-agent/opa/ast - AST
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("node")
    public DeletePolicyModule200ApplicationJSONExplanationNode node;
    public DeletePolicyModule200ApplicationJSONExplanation withNode(DeletePolicyModule200ApplicationJSONExplanationNode node) {
        this.node = node;
        return this;
    }
    
    /**
     * The kind of *trace event*
     * 
     * Each trace event represents a step in the query evaluation process. Trace events are emitted at the following points:
     * - enter - before a body or rule is evaluated
     * - exit - after a body or rule has evaluated successfully
     * - eval - before an expression is evaluated
     * - fail - after an expression has evaluated to false.
     * - redo - before evaluation restarts from a body, rule, or expression.
     * 
     * By default, OPA searches for all sets of term bindings that make all expressions in the query evaluate to true. Because there may be multiple answers, the search can restart when OPA determines the query is true or false. When the search restarts, a *redo trace event* is emitted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("op")
    public DeletePolicyModule200ApplicationJSONExplanationOpEnum op;
    public DeletePolicyModule200ApplicationJSONExplanation withOp(DeletePolicyModule200ApplicationJSONExplanationOpEnum op) {
        this.op = op;
        return this;
    }
    
    /**
     * The parent query. Use this field to identify trace events from related queries.
     * 
     * For example, if query A references rule R, trace events emitted when evaluating rule R will have the *parent_id* field set to query A\u2019s *query_id*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    public Double parentId;
    public DeletePolicyModule200ApplicationJSONExplanation withParentId(Double parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * The query that the trace event was emitted for. Use this field to distinguish trace events emitted by from different queries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query_id")
    public Double queryId;
    public DeletePolicyModule200ApplicationJSONExplanation withQueryId(Double queryId) {
        this.queryId = queryId;
        return this;
    }
    
    /**
     * The type of the **node** field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public DeletePolicyModule200ApplicationJSONExplanationTypeEnum type;
    public DeletePolicyModule200ApplicationJSONExplanation withType(DeletePolicyModule200ApplicationJSONExplanationTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
