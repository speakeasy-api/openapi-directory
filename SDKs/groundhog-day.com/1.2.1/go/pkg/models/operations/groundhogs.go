// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GroundhogsIsGroundhogEnum - Filter groundhogs by type (actual, alive groundhogs, or other prognosticators)
type GroundhogsIsGroundhogEnum string

const (
	GroundhogsIsGroundhogEnumOne   GroundhogsIsGroundhogEnum = "1"
	GroundhogsIsGroundhogEnumZero  GroundhogsIsGroundhogEnum = "0"
	GroundhogsIsGroundhogEnumTrue  GroundhogsIsGroundhogEnum = "true"
	GroundhogsIsGroundhogEnumFalse GroundhogsIsGroundhogEnum = "false"
)

func (e *GroundhogsIsGroundhogEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		fallthrough
	case "true":
		fallthrough
	case "false":
		*e = GroundhogsIsGroundhogEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroundhogsIsGroundhogEnum: %s", s)
	}
}

type GroundhogsQueryParams struct {
	// Filter groundhogs by country of origin (USA or Canada).
	Country *string `queryParam:"style=form,explode=true,name=country"`
	// Filter groundhogs by type (actual, alive groundhogs, or other prognosticators)
	IsGroundhog *GroundhogsIsGroundhogEnum `queryParam:"style=form,explode=true,name=isGroundhog"`
}

type GroundhogsRequest struct {
	QueryParams GroundhogsQueryParams
}

// Groundhogs200ApplicationJSON - OK
type Groundhogs200ApplicationJSON struct {
	Groundhogs []shared.Groundhog `json:"groundhogs,omitempty"`
}

type GroundhogsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Groundhogs200ApplicationJSONObject *Groundhogs200ApplicationJSON
}
