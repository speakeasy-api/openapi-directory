"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import artifactsearchresults as shared_artifactsearchresults
from ..shared import error as shared_error
from enum import Enum
from typing import Optional

class SearchArtifactsByContentOrderEnum(str, Enum):
    r"""Sort order, ascending (`asc`) or descending (`desc`)."""
    ASC = 'asc'
    DESC = 'desc'

class SearchArtifactsByContentOrderbyEnum(str, Enum):
    r"""The field to sort by.  Can be one of:
    
    * `name`
    * `createdOn`
    """
    NAME = 'name'
    CREATED_ON = 'createdOn'


@dataclasses.dataclass
class SearchArtifactsByContentRequest:
    
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': '*/*' }})
    r"""The content to search for."""  
    artifact_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'artifactType', 'style': 'form', 'explode': True }})
    r"""Indicates the type of artifact represented by the content being used for the search.  This is only needed when using the `canonical` query parameter, so that the server knows how to canonicalize the content prior to searching for matching artifacts."""  
    canonical: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'canonical', 'style': 'form', 'explode': True }})
    r"""Parameter that can be set to `true` to indicate that the server should \\"canonicalize\\" the content when searching for matching artifacts.  Canonicalization is unique to each artifact type, but typically involves removing any extra whitespace and formatting the content in a consistent manner.  Must be used along with the `artifactType` query parameter."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The number of artifacts to return.  Defaults to 20."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""The number of artifacts to skip before starting to collect the result set.  Defaults to 0."""  
    order: Optional[SearchArtifactsByContentOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""Sort order, ascending (`asc`) or descending (`desc`)."""  
    orderby: Optional[SearchArtifactsByContentOrderbyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderby', 'style': 'form', 'explode': True }})
    r"""The field to sort by.  Can be one of:
    
    * `name`
    * `createdOn`
    """  
    

@dataclasses.dataclass
class SearchArtifactsByContentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    artifact_search_results: Optional[shared_artifactsearchresults.ArtifactSearchResults] = dataclasses.field(default=None)
    r"""On a successful response, returns a result set of artifacts - one for each artifact
    in the registry that matches the criteria.
    """  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Common response for all operations that can fail with an unexpected server error."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    