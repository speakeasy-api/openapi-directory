// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MessageEnumDirectionEnum string

const (
	MessageEnumDirectionEnumInbound       MessageEnumDirectionEnum = "inbound"
	MessageEnumDirectionEnumOutboundAPI   MessageEnumDirectionEnum = "outbound-api"
	MessageEnumDirectionEnumOutboundCall  MessageEnumDirectionEnum = "outbound-call"
	MessageEnumDirectionEnumOutboundReply MessageEnumDirectionEnum = "outbound-reply"
)

func (e MessageEnumDirectionEnum) ToPointer() *MessageEnumDirectionEnum {
	return &e
}

func (e *MessageEnumDirectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inbound":
		fallthrough
	case "outbound-api":
		fallthrough
	case "outbound-call":
		fallthrough
	case "outbound-reply":
		*e = MessageEnumDirectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessageEnumDirectionEnum: %v", v)
	}
}
