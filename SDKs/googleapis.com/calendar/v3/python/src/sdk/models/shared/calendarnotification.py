"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CalendarNotification:
    
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""The method used to deliver the notification. The possible value is:
    - \"email\" - Notifications are sent via email.  
    Required when adding a notification.
    """  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of notification. Possible values are:
    - \"eventCreation\" - Notification sent when a new event is put on the calendar. 
    - \"eventChange\" - Notification sent when an event is changed. 
    - \"eventCancellation\" - Notification sent when an event is cancelled. 
    - \"eventResponse\" - Notification sent when an attendee responds to the event invitation. 
    - \"agenda\" - An agenda with the events of the day (sent out in the morning).  
    Required when adding a notification.
    """  
    