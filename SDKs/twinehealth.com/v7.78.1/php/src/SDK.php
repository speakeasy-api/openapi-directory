<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - # Overview
 * 
 * The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the
 * [JSON API](http://jsonapi.org/format/1.0/) specification.
 * 
 * In addition to this documentation, we also provide an
 * [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) "yaml" file describing the API:
 * [Fitbit Plus API Specification](swagger.yaml).
 * 
 * # Authentication
 * Authentication for the Fitbit Plus API is based on the
 * [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant
 * types of **client_credentials** and **refresh_token**.
 * 
 * See [POST /oauth/token](#operation/createToken) for details on the request and response formats.
 * <!-- ReDoc-Inject: <security-definitions> -->
 * 
 * ## Building Integrations
 * We will provide customers with unique client credentials for each application/integration they build, allowing us
 * to enforce appropriate access controls and monitor API usage.
 * The client credentials will be scoped to the organization, and allow full access to all patients and related data
 * within that organization.
 * 
 * These credentials are appropriate for creating an integration that does one of the following:
 *  - background reporting/analysis
 *  - synchronizing data with another system (such as an EMR)
 * 
 * The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing
 * application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to
 * that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a
 * federated identity provider. You would need to have a separate means of verifying a user's identity. We do not
 * currently support the required password-based oauth flow to make this possible.
 * 
 * # Paging
 * The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.
 * 
 * #### Skip-based paging
 * 
 * Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.
 * 
 * If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.
 * 
 * #### Cursor-based paging
 * Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.
 * 
 * Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.
 * 
 * We encourage the use of cursor-based paging for performance reasons.
 * 
 * In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.
 * 
 * It is not valid to mix the two strategies.
 * 
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://api.twinehealth.com/pub',
	];
  	
    /**
     * An action is an actionable item in a patient's plan.
     * 
     * @var Action $$action
     */
	public Action $action;
	
    /**
     * A bundle is a collection of actions (an action plan) in a patient's plan summary.
     * 
     * @var Bundle $$bundle
     */
	public Bundle $bundle;
	
    /**
     * A calendar event represents an event involving or relevant to a patient which will or has occurred on a specific date or during a specific period of time.
     * 
     * @var CalendarEvent $$calendarEvent
     */
	public CalendarEvent $calendarEvent;
	
    /**
     * A calendar event response indicates the attendee's response to a calendar event.  Only `POST` for creation is allowed as the responses are updated into the corresponding calendar events.
     * 
     * @var CalendarEventResponse $$calendarEventResponse
     */
	public CalendarEventResponse $calendarEventResponse;
	
    /**
     * A coach is a person that supports a patient
     * 
     * @var Coach $$coach
     */
	public Coach $coach;
	
    /**
     * Email history represents a single email that was sent using Fitbit Plus.
     * 
     * @var EmailHistory $$emailHistory
     */
	public EmailHistory $emailHistory;
	
    /**
     * A group is a cohort of patients within an organization. The creation of groups allows for the segmentation of dashboards and analytics. For example, a group might correspond to the patients in a particular practice or the employees of a particular employer.
     * 
     * @var Group $$group
     */
	public Group $group;
	
    /**
     * A health profile contains a set of health questions and answers for a patient.
     * 
     * @var HealthProfile $$healthProfile
     */
	public HealthProfile $healthProfile;
	
    /**
     * A health profile answer is the answer to a question for a patient.
     * 
     * @var HealthProfileAnswer $$healthProfileAnswer
     */
	public HealthProfileAnswer $healthProfileAnswer;
	
    /**
     * A health profile question contains a health question and the corresponding answer for a patient.
     * 
     * @var HealthProfileQuestion $$healthProfileQuestion
     */
	public HealthProfileQuestion $healthProfileQuestion;
	
    /**
     * A health question definition specifies a health question and the corresponding answer choices.
     * 
     * @var HealthQuestionDefinition $$healthQuestionDefinition
     */
	public HealthQuestionDefinition $healthQuestionDefinition;
	
    /**
     * A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics.
     * 
     * @var Metric $$metric
     */
	public Metric $metric;
	
    /**
     * Authentication operations
     * 
     * @var Oauth $$oauth
     */
	public Oauth $oauth;
	
    /**
     * An organization is a Fitbit Plus customer. No data is accessible across organizations.
     * 
     * @var Organization $$organization
     */
	public Organization $organization;
	
    /**
     * A patient is the core user of Fitbit Plus.
     * 
     * @var Patient $$patient
     */
	public Patient $patient;
	
    /**
     * A plan is the set of actions and associated goals for a patient.
     * 
     * @var Plan $$plan
     */
	public Plan $plan;
	
    /**
     * A patient health result is a quantitative result for a patient.
     * 
     * @var Result $$result
     */
	public Result $result;
	
    /**
     * A reward allocates a portion of the budget from the reward program activation for achieving a particular goal and sets a target date.
     * 
     * @var Reward $$reward
     */
	public Reward $reward;
	
    /**
     * A reward earning specifies the portion of a reward that was earned and at what date.
     * 
     * @var RewardEarning $$rewardEarning
     */
	public RewardEarning $rewardEarning;
	
    /**
     * A reward earning fulfillment specifies the portion of a reward earning that was fulfilled and at what date.
     * 
     * @var RewardEarningFulfillment $$rewardEarningFulfillment
     */
	public RewardEarningFulfillment $rewardEarningFulfillment;
	
    /**
     * A reward program provides the details for a rewards program for a group. Different rewards programs can be created for different periods of time specified by the start_at and end_at dates. A reward program can activated for a patient any time between these dates. An activated reward program for a patient is called a reward program activation.
     * 
     * @var RewardProgram $$rewardProgram
     */
	public RewardProgram $rewardProgram;
	
    /**
     * A reward program activation is the activation of a reward program for a specific patient.
     * 
     * @var RewardProgramActivation $$rewardProgramActivation
     */
	public RewardProgramActivation $rewardProgramActivation;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->action = new Action(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->bundle = new Bundle(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->calendarEvent = new CalendarEvent(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->calendarEventResponse = new CalendarEventResponse(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->coach = new Coach(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->emailHistory = new EmailHistory(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->group = new Group(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->healthProfile = new HealthProfile(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->healthProfileAnswer = new HealthProfileAnswer(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->healthProfileQuestion = new HealthProfileQuestion(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->healthQuestionDefinition = new HealthQuestionDefinition(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->metric = new Metric(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->oauth = new Oauth(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->organization = new Organization(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->patient = new Patient(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->plan = new Plan(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->result = new Result(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->reward = new Reward(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->rewardEarning = new RewardEarning(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->rewardEarningFulfillment = new RewardEarningFulfillment(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->rewardProgram = new RewardProgram(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->rewardProgramActivation = new RewardProgramActivation(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}