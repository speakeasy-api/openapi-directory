<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SchemaResponses 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a Incomplete Schema Response
     * 
     * This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the `in_progress` state. Once a Schema Response is transitioned to an `approved` it is immutable and another Schema Response must be created to update the Schema Response for that registration.
     * #### Returns
     * Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SchemaResponseDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SchemaResponseDeleteResponse
     */
	public function schemaResponseDelete(
        \OpenAPI\OpenAPI\Models\Operations\SchemaResponseDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SchemaResponseDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/schema_responses/{schema_response_id}', \OpenAPI\OpenAPI\Models\Operations\SchemaResponseDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchemaResponseDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Update a Registration's Schema Response
     * 
     * Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an `in_progress` state.
     * #### Returns
     * Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePatchResponse
     */
	public function schemaResponsePatch(
        \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/schema_responses/{schema_response_id}', \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create a new Schema Response
     * 
     * This endpoint creates a new Schema Response with an `in_progress` state. A new response can only be created if the current schema response is in an `approved` state.
     * #### Returns
     * Returns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePpostSchemaResponsesInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePpostResponse
     */
	public function schemaResponsePpost(
        \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePpostSchemaResponsesInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePpostResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/schema_responses/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchemaResponsePpostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all Schema Responses
     * 
     * This retrieves a paginated list of all active Schema Responses that are public.
     * #### Returns
     * Returns a JSON object containing `data` and `links` keys. The `data` key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).
     * #### Errors
     * This request should never return an error.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesListResponse
     */
	public function schemaResponsesList(
    ): \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/schema_responses/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a Schema Response
     * 
     * This retrieves a single Schema response using it's id.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested Schema Response, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesReadResponse
     */
	public function schemaResponsesRead(
        \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/schema_responses/{schema_response_id}', \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SchemaResponsesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}