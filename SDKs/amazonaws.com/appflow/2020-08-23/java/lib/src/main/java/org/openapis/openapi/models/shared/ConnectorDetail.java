/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ConnectorDetail - Information about the registered connector.
 */
public class ConnectorDetail {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationType")
    public String applicationType;
    public ConnectorDetail withApplicationType(String applicationType) {
        this.applicationType = applicationType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorDescription")
    public String connectorDescription;
    public ConnectorDetail withConnectorDescription(String connectorDescription) {
        this.connectorDescription = connectorDescription;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorLabel")
    public String connectorLabel;
    public ConnectorDetail withConnectorLabel(String connectorLabel) {
        this.connectorLabel = connectorLabel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorModes")
    public String[] connectorModes;
    public ConnectorDetail withConnectorModes(String[] connectorModes) {
        this.connectorModes = connectorModes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorName")
    public String connectorName;
    public ConnectorDetail withConnectorName(String connectorName) {
        this.connectorName = connectorName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorOwner")
    public String connectorOwner;
    public ConnectorDetail withConnectorOwner(String connectorOwner) {
        this.connectorOwner = connectorOwner;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorProvisioningType")
    public ConnectorProvisioningTypeEnum connectorProvisioningType;
    public ConnectorDetail withConnectorProvisioningType(ConnectorProvisioningTypeEnum connectorProvisioningType) {
        this.connectorProvisioningType = connectorProvisioningType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorType")
    public ConnectorTypeEnum connectorType;
    public ConnectorDetail withConnectorType(ConnectorTypeEnum connectorType) {
        this.connectorType = connectorType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectorVersion")
    public String connectorVersion;
    public ConnectorDetail withConnectorVersion(String connectorVersion) {
        this.connectorVersion = connectorVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("registeredAt")
    public OffsetDateTime registeredAt;
    public ConnectorDetail withRegisteredAt(OffsetDateTime registeredAt) {
        this.registeredAt = registeredAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registeredBy")
    public String registeredBy;
    public ConnectorDetail withRegisteredBy(String registeredBy) {
        this.registeredBy = registeredBy;
        return this;
    }
    
}
