/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Job - The Cloud Batch Job description.
 */
public class Job {
    /**
     * A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocationPolicy")
    public AllocationPolicy allocationPolicy;
    public Job withAllocationPolicy(AllocationPolicy allocationPolicy) {
        this.allocationPolicy = allocationPolicy;
        return this;
    }
    
    /**
     * Output only. When the Job was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Job withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Job withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logsPolicy")
    public LogsPolicy logsPolicy;
    public Job withLogsPolicy(LogsPolicy logsPolicy) {
        this.logsPolicy = logsPolicy;
        return this;
    }
    
    /**
     * Output only. Job name. For example: "projects/123456/locations/us-central1/jobs/job01".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Job withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Notification configurations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notifications")
    public JobNotification[] notifications;
    public Job withNotifications(JobNotification[] notifications) {
        this.notifications = notifications;
        return this;
    }
    
    /**
     * Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public String priority;
    public Job withPriority(String priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * Job status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public JobStatus status;
    public Job withStatus(JobStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Required. TaskGroups in the Job. Only one TaskGroup is supported now.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskGroups")
    public TaskGroup[] taskGroups;
    public Job withTaskGroups(TaskGroup[] taskGroups) {
        this.taskGroups = taskGroups;
        return this;
    }
    
    /**
     * Output only. A system generated unique ID (in UUID4 format) for the Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public Job withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. The last time the Job was updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Job withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
