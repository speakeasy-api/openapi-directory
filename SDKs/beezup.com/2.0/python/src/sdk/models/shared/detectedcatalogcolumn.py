"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import columnconfiguration as shared_columnconfiguration
from ..shared import detectedcatalogcolumnlinks as shared_detectedcatalogcolumnlinks
from ..shared import duplicateproductvalueconfiguration as shared_duplicateproductvalueconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DetectedCatalogColumn:
    r"""The catalog column detected during the first parsing step"""
    
    catalog_column_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catalogColumnName') }})
    r"""The catalog column name"""  
    configuration: shared_columnconfiguration.ColumnConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration') }})
    r"""Indicates the configuration applied on the column (catalog or custom) during the importation process."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The catalog column identifier"""  
    links: shared_detectedcatalogcolumnlinks.DetectedCatalogColumnLinks = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links') }})  
    user_colum_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userColumName') }})
    r"""Column named by the user"""  
    duplicate_product_value_configuration: Optional[shared_duplicateproductvalueconfiguration.DuplicateProductValueConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicateProductValueConfiguration'), 'exclude': lambda f: f is None }})
    r"""Describe how you want to manage the duplication of the product value"""  
    ignored: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignored'), 'exclude': lambda f: f is None }})
    r"""IF true, the product values of this column will be not taken in account during the importation process"""  
    