/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateParticipantServerList = ["https://api.twilio.com"] as const;

export class UpdateParticipantSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

/**
 * The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
 */
export enum UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
 */
export enum UpdateParticipantUpdateParticipantRequestHoldMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

/**
 * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
 */
export enum UpdateParticipantUpdateParticipantRequestWaitMethodEnum {
  Head = "HEAD",
  Get = "GET",
  Post = "POST",
  Patch = "PATCH",
  Put = "PUT",
  Delete = "DELETE",
}

export class UpdateParticipantUpdateParticipantRequest extends SpeakeasyBase {
  /**
   * The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
   */
  @SpeakeasyMetadata({ data: "form, name=AnnounceMethod" })
  announceMethod?: UpdateParticipantUpdateParticipantRequestAnnounceMethodEnum;

  /**
   * The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
   */
  @SpeakeasyMetadata({ data: "form, name=AnnounceUrl" })
  announceUrl?: string;

  /**
   * Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=BeepOnExit" })
  beepOnExit?: boolean;

  /**
   * The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
   */
  @SpeakeasyMetadata({ data: "form, name=CallSidToCoach" })
  callSidToCoach?: string;

  /**
   * Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
   */
  @SpeakeasyMetadata({ data: "form, name=Coaching" })
  coaching?: boolean;

  /**
   * Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=EndConferenceOnExit" })
  endConferenceOnExit?: boolean;

  /**
   * Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
   */
  @SpeakeasyMetadata({ data: "form, name=Hold" })
  hold?: boolean;

  /**
   * The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
   */
  @SpeakeasyMetadata({ data: "form, name=HoldMethod" })
  holdMethod?: UpdateParticipantUpdateParticipantRequestHoldMethodEnum;

  /**
   * The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
   */
  @SpeakeasyMetadata({ data: "form, name=HoldUrl" })
  holdUrl?: string;

  /**
   * Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
   */
  @SpeakeasyMetadata({ data: "form, name=Muted" })
  muted?: boolean;

  /**
   * The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
   */
  @SpeakeasyMetadata({ data: "form, name=WaitMethod" })
  waitMethod?: UpdateParticipantUpdateParticipantRequestWaitMethodEnum;

  /**
   * The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
   */
  @SpeakeasyMetadata({ data: "form, name=WaitUrl" })
  waitUrl?: string;
}

export class UpdateParticipantRequest extends SpeakeasyBase {
  /**
   * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=AccountSid",
  })
  accountSid: string;

  /**
   * The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=CallSid",
  })
  callSid: string;

  /**
   * The SID of the conference with the participant to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ConferenceSid",
  })
  conferenceSid: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: UpdateParticipantUpdateParticipantRequest;
}

export class UpdateParticipantResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  apiV2010AccountConferenceParticipant?: shared.ApiV2010AccountConferenceParticipant;
}
