// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutOrganizationConformancePackXAmzTargetEnum
type PutOrganizationConformancePackXAmzTargetEnum string

const (
	PutOrganizationConformancePackXAmzTargetEnumStarlingDoveServicePutOrganizationConformancePack PutOrganizationConformancePackXAmzTargetEnum = "StarlingDoveService.PutOrganizationConformancePack"
)

func (e *PutOrganizationConformancePackXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "StarlingDoveService.PutOrganizationConformancePack":
		*e = PutOrganizationConformancePackXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutOrganizationConformancePackXAmzTargetEnum: %s", s)
	}
}

type PutOrganizationConformancePackHeaders struct {
	XAmzAlgorithm     *string                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        PutOrganizationConformancePackXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutOrganizationConformancePackRequest struct {
	Headers PutOrganizationConformancePackHeaders
	Request shared.PutOrganizationConformancePackRequest `request:"mediaType=application/json"`
}

type PutOrganizationConformancePackResponse struct {
	ContentType string
	// InsufficientPermissionsException
	InsufficientPermissionsException interface{}
	// MaxNumberOfOrganizationConformancePacksExceededException
	MaxNumberOfOrganizationConformancePacksExceededException interface{}
	// NoAvailableOrganizationException
	NoAvailableOrganizationException interface{}
	// OrganizationAccessDeniedException
	OrganizationAccessDeniedException interface{}
	// OrganizationAllFeaturesNotEnabledException
	OrganizationAllFeaturesNotEnabledException interface{}
	// OrganizationConformancePackTemplateValidationException
	OrganizationConformancePackTemplateValidationException interface{}
	// Success
	PutOrganizationConformancePackResponse *shared.PutOrganizationConformancePackResponse
	StatusCode                             int
	RawResponse                            *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ValidationException
	ValidationException interface{}
}
