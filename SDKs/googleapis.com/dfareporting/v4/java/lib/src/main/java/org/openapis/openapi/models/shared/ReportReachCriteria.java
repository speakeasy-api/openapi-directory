/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReportReachCriteria - The report criteria for a report of type "REACH".
 */
public class ReportReachCriteria {
    /**
     * Represents an activity group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activities")
    public Activities activities;

    public ReportReachCriteria withActivities(Activities activities) {
        this.activities = activities;
        return this;
    }
    
    /**
     * Represents a Custom Rich Media Events group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customRichMediaEvents")
    public CustomRichMediaEvents customRichMediaEvents;

    public ReportReachCriteria withCustomRichMediaEvents(CustomRichMediaEvents customRichMediaEvents) {
        this.customRichMediaEvents = customRichMediaEvents;
        return this;
    }
    
    /**
     * Represents a date range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dateRange")
    public DateRange dateRange;

    public ReportReachCriteria withDateRange(DateRange dateRange) {
        this.dateRange = dateRange;
        return this;
    }
    
    /**
     * The list of filters on which dimensions are filtered. Filters for different dimensions are ANDed, filters for the same dimension are grouped together and ORed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensionFilters")
    public DimensionValue[] dimensionFilters;

    public ReportReachCriteria withDimensionFilters(DimensionValue[] dimensionFilters) {
        this.dimensionFilters = dimensionFilters;
        return this;
    }
    
    /**
     * The list of dimensions the report should include.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensions")
    public SortedDimension[] dimensions;

    public ReportReachCriteria withDimensions(SortedDimension[] dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * Whether to enable all reach dimension combinations in the report. Defaults to false. If enabled, the date range of the report should be within the last 42 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableAllDimensionCombinations")
    public Boolean enableAllDimensionCombinations;

    public ReportReachCriteria withEnableAllDimensionCombinations(Boolean enableAllDimensionCombinations) {
        this.enableAllDimensionCombinations = enableAllDimensionCombinations;
        return this;
    }
    
    /**
     * The list of names of metrics the report should include.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricNames")
    public String[] metricNames;

    public ReportReachCriteria withMetricNames(String[] metricNames) {
        this.metricNames = metricNames;
        return this;
    }
    
    /**
     * The list of names of Reach By Frequency metrics the report should include.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reachByFrequencyMetricNames")
    public String[] reachByFrequencyMetricNames;

    public ReportReachCriteria withReachByFrequencyMetricNames(String[] reachByFrequencyMetricNames) {
        this.reachByFrequencyMetricNames = reachByFrequencyMetricNames;
        return this;
    }
    
    public ReportReachCriteria(){}
}
