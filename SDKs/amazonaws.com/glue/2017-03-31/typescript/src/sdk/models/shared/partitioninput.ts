/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { StorageDescriptor } from "./storagedescriptor";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The structure used to create and update a partition.
 */
export class PartitionInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "LastAccessTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastAccessTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastAnalyzedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastAnalyzedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Parameters" })
  parameters?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "StorageDescriptor" })
  @Type(() => StorageDescriptor)
  storageDescriptor?: StorageDescriptor;

  @SpeakeasyMetadata()
  @Expose({ name: "Values" })
  values?: string[];
}
