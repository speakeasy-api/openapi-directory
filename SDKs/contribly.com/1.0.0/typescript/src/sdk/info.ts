/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Info {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Artifact formats
   *
   * @remarks
   * List the available artifact formats
   */
  getArtifactFormats(
    config?: AxiosRequestConfig
  ): Promise<operations.GetArtifactFormatsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/artifact-formats";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetArtifactFormatsResponse =
        new operations.GetArtifactFormatsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.artifactFormats = utils.objectToClass(
              httpRes?.data,
              shared.ArtifactFormats
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Recent changes
   *
   * @remarks
   * The Contribly change log.
   */
  getChangeLog(
    config?: AxiosRequestConfig
  ): Promise<operations.GetChangeLogResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/change-log";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetChangeLogResponse =
        new operations.GetChangeLogResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.changeLogItems = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.changeLogItems = utils.objectToClass(
              httpRes?.data,
              shared.ChangeLogItem,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Event types
   *
   * @remarks
   * List available notification event types
   */
  getEventTypes(
    config?: AxiosRequestConfig
  ): Promise<operations.GetEventTypesResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/event-types";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetEventTypesResponse =
        new operations.GetEventTypesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.eventTypes = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.eventTypes = utils.objectToClass(
              httpRes?.data,
              shared.EventType,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
