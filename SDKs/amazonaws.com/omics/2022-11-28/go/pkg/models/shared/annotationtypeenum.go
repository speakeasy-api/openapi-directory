// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AnnotationTypeEnum string

const (
	AnnotationTypeEnumGeneric                   AnnotationTypeEnum = "GENERIC"
	AnnotationTypeEnumChrPos                    AnnotationTypeEnum = "CHR_POS"
	AnnotationTypeEnumChrPosRefAlt              AnnotationTypeEnum = "CHR_POS_REF_ALT"
	AnnotationTypeEnumChrStartEndOneBase        AnnotationTypeEnum = "CHR_START_END_ONE_BASE"
	AnnotationTypeEnumChrStartEndRefAltOneBase  AnnotationTypeEnum = "CHR_START_END_REF_ALT_ONE_BASE"
	AnnotationTypeEnumChrStartEndZeroBase       AnnotationTypeEnum = "CHR_START_END_ZERO_BASE"
	AnnotationTypeEnumChrStartEndRefAltZeroBase AnnotationTypeEnum = "CHR_START_END_REF_ALT_ZERO_BASE"
)

func (e AnnotationTypeEnum) ToPointer() *AnnotationTypeEnum {
	return &e
}

func (e *AnnotationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GENERIC":
		fallthrough
	case "CHR_POS":
		fallthrough
	case "CHR_POS_REF_ALT":
		fallthrough
	case "CHR_START_END_ONE_BASE":
		fallthrough
	case "CHR_START_END_REF_ALT_ONE_BASE":
		fallthrough
	case "CHR_START_END_ZERO_BASE":
		fallthrough
	case "CHR_START_END_REF_ALT_ZERO_BASE":
		*e = AnnotationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnnotationTypeEnum: %v", v)
	}
}
