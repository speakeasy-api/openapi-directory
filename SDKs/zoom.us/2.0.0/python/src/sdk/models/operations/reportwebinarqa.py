"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReportWebinarQASecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ReportWebinarQARequest:
    
    webinar_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
    
    If a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\\"), you must **double encode** the UUID before making an API request.
    """  
    

@dataclasses.dataclass
class ReportWebinarQA200ApplicationXMLQuestionsQuestionDetails:
    
    answer: Optional[str] = dataclasses.field(default=None)
    r"""Given answer."""  
    question: Optional[str] = dataclasses.field(default=None)
    r"""Asked question."""  
    

@dataclasses.dataclass
class ReportWebinarQA200ApplicationXMLQuestions:
    
    email: Optional[str] = dataclasses.field(default=None)
    r"""Participant email."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Participant display name.<br>
    
    If anonymous [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&A without providing their name, the value of the `name` field will be \"Anonymous Attendee\".
    """  
    question_details: Optional[list[ReportWebinarQA200ApplicationXMLQuestionsQuestionDetails]] = dataclasses.field(default=None)
    r"""Array of questions from user."""  
    

@dataclasses.dataclass
class ReportWebinarQA200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Webinar Q&A report returned.<br>
    This is only available for paid account:{accountId}.<br>
    A report cannot be generated for this account because this account has not subscribed to a webinar plan.
    """
    
    id: Optional[int] = dataclasses.field(default=None)
    r"""Webinar ID in \\"**long**\\" format(represented as int64 data type in JSON), also known as the webinar number."""  
    questions: Optional[list[ReportWebinarQA200ApplicationXMLQuestions]] = dataclasses.field(default=None)
    r"""Array of webinar question objects."""  
    start_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Webinar start time."""  
    uuid: Optional[str] = dataclasses.field(default=None)
    r"""Webinar UUID. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportWebinarQA200ApplicationJSONQuestionsQuestionDetails:
    
    answer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answer'), 'exclude': lambda f: f is None }})
    r"""Given answer."""  
    question: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('question'), 'exclude': lambda f: f is None }})
    r"""Asked question."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportWebinarQA200ApplicationJSONQuestions:
    
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Participant email."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Participant display name.<br>
    
    If anonymous [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&A without providing their name, the value of the `name` field will be \"Anonymous Attendee\".
    """  
    question_details: Optional[list[ReportWebinarQA200ApplicationJSONQuestionsQuestionDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('question_details'), 'exclude': lambda f: f is None }})
    r"""Array of questions from user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReportWebinarQA200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Webinar Q&A report returned.<br>
    This is only available for paid account:{accountId}.<br>
    A report cannot be generated for this account because this account has not subscribed to a webinar plan.
    """
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Webinar ID in \\"**long**\\" format(represented as int64 data type in JSON), also known as the webinar number."""  
    questions: Optional[list[ReportWebinarQA200ApplicationJSONQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }})
    r"""Array of webinar question objects."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Webinar start time."""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""Webinar UUID. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it."""  
    

@dataclasses.dataclass
class ReportWebinarQAResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    report_webinar_qa_200_application_json_object: Optional[ReportWebinarQA200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Webinar Q&A report returned.<br>
    This is only available for paid account:{accountId}.<br>
    A report cannot be generated for this account because this account has not subscribed to a webinar plan.
    """  
    