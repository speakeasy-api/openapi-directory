// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDataQualityResultXAmzTargetEnum
type GetDataQualityResultXAmzTargetEnum string

const (
	GetDataQualityResultXAmzTargetEnumAwsGlueGetDataQualityResult GetDataQualityResultXAmzTargetEnum = "AWSGlue.GetDataQualityResult"
)

func (e GetDataQualityResultXAmzTargetEnum) ToPointer() *GetDataQualityResultXAmzTargetEnum {
	return &e
}

func (e *GetDataQualityResultXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSGlue.GetDataQualityResult":
		*e = GetDataQualityResultXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDataQualityResultXAmzTargetEnum: %v", v)
	}
}

type GetDataQualityResultRequest struct {
	GetDataQualityResultRequest shared.GetDataQualityResultRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  GetDataQualityResultXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetDataQualityResultResponse struct {
	ContentType string
	// EntityNotFoundException
	EntityNotFoundException interface{}
	// Success
	GetDataQualityResultResponse *shared.GetDataQualityResultResponse
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidInputException
	InvalidInputException interface{}
	// OperationTimeoutException
	OperationTimeoutException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
