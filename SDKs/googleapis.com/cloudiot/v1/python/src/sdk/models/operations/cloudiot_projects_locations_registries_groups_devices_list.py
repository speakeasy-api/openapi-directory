"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import listdevicesresponse as shared_listdevicesresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class CloudiotProjectsLocationsRegistriesGroupsDevicesListSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class CloudiotProjectsLocationsRegistriesGroupsDevicesListSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class CloudiotProjectsLocationsRegistriesGroupsDevicesListSecurity:
    
    option1: Optional[CloudiotProjectsLocationsRegistriesGroupsDevicesListSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[CloudiotProjectsLocationsRegistriesGroupsDevicesListSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class CloudiotProjectsLocationsRegistriesGroupsDevicesListGatewayListOptionsGatewayTypeEnum(str, Enum):
    r"""If `GATEWAY` is specified, only gateways are returned. If `NON_GATEWAY` is specified, only non-gateway devices are returned. If `GATEWAY_TYPE_UNSPECIFIED` is specified, all devices are returned."""
    GATEWAY_TYPE_UNSPECIFIED = 'GATEWAY_TYPE_UNSPECIFIED'
    GATEWAY = 'GATEWAY'
    NON_GATEWAY = 'NON_GATEWAY'


@dataclasses.dataclass
class CloudiotProjectsLocationsRegistriesGroupsDevicesListRequest:
    
    parent: str = dataclasses.field(metadata={'path_param': { 'field_name': 'parent', 'style': 'simple', 'explode': False }})
    r"""Required. The device registry path. Required. For example, `projects/my-project/locations/us-central1/registries/my-registry`."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    device_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deviceIds', 'style': 'form', 'explode': True }})
    r"""A list of device string IDs. For example, `['device0', 'device12']`. If empty, this field is ignored. Maximum IDs: 10,000"""  
    device_num_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deviceNumIds', 'style': 'form', 'explode': True }})
    r"""A list of device numeric IDs. If empty, this field is ignored. Maximum IDs: 10,000."""  
    field_mask: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fieldMask', 'style': 'form', 'explode': True }})
    r"""The fields of the `Device` resource to be returned in the response. The fields `id` and `num_id` are always returned, along with any other fields specified in snake_case format, for example: `last_heartbeat_time`."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    gateway_list_options_associations_device_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gatewayListOptions.associationsDeviceId', 'style': 'form', 'explode': True }})
    r"""If set, returns only the gateways with which the specified device is associated. The device ID can be numeric (`num_id`) or the user-defined string (`id`). For example, if `456` is specified, returns only the gateways to which the device with `num_id` 456 is bound."""  
    gateway_list_options_associations_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gatewayListOptions.associationsGatewayId', 'style': 'form', 'explode': True }})
    r"""If set, only devices associated with the specified gateway are returned. The gateway ID can be numeric (`num_id`) or the user-defined string (`id`). For example, if `123` is specified, only devices bound to the gateway with `num_id` 123 are returned."""  
    gateway_list_options_gateway_type: Optional[CloudiotProjectsLocationsRegistriesGroupsDevicesListGatewayListOptionsGatewayTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gatewayListOptions.gatewayType', 'style': 'form', 'explode': True }})
    r"""If `GATEWAY` is specified, only gateways are returned. If `NON_GATEWAY` is specified, only non-gateway devices are returned. If `GATEWAY_TYPE_UNSPECIFIED` is specified, all devices are returned."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""The maximum number of devices to return in the response. If this value is zero, the service will select a default size. A call may return fewer objects than requested. A non-empty `next_page_token` in the response indicates that more data is available."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""The value returned by the last `ListDevicesResponse`; indicates that this is a continuation of a prior `ListDevices` call and the system should return the next page of data."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class CloudiotProjectsLocationsRegistriesGroupsDevicesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_devices_response: Optional[shared_listdevicesresponse.ListDevicesResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    