/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EphemeralStorage } from "./ephemeralstorage";
import { FargatePlatformConfiguration } from "./fargateplatformconfiguration";
import { KeyValuePair } from "./keyvaluepair";
import { LinuxParameters } from "./linuxparameters";
import { LogConfiguration } from "./logconfiguration";
import { MountPoint } from "./mountpoint";
import { NetworkConfiguration } from "./networkconfiguration";
import { NetworkInterface } from "./networkinterface";
import { ResourceRequirement } from "./resourcerequirement";
import { Secret } from "./secret";
import { Ulimit } from "./ulimit";
import { Volume } from "./volume";
import { Expose, Type } from "class-transformer";

/**
 * An object that represents the details of a container that's part of a job.
 */
export class ContainerDetail extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "containerInstanceArn" })
  containerInstanceArn?: string;

  @SpeakeasyMetadata({ elemType: KeyValuePair })
  @Expose({ name: "environment" })
  @Type(() => KeyValuePair)
  environment?: KeyValuePair[];

  /**
   * The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on Fargate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ephemeralStorage" })
  @Type(() => EphemeralStorage)
  ephemeralStorage?: EphemeralStorage;

  @SpeakeasyMetadata()
  @Expose({ name: "executionRoleArn" })
  executionRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "exitCode" })
  exitCode?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "fargatePlatformConfiguration" })
  @Type(() => FargatePlatformConfiguration)
  fargatePlatformConfiguration?: FargatePlatformConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  image?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "instanceType" })
  instanceType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "jobRoleArn" })
  jobRoleArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "linuxParameters" })
  @Type(() => LinuxParameters)
  linuxParameters?: LinuxParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "logConfiguration" })
  @Type(() => LogConfiguration)
  logConfiguration?: LogConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "logStreamName" })
  logStreamName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "memory" })
  memory?: number;

  @SpeakeasyMetadata({ elemType: MountPoint })
  @Expose({ name: "mountPoints" })
  @Type(() => MountPoint)
  mountPoints?: MountPoint[];

  @SpeakeasyMetadata()
  @Expose({ name: "networkConfiguration" })
  @Type(() => NetworkConfiguration)
  networkConfiguration?: NetworkConfiguration;

  @SpeakeasyMetadata({ elemType: NetworkInterface })
  @Expose({ name: "networkInterfaces" })
  @Type(() => NetworkInterface)
  networkInterfaces?: NetworkInterface[];

  @SpeakeasyMetadata()
  @Expose({ name: "privileged" })
  privileged?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "readonlyRootFilesystem" })
  readonlyRootFilesystem?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;

  @SpeakeasyMetadata({ elemType: ResourceRequirement })
  @Expose({ name: "resourceRequirements" })
  @Type(() => ResourceRequirement)
  resourceRequirements?: ResourceRequirement[];

  @SpeakeasyMetadata({ elemType: Secret })
  @Expose({ name: "secrets" })
  @Type(() => Secret)
  secrets?: Secret[];

  @SpeakeasyMetadata()
  @Expose({ name: "taskArn" })
  taskArn?: string;

  @SpeakeasyMetadata({ elemType: Ulimit })
  @Expose({ name: "ulimits" })
  @Type(() => Ulimit)
  ulimits?: Ulimit[];

  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  user?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vcpus" })
  vcpus?: number;

  @SpeakeasyMetadata({ elemType: Volume })
  @Expose({ name: "volumes" })
  @Type(() => Volume)
  volumes?: Volume[];
}
