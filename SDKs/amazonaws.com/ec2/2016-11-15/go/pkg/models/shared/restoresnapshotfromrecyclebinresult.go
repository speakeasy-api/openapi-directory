// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// RestoreSnapshotFromRecycleBinResultStateEnum - The state of the snapshot.
type RestoreSnapshotFromRecycleBinResultStateEnum string

const (
	RestoreSnapshotFromRecycleBinResultStateEnumPending     RestoreSnapshotFromRecycleBinResultStateEnum = "pending"
	RestoreSnapshotFromRecycleBinResultStateEnumCompleted   RestoreSnapshotFromRecycleBinResultStateEnum = "completed"
	RestoreSnapshotFromRecycleBinResultStateEnumError       RestoreSnapshotFromRecycleBinResultStateEnum = "error"
	RestoreSnapshotFromRecycleBinResultStateEnumRecoverable RestoreSnapshotFromRecycleBinResultStateEnum = "recoverable"
	RestoreSnapshotFromRecycleBinResultStateEnumRecovering  RestoreSnapshotFromRecycleBinResultStateEnum = "recovering"
)

func (e *RestoreSnapshotFromRecycleBinResultStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "error":
		fallthrough
	case "recoverable":
		fallthrough
	case "recovering":
		*e = RestoreSnapshotFromRecycleBinResultStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RestoreSnapshotFromRecycleBinResultStateEnum: %s", s)
	}
}

// RestoreSnapshotFromRecycleBinResult - Success
type RestoreSnapshotFromRecycleBinResult struct {
	Description *string
	Encrypted   *bool
	OutpostArn  *string
	OwnerID     *string
	Progress    *string
	SnapshotID  *string
	StartTime   *time.Time
	State       *RestoreSnapshotFromRecycleBinResultStateEnum
	VolumeID    *string
	VolumeSize  *int64
}
