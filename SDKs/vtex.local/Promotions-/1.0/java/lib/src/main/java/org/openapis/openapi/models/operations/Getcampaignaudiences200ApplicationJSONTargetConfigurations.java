/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Getcampaignaudiences200ApplicationJSONTargetConfigurations - Object with information about the target audience.
 */
public class Getcampaignaudiences200ApplicationJSONTargetConfigurations {
    /**
     * Marketplace order identifier. The discount will apply to selected affiliates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("affiliates")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsAffiliates[] affiliates;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withAffiliates(Getcampaignaudiences200ApplicationJSONTargetConfigurationsAffiliates[] affiliates) {
        this.affiliates = affiliates;
        return this;
    }
    
    /**
     * Defines if the trade policy IDs are exclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("areSalesChannelIdsExclusive")
    public Boolean areSalesChannelIdsExclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withAreSalesChannelIdsExclusive(Boolean areSalesChannelIdsExclusive) {
        this.areSalesChannelIdsExclusive = areSalesChannelIdsExclusive;
        return this;
    }
    
    /**
     * Object composed by the brands that will activate or deactivate the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brands")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsBrands[] brands;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withBrands(Getcampaignaudiences200ApplicationJSONTargetConfigurationsBrands[] brands) {
        this.brands = brands;
        return this;
    }
    
    /**
     * If set to `true`, this campaign audience will be applied to any brand present on the `brands` field. If set to `false`, brands present on that field will make this campaign audience not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brandsAreInclusive")
    public Boolean brandsAreInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withBrandsAreInclusive(Boolean brandsAreInclusive) {
        this.brandsAreInclusive = brandsAreInclusive;
        return this;
    }
    
    /**
     * Campaign Audiences that activate this promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("campaigns")
    public Object[] campaigns;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCampaigns(Object[] campaigns) {
        this.campaigns = campaigns;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardIssuers")
    public Object[] cardIssuers;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCardIssuers(Object[] cardIssuers) {
        this.cardIssuers = cardIssuers;
        return this;
    }
    
    /**
     * Object composed by the categories that will activate or deactivate the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsCategories[] categories;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCategories(Getcampaignaudiences200ApplicationJSONTargetConfigurationsCategories[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * If set to `true`, this campaign audience will be applied to any category present on the `categories` field. If set to `false`, categories present on that field will make this campaign audience not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categoriesAreInclusive")
    public Boolean categoriesAreInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCategoriesAreInclusive(Boolean categoriesAreInclusive) {
        this.categoriesAreInclusive = categoriesAreInclusive;
        return this;
    }
    
    /**
     * An expression to use with clusters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterExpressions")
    public String[] clusterExpressions;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withClusterExpressions(String[] clusterExpressions) {
        this.clusterExpressions = clusterExpressions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterOperator")
    public String clusterOperator;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withClusterOperator(String clusterOperator) {
        this.clusterOperator = clusterOperator;
        return this;
    }
    
    /**
     * Object composed by the collections that will activate or deactivate the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsCollections[] collections;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCollections(Getcampaignaudiences200ApplicationJSONTargetConfigurationsCollections[] collections) {
        this.collections = collections;
        return this;
    }
    
    /**
     * Collections that will generate the promotion, type **Buy Together**, **More for less**, **Progressive Discount**, **Buy One Get One**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections1BuyTogether")
    public String[] collections1BuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCollections1BuyTogether(String[] collections1BuyTogether) {
        this.collections1BuyTogether = collections1BuyTogether;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections2BuyTogether")
    public Object[] collections2BuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCollections2BuyTogether(Object[] collections2BuyTogether) {
        this.collections2BuyTogether = collections2BuyTogether;
        return this;
    }
    
    /**
     * If set to `true`, this campaign audience will be applied to any collection present on the `collections` field. If set to `false`, collections present on that field will make this campaign audience not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collectionsIsInclusive")
    public Boolean collectionsIsInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCollectionsIsInclusive(Boolean collectionsIsInclusive) {
        this.collectionsIsInclusive = collectionsIsInclusive;
        return this;
    }
    
    /**
     * If the **List Price** and **Price** are the same.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compareListPriceAndPrice")
    public Boolean compareListPriceAndPrice;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCompareListPriceAndPrice(Boolean compareListPriceAndPrice) {
        this.compareListPriceAndPrice = compareListPriceAndPrice;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coupon")
    public Object[] coupon;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withCoupon(Object[] coupon) {
        this.coupon = coupon;
        return this;
    }
    
    /**
     * Number of days that are considered to add the purchase history.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("daysAgoOfPurchases")
    public Long daysAgoOfPurchases;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withDaysAgoOfPurchases(Long daysAgoOfPurchases) {
        this.daysAgoOfPurchases = daysAgoOfPurchases;
        return this;
    }
    
    /**
     * Enable **Buy Together** per SKU.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableBuyTogetherPerSku")
    public Boolean enableBuyTogetherPerSku;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withEnableBuyTogetherPerSku(Boolean enableBuyTogetherPerSku) {
        this.enableBuyTogetherPerSku = enableBuyTogetherPerSku;
        return this;
    }
    
    /**
     * Defines if the target audience is featured (`true`) or not (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featured")
    public Boolean featured;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withFeatured(Boolean featured) {
        this.featured = featured;
        return this;
    }
    
    /**
     * Applies the discount even if the user is not logged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firstBuyIsProfileOptimistic")
    public Boolean firstBuyIsProfileOptimistic;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withFirstBuyIsProfileOptimistic(Boolean firstBuyIsProfileOptimistic) {
        this.firstBuyIsProfileOptimistic = firstBuyIsProfileOptimistic;
        return this;
    }
    
    /**
     * Gifts List Type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("giftListTypes")
    public String[] giftListTypes;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withGiftListTypes(String[] giftListTypes) {
        this.giftListTypes = giftListTypes;
        return this;
    }
    
    /**
     * Target audience ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Defines if at least one of the sellers must be valid to active the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idSellerIsInclusive")
    public Boolean idSellerIsInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withIdSellerIsInclusive(Boolean idSellerIsInclusive) {
        this.idSellerIsInclusive = idSellerIsInclusive;
        return this;
    }
    
    /**
     * Array with all the trade policies that activate the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idsSalesChannel")
    public String[] idsSalesChannel;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withIdsSalesChannel(String[] idsSalesChannel) {
        this.idsSalesChannel = idsSalesChannel;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installment")
    public Long installment;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withInstallment(Long installment) {
        this.installment = installment;
        return this;
    }
    
    /**
     * Applies the campaign audience only if the list price and price is different.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isDifferentListPriceAndPrice")
    public Boolean isDifferentListPriceAndPrice;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withIsDifferentListPriceAndPrice(Boolean isDifferentListPriceAndPrice) {
        this.isDifferentListPriceAndPrice = isDifferentListPriceAndPrice;
        return this;
    }
    
    /**
     * Applies the discount only if it's a first buy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFirstBuy")
    public Boolean isFirstBuy;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withIsFirstBuy(Boolean isFirstBuy) {
        this.isFirstBuy = isFirstBuy;
        return this;
    }
    
    /**
     * Set if the campaign audience will be applied considering a minimum and maximum values for installments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isMinMaxInstallments")
    public Boolean isMinMaxInstallments;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withIsMinMaxInstallments(Boolean isMinMaxInstallments) {
        this.isMinMaxInstallments = isMinMaxInstallments;
        return this;
    }
    
    /**
     * Applies selected discount only when one of the defined shipping method is selected by the customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isSlaSelected")
    public Boolean isSlaSelected;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withIsSlaSelected(Boolean isSlaSelected) {
        this.isSlaSelected = isSlaSelected;
        return this;
    }
    
    /**
     * Maximum price of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemMaxPrice")
    public Double itemMaxPrice;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withItemMaxPrice(Double itemMaxPrice) {
        this.itemMaxPrice = itemMaxPrice;
        return this;
    }
    
    /**
     * Minimum price of the item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemMinPrice")
    public Double itemMinPrice;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withItemMinPrice(Double itemMinPrice) {
        this.itemMinPrice = itemMinPrice;
        return this;
    }
    
    /**
     * Brand first list for the promotion **Buy Together.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listBrand1BuyTogether")
    public Object[] listBrand1BuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withListBrand1BuyTogether(Object[] listBrand1BuyTogether) {
        this.listBrand1BuyTogether = listBrand1BuyTogether;
        return this;
    }
    
    /**
     * Category first list for the promotion **Buy Together**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listCategory1BuyTogether")
    public Object[] listCategory1BuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withListCategory1BuyTogether(Object[] listCategory1BuyTogether) {
        this.listCategory1BuyTogether = listCategory1BuyTogether;
        return this;
    }
    
    /**
     * SKU first list for the promotion **Buy Together**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listSku1BuyTogether")
    public Object[] listSku1BuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withListSku1BuyTogether(Object[] listSku1BuyTogether) {
        this.listSku1BuyTogether = listSku1BuyTogether;
        return this;
    }
    
    /**
     * SKU second list for the promotion **Buy Together**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listSku2BuyTogether")
    public Object[] listSku2BuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withListSku2BuyTogether(Object[] listSku2BuyTogether) {
        this.listSku2BuyTogether = listSku2BuyTogether;
        return this;
    }
    
    /**
     * Array with all the campaign audience's marketing tags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketingTags")
    public String[] marketingTags;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMarketingTags(String[] marketingTags) {
        this.marketingTags = marketingTags;
        return this;
    }
    
    /**
     * Defines if marketing tags are not inclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marketingTagsAreNotInclusive")
    public Boolean marketingTagsAreNotInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMarketingTagsAreNotInclusive(Boolean marketingTagsAreNotInclusive) {
        this.marketingTagsAreNotInclusive = marketingTagsAreNotInclusive;
        return this;
    }
    
    /**
     * Maximum value for installment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxInstallment")
    public Long maxInstallment;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMaxInstallment(Long maxInstallment) {
        this.maxInstallment = maxInstallment;
        return this;
    }
    
    /**
     * Defines how many times the campaign audience can be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxUsage")
    public Long maxUsage;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMaxUsage(Long maxUsage) {
        this.maxUsage = maxUsage;
        return this;
    }
    
    /**
     * Defines if the campaign audience can be used multiple times per client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxUsagePerClient")
    public Long maxUsagePerClient;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMaxUsagePerClient(Long maxUsagePerClient) {
        this.maxUsagePerClient = maxUsagePerClient;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchants")
    public Object[] merchants;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMerchants(Object[] merchants) {
        this.merchants = merchants;
        return this;
    }
    
    /**
     * Minimum value for installment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minInstallment")
    public Long minInstallment;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMinInstallment(Long minInstallment) {
        this.minInstallment = minInstallment;
        return this;
    }
    
    /**
     * Minimum quantity for **Buy Together** promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumQuantityBuyTogether")
    public Long minimumQuantityBuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMinimumQuantityBuyTogether(Long minimumQuantityBuyTogether) {
        this.minimumQuantityBuyTogether = minimumQuantityBuyTogether;
        return this;
    }
    
    /**
     * Defines if the campaign audience can be used multiple times per client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multipleUsePerClient")
    public Boolean multipleUsePerClient;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withMultipleUsePerClient(Boolean multipleUsePerClient) {
        this.multipleUsePerClient = multipleUsePerClient;
        return this;
    }
    
    /**
     * Target audience name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Shows the campaign audience origin, `Marketplace` or `Fulfillment`.  Read [Difference between orders with marketplace and fulfillment sources](https://help.vtex.com/en/tutorial/what-are-orders-with-marketplace-source-and-orders-with-fulfillment-source--6eVYrmUAwMOeKICU2KuG06) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    public String origin;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withOrigin(String origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * Array composed by all the Payments Methods.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsMethods")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsPaymentsMethods[] paymentsMethods;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withPaymentsMethods(Getcampaignaudiences200ApplicationJSONTargetConfigurationsPaymentsMethods[] paymentsMethods) {
        this.paymentsMethods = paymentsMethods;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentsRules")
    public Object[] paymentsRules;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withPaymentsRules(Object[] paymentsRules) {
        this.paymentsRules = paymentsRules;
        return this;
    }
    
    /**
     * Percentual discount value list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentualDiscountValueList")
    public Double[] percentualDiscountValueList;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withPercentualDiscountValueList(Double[] percentualDiscountValueList) {
        this.percentualDiscountValueList = percentualDiscountValueList;
        return this;
    }
    
    /**
     * Object composed by the products that will activate or deactivate the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsProducts[] products;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withProducts(Getcampaignaudiences200ApplicationJSONTargetConfigurationsProducts[] products) {
        this.products = products;
        return this;
    }
    
    /**
     * If set to `true`, this campaign audience will be applied to any product present on the `products` field. If set to `false`, products present on that field will make this campaign audience not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productsAreInclusive")
    public Boolean productsAreInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withProductsAreInclusive(Boolean productsAreInclusive) {
        this.productsAreInclusive = productsAreInclusive;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productsSpecifications")
    public Object[] productsSpecifications;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withProductsSpecifications(Object[] productsSpecifications) {
        this.productsSpecifications = productsSpecifications;
        return this;
    }
    
    /**
     * Quantity to affect **Buy Together** promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantityToAffectBuyTogether")
    public Long quantityToAffectBuyTogether;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withQuantityToAffectBuyTogether(Long quantityToAffectBuyTogether) {
        this.quantityToAffectBuyTogether = quantityToAffectBuyTogether;
        return this;
    }
    
    /**
     * The discount will be granted if the card's BIN is given.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restrictionsBins")
    public String[] restrictionsBins;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withRestrictionsBins(String[] restrictionsBins) {
        this.restrictionsBins = restrictionsBins;
        return this;
    }
    
    /**
     * Should distribute discount among matched items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shouldDistributeDiscountAmongMatchedItems")
    public Boolean shouldDistributeDiscountAmongMatchedItems;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withShouldDistributeDiscountAmongMatchedItems(Boolean shouldDistributeDiscountAmongMatchedItems) {
        this.shouldDistributeDiscountAmongMatchedItems = shouldDistributeDiscountAmongMatchedItems;
        return this;
    }
    
    /**
     * Object composed by the SKUs that will activate or deactivate the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skus")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsSkus[] skus;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withSkus(Getcampaignaudiences200ApplicationJSONTargetConfigurationsSkus[] skus) {
        this.skus = skus;
        return this;
    }
    
    /**
     * If set to `true`, this campaign audience will be applied to any SKU present on the `skus` field. If set to `false`, SKUs present on that field will make this campaign audience not to be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skusAreInclusive")
    public Boolean skusAreInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withSkusAreInclusive(Boolean skusAreInclusive) {
        this.skusAreInclusive = skusAreInclusive;
        return this;
    }
    
    /**
     * The discount will be granted if the shipping method is the same as the one given.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slasIds")
    public String[] slasIds;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withSlasIds(String[] slasIds) {
        this.slasIds = slasIds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stores")
    public Object[] stores;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withStores(Object[] stores) {
        this.stores = stores;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storesAreInclusive")
    public Boolean storesAreInclusive;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withStoresAreInclusive(Boolean storesAreInclusive) {
        this.storesAreInclusive = storesAreInclusive;
        return this;
    }
    
    /**
     * Maximum chart value to active the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueCeling")
    public Double totalValueCeling;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withTotalValueCeling(Double totalValueCeling) {
        this.totalValueCeling = totalValueCeling;
        return this;
    }
    
    /**
     * Minimum chart value to active the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueFloor")
    public Double totalValueFloor;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withTotalValueFloor(Double totalValueFloor) {
        this.totalValueFloor = totalValueFloor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueIncludeAllItems")
    public Boolean totalValueIncludeAllItems;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withTotalValueIncludeAllItems(Boolean totalValueIncludeAllItems) {
        this.totalValueIncludeAllItems = totalValueIncludeAllItems;
        return this;
    }
    
    /**
     * Total chart value to active the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValueMode")
    public String totalValueMode;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withTotalValueMode(String totalValueMode) {
        this.totalValueMode = totalValueMode;
        return this;
    }
    
    /**
     * Total value a client must have in past orders to active the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalValuePurchase")
    public Double totalValuePurchase;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withTotalValuePurchase(Double totalValuePurchase) {
        this.totalValuePurchase = totalValuePurchase;
        return this;
    }
    
    /**
     * Use new progressive algorithm.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useNewProgressiveAlgorithm")
    public Boolean useNewProgressiveAlgorithm;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withUseNewProgressiveAlgorithm(Boolean useNewProgressiveAlgorithm) {
        this.useNewProgressiveAlgorithm = useNewProgressiveAlgorithm;
        return this;
    }
    
    /**
     * Range of the zip code that applies the campaign audience.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zipCodeRanges")
    public Getcampaignaudiences200ApplicationJSONTargetConfigurationsZipCodeRanges[] zipCodeRanges;
    public Getcampaignaudiences200ApplicationJSONTargetConfigurations withZipCodeRanges(Getcampaignaudiences200ApplicationJSONTargetConfigurationsZipCodeRanges[] zipCodeRanges) {
        this.zipCodeRanges = zipCodeRanges;
        return this;
    }
    
}
