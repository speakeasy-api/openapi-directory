/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VideoFileDetailsVideoStream - Information about a video stream.
 */
public class VideoFileDetailsVideoStream {
    /**
     * The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aspectRatio")
    public Double aspectRatio;
    public VideoFileDetailsVideoStream withAspectRatio(Double aspectRatio) {
        this.aspectRatio = aspectRatio;
        return this;
    }
    
    /**
     * The video stream's bitrate, in bits per second.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrateBps")
    public String bitrateBps;
    public VideoFileDetailsVideoStream withBitrateBps(String bitrateBps) {
        this.bitrateBps = bitrateBps;
        return this;
    }
    
    /**
     * The video codec that the stream uses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codec")
    public String codec;
    public VideoFileDetailsVideoStream withCodec(String codec) {
        this.codec = codec;
        return this;
    }
    
    /**
     * The video stream's frame rate, in frames per second.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frameRateFps")
    public Double frameRateFps;
    public VideoFileDetailsVideoStream withFrameRateFps(Double frameRateFps) {
        this.frameRateFps = frameRateFps;
        return this;
    }
    
    /**
     * The encoded video content's height in pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heightPixels")
    public Long heightPixels;
    public VideoFileDetailsVideoStream withHeightPixels(Long heightPixels) {
        this.heightPixels = heightPixels;
        return this;
    }
    
    /**
     * The amount that YouTube needs to rotate the original source content to properly display the video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotation")
    public VideoFileDetailsVideoStreamRotationEnum rotation;
    public VideoFileDetailsVideoStream withRotation(VideoFileDetailsVideoStreamRotationEnum rotation) {
        this.rotation = rotation;
        return this;
    }
    
    /**
     * A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendor")
    public String vendor;
    public VideoFileDetailsVideoStream withVendor(String vendor) {
        this.vendor = vendor;
        return this;
    }
    
    /**
     * The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("widthPixels")
    public Long widthPixels;
    public VideoFileDetailsVideoStream withWidthPixels(Long widthPixels) {
        this.widthPixels = widthPixels;
        return this;
    }
    
}
