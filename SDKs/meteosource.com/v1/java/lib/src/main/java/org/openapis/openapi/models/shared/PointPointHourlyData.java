/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class PointPointHourlyData {
    /**
     * Convective available potential energy.
     * Unit: J/kg
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cape")
    public Double cape;
    public PointPointHourlyData withCape(Double cape) {
        this.cape = cape;
        return this;
    }
    
    @JsonProperty("cloud_cover")
    public PointPointHourlyCloudCoverData cloudCover;
    public PointPointHourlyData withCloudCover(PointPointHourlyCloudCoverData cloudCover) {
        this.cloudCover = cloudCover;
        return this;
    }
    
    /**
     * Datetime in YYYY-MM-DDTHH:MM:SS format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;
    public PointPointHourlyData withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dew_point")
    public Double dewPoint;
    public PointPointHourlyData withDewPoint(Double dewPoint) {
        this.dewPoint = dewPoint;
        return this;
    }
    
    /**
     * Evaporation of liquid water into water vapor.
     * Unit: mm/h
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evaporation")
    public Double evaporation;
    public PointPointHourlyData withEvaporation(Double evaporation) {
        this.evaporation = evaporation;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feels_like")
    public Double feelsLike;
    public PointPointHourlyData withFeelsLike(Double feelsLike) {
        this.feelsLike = feelsLike;
        return this;
    }
    
    /**
     * Relative humidity.
     * Unit: \%
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("humidity")
    public Long humidity;
    public PointPointHourlyData withHumidity(Long humidity) {
        this.humidity = humidity;
        return this;
    }
    
    /**
     * Numeric identifier of the weather icon. The following values can appear:
     * 
     * * 1 - Not available
     * * 2 - Sunny
     * * 3 - Mostly sunny
     * * 4 - Partly sunny
     * * 5 - Mostly cloudy
     * * 6 - Cloudy
     * * 7 - Overcast
     * * 8 - Overcast with low clouds
     * * 9 - Fog
     * * 10 - Light rain
     * * 11 - Rain
     * * 12 - Possible rain
     * * 13 - Rain shower
     * * 14 - Thunderstorm
     * * 15 - Local thunderstorms
     * * 16 - Light snow
     * * 17 - Snow
     * * 18 - Possible snow
     * * 19 - Snow shower
     * * 20 - Rain and snow
     * * 21 - Possible rain and snow
     * * 22 - Rain and snow
     * * 23 - Freezing rain
     * * 24 - Possible freezing rain
     * * 25 - Hail
     * * 26 - Clear (night)
     * * 27 - Mostly clear (night)
     * * 28 - Partly clear (night)
     * * 29 - Mostly cloudy (night)
     * * 30 - Cloudy (night)
     * * 31 - Overcast with low clouds (night)
     * * 32 - Rain shower (night)
     * * 33 - Local thunderstorms (night)
     * * 34 - Snow shower (night)
     * * 35 - Rain and snow (night)
     * * 36 - Possible freezing rain (night)
     * 
     * Unit: weather_ico0_36
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    public Long icon;
    public PointPointHourlyData withIcon(Long icon) {
        this.icon = icon;
        return this;
    }
    
    /**
     * Global downward short-wave radiation flux.
     * Unit: W/m2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("irradiance")
    public Double irradiance;
    public PointPointHourlyData withIrradiance(Double irradiance) {
        this.irradiance = irradiance;
        return this;
    }
    
    /**
     * Surface lifted index.
     * Unit: K
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lftx")
    public Double lftx;
    public PointPointHourlyData withLftx(Double lftx) {
        this.lftx = lftx;
        return this;
    }
    
    /**
     * Total column of ozone.
     * Unit: Dobson
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ozone")
    public Double ozone;
    public PointPointHourlyData withOzone(Double ozone) {
        this.ozone = ozone;
        return this;
    }
    
    @JsonProperty("precipitation")
    public PointPointHourlyPrecipitationData precipitation;
    public PointPointHourlyData withPrecipitation(PointPointHourlyPrecipitationData precipitation) {
        this.precipitation = precipitation;
        return this;
    }
    
    /**
     * Atmospheric pressure at mean sea level.
     * Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pressure")
    public Double pressure;
    public PointPointHourlyData withPressure(Double pressure) {
        this.pressure = pressure;
        return this;
    }
    
    @JsonProperty("probability")
    public PointPointHourlyProbData probability;
    public PointPointHourlyData withProbability(PointPointHourlyProbData probability) {
        this.probability = probability;
        return this;
    }
    
    /**
     * Snow depth.
     * Units: metric = cm, us = inch, uk = cm, ca = cm
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snow_depth")
    public Double snowDepth;
    public PointPointHourlyData withSnowDepth(Double snowDepth) {
        this.snowDepth = snowDepth;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("soil_temperature")
    public Double soilTemperature;
    public PointPointHourlyData withSoilTemperature(Double soilTemperature) {
        this.soilTemperature = soilTemperature;
        return this;
    }
    
    /**
     * Short text summary of the weather, e.g. `Light rain`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public String summary;
    public PointPointHourlyData withSummary(String summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * Sunshine duration since start of previous hour.
     * Unit: s
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sunshine_duration")
    public Double sunshineDuration;
    public PointPointHourlyData withSunshineDuration(Double sunshineDuration) {
        this.sunshineDuration = sunshineDuration;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("surface_temperature")
    public Double surfaceTemperature;
    public PointPointHourlyData withSurfaceTemperature(Double surfaceTemperature) {
        this.surfaceTemperature = surfaceTemperature;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public Double temperature;
    public PointPointHourlyData withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm).
     * Unit: uv_index
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uv_index")
    public Double uvIndex;
    public PointPointHourlyData withUvIndex(Double uvIndex) {
        this.uvIndex = uvIndex;
        return this;
    }
    
    /**
     * Visibility.
     * Units: metric = km, us = mi, uk = mi, ca = km
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public Double visibility;
    public PointPointHourlyData withVisibility(Double visibility) {
        this.visibility = visibility;
        return this;
    }
    
    /**
     * String identifier of the weather icon, e.g. `light_rain`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weather")
    public String weather;
    public PointPointHourlyData withWeather(String weather) {
        this.weather = weather;
        return this;
    }
    
    @JsonProperty("wind")
    public PointPointHourlyWindData wind;
    public PointPointHourlyData withWind(PointPointHourlyWindData wind) {
        this.wind = wind;
        return this;
    }
    
    /**
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wind_chill")
    public Double windChill;
    public PointPointHourlyData withWindChill(Double windChill) {
        this.windChill = windChill;
        return this;
    }
    
}
