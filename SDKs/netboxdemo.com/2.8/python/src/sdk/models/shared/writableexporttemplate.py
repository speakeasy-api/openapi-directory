"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WritableExportTemplateTemplateLanguageEnum(str, Enum):
    DJANGO = 'django'
    JINJA2 = 'jinja2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableExportTemplateInput:
    
    content_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_type') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    template_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_code') }})
    r"""The list of objects being exported is passed as a context variable named <code>queryset</code>."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    file_extension: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_extension'), 'exclude': lambda f: f is None }})
    r"""Extension to append to the rendered filename"""  
    mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mime_type'), 'exclude': lambda f: f is None }})
    r"""Defaults to <code>text/plain</code>"""  
    template_language: Optional[WritableExportTemplateTemplateLanguageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_language'), 'exclude': lambda f: f is None }})  
    