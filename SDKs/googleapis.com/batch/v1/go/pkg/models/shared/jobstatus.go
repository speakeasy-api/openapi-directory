// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// JobStatusStateEnum - Job state
type JobStatusStateEnum string

const (
	JobStatusStateEnumStateUnspecified   JobStatusStateEnum = "STATE_UNSPECIFIED"
	JobStatusStateEnumQueued             JobStatusStateEnum = "QUEUED"
	JobStatusStateEnumScheduled          JobStatusStateEnum = "SCHEDULED"
	JobStatusStateEnumRunning            JobStatusStateEnum = "RUNNING"
	JobStatusStateEnumSucceeded          JobStatusStateEnum = "SUCCEEDED"
	JobStatusStateEnumFailed             JobStatusStateEnum = "FAILED"
	JobStatusStateEnumDeletionInProgress JobStatusStateEnum = "DELETION_IN_PROGRESS"
)

func (e JobStatusStateEnum) ToPointer() *JobStatusStateEnum {
	return &e
}

func (e *JobStatusStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "QUEUED":
		fallthrough
	case "SCHEDULED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "DELETION_IN_PROGRESS":
		*e = JobStatusStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobStatusStateEnum: %v", v)
	}
}

// JobStatus - Job status.
type JobStatus struct {
	// The duration of time that the Job spent in status RUNNING.
	RunDuration *string `json:"runDuration,omitempty"`
	// Job state
	State *JobStatusStateEnum `json:"state,omitempty"`
	// Job status events
	StatusEvents []StatusEvent `json:"statusEvents,omitempty"`
	// Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.
	TaskGroups map[string]TaskGroupStatus `json:"taskGroups,omitempty"`
}
