<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a custom class.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateResponse
     */
	public function speechProjectsLocationsCustomClassesCreate(
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/customClasses', \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCustomClassRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customClass = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomClass', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List custom classes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListResponse
     */
	public function speechProjectsLocationsCustomClassesList(
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/customClasses', \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsCustomClassesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomClassesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomClassesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateResponse
     */
	public function speechProjectsLocationsPhraseSetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/phraseSets', \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createPhraseSetRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phraseSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PhraseSet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a phrase set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteResponse
     */
	public function speechProjectsLocationsPhraseSetsDelete(
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a phrase set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetResponse
     */
	public function speechProjectsLocationsPhraseSetsGet(
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phraseSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PhraseSet', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List phrase sets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListResponse
     */
	public function speechProjectsLocationsPhraseSetsList(
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{parent}/phraseSets', \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPhraseSetResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPhraseSetResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a phrase set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchResponse
     */
	public function speechProjectsLocationsPhraseSetsPatch(
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1p1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "phraseSetInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpeechProjectsLocationsPhraseSetsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->phraseSet = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PhraseSet', 'json');
            }
        }

        return $response;
    }
}