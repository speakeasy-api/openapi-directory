// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScheduleLambdaFunctionFailedCauseEnum string

const (
	ScheduleLambdaFunctionFailedCauseEnumIDAlreadyInUse                     ScheduleLambdaFunctionFailedCauseEnum = "ID_ALREADY_IN_USE"
	ScheduleLambdaFunctionFailedCauseEnumOpenLambdaFunctionsLimitExceeded   ScheduleLambdaFunctionFailedCauseEnum = "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
	ScheduleLambdaFunctionFailedCauseEnumLambdaFunctionCreationRateExceeded ScheduleLambdaFunctionFailedCauseEnum = "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
	ScheduleLambdaFunctionFailedCauseEnumLambdaServiceNotAvailableInRegion  ScheduleLambdaFunctionFailedCauseEnum = "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
)

func (e *ScheduleLambdaFunctionFailedCauseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ID_ALREADY_IN_USE":
		fallthrough
	case "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED":
		fallthrough
	case "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED":
		fallthrough
	case "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION":
		*e = ScheduleLambdaFunctionFailedCauseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleLambdaFunctionFailedCauseEnum: %s", s)
	}
}
