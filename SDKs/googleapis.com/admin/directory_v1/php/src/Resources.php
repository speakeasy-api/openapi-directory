<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Resources 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a building.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteResponse
     */
	public function directoryResourcesBuildingsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a building.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetResponse
     */
	public function directoryResourcesBuildingsGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->building = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Building', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a building.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertResponse
     */
	public function directoryResourcesBuildingsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/buildings', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "building", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->building = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Building', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of buildings for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListResponse
     */
	public function directoryResourcesBuildingsList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/buildings', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Buildings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a building.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchResponse
     */
	public function directoryResourcesBuildingsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "building", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->building = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Building', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a building.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateResponse
     */
	public function directoryResourcesBuildingsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "building", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesBuildingsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->building = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Building', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a calendar resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteResponse
     */
	public function directoryResourcesCalendarsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a calendar resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetResponse
     */
	public function directoryResourcesCalendarsGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a calendar resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertResponse
     */
	public function directoryResourcesCalendarsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/calendars', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendarResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of calendar resources for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListResponse
     */
	public function directoryResourcesCalendarsList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/calendars', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarResources = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarResources', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a calendar resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchResponse
     */
	public function directoryResourcesCalendarsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendarResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateResponse
     */
	public function directoryResourcesCalendarsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "calendarResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesCalendarsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->calendarResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CalendarResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteResponse
     */
	public function directoryResourcesFeaturesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetResponse
     */
	public function directoryResourcesFeaturesGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feature = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Feature', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertResponse
     */
	public function directoryResourcesFeaturesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/features', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feature", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feature = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Feature', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of features for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListResponse
     */
	public function directoryResourcesFeaturesList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/features', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->features = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Features', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchResponse
     */
	public function directoryResourcesFeaturesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feature", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feature = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Feature', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Renames a feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameResponse
     */
	public function directoryResourcesFeaturesRename(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "featureRename", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesRenameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Updates a feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateResponse
     */
	public function directoryResourcesFeaturesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/customer/{customer}/resources/features/{featureKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feature", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryResourcesFeaturesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->feature = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Feature', 'json');
            }
        }

        return $response;
    }
}