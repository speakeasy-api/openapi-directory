<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Space - A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Space
{
    /**
     * Output only. Whether the Chat app was installed by a Google Workspace administrator. Administrators can install a Chat app for their domain, organizational unit, or a group of users. Administrators can only install Chat apps for direct messaging between users and the app. To support admin install, your app must feature direct messaging.
     * 
     * @var ?bool $adminInstalled
     */
	#[\JMS\Serializer\Annotation\SerializedName('adminInstalled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $adminInstalled = null;
    
    /**
     * The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). For direct messages, this field may be empty. Supports up to 128 characters.
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('displayName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * Resource name of the space. Format: spaces/{space}
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
    /**
     * Optional. Whether the space is a DM between a Chat app and a single human.
     * 
     * @var ?bool $singleUserBotDm
     */
	#[\JMS\Serializer\Annotation\SerializedName('singleUserBotDm')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $singleUserBotDm = null;
    
    /**
     * Details about the space including description and rules.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SpaceDetails $spaceDetails
     */
	#[\JMS\Serializer\Annotation\SerializedName('spaceDetails')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SpaceDetails')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SpaceDetails $spaceDetails = null;
    
    /**
     * Output only. The threading state in the Chat space.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SpaceSpaceThreadingStateEnum $spaceThreadingState
     */
	#[\JMS\Serializer\Annotation\SerializedName('spaceThreadingState')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SpaceSpaceThreadingStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SpaceSpaceThreadingStateEnum $spaceThreadingState = null;
    
    /**
     * Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space.
     * 
     * @var ?bool $threaded
     */
	#[\JMS\Serializer\Annotation\SerializedName('threaded')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $threaded = null;
    
    /**
     * Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer preview) instead. The type of a space.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SpaceTypeEnum $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SpaceTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SpaceTypeEnum $type = null;
    
	public function __construct()
	{
		$this->adminInstalled = null;
		$this->displayName = null;
		$this->name = null;
		$this->singleUserBotDm = null;
		$this->spaceDetails = null;
		$this->spaceThreadingState = null;
		$this->threaded = null;
		$this->type = null;
	}
}
