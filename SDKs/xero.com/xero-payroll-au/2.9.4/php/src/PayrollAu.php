<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class PayrollAu 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a payroll employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeResponse
     */
	public function createEmployee(
        \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employees');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->employees = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Employees', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Creates a leave application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLeaveApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLeaveApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLeaveApplicationResponse
     */
	public function createLeaveApplication(
        \OpenAPI\OpenAPI\Models\Operations\CreateLeaveApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateLeaveApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLeaveApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/LeaveApplications');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLeaveApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaveApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaveApplications', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Creates a pay item
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayItemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayItemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayItemResponse
     */
	public function createPayItem(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayItemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePayItemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayItems');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "payItemInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payItems = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayItems', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Creates a pay run
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayRunResponse
     */
	public function createPayRun(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePayRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayRuns');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payRuns = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayRuns', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Creates a Payroll Calendar
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayrollCalendarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePayrollCalendarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePayrollCalendarResponse
     */
	public function createPayrollCalendar(
        \OpenAPI\OpenAPI\Models\Operations\CreatePayrollCalendarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePayrollCalendarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePayrollCalendarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayrollCalendars');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePayrollCalendarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payrollCalendars = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayrollCalendars', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Creates a superfund
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSuperfundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSuperfundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSuperfundResponse
     */
	public function createSuperfund(
        \OpenAPI\OpenAPI\Models\Operations\CreateSuperfundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSuperfundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSuperfundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Superfunds');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSuperfundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->superFunds = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SuperFunds', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Creates a timesheet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTimesheetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTimesheetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTimesheetResponse
     */
	public function createTimesheet(
        \OpenAPI\OpenAPI\Models\Operations\CreateTimesheetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTimesheetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTimesheetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Timesheets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTimesheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timesheets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Timesheets', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Retrieves an employee's detail by unique employee id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmployeeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmployeeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmployeeResponse
     */
	public function getEmployee(
        \OpenAPI\OpenAPI\Models\Operations\GetEmployeeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEmployeeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employees/{EmployeeID}', \OpenAPI\OpenAPI\Models\Operations\GetEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->employees = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Employees', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Searches payroll employees
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmployeesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmployeesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmployeesResponse
     */
	public function getEmployees(
        \OpenAPI\OpenAPI\Models\Operations\GetEmployeesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEmployeesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmployeesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employees');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEmployeesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmployeesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->employees = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Employees', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a leave application by a unique leave application id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationResponse
     */
	public function getLeaveApplication(
        \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/LeaveApplications/{LeaveApplicationID}', \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaveApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaveApplications', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves leave applications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsResponse
     */
	public function getLeaveApplications(
        \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/LeaveApplications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLeaveApplicationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaveApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaveApplications', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves pay items
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayItemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayItemsResponse
     */
	public function getPayItems(
        \OpenAPI\OpenAPI\Models\Operations\GetPayItemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPayItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayItems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPayItemsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payItems = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayItems', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a pay run by using a unique pay run id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayRunResponse
     */
	public function getPayRun(
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayRuns/{PayRunID}', \OpenAPI\OpenAPI\Models\Operations\GetPayRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payRuns = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayRuns', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves pay runs
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayRunsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayRunsResponse
     */
	public function getPayRuns(
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPayRunsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayRunsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayRuns');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPayRunsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayRunsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payRuns = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayRuns', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves payroll calendar by using a unique payroll calendar ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarResponse
     */
	public function getPayrollCalendar(
        \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayrollCalendars/{PayrollCalendarID}', \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payrollCalendars = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayrollCalendars', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves payroll calendars
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsResponse
     */
	public function getPayrollCalendars(
        \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayrollCalendars');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayrollCalendarsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payrollCalendars = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayrollCalendars', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves for a payslip by a unique payslip id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayslipRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPayslipSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPayslipResponse
     */
	public function getPayslip(
        \OpenAPI\OpenAPI\Models\Operations\GetPayslipRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetPayslipSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPayslipResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Payslip/{PayslipID}', \OpenAPI\OpenAPI\Models\Operations\GetPayslipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPayslipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payslipObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayslipObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves payroll settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsResponse
     */
	public function getSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Settings');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->settingsObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SettingsObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a superfund by using a unique superfund ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSuperfundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSuperfundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSuperfundResponse
     */
	public function getSuperfund(
        \OpenAPI\OpenAPI\Models\Operations\GetSuperfundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSuperfundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSuperfundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Superfunds/{SuperFundID}', \OpenAPI\OpenAPI\Models\Operations\GetSuperfundRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSuperfundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->superFunds = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SuperFunds', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves superfund products
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsResponse
     */
	public function getSuperfundProducts(
        \OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/SuperfundProducts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSuperfundProductsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->superFundProducts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SuperFundProducts', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves superfunds
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSuperfundsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSuperfundsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSuperfundsResponse
     */
	public function getSuperfunds(
        \OpenAPI\OpenAPI\Models\Operations\GetSuperfundsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSuperfundsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSuperfundsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Superfunds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSuperfundsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSuperfundsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->superFunds = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SuperFunds', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a timesheet by using a unique timesheet id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimesheetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimesheetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimesheetResponse
     */
	public function getTimesheet(
        \OpenAPI\OpenAPI\Models\Operations\GetTimesheetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTimesheetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimesheetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Timesheets/{TimesheetID}', \OpenAPI\OpenAPI\Models\Operations\GetTimesheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimesheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timesheetObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TimesheetObject', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves timesheets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimesheetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTimesheetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimesheetsResponse
     */
	public function getTimesheets(
        \OpenAPI\OpenAPI\Models\Operations\GetTimesheetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTimesheetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimesheetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Timesheets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTimesheetsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimesheetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timesheets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Timesheets', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiException = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\APIException', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an employee's detail
     * 
     * Update properties on a single employee
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeResponse
     */
	public function updateEmployee(
        \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employees/{EmployeeID}', \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateEmployeeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->employees = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Employees', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a specific leave application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationResponse
     */
	public function updateLeaveApplication(
        \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/LeaveApplications/{LeaveApplicationID}', \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateLeaveApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->leaveApplications = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LeaveApplications', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Updates a pay run
     * 
     * Update properties on a single PayRun
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunResponse
     */
	public function updatePayRun(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/PayRuns/{PayRunID}', \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePayRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payRuns = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PayRuns', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a payslip
     * 
     * Update lines on a single payslips
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipResponse
     */
	public function updatePayslip(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Payslip/{PayslipID}', \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePayslipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->payslips = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Payslips', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a superfund
     * 
     * Update properties on a single Superfund
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundResponse
     */
	public function updateSuperfund(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Superfunds/{SuperFundID}', \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSuperfundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->superFunds = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SuperFunds', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a timesheet
     * 
     * Update properties on a single timesheet
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetResponse
     */
	public function updateTimesheet(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Timesheets/{TimesheetID}', \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTimesheetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timesheets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Timesheets', 'json');
            }
        }

        return $response;
    }
}