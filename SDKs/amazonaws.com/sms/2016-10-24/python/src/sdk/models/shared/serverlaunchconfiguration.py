"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import s3location as shared_s3location
from ..shared import scripttype_enum as shared_scripttype_enum
from ..shared import server as shared_server
from ..shared import userdata as shared_userdata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServerLaunchConfiguration:
    r"""Launch configuration for a server."""
    
    associate_public_ip_address: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatePublicIpAddress'), 'exclude': lambda f: f is None }})  
    configure_script: Optional[shared_s3location.S3Location] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configureScript'), 'exclude': lambda f: f is None }})
    r"""Location of an Amazon S3 object."""  
    configure_script_type: Optional[shared_scripttype_enum.ScriptTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configureScriptType'), 'exclude': lambda f: f is None }})  
    ec2_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ec2KeyName'), 'exclude': lambda f: f is None }})  
    iam_instance_profile_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iamInstanceProfileName'), 'exclude': lambda f: f is None }})  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})  
    logical_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logicalId'), 'exclude': lambda f: f is None }})  
    security_group: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityGroup'), 'exclude': lambda f: f is None }})  
    server: Optional[shared_server.Server] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})  
    user_data: Optional[shared_userdata.UserData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userData'), 'exclude': lambda f: f is None }})  
    vpc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpc'), 'exclude': lambda f: f is None }})  
    