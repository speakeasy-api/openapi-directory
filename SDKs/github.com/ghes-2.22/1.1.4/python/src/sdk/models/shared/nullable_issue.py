"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import author_association_enum as shared_author_association_enum
from ..shared import nullable_integration as shared_nullable_integration
from ..shared import nullable_milestone as shared_nullable_milestone
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import reaction_rollup as shared_reaction_rollup
from ..shared import repository as shared_repository
from ..shared import simple_user as shared_simple_user
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NullableIssueLabels2:
    
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})  
    default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    node_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NullableIssuePullRequest:
    
    diff_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('diff_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    patch_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patch_url') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    merged_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merged_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NullableIssue:
    r"""Issues are a great way to keep track of tasks, enhancements, and bugs for your projects."""
    
    assignee: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignee') }})
    r"""Simple User"""  
    author_association: shared_author_association_enum.AuthorAssociationEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author_association') }})
    r"""How the author is associated with the repository."""  
    closed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    comments: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments') }})  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    labels: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels') }})
    r"""Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository"""  
    labels_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels_url') }})  
    locked: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locked') }})  
    milestone: shared_nullable_milestone.NullableMilestone = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('milestone') }})
    r"""A collection of related issues and pull requests."""  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    number: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number') }})
    r"""Number uniquely identifying the issue within its repository"""  
    repository_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_url') }})  
    state: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})
    r"""State of the issue; either 'open' or 'closed'"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Title of the issue"""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""URL for the issue"""  
    user: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""Simple User"""  
    active_lock_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active_lock_reason'), 'exclude': lambda f: f is None }})  
    assignees: Optional[list[shared_simple_user.SimpleUser]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignees'), 'exclude': lambda f: f is None }})  
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})
    r"""Contents of the issue"""  
    body_html: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_html'), 'exclude': lambda f: f is None }})  
    body_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_text'), 'exclude': lambda f: f is None }})  
    closed_by: Optional[shared_nullable_simple_user.NullableSimpleUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('closed_by'), 'exclude': lambda f: f is None }})
    r"""Simple User"""  
    performed_via_github_app: Optional[shared_nullable_integration.NullableIntegration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performed_via_github_app'), 'exclude': lambda f: f is None }})
    r"""GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub."""  
    pull_request: Optional[NullableIssuePullRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pull_request'), 'exclude': lambda f: f is None }})  
    reactions: Optional[shared_reaction_rollup.ReactionRollup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reactions'), 'exclude': lambda f: f is None }})  
    repository: Optional[shared_repository.Repository] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository'), 'exclude': lambda f: f is None }})
    r"""A git repository"""  
    timeline_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeline_url'), 'exclude': lambda f: f is None }})  
    