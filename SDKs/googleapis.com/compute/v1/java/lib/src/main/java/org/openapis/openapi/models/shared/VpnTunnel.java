/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * VpnTunnel - Represents a Cloud VPN Tunnel resource. For more information about VPN, read the the Cloud VPN Overview.
 */
public class VpnTunnel {
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;
    public VpnTunnel withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public VpnTunnel withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * [Output Only] Detailed status message for the VPN tunnel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detailedStatus")
    public String detailedStatus;
    public VpnTunnel withDetailedStatus(String detailedStatus) {
        this.detailedStatus = detailedStatus;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public VpnTunnel withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ikeVersion")
    public Integer ikeVersion;
    public VpnTunnel withIkeVersion(Integer ikeVersion) {
        this.ikeVersion = ikeVersion;
        return this;
    }
    
    /**
     * [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public VpnTunnel withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must be disjoint. Only IPv4 is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localTrafficSelector")
    public String[] localTrafficSelector;
    public VpnTunnel withLocalTrafficSelector(String[] localTrafficSelector) {
        this.localTrafficSelector = localTrafficSelector;
        return this;
    }
    
    /**
     * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public VpnTunnel withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peerExternalGateway")
    public String peerExternalGateway;
    public VpnTunnel withPeerExternalGateway(String peerExternalGateway) {
        this.peerExternalGateway = peerExternalGateway;
        return this;
    }
    
    /**
     * The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. Possible values are: `0`, `1`, `2`, `3`. The number of IDs in use depends on the external VPN gateway redundancy type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peerExternalGatewayInterface")
    public Integer peerExternalGatewayInterface;
    public VpnTunnel withPeerExternalGatewayInterface(Integer peerExternalGatewayInterface) {
        this.peerExternalGatewayInterface = peerExternalGatewayInterface;
        return this;
    }
    
    /**
     * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer GCP VPN gateway.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peerGcpGateway")
    public String peerGcpGateway;
    public VpnTunnel withPeerGcpGateway(String peerGcpGateway) {
        this.peerGcpGateway = peerGcpGateway;
        return this;
    }
    
    /**
     * IP address of the peer VPN gateway. Only IPv4 is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peerIp")
    public String peerIp;
    public VpnTunnel withPeerIp(String peerIp) {
        this.peerIp = peerIp;
        return this;
    }
    
    /**
     * [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public VpnTunnel withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges should be disjoint. Only IPv4 is supported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteTrafficSelector")
    public String[] remoteTrafficSelector;
    public VpnTunnel withRemoteTrafficSelector(String[] remoteTrafficSelector) {
        this.remoteTrafficSelector = remoteTrafficSelector;
        return this;
    }
    
    /**
     * URL of the router resource to be used for dynamic routing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("router")
    public String router;
    public VpnTunnel withRouter(String router) {
        this.router = router;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public VpnTunnel withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharedSecret")
    public String sharedSecret;
    public VpnTunnel withSharedSecret(String sharedSecret) {
        this.sharedSecret = sharedSecret;
        return this;
    }
    
    /**
     * Hash of the shared secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharedSecretHash")
    public String sharedSecretHash;
    public VpnTunnel withSharedSecretHash(String sharedSecretHash) {
        this.sharedSecretHash = sharedSecretHash;
        return this;
    }
    
    /**
     * [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING_FOR_FULL_CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST_HANDSHAKE: Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK_ERROR: Deprecated, replaced by NO_INCOMING_PACKETS - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). - NEGOTIATION_FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO_INCOMING_PACKETS: No incoming packets from peer. - REJECTED: Tunnel configuration was rejected, can be result of being denied access. - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably behind NAT. - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public VpnTunnelStatusEnum status;
    public VpnTunnel withStatus(VpnTunnelStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetVpnGateway")
    public String targetVpnGateway;
    public VpnTunnel withTargetVpnGateway(String targetVpnGateway) {
        this.targetVpnGateway = targetVpnGateway;
        return this;
    }
    
    /**
     * URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High Availability VPN gateway resource is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpnGateway")
    public String vpnGateway;
    public VpnTunnel withVpnGateway(String vpnGateway) {
        this.vpnGateway = vpnGateway;
        return this;
    }
    
    /**
     * The interface ID of the VPN gateway with which this VPN tunnel is associated. Possible values are: `0`, `1`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpnGatewayInterface")
    public Integer vpnGatewayInterface;
    public VpnTunnel withVpnGatewayInterface(Integer vpnGatewayInterface) {
        this.vpnGatewayInterface = vpnGatewayInterface;
        return this;
    }
    
}
