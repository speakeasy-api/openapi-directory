/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FailedData } from "./faileddata";
import { Expose, Type } from "class-transformer";

/**
 * State of the QueuedResource request.
 */
export enum QueuedResourceStateStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  Creating = "CREATING",
  Accepted = "ACCEPTED",
  Provisioning = "PROVISIONING",
  Failed = "FAILED",
  Deleting = "DELETING",
  Active = "ACTIVE",
  Suspending = "SUSPENDING",
  Suspended = "SUSPENDED",
}

/**
 * QueuedResourceState defines the details of the QueuedResource request.
 */
export class QueuedResourceState extends SpeakeasyBase {
  /**
   * Further data for the accepted state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "acceptedData" })
  acceptedData?: Record<string, any>;

  /**
   * Further data for the active state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "activeData" })
  activeData?: Record<string, any>;

  /**
   * Further data for the creating state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creatingData" })
  creatingData?: Record<string, any>;

  /**
   * Further data for the deleting state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deletingData" })
  deletingData?: Record<string, any>;

  /**
   * Further data for the failed state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failedData" })
  @Type(() => FailedData)
  failedData?: FailedData;

  /**
   * Further data for the provisioning state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provisioningData" })
  provisioningData?: Record<string, any>;

  /**
   * State of the QueuedResource request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: QueuedResourceStateStateEnum;

  /**
   * Further data for the suspended state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suspendedData" })
  suspendedData?: Record<string, any>;

  /**
   * Further data for the suspending state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suspendingData" })
  suspendingData?: Record<string, any>;
}
