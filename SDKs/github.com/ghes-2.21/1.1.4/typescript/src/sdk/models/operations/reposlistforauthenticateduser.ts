/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
 */
export enum ReposListForAuthenticatedUserDirectionEnum {
  Asc = "asc",
  Desc = "desc",
}

/**
 * Can be one of `created`, `updated`, `pushed`, `full_name`.
 */
export enum ReposListForAuthenticatedUserSortEnum {
  Created = "created",
  Updated = "updated",
  Pushed = "pushed",
  FullName = "full_name",
}

/**
 * Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
 *
 * @remarks
 *
 * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
 */
export enum ReposListForAuthenticatedUserTypeEnum {
  All = "all",
  Owner = "owner",
  Public = "public",
  Private = "private",
  Member = "member",
}

/**
 * Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
 */
export enum ReposListForAuthenticatedUserVisibilityEnum {
  All = "all",
  Public = "public",
  Private = "private",
}

export class ReposListForAuthenticatedUserRequest extends SpeakeasyBase {
  /**
   * Comma-separated list of values. Can include:
   *
   * @remarks
   * \* `owner`: Repositories that are owned by the authenticated user.
   * \* `collaborator`: Repositories that the user has been added to as a collaborator.
   * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=affiliation",
  })
  affiliation?: string;

  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=before;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  before?: Date;

  /**
   * Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: ReposListForAuthenticatedUserDirectionEnum;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Results per page (max 100)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=since;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  since?: Date;

  /**
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: ReposListForAuthenticatedUserSortEnum;

  /**
   * Can be one of `all`, `owner`, `public`, `private`, `member`. Note: For GitHub AE, can be one of `all`, `owner`, `internal`, `private`, `member`. Default: `all`
   *
   * @remarks
   *
   * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: ReposListForAuthenticatedUserTypeEnum;

  /**
   * Can be one of `all`, `public`, or `private`. Note: For GitHub AE, can be one of `all`, `internal`, or `private`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=visibility",
  })
  visibility?: ReposListForAuthenticatedUserVisibilityEnum;
}

export class ReposListForAuthenticatedUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Requires authentication
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.Repository })
  repositories?: shared.Repository[];

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
