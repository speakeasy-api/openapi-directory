"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SetAccountInfoResponseProviderUserInfo:
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The user's display name at the IDP."""  
    federated_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('federatedId'), 'exclude': lambda f: f is None }})
    r"""User's identifier at IDP."""  
    photo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoUrl'), 'exclude': lambda f: f is None }})
    r"""The user's photo url at the IDP."""  
    provider_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('providerId'), 'exclude': lambda f: f is None }})
    r"""The IdP ID. For whitelisted IdPs it's a short domain name, e.g., google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SetAccountInfoResponse:
    r"""Respone of setting the account information."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The name of the user."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""The email of the user."""  
    email_verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailVerified'), 'exclude': lambda f: f is None }})
    r"""If email has been verified."""  
    expires_in: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expiresIn'), 'exclude': lambda f: f is None }})
    r"""If idToken is STS id token, then this field will be expiration time of STS id token in seconds."""  
    id_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idToken'), 'exclude': lambda f: f is None }})
    r"""The Gitkit id token to login the newly sign up user."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The fixed string \\"identitytoolkit#SetAccountInfoResponse\\"."""  
    local_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localId'), 'exclude': lambda f: f is None }})
    r"""The local ID of the user."""  
    new_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newEmail'), 'exclude': lambda f: f is None }})
    r"""The new email the user attempts to change to."""  
    password_hash: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordHash'), 'exclude': lambda f: f is None }})
    r"""The user's hashed password."""  
    photo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photoUrl'), 'exclude': lambda f: f is None }})
    r"""The photo url of the user."""  
    provider_user_info: Optional[list[SetAccountInfoResponseProviderUserInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('providerUserInfo'), 'exclude': lambda f: f is None }})
    r"""The user's profiles at the associated IdPs."""  
    refresh_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refreshToken'), 'exclude': lambda f: f is None }})
    r"""If idToken is STS id token, then this field will be refresh token."""  
    