// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum string

const (
	PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnumConfidential PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum = "confidential"
	PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnumRegular      PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum = "regular"
	PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnumPublic       PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum = "public"
)

func (e PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum) ToPointer() *PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum {
	return &e
}

func (e *PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum: %v", v)
	}
}

// PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBody - Professional vehicle to modify (except name, class and archivaldate)
type PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBody struct {
	About              *string                                                             `json:"About,omitempty"`
	Brand              *string                                                             `json:"Brand,omitempty"`
	Comment            *string                                                             `json:"Comment,omitempty"`
	CompanyTax         *bool                                                               `json:"CompanyTax,omitempty"`
	DateIn             *string                                                             `json:"DateIn,omitempty"`
	DateOut            *string                                                             `json:"DateOut,omitempty"`
	Designation        *string                                                             `json:"Designation,omitempty"`
	Home               *bool                                                               `json:"Home,omitempty"`
	Keywords           []string                                                            `json:"Keywords,omitempty"`
	Level              *PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBodyLevelEnum `json:"Level,omitempty"`
	Model              *string                                                             `json:"Model,omitempty"`
	RegistrationDate   *string                                                             `json:"RegistrationDate,omitempty"`
	RegistrationNumber *string                                                             `json:"RegistrationNumber,omitempty"`
	Type               *string                                                             `json:"Type,omitempty"`
	Value              *float64                                                            `json:"Value,omitempty"`
}

type PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequest struct {
	// Professional vehicle to modify (except name, class and archivaldate)
	RequestBody PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequestBody `request:"mediaType=application/json"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PatchSpacesSpaceIDFoldersIDProfessionalVehicleResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
