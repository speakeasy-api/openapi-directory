<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CreateAuthUriResponse - Response of creating the IDP authentication URL.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CreateAuthUriResponse
{
    /**
     * all providers the user has once used to do federated login
     * 
     * @var ?array<string> $allProviders
     */
	#[\JMS\Serializer\Annotation\SerializedName('allProviders')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $allProviders = null;
    
    /**
     * The URI used by the IDP to authenticate the user.
     * 
     * @var ?string $authUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('authUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $authUri = null;
    
    /**
     * True if captcha is required.
     * 
     * @var ?bool $captchaRequired
     */
	#[\JMS\Serializer\Annotation\SerializedName('captchaRequired')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $captchaRequired = null;
    
    /**
     * True if the authUri is for user's existing provider.
     * 
     * @var ?bool $forExistingProvider
     */
	#[\JMS\Serializer\Annotation\SerializedName('forExistingProvider')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $forExistingProvider = null;
    
    /**
     * The fixed string identitytoolkit#CreateAuthUriResponse".
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * The provider ID of the auth URI.
     * 
     * @var ?string $providerId
     */
	#[\JMS\Serializer\Annotation\SerializedName('providerId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $providerId = null;
    
    /**
     * Whether the user is registered if the identifier is an email.
     * 
     * @var ?bool $registered
     */
	#[\JMS\Serializer\Annotation\SerializedName('registered')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $registered = null;
    
    /**
     * Session ID which should be passed in the following verifyAssertion request.
     * 
     * @var ?string $sessionId
     */
	#[\JMS\Serializer\Annotation\SerializedName('sessionId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sessionId = null;
    
    /**
     * All sign-in methods this user has used.
     * 
     * @var ?array<string> $signinMethods
     */
	#[\JMS\Serializer\Annotation\SerializedName('signinMethods')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $signinMethods = null;
    
	public function __construct()
	{
		$this->allProviders = null;
		$this->authUri = null;
		$this->captchaRequired = null;
		$this->forExistingProvider = null;
		$this->kind = null;
		$this->providerId = null;
		$this->registered = null;
		$this->sessionId = null;
		$this->signinMethods = null;
	}
}
