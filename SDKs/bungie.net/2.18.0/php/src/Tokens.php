<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tokens 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimResponse
     */
	public function tokensApplyMissingPartnerOffersWithoutClaim(
        \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/', \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensApplyMissingPartnerOffersWithoutClaimResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Claim a partner offer as the authenticated user.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensClaimPartnerOfferResponse
     */
	public function tokensClaimPartnerOffer(
    ): \OpenAPI\OpenAPI\Models\Operations\TokensClaimPartnerOfferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Partner/ClaimOffer/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensClaimPartnerOfferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensForceDropsRepairResponse
     */
	public function tokensForceDropsRepair(
    ): \OpenAPI\OpenAPI\Models\Operations\TokensForceDropsRepairResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Partner/ForceDropsRepair/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensForceDropsRepairResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserResponse
     */
	public function tokensGetBungieRewardsForPlatformUser(
        \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/', \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForPlatformUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the bungie rewards for the targeted user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserResponse
     */
	public function tokensGetBungieRewardsForUser(
        \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Rewards/GetRewardsForUser/{membershipId}/', \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of the current bungie rewards
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsListResponse
     */
	public function tokensGetBungieRewardsList(
    ): \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Rewards/BungieRewards/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensGetBungieRewardsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistoryResponse
     */
	public function tokensGetPartnerOfferSkuHistory(
        \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/', \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerOfferSkuHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistoryResponse
     */
	public function tokensGetPartnerRewardHistory(
        \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/', \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensGetPartnerRewardHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}