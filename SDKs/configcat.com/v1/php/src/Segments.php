<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Segments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Segment
     * 
     * This endpoint creates a new Segment in a specified Product 
     * identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSegmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSegmentResponse
     */
	public function createSegment(
        \OpenAPI\OpenAPI\Models\Operations\CreateSegmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSegmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/products/{productId}/segments', \OpenAPI\OpenAPI\Models\Operations\CreateSegmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createSegmentModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSegmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SegmentModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SegmentModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Delete Segment
     * 
     * This endpoint removes a Segment identified by the `segmentId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSegmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSegmentResponse
     */
	public function deleteSegment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSegmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSegmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/segments/{segmentId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSegmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSegmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Get Segment
     * 
     * This endpoint returns the metadata of a Segment
     * identified by the `segmentId`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSegmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSegmentResponse
     */
	public function getSegment(
        \OpenAPI\OpenAPI\Models\Operations\GetSegmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSegmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/segments/{segmentId}', \OpenAPI\OpenAPI\Models\Operations\GetSegmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSegmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SegmentModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SegmentModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * List Segments
     * 
     * This endpoint returns the list of the Segments that belongs to the given Product identified by the
     * `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSegmentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSegmentsResponse
     */
	public function getSegments(
        \OpenAPI\OpenAPI\Models\Operations\GetSegmentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSegmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/products/{productId}/segments', \OpenAPI\OpenAPI\Models\Operations\GetSegmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSegmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentListModelHaljsons = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SegmentListModelHaljson>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentListModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SegmentListModel>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Update Segment
     * 
     * This endpoint updates a Segment identified by the `segmentId` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSegmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSegmentResponse
     */
	public function updateSegment(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSegmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSegmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/segments/{segmentId}', \OpenAPI\OpenAPI\Models\Operations\UpdateSegmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateSegmentModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSegmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentModelHaljson = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SegmentModelHaljson', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segmentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SegmentModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}