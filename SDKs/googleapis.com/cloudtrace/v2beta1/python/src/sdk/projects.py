"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudtrace_projects_trace_sinks_create(self, request: operations.CloudtraceProjectsTraceSinksCreateRequest, security: operations.CloudtraceProjectsTraceSinksCreateSecurity) -> operations.CloudtraceProjectsTraceSinksCreateResponse:
        r"""Creates a sink that exports trace spans to a destination. The export of newly-ingested traces begins immediately, unless the sink's `writer_identity` is not permitted to write to the destination. A sink can export traces only from the resource owning the sink (the 'parent')."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsTraceSinksCreateRequest, base_url, '/v2beta1/{parent}/traceSinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "trace_sink_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudtraceProjectsTraceSinksCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsTraceSinksCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TraceSink])
                res.trace_sink = out

        return res

    def cloudtrace_projects_trace_sinks_delete(self, request: operations.CloudtraceProjectsTraceSinksDeleteRequest, security: operations.CloudtraceProjectsTraceSinksDeleteSecurity) -> operations.CloudtraceProjectsTraceSinksDeleteResponse:
        r"""Deletes a sink."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsTraceSinksDeleteRequest, base_url, '/v2beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudtraceProjectsTraceSinksDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsTraceSinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def cloudtrace_projects_trace_sinks_get(self, request: operations.CloudtraceProjectsTraceSinksGetRequest, security: operations.CloudtraceProjectsTraceSinksGetSecurity) -> operations.CloudtraceProjectsTraceSinksGetResponse:
        r"""Get a trace sink by name under the parent resource (GCP project)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsTraceSinksGetRequest, base_url, '/v2beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudtraceProjectsTraceSinksGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsTraceSinksGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TraceSink])
                res.trace_sink = out

        return res

    def cloudtrace_projects_trace_sinks_list(self, request: operations.CloudtraceProjectsTraceSinksListRequest, security: operations.CloudtraceProjectsTraceSinksListSecurity) -> operations.CloudtraceProjectsTraceSinksListResponse:
        r"""List all sinks for the parent resource (GCP project)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsTraceSinksListRequest, base_url, '/v2beta1/{parent}/traceSinks', request)
        
        query_params = utils.get_query_params(operations.CloudtraceProjectsTraceSinksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsTraceSinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTraceSinksResponse])
                res.list_trace_sinks_response = out

        return res

    def cloudtrace_projects_trace_sinks_patch(self, request: operations.CloudtraceProjectsTraceSinksPatchRequest, security: operations.CloudtraceProjectsTraceSinksPatchSecurity) -> operations.CloudtraceProjectsTraceSinksPatchResponse:
        r"""Updates a sink. This method updates fields in the existing sink according to the provided update mask. The sink's name cannot be changed nor any output-only fields (e.g. the writer_identity)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudtraceProjectsTraceSinksPatchRequest, base_url, '/v2beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "trace_sink_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudtraceProjectsTraceSinksPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudtraceProjectsTraceSinksPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TraceSink])
                res.trace_sink = out

        return res

    