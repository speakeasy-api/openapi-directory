/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

/**
 * RegistrationsProvidersListFileAttributes - The properties of the file entity.
 */
public class RegistrationsProvidersListFileAttributes {
    /**
     * SOON TO BE DEPRECATED, see relationships checkout.
     */
    
    public String checkout;
    public RegistrationsProvidersListFileAttributes withCheckout(String checkout) {
        this.checkout = checkout;
        return this;
    }
    
    /**
     * Whether or not the current user is allowed to post comments.
     */
    
    public Boolean currentUserCanComment;
    public RegistrationsProvidersListFileAttributes withCurrentUserCanComment(Boolean currentUserCanComment) {
        this.currentUserCanComment = currentUserCanComment;
        return this;
    }
    
    /**
     * Version number of the file.
     */
    
    public Long currentVersion;
    public RegistrationsProvidersListFileAttributes withCurrentVersion(Long currentVersion) {
        this.currentVersion = currentVersion;
        return this;
    }
    
    /**
     * The time at which the file was created, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime dateCreated;
    public RegistrationsProvidersListFileAttributes withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The time at which the file was last modified, as an iso8601 formatted timestamp.
     */
    
    public OffsetDateTime dateModified;
    public RegistrationsProvidersListFileAttributes withDateModified(OffsetDateTime dateModified) {
        this.dateModified = dateModified;
        return this;
    }
    
    /**
     * Whether or not deletion of the file is allowed.
     */
    
    public Boolean deleteAllowed;
    public RegistrationsProvidersListFileAttributes withDeleteAllowed(Boolean deleteAllowed) {
        this.deleteAllowed = deleteAllowed;
        return this;
    }
    
    /**
     * Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count.
     */
    
    public java.util.Map<String, Object> extra;
    public RegistrationsProvidersListFileAttributes withExtra(java.util.Map<String, Object> extra) {
        this.extra = extra;
        return this;
    }
    
    /**
     * Global unique identifier (GUID) for this file (if one has been assigned).
     */
    
    public String guid;
    public RegistrationsProvidersListFileAttributes withGuid(String guid) {
        this.guid = guid;
        return this;
    }
    
    /**
     * The kind of files object it is (`file` or `folder`).
     */
    
    public String kind;
    public RegistrationsProvidersListFileAttributes withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files).
     */
    
    public OffsetDateTime lastTouched;
    public RegistrationsProvidersListFileAttributes withLastTouched(OffsetDateTime lastTouched) {
        this.lastTouched = lastTouched;
        return this;
    }
    
    /**
     * Unix-style path to the file relative to the provider root.
     */
    
    public String materializedPath;
    public RegistrationsProvidersListFileAttributes withMaterializedPath(String materializedPath) {
        this.materializedPath = materializedPath;
        return this;
    }
    
    /**
     * Name of the file
     */
    
    public String name;
    public RegistrationsProvidersListFileAttributes withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The unique identifier for this file entity for this project and storage provider.
     */
    
    public String path;
    public RegistrationsProvidersListFileAttributes withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The id of the file provider (e.g., `osfstorage`)
     */
    
    public String provider;
    public RegistrationsProvidersListFileAttributes withProvider(String provider) {
        this.provider = provider;
        return this;
    }
    
    /**
     * Size of the file in bytes.
     */
    
    public Long size;
    public RegistrationsProvidersListFileAttributes withSize(Long size) {
        this.size = size;
        return this;
    }
    
    /**
     * A list of strings that describe this file, as entered by project contributors.
     */
    
    public String[] tags;
    public RegistrationsProvidersListFileAttributes withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
}
