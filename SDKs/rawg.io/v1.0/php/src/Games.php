<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Games 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of game achievements.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsReadResponse
     */
	public function gamesAchievementsRead(
        \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{id}/achievements', \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAchievementsReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->parentAchievement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ParentAchievement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of DLC's for the game, GOTY and other editions, companion apps, etc.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesAdditionsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesAdditionsListResponse
     */
	public function gamesAdditionsList(
        \OpenAPI\OpenAPI\Models\Operations\GamesAdditionsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesAdditionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{game_pk}/additions', \OpenAPI\OpenAPI\Models\Operations\GamesAdditionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesAdditionsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesAdditionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamesAdditionsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GamesAdditionsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of individual creators that were part of the development team.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamListResponse
     */
	public function gamesDevelopmentTeamList(
        \OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{game_pk}/development-team', \OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamesDevelopmentTeamList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GamesDevelopmentTeamList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of games that are part of the same series.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesListResponse
     */
	public function gamesGameSeriesList(
        \OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{game_pk}/game-series', \OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamesGameSeriesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GamesGameSeriesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of games.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesListResponse
     */
	public function gamesList(
        \OpenAPI\OpenAPI\Models\Operations\GamesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GamesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of game trailers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesMoviesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesMoviesReadResponse
     */
	public function gamesMoviesRead(
        \OpenAPI\OpenAPI\Models\Operations\GamesMoviesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesMoviesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{id}/movies', \OpenAPI\OpenAPI\Models\Operations\GamesMoviesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesMoviesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->movie = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Movie', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of parent games for DLC's and editions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesParentGamesListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesParentGamesListResponse
     */
	public function gamesParentGamesList(
        \OpenAPI\OpenAPI\Models\Operations\GamesParentGamesListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesParentGamesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{game_pk}/parent-games', \OpenAPI\OpenAPI\Models\Operations\GamesParentGamesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesParentGamesListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesParentGamesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamesParentGamesList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GamesParentGamesList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get details of the game.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesReadResponse
     */
	public function gamesRead(
        \OpenAPI\OpenAPI\Models\Operations\GamesReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{id}', \OpenAPI\OpenAPI\Models\Operations\GamesReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gameSingle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GameSingle', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of most recent posts from the game's subreddit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesRedditReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesRedditReadResponse
     */
	public function gamesRedditRead(
        \OpenAPI\OpenAPI\Models\Operations\GamesRedditReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesRedditReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{id}/reddit', \OpenAPI\OpenAPI\Models\Operations\GamesRedditReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesRedditReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reddit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Reddit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get screenshots for the game.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsListResponse
     */
	public function gamesScreenshotsList(
        \OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{game_pk}/screenshots', \OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamesScreenshotsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GamesScreenshotsList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get links to the stores that sell the game.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesStoresListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesStoresListResponse
     */
	public function gamesStoresList(
        \OpenAPI\OpenAPI\Models\Operations\GamesStoresListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesStoresListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{game_pk}/stores', \OpenAPI\OpenAPI\Models\Operations\GamesStoresListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesStoresListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesStoresListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gamesStoresList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GamesStoresList200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of visually similar games, available only for business and enterprise API users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesSuggestedReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesSuggestedReadResponse
     */
	public function gamesSuggestedRead(
        \OpenAPI\OpenAPI\Models\Operations\GamesSuggestedReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesSuggestedReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{id}/suggested', \OpenAPI\OpenAPI\Models\Operations\GamesSuggestedReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesSuggestedReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gameSingle = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GameSingle', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get streams on Twitch associated with the game, available only for business and enterprise API users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesTwitchReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesTwitchReadResponse
     */
	public function gamesTwitchRead(
        \OpenAPI\OpenAPI\Models\Operations\GamesTwitchReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesTwitchReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{id}/twitch', \OpenAPI\OpenAPI\Models\Operations\GamesTwitchReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesTwitchReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->twitch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Twitch', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get videos from YouTube associated with the game, available only for business and enterprise API users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesYoutubeReadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesYoutubeReadResponse
     */
	public function gamesYoutubeRead(
        \OpenAPI\OpenAPI\Models\Operations\GamesYoutubeReadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesYoutubeReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/{id}/youtube', \OpenAPI\OpenAPI\Models\Operations\GamesYoutubeReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesYoutubeReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->youtube = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Youtube', 'json');
            }
        }

        return $response;
    }
}