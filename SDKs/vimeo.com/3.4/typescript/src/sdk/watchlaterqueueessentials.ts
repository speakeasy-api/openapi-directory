/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class WatchLaterQueueEssentials {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Add a video to a user's Watch Later queue
   */
  addVideoToWatchLater(
    req: operations.AddVideoToWatchLaterRequest,
    security: operations.AddVideoToWatchLaterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoToWatchLaterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoToWatchLaterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/watchlater/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoToWatchLaterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoToWatchLaterResponse =
        new operations.AddVideoToWatchLaterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Add a video to a user's Watch Later queue
   */
  addVideoToWatchLaterAlt1(
    req: operations.AddVideoToWatchLaterAlt1Request,
    security: operations.AddVideoToWatchLaterAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoToWatchLaterAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoToWatchLaterAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/watchlater/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddVideoToWatchLaterAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoToWatchLaterAlt1Response =
        new operations.AddVideoToWatchLaterAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Check if a user has added a specific video to their Watch Later queue
   */
  checkWatchLaterQueue(
    req: operations.CheckWatchLaterQueueRequest,
    security: operations.CheckWatchLaterQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckWatchLaterQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CheckWatchLaterQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/watchlater/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CheckWatchLaterQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckWatchLaterQueueResponse =
        new operations.CheckWatchLaterQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.video = utils.objectToClass(httpRes?.data, shared.Video);
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Check if a user has added a specific video to their Watch Later queue
   */
  checkWatchLaterQueueAlt1(
    req: operations.CheckWatchLaterQueueAlt1Request,
    security: operations.CheckWatchLaterQueueAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckWatchLaterQueueAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CheckWatchLaterQueueAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/watchlater/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CheckWatchLaterQueueAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckWatchLaterQueueAlt1Response =
        new operations.CheckWatchLaterQueueAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.video = utils.objectToClass(httpRes?.data, shared.Video);
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a video from a user's Watch Later queue
   */
  deleteVideoFromWatchLater(
    req: operations.DeleteVideoFromWatchLaterRequest,
    security: operations.DeleteVideoFromWatchLaterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVideoFromWatchLaterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVideoFromWatchLaterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/watchlater/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVideoFromWatchLaterSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVideoFromWatchLaterResponse =
        new operations.DeleteVideoFromWatchLaterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Remove a video from a user's Watch Later queue
   */
  deleteVideoFromWatchLaterAlt1(
    req: operations.DeleteVideoFromWatchLaterAlt1Request,
    security: operations.DeleteVideoFromWatchLaterAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVideoFromWatchLaterAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVideoFromWatchLaterAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/me/watchlater/{video_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVideoFromWatchLaterAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVideoFromWatchLaterAlt1Response =
        new operations.DeleteVideoFromWatchLaterAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Get all the videos in a user's Watch Later queue
   */
  getWatchLaterQueue(
    req: operations.GetWatchLaterQueueRequest,
    security: operations.GetWatchLaterQueueSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWatchLaterQueueResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWatchLaterQueueRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{user_id}/watchlater",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWatchLaterQueueSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWatchLaterQueueResponse =
        new operations.GetWatchLaterQueueResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.videos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videos = utils.objectToClass(
              httpRes?.data,
              shared.Video,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
      }

      return res;
    });
  }

  /**
   * Get all the videos in a user's Watch Later queue
   */
  getWatchLaterQueueAlt1(
    req: operations.GetWatchLaterQueueAlt1Request,
    security: operations.GetWatchLaterQueueAlt1Security,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWatchLaterQueueAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWatchLaterQueueAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/me/watchlater";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWatchLaterQueueAlt1Security(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWatchLaterQueueAlt1Response =
        new operations.GetWatchLaterQueueAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.video+json`
            )
          ) {
            res.videos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.videos = utils.objectToClass(
              httpRes?.data,
              shared.Video,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
      }

      return res;
    });
  }
}
