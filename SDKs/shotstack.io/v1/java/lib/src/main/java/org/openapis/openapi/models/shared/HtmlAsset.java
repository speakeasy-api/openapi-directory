/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HtmlAsset - The HtmlAsset clip type lets you create text based layout and formatting using HTML and CSS. You can also set the height and width of a bounding box for the HTML content to sit within. Text and elements will wrap within the bounding box.
 */
public class HtmlAsset {
    /**
     * Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("background")
    public String background;

    public HtmlAsset withBackground(String background) {
        this.background = background;
        return this;
    }
    
    /**
     * The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("css")
    public String css;

    public HtmlAsset withCss(String css) {
        this.css = css;
        return this;
    }
    
    /**
     * Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Long height;

    public HtmlAsset withHeight(Long height) {
        this.height = height;
        return this;
    }
    
    /**
     * The HTML text string. See list of [supported HTML tags](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).
     */
    @JsonProperty("html")
    public String html;

    public HtmlAsset withHtml(String html) {
        this.html = html;
        return this;
    }
    
    /**
     * Place the HTML in one of nine predefined positions within the HTML area. &lt;ul&gt;
     *   &lt;li&gt;`top` - top (center)&lt;/li&gt;
     *   &lt;li&gt;`topRight` - top right&lt;/li&gt;
     *   &lt;li&gt;`right` - right (center)&lt;/li&gt;
     *   &lt;li&gt;`bottomRight` - bottom right&lt;/li&gt;
     *   &lt;li&gt;`bottom` - bottom (center)&lt;/li&gt;
     *   &lt;li&gt;`bottomLeft` - bottom left&lt;/li&gt;
     *   &lt;li&gt;`left` - left (center)&lt;/li&gt;
     *   &lt;li&gt;`topLeft` - top left&lt;/li&gt;
     *   &lt;li&gt;`center` - center&lt;/li&gt;
     * &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public HtmlAssetPositionEnum position;

    public HtmlAsset withPosition(HtmlAssetPositionEnum position) {
        this.position = position;
        return this;
    }
    
    /**
     * The type of asset - set to `html` for HTML.
     */
    @JsonProperty("type")
    public String type;

    public HtmlAsset withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Long width;

    public HtmlAsset withWidth(Long width) {
        this.width = width;
        return this;
    }
    
    public HtmlAsset(@JsonProperty("html") String html, @JsonProperty("type") String type) {
        this.html = html;
        this.type = type;
  }
}
