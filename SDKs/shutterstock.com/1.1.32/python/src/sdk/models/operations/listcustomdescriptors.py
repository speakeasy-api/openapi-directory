"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import descriptorslistresult as shared_descriptorslistresult
from ..shared import security as shared_security
from typing import Optional


@dataclasses.dataclass
class ListCustomDescriptorsSecurity:
    
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    customer_access_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListCustomDescriptorsRequest:
    
    band_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'band_id', 'style': 'form', 'explode': True }})
    r"""Show descriptors that contain the specified band (case-sentsitive)"""  
    band_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'band_name', 'style': 'form', 'explode': True }})
    r"""Show descriptors with the specified band name (case-sensitive)"""  
    id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})
    r"""Show descriptors with the specified IDs (case-sensitive)"""  
    instrument_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'instrument_id', 'style': 'form', 'explode': True }})
    r"""Show descriptors with the specified instrument ID (case-sensitive)"""  
    instrument_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'instrument_name', 'style': 'form', 'explode': True }})
    r"""Show descriptors with the specified instrument name (case-sensitive)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Show descriptors with the specified name (case-sensitive)"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results per page"""  
    render_speed_over: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'render_speed_over', 'style': 'form', 'explode': True }})
    r"""Show descriptors with an average render speed that is greater than or equal to the specified value"""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tag', 'style': 'form', 'explode': True }})
    r"""Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive)"""  
    tempo: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tempo', 'style': 'form', 'explode': True }})
    r"""Show descriptors whose tempo range includes the specified tempo in beats per minute"""  
    tempo_from: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tempo_from', 'style': 'form', 'explode': True }})
    r"""Show descriptors that have a tempo range that includes the specified tempo in beats per minute"""  
    tempo_to: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tempo_to', 'style': 'form', 'explode': True }})
    r"""Show descriptors with a tempo that is less than or equal to the specified number"""  
    

@dataclasses.dataclass
class ListCustomDescriptorsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    descriptors_list_result: Optional[shared_descriptorslistresult.DescriptorsListResult] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    