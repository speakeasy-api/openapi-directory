"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import httpvalidationerror as shared_httpvalidationerror
from ..shared import openaqcitiesresult as shared_openaqcitiesresult
from enum import Enum
from typing import Optional

class CitiesGetV2CitiesGetOrderByCitiesOrderEnum(str, Enum):
    r"""An enumeration."""
    CITY = 'city'
    COUNTRY = 'country'
    FIRST_UPDATED = 'firstUpdated'
    LAST_UPDATED = 'lastUpdated'

class CitiesGetV2CitiesGetSortSortEnum(str, Enum):
    r"""An enumeration."""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class CitiesGetV2CitiesGetRequest:
    
    city: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain city or cities.
            (ex. ?city=Chicago or ?city=Chicago&city=Boston)
    """  
    country: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. ?country=US or ?country=US&country=MX)
    """  
    country_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country_id', 'style': 'form', 'explode': True }})
    r"""Limit results by a certain country using two letter country code.
            (ex. /US)
    """  
    entity: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'entity', 'style': 'form', 'explode': True }})  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Change the number of results returned."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})  
    order_by: Optional[CitiesGetV2CitiesGetOrderByCitiesOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order_by', 'style': 'form', 'explode': True }})
    r"""Order by a field"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Paginate through results."""  
    sort: Optional[CitiesGetV2CitiesGetSortSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Define sort order."""  
    

@dataclasses.dataclass
class CitiesGetV2CitiesGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""  
    open_aq_cities_result: Optional[shared_openaqcitiesresult.OpenAQCitiesResult] = dataclasses.field(default=None)
    r"""Successful Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    