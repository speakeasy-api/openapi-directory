"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class SearchAPI:
    r"""Endpoints to search podcasts"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_related_searches(self, request: operations.GetRelatedSearchesRequest) -> operations.GetRelatedSearchesResponse:
        r"""Fetch related search terms
        Suggest related search terms. The results are more comprehensive than from `GET /typeahead`. This endpoint is available only in the PRO/ENTERPRISE plan.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/related_searches'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetRelatedSearchesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRelatedSearchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RelatedSearchesResponse])
                res.related_searches_response = out
        elif http_res.status_code == 400 or http_res.status_code == 401 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    def get_trending_searches(self, request: operations.GetTrendingSearchesRequest) -> operations.GetTrendingSearchesResponse:
        r"""Fetch trending search terms
        Fetch up to 10 most recent trending search terms on the Listen Notes platform.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/trending_searches'
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrendingSearchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TrendingSearchesResponse])
                res.trending_searches_response = out
        elif http_res.status_code == 400 or http_res.status_code == 401 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    def search(self, request: operations.SearchRequest) -> operations.SearchResponse:
        r"""Full-text search
        Full-text search on episodes, podcasts, or curated lists of podcasts.
        Use the `offset` parameter to paginate through search results.
        The FREE plan allows to see up to 30 search results (or `offset` < 30) per query.
        The PRO plan allows to see up to 300 search results (or `offset` < 300) per query.
        The ENTERPRISE plan allows to see up to 10,000 search results (or `offset` < 10000) per query.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/search'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.SearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchResponse])
                res.search_response = out
        elif http_res.status_code == 400 or http_res.status_code == 401 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    def spellcheck(self, request: operations.SpellcheckRequest) -> operations.SpellcheckResponse:
        r"""Spell check on a search term
        Suggest a list of words that correct the spelling errors of a search term. This endpoint is available only in the PRO/ENTERPRISE plan.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/spellcheck'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.SpellcheckRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SpellcheckResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SpellCheckResponse])
                res.spell_check_response = out
        elif http_res.status_code == 400 or http_res.status_code == 401 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    def typeahead(self, request: operations.TypeaheadRequest) -> operations.TypeaheadResponse:
        r"""Typeahead search
        Suggest search terms, podcast genres, and podcasts.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/typeahead'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.TypeaheadRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TypeaheadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TypeaheadResponse])
                res.typeahead_response = out
        elif http_res.status_code == 400 or http_res.status_code == 401 or http_res.status_code == 429 or http_res.status_code >= 500 and http_res.status_code < 600:
            pass

        return res

    