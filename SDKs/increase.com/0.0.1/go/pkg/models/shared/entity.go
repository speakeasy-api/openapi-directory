// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// EntityCorporationAddress - The corporation's address.
type EntityCorporationAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// EntityCorporationBeneficialOwnersElementIndividualAddress - The person's address.
type EntityCorporationBeneficialOwnersElementIndividualAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum string

const (
	EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnumSocialSecurityNumber                   EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum = "social_security_number"
	EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnumIndividualTaxpayerIdentificationNumber EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum = "individual_taxpayer_identification_number"
	EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnumPassport                               EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum = "passport"
	EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnumDriversLicense                         EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum = "drivers_license"
	EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnumOther                                  EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum = "other"
)

func (e EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum) ToPointer() *EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum {
	return &e
}

func (e *EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum: %v", v)
	}
}

// EntityCorporationBeneficialOwnersElementIndividualIdentification - A means of verifying the person's identity.
type EntityCorporationBeneficialOwnersElementIndividualIdentification struct {
	// A method that can be used to verify the individual's identity.
	Method EntityCorporationBeneficialOwnersElementIndividualIdentificationMethodEnum `json:"method"`
	// The last 4 digits of the identification number that can be used to verify the individual's identity.
	NumberLast4 string `json:"number_last4"`
}

// EntityCorporationBeneficialOwnersElementIndividual - Personal details for the beneficial owner.
type EntityCorporationBeneficialOwnersElementIndividual struct {
	// The person's address.
	Address EntityCorporationBeneficialOwnersElementIndividualAddress `json:"address"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification EntityCorporationBeneficialOwnersElementIndividualIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// EntityCorporationBeneficialOwnersElementProngEnum - Why this person is considered a beneficial owner of the entity.
type EntityCorporationBeneficialOwnersElementProngEnum string

const (
	EntityCorporationBeneficialOwnersElementProngEnumOwnership EntityCorporationBeneficialOwnersElementProngEnum = "ownership"
	EntityCorporationBeneficialOwnersElementProngEnumControl   EntityCorporationBeneficialOwnersElementProngEnum = "control"
)

func (e EntityCorporationBeneficialOwnersElementProngEnum) ToPointer() *EntityCorporationBeneficialOwnersElementProngEnum {
	return &e
}

func (e *EntityCorporationBeneficialOwnersElementProngEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ownership":
		fallthrough
	case "control":
		*e = EntityCorporationBeneficialOwnersElementProngEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityCorporationBeneficialOwnersElementProngEnum: %v", v)
	}
}

type EntityCorporationBeneficialOwnersElement struct {
	// This person's role or title within the entity.
	CompanyTitle string `json:"company_title"`
	// Personal details for the beneficial owner.
	Individual EntityCorporationBeneficialOwnersElementIndividual `json:"individual"`
	// Why this person is considered a beneficial owner of the entity.
	Prong EntityCorporationBeneficialOwnersElementProngEnum `json:"prong"`
}

// EntityCorporation - Details of the corporation entity. Will be present if `structure` is equal to `corporation`.
type EntityCorporation struct {
	// The corporation's address.
	Address EntityCorporationAddress `json:"address"`
	// The identifying details of anyone controlling or owning 25% or more of the corporation.
	BeneficialOwners []EntityCorporationBeneficialOwnersElement `json:"beneficial_owners"`
	// The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.
	IncorporationState string `json:"incorporation_state"`
	// The legal name of the corporation.
	Name string `json:"name"`
	// The Employer Identification Number (EIN) for the corporation.
	TaxIdentifier string `json:"tax_identifier"`
	// The website of the corporation.
	Website string `json:"website"`
}

// EntityJointIndividualAddress - The person's address.
type EntityJointIndividualAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// EntityJointIndividualIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type EntityJointIndividualIdentificationMethodEnum string

const (
	EntityJointIndividualIdentificationMethodEnumSocialSecurityNumber                   EntityJointIndividualIdentificationMethodEnum = "social_security_number"
	EntityJointIndividualIdentificationMethodEnumIndividualTaxpayerIdentificationNumber EntityJointIndividualIdentificationMethodEnum = "individual_taxpayer_identification_number"
	EntityJointIndividualIdentificationMethodEnumPassport                               EntityJointIndividualIdentificationMethodEnum = "passport"
	EntityJointIndividualIdentificationMethodEnumDriversLicense                         EntityJointIndividualIdentificationMethodEnum = "drivers_license"
	EntityJointIndividualIdentificationMethodEnumOther                                  EntityJointIndividualIdentificationMethodEnum = "other"
)

func (e EntityJointIndividualIdentificationMethodEnum) ToPointer() *EntityJointIndividualIdentificationMethodEnum {
	return &e
}

func (e *EntityJointIndividualIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = EntityJointIndividualIdentificationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityJointIndividualIdentificationMethodEnum: %v", v)
	}
}

// EntityJointIndividualIdentification - A means of verifying the person's identity.
type EntityJointIndividualIdentification struct {
	// A method that can be used to verify the individual's identity.
	Method EntityJointIndividualIdentificationMethodEnum `json:"method"`
	// The last 4 digits of the identification number that can be used to verify the individual's identity.
	NumberLast4 string `json:"number_last4"`
}

type EntityJointIndividual struct {
	// The person's address.
	Address EntityJointIndividualAddress `json:"address"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification EntityJointIndividualIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// EntityJoint - Details of the joint entity. Will be present if `structure` is equal to `joint`.
type EntityJoint struct {
	// The two individuals that share control of the entity.
	Individuals []EntityJointIndividual `json:"individuals"`
	// The entity's name.
	Name string `json:"name"`
}

// EntityIndividualAddress - The person's address.
type EntityIndividualAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// EntityIndividualIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type EntityIndividualIdentificationMethodEnum string

const (
	EntityIndividualIdentificationMethodEnumSocialSecurityNumber                   EntityIndividualIdentificationMethodEnum = "social_security_number"
	EntityIndividualIdentificationMethodEnumIndividualTaxpayerIdentificationNumber EntityIndividualIdentificationMethodEnum = "individual_taxpayer_identification_number"
	EntityIndividualIdentificationMethodEnumPassport                               EntityIndividualIdentificationMethodEnum = "passport"
	EntityIndividualIdentificationMethodEnumDriversLicense                         EntityIndividualIdentificationMethodEnum = "drivers_license"
	EntityIndividualIdentificationMethodEnumOther                                  EntityIndividualIdentificationMethodEnum = "other"
)

func (e EntityIndividualIdentificationMethodEnum) ToPointer() *EntityIndividualIdentificationMethodEnum {
	return &e
}

func (e *EntityIndividualIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = EntityIndividualIdentificationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityIndividualIdentificationMethodEnum: %v", v)
	}
}

// EntityIndividualIdentification - A means of verifying the person's identity.
type EntityIndividualIdentification struct {
	// A method that can be used to verify the individual's identity.
	Method EntityIndividualIdentificationMethodEnum `json:"method"`
	// The last 4 digits of the identification number that can be used to verify the individual's identity.
	NumberLast4 string `json:"number_last4"`
}

// EntityIndividual - Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.
type EntityIndividual struct {
	// The person's address.
	Address EntityIndividualAddress `json:"address"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification EntityIndividualIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// EntityRelationshipEnum - The relationship between your group and the entity.
type EntityRelationshipEnum string

const (
	EntityRelationshipEnumAffiliated    EntityRelationshipEnum = "affiliated"
	EntityRelationshipEnumInformational EntityRelationshipEnum = "informational"
	EntityRelationshipEnumUnaffiliated  EntityRelationshipEnum = "unaffiliated"
)

func (e EntityRelationshipEnum) ToPointer() *EntityRelationshipEnum {
	return &e
}

func (e *EntityRelationshipEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "affiliated":
		fallthrough
	case "informational":
		fallthrough
	case "unaffiliated":
		*e = EntityRelationshipEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityRelationshipEnum: %v", v)
	}
}

// EntityStructureEnum - The entity's legal structure.
type EntityStructureEnum string

const (
	EntityStructureEnumCorporation   EntityStructureEnum = "corporation"
	EntityStructureEnumNaturalPerson EntityStructureEnum = "natural_person"
	EntityStructureEnumJoint         EntityStructureEnum = "joint"
	EntityStructureEnumTrust         EntityStructureEnum = "trust"
)

func (e EntityStructureEnum) ToPointer() *EntityStructureEnum {
	return &e
}

func (e *EntityStructureEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "corporation":
		fallthrough
	case "natural_person":
		fallthrough
	case "joint":
		fallthrough
	case "trust":
		*e = EntityStructureEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityStructureEnum: %v", v)
	}
}

type EntitySupplementalDocumentsElement struct {
	// The File containing the document.
	FileID string `json:"file_id"`
}

// EntityTrustAddress - The trust's address.
type EntityTrustAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// EntityTrustCategoryEnum - Whether the trust is `revocable` or `irrevocable`.
type EntityTrustCategoryEnum string

const (
	EntityTrustCategoryEnumRevocable   EntityTrustCategoryEnum = "revocable"
	EntityTrustCategoryEnumIrrevocable EntityTrustCategoryEnum = "irrevocable"
)

func (e EntityTrustCategoryEnum) ToPointer() *EntityTrustCategoryEnum {
	return &e
}

func (e *EntityTrustCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "revocable":
		fallthrough
	case "irrevocable":
		*e = EntityTrustCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTrustCategoryEnum: %v", v)
	}
}

// EntityTrustIndividualAddress - The person's address.
type EntityTrustIndividualAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// EntityTrustIndividualIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type EntityTrustIndividualIdentificationMethodEnum string

const (
	EntityTrustIndividualIdentificationMethodEnumSocialSecurityNumber                   EntityTrustIndividualIdentificationMethodEnum = "social_security_number"
	EntityTrustIndividualIdentificationMethodEnumIndividualTaxpayerIdentificationNumber EntityTrustIndividualIdentificationMethodEnum = "individual_taxpayer_identification_number"
	EntityTrustIndividualIdentificationMethodEnumPassport                               EntityTrustIndividualIdentificationMethodEnum = "passport"
	EntityTrustIndividualIdentificationMethodEnumDriversLicense                         EntityTrustIndividualIdentificationMethodEnum = "drivers_license"
	EntityTrustIndividualIdentificationMethodEnumOther                                  EntityTrustIndividualIdentificationMethodEnum = "other"
)

func (e EntityTrustIndividualIdentificationMethodEnum) ToPointer() *EntityTrustIndividualIdentificationMethodEnum {
	return &e
}

func (e *EntityTrustIndividualIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = EntityTrustIndividualIdentificationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTrustIndividualIdentificationMethodEnum: %v", v)
	}
}

// EntityTrustIndividualIdentification - A means of verifying the person's identity.
type EntityTrustIndividualIdentification struct {
	// A method that can be used to verify the individual's identity.
	Method EntityTrustIndividualIdentificationMethodEnum `json:"method"`
	// The last 4 digits of the identification number that can be used to verify the individual's identity.
	NumberLast4 string `json:"number_last4"`
}

// EntityTrustIndividual - The grantor of the trust. Will be present if the `category` is `revocable`.
type EntityTrustIndividual struct {
	// The person's address.
	Address EntityTrustIndividualAddress `json:"address"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification EntityTrustIndividualIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// EntityTrustTrusteesElementIndividualAddress - The person's address.
type EntityTrustTrusteesElementIndividualAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state of the address.
	State string `json:"state"`
	// The ZIP code of the address.
	Zip string `json:"zip"`
}

// EntityTrustTrusteesElementIndividualIdentificationMethodEnum - A method that can be used to verify the individual's identity.
type EntityTrustTrusteesElementIndividualIdentificationMethodEnum string

const (
	EntityTrustTrusteesElementIndividualIdentificationMethodEnumSocialSecurityNumber                   EntityTrustTrusteesElementIndividualIdentificationMethodEnum = "social_security_number"
	EntityTrustTrusteesElementIndividualIdentificationMethodEnumIndividualTaxpayerIdentificationNumber EntityTrustTrusteesElementIndividualIdentificationMethodEnum = "individual_taxpayer_identification_number"
	EntityTrustTrusteesElementIndividualIdentificationMethodEnumPassport                               EntityTrustTrusteesElementIndividualIdentificationMethodEnum = "passport"
	EntityTrustTrusteesElementIndividualIdentificationMethodEnumDriversLicense                         EntityTrustTrusteesElementIndividualIdentificationMethodEnum = "drivers_license"
	EntityTrustTrusteesElementIndividualIdentificationMethodEnumOther                                  EntityTrustTrusteesElementIndividualIdentificationMethodEnum = "other"
)

func (e EntityTrustTrusteesElementIndividualIdentificationMethodEnum) ToPointer() *EntityTrustTrusteesElementIndividualIdentificationMethodEnum {
	return &e
}

func (e *EntityTrustTrusteesElementIndividualIdentificationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "social_security_number":
		fallthrough
	case "individual_taxpayer_identification_number":
		fallthrough
	case "passport":
		fallthrough
	case "drivers_license":
		fallthrough
	case "other":
		*e = EntityTrustTrusteesElementIndividualIdentificationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTrustTrusteesElementIndividualIdentificationMethodEnum: %v", v)
	}
}

// EntityTrustTrusteesElementIndividualIdentification - A means of verifying the person's identity.
type EntityTrustTrusteesElementIndividualIdentification struct {
	// A method that can be used to verify the individual's identity.
	Method EntityTrustTrusteesElementIndividualIdentificationMethodEnum `json:"method"`
	// The last 4 digits of the identification number that can be used to verify the individual's identity.
	NumberLast4 string `json:"number_last4"`
}

// EntityTrustTrusteesElementIndividual - The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.
type EntityTrustTrusteesElementIndividual struct {
	// The person's address.
	Address EntityTrustTrusteesElementIndividualAddress `json:"address"`
	// The person's date of birth in YYYY-MM-DD format.
	DateOfBirth types.Date `json:"date_of_birth"`
	// A means of verifying the person's identity.
	Identification EntityTrustTrusteesElementIndividualIdentification `json:"identification"`
	// The person's legal name.
	Name string `json:"name"`
}

// EntityTrustTrusteesElementStructureEnum - The structure of the trustee. Will always be equal to `individual`.
type EntityTrustTrusteesElementStructureEnum string

const (
	EntityTrustTrusteesElementStructureEnumIndividual EntityTrustTrusteesElementStructureEnum = "individual"
)

func (e EntityTrustTrusteesElementStructureEnum) ToPointer() *EntityTrustTrusteesElementStructureEnum {
	return &e
}

func (e *EntityTrustTrusteesElementStructureEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "individual":
		*e = EntityTrustTrusteesElementStructureEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTrustTrusteesElementStructureEnum: %v", v)
	}
}

type EntityTrustTrusteesElement struct {
	// The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.
	Individual EntityTrustTrusteesElementIndividual `json:"individual"`
	// The structure of the trustee. Will always be equal to `individual`.
	Structure EntityTrustTrusteesElementStructureEnum `json:"structure"`
}

// EntityTrust - Details of the trust entity. Will be present if `structure` is equal to `trust`.
type EntityTrust struct {
	// The trust's address.
	Address EntityTrustAddress `json:"address"`
	// Whether the trust is `revocable` or `irrevocable`.
	Category EntityTrustCategoryEnum `json:"category"`
	// The ID for the File containing the formation document of the trust.
	FormationDocumentFileID string `json:"formation_document_file_id"`
	// The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.
	FormationState string `json:"formation_state"`
	// The grantor of the trust. Will be present if the `category` is `revocable`.
	Grantor EntityTrustIndividual `json:"grantor"`
	// The trust's name
	Name string `json:"name"`
	// The Employer Identification Number (EIN) of the trust itself.
	TaxIdentifier string `json:"tax_identifier"`
	// The trustees of the trust.
	Trustees []EntityTrustTrusteesElement `json:"trustees"`
}

// EntityTypeEnum - A constant representing the object's type. For this resource it will always be `entity`.
type EntityTypeEnum string

const (
	EntityTypeEnumEntity EntityTypeEnum = "entity"
)

func (e EntityTypeEnum) ToPointer() *EntityTypeEnum {
	return &e
}

func (e *EntityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "entity":
		*e = EntityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTypeEnum: %v", v)
	}
}

// Entity - Entities are the legal entities that own accounts. They can be people, corporations, partnerships, or trusts.
type Entity struct {
	// Details of the corporation entity. Will be present if `structure` is equal to `corporation`.
	Corporation EntityCorporation `json:"corporation"`
	// The entity's description for display purposes.
	Description string `json:"description"`
	// The entity's identifier.
	ID string `json:"id"`
	// Details of the joint entity. Will be present if `structure` is equal to `joint`.
	Joint EntityJoint `json:"joint"`
	// Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.
	NaturalPerson EntityIndividual `json:"natural_person"`
	// The relationship between your group and the entity.
	Relationship EntityRelationshipEnum `json:"relationship"`
	// The entity's legal structure.
	Structure EntityStructureEnum `json:"structure"`
	// Additional documentation associated with the entity.
	SupplementalDocuments []EntitySupplementalDocumentsElement `json:"supplemental_documents"`
	// Details of the trust entity. Will be present if `structure` is equal to `trust`.
	Trust EntityTrust `json:"trust"`
	// A constant representing the object's type. For this resource it will always be `entity`.
	Type EntityTypeEnum `json:"type"`
}
