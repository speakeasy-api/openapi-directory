// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateActionXAmzTargetEnum
type CreateActionXAmzTargetEnum string

const (
	CreateActionXAmzTargetEnumSageMakerCreateAction CreateActionXAmzTargetEnum = "SageMaker.CreateAction"
)

func (e CreateActionXAmzTargetEnum) ToPointer() *CreateActionXAmzTargetEnum {
	return &e
}

func (e *CreateActionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.CreateAction":
		*e = CreateActionXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateActionXAmzTargetEnum: %v", v)
	}
}

type CreateActionRequest struct {
	CreateActionRequest shared.CreateActionRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          CreateActionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateActionResponse struct {
	ContentType string
	// Success
	CreateActionResponse *shared.CreateActionResponse
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
	StatusCode            int
	RawResponse           *http.Response
}
