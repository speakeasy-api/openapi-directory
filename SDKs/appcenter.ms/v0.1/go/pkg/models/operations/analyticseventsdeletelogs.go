// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AnalyticsEventsDeleteLogsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsEventsDeleteLogsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the event.
	EventName string `pathParam:"style=simple,explode=false,name=event_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsEventsDeleteLogsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsEventsDeleteLogsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsEventsDeleteLogsDefaultApplicationJSON - Error
type AnalyticsEventsDeleteLogsDefaultApplicationJSON struct {
	Error *AnalyticsEventsDeleteLogsDefaultApplicationJSONError `json:"error,omitempty"`
}

type AnalyticsEventsDeleteLogsResponse struct {
	// Error code with reason.
	AnalyticsEventsDeleteLogsDefaultApplicationJSONObject *AnalyticsEventsDeleteLogsDefaultApplicationJSON
	ContentType                                           string
	StatusCode                                            int
	RawResponse                                           *http.Response
}
