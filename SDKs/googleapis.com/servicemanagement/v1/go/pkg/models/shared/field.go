// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FieldCardinalityEnum - The field cardinality.
type FieldCardinalityEnum string

const (
	FieldCardinalityEnumCardinalityUnknown  FieldCardinalityEnum = "CARDINALITY_UNKNOWN"
	FieldCardinalityEnumCardinalityOptional FieldCardinalityEnum = "CARDINALITY_OPTIONAL"
	FieldCardinalityEnumCardinalityRequired FieldCardinalityEnum = "CARDINALITY_REQUIRED"
	FieldCardinalityEnumCardinalityRepeated FieldCardinalityEnum = "CARDINALITY_REPEATED"
)

func (e FieldCardinalityEnum) ToPointer() *FieldCardinalityEnum {
	return &e
}

func (e *FieldCardinalityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CARDINALITY_UNKNOWN":
		fallthrough
	case "CARDINALITY_OPTIONAL":
		fallthrough
	case "CARDINALITY_REQUIRED":
		fallthrough
	case "CARDINALITY_REPEATED":
		*e = FieldCardinalityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldCardinalityEnum: %v", v)
	}
}

// FieldKindEnum - The field type.
type FieldKindEnum string

const (
	FieldKindEnumTypeUnknown  FieldKindEnum = "TYPE_UNKNOWN"
	FieldKindEnumTypeDouble   FieldKindEnum = "TYPE_DOUBLE"
	FieldKindEnumTypeFloat    FieldKindEnum = "TYPE_FLOAT"
	FieldKindEnumTypeInt64    FieldKindEnum = "TYPE_INT64"
	FieldKindEnumTypeUint64   FieldKindEnum = "TYPE_UINT64"
	FieldKindEnumTypeInt32    FieldKindEnum = "TYPE_INT32"
	FieldKindEnumTypeFixed64  FieldKindEnum = "TYPE_FIXED64"
	FieldKindEnumTypeFixed32  FieldKindEnum = "TYPE_FIXED32"
	FieldKindEnumTypeBool     FieldKindEnum = "TYPE_BOOL"
	FieldKindEnumTypeString   FieldKindEnum = "TYPE_STRING"
	FieldKindEnumTypeGroup    FieldKindEnum = "TYPE_GROUP"
	FieldKindEnumTypeMessage  FieldKindEnum = "TYPE_MESSAGE"
	FieldKindEnumTypeBytes    FieldKindEnum = "TYPE_BYTES"
	FieldKindEnumTypeUint32   FieldKindEnum = "TYPE_UINT32"
	FieldKindEnumTypeEnum     FieldKindEnum = "TYPE_ENUM"
	FieldKindEnumTypeSfixed32 FieldKindEnum = "TYPE_SFIXED32"
	FieldKindEnumTypeSfixed64 FieldKindEnum = "TYPE_SFIXED64"
	FieldKindEnumTypeSint32   FieldKindEnum = "TYPE_SINT32"
	FieldKindEnumTypeSint64   FieldKindEnum = "TYPE_SINT64"
)

func (e FieldKindEnum) ToPointer() *FieldKindEnum {
	return &e
}

func (e *FieldKindEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNKNOWN":
		fallthrough
	case "TYPE_DOUBLE":
		fallthrough
	case "TYPE_FLOAT":
		fallthrough
	case "TYPE_INT64":
		fallthrough
	case "TYPE_UINT64":
		fallthrough
	case "TYPE_INT32":
		fallthrough
	case "TYPE_FIXED64":
		fallthrough
	case "TYPE_FIXED32":
		fallthrough
	case "TYPE_BOOL":
		fallthrough
	case "TYPE_STRING":
		fallthrough
	case "TYPE_GROUP":
		fallthrough
	case "TYPE_MESSAGE":
		fallthrough
	case "TYPE_BYTES":
		fallthrough
	case "TYPE_UINT32":
		fallthrough
	case "TYPE_ENUM":
		fallthrough
	case "TYPE_SFIXED32":
		fallthrough
	case "TYPE_SFIXED64":
		fallthrough
	case "TYPE_SINT32":
		fallthrough
	case "TYPE_SINT64":
		*e = FieldKindEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FieldKindEnum: %v", v)
	}
}

// Field - A single field of a message type.
type Field struct {
	// The field cardinality.
	Cardinality *FieldCardinalityEnum `json:"cardinality,omitempty"`
	// The string value of the default value of this field. Proto2 syntax only.
	DefaultValue *string `json:"defaultValue,omitempty"`
	// The field JSON name.
	JSONName *string `json:"jsonName,omitempty"`
	// The field type.
	Kind *FieldKindEnum `json:"kind,omitempty"`
	// The field name.
	Name *string `json:"name,omitempty"`
	// The field number.
	Number *int `json:"number,omitempty"`
	// The index of the field type in `Type.oneofs`, for message or enumeration types. The first type has index 1; zero means the type is not in the list.
	OneofIndex *int `json:"oneofIndex,omitempty"`
	// The protocol buffer options.
	Options []Option `json:"options,omitempty"`
	// Whether to use alternative packed wire representation.
	Packed *bool `json:"packed,omitempty"`
	// The field type URL, without the scheme, for message or enumeration types. Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
	TypeURL *string `json:"typeUrl,omitempty"`
}
