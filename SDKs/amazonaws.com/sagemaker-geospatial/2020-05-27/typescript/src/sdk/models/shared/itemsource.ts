/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AssetValue } from "./assetvalue";
import { Geometry } from "./geometry";
import { Properties } from "./properties";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Structure representing the items in the response for SearchRasterDataCollection.
 */
export class ItemSource extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AssetValue })
  @Expose({ name: "Assets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AssetValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AssetValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  assets?: Record<string, AssetValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "DateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Geometry" })
  @Type(() => Geometry)
  geometry: Geometry;

  @SpeakeasyMetadata()
  @Expose({ name: "Id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Properties" })
  @Type(() => Properties)
  properties?: Properties;
}
