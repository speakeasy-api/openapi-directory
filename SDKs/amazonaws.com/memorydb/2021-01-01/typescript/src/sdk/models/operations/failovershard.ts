/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum FailoverShardXAmzTargetEnum {
  AmazonMemoryDBFailoverShard = "AmazonMemoryDB.FailoverShard",
}

export class FailoverShardRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  failoverShardRequest: shared.FailoverShardRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: FailoverShardXAmzTargetEnum;
}

export class FailoverShardResponse extends SpeakeasyBase {
  /**
   * APICallRateForCustomerExceededFault
   */
  @SpeakeasyMetadata()
  apiCallRateForCustomerExceededFault?: any;

  /**
   * ClusterNotFoundFault
   */
  @SpeakeasyMetadata()
  clusterNotFoundFault?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  failoverShardResponse?: shared.FailoverShardResponse;

  /**
   * InvalidClusterStateFault
   */
  @SpeakeasyMetadata()
  invalidClusterStateFault?: any;

  /**
   * InvalidKMSKeyFault
   */
  @SpeakeasyMetadata()
  invalidKMSKeyFault?: any;

  /**
   * InvalidParameterCombinationException
   */
  @SpeakeasyMetadata()
  invalidParameterCombinationException?: any;

  /**
   * InvalidParameterValueException
   */
  @SpeakeasyMetadata()
  invalidParameterValueException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ShardNotFoundFault
   */
  @SpeakeasyMetadata()
  shardNotFoundFault?: any;

  /**
   * TestFailoverNotAvailableFault
   */
  @SpeakeasyMetadata()
  testFailoverNotAvailableFault?: any;
}
