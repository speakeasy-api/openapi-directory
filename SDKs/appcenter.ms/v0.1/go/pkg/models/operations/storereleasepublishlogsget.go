// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StoreReleasePublishLogsGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type StoreReleasePublishLogsGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the realease
	ReleaseID string `pathParam:"style=simple,explode=false,name=release_id"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum string

const (
	StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnumBadRequest          StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum = "BadRequest"
	StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnumConflict            StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum = "Conflict"
	StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnumNotAcceptable       StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnumNotFound            StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum = "NotFound"
	StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnumInternalServerError StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnumUnauthorized        StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnumTooManyRequests     StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum) ToPointer() *StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum {
	return &e
}

func (e *StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum: %v", v)
	}
}

// StoreReleasePublishLogsGetDefaultApplicationJSON - Error
type StoreReleasePublishLogsGetDefaultApplicationJSON struct {
	Code    StoreReleasePublishLogsGetDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                                   `json:"message"`
}

type StoreReleasePublishLogsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	StoreReleasePublishLogsGetDefaultApplicationJSONObject *StoreReleasePublishLogsGetDefaultApplicationJSON
}
