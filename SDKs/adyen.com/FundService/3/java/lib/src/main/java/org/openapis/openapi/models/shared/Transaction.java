/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Transaction {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Amount amount;
    public Transaction withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountDetail")
    public BankAccountDetail bankAccountDetail;
    public Transaction withBankAccountDetail(BankAccountDetail bankAccountDetail) {
        this.bankAccountDetail = bankAccountDetail;
        return this;
    }
    
    /**
     * The merchant reference of a related capture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captureMerchantReference")
    public String captureMerchantReference;
    public Transaction withCaptureMerchantReference(String captureMerchantReference) {
        this.captureMerchantReference = captureMerchantReference;
        return this;
    }
    
    /**
     * The psp reference of a related capture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capturePspReference")
    public String capturePspReference;
    public Transaction withCapturePspReference(String capturePspReference) {
        this.capturePspReference = capturePspReference;
        return this;
    }
    
    /**
     * The date on which the transaction was performed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationDate")
    public OffsetDateTime creationDate;
    public Transaction withCreationDate(OffsetDateTime creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * A description of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Transaction withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The code of the account to which funds were credited during an outgoing fund transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationAccountCode")
    public String destinationAccountCode;
    public Transaction withDestinationAccountCode(String destinationAccountCode) {
        this.destinationAccountCode = destinationAccountCode;
        return this;
    }
    
    /**
     * The psp reference of the related dispute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disputePspReference")
    public String disputePspReference;
    public Transaction withDisputePspReference(String disputePspReference) {
        this.disputePspReference = disputePspReference;
        return this;
    }
    
    /**
     * The reason code of a dispute.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disputeReasonCode")
    public String disputeReasonCode;
    public Transaction withDisputeReasonCode(String disputeReasonCode) {
        this.disputeReasonCode = disputeReasonCode;
        return this;
    }
    
    /**
     * The merchant reference of a transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantReference")
    public String merchantReference;
    public Transaction withMerchantReference(String merchantReference) {
        this.merchantReference = merchantReference;
        return this;
    }
    
    /**
     * The psp reference of the related authorisation or transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentPspReference")
    public String paymentPspReference;
    public Transaction withPaymentPspReference(String paymentPspReference) {
        this.paymentPspReference = paymentPspReference;
        return this;
    }
    
    /**
     * The psp reference of the related payout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutPspReference")
    public String payoutPspReference;
    public Transaction withPayoutPspReference(String payoutPspReference) {
        this.payoutPspReference = payoutPspReference;
        return this;
    }
    
    /**
     * The psp reference of a transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pspReference")
    public String pspReference;
    public Transaction withPspReference(String pspReference) {
        this.pspReference = pspReference;
        return this;
    }
    
    /**
     * The code of the account from which funds were debited during an incoming fund transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAccountCode")
    public String sourceAccountCode;
    public Transaction withSourceAccountCode(String sourceAccountCode) {
        this.sourceAccountCode = sourceAccountCode;
        return this;
    }
    
    /**
     * The status of the transaction.
     * &gt;Permitted values: `PendingCredit`, `CreditFailed`, `CreditClosed`, `CreditSuspended`, `Credited`, `Converted`, `PendingDebit`, `DebitFailed`, `Debited`, `DebitReversedReceived`, `DebitedReversed`, `ChargebackReceived`, `Chargeback`, `ChargebackReversedReceived`, `ChargebackReversed`, `Payout`, `PayoutReversed`, `FundTransfer`, `PendingFundTransfer`, `ManualCorrected`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transactionStatus")
    public TransactionTransactionStatusEnum transactionStatus;
    public Transaction withTransactionStatus(TransactionTransactionStatusEnum transactionStatus) {
        this.transactionStatus = transactionStatus;
        return this;
    }
    
    /**
     * The transfer code of the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferCode")
    public String transferCode;
    public Transaction withTransferCode(String transferCode) {
        this.transferCode = transferCode;
        return this;
    }
    
}
