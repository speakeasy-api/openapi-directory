/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FeedFilter - Object with type and status that will filter feed orders.
 */
public class FeedFilter {
    /**
     * Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disableSingleFire")
    public Boolean disableSingleFire;

    public FeedFilter withDisableSingleFire(Boolean disableSingleFire) {
        this.disableSingleFire = disableSingleFire;
        return this;
    }
    
    /**
     * JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is set to `FromOrders`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expression")
    public String expression;

    public FeedFilter withExpression(String expression) {
        this.expression = expression;
        return this;
    }
    
    /**
     * List of order statuses that should be included in the feed. This should only be used in case `type` is set to `FromWorkflow`. The status event will be removed, if it can't deliver a message more than 100 times, 4 days progressively. 
     * 
     * **Status available to filter** 
     * 
     * - order-created 
     * 
     * - on-order-completed 
     * 
     * - on-order-completed-ffm 
     * 
     * - payment-pending 
     * 
     * - waiting-for-order-authorization 
     * 
     * - approve-payment 
     * 
     * - payment-approved 
     * 
     * - request-cancel 
     * 
     * - waiting-for-seller-decision 
     * 
     * - waiting-ffmt-authorization 
     * 
     * - waiting-for-authorization 
     * 
     * - waiting-for-manual-authorization 
     * 
     * - authorize-fulfillment 
     * 
     * - order-create-error 
     * 
     * - order-creation-error 
     * 
     * - window-to-cancel 
     * 
     * - window-to-change-seller 
     * 
     * - waiting-for-mkt-authorization 
     * 
     * - waiting-seller-handling 
     * 
     * - ready-for-handling 
     * 
     * - start-handling 
     * 
     * - handling 
     * 
     * - invoice-after-cancellation-deny 
     * 
     * - order-accepted 
     * 
     * - invoice 
     * 
     * - invoiced 
     * 
     * - replaced 
     * 
     * - cancellation-requested 
     * 
     * - cancel 
     * 
     * - canceled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String[] status;

    public FeedFilter withStatus(String[] status) {
        this.status = status;
        return this;
    }
    
    /**
     * Determines what orders appear in the feed and how they are filtered. There are two possible values:
     * 
     * -`FromWorkflow`: the feed will receive order updates only when orderâ€™s statuses change and orders can be filtered by status, using the `status` field described below.
     * 
     * -`FromOrders`: the feed gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field described below.
     */
    @JsonProperty("type")
    public String type;

    public FeedFilter withType(String type) {
        this.type = type;
        return this;
    }
    
    public FeedFilter(@JsonProperty("type") String type) {
        this.type = type;
  }
}
