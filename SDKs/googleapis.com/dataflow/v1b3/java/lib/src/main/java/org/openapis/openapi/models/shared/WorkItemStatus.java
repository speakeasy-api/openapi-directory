/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * WorkItemStatus - Conveys a worker's progress through the work described by a WorkItem.
 */
public class WorkItemStatus {
    /**
     * True if the WorkItem was completed (successfully or unsuccessfully).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed")
    public Boolean completed;

    public WorkItemStatus withCompleted(Boolean completed) {
        this.completed = completed;
        return this;
    }
    
    /**
     * Worker output counters for this WorkItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counterUpdates")
    public CounterUpdate[] counterUpdates;

    public WorkItemStatus withCounterUpdates(CounterUpdate[] counterUpdates) {
        this.counterUpdates = counterUpdates;
        return this;
    }
    
    /**
     * When a task splits using WorkItemStatus.dynamic_source_split, this message describes the two parts of the split relative to the description of the current task's input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamicSourceSplit")
    public DynamicSourceSplit dynamicSourceSplit;

    public WorkItemStatus withDynamicSourceSplit(DynamicSourceSplit dynamicSourceSplit) {
        this.dynamicSourceSplit = dynamicSourceSplit;
        return this;
    }
    
    /**
     * Specifies errors which occurred during processing. If errors are provided, and completed = true, then the WorkItem is considered to have failed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public Status[] errors;

    public WorkItemStatus withErrors(Status[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * DEPRECATED in favor of counter_updates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricUpdates")
    public MetricUpdate[] metricUpdates;

    public WorkItemStatus withMetricUpdates(MetricUpdate[] metricUpdates) {
        this.metricUpdates = metricUpdates;
        return this;
    }
    
    /**
     * Obsolete in favor of ApproximateReportedProgress and ApproximateSplitRequest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progress")
    public ApproximateProgress progress;

    public WorkItemStatus withProgress(ApproximateProgress progress) {
        this.progress = progress;
        return this;
    }
    
    /**
     * The report index. When a WorkItem is leased, the lease will contain an initial report index. When a WorkItem's status is reported to the system, the report should be sent with that report index, and the response will contain the index the worker should use for the next report. Reports received with unexpected index values will be rejected by the service. In order to preserve idempotency, the worker should not alter the contents of a report, even if the worker must submit the same report multiple times before getting back a response. The worker should not submit a subsequent report until the response for the previous report had been received from the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportIndex")
    public String reportIndex;

    public WorkItemStatus withReportIndex(String reportIndex) {
        this.reportIndex = reportIndex;
        return this;
    }
    
    /**
     * A progress measurement of a WorkItem by a worker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reportedProgress")
    public ApproximateReportedProgress reportedProgress;

    public WorkItemStatus withReportedProgress(ApproximateReportedProgress reportedProgress) {
        this.reportedProgress = reportedProgress;
        return this;
    }
    
    /**
     * Amount of time the worker requests for its lease.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedLeaseDuration")
    public String requestedLeaseDuration;

    public WorkItemStatus withRequestedLeaseDuration(String requestedLeaseDuration) {
        this.requestedLeaseDuration = requestedLeaseDuration;
        return this;
    }
    
    /**
     * DEPRECATED in favor of DynamicSourceSplit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceFork")
    public SourceFork sourceFork;

    public WorkItemStatus withSourceFork(SourceFork sourceFork) {
        this.sourceFork = sourceFork;
        return this;
    }
    
    /**
     * The result of a SourceOperationRequest, specified in ReportWorkItemStatusRequest.source_operation when the work item is completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceOperationResponse")
    public SourceOperationResponse sourceOperationResponse;

    public WorkItemStatus withSourceOperationResponse(SourceOperationResponse sourceOperationResponse) {
        this.sourceOperationResponse = sourceOperationResponse;
        return this;
    }
    
    /**
     * Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stopPosition")
    public Position stopPosition;

    public WorkItemStatus withStopPosition(Position stopPosition) {
        this.stopPosition = stopPosition;
        return this;
    }
    
    /**
     * Total time the worker spent being throttled by external systems.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalThrottlerWaitTimeSeconds")
    public Double totalThrottlerWaitTimeSeconds;

    public WorkItemStatus withTotalThrottlerWaitTimeSeconds(Double totalThrottlerWaitTimeSeconds) {
        this.totalThrottlerWaitTimeSeconds = totalThrottlerWaitTimeSeconds;
        return this;
    }
    
    /**
     * Identifies the WorkItem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workItemId")
    public String workItemId;

    public WorkItemStatus withWorkItemId(String workItemId) {
        this.workItemId = workItemId;
        return this;
    }
    
    public WorkItemStatus(){}
}
