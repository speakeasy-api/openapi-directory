// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ScimEnterpriseGroupResponseMembers struct {
	DollarRef *string `json:"$ref,omitempty"`
	Display   *string `json:"display,omitempty"`
	Value     *string `json:"value,omitempty"`
}

type ScimEnterpriseGroupResponseSchemasEnum string

const (
	ScimEnterpriseGroupResponseSchemasEnumUrnIetfParamsScimSchemasCore20Group        ScimEnterpriseGroupResponseSchemasEnum = "urn:ietf:params:scim:schemas:core:2.0:Group"
	ScimEnterpriseGroupResponseSchemasEnumUrnIetfParamsScimAPIMessages20ListResponse ScimEnterpriseGroupResponseSchemasEnum = "urn:ietf:params:scim:api:messages:2.0:ListResponse"
)

func (e ScimEnterpriseGroupResponseSchemasEnum) ToPointer() *ScimEnterpriseGroupResponseSchemasEnum {
	return &e
}

func (e *ScimEnterpriseGroupResponseSchemasEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "urn:ietf:params:scim:schemas:core:2.0:Group":
		fallthrough
	case "urn:ietf:params:scim:api:messages:2.0:ListResponse":
		*e = ScimEnterpriseGroupResponseSchemasEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScimEnterpriseGroupResponseSchemasEnum: %v", v)
	}
}

// ScimEnterpriseGroupResponse - Group has been created
type ScimEnterpriseGroupResponse struct {
	// A human-readable name for a security group.
	DisplayName *string `json:"displayName,omitempty"`
	// A unique identifier for the resource as defined by the provisioning client.
	ExternalID *string `json:"externalId,omitempty"`
	// The internally generated id for the group object.
	ID *string `json:"id,omitempty"`
	// The security group members.
	Members []ScimEnterpriseGroupResponseMembers `json:"members,omitempty"`
	// The metadata associated with the creation/updates to the user.
	Meta *Meta `json:"meta,omitempty"`
	// The URIs that are used to indicate the namespaces of the SCIM schemas.
	Schemas []ScimEnterpriseGroupResponseSchemasEnum `json:"schemas"`
}
