"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class SendchatbotSecurity:
    
    client_credentials: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendchatbotApplicationJSON:
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""Account ID of the authorized account."""  
    content: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""JSON template describing how the message should be displayed for the user. For more information please see our [\\"Send Message\\" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request)."""  
    robot_jid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robot_jid') }})
    r"""Robot JID created when enabling chatbot features on your marketplace app."""  
    to_jid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to_jid') }})
    r"""Unique JID of reciever. Can be a group or user."""  
    is_markdown_support: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_markdown_support'), 'exclude': lambda f: f is None }})
    r"""**Optional**<br>
    Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
    """  
    user_jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_jid'), 'exclude': lambda f: f is None }})
    r"""**Optional**<br>
    The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
    """  
    visible_to_user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible_to_user'), 'exclude': lambda f: f is None }})
    r"""**Optional**<br>Allow a Chatbot to send a message to a group channel, but have only one designated person in that group channel see the message by providing the person's UserID in this field."""  
    

@dataclasses.dataclass
class SendchatbotResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    