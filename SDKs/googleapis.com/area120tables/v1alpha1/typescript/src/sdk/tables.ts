/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Tables {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists tables for the user.
   */
  area120tablesTablesList(
    req: operations.Area120tablesTablesListRequest,
    security: operations.Area120tablesTablesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1alpha1/tables";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesListResponse =
        new operations.Area120tablesTablesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listTablesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListTablesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates multiple rows.
   */
  area120tablesTablesRowsBatchCreate(
    req: operations.Area120tablesTablesRowsBatchCreateRequest,
    security: operations.Area120tablesTablesRowsBatchCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesRowsBatchCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesRowsBatchCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/rows:batchCreate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchCreateRowsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesRowsBatchCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesRowsBatchCreateResponse =
        new operations.Area120tablesTablesRowsBatchCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchCreateRowsResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchCreateRowsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes multiple rows.
   */
  area120tablesTablesRowsBatchDelete(
    req: operations.Area120tablesTablesRowsBatchDeleteRequest,
    security: operations.Area120tablesTablesRowsBatchDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesRowsBatchDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesRowsBatchDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/rows:batchDelete",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchDeleteRowsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesRowsBatchDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesRowsBatchDeleteResponse =
        new operations.Area120tablesTablesRowsBatchDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates multiple rows.
   */
  area120tablesTablesRowsBatchUpdate(
    req: operations.Area120tablesTablesRowsBatchUpdateRequest,
    security: operations.Area120tablesTablesRowsBatchUpdateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesRowsBatchUpdateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesRowsBatchUpdateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/rows:batchUpdate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchUpdateRowsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesRowsBatchUpdateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesRowsBatchUpdateResponse =
        new operations.Area120tablesTablesRowsBatchUpdateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchUpdateRowsResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchUpdateRowsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a row.
   */
  area120tablesTablesRowsCreate(
    req: operations.Area120tablesTablesRowsCreateRequest,
    security: operations.Area120tablesTablesRowsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesRowsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesRowsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/rows",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "row",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesRowsCreateSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesRowsCreateResponse =
        new operations.Area120tablesTablesRowsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.row = utils.objectToClass(httpRes?.data, shared.Row);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a row.
   */
  area120tablesTablesRowsDelete(
    req: operations.Area120tablesTablesRowsDeleteRequest,
    security: operations.Area120tablesTablesRowsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesRowsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesRowsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesRowsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesRowsDeleteResponse =
        new operations.Area120tablesTablesRowsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists rows in a table. Returns NOT_FOUND if the table does not exist.
   */
  area120tablesTablesRowsList(
    req: operations.Area120tablesTablesRowsListRequest,
    security: operations.Area120tablesTablesRowsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesRowsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesRowsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha1/{parent}/rows",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesRowsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesRowsListResponse =
        new operations.Area120tablesTablesRowsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRowsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListRowsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a row.
   */
  area120tablesTablesRowsPatch(
    req: operations.Area120tablesTablesRowsPatchRequest,
    security: operations.Area120tablesTablesRowsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.Area120tablesTablesRowsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.Area120tablesTablesRowsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "row",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.Area120tablesTablesRowsPatchSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.Area120tablesTablesRowsPatchResponse =
        new operations.Area120tablesTablesRowsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.row = utils.objectToClass(httpRes?.data, shared.Row);
          }
          break;
      }

      return res;
    });
  }
}
