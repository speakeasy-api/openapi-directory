/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class MotorcycleSearch {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Motorcycle listing by id
   *
   * @remarks
   * Get a particular Motorcycle listing by its id
   */
  getListingMotorcycleId(
    req: operations.GetListingMotorcycleIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingMotorcycleIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingMotorcycleIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/motorcycle/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingMotorcycleIdResponse =
        new operations.GetListingMotorcycleIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.motorcycleListing = utils.objectToClass(
              httpRes?.data,
              shared.MotorcycleListing
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Long text Motorcycle Listings attributes for Listing with the given id
   *
   * @remarks
   * Get Motorcycle listing options, features, seller comments
   */
  getListingMotorcycleIdExtra(
    req: operations.GetListingMotorcycleIdExtraRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingMotorcycleIdExtraResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingMotorcycleIdExtraRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/motorcycle/{id}/extra",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingMotorcycleIdExtraResponse =
        new operations.GetListingMotorcycleIdExtraResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingExtraAttributes = utils.objectToClass(
              httpRes?.data,
              shared.ListingExtraAttributes
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Motorcycle listing media by id
   *
   * @remarks
   * Get Motorcycle listing media (photo, photos) by id
   */
  getListingMotorcycleIdMedia(
    req: operations.GetListingMotorcycleIdMediaRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetListingMotorcycleIdMediaResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetListingMotorcycleIdMediaRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/listing/motorcycle/{id}/media",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetListingMotorcycleIdMediaResponse =
        new operations.GetListingMotorcycleIdMediaResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listingMedia = utils.objectToClass(
              httpRes?.data,
              shared.ListingMedia
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets active motorcycle listings for the given search criteria
   *
   * @remarks
   * This endpoint provides search on motorcycle inventory. This API produces a list of currently active motorcycles from the market for the given search criteria. The API results are limited to allow pagination upto 5000 rows.
   *  The search API facilitates the following use cases -
   * 1. Search motorcycles around a given geo-point within a given radius
   * 2. Search motorcycles for a specific year / make / model or combination of these
   * 3. Search motorcycles matching multiple year, make, model combinatins in the same search request
   * 4. Filter results by most motorcycle specification attributes
   * 5. Search for similar motorcycles by VIN or Taxonomy VIN
   * 6. Filter motorcycles within a given price / miles range
   * 7. Specify a sort order for the results on price / miles / listed date
   * 8. Search motorcycles for a given City / State combination
   * 9. Get Facets to build the search drill downs
   * 10. Get Market averages for price/miles for your search
   */
  getSearchMotorcycleActive(
    req: operations.GetSearchMotorcycleActiveRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchMotorcycleActiveResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchMotorcycleActiveRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/search/motorcycle/active";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchMotorcycleActiveResponse =
        new operations.GetSearchMotorcycleActiveResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.motorcycleSearchResponse = utils.objectToClass(
              httpRes?.data,
              shared.MotorcycleSearchResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * API for auto-completion of inputs
   *
   * @remarks
   * Auto-complete the inputs of your end users
   */
  getSearchMotorcycleAutoComplete(
    req: operations.GetSearchMotorcycleAutoCompleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSearchMotorcycleAutoCompleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSearchMotorcycleAutoCompleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/search/motorcycle/auto-complete";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSearchMotorcycleAutoCompleteResponse =
        new operations.GetSearchMotorcycleAutoCompleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchAutoCompleteResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchAutoCompleteResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
