// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EntityTypeEnum string

const (
	EntityTypeEnumKey                 EntityTypeEnum = "KEY"
	EntityTypeEnumValue               EntityTypeEnum = "VALUE"
	EntityTypeEnumColumnHeader        EntityTypeEnum = "COLUMN_HEADER"
	EntityTypeEnumTableTitle          EntityTypeEnum = "TABLE_TITLE"
	EntityTypeEnumTableFooter         EntityTypeEnum = "TABLE_FOOTER"
	EntityTypeEnumTableSectionTitle   EntityTypeEnum = "TABLE_SECTION_TITLE"
	EntityTypeEnumTableSummary        EntityTypeEnum = "TABLE_SUMMARY"
	EntityTypeEnumStructuredTable     EntityTypeEnum = "STRUCTURED_TABLE"
	EntityTypeEnumSemiStructuredTable EntityTypeEnum = "SEMI_STRUCTURED_TABLE"
)

func (e EntityTypeEnum) ToPointer() *EntityTypeEnum {
	return &e
}

func (e *EntityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "KEY":
		fallthrough
	case "VALUE":
		fallthrough
	case "COLUMN_HEADER":
		fallthrough
	case "TABLE_TITLE":
		fallthrough
	case "TABLE_FOOTER":
		fallthrough
	case "TABLE_SECTION_TITLE":
		fallthrough
	case "TABLE_SUMMARY":
		fallthrough
	case "STRUCTURED_TABLE":
		fallthrough
	case "SEMI_STRUCTURED_TABLE":
		*e = EntityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityTypeEnum: %v", v)
	}
}
