"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NAWelcomeCameraLightModeStatusEnum(str, Enum):
    r"""State of (flood-)light"""
    ON = 'on'
    OFF = 'off'
    AUTO = 'auto'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAWelcomeCamera:
    
    alim_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alim_status'), 'exclude': lambda f: f is None }})
    r"""If power supply is ok (on/off)"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the camera"""  
    is_local: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_local'), 'exclude': lambda f: f is None }})
    r"""Only for scope access_camera. If Camera and application requesting the information are on the same IP (true/false)"""  
    light_mode_status: Optional[NAWelcomeCameraLightModeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('light_mode_status'), 'exclude': lambda f: f is None }})
    r"""State of (flood-)light"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the camera"""  
    sd_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sd_status'), 'exclude': lambda f: f is None }})
    r"""If SD card status is ok (on/off)"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""If camera is monitoring (on/off)"""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the camera"""  
    vpn_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpn_url'), 'exclude': lambda f: f is None }})
    r"""Only for scope access_camera. Address of the camera"""  
    