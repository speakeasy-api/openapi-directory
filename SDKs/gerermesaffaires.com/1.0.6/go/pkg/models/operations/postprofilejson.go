// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostProfileJSONSecurity struct {
	GmaAuth shared.SchemeGmaAuth `security:"scheme,type=oauth2"`
}

type PostProfileApplicationJSONBirth struct {
	City    *string `json:"City,omitempty"`
	Country *string `json:"Country,omitempty"`
	Date    *string `json:"Date,omitempty"`
	ZipCode *string `json:"ZipCode,omitempty"`
}

type PostProfileApplicationJSONIDFile struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostProfileApplicationJSONSexEnum string

const (
	PostProfileApplicationJSONSexEnumMale   PostProfileApplicationJSONSexEnum = "male"
	PostProfileApplicationJSONSexEnumFemale PostProfileApplicationJSONSexEnum = "female"
)

func (e *PostProfileApplicationJSONSexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		*e = PostProfileApplicationJSONSexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostProfileApplicationJSONSexEnum: %s", s)
	}
}

// PostProfileApplicationJSON - Profile to add
type PostProfileApplicationJSON struct {
	Birth     PostProfileApplicationJSONBirth   `json:"Birth"`
	BirthName string                            `json:"BirthName"`
	Email     string                            `json:"Email"`
	FirstName string                            `json:"FirstName"`
	IDFile    *PostProfileApplicationJSONIDFile `json:"IDFile,omitempty"`
	Name      string                            `json:"Name"`
	Sex       PostProfileApplicationJSONSexEnum `json:"Sex"`
}

type PostProfileJSONRequest struct {
	// Profile to add
	Request  PostProfileApplicationJSON `request:"mediaType=application/json"`
	Security PostProfileJSONSecurity
}

type PostProfileJSONResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
