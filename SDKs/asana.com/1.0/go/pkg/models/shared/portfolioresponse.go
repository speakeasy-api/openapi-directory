// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// PortfolioResponseColorEnum - Color of the portfolio.
type PortfolioResponseColorEnum string

const (
	PortfolioResponseColorEnumDarkPink      PortfolioResponseColorEnum = "dark-pink"
	PortfolioResponseColorEnumDarkGreen     PortfolioResponseColorEnum = "dark-green"
	PortfolioResponseColorEnumDarkBlue      PortfolioResponseColorEnum = "dark-blue"
	PortfolioResponseColorEnumDarkRed       PortfolioResponseColorEnum = "dark-red"
	PortfolioResponseColorEnumDarkTeal      PortfolioResponseColorEnum = "dark-teal"
	PortfolioResponseColorEnumDarkBrown     PortfolioResponseColorEnum = "dark-brown"
	PortfolioResponseColorEnumDarkOrange    PortfolioResponseColorEnum = "dark-orange"
	PortfolioResponseColorEnumDarkPurple    PortfolioResponseColorEnum = "dark-purple"
	PortfolioResponseColorEnumDarkWarmGray  PortfolioResponseColorEnum = "dark-warm-gray"
	PortfolioResponseColorEnumLightPink     PortfolioResponseColorEnum = "light-pink"
	PortfolioResponseColorEnumLightGreen    PortfolioResponseColorEnum = "light-green"
	PortfolioResponseColorEnumLightBlue     PortfolioResponseColorEnum = "light-blue"
	PortfolioResponseColorEnumLightRed      PortfolioResponseColorEnum = "light-red"
	PortfolioResponseColorEnumLightTeal     PortfolioResponseColorEnum = "light-teal"
	PortfolioResponseColorEnumLightBrown    PortfolioResponseColorEnum = "light-brown"
	PortfolioResponseColorEnumLightOrange   PortfolioResponseColorEnum = "light-orange"
	PortfolioResponseColorEnumLightPurple   PortfolioResponseColorEnum = "light-purple"
	PortfolioResponseColorEnumLightWarmGray PortfolioResponseColorEnum = "light-warm-gray"
)

func (e *PortfolioResponseColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dark-pink":
		fallthrough
	case "dark-green":
		fallthrough
	case "dark-blue":
		fallthrough
	case "dark-red":
		fallthrough
	case "dark-teal":
		fallthrough
	case "dark-brown":
		fallthrough
	case "dark-orange":
		fallthrough
	case "dark-purple":
		fallthrough
	case "dark-warm-gray":
		fallthrough
	case "light-pink":
		fallthrough
	case "light-green":
		fallthrough
	case "light-blue":
		fallthrough
	case "light-red":
		fallthrough
	case "light-teal":
		fallthrough
	case "light-brown":
		fallthrough
	case "light-orange":
		fallthrough
	case "light-purple":
		fallthrough
	case "light-warm-gray":
		*e = PortfolioResponseColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PortfolioResponseColorEnum: %s", s)
	}
}

// PortfolioResponseWorkspace - A *workspace* is the highest-level organizational unit in Asana. All projects and tasks have an associated workspace.
type PortfolioResponseWorkspace struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The name of the workspace.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// PortfolioResponse - A *portfolio* gives a high-level overview of the status of multiple initiatives in Asana. Portfolios provide a dashboard overview of the state of multiple projects, including a progress report and the most recent [project status](/docs/asana-project-statuses) update.
// Portfolios have some restrictions on size. Each portfolio has a max of 250 items and, like projects, a max of 20 custom fields.
type PortfolioResponse struct {
	// Color of the portfolio.
	Color *PortfolioResponseColorEnum `json:"color,omitempty"`
	// The time at which this resource was created.
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	CreatedBy *UserCompact `json:"created_by,omitempty"`
	// Array of custom field settings applied to the portfolio.
	CustomFieldSettings []CustomFieldSettingResponse `json:"custom_field_settings,omitempty"`
	// The localized day on which this portfolio is due. This takes a date with format YYYY-MM-DD.
	DueOn *time.Time `json:"due_on,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid     *string       `json:"gid,omitempty"`
	Members []UserCompact `json:"members,omitempty"`
	// The name of the portfolio.
	Name  *string      `json:"name,omitempty"`
	Owner *UserCompact `json:"owner,omitempty"`
	// A url that points directly to the object within Asana.
	PermalinkURL *string `json:"permalink_url,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
	// The day on which work for this portfolio begins, or null if the portfolio has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, start_on and due_on cannot be the same date.*
	StartOn   *types.Date                 `json:"start_on,omitempty"`
	Workspace *PortfolioResponseWorkspace `json:"workspace,omitempty"`
}
