/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class CreativeAdTechnologyProviders extends SpeakeasyBase {
  /**
   * The detected ad technology provider IDs for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider. If this creative contains provider IDs that are outside of those listed in the `BidRequest.adslot.consented_providers_settings.consented_providers` field on the  Authorized Buyers Real-Time Bidding protocol or the `BidRequest.user.ext.consented_providers_settings.consented_providers` field on the OpenRTB protocol, a bid submitted for a European Economic Area (EEA) user with this creative is not compliant with the GDPR policies as mentioned in the "Third-party Ad Technology Vendors" section of Authorized Buyers Program Guidelines.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detectedProviderIds" })
  detectedProviderIds?: string[];

  /**
   * Whether the creative contains an unidentified ad technology provider. If true, a bid submitted for a European Economic Area (EEA) user with this creative is not compliant with the GDPR policies as mentioned in the "Third-party Ad Technology Vendors" section of Authorized Buyers Program Guidelines.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasUnidentifiedProvider" })
  hasUnidentifiedProvider?: boolean;
}

export class CreativeCorrectionsContexts extends SpeakeasyBase {
  /**
   * Only set when contextType=AUCTION_TYPE. Represents the auction types this correction applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auctionType" })
  auctionType?: string[];

  /**
   * The type of context (e.g., location, platform, auction type, SSL-ness).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contextType" })
  contextType?: string;

  /**
   * Only set when contextType=LOCATION. Represents the geo criterias this correction applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geoCriteriaId" })
  geoCriteriaId?: number[];

  /**
   * Only set when contextType=PLATFORM. Represents the platforms this correction applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform?: string[];
}

export class CreativeCorrections extends SpeakeasyBase {
  /**
   * All known serving contexts containing serving status information.
   */
  @SpeakeasyMetadata({ elemType: CreativeCorrectionsContexts })
  @Expose({ name: "contexts" })
  @Type(() => CreativeCorrectionsContexts)
  contexts?: CreativeCorrectionsContexts[];

  /**
   * Additional details about the correction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "details" })
  details?: string[];

  /**
   * The type of correction that was applied to the creative.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;
}

export class CreativeFilteringReasonsReasons extends SpeakeasyBase {
  /**
   * The number of times the creative was filtered for the status. The count is aggregated across all publishers on the exchange.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filteringCount" })
  filteringCount?: string;

  /**
   * The filtering status code as defined in  creative-status-codes.txt.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filteringStatus" })
  filteringStatus?: number;
}

/**
 * The filtering reasons for the creative. Read-only. This field should not be set in requests.
 */
export class CreativeFilteringReasons extends SpeakeasyBase {
  /**
   * The date in ISO 8601 format for the data. The data is collected from 00:00:00 to 23:59:59 in PST.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  date?: string;

  /**
   * The filtering reasons.
   */
  @SpeakeasyMetadata({ elemType: CreativeFilteringReasonsReasons })
  @Expose({ name: "reasons" })
  @Type(() => CreativeFilteringReasonsReasons)
  reasons?: CreativeFilteringReasonsReasons[];
}

/**
 * The app icon, for app download ads.
 */
export class CreativeNativeAdAppIcon extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

/**
 * A large image.
 */
export class CreativeNativeAdImage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

/**
 * A smaller image, for the advertiser logo.
 */
export class CreativeNativeAdLogo extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

/**
 * If nativeAd is set, HTMLSnippet, videoVastXML, and the videoURL outside of nativeAd should not be set. (The videoURL inside nativeAd can be set.)
 */
export class CreativeNativeAd extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "advertiser" })
  advertiser?: string;

  /**
   * The app icon, for app download ads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appIcon" })
  @Type(() => CreativeNativeAdAppIcon)
  appIcon?: CreativeNativeAdAppIcon;

  /**
   * A long description of the ad.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * A label for the button that the user is supposed to click.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "callToAction" })
  callToAction?: string;

  /**
   * The URL that the browser/SDK will load when the user clicks the ad.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clickLinkUrl" })
  clickLinkUrl?: string;

  /**
   * The URL to use for click tracking.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clickTrackingUrl" })
  clickTrackingUrl?: string;

  /**
   * A short title for the ad.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headline" })
  headline?: string;

  /**
   * A large image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => CreativeNativeAdImage)
  image?: CreativeNativeAdImage;

  /**
   * The URLs are called when the impression is rendered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "impressionTrackingUrl" })
  impressionTrackingUrl?: string[];

  /**
   * A smaller image, for the advertiser logo.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logo" })
  @Type(() => CreativeNativeAdLogo)
  logo?: CreativeNativeAdLogo;

  /**
   * The price of the promoted app including the currency info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price?: string;

  /**
   * The app rating in the app store. Must be in the range [0-5].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "starRating" })
  starRating?: number;

  /**
   * The URL of the XML VAST for a native ad. Note this is a separate field from resource.video_url.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videoURL" })
  videoURL?: string;
}

export class CreativeServingRestrictionsContexts extends SpeakeasyBase {
  /**
   * Only set when contextType=AUCTION_TYPE. Represents the auction types this restriction applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auctionType" })
  auctionType?: string[];

  /**
   * The type of context (e.g., location, platform, auction type, SSL-ness).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contextType" })
  contextType?: string;

  /**
   * Only set when contextType=LOCATION. Represents the geo criterias this restriction applies to. Impressions are considered to match a context if either the user location or publisher location matches a given geoCriteriaId.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "geoCriteriaId" })
  geoCriteriaId?: number[];

  /**
   * Only set when contextType=PLATFORM. Represents the platforms this restriction applies to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform?: string[];
}

export class CreativeServingRestrictionsDisapprovalReasons extends SpeakeasyBase {
  /**
   * Additional details about the reason for disapproval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "details" })
  details?: string[];

  /**
   * The categorized reason for disapproval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;
}

export class CreativeServingRestrictions extends SpeakeasyBase {
  /**
   * All known contexts/restrictions.
   */
  @SpeakeasyMetadata({ elemType: CreativeServingRestrictionsContexts })
  @Expose({ name: "contexts" })
  @Type(() => CreativeServingRestrictionsContexts)
  contexts?: CreativeServingRestrictionsContexts[];

  /**
   * The reasons for disapproval within this restriction, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED or CONDITIONALLY_APPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue.
   */
  @SpeakeasyMetadata({
    elemType: CreativeServingRestrictionsDisapprovalReasons,
  })
  @Expose({ name: "disapprovalReasons" })
  @Type(() => CreativeServingRestrictionsDisapprovalReasons)
  disapprovalReasons?: CreativeServingRestrictionsDisapprovalReasons[];

  /**
   * Why the creative is ineligible to serve in this context (e.g., it has been explicitly disapproved or is pending review).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason?: string;
}

/**
 * A creative and its classification data.
 */
export class Creative extends SpeakeasyBase {
  /**
   * The HTML snippet that displays the ad when inserted in the web page. If set, videoURL, videoVastXML, and nativeAd should not be set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "HTMLSnippet" })
  htmlSnippet?: string;

  /**
   * Account id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: number;

  /**
   * The link to the Ad Preferences page. This is only supported for native ads.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "adChoicesDestinationUrl" })
  adChoicesDestinationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "adTechnologyProviders" })
  @Type(() => CreativeAdTechnologyProviders)
  adTechnologyProviders?: CreativeAdTechnologyProviders;

  /**
   * Detected advertiser id, if any. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advertiserId" })
  advertiserId?: string[];

  /**
   * The name of the company being advertised in the creative. A list of advertisers is provided in the advertisers.txt file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advertiserName" })
  advertiserName?: string;

  /**
   * The agency id for this creative.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "agencyId" })
  agencyId?: string;

  /**
   * The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apiUploadTimestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  apiUploadTimestamp?: Date;

  /**
   * List of buyer selectable attributes for the ads that may be shown from this snippet. Each attribute is represented by an integer as defined in  buyer-declarable-creative-attributes.txt.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attribute" })
  attribute?: number[];

  /**
   * A buyer-specific id identifying the creative in this ad.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "buyerCreativeId" })
  buyerCreativeId?: string;

  /**
   * The set of destination urls for the snippet.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clickThroughUrl" })
  clickThroughUrl?: string[];

  /**
   * Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata({ elemType: CreativeCorrections })
  @Expose({ name: "corrections" })
  @Type(() => CreativeCorrections)
  corrections?: CreativeCorrections[];

  /**
   * Creative status identity type that the creative item applies to. Ad Exchange real-time bidding is migrating to the sizeless creative verification. Originally, Ad Exchange assigned creative verification status to a unique combination of a buyer creative ID and creative dimensions. Post-migration, a single verification status will be assigned at the buyer creative ID level. This field allows to distinguish whether a given creative status applies to a unique combination of a buyer creative ID and creative dimensions, or to a buyer creative ID as a whole.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creativeStatusIdentityType" })
  creativeStatusIdentityType?: string;

  /**
   * Top-level deals status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=DIRECT_DEALS (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from servingRestrictions directly.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dealsStatus" })
  dealsStatus?: string;

  /**
   * Detected domains for this creative. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "detectedDomains" })
  detectedDomains?: string[];

  /**
   * The filtering reasons for the creative. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filteringReasons" })
  @Type(() => CreativeFilteringReasons)
  filteringReasons?: CreativeFilteringReasons;

  /**
   * Ad height.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  /**
   * The set of urls to be called to record an impression.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "impressionTrackingUrl" })
  impressionTrackingUrl?: string[];

  /**
   * Resource type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Detected languages for this creative. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "languages" })
  languages?: string[];

  /**
   * If nativeAd is set, HTMLSnippet, videoVastXML, and the videoURL outside of nativeAd should not be set. (The videoURL inside nativeAd can be set.)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nativeAd" })
  @Type(() => CreativeNativeAd)
  nativeAd?: CreativeNativeAd;

  /**
   * Top-level open auction status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=OPEN_AUCTION (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from ServingRestrictions directly.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "openAuctionStatus" })
  openAuctionStatus?: string;

  /**
   * Detected product categories, if any. Each category is represented by an integer as defined in  ad-product-categories.txt. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "productCategories" })
  productCategories?: number[];

  /**
   * All restricted categories for the ads that may be shown from this snippet. Each category is represented by an integer as defined in the  ad-restricted-categories.txt.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "restrictedCategories" })
  restrictedCategories?: number[];

  /**
   * Detected sensitive categories, if any. Each category is represented by an integer as defined in  ad-sensitive-categories.txt. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sensitiveCategories" })
  sensitiveCategories?: number[];

  /**
   * The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS vs HTTP request, or the type of auction). Read-only. This field should not be set in requests. See the examples in the Creatives guide for more details.
   */
  @SpeakeasyMetadata({ elemType: CreativeServingRestrictions })
  @Expose({ name: "servingRestrictions" })
  @Type(() => CreativeServingRestrictions)
  servingRestrictions?: CreativeServingRestrictions[];

  /**
   * List of vendor types for the ads that may be shown from this snippet. Each vendor type is represented by an integer as defined in vendors.txt.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vendorType" })
  vendorType?: number[];

  /**
   * The version for this creative. Read-only. This field should not be set in requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: number;

  /**
   * The URL to fetch a video ad. If set, HTMLSnippet, videoVastXML, and nativeAd should not be set. Note, this is different from resource.native_ad.video_url above.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videoURL" })
  videoURL?: string;

  /**
   * The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard. If set, HTMLSnippet, videoURL, and nativeAd and should not be set.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "videoVastXML" })
  videoVastXML?: string;

  /**
   * Ad width.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}
