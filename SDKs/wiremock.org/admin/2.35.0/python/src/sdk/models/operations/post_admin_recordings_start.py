"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyCaptureHeaders:
    
    case_insensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseInsensitive'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyExtractBodyCriteria:
    r"""Criteria for extracting response bodies to a separate file instead of including it in the stub mapping"""
    
    binary_size_threshold: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('binarySizeThreshold'), 'exclude': lambda f: f is None }})
    r"""Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \\"56 Mb\\". Default unit is bytes."""  
    text_size_threshold: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textSizeThreshold'), 'exclude': lambda f: f is None }})
    r"""Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \\"56 Mb\\". Default unit is bytes."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials:
    r"""Pre-emptive basic auth credentials to match against"""
    
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})  
    username: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyFilters:
    
    basic_auth_credentials: Optional[PostAdminRecordingsStartRequestBodyFiltersBasicAuthCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicAuthCredentials'), 'exclude': lambda f: f is None }})
    r"""Pre-emptive basic auth credentials to match against"""  
    body_patterns: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bodyPatterns'), 'exclude': lambda f: f is None }})
    r"""Request body patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    cookies: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cookies'), 'exclude': lambda f: f is None }})
    r"""Cookie patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""Header patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('method'), 'exclude': lambda f: f is None }})
    r"""The HTTP request method e.g. GET"""  
    query_parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryParameters'), 'exclude': lambda f: f is None }})
    r"""Query parameter patterns to match against in the <key>: { \\"<predicate>\\": \\"<value>\\" } form"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    url_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlPath'), 'exclude': lambda f: f is None }})
    r"""The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    url_path_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlPathPattern'), 'exclude': lambda f: f is None }})
    r"""The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    url_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('urlPattern'), 'exclude': lambda f: f is None }})
    r"""The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified."""  
    
class PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum(str, Enum):
    EQUAL_TO_XML = 'equalToXml'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyRequestBodyPattern4:
    r"""Always match request bodies using equalToXml"""
    
    matcher: Optional[PostAdminRecordingsStartRequestBodyRequestBodyPattern4MatcherEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matcher'), 'exclude': lambda f: f is None }})  
    
class PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum(str, Enum):
    EQUAL_TO_JSON = 'equalToJson'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyRequestBodyPattern3:
    r"""Always match request bodies using equalToJson"""
    
    ignore_array_order: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreArrayOrder'), 'exclude': lambda f: f is None }})
    r"""Ignore order of array elements"""  
    ignore_extra_elements: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreExtraElements'), 'exclude': lambda f: f is None }})
    r"""Ignore extra elements in objects"""  
    matcher: Optional[PostAdminRecordingsStartRequestBodyRequestBodyPattern3MatcherEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matcher'), 'exclude': lambda f: f is None }})  
    
class PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum(str, Enum):
    EQUAL_TO = 'equalTo'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyRequestBodyPattern2:
    r"""Always match request bodies using equalTo"""
    
    case_insensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseInsensitive'), 'exclude': lambda f: f is None }})
    r"""Match body using case-insensitive string comparison"""  
    matcher: Optional[PostAdminRecordingsStartRequestBodyRequestBodyPattern2MatcherEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matcher'), 'exclude': lambda f: f is None }})  
    
class PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum(str, Enum):
    AUTO = 'auto'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBodyRequestBodyPattern1:
    r"""Automatically determine matcher based on content type (the default)"""
    
    case_insensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseInsensitive'), 'exclude': lambda f: f is None }})
    r"""If equalTo is used, match body use case-insensitive string comparison"""  
    ignore_array_order: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreArrayOrder'), 'exclude': lambda f: f is None }})
    r"""If equalToJson is used, ignore order of array elements"""  
    ignore_extra_elements: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ignoreExtraElements'), 'exclude': lambda f: f is None }})
    r"""If equalToJson is used, matcher ignores extra elements in objects"""  
    matcher: Optional[PostAdminRecordingsStartRequestBodyRequestBodyPattern1MatcherEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matcher'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostAdminRecordingsStartRequestBody:
    
    capture_headers: Optional[dict[str, PostAdminRecordingsStartRequestBodyCaptureHeaders]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('captureHeaders'), 'exclude': lambda f: f is None }})
    r"""Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \\"caseInsensitive\\", which defaults to false"""  
    extract_body_criteria: Optional[PostAdminRecordingsStartRequestBodyExtractBodyCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extractBodyCriteria'), 'exclude': lambda f: f is None }})
    r"""Criteria for extracting response bodies to a separate file instead of including it in the stub mapping"""  
    filters: Optional[PostAdminRecordingsStartRequestBodyFilters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filters'), 'exclude': lambda f: f is None }})  
    persist: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persist'), 'exclude': lambda f: f is None }})
    r"""Whether to save stub mappings to the file system or just return them"""  
    repeats_as_scenarios: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repeatsAsScenarios'), 'exclude': lambda f: f is None }})
    r"""When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded"""  
    request_body_pattern: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestBodyPattern'), 'exclude': lambda f: f is None }})
    r"""Control the request body matcher used in generated stub mappings"""  
    target_base_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetBaseUrl'), 'exclude': lambda f: f is None }})
    r"""Target URL when using the record and playback API"""  
    transformer_parameters: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformerParameters'), 'exclude': lambda f: f is None }})
    r"""List of names of stub mappings transformers to apply to generated stubs"""  
    transformers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transformers'), 'exclude': lambda f: f is None }})
    r"""Parameters to pass to stub mapping transformers"""  
    

@dataclasses.dataclass
class PostAdminRecordingsStartResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    