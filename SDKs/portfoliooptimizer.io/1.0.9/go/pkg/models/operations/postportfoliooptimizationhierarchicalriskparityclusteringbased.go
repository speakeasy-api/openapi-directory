// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum - The allocation method to use across clusters
type PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum string

const (
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnumEqualWeighting    PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum = "equalWeighting"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnumInverseVolatility PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum = "inverseVolatility"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnumInverseVariance   PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum = "inverseVariance"
)

func (e PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum) ToPointer() *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum {
	return &e
}

func (e *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "equalWeighting":
		fallthrough
	case "inverseVolatility":
		fallthrough
	case "inverseVariance":
		*e = PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum: %v", v)
	}
}

// PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum - The hierarchical clustering method to use
type PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum string

const (
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnumSingleLinkage   PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum = "singleLinkage"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnumAverageLinkage  PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum = "averageLinkage"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnumCompleteLinkage PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum = "completeLinkage"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnumWardLinkage     PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum = "wardLinkage"
)

func (e PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum) ToPointer() *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum {
	return &e
}

func (e *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "singleLinkage":
		fallthrough
	case "averageLinkage":
		fallthrough
	case "completeLinkage":
		fallthrough
	case "wardLinkage":
		*e = PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum: %v", v)
	}
}

// PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum - The order to impose on the hierarchical clustering tree leaves
type PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum string

const (
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnumRHclust PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum = "r-hclust"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnumOptimal PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum = "optimal"
)

func (e PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum) ToPointer() *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum {
	return &e
}

func (e *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "r-hclust":
		fallthrough
	case "optimal":
		*e = PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum: %v", v)
	}
}

type PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints struct {
	// maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage
	MaximumAssetsWeights []float64 `json:"maximumAssetsWeights,omitempty"`
	// The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure
	MaximumPortfolioExposure *float64 `json:"maximumPortfolioExposure,omitempty"`
	// minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage
	MinimumAssetsWeights []float64 `json:"minimumAssetsWeights,omitempty"`
	// The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure
	MinimumPortfolioExposure *float64 `json:"minimumPortfolioExposure,omitempty"`
}

// PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum - The allocation method to use within clusters
type PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum string

const (
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnumEqualWeighting    PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum = "equalWeighting"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnumInverseVolatility PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum = "inverseVolatility"
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnumInverseVariance   PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum = "inverseVariance"
)

func (e PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum) ToPointer() *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum {
	return &e
}

func (e *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "equalWeighting":
		fallthrough
	case "inverseVolatility":
		fallthrough
	case "inverseVariance":
		*e = PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum: %v", v)
	}
}

type PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBody struct {
	// The allocation method to use across clusters
	AcrossClusterAllocationMethod *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyAcrossClusterAllocationMethodEnum `json:"acrossClusterAllocationMethod,omitempty"`
	// The number of assets
	Assets int64 `json:"assets"`
	// assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j
	AssetsCovarianceMatrix [][]float64 `json:"assetsCovarianceMatrix"`
	// The hierarchical clustering method to use
	ClusteringMethod *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringMethodEnum `json:"clusteringMethod,omitempty"`
	// The order to impose on the hierarchical clustering tree leaves
	ClusteringOrdering *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyClusteringOrderingEnum `json:"clusteringOrdering,omitempty"`
	// The number of clusters to use in the hierarchical clustering tree; if not provided, the number of clusters to use is computed using the gap statistic method, as described in the first reference
	Clusters    *int64                                                                                `json:"clusters,omitempty"`
	Constraints *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyConstraints `json:"constraints,omitempty"`
	// The allocation method to use within clusters
	WithinClusterAllocationMethod *PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedRequestBodyWithinClusterAllocationMethodEnum `json:"withinClusterAllocationMethod,omitempty"`
}

// PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON - OK
type PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON struct {
	// assetsWeights[i] is the weight of the asset i in the portfolio, in percentage
	AssetsWeights []float64 `json:"assetsWeights"`
}

type PostPortfolioOptimizationHierarchicalRiskParityClusteringBasedResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSONObject *PostPortfolioOptimizationHierarchicalRiskParityClusteringBased200ApplicationJSON
}
