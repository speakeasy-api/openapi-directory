/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum SearchSearchRouteTypesEnum {
  Zero = "0",
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
}

export class SearchSearchRequest extends SpeakeasyBase {
  /**
   * Your developer id
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=devid" })
  devid?: string;

  /**
   * Placeholder for future development; currently unavailable
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_addresses",
  })
  includeAddresses?: boolean;

  /**
   * Indicates if outlets will be returned in response (default = true)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_outlets",
  })
  includeOutlets?: boolean;

  /**
   * Filter by geographic coordinate of latitude
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=latitude",
  })
  latitude?: number;

  /**
   * Filter by geographic coordinate of longitude
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=longitude",
  })
  longitude?: number;

  /**
   * Indicates whether to find routes by suburbs in the search term (default = true)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=match_route_by_suburb",
  })
  matchRouteBySuburb?: boolean;

  /**
   * Indicates whether to search for stops according to a metlink stop ID (default = false)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=match_stop_by_gtfs_stop_id",
  })
  matchStopByGtfsStopId?: boolean;

  /**
   * Indicates whether to find stops by suburbs in the search term (default = true)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=match_stop_by_suburb",
  })
  matchStopBySuburb?: boolean;

  /**
   * Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_distance",
  })
  maxDistance?: number;

  /**
   * Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=route_types",
  })
  routeTypes?: SearchSearchRouteTypesEnum[];

  /**
   * Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=search_term",
  })
  searchTerm: string;

  /**
   * Authentication signature for request
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=signature",
  })
  signature?: string;

  /**
   * Please ignore
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=token" })
  token?: string;
}

export class SearchSearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Invalid Request
   */
  @SpeakeasyMetadata()
  v3ErrorResponse?: shared.V3ErrorResponse;

  /**
   * Stops, routes and myki ticket outlets that contain the search term (note: stops and routes are ordered by route_type by default).
   */
  @SpeakeasyMetadata()
  v3SearchResult?: shared.V3SearchResult;
}
