<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - The Books API provides information about book reviews and The New York Times bestsellers lists.
 * 
 * http://developer.nytimes.com/
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see http://developer.nytimes.com/
 */
class SDK
{
	public const SERVERS = [
		'https://api.nytimes.com/svc/books/v3',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Best Seller History List
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonResponse
     */
	public function getListsBestSellersHistoryJson(
        \OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lists/best-sellers/history.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getListsBestSellersHistoryJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETListsBestSellersHistoryJSON200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Best Seller List by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonResponse
     */
	public function getListsDateListJson(
        \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lists/{date}/{list}.json', \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETListsDateListJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getListsDateListJSON200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETListsDateListJSON200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Best Seller List
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsFormatRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsFormatSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETListsFormatResponse
     */
	public function getListsFormat(
        \OpenAPI\OpenAPI\Models\Operations\GETListsFormatRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETListsFormatSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETListsFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lists.{format}', \OpenAPI\OpenAPI\Models\Operations\GETListsFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETListsFormatRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETListsFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getListsFormat200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETListsFormat200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Best Seller List Names
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatResponse
     */
	public function getListsNamesFormat(
        \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lists/names.{format}', \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getListsNamesFormat200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETListsNamesFormat200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Best Seller List Overview
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatResponse
     */
	public function getListsOverviewFormat(
        \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/lists/overview.{format}', \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getListsOverviewFormat200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETListsOverviewFormat200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reviews
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatResponse
     */
	public function getReviewsFormat(
        \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews.{format}', \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETReviewsFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getReviewsFormat200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GETReviewsFormat200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}