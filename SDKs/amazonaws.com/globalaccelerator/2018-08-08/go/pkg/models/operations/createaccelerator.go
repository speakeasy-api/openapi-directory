// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateAcceleratorXAmzTargetEnum
type CreateAcceleratorXAmzTargetEnum string

const (
	CreateAcceleratorXAmzTargetEnumGlobalAcceleratorV20180706CreateAccelerator CreateAcceleratorXAmzTargetEnum = "GlobalAccelerator_V20180706.CreateAccelerator"
)

func (e *CreateAcceleratorXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GlobalAccelerator_V20180706.CreateAccelerator":
		*e = CreateAcceleratorXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAcceleratorXAmzTargetEnum: %s", s)
	}
}

type CreateAcceleratorRequest struct {
	CreateAcceleratorRequest shared.CreateAcceleratorRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               CreateAcceleratorXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateAcceleratorResponse struct {
	ContentType string
	// Success
	CreateAcceleratorResponse *shared.CreateAcceleratorResponse
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
}
