"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tasks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def tasks_tasks_clear(self, request: operations.TasksTasksClearRequest, security: operations.TasksTasksClearSecurity) -> operations.TasksTasksClearResponse:
        r"""Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksClearRequest, base_url, '/tasks/v1/lists/{tasklist}/clear', request)
        
        query_params = utils.get_query_params(operations.TasksTasksClearRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksClearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tasks_tasks_delete(self, request: operations.TasksTasksDeleteRequest, security: operations.TasksTasksDeleteSecurity) -> operations.TasksTasksDeleteResponse:
        r"""Deletes the specified task from the task list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksDeleteRequest, base_url, '/tasks/v1/lists/{tasklist}/tasks/{task}', request)
        
        query_params = utils.get_query_params(operations.TasksTasksDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tasks_tasks_get(self, request: operations.TasksTasksGetRequest, security: operations.TasksTasksGetSecurity) -> operations.TasksTasksGetResponse:
        r"""Returns the specified task."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksGetRequest, base_url, '/tasks/v1/lists/{tasklist}/tasks/{task}', request)
        
        query_params = utils.get_query_params(operations.TasksTasksGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out

        return res

    def tasks_tasks_insert(self, request: operations.TasksTasksInsertRequest, security: operations.TasksTasksInsertSecurity) -> operations.TasksTasksInsertResponse:
        r"""Creates a new task on the specified task list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksInsertRequest, base_url, '/tasks/v1/lists/{tasklist}/tasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TasksTasksInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out

        return res

    def tasks_tasks_list(self, request: operations.TasksTasksListRequest, security: operations.TasksTasksListSecurity) -> operations.TasksTasksListResponse:
        r"""Returns all tasks in the specified task list."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksListRequest, base_url, '/tasks/v1/lists/{tasklist}/tasks', request)
        
        query_params = utils.get_query_params(operations.TasksTasksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Tasks])
                res.tasks = out

        return res

    def tasks_tasks_move(self, request: operations.TasksTasksMoveRequest, security: operations.TasksTasksMoveSecurity) -> operations.TasksTasksMoveResponse:
        r"""Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksMoveRequest, base_url, '/tasks/v1/lists/{tasklist}/tasks/{task}/move', request)
        
        query_params = utils.get_query_params(operations.TasksTasksMoveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksMoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out

        return res

    def tasks_tasks_patch(self, request: operations.TasksTasksPatchRequest, security: operations.TasksTasksPatchSecurity) -> operations.TasksTasksPatchResponse:
        r"""Updates the specified task. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksPatchRequest, base_url, '/tasks/v1/lists/{tasklist}/tasks/{task}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TasksTasksPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out

        return res

    def tasks_tasks_update(self, request: operations.TasksTasksUpdateRequest, security: operations.TasksTasksUpdateSecurity) -> operations.TasksTasksUpdateResponse:
        r"""Updates the specified task."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TasksTasksUpdateRequest, base_url, '/tasks/v1/lists/{tasklist}/tasks/{task}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "task1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.TasksTasksUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TasksTasksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Task])
                res.task = out

        return res

    