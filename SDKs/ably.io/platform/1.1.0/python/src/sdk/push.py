"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Push:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_push_device_details(self, request: operations.DeletePushDeviceDetailsRequest) -> operations.DeletePushDeviceDetailsResponse:
        r"""Delete a registered device's update token
        Delete a device details object.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/channelSubscriptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DeletePushDeviceDetailsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePushDeviceDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def get_channels_with_push_subscribers(self, request: operations.GetChannelsWithPushSubscribersRequest) -> operations.GetChannelsWithPushSubscribersResponse:
        r"""List all channels with at least one subscribed device
        Returns a paginated response of channel names.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/channels'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetChannelsWithPushSubscribersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelsWithPushSubscribersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.get_channels_with_push_subscribers_2_xx_application_json_strings = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_push_device_details(self, request: operations.GetPushDeviceDetailsRequest) -> operations.GetPushDeviceDetailsResponse:
        r"""Get a device registration
        Get the full details of a device.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPushDeviceDetailsRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPushDeviceDetailsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPushDeviceDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_push_subscriptions_on_channels(self, request: operations.GetPushSubscriptionsOnChannelsRequest) -> operations.GetPushSubscriptionsOnChannelsResponse:
        r"""List channel subscriptions
        Get a list of push notification subscriptions to channels.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/channelSubscriptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPushSubscriptionsOnChannelsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPushSubscriptionsOnChannelsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def get_registered_push_devices(self, request: operations.GetRegisteredPushDevicesRequest) -> operations.GetRegisteredPushDevicesResponse:
        r"""List devices registered for receiving push notifications
        List of device details of devices registed for push notifications.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/deviceRegistrations'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetRegisteredPushDevicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRegisteredPushDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_push_device_details_form(self, request: operations.PatchPushDeviceDetailsFormRequest) -> operations.PatchPushDeviceDetailsFormResponse:
        r"""Update a device registration
        Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchPushDeviceDetailsFormRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "device_details_input", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PatchPushDeviceDetailsFormRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchPushDeviceDetailsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_push_device_details_json(self, request: operations.PatchPushDeviceDetailsJSONRequest) -> operations.PatchPushDeviceDetailsJSONResponse:
        r"""Update a device registration
        Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchPushDeviceDetailsJSONRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "device_details_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PatchPushDeviceDetailsJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchPushDeviceDetailsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def patch_push_device_details_raw(self, request: operations.PatchPushDeviceDetailsRawRequest) -> operations.PatchPushDeviceDetailsRawResponse:
        r"""Update a device registration
        Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchPushDeviceDetailsRawRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PatchPushDeviceDetailsRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchPushDeviceDetailsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def publish_push_notification_to_devices_form(self, request: operations.PublishPushNotificationToDevicesFormRequest) -> operations.PublishPushNotificationToDevicesFormResponse:
        r"""Publish a push notification to device(s)
        A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/publish'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PublishPushNotificationToDevicesFormRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishPushNotificationToDevicesFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def publish_push_notification_to_devices_json(self, request: operations.PublishPushNotificationToDevicesJSONRequest) -> operations.PublishPushNotificationToDevicesJSONResponse:
        r"""Publish a push notification to device(s)
        A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/publish'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PublishPushNotificationToDevicesJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishPushNotificationToDevicesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def publish_push_notification_to_devices_raw(self, request: operations.PublishPushNotificationToDevicesRawRequest) -> operations.PublishPushNotificationToDevicesRawResponse:
        r"""Publish a push notification to device(s)
        A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/publish'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PublishPushNotificationToDevicesRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PublishPushNotificationToDevicesRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def put_push_device_details_form(self, request: operations.PutPushDeviceDetailsFormRequest) -> operations.PutPushDeviceDetailsFormResponse:
        r"""Update a device registration
        Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPushDeviceDetailsFormRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "device_details_input", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PutPushDeviceDetailsFormRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPushDeviceDetailsFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def put_push_device_details_json(self, request: operations.PutPushDeviceDetailsJSONRequest) -> operations.PutPushDeviceDetailsJSONResponse:
        r"""Update a device registration
        Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPushDeviceDetailsJSONRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "device_details_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PutPushDeviceDetailsJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPushDeviceDetailsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def put_push_device_details_raw(self, request: operations.PutPushDeviceDetailsRawRequest) -> operations.PutPushDeviceDetailsRawResponse:
        r"""Update a device registration
        Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutPushDeviceDetailsRawRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PutPushDeviceDetailsRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutPushDeviceDetailsRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def register_push_device_json(self, request: operations.RegisterPushDeviceJSONRequest) -> operations.RegisterPushDeviceJSONResponse:
        r"""Register a device for receiving push notifications
        Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/deviceRegistrations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "device_details_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RegisterPushDeviceJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterPushDeviceJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def register_push_device_raw(self, request: operations.RegisterPushDeviceRawRequest) -> operations.RegisterPushDeviceRawResponse:
        r"""Register a device for receiving push notifications
        Register a device’s details, including the information necessary to deliver push notifications to it. Requires \"push-admin\" capability.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/deviceRegistrations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.RegisterPushDeviceRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterPushDeviceRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def subscribe_push_device_to_channel_form(self, request: operations.SubscribePushDeviceToChannelFormRequest) -> operations.SubscribePushDeviceToChannelFormResponse:
        r"""Subscribe a device to a channel
        Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/channelSubscriptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SubscribePushDeviceToChannelFormRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribePushDeviceToChannelFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def subscribe_push_device_to_channel_json(self, request: operations.SubscribePushDeviceToChannelJSONRequest) -> operations.SubscribePushDeviceToChannelJSONResponse:
        r"""Subscribe a device to a channel
        Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/channelSubscriptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SubscribePushDeviceToChannelJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribePushDeviceToChannelJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def subscribe_push_device_to_channel_raw(self, request: operations.SubscribePushDeviceToChannelRawRequest) -> operations.SubscribePushDeviceToChannelRawResponse:
        r"""Subscribe a device to a channel
        Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/channelSubscriptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SubscribePushDeviceToChannelRawRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubscribePushDeviceToChannelRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def unregister_all_push_devices(self, request: operations.UnregisterAllPushDevicesRequest) -> operations.UnregisterAllPushDevicesResponse:
        r"""Unregister matching devices for push notifications
        Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/push/deviceRegistrations'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.UnregisterAllPushDevicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnregisterAllPushDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def unregister_push_device(self, request: operations.UnregisterPushDeviceRequest) -> operations.UnregisterPushDeviceResponse:
        r"""Unregister a single device for push notifications
        Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnregisterPushDeviceRequest, base_url, '/push/deviceRegistrations/{device_id}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.UnregisterPushDeviceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnregisterPushDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content

        return res

    def update_push_device_details(self, request: operations.UpdatePushDeviceDetailsRequest) -> operations.UpdatePushDeviceDetailsResponse:
        r"""Reset a registered device's update token
        Gets an updated device details object.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePushDeviceDetailsRequest, base_url, '/push/deviceRegistrations/{device_id}/resetUpdateToken', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.UpdatePushDeviceDetailsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePushDeviceDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeviceDetailsOutput])
                res.device_details = out
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/x-msgpack'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/html'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    