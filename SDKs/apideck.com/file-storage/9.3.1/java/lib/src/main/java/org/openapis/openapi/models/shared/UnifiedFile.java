/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class UnifiedFile {
    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public UnifiedFile withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    public String createdBy;

    public UnifiedFile withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * Optional description of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public UnifiedFile withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Whether the current user can download this file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadable")
    public Boolean downloadable;

    public UnifiedFile withDownloadable(Boolean downloadable) {
        this.downloadable = downloadable;
        return this;
    }
    
    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    public String downstreamId;

    public UnifiedFile withDownstreamId(String downstreamId) {
        this.downstreamId = downstreamId;
        return this;
    }
    
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    public String id;

    public UnifiedFile withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The MIME type of the file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mime_type")
    public String mimeType;

    public UnifiedFile withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * The name of the file
     */
    @JsonProperty("name")
    public String name;

    public UnifiedFile withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public Owner owner;

    public UnifiedFile withOwner(Owner owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * The parent folders of the file, starting from the root
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folders")
    public LinkedFolder[] parentFolders;

    public UnifiedFile withParentFolders(LinkedFolder[] parentFolders) {
        this.parentFolders = parentFolders;
        return this;
    }
    
    /**
     * Whether the list of parent folder is complete. Some connectors only return the direct parent of a file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_folders_complete")
    public Boolean parentFoldersComplete;

    public UnifiedFile withParentFoldersComplete(Boolean parentFoldersComplete) {
        this.parentFoldersComplete = parentFoldersComplete;
        return this;
    }
    
    /**
     * The full path of the file or folder (includes the file name)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public UnifiedFile withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The size of the file in bytes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;

    public UnifiedFile withSize(Long size) {
        this.size = size;
        return this;
    }
    
    /**
     * The type of resource. Could be file, folder or url
     */
    @JsonProperty("type")
    public FileTypeEnum type;

    public UnifiedFile withType(FileTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public UnifiedFile withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    public String updatedBy;

    public UnifiedFile withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
    public UnifiedFile(@JsonProperty("id") String id, @JsonProperty("name") String name, @JsonProperty("type") FileTypeEnum type) {
        this.id = id;
        this.name = name;
        this.type = type;
  }
}
