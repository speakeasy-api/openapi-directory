/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class YoutubeCommentThreadsListRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;

    public YoutubeCommentThreadsListRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;

    public YoutubeCommentThreadsListRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Returns the comment threads of all videos of the channel and the channel comments as well.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=allThreadsRelatedToChannelId")
    public String allThreadsRelatedToChannelId;

    public YoutubeCommentThreadsListRequest withAllThreadsRelatedToChannelId(String allThreadsRelatedToChannelId) {
        this.allThreadsRelatedToChannelId = allThreadsRelatedToChannelId;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;

    public YoutubeCommentThreadsListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;

    public YoutubeCommentThreadsListRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Returns the comment threads for all the channel comments (ie does not include comments left on videos).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channelId")
    public String channelId;

    public YoutubeCommentThreadsListRequest withChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;

    public YoutubeCommentThreadsListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Returns the comment threads with the given IDs for Stubby or Apiary.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=id")
    public String[] id;

    public YoutubeCommentThreadsListRequest withId(String[] id) {
        this.id = id;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;

    public YoutubeCommentThreadsListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;

    public YoutubeCommentThreadsListRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=moderationStatus")
    public YoutubeCommentThreadsListModerationStatusEnum moderationStatus;

    public YoutubeCommentThreadsListRequest withModerationStatus(YoutubeCommentThreadsListModerationStatusEnum moderationStatus) {
        this.moderationStatus = moderationStatus;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;

    public YoutubeCommentThreadsListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    public YoutubeCommentThreadsListOrderEnum order;

    public YoutubeCommentThreadsListRequest withOrder(YoutubeCommentThreadsListOrderEnum order) {
        this.order = order;
        return this;
    }
    
    /**
     * The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;

    public YoutubeCommentThreadsListRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=part")
    public String[] part;

    public YoutubeCommentThreadsListRequest withPart(String[] part) {
        this.part = part;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;

    public YoutubeCommentThreadsListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;

    public YoutubeCommentThreadsListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=searchTerms")
    public String searchTerms;

    public YoutubeCommentThreadsListRequest withSearchTerms(String searchTerms) {
        this.searchTerms = searchTerms;
        return this;
    }
    
    /**
     * The requested text format for the returned comments.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=textFormat")
    public YoutubeCommentThreadsListTextFormatEnum textFormat;

    public YoutubeCommentThreadsListRequest withTextFormat(YoutubeCommentThreadsListTextFormatEnum textFormat) {
        this.textFormat = textFormat;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;

    public YoutubeCommentThreadsListRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;

    public YoutubeCommentThreadsListRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
    /**
     * Returns the comment threads of the specified video.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=videoId")
    public String videoId;

    public YoutubeCommentThreadsListRequest withVideoId(String videoId) {
        this.videoId = videoId;
        return this;
    }
    
    public YoutubeCommentThreadsListRequest(@JsonProperty("part") String[] part) {
        this.part = part;
  }
}
