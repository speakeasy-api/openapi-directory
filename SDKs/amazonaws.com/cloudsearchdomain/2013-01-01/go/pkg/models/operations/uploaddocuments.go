// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UploadDocumentsContentTypeEnum - <p>The format of the batch you are uploading. Amazon CloudSearch supports two document batch formats:</p> <ul> <li>application/json</li> <li>application/xml</li> </ul>
type UploadDocumentsContentTypeEnum string

const (
	UploadDocumentsContentTypeEnumApplicationJSON UploadDocumentsContentTypeEnum = "application/json"
	UploadDocumentsContentTypeEnumApplicationXML  UploadDocumentsContentTypeEnum = "application/xml"
)

func (e UploadDocumentsContentTypeEnum) ToPointer() *UploadDocumentsContentTypeEnum {
	return &e
}

func (e *UploadDocumentsContentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "application/json":
		fallthrough
	case "application/xml":
		*e = UploadDocumentsContentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadDocumentsContentTypeEnum: %v", v)
	}
}

type UploadDocumentsRequestBody struct {
	// A batch of documents formatted in JSON or HTML.
	Documents string `json:"documents"`
}

// UploadDocumentsFormatEnum
type UploadDocumentsFormatEnum string

const (
	UploadDocumentsFormatEnumSDK UploadDocumentsFormatEnum = "sdk"
)

func (e UploadDocumentsFormatEnum) ToPointer() *UploadDocumentsFormatEnum {
	return &e
}

func (e *UploadDocumentsFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sdk":
		*e = UploadDocumentsFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UploadDocumentsFormatEnum: %v", v)
	}
}

type UploadDocumentsRequest struct {
	// <p>The format of the batch you are uploading. Amazon CloudSearch supports two document batch formats:</p> <ul> <li>application/json</li> <li>application/xml</li> </ul>
	ContentType       UploadDocumentsContentTypeEnum `header:"style=simple,explode=false,name=Content-Type"`
	RequestBody       UploadDocumentsRequestBody     `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	Format            UploadDocumentsFormatEnum      `queryParam:"style=form,explode=true,name=format"`
}

type UploadDocumentsResponse struct {
	ContentType string
	// DocumentServiceException
	DocumentServiceException *shared.DocumentServiceException
	StatusCode               int
	RawResponse              *http.Response
	// Success
	UploadDocumentsResponse *shared.UploadDocumentsResponse
}
