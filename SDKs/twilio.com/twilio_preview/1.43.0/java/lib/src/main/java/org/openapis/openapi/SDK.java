/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://preview.twilio.com",
	};
    /**
	 * CREATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_DEPLOYED_DEVICES_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEPLOYED_DEVICES_DEVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_DEPLOYED_DEVICES_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEPLOYED_DEVICES_FLEET_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_DEPLOYED_DEVICES_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_DEPLOYED_DEVICES_KEY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_SERVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_SYNC_LIST_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_SYNC_LIST_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_SYNC_MAP_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_SYNC_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SYNC_SYNC_MAP_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_ASSISTANT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_FIELD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_FIELD_TYPE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_FIELD_VALUE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_MODEL_BUILD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_QUERY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_SAMPLE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_UNDERSTAND_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_UNDERSTAND_TASK_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_WIRELESS_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WIRELESS_COMMAND_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * CREATE_WIRELESS_RATE_PLAN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WIRELESS_RATE_PLAN_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_DEPLOYED_DEVICES_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DEPLOYED_DEVICES_DEVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_DEPLOYED_DEVICES_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DEPLOYED_DEVICES_FLEET_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_DEPLOYED_DEVICES_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DEPLOYED_DEVICES_KEY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_DOCUMENT_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_SERVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_SYNC_LIST_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_SYNC_LIST_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_SYNC_LIST_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_SYNC_MAP_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_SYNC_MAP_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_SYNC_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SYNC_SYNC_MAP_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_ASSISTANT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_FIELD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_FIELD_TYPE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_FIELD_VALUE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_MODEL_BUILD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_QUERY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_SAMPLE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_UNDERSTAND_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_UNDERSTAND_TASK_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * DELETE_WIRELESS_RATE_PLAN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WIRELESS_RATE_PLAN_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_DEPLOYED_DEVICES_CERTIFICATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_DEPLOYED_DEVICES_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEPLOYED_DEVICES_DEVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_DEPLOYED_DEVICES_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEPLOYED_DEVICES_FLEET_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_DEPLOYED_DEVICES_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEPLOYED_DEVICES_KEY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_MARKETPLACE_INSTALLED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_DOCUMENT_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_SERVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_SYNC_LIST_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_SYNC_LIST_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_SYNC_LIST_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_SYNC_MAP_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_SYNC_MAP_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_SYNC_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SYNC_SYNC_MAP_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_ASSISTANT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_DIALOGUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_DIALOGUE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_FIELD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_FIELD_TYPE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_FIELD_VALUE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_MODEL_BUILD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_QUERY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_SAMPLE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_STYLE_SHEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_STYLE_SHEET_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_TASK_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_TASK_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_TASK_ACTIONS_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_UNDERSTAND_TASK_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_UNDERSTAND_TASK_STATISTICS_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_WIRELESS_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WIRELESS_COMMAND_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_WIRELESS_RATE_PLAN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WIRELESS_RATE_PLAN_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_WIRELESS_SIM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WIRELESS_SIM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * FETCH_WIRELESS_USAGE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WIRELESS_USAGE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_DEPLOYED_DEVICES_CERTIFICATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_DEPLOYED_DEVICES_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPLOYED_DEVICES_DEVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_DEPLOYED_DEVICES_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPLOYED_DEVICES_FLEET_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_DEPLOYED_DEVICES_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_DEPLOYED_DEVICES_KEY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_HOSTED_NUMBERS_DEPENDENT_HOSTED_NUMBER_ORDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_HOSTED_NUMBERS_DEPENDENT_HOSTED_NUMBER_ORDER_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_MARKETPLACE_INSTALLED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_DOCUMENT_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_SERVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_SYNC_LIST_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_SYNC_LIST_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_SYNC_LIST_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_SYNC_LIST_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_SYNC_MAP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_SYNC_MAP_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_SYNC_MAP_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_SYNC_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SYNC_SYNC_MAP_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_ASSISTANT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_FIELD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_FIELD_TYPE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_FIELD_VALUE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_MODEL_BUILD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_QUERY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_SAMPLE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_UNDERSTAND_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_UNDERSTAND_TASK_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_WIRELESS_COMMAND_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WIRELESS_COMMAND_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_WIRELESS_RATE_PLAN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WIRELESS_RATE_PLAN_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * LIST_WIRELESS_SIM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WIRELESS_SIM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_DEPLOYED_DEVICES_DEVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEPLOYED_DEVICES_DEVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_DEPLOYED_DEVICES_FLEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEPLOYED_DEVICES_FLEET_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_DEPLOYED_DEVICES_KEY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEPLOYED_DEVICES_KEY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_DOCUMENT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_DOCUMENT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_DOCUMENT_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_DOCUMENT_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_SERVICE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_SYNC_LIST_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_SYNC_LIST_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_SYNC_LIST_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_SYNC_LIST_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_SYNC_MAP_ITEM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_SYNC_MAP_ITEM_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_SYNC_SYNC_MAP_PERMISSION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SYNC_SYNC_MAP_PERMISSION_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_ASSISTANT_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_FIELD_TYPE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_MODEL_BUILD_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_QUERY_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_SAMPLE_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_STYLE_SHEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_STYLE_SHEET_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_TASK_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_UNDERSTAND_TASK_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_UNDERSTAND_TASK_ACTIONS_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_WIRELESS_RATE_PLAN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WIRELESS_RATE_PLAN_SERVERS = {
        "https://preview.twilio.com",
    };
	
    /**
	 * UPDATE_WIRELESS_SIM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WIRELESS_SIM_SERVERS = {
        "https://preview.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    /**
     * Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateResponse createDeployedDevicesCertificate(org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateSecurity security) throws Exception {
        return this.createDeployedDevicesCertificate(request, security, null);
    }

    /**
     * Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateResponse createDeployedDevicesCertificate(org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Certificates", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateResponse res = new org.openapis.openapi.models.operations.CreateDeployedDevicesCertificateResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetCertificate = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetCertificate out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetCertificate.class);
                res.previewDeployedDevicesFleetCertificate = out;
            }
        }

        return res;
    }

    /**
     * Create a new Deployment in the Fleet, optionally giving it a friendly name and linking to a specific Twilio Sync service instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentResponse createDeployedDevicesDeployment(org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentSecurity security) throws Exception {
        return this.createDeployedDevicesDeployment(request, security, null);
    }

    /**
     * Create a new Deployment in the Fleet, optionally giving it a friendly name and linking to a specific Twilio Sync service instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentResponse createDeployedDevicesDeployment(org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Deployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentResponse res = new org.openapis.openapi.models.operations.CreateDeployedDevicesDeploymentResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDeployment.class);
                res.previewDeployedDevicesFleetDeployment = out;
            }
        }

        return res;
    }

    /**
     * Create a new Device in the Fleet, optionally giving it a unique name, friendly name, and assigning to a Deployment and/or human identity.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceResponse createDeployedDevicesDevice(org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceSecurity security) throws Exception {
        return this.createDeployedDevicesDevice(request, security, null);
    }

    /**
     * Create a new Device in the Fleet, optionally giving it a unique name, friendly name, and assigning to a Deployment and/or human identity.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceResponse createDeployedDevicesDevice(org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Devices", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceResponse res = new org.openapis.openapi.models.operations.CreateDeployedDevicesDeviceResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetDevice = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDevice out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDevice.class);
                res.previewDeployedDevicesFleetDevice = out;
            }
        }

        return res;
    }

    /**
     * Create a new Fleet for scoping of deployed devices within your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesFleetResponse createDeployedDevicesFleet(org.openapis.openapi.models.operations.CreateDeployedDevicesFleetCreateDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesFleetSecurity security) throws Exception {
        return this.createDeployedDevicesFleet(request, security, null);
    }

    /**
     * Create a new Fleet for scoping of deployed devices within your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesFleetResponse createDeployedDevicesFleet(org.openapis.openapi.models.operations.CreateDeployedDevicesFleetCreateDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesFleetSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/DeployedDevices/Fleets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeployedDevicesFleetResponse res = new org.openapis.openapi.models.operations.CreateDeployedDevicesFleetResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleet = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleet.class);
                res.previewDeployedDevicesFleet = out;
            }
        }

        return res;
    }

    /**
     * Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesKeyResponse createDeployedDevicesKey(org.openapis.openapi.models.operations.CreateDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesKeySecurity security) throws Exception {
        return this.createDeployedDevicesKey(request, security, null);
    }

    /**
     * Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateDeployedDevicesKeyResponse createDeployedDevicesKey(org.openapis.openapi.models.operations.CreateDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.CreateDeployedDevicesKeySecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateDeployedDevicesKeyRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Keys", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateDeployedDevicesKeyResponse res = new org.openapis.openapi.models.operations.CreateDeployedDevicesKeyResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetKey = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetKey.class);
                res.previewDeployedDevicesFleetKey = out;
            }
        }

        return res;
    }

    /**
     * Create an AuthorizationDocument for authorizing the hosting of phone number capabilities on Twilio's platform.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentResponse createHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentCreateHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentSecurity security) throws Exception {
        return this.createHostedNumbersAuthorizationDocument(request, security, null);
    }

    /**
     * Create an AuthorizationDocument for authorizing the hosting of phone number capabilities on Twilio's platform.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentResponse createHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentCreateHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/HostedNumbers/AuthorizationDocuments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentResponse res = new org.openapis.openapi.models.operations.CreateHostedNumbersAuthorizationDocumentResponse(contentType, httpRes.statusCode()) {{
            previewHostedNumbersAuthorizationDocument = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewHostedNumbersAuthorizationDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewHostedNumbersAuthorizationDocument.class);
                res.previewHostedNumbersAuthorizationDocument = out;
            }
        }

        return res;
    }

    /**
     * Host a phone number's capability on Twilio's platform.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderResponse createHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderCreateHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderSecurity security) throws Exception {
        return this.createHostedNumbersHostedNumberOrder(request, security, null);
    }

    /**
     * Host a phone number's capability on Twilio's platform.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderResponse createHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderCreateHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/HostedNumbers/HostedNumberOrders");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderResponse res = new org.openapis.openapi.models.operations.CreateHostedNumbersHostedNumberOrderResponse(contentType, httpRes.statusCode()) {{
            previewHostedNumbersHostedNumberOrder = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewHostedNumbersHostedNumberOrder out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewHostedNumbersHostedNumberOrder.class);
                res.previewHostedNumbersHostedNumberOrder = out;
            }
        }

        return res;
    }

    /**
     * Install an Add-on for the Account specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnResponse createMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnCreateMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnSecurity security) throws Exception {
        return this.createMarketplaceInstalledAddOn(request, security, null);
    }

    /**
     * Install an Add-on for the Account specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnResponse createMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnCreateMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/marketplace/InstalledAddOns");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnResponse res = new org.openapis.openapi.models.operations.CreateMarketplaceInstalledAddOnResponse(contentType, httpRes.statusCode()) {{
            previewMarketplaceInstalledAddOn = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOn out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOn.class);
                res.previewMarketplaceInstalledAddOn = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncDocumentResponse createSyncDocument(org.openapis.openapi.models.operations.CreateSyncDocumentRequest request, org.openapis.openapi.models.operations.CreateSyncDocumentSecurity security) throws Exception {
        return this.createSyncDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncDocumentResponse createSyncDocument(org.openapis.openapi.models.operations.CreateSyncDocumentRequest request, org.openapis.openapi.models.operations.CreateSyncDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncDocumentRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncDocumentResponse res = new org.openapis.openapi.models.operations.CreateSyncDocumentResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceDocument = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceDocument.class);
                res.previewSyncServiceDocument = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncServiceResponse createSyncService(org.openapis.openapi.models.operations.CreateSyncServiceCreateSyncServiceRequest request, org.openapis.openapi.models.operations.CreateSyncServiceSecurity security) throws Exception {
        return this.createSyncService(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncServiceResponse createSyncService(org.openapis.openapi.models.operations.CreateSyncServiceCreateSyncServiceRequest request, org.openapis.openapi.models.operations.CreateSyncServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Sync/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncServiceResponse res = new org.openapis.openapi.models.operations.CreateSyncServiceResponse(contentType, httpRes.statusCode()) {{
            previewSyncService = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncService out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncService.class);
                res.previewSyncService = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncListResponse createSyncSyncList(org.openapis.openapi.models.operations.CreateSyncSyncListRequest request, org.openapis.openapi.models.operations.CreateSyncSyncListSecurity security) throws Exception {
        return this.createSyncSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncListResponse createSyncSyncList(org.openapis.openapi.models.operations.CreateSyncSyncListRequest request, org.openapis.openapi.models.operations.CreateSyncSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncSyncListRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncSyncListResponse res = new org.openapis.openapi.models.operations.CreateSyncSyncListResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncList = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncList.class);
                res.previewSyncServiceSyncList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncListItemResponse createSyncSyncListItem(org.openapis.openapi.models.operations.CreateSyncSyncListItemRequest request, org.openapis.openapi.models.operations.CreateSyncSyncListItemSecurity security) throws Exception {
        return this.createSyncSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncListItemResponse createSyncSyncListItem(org.openapis.openapi.models.operations.CreateSyncSyncListItemRequest request, org.openapis.openapi.models.operations.CreateSyncSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncSyncListItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncSyncListItemResponse res = new org.openapis.openapi.models.operations.CreateSyncSyncListItemResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncListSyncListItem = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListItem.class);
                res.previewSyncServiceSyncListSyncListItem = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncMapResponse createSyncSyncMap(org.openapis.openapi.models.operations.CreateSyncSyncMapRequest request, org.openapis.openapi.models.operations.CreateSyncSyncMapSecurity security) throws Exception {
        return this.createSyncSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncMapResponse createSyncSyncMap(org.openapis.openapi.models.operations.CreateSyncSyncMapRequest request, org.openapis.openapi.models.operations.CreateSyncSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncSyncMapRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncSyncMapResponse res = new org.openapis.openapi.models.operations.CreateSyncSyncMapResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncMap = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncMap out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncMap.class);
                res.previewSyncServiceSyncMap = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncMapItemResponse createSyncSyncMapItem(org.openapis.openapi.models.operations.CreateSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.CreateSyncSyncMapItemSecurity security) throws Exception {
        return this.createSyncSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSyncSyncMapItemResponse createSyncSyncMapItem(org.openapis.openapi.models.operations.CreateSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.CreateSyncSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSyncSyncMapItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSyncSyncMapItemResponse res = new org.openapis.openapi.models.operations.CreateSyncSyncMapItemResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncMapSyncMapItem = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapItem.class);
                res.previewSyncServiceSyncMapSyncMapItem = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandAssistantResponse createUnderstandAssistant(org.openapis.openapi.models.operations.CreateUnderstandAssistantCreateUnderstandAssistantRequest request, org.openapis.openapi.models.operations.CreateUnderstandAssistantSecurity security) throws Exception {
        return this.createUnderstandAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandAssistantResponse createUnderstandAssistant(org.openapis.openapi.models.operations.CreateUnderstandAssistantCreateUnderstandAssistantRequest request, org.openapis.openapi.models.operations.CreateUnderstandAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/understand/Assistants");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandAssistantResponse res = new org.openapis.openapi.models.operations.CreateUnderstandAssistantResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistant.class);
                res.previewUnderstandAssistant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandFieldResponse createUnderstandField(org.openapis.openapi.models.operations.CreateUnderstandFieldRequest request, org.openapis.openapi.models.operations.CreateUnderstandFieldSecurity security) throws Exception {
        return this.createUnderstandField(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandFieldResponse createUnderstandField(org.openapis.openapi.models.operations.CreateUnderstandFieldRequest request, org.openapis.openapi.models.operations.CreateUnderstandFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUnderstandFieldRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandFieldResponse res = new org.openapis.openapi.models.operations.CreateUnderstandFieldResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskField = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskField out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskField.class);
                res.previewUnderstandAssistantTaskField = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandFieldTypeResponse createUnderstandFieldType(org.openapis.openapi.models.operations.CreateUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.CreateUnderstandFieldTypeSecurity security) throws Exception {
        return this.createUnderstandFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandFieldTypeResponse createUnderstandFieldType(org.openapis.openapi.models.operations.CreateUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.CreateUnderstandFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUnderstandFieldTypeRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandFieldTypeResponse res = new org.openapis.openapi.models.operations.CreateUnderstandFieldTypeResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantFieldType = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldType.class);
                res.previewUnderstandAssistantFieldType = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandFieldValueResponse createUnderstandFieldValue(org.openapis.openapi.models.operations.CreateUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.CreateUnderstandFieldValueSecurity security) throws Exception {
        return this.createUnderstandFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandFieldValueResponse createUnderstandFieldValue(org.openapis.openapi.models.operations.CreateUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.CreateUnderstandFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUnderstandFieldValueRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandFieldValueResponse res = new org.openapis.openapi.models.operations.CreateUnderstandFieldValueResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantFieldTypeFieldValue = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldTypeFieldValue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldTypeFieldValue.class);
                res.previewUnderstandAssistantFieldTypeFieldValue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandModelBuildResponse createUnderstandModelBuild(org.openapis.openapi.models.operations.CreateUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.CreateUnderstandModelBuildSecurity security) throws Exception {
        return this.createUnderstandModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandModelBuildResponse createUnderstandModelBuild(org.openapis.openapi.models.operations.CreateUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.CreateUnderstandModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUnderstandModelBuildRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/ModelBuilds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandModelBuildResponse res = new org.openapis.openapi.models.operations.CreateUnderstandModelBuildResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantModelBuild = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantModelBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantModelBuild.class);
                res.previewUnderstandAssistantModelBuild = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandQueryResponse createUnderstandQuery(org.openapis.openapi.models.operations.CreateUnderstandQueryRequest request, org.openapis.openapi.models.operations.CreateUnderstandQuerySecurity security) throws Exception {
        return this.createUnderstandQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandQueryResponse createUnderstandQuery(org.openapis.openapi.models.operations.CreateUnderstandQueryRequest request, org.openapis.openapi.models.operations.CreateUnderstandQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUnderstandQueryRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Queries", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandQueryResponse res = new org.openapis.openapi.models.operations.CreateUnderstandQueryResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantQuery = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantQuery out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantQuery.class);
                res.previewUnderstandAssistantQuery = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandSampleResponse createUnderstandSample(org.openapis.openapi.models.operations.CreateUnderstandSampleRequest request, org.openapis.openapi.models.operations.CreateUnderstandSampleSecurity security) throws Exception {
        return this.createUnderstandSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandSampleResponse createUnderstandSample(org.openapis.openapi.models.operations.CreateUnderstandSampleRequest request, org.openapis.openapi.models.operations.CreateUnderstandSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUnderstandSampleRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandSampleResponse res = new org.openapis.openapi.models.operations.CreateUnderstandSampleResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskSample = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskSample out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskSample.class);
                res.previewUnderstandAssistantTaskSample = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateUnderstandTaskResponse createUnderstandTask(org.openapis.openapi.models.operations.CreateUnderstandTaskRequest request, org.openapis.openapi.models.operations.CreateUnderstandTaskSecurity security) throws Exception {
        return this.createUnderstandTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateUnderstandTaskResponse createUnderstandTask(org.openapis.openapi.models.operations.CreateUnderstandTaskRequest request, org.openapis.openapi.models.operations.CreateUnderstandTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_UNDERSTAND_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateUnderstandTaskRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateUnderstandTaskResponse res = new org.openapis.openapi.models.operations.CreateUnderstandTaskResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTask = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTask.class);
                res.previewUnderstandAssistantTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWirelessCommandResponse createWirelessCommand(org.openapis.openapi.models.operations.CreateWirelessCommandCreateWirelessCommandRequest request, org.openapis.openapi.models.operations.CreateWirelessCommandSecurity security) throws Exception {
        return this.createWirelessCommand(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateWirelessCommandResponse createWirelessCommand(org.openapis.openapi.models.operations.CreateWirelessCommandCreateWirelessCommandRequest request, org.openapis.openapi.models.operations.CreateWirelessCommandSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_WIRELESS_COMMAND_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/wireless/Commands");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWirelessCommandResponse res = new org.openapis.openapi.models.operations.CreateWirelessCommandResponse(contentType, httpRes.statusCode()) {{
            previewWirelessCommand = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessCommand out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessCommand.class);
                res.previewWirelessCommand = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWirelessRatePlanResponse createWirelessRatePlan(org.openapis.openapi.models.operations.CreateWirelessRatePlanCreateWirelessRatePlanRequest request, org.openapis.openapi.models.operations.CreateWirelessRatePlanSecurity security) throws Exception {
        return this.createWirelessRatePlan(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateWirelessRatePlanResponse createWirelessRatePlan(org.openapis.openapi.models.operations.CreateWirelessRatePlanCreateWirelessRatePlanRequest request, org.openapis.openapi.models.operations.CreateWirelessRatePlanSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_WIRELESS_RATE_PLAN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/wireless/RatePlans");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWirelessRatePlanResponse res = new org.openapis.openapi.models.operations.CreateWirelessRatePlanResponse(contentType, httpRes.statusCode()) {{
            previewWirelessRatePlan = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessRatePlan out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessRatePlan.class);
                res.previewWirelessRatePlan = out;
            }
        }

        return res;
    }

    /**
     * Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateResponse deleteDeployedDevicesCertificate(org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateSecurity security) throws Exception {
        return this.deleteDeployedDevicesCertificate(request, security, null);
    }

    /**
     * Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateResponse deleteDeployedDevicesCertificate(org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateResponse res = new org.openapis.openapi.models.operations.DeleteDeployedDevicesCertificateResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Deployment from the Fleet, leaving associated devices effectively undeployed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentResponse deleteDeployedDevicesDeployment(org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentSecurity security) throws Exception {
        return this.deleteDeployedDevicesDeployment(request, security, null);
    }

    /**
     * Delete a specific Deployment from the Fleet, leaving associated devices effectively undeployed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentResponse deleteDeployedDevicesDeployment(org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentResponse res = new org.openapis.openapi.models.operations.DeleteDeployedDevicesDeploymentResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Device from the Fleet, also removing it from associated Deployments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceResponse deleteDeployedDevicesDevice(org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceSecurity security) throws Exception {
        return this.deleteDeployedDevicesDevice(request, security, null);
    }

    /**
     * Delete a specific Device from the Fleet, also removing it from associated Deployments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceResponse deleteDeployedDevicesDevice(org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceResponse res = new org.openapis.openapi.models.operations.DeleteDeployedDevicesDeviceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Fleet from your account, also destroys all nested resources: Devices, Deployments, Certificates, Keys.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetResponse deleteDeployedDevicesFleet(org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetSecurity security) throws Exception {
        return this.deleteDeployedDevicesFleet(request, security, null);
    }

    /**
     * Delete a specific Fleet from your account, also destroys all nested resources: Devices, Deployments, Certificates, Keys.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetResponse deleteDeployedDevicesFleet(org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetRequest.class, baseUrl, "/DeployedDevices/Fleets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetResponse res = new org.openapis.openapi.models.operations.DeleteDeployedDevicesFleetResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesKeyResponse deleteDeployedDevicesKey(org.openapis.openapi.models.operations.DeleteDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesKeySecurity security) throws Exception {
        return this.deleteDeployedDevicesKey(request, security, null);
    }

    /**
     * Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are presenting it.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteDeployedDevicesKeyResponse deleteDeployedDevicesKey(org.openapis.openapi.models.operations.DeleteDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.DeleteDeployedDevicesKeySecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteDeployedDevicesKeyRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteDeployedDevicesKeyResponse res = new org.openapis.openapi.models.operations.DeleteDeployedDevicesKeyResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Cancel the HostedNumberOrder (only available when the status is in `received`).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderResponse deleteHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderSecurity security) throws Exception {
        return this.deleteHostedNumbersHostedNumberOrder(request, security, null);
    }

    /**
     * Cancel the HostedNumberOrder (only available when the status is in `received`).
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderResponse deleteHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderRequest.class, baseUrl, "/HostedNumbers/HostedNumberOrders/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderResponse res = new org.openapis.openapi.models.operations.DeleteHostedNumbersHostedNumberOrderResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Remove an Add-on installation from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnResponse deleteMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnSecurity security) throws Exception {
        return this.deleteMarketplaceInstalledAddOn(request, security, null);
    }

    /**
     * Remove an Add-on installation from your account
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnResponse deleteMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnRequest.class, baseUrl, "/marketplace/InstalledAddOns/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnResponse res = new org.openapis.openapi.models.operations.DeleteMarketplaceInstalledAddOnResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncDocumentResponse deleteSyncDocument(org.openapis.openapi.models.operations.DeleteSyncDocumentRequest request, org.openapis.openapi.models.operations.DeleteSyncDocumentSecurity security) throws Exception {
        return this.deleteSyncDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncDocumentResponse deleteSyncDocument(org.openapis.openapi.models.operations.DeleteSyncDocumentRequest request, org.openapis.openapi.models.operations.DeleteSyncDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncDocumentRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncDocumentResponse res = new org.openapis.openapi.models.operations.DeleteSyncDocumentResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionResponse deleteSyncDocumentPermission(org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionSecurity security) throws Exception {
        return this.deleteSyncDocumentPermission(request, security, null);
    }

    /**
     * Delete a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionResponse deleteSyncDocumentPermission(org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionResponse res = new org.openapis.openapi.models.operations.DeleteSyncDocumentPermissionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncServiceResponse deleteSyncService(org.openapis.openapi.models.operations.DeleteSyncServiceRequest request, org.openapis.openapi.models.operations.DeleteSyncServiceSecurity security) throws Exception {
        return this.deleteSyncService(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncServiceResponse deleteSyncService(org.openapis.openapi.models.operations.DeleteSyncServiceRequest request, org.openapis.openapi.models.operations.DeleteSyncServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncServiceRequest.class, baseUrl, "/Sync/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncServiceResponse res = new org.openapis.openapi.models.operations.DeleteSyncServiceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncListResponse deleteSyncSyncList(org.openapis.openapi.models.operations.DeleteSyncSyncListRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncListSecurity security) throws Exception {
        return this.deleteSyncSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncListResponse deleteSyncSyncList(org.openapis.openapi.models.operations.DeleteSyncSyncListRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncSyncListRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncSyncListResponse res = new org.openapis.openapi.models.operations.DeleteSyncSyncListResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncListItemResponse deleteSyncSyncListItem(org.openapis.openapi.models.operations.DeleteSyncSyncListItemRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncListItemSecurity security) throws Exception {
        return this.deleteSyncSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncListItemResponse deleteSyncSyncListItem(org.openapis.openapi.models.operations.DeleteSyncSyncListItemRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncSyncListItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncSyncListItemResponse res = new org.openapis.openapi.models.operations.DeleteSyncSyncListItemResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionResponse deleteSyncSyncListPermission(org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionSecurity security) throws Exception {
        return this.deleteSyncSyncListPermission(request, security, null);
    }

    /**
     * Delete a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionResponse deleteSyncSyncListPermission(org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionResponse res = new org.openapis.openapi.models.operations.DeleteSyncSyncListPermissionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncMapResponse deleteSyncSyncMap(org.openapis.openapi.models.operations.DeleteSyncSyncMapRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncMapSecurity security) throws Exception {
        return this.deleteSyncSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncMapResponse deleteSyncSyncMap(org.openapis.openapi.models.operations.DeleteSyncSyncMapRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncSyncMapRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncSyncMapResponse res = new org.openapis.openapi.models.operations.DeleteSyncSyncMapResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncMapItemResponse deleteSyncSyncMapItem(org.openapis.openapi.models.operations.DeleteSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncMapItemSecurity security) throws Exception {
        return this.deleteSyncSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSyncSyncMapItemResponse deleteSyncSyncMapItem(org.openapis.openapi.models.operations.DeleteSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncSyncMapItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncSyncMapItemResponse res = new org.openapis.openapi.models.operations.DeleteSyncSyncMapItemResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionResponse deleteSyncSyncMapPermission(org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionSecurity security) throws Exception {
        return this.deleteSyncSyncMapPermission(request, security, null);
    }

    /**
     * Delete a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionResponse deleteSyncSyncMapPermission(org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.DeleteSyncSyncMapPermissionResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandAssistantResponse deleteUnderstandAssistant(org.openapis.openapi.models.operations.DeleteUnderstandAssistantRequest request, org.openapis.openapi.models.operations.DeleteUnderstandAssistantSecurity security) throws Exception {
        return this.deleteUnderstandAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandAssistantResponse deleteUnderstandAssistant(org.openapis.openapi.models.operations.DeleteUnderstandAssistantRequest request, org.openapis.openapi.models.operations.DeleteUnderstandAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandAssistantRequest.class, baseUrl, "/understand/Assistants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandAssistantResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandAssistantResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandFieldResponse deleteUnderstandField(org.openapis.openapi.models.operations.DeleteUnderstandFieldRequest request, org.openapis.openapi.models.operations.DeleteUnderstandFieldSecurity security) throws Exception {
        return this.deleteUnderstandField(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandFieldResponse deleteUnderstandField(org.openapis.openapi.models.operations.DeleteUnderstandFieldRequest request, org.openapis.openapi.models.operations.DeleteUnderstandFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandFieldRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandFieldResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandFieldResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeResponse deleteUnderstandFieldType(org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeSecurity security) throws Exception {
        return this.deleteUnderstandFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeResponse deleteUnderstandFieldType(org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandFieldTypeResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandFieldValueResponse deleteUnderstandFieldValue(org.openapis.openapi.models.operations.DeleteUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.DeleteUnderstandFieldValueSecurity security) throws Exception {
        return this.deleteUnderstandFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandFieldValueResponse deleteUnderstandFieldValue(org.openapis.openapi.models.operations.DeleteUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.DeleteUnderstandFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandFieldValueRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandFieldValueResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandFieldValueResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandModelBuildResponse deleteUnderstandModelBuild(org.openapis.openapi.models.operations.DeleteUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.DeleteUnderstandModelBuildSecurity security) throws Exception {
        return this.deleteUnderstandModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandModelBuildResponse deleteUnderstandModelBuild(org.openapis.openapi.models.operations.DeleteUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.DeleteUnderstandModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandModelBuildRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandModelBuildResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandModelBuildResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandQueryResponse deleteUnderstandQuery(org.openapis.openapi.models.operations.DeleteUnderstandQueryRequest request, org.openapis.openapi.models.operations.DeleteUnderstandQuerySecurity security) throws Exception {
        return this.deleteUnderstandQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandQueryResponse deleteUnderstandQuery(org.openapis.openapi.models.operations.DeleteUnderstandQueryRequest request, org.openapis.openapi.models.operations.DeleteUnderstandQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandQueryRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Queries/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandQueryResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandQueryResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandSampleResponse deleteUnderstandSample(org.openapis.openapi.models.operations.DeleteUnderstandSampleRequest request, org.openapis.openapi.models.operations.DeleteUnderstandSampleSecurity security) throws Exception {
        return this.deleteUnderstandSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandSampleResponse deleteUnderstandSample(org.openapis.openapi.models.operations.DeleteUnderstandSampleRequest request, org.openapis.openapi.models.operations.DeleteUnderstandSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandSampleRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandSampleResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandSampleResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandTaskResponse deleteUnderstandTask(org.openapis.openapi.models.operations.DeleteUnderstandTaskRequest request, org.openapis.openapi.models.operations.DeleteUnderstandTaskSecurity security) throws Exception {
        return this.deleteUnderstandTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteUnderstandTaskResponse deleteUnderstandTask(org.openapis.openapi.models.operations.DeleteUnderstandTaskRequest request, org.openapis.openapi.models.operations.DeleteUnderstandTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_UNDERSTAND_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteUnderstandTaskRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteUnderstandTaskResponse res = new org.openapis.openapi.models.operations.DeleteUnderstandTaskResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWirelessRatePlanResponse deleteWirelessRatePlan(org.openapis.openapi.models.operations.DeleteWirelessRatePlanRequest request, org.openapis.openapi.models.operations.DeleteWirelessRatePlanSecurity security) throws Exception {
        return this.deleteWirelessRatePlan(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteWirelessRatePlanResponse deleteWirelessRatePlan(org.openapis.openapi.models.operations.DeleteWirelessRatePlanRequest request, org.openapis.openapi.models.operations.DeleteWirelessRatePlanSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_WIRELESS_RATE_PLAN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWirelessRatePlanRequest.class, baseUrl, "/wireless/RatePlans/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWirelessRatePlanResponse res = new org.openapis.openapi.models.operations.DeleteWirelessRatePlanResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Fetch information about a specific Certificate credential in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateResponse fetchDeployedDevicesCertificate(org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateSecurity security) throws Exception {
        return this.fetchDeployedDevicesCertificate(request, security, null);
    }

    /**
     * Fetch information about a specific Certificate credential in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateResponse fetchDeployedDevicesCertificate(org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateResponse res = new org.openapis.openapi.models.operations.FetchDeployedDevicesCertificateResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetCertificate = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetCertificate out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetCertificate.class);
                res.previewDeployedDevicesFleetCertificate = out;
            }
        }

        return res;
    }

    /**
     * Fetch information about a specific Deployment in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentResponse fetchDeployedDevicesDeployment(org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentSecurity security) throws Exception {
        return this.fetchDeployedDevicesDeployment(request, security, null);
    }

    /**
     * Fetch information about a specific Deployment in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentResponse fetchDeployedDevicesDeployment(org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentResponse res = new org.openapis.openapi.models.operations.FetchDeployedDevicesDeploymentResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDeployment.class);
                res.previewDeployedDevicesFleetDeployment = out;
            }
        }

        return res;
    }

    /**
     * Fetch information about a specific Device in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceResponse fetchDeployedDevicesDevice(org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceSecurity security) throws Exception {
        return this.fetchDeployedDevicesDevice(request, security, null);
    }

    /**
     * Fetch information about a specific Device in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceResponse fetchDeployedDevicesDevice(org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceResponse res = new org.openapis.openapi.models.operations.FetchDeployedDevicesDeviceResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetDevice = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDevice out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDevice.class);
                res.previewDeployedDevicesFleetDevice = out;
            }
        }

        return res;
    }

    /**
     * Fetch information about a specific Fleet in your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesFleetResponse fetchDeployedDevicesFleet(org.openapis.openapi.models.operations.FetchDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesFleetSecurity security) throws Exception {
        return this.fetchDeployedDevicesFleet(request, security, null);
    }

    /**
     * Fetch information about a specific Fleet in your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesFleetResponse fetchDeployedDevicesFleet(org.openapis.openapi.models.operations.FetchDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesFleetSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeployedDevicesFleetRequest.class, baseUrl, "/DeployedDevices/Fleets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeployedDevicesFleetResponse res = new org.openapis.openapi.models.operations.FetchDeployedDevicesFleetResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleet = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleet.class);
                res.previewDeployedDevicesFleet = out;
            }
        }

        return res;
    }

    /**
     * Fetch information about a specific Key credential in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesKeyResponse fetchDeployedDevicesKey(org.openapis.openapi.models.operations.FetchDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesKeySecurity security) throws Exception {
        return this.fetchDeployedDevicesKey(request, security, null);
    }

    /**
     * Fetch information about a specific Key credential in the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchDeployedDevicesKeyResponse fetchDeployedDevicesKey(org.openapis.openapi.models.operations.FetchDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.FetchDeployedDevicesKeySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDeployedDevicesKeyRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDeployedDevicesKeyResponse res = new org.openapis.openapi.models.operations.FetchDeployedDevicesKeyResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetKey = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetKey.class);
                res.previewDeployedDevicesFleetKey = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific AuthorizationDocument.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentResponse fetchHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentSecurity security) throws Exception {
        return this.fetchHostedNumbersAuthorizationDocument(request, security, null);
    }

    /**
     * Fetch a specific AuthorizationDocument.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentResponse fetchHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentRequest.class, baseUrl, "/HostedNumbers/AuthorizationDocuments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentResponse res = new org.openapis.openapi.models.operations.FetchHostedNumbersAuthorizationDocumentResponse(contentType, httpRes.statusCode()) {{
            previewHostedNumbersAuthorizationDocument = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewHostedNumbersAuthorizationDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewHostedNumbersAuthorizationDocument.class);
                res.previewHostedNumbersAuthorizationDocument = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific HostedNumberOrder.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderResponse fetchHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderSecurity security) throws Exception {
        return this.fetchHostedNumbersHostedNumberOrder(request, security, null);
    }

    /**
     * Fetch a specific HostedNumberOrder.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderResponse fetchHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderRequest.class, baseUrl, "/HostedNumbers/HostedNumberOrders/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderResponse res = new org.openapis.openapi.models.operations.FetchHostedNumbersHostedNumberOrderResponse(contentType, httpRes.statusCode()) {{
            previewHostedNumbersHostedNumberOrder = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewHostedNumbersHostedNumberOrder out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewHostedNumbersHostedNumberOrder.class);
                res.previewHostedNumbersHostedNumberOrder = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an Add-on currently available to be installed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnResponse fetchMarketplaceAvailableAddOn(org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnRequest request, org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnSecurity security) throws Exception {
        return this.fetchMarketplaceAvailableAddOn(request, security, null);
    }

    /**
     * Fetch an instance of an Add-on currently available to be installed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnResponse fetchMarketplaceAvailableAddOn(org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnRequest request, org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnRequest.class, baseUrl, "/marketplace/AvailableAddOns/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnResponse res = new org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnResponse(contentType, httpRes.statusCode()) {{
            previewMarketplaceAvailableAddOn = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewMarketplaceAvailableAddOn out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewMarketplaceAvailableAddOn.class);
                res.previewMarketplaceAvailableAddOn = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an Extension for the Available Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionResponse fetchMarketplaceAvailableAddOnExtension(org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionRequest request, org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionSecurity security) throws Exception {
        return this.fetchMarketplaceAvailableAddOnExtension(request, security, null);
    }

    /**
     * Fetch an instance of an Extension for the Available Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionResponse fetchMarketplaceAvailableAddOnExtension(org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionRequest request, org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionRequest.class, baseUrl, "/marketplace/AvailableAddOns/{AvailableAddOnSid}/Extensions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionResponse res = new org.openapis.openapi.models.operations.FetchMarketplaceAvailableAddOnExtensionResponse(contentType, httpRes.statusCode()) {{
            previewMarketplaceAvailableAddOnAvailableAddOnExtension = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewMarketplaceAvailableAddOnAvailableAddOnExtension out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewMarketplaceAvailableAddOnAvailableAddOnExtension.class);
                res.previewMarketplaceAvailableAddOnAvailableAddOnExtension = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an Add-on currently installed on this Account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnResponse fetchMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnSecurity security) throws Exception {
        return this.fetchMarketplaceInstalledAddOn(request, security, null);
    }

    /**
     * Fetch an instance of an Add-on currently installed on this Account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnResponse fetchMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnRequest.class, baseUrl, "/marketplace/InstalledAddOns/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnResponse res = new org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnResponse(contentType, httpRes.statusCode()) {{
            previewMarketplaceInstalledAddOn = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOn out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOn.class);
                res.previewMarketplaceInstalledAddOn = out;
            }
        }

        return res;
    }

    /**
     * Fetch an instance of an Extension for the Installed Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionResponse fetchMarketplaceInstalledAddOnExtension(org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionRequest request, org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionSecurity security) throws Exception {
        return this.fetchMarketplaceInstalledAddOnExtension(request, security, null);
    }

    /**
     * Fetch an instance of an Extension for the Installed Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionResponse fetchMarketplaceInstalledAddOnExtension(org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionRequest request, org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionRequest.class, baseUrl, "/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionResponse res = new org.openapis.openapi.models.operations.FetchMarketplaceInstalledAddOnExtensionResponse(contentType, httpRes.statusCode()) {{
            previewMarketplaceInstalledAddOnInstalledAddOnExtension = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOnInstalledAddOnExtension out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOnInstalledAddOnExtension.class);
                res.previewMarketplaceInstalledAddOnInstalledAddOnExtension = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncDocumentResponse fetchSyncDocument(org.openapis.openapi.models.operations.FetchSyncDocumentRequest request, org.openapis.openapi.models.operations.FetchSyncDocumentSecurity security) throws Exception {
        return this.fetchSyncDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncDocumentResponse fetchSyncDocument(org.openapis.openapi.models.operations.FetchSyncDocumentRequest request, org.openapis.openapi.models.operations.FetchSyncDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncDocumentRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncDocumentResponse res = new org.openapis.openapi.models.operations.FetchSyncDocumentResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceDocument = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceDocument.class);
                res.previewSyncServiceDocument = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncDocumentPermissionResponse fetchSyncDocumentPermission(org.openapis.openapi.models.operations.FetchSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncDocumentPermissionSecurity security) throws Exception {
        return this.fetchSyncDocumentPermission(request, security, null);
    }

    /**
     * Fetch a specific Sync Document Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncDocumentPermissionResponse fetchSyncDocumentPermission(org.openapis.openapi.models.operations.FetchSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncDocumentPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncDocumentPermissionResponse res = new org.openapis.openapi.models.operations.FetchSyncDocumentPermissionResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceDocumentDocumentPermission = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceDocumentDocumentPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceDocumentDocumentPermission.class);
                res.previewSyncServiceDocumentDocumentPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncServiceResponse fetchSyncService(org.openapis.openapi.models.operations.FetchSyncServiceRequest request, org.openapis.openapi.models.operations.FetchSyncServiceSecurity security) throws Exception {
        return this.fetchSyncService(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncServiceResponse fetchSyncService(org.openapis.openapi.models.operations.FetchSyncServiceRequest request, org.openapis.openapi.models.operations.FetchSyncServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncServiceRequest.class, baseUrl, "/Sync/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncServiceResponse res = new org.openapis.openapi.models.operations.FetchSyncServiceResponse(contentType, httpRes.statusCode()) {{
            previewSyncService = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncService out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncService.class);
                res.previewSyncService = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncListResponse fetchSyncSyncList(org.openapis.openapi.models.operations.FetchSyncSyncListRequest request, org.openapis.openapi.models.operations.FetchSyncSyncListSecurity security) throws Exception {
        return this.fetchSyncSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncListResponse fetchSyncSyncList(org.openapis.openapi.models.operations.FetchSyncSyncListRequest request, org.openapis.openapi.models.operations.FetchSyncSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncSyncListRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncSyncListResponse res = new org.openapis.openapi.models.operations.FetchSyncSyncListResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncList = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncList out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncList.class);
                res.previewSyncServiceSyncList = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncListItemResponse fetchSyncSyncListItem(org.openapis.openapi.models.operations.FetchSyncSyncListItemRequest request, org.openapis.openapi.models.operations.FetchSyncSyncListItemSecurity security) throws Exception {
        return this.fetchSyncSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncListItemResponse fetchSyncSyncListItem(org.openapis.openapi.models.operations.FetchSyncSyncListItemRequest request, org.openapis.openapi.models.operations.FetchSyncSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncSyncListItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncSyncListItemResponse res = new org.openapis.openapi.models.operations.FetchSyncSyncListItemResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncListSyncListItem = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListItem.class);
                res.previewSyncServiceSyncListSyncListItem = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncSyncListPermissionResponse fetchSyncSyncListPermission(org.openapis.openapi.models.operations.FetchSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncSyncListPermissionSecurity security) throws Exception {
        return this.fetchSyncSyncListPermission(request, security, null);
    }

    /**
     * Fetch a specific Sync List Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncSyncListPermissionResponse fetchSyncSyncListPermission(org.openapis.openapi.models.operations.FetchSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncSyncListPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncSyncListPermissionResponse res = new org.openapis.openapi.models.operations.FetchSyncSyncListPermissionResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncListSyncListPermission = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListPermission.class);
                res.previewSyncServiceSyncListSyncListPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncMapResponse fetchSyncSyncMap(org.openapis.openapi.models.operations.FetchSyncSyncMapRequest request, org.openapis.openapi.models.operations.FetchSyncSyncMapSecurity security) throws Exception {
        return this.fetchSyncSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncMapResponse fetchSyncSyncMap(org.openapis.openapi.models.operations.FetchSyncSyncMapRequest request, org.openapis.openapi.models.operations.FetchSyncSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncSyncMapRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncSyncMapResponse res = new org.openapis.openapi.models.operations.FetchSyncSyncMapResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncMap = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncMap out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncMap.class);
                res.previewSyncServiceSyncMap = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncMapItemResponse fetchSyncSyncMapItem(org.openapis.openapi.models.operations.FetchSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.FetchSyncSyncMapItemSecurity security) throws Exception {
        return this.fetchSyncSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSyncSyncMapItemResponse fetchSyncSyncMapItem(org.openapis.openapi.models.operations.FetchSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.FetchSyncSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncSyncMapItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncSyncMapItemResponse res = new org.openapis.openapi.models.operations.FetchSyncSyncMapItemResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncMapSyncMapItem = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapItem.class);
                res.previewSyncServiceSyncMapSyncMapItem = out;
            }
        }

        return res;
    }

    /**
     * Fetch a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionResponse fetchSyncSyncMapPermission(org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionSecurity security) throws Exception {
        return this.fetchSyncSyncMapPermission(request, security, null);
    }

    /**
     * Fetch a specific Sync Map Permission.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionResponse fetchSyncSyncMapPermission(org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.FetchSyncSyncMapPermissionResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncMapSyncMapPermission = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapPermission.class);
                res.previewSyncServiceSyncMapSyncMapPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandAssistantResponse fetchUnderstandAssistant(org.openapis.openapi.models.operations.FetchUnderstandAssistantRequest request, org.openapis.openapi.models.operations.FetchUnderstandAssistantSecurity security) throws Exception {
        return this.fetchUnderstandAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandAssistantResponse fetchUnderstandAssistant(org.openapis.openapi.models.operations.FetchUnderstandAssistantRequest request, org.openapis.openapi.models.operations.FetchUnderstandAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandAssistantRequest.class, baseUrl, "/understand/Assistants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandAssistantResponse res = new org.openapis.openapi.models.operations.FetchUnderstandAssistantResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistant.class);
                res.previewUnderstandAssistant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsResponse fetchUnderstandAssistantFallbackActions(org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsRequest request, org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsSecurity security) throws Exception {
        return this.fetchUnderstandAssistantFallbackActions(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsResponse fetchUnderstandAssistantFallbackActions(org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsRequest request, org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FallbackActions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsResponse res = new org.openapis.openapi.models.operations.FetchUnderstandAssistantFallbackActionsResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantAssistantFallbackActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantFallbackActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantFallbackActions.class);
                res.previewUnderstandAssistantAssistantFallbackActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsResponse fetchUnderstandAssistantInitiationActions(org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsRequest request, org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsSecurity security) throws Exception {
        return this.fetchUnderstandAssistantInitiationActions(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsResponse fetchUnderstandAssistantInitiationActions(org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsRequest request, org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/InitiationActions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsResponse res = new org.openapis.openapi.models.operations.FetchUnderstandAssistantInitiationActionsResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantAssistantInitiationActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantInitiationActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantInitiationActions.class);
                res.previewUnderstandAssistantAssistantInitiationActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandDialogueResponse fetchUnderstandDialogue(org.openapis.openapi.models.operations.FetchUnderstandDialogueRequest request, org.openapis.openapi.models.operations.FetchUnderstandDialogueSecurity security) throws Exception {
        return this.fetchUnderstandDialogue(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandDialogueResponse fetchUnderstandDialogue(org.openapis.openapi.models.operations.FetchUnderstandDialogueRequest request, org.openapis.openapi.models.operations.FetchUnderstandDialogueSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_DIALOGUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandDialogueRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Dialogues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandDialogueResponse res = new org.openapis.openapi.models.operations.FetchUnderstandDialogueResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantDialogue = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantDialogue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantDialogue.class);
                res.previewUnderstandAssistantDialogue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandFieldResponse fetchUnderstandField(org.openapis.openapi.models.operations.FetchUnderstandFieldRequest request, org.openapis.openapi.models.operations.FetchUnderstandFieldSecurity security) throws Exception {
        return this.fetchUnderstandField(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandFieldResponse fetchUnderstandField(org.openapis.openapi.models.operations.FetchUnderstandFieldRequest request, org.openapis.openapi.models.operations.FetchUnderstandFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandFieldRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandFieldResponse res = new org.openapis.openapi.models.operations.FetchUnderstandFieldResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskField = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskField out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskField.class);
                res.previewUnderstandAssistantTaskField = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandFieldTypeResponse fetchUnderstandFieldType(org.openapis.openapi.models.operations.FetchUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.FetchUnderstandFieldTypeSecurity security) throws Exception {
        return this.fetchUnderstandFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandFieldTypeResponse fetchUnderstandFieldType(org.openapis.openapi.models.operations.FetchUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.FetchUnderstandFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandFieldTypeRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandFieldTypeResponse res = new org.openapis.openapi.models.operations.FetchUnderstandFieldTypeResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantFieldType = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldType.class);
                res.previewUnderstandAssistantFieldType = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandFieldValueResponse fetchUnderstandFieldValue(org.openapis.openapi.models.operations.FetchUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.FetchUnderstandFieldValueSecurity security) throws Exception {
        return this.fetchUnderstandFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandFieldValueResponse fetchUnderstandFieldValue(org.openapis.openapi.models.operations.FetchUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.FetchUnderstandFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandFieldValueRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandFieldValueResponse res = new org.openapis.openapi.models.operations.FetchUnderstandFieldValueResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantFieldTypeFieldValue = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldTypeFieldValue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldTypeFieldValue.class);
                res.previewUnderstandAssistantFieldTypeFieldValue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandModelBuildResponse fetchUnderstandModelBuild(org.openapis.openapi.models.operations.FetchUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.FetchUnderstandModelBuildSecurity security) throws Exception {
        return this.fetchUnderstandModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandModelBuildResponse fetchUnderstandModelBuild(org.openapis.openapi.models.operations.FetchUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.FetchUnderstandModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandModelBuildRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandModelBuildResponse res = new org.openapis.openapi.models.operations.FetchUnderstandModelBuildResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantModelBuild = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantModelBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantModelBuild.class);
                res.previewUnderstandAssistantModelBuild = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandQueryResponse fetchUnderstandQuery(org.openapis.openapi.models.operations.FetchUnderstandQueryRequest request, org.openapis.openapi.models.operations.FetchUnderstandQuerySecurity security) throws Exception {
        return this.fetchUnderstandQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandQueryResponse fetchUnderstandQuery(org.openapis.openapi.models.operations.FetchUnderstandQueryRequest request, org.openapis.openapi.models.operations.FetchUnderstandQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandQueryRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Queries/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandQueryResponse res = new org.openapis.openapi.models.operations.FetchUnderstandQueryResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantQuery = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantQuery out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantQuery.class);
                res.previewUnderstandAssistantQuery = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandSampleResponse fetchUnderstandSample(org.openapis.openapi.models.operations.FetchUnderstandSampleRequest request, org.openapis.openapi.models.operations.FetchUnderstandSampleSecurity security) throws Exception {
        return this.fetchUnderstandSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandSampleResponse fetchUnderstandSample(org.openapis.openapi.models.operations.FetchUnderstandSampleRequest request, org.openapis.openapi.models.operations.FetchUnderstandSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandSampleRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandSampleResponse res = new org.openapis.openapi.models.operations.FetchUnderstandSampleResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskSample = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskSample out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskSample.class);
                res.previewUnderstandAssistantTaskSample = out;
            }
        }

        return res;
    }

    /**
     * Returns Style sheet JSON object for this Assistant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUnderstandStyleSheetResponse fetchUnderstandStyleSheet(org.openapis.openapi.models.operations.FetchUnderstandStyleSheetRequest request, org.openapis.openapi.models.operations.FetchUnderstandStyleSheetSecurity security) throws Exception {
        return this.fetchUnderstandStyleSheet(request, security, null);
    }

    /**
     * Returns Style sheet JSON object for this Assistant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUnderstandStyleSheetResponse fetchUnderstandStyleSheet(org.openapis.openapi.models.operations.FetchUnderstandStyleSheetRequest request, org.openapis.openapi.models.operations.FetchUnderstandStyleSheetSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_STYLE_SHEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandStyleSheetRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/StyleSheet", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandStyleSheetResponse res = new org.openapis.openapi.models.operations.FetchUnderstandStyleSheetResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantStyleSheet = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantStyleSheet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantStyleSheet.class);
                res.previewUnderstandAssistantStyleSheet = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandTaskResponse fetchUnderstandTask(org.openapis.openapi.models.operations.FetchUnderstandTaskRequest request, org.openapis.openapi.models.operations.FetchUnderstandTaskSecurity security) throws Exception {
        return this.fetchUnderstandTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandTaskResponse fetchUnderstandTask(org.openapis.openapi.models.operations.FetchUnderstandTaskRequest request, org.openapis.openapi.models.operations.FetchUnderstandTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandTaskRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandTaskResponse res = new org.openapis.openapi.models.operations.FetchUnderstandTaskResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTask = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTask.class);
                res.previewUnderstandAssistantTask = out;
            }
        }

        return res;
    }

    /**
     * Returns JSON actions for this Task.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUnderstandTaskActionsResponse fetchUnderstandTaskActions(org.openapis.openapi.models.operations.FetchUnderstandTaskActionsRequest request, org.openapis.openapi.models.operations.FetchUnderstandTaskActionsSecurity security) throws Exception {
        return this.fetchUnderstandTaskActions(request, security, null);
    }

    /**
     * Returns JSON actions for this Task.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchUnderstandTaskActionsResponse fetchUnderstandTaskActions(org.openapis.openapi.models.operations.FetchUnderstandTaskActionsRequest request, org.openapis.openapi.models.operations.FetchUnderstandTaskActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_TASK_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandTaskActionsRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandTaskActionsResponse res = new org.openapis.openapi.models.operations.FetchUnderstandTaskActionsResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskTaskActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskTaskActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskTaskActions.class);
                res.previewUnderstandAssistantTaskTaskActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsResponse fetchUnderstandTaskStatistics(org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsRequest request, org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsSecurity security) throws Exception {
        return this.fetchUnderstandTaskStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsResponse fetchUnderstandTaskStatistics(org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsRequest request, org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_UNDERSTAND_TASK_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsResponse res = new org.openapis.openapi.models.operations.FetchUnderstandTaskStatisticsResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskTaskStatistics = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskTaskStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskTaskStatistics.class);
                res.previewUnderstandAssistantTaskTaskStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWirelessCommandResponse fetchWirelessCommand(org.openapis.openapi.models.operations.FetchWirelessCommandRequest request, org.openapis.openapi.models.operations.FetchWirelessCommandSecurity security) throws Exception {
        return this.fetchWirelessCommand(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWirelessCommandResponse fetchWirelessCommand(org.openapis.openapi.models.operations.FetchWirelessCommandRequest request, org.openapis.openapi.models.operations.FetchWirelessCommandSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WIRELESS_COMMAND_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWirelessCommandRequest.class, baseUrl, "/wireless/Commands/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWirelessCommandResponse res = new org.openapis.openapi.models.operations.FetchWirelessCommandResponse(contentType, httpRes.statusCode()) {{
            previewWirelessCommand = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessCommand out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessCommand.class);
                res.previewWirelessCommand = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWirelessRatePlanResponse fetchWirelessRatePlan(org.openapis.openapi.models.operations.FetchWirelessRatePlanRequest request, org.openapis.openapi.models.operations.FetchWirelessRatePlanSecurity security) throws Exception {
        return this.fetchWirelessRatePlan(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWirelessRatePlanResponse fetchWirelessRatePlan(org.openapis.openapi.models.operations.FetchWirelessRatePlanRequest request, org.openapis.openapi.models.operations.FetchWirelessRatePlanSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WIRELESS_RATE_PLAN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWirelessRatePlanRequest.class, baseUrl, "/wireless/RatePlans/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWirelessRatePlanResponse res = new org.openapis.openapi.models.operations.FetchWirelessRatePlanResponse(contentType, httpRes.statusCode()) {{
            previewWirelessRatePlan = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessRatePlan out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessRatePlan.class);
                res.previewWirelessRatePlan = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWirelessSimResponse fetchWirelessSim(org.openapis.openapi.models.operations.FetchWirelessSimRequest request, org.openapis.openapi.models.operations.FetchWirelessSimSecurity security) throws Exception {
        return this.fetchWirelessSim(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWirelessSimResponse fetchWirelessSim(org.openapis.openapi.models.operations.FetchWirelessSimRequest request, org.openapis.openapi.models.operations.FetchWirelessSimSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WIRELESS_SIM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWirelessSimRequest.class, baseUrl, "/wireless/Sims/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWirelessSimResponse res = new org.openapis.openapi.models.operations.FetchWirelessSimResponse(contentType, httpRes.statusCode()) {{
            previewWirelessSim = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessSim out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessSim.class);
                res.previewWirelessSim = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWirelessUsageResponse fetchWirelessUsage(org.openapis.openapi.models.operations.FetchWirelessUsageRequest request, org.openapis.openapi.models.operations.FetchWirelessUsageSecurity security) throws Exception {
        return this.fetchWirelessUsage(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWirelessUsageResponse fetchWirelessUsage(org.openapis.openapi.models.operations.FetchWirelessUsageRequest request, org.openapis.openapi.models.operations.FetchWirelessUsageSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WIRELESS_USAGE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWirelessUsageRequest.class, baseUrl, "/wireless/Sims/{SimSid}/Usage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FetchWirelessUsageRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWirelessUsageResponse res = new org.openapis.openapi.models.operations.FetchWirelessUsageResponse(contentType, httpRes.statusCode()) {{
            previewWirelessSimUsage = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessSimUsage out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessSimUsage.class);
                res.previewWirelessSimUsage = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Certificate credentials belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesCertificateResponse listDeployedDevicesCertificate(org.openapis.openapi.models.operations.ListDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesCertificateSecurity security) throws Exception {
        return this.listDeployedDevicesCertificate(request, security, null);
    }

    /**
     * Retrieve a list of all Certificate credentials belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesCertificateResponse listDeployedDevicesCertificate(org.openapis.openapi.models.operations.ListDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesCertificateSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeployedDevicesCertificateRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Certificates", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeployedDevicesCertificateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeployedDevicesCertificateResponse res = new org.openapis.openapi.models.operations.ListDeployedDevicesCertificateResponse(contentType, httpRes.statusCode()) {{
            listDeployedDevicesCertificateResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeployedDevicesCertificateListDeployedDevicesCertificateResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeployedDevicesCertificateListDeployedDevicesCertificateResponse.class);
                res.listDeployedDevicesCertificateResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Deployments belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentResponse listDeployedDevicesDeployment(org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentSecurity security) throws Exception {
        return this.listDeployedDevicesDeployment(request, security, null);
    }

    /**
     * Retrieve a list of all Deployments belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentResponse listDeployedDevicesDeployment(org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Deployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentResponse res = new org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentResponse(contentType, httpRes.statusCode()) {{
            listDeployedDevicesDeploymentResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentListDeployedDevicesDeploymentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeployedDevicesDeploymentListDeployedDevicesDeploymentResponse.class);
                res.listDeployedDevicesDeploymentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Devices belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesDeviceResponse listDeployedDevicesDevice(org.openapis.openapi.models.operations.ListDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesDeviceSecurity security) throws Exception {
        return this.listDeployedDevicesDevice(request, security, null);
    }

    /**
     * Retrieve a list of all Devices belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesDeviceResponse listDeployedDevicesDevice(org.openapis.openapi.models.operations.ListDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesDeviceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeployedDevicesDeviceRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Devices", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeployedDevicesDeviceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeployedDevicesDeviceResponse res = new org.openapis.openapi.models.operations.ListDeployedDevicesDeviceResponse(contentType, httpRes.statusCode()) {{
            listDeployedDevicesDeviceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeployedDevicesDeviceListDeployedDevicesDeviceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeployedDevicesDeviceListDeployedDevicesDeviceResponse.class);
                res.listDeployedDevicesDeviceResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Fleets belonging to your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesFleetResponse listDeployedDevicesFleet(org.openapis.openapi.models.operations.ListDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesFleetSecurity security) throws Exception {
        return this.listDeployedDevicesFleet(request, security, null);
    }

    /**
     * Retrieve a list of all Fleets belonging to your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesFleetResponse listDeployedDevicesFleet(org.openapis.openapi.models.operations.ListDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesFleetSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/DeployedDevices/Fleets");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeployedDevicesFleetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeployedDevicesFleetResponse res = new org.openapis.openapi.models.operations.ListDeployedDevicesFleetResponse(contentType, httpRes.statusCode()) {{
            listDeployedDevicesFleetResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeployedDevicesFleetListDeployedDevicesFleetResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeployedDevicesFleetListDeployedDevicesFleetResponse.class);
                res.listDeployedDevicesFleetResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Keys credentials belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesKeyResponse listDeployedDevicesKey(org.openapis.openapi.models.operations.ListDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesKeySecurity security) throws Exception {
        return this.listDeployedDevicesKey(request, security, null);
    }

    /**
     * Retrieve a list of all Keys credentials belonging to the Fleet.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListDeployedDevicesKeyResponse listDeployedDevicesKey(org.openapis.openapi.models.operations.ListDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.ListDeployedDevicesKeySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListDeployedDevicesKeyRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Keys", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListDeployedDevicesKeyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListDeployedDevicesKeyResponse res = new org.openapis.openapi.models.operations.ListDeployedDevicesKeyResponse(contentType, httpRes.statusCode()) {{
            listDeployedDevicesKeyResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListDeployedDevicesKeyListDeployedDevicesKeyResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListDeployedDevicesKeyListDeployedDevicesKeyResponse.class);
                res.listDeployedDevicesKeyResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of AuthorizationDocuments belonging to the account initiating the request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentResponse listHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentSecurity security) throws Exception {
        return this.listHostedNumbersAuthorizationDocument(request, security, null);
    }

    /**
     * Retrieve a list of AuthorizationDocuments belonging to the account initiating the request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentResponse listHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/HostedNumbers/AuthorizationDocuments");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentResponse res = new org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentResponse(contentType, httpRes.statusCode()) {{
            listHostedNumbersAuthorizationDocumentResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentListHostedNumbersAuthorizationDocumentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListHostedNumbersAuthorizationDocumentListHostedNumbersAuthorizationDocumentResponse.class);
                res.listHostedNumbersAuthorizationDocumentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of dependent HostedNumberOrders belonging to the AuthorizationDocument.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderResponse listHostedNumbersDependentHostedNumberOrder(org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderRequest request, org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderSecurity security) throws Exception {
        return this.listHostedNumbersDependentHostedNumberOrder(request, security, null);
    }

    /**
     * Retrieve a list of dependent HostedNumberOrders belonging to the AuthorizationDocument.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderResponse listHostedNumbersDependentHostedNumberOrder(org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderRequest request, org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_HOSTED_NUMBERS_DEPENDENT_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderRequest.class, baseUrl, "/HostedNumbers/AuthorizationDocuments/{SigningDocumentSid}/DependentHostedNumberOrders", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderResponse res = new org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderResponse(contentType, httpRes.statusCode()) {{
            listHostedNumbersDependentHostedNumberOrderResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderListHostedNumbersDependentHostedNumberOrderResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListHostedNumbersDependentHostedNumberOrderListHostedNumbersDependentHostedNumberOrderResponse.class);
                res.listHostedNumbersDependentHostedNumberOrderResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of HostedNumberOrders belonging to the account initiating the request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderResponse listHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderSecurity security) throws Exception {
        return this.listHostedNumbersHostedNumberOrder(request, security, null);
    }

    /**
     * Retrieve a list of HostedNumberOrders belonging to the account initiating the request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderResponse listHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/HostedNumbers/HostedNumberOrders");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderResponse res = new org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderResponse(contentType, httpRes.statusCode()) {{
            listHostedNumbersHostedNumberOrderResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderListHostedNumbersHostedNumberOrderResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListHostedNumbersHostedNumberOrderListHostedNumbersHostedNumberOrderResponse.class);
                res.listHostedNumbersHostedNumberOrderResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Add-ons currently available to be installed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnResponse listMarketplaceAvailableAddOn(org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnRequest request, org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnSecurity security) throws Exception {
        return this.listMarketplaceAvailableAddOn(request, security, null);
    }

    /**
     * Retrieve a list of Add-ons currently available to be installed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnResponse listMarketplaceAvailableAddOn(org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnRequest request, org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MARKETPLACE_AVAILABLE_ADD_ON_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/marketplace/AvailableAddOns");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnResponse res = new org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnResponse(contentType, httpRes.statusCode()) {{
            listMarketplaceAvailableAddOnResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnListMarketplaceAvailableAddOnResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnListMarketplaceAvailableAddOnResponse.class);
                res.listMarketplaceAvailableAddOnResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Extensions for the Available Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionResponse listMarketplaceAvailableAddOnExtension(org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionRequest request, org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionSecurity security) throws Exception {
        return this.listMarketplaceAvailableAddOnExtension(request, security, null);
    }

    /**
     * Retrieve a list of Extensions for the Available Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionResponse listMarketplaceAvailableAddOnExtension(org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionRequest request, org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MARKETPLACE_AVAILABLE_ADD_ON_EXTENSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionRequest.class, baseUrl, "/marketplace/AvailableAddOns/{AvailableAddOnSid}/Extensions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionResponse res = new org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionResponse(contentType, httpRes.statusCode()) {{
            listMarketplaceAvailableAddOnExtensionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionListMarketplaceAvailableAddOnExtensionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMarketplaceAvailableAddOnExtensionListMarketplaceAvailableAddOnExtensionResponse.class);
                res.listMarketplaceAvailableAddOnExtensionResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Add-ons currently installed on this Account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnResponse listMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnSecurity security) throws Exception {
        return this.listMarketplaceInstalledAddOn(request, security, null);
    }

    /**
     * Retrieve a list of Add-ons currently installed on this Account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnResponse listMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/marketplace/InstalledAddOns");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnResponse res = new org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnResponse(contentType, httpRes.statusCode()) {{
            listMarketplaceInstalledAddOnResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnListMarketplaceInstalledAddOnResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnListMarketplaceInstalledAddOnResponse.class);
                res.listMarketplaceInstalledAddOnResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of Extensions for the Installed Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionResponse listMarketplaceInstalledAddOnExtension(org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionRequest request, org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionSecurity security) throws Exception {
        return this.listMarketplaceInstalledAddOnExtension(request, security, null);
    }

    /**
     * Retrieve a list of Extensions for the Installed Add-on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionResponse listMarketplaceInstalledAddOnExtension(org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionRequest request, org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionRequest.class, baseUrl, "/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionResponse res = new org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionResponse(contentType, httpRes.statusCode()) {{
            listMarketplaceInstalledAddOnExtensionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionListMarketplaceInstalledAddOnExtensionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListMarketplaceInstalledAddOnExtensionListMarketplaceInstalledAddOnExtensionResponse.class);
                res.listMarketplaceInstalledAddOnExtensionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncDocumentResponse listSyncDocument(org.openapis.openapi.models.operations.ListSyncDocumentRequest request, org.openapis.openapi.models.operations.ListSyncDocumentSecurity security) throws Exception {
        return this.listSyncDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncDocumentResponse listSyncDocument(org.openapis.openapi.models.operations.ListSyncDocumentRequest request, org.openapis.openapi.models.operations.ListSyncDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncDocumentRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncDocumentRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncDocumentResponse res = new org.openapis.openapi.models.operations.ListSyncDocumentResponse(contentType, httpRes.statusCode()) {{
            listSyncDocumentResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncDocumentListSyncDocumentResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncDocumentListSyncDocumentResponse.class);
                res.listSyncDocumentResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncDocumentPermissionResponse listSyncDocumentPermission(org.openapis.openapi.models.operations.ListSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.ListSyncDocumentPermissionSecurity security) throws Exception {
        return this.listSyncDocumentPermission(request, security, null);
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncDocumentPermissionResponse listSyncDocumentPermission(org.openapis.openapi.models.operations.ListSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.ListSyncDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncDocumentPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncDocumentPermissionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncDocumentPermissionResponse res = new org.openapis.openapi.models.operations.ListSyncDocumentPermissionResponse(contentType, httpRes.statusCode()) {{
            listSyncDocumentPermissionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncDocumentPermissionListSyncDocumentPermissionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncDocumentPermissionListSyncDocumentPermissionResponse.class);
                res.listSyncDocumentPermissionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncServiceResponse listSyncService(org.openapis.openapi.models.operations.ListSyncServiceRequest request, org.openapis.openapi.models.operations.ListSyncServiceSecurity security) throws Exception {
        return this.listSyncService(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncServiceResponse listSyncService(org.openapis.openapi.models.operations.ListSyncServiceRequest request, org.openapis.openapi.models.operations.ListSyncServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/Sync/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncServiceResponse res = new org.openapis.openapi.models.operations.ListSyncServiceResponse(contentType, httpRes.statusCode()) {{
            listSyncServiceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncServiceListSyncServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncServiceListSyncServiceResponse.class);
                res.listSyncServiceResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncSyncListResponse listSyncSyncList(org.openapis.openapi.models.operations.ListSyncSyncListRequest request, org.openapis.openapi.models.operations.ListSyncSyncListSecurity security) throws Exception {
        return this.listSyncSyncList(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncSyncListResponse listSyncSyncList(org.openapis.openapi.models.operations.ListSyncSyncListRequest request, org.openapis.openapi.models.operations.ListSyncSyncListSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_SYNC_LIST_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncSyncListRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncSyncListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncSyncListResponse res = new org.openapis.openapi.models.operations.ListSyncSyncListResponse(contentType, httpRes.statusCode()) {{
            listSyncSyncListResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncSyncListListSyncSyncListResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncSyncListListSyncSyncListResponse.class);
                res.listSyncSyncListResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncSyncListItemResponse listSyncSyncListItem(org.openapis.openapi.models.operations.ListSyncSyncListItemRequest request, org.openapis.openapi.models.operations.ListSyncSyncListItemSecurity security) throws Exception {
        return this.listSyncSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncSyncListItemResponse listSyncSyncListItem(org.openapis.openapi.models.operations.ListSyncSyncListItemRequest request, org.openapis.openapi.models.operations.ListSyncSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncSyncListItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncSyncListItemRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncSyncListItemResponse res = new org.openapis.openapi.models.operations.ListSyncSyncListItemResponse(contentType, httpRes.statusCode()) {{
            listSyncSyncListItemResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncSyncListItemListSyncSyncListItemResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncSyncListItemListSyncSyncListItemResponse.class);
                res.listSyncSyncListItemResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncSyncListPermissionResponse listSyncSyncListPermission(org.openapis.openapi.models.operations.ListSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.ListSyncSyncListPermissionSecurity security) throws Exception {
        return this.listSyncSyncListPermission(request, security, null);
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncSyncListPermissionResponse listSyncSyncListPermission(org.openapis.openapi.models.operations.ListSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.ListSyncSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncSyncListPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncSyncListPermissionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncSyncListPermissionResponse res = new org.openapis.openapi.models.operations.ListSyncSyncListPermissionResponse(contentType, httpRes.statusCode()) {{
            listSyncSyncListPermissionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncSyncListPermissionListSyncSyncListPermissionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncSyncListPermissionListSyncSyncListPermissionResponse.class);
                res.listSyncSyncListPermissionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncSyncMapResponse listSyncSyncMap(org.openapis.openapi.models.operations.ListSyncSyncMapRequest request, org.openapis.openapi.models.operations.ListSyncSyncMapSecurity security) throws Exception {
        return this.listSyncSyncMap(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncSyncMapResponse listSyncSyncMap(org.openapis.openapi.models.operations.ListSyncSyncMapRequest request, org.openapis.openapi.models.operations.ListSyncSyncMapSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_SYNC_MAP_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncSyncMapRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncSyncMapRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncSyncMapResponse res = new org.openapis.openapi.models.operations.ListSyncSyncMapResponse(contentType, httpRes.statusCode()) {{
            listSyncSyncMapResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncSyncMapListSyncSyncMapResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncSyncMapListSyncSyncMapResponse.class);
                res.listSyncSyncMapResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSyncSyncMapItemResponse listSyncSyncMapItem(org.openapis.openapi.models.operations.ListSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.ListSyncSyncMapItemSecurity security) throws Exception {
        return this.listSyncSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSyncSyncMapItemResponse listSyncSyncMapItem(org.openapis.openapi.models.operations.ListSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.ListSyncSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncSyncMapItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncSyncMapItemRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncSyncMapItemResponse res = new org.openapis.openapi.models.operations.ListSyncSyncMapItemResponse(contentType, httpRes.statusCode()) {{
            listSyncSyncMapItemResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncSyncMapItemListSyncSyncMapItemResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncSyncMapItemListSyncSyncMapItemResponse.class);
                res.listSyncSyncMapItemResponse = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncSyncMapPermissionResponse listSyncSyncMapPermission(org.openapis.openapi.models.operations.ListSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.ListSyncSyncMapPermissionSecurity security) throws Exception {
        return this.listSyncSyncMapPermission(request, security, null);
    }

    /**
     * Retrieve a list of all Permissions applying to a Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListSyncSyncMapPermissionResponse listSyncSyncMapPermission(org.openapis.openapi.models.operations.ListSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.ListSyncSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSyncSyncMapPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSyncSyncMapPermissionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSyncSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.ListSyncSyncMapPermissionResponse(contentType, httpRes.statusCode()) {{
            listSyncSyncMapPermissionResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSyncSyncMapPermissionListSyncSyncMapPermissionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSyncSyncMapPermissionListSyncSyncMapPermissionResponse.class);
                res.listSyncSyncMapPermissionResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandAssistantResponse listUnderstandAssistant(org.openapis.openapi.models.operations.ListUnderstandAssistantRequest request, org.openapis.openapi.models.operations.ListUnderstandAssistantSecurity security) throws Exception {
        return this.listUnderstandAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandAssistantResponse listUnderstandAssistant(org.openapis.openapi.models.operations.ListUnderstandAssistantRequest request, org.openapis.openapi.models.operations.ListUnderstandAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/understand/Assistants");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandAssistantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandAssistantResponse res = new org.openapis.openapi.models.operations.ListUnderstandAssistantResponse(contentType, httpRes.statusCode()) {{
            listUnderstandAssistantResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandAssistantListUnderstandAssistantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandAssistantListUnderstandAssistantResponse.class);
                res.listUnderstandAssistantResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandFieldResponse listUnderstandField(org.openapis.openapi.models.operations.ListUnderstandFieldRequest request, org.openapis.openapi.models.operations.ListUnderstandFieldSecurity security) throws Exception {
        return this.listUnderstandField(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandFieldResponse listUnderstandField(org.openapis.openapi.models.operations.ListUnderstandFieldRequest request, org.openapis.openapi.models.operations.ListUnderstandFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUnderstandFieldRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandFieldRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandFieldResponse res = new org.openapis.openapi.models.operations.ListUnderstandFieldResponse(contentType, httpRes.statusCode()) {{
            listUnderstandFieldResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandFieldListUnderstandFieldResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandFieldListUnderstandFieldResponse.class);
                res.listUnderstandFieldResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandFieldTypeResponse listUnderstandFieldType(org.openapis.openapi.models.operations.ListUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.ListUnderstandFieldTypeSecurity security) throws Exception {
        return this.listUnderstandFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandFieldTypeResponse listUnderstandFieldType(org.openapis.openapi.models.operations.ListUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.ListUnderstandFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUnderstandFieldTypeRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandFieldTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandFieldTypeResponse res = new org.openapis.openapi.models.operations.ListUnderstandFieldTypeResponse(contentType, httpRes.statusCode()) {{
            listUnderstandFieldTypeResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandFieldTypeListUnderstandFieldTypeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandFieldTypeListUnderstandFieldTypeResponse.class);
                res.listUnderstandFieldTypeResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandFieldValueResponse listUnderstandFieldValue(org.openapis.openapi.models.operations.ListUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.ListUnderstandFieldValueSecurity security) throws Exception {
        return this.listUnderstandFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandFieldValueResponse listUnderstandFieldValue(org.openapis.openapi.models.operations.ListUnderstandFieldValueRequest request, org.openapis.openapi.models.operations.ListUnderstandFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUnderstandFieldValueRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandFieldValueRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandFieldValueResponse res = new org.openapis.openapi.models.operations.ListUnderstandFieldValueResponse(contentType, httpRes.statusCode()) {{
            listUnderstandFieldValueResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandFieldValueListUnderstandFieldValueResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandFieldValueListUnderstandFieldValueResponse.class);
                res.listUnderstandFieldValueResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandModelBuildResponse listUnderstandModelBuild(org.openapis.openapi.models.operations.ListUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.ListUnderstandModelBuildSecurity security) throws Exception {
        return this.listUnderstandModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandModelBuildResponse listUnderstandModelBuild(org.openapis.openapi.models.operations.ListUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.ListUnderstandModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUnderstandModelBuildRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/ModelBuilds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandModelBuildRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandModelBuildResponse res = new org.openapis.openapi.models.operations.ListUnderstandModelBuildResponse(contentType, httpRes.statusCode()) {{
            listUnderstandModelBuildResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandModelBuildListUnderstandModelBuildResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandModelBuildListUnderstandModelBuildResponse.class);
                res.listUnderstandModelBuildResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandQueryResponse listUnderstandQuery(org.openapis.openapi.models.operations.ListUnderstandQueryRequest request, org.openapis.openapi.models.operations.ListUnderstandQuerySecurity security) throws Exception {
        return this.listUnderstandQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandQueryResponse listUnderstandQuery(org.openapis.openapi.models.operations.ListUnderstandQueryRequest request, org.openapis.openapi.models.operations.ListUnderstandQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUnderstandQueryRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Queries", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandQueryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandQueryResponse res = new org.openapis.openapi.models.operations.ListUnderstandQueryResponse(contentType, httpRes.statusCode()) {{
            listUnderstandQueryResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandQueryListUnderstandQueryResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandQueryListUnderstandQueryResponse.class);
                res.listUnderstandQueryResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandSampleResponse listUnderstandSample(org.openapis.openapi.models.operations.ListUnderstandSampleRequest request, org.openapis.openapi.models.operations.ListUnderstandSampleSecurity security) throws Exception {
        return this.listUnderstandSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandSampleResponse listUnderstandSample(org.openapis.openapi.models.operations.ListUnderstandSampleRequest request, org.openapis.openapi.models.operations.ListUnderstandSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUnderstandSampleRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandSampleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandSampleResponse res = new org.openapis.openapi.models.operations.ListUnderstandSampleResponse(contentType, httpRes.statusCode()) {{
            listUnderstandSampleResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandSampleListUnderstandSampleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandSampleListUnderstandSampleResponse.class);
                res.listUnderstandSampleResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListUnderstandTaskResponse listUnderstandTask(org.openapis.openapi.models.operations.ListUnderstandTaskRequest request, org.openapis.openapi.models.operations.ListUnderstandTaskSecurity security) throws Exception {
        return this.listUnderstandTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListUnderstandTaskResponse listUnderstandTask(org.openapis.openapi.models.operations.ListUnderstandTaskRequest request, org.openapis.openapi.models.operations.ListUnderstandTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_UNDERSTAND_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListUnderstandTaskRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListUnderstandTaskRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListUnderstandTaskResponse res = new org.openapis.openapi.models.operations.ListUnderstandTaskResponse(contentType, httpRes.statusCode()) {{
            listUnderstandTaskResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListUnderstandTaskListUnderstandTaskResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListUnderstandTaskListUnderstandTaskResponse.class);
                res.listUnderstandTaskResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWirelessCommandResponse listWirelessCommand(org.openapis.openapi.models.operations.ListWirelessCommandRequest request, org.openapis.openapi.models.operations.ListWirelessCommandSecurity security) throws Exception {
        return this.listWirelessCommand(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWirelessCommandResponse listWirelessCommand(org.openapis.openapi.models.operations.ListWirelessCommandRequest request, org.openapis.openapi.models.operations.ListWirelessCommandSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WIRELESS_COMMAND_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/wireless/Commands");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWirelessCommandRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWirelessCommandResponse res = new org.openapis.openapi.models.operations.ListWirelessCommandResponse(contentType, httpRes.statusCode()) {{
            listWirelessCommandResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWirelessCommandListWirelessCommandResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWirelessCommandListWirelessCommandResponse.class);
                res.listWirelessCommandResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWirelessRatePlanResponse listWirelessRatePlan(org.openapis.openapi.models.operations.ListWirelessRatePlanRequest request, org.openapis.openapi.models.operations.ListWirelessRatePlanSecurity security) throws Exception {
        return this.listWirelessRatePlan(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWirelessRatePlanResponse listWirelessRatePlan(org.openapis.openapi.models.operations.ListWirelessRatePlanRequest request, org.openapis.openapi.models.operations.ListWirelessRatePlanSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WIRELESS_RATE_PLAN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/wireless/RatePlans");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWirelessRatePlanRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWirelessRatePlanResponse res = new org.openapis.openapi.models.operations.ListWirelessRatePlanResponse(contentType, httpRes.statusCode()) {{
            listWirelessRatePlanResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWirelessRatePlanListWirelessRatePlanResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWirelessRatePlanListWirelessRatePlanResponse.class);
                res.listWirelessRatePlanResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWirelessSimResponse listWirelessSim(org.openapis.openapi.models.operations.ListWirelessSimRequest request, org.openapis.openapi.models.operations.ListWirelessSimSecurity security) throws Exception {
        return this.listWirelessSim(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWirelessSimResponse listWirelessSim(org.openapis.openapi.models.operations.ListWirelessSimRequest request, org.openapis.openapi.models.operations.ListWirelessSimSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WIRELESS_SIM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/wireless/Sims");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWirelessSimRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWirelessSimResponse res = new org.openapis.openapi.models.operations.ListWirelessSimResponse(contentType, httpRes.statusCode()) {{
            listWirelessSimResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWirelessSimListWirelessSimResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWirelessSimListWirelessSimResponse.class);
                res.listWirelessSimResponse = out;
            }
        }

        return res;
    }

    /**
     * Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateResponse updateDeployedDevicesCertificate(org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateSecurity security) throws Exception {
        return this.updateDeployedDevicesCertificate(request, security, null);
    }

    /**
     * Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateResponse updateDeployedDevicesCertificate(org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DEPLOYED_DEVICES_CERTIFICATE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Certificates/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateResponse res = new org.openapis.openapi.models.operations.UpdateDeployedDevicesCertificateResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetCertificate = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetCertificate out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetCertificate.class);
                res.previewDeployedDevicesFleetCertificate = out;
            }
        }

        return res;
    }

    /**
     * Update the given properties of a specific Deployment credential in the Fleet, giving it a friendly name or linking to a specific Twilio Sync service instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentResponse updateDeployedDevicesDeployment(org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentSecurity security) throws Exception {
        return this.updateDeployedDevicesDeployment(request, security, null);
    }

    /**
     * Update the given properties of a specific Deployment credential in the Fleet, giving it a friendly name or linking to a specific Twilio Sync service instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentResponse updateDeployedDevicesDeployment(org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DEPLOYED_DEVICES_DEPLOYMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Deployments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentResponse res = new org.openapis.openapi.models.operations.UpdateDeployedDevicesDeploymentResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDeployment.class);
                res.previewDeployedDevicesFleetDeployment = out;
            }
        }

        return res;
    }

    /**
     * Update the given properties of a specific Device in the Fleet, giving it a friendly name, assigning to a Deployment, or a human identity.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceResponse updateDeployedDevicesDevice(org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceSecurity security) throws Exception {
        return this.updateDeployedDevicesDevice(request, security, null);
    }

    /**
     * Update the given properties of a specific Device in the Fleet, giving it a friendly name, assigning to a Deployment, or a human identity.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceResponse updateDeployedDevicesDevice(org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DEPLOYED_DEVICES_DEVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Devices/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceResponse res = new org.openapis.openapi.models.operations.UpdateDeployedDevicesDeviceResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetDevice = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDevice out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetDevice.class);
                res.previewDeployedDevicesFleetDevice = out;
            }
        }

        return res;
    }

    /**
     * Update the friendly name property of a specific Fleet in your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetResponse updateDeployedDevicesFleet(org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetSecurity security) throws Exception {
        return this.updateDeployedDevicesFleet(request, security, null);
    }

    /**
     * Update the friendly name property of a specific Fleet in your account.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetResponse updateDeployedDevicesFleet(org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DEPLOYED_DEVICES_FLEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetRequest.class, baseUrl, "/DeployedDevices/Fleets/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetResponse res = new org.openapis.openapi.models.operations.UpdateDeployedDevicesFleetResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleet = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleet.class);
                res.previewDeployedDevicesFleet = out;
            }
        }

        return res;
    }

    /**
     * Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesKeyResponse updateDeployedDevicesKey(org.openapis.openapi.models.operations.UpdateDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesKeySecurity security) throws Exception {
        return this.updateDeployedDevicesKey(request, security, null);
    }

    /**
     * Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a Device.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateDeployedDevicesKeyResponse updateDeployedDevicesKey(org.openapis.openapi.models.operations.UpdateDeployedDevicesKeyRequest request, org.openapis.openapi.models.operations.UpdateDeployedDevicesKeySecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DEPLOYED_DEVICES_KEY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDeployedDevicesKeyRequest.class, baseUrl, "/DeployedDevices/Fleets/{FleetSid}/Keys/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDeployedDevicesKeyResponse res = new org.openapis.openapi.models.operations.UpdateDeployedDevicesKeyResponse(contentType, httpRes.statusCode()) {{
            previewDeployedDevicesFleetKey = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewDeployedDevicesFleetKey.class);
                res.previewDeployedDevicesFleetKey = out;
            }
        }

        return res;
    }

    /**
     * Updates a specific AuthorizationDocument.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentResponse updateHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentSecurity security) throws Exception {
        return this.updateHostedNumbersAuthorizationDocument(request, security, null);
    }

    /**
     * Updates a specific AuthorizationDocument.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentResponse updateHostedNumbersAuthorizationDocument(org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentRequest request, org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_HOSTED_NUMBERS_AUTHORIZATION_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentRequest.class, baseUrl, "/HostedNumbers/AuthorizationDocuments/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentResponse res = new org.openapis.openapi.models.operations.UpdateHostedNumbersAuthorizationDocumentResponse(contentType, httpRes.statusCode()) {{
            previewHostedNumbersAuthorizationDocument = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewHostedNumbersAuthorizationDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewHostedNumbersAuthorizationDocument.class);
                res.previewHostedNumbersAuthorizationDocument = out;
            }
        }

        return res;
    }

    /**
     * Updates a specific HostedNumberOrder.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderResponse updateHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderSecurity security) throws Exception {
        return this.updateHostedNumbersHostedNumberOrder(request, security, null);
    }

    /**
     * Updates a specific HostedNumberOrder.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderResponse updateHostedNumbersHostedNumberOrder(org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderRequest request, org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_HOSTED_NUMBERS_HOSTED_NUMBER_ORDER_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderRequest.class, baseUrl, "/HostedNumbers/HostedNumberOrders/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderResponse res = new org.openapis.openapi.models.operations.UpdateHostedNumbersHostedNumberOrderResponse(contentType, httpRes.statusCode()) {{
            previewHostedNumbersHostedNumberOrder = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewHostedNumbersHostedNumberOrder out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewHostedNumbersHostedNumberOrder.class);
                res.previewHostedNumbersHostedNumberOrder = out;
            }
        }

        return res;
    }

    /**
     * Update an Add-on installation for the Account specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnResponse updateMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnSecurity security) throws Exception {
        return this.updateMarketplaceInstalledAddOn(request, security, null);
    }

    /**
     * Update an Add-on installation for the Account specified.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnResponse updateMarketplaceInstalledAddOn(org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnRequest request, org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_MARKETPLACE_INSTALLED_ADD_ON_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnRequest.class, baseUrl, "/marketplace/InstalledAddOns/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnResponse res = new org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnResponse(contentType, httpRes.statusCode()) {{
            previewMarketplaceInstalledAddOn = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOn out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOn.class);
                res.previewMarketplaceInstalledAddOn = out;
            }
        }

        return res;
    }

    /**
     * Update an Extension for an Add-on installation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionResponse updateMarketplaceInstalledAddOnExtension(org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionRequest request, org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionSecurity security) throws Exception {
        return this.updateMarketplaceInstalledAddOnExtension(request, security, null);
    }

    /**
     * Update an Extension for an Add-on installation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionResponse updateMarketplaceInstalledAddOnExtension(org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionRequest request, org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_MARKETPLACE_INSTALLED_ADD_ON_EXTENSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionRequest.class, baseUrl, "/marketplace/InstalledAddOns/{InstalledAddOnSid}/Extensions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionResponse res = new org.openapis.openapi.models.operations.UpdateMarketplaceInstalledAddOnExtensionResponse(contentType, httpRes.statusCode()) {{
            previewMarketplaceInstalledAddOnInstalledAddOnExtension = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOnInstalledAddOnExtension out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewMarketplaceInstalledAddOnInstalledAddOnExtension.class);
                res.previewMarketplaceInstalledAddOnInstalledAddOnExtension = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncDocumentResponse updateSyncDocument(org.openapis.openapi.models.operations.UpdateSyncDocumentRequest request, org.openapis.openapi.models.operations.UpdateSyncDocumentSecurity security) throws Exception {
        return this.updateSyncDocument(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncDocumentResponse updateSyncDocument(org.openapis.openapi.models.operations.UpdateSyncDocumentRequest request, org.openapis.openapi.models.operations.UpdateSyncDocumentSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_DOCUMENT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncDocumentRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncDocumentResponse res = new org.openapis.openapi.models.operations.UpdateSyncDocumentResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceDocument = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceDocument out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceDocument.class);
                res.previewSyncServiceDocument = out;
            }
        }

        return res;
    }

    /**
     * Update an identity's access to a specific Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionResponse updateSyncDocumentPermission(org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionSecurity security) throws Exception {
        return this.updateSyncDocumentPermission(request, security, null);
    }

    /**
     * Update an identity's access to a specific Sync Document.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionResponse updateSyncDocumentPermission(org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_DOCUMENT_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Documents/{DocumentSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionResponse res = new org.openapis.openapi.models.operations.UpdateSyncDocumentPermissionResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceDocumentDocumentPermission = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceDocumentDocumentPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceDocumentDocumentPermission.class);
                res.previewSyncServiceDocumentDocumentPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncServiceResponse updateSyncService(org.openapis.openapi.models.operations.UpdateSyncServiceRequest request, org.openapis.openapi.models.operations.UpdateSyncServiceSecurity security) throws Exception {
        return this.updateSyncService(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncServiceResponse updateSyncService(org.openapis.openapi.models.operations.UpdateSyncServiceRequest request, org.openapis.openapi.models.operations.UpdateSyncServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncServiceRequest.class, baseUrl, "/Sync/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncServiceResponse res = new org.openapis.openapi.models.operations.UpdateSyncServiceResponse(contentType, httpRes.statusCode()) {{
            previewSyncService = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncService out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncService.class);
                res.previewSyncService = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncSyncListItemResponse updateSyncSyncListItem(org.openapis.openapi.models.operations.UpdateSyncSyncListItemRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncListItemSecurity security) throws Exception {
        return this.updateSyncSyncListItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncSyncListItemResponse updateSyncSyncListItem(org.openapis.openapi.models.operations.UpdateSyncSyncListItemRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncListItemSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_SYNC_LIST_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncSyncListItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Items/{Index}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncSyncListItemResponse res = new org.openapis.openapi.models.operations.UpdateSyncSyncListItemResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncListSyncListItem = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListItem.class);
                res.previewSyncServiceSyncListSyncListItem = out;
            }
        }

        return res;
    }

    /**
     * Update an identity's access to a specific Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionResponse updateSyncSyncListPermission(org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionSecurity security) throws Exception {
        return this.updateSyncSyncListPermission(request, security, null);
    }

    /**
     * Update an identity's access to a specific Sync List.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionResponse updateSyncSyncListPermission(org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_SYNC_LIST_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Lists/{ListSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionResponse res = new org.openapis.openapi.models.operations.UpdateSyncSyncListPermissionResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncListSyncListPermission = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncListSyncListPermission.class);
                res.previewSyncServiceSyncListSyncListPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSyncSyncMapItemResponse updateSyncSyncMapItem(org.openapis.openapi.models.operations.UpdateSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncMapItemSecurity security) throws Exception {
        return this.updateSyncSyncMapItem(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSyncSyncMapItemResponse updateSyncSyncMapItem(org.openapis.openapi.models.operations.UpdateSyncSyncMapItemRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncMapItemSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_SYNC_MAP_ITEM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncSyncMapItemRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Items/{Key}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncSyncMapItemResponse res = new org.openapis.openapi.models.operations.UpdateSyncSyncMapItemResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncMapSyncMapItem = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapItem out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapItem.class);
                res.previewSyncServiceSyncMapSyncMapItem = out;
            }
        }

        return res;
    }

    /**
     * Update an identity's access to a specific Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionResponse updateSyncSyncMapPermission(org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionSecurity security) throws Exception {
        return this.updateSyncSyncMapPermission(request, security, null);
    }

    /**
     * Update an identity's access to a specific Sync Map.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionResponse updateSyncSyncMapPermission(org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionRequest request, org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SYNC_SYNC_MAP_PERMISSION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionRequest.class, baseUrl, "/Sync/Services/{ServiceSid}/Maps/{MapSid}/Permissions/{Identity}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionResponse res = new org.openapis.openapi.models.operations.UpdateSyncSyncMapPermissionResponse(contentType, httpRes.statusCode()) {{
            previewSyncServiceSyncMapSyncMapPermission = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapPermission out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewSyncServiceSyncMapSyncMapPermission.class);
                res.previewSyncServiceSyncMapSyncMapPermission = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandAssistantResponse updateUnderstandAssistant(org.openapis.openapi.models.operations.UpdateUnderstandAssistantRequest request, org.openapis.openapi.models.operations.UpdateUnderstandAssistantSecurity security) throws Exception {
        return this.updateUnderstandAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandAssistantResponse updateUnderstandAssistant(org.openapis.openapi.models.operations.UpdateUnderstandAssistantRequest request, org.openapis.openapi.models.operations.UpdateUnderstandAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandAssistantRequest.class, baseUrl, "/understand/Assistants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandAssistantResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandAssistantResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistant = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistant.class);
                res.previewUnderstandAssistant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsResponse updateUnderstandAssistantFallbackActions(org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsRequest request, org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsSecurity security) throws Exception {
        return this.updateUnderstandAssistantFallbackActions(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsResponse updateUnderstandAssistantFallbackActions(org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsRequest request, org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_ASSISTANT_FALLBACK_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FallbackActions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandAssistantFallbackActionsResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantAssistantFallbackActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantFallbackActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantFallbackActions.class);
                res.previewUnderstandAssistantAssistantFallbackActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsResponse updateUnderstandAssistantInitiationActions(org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsRequest request, org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsSecurity security) throws Exception {
        return this.updateUnderstandAssistantInitiationActions(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsResponse updateUnderstandAssistantInitiationActions(org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsRequest request, org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_ASSISTANT_INITIATION_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/InitiationActions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandAssistantInitiationActionsResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantAssistantInitiationActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantInitiationActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantAssistantInitiationActions.class);
                res.previewUnderstandAssistantAssistantInitiationActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeResponse updateUnderstandFieldType(org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeSecurity security) throws Exception {
        return this.updateUnderstandFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeResponse updateUnderstandFieldType(org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeRequest request, org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/FieldTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandFieldTypeResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantFieldType = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantFieldType.class);
                res.previewUnderstandAssistantFieldType = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandModelBuildResponse updateUnderstandModelBuild(org.openapis.openapi.models.operations.UpdateUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.UpdateUnderstandModelBuildSecurity security) throws Exception {
        return this.updateUnderstandModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandModelBuildResponse updateUnderstandModelBuild(org.openapis.openapi.models.operations.UpdateUnderstandModelBuildRequest request, org.openapis.openapi.models.operations.UpdateUnderstandModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandModelBuildRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/ModelBuilds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandModelBuildResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandModelBuildResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantModelBuild = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantModelBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantModelBuild.class);
                res.previewUnderstandAssistantModelBuild = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandQueryResponse updateUnderstandQuery(org.openapis.openapi.models.operations.UpdateUnderstandQueryRequest request, org.openapis.openapi.models.operations.UpdateUnderstandQuerySecurity security) throws Exception {
        return this.updateUnderstandQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandQueryResponse updateUnderstandQuery(org.openapis.openapi.models.operations.UpdateUnderstandQueryRequest request, org.openapis.openapi.models.operations.UpdateUnderstandQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandQueryRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Queries/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandQueryResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandQueryResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantQuery = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantQuery out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantQuery.class);
                res.previewUnderstandAssistantQuery = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandSampleResponse updateUnderstandSample(org.openapis.openapi.models.operations.UpdateUnderstandSampleRequest request, org.openapis.openapi.models.operations.UpdateUnderstandSampleSecurity security) throws Exception {
        return this.updateUnderstandSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandSampleResponse updateUnderstandSample(org.openapis.openapi.models.operations.UpdateUnderstandSampleRequest request, org.openapis.openapi.models.operations.UpdateUnderstandSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandSampleRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandSampleResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandSampleResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskSample = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskSample out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskSample.class);
                res.previewUnderstandAssistantTaskSample = out;
            }
        }

        return res;
    }

    /**
     * Updates the style sheet for an assistant identified by {AssistantSid} or {AssistantUniqueName}.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetResponse updateUnderstandStyleSheet(org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetRequest request, org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetSecurity security) throws Exception {
        return this.updateUnderstandStyleSheet(request, security, null);
    }

    /**
     * Updates the style sheet for an assistant identified by {AssistantSid} or {AssistantUniqueName}.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetResponse updateUnderstandStyleSheet(org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetRequest request, org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_STYLE_SHEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/StyleSheet", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandStyleSheetResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantStyleSheet = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantStyleSheet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantStyleSheet.class);
                res.previewUnderstandAssistantStyleSheet = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandTaskResponse updateUnderstandTask(org.openapis.openapi.models.operations.UpdateUnderstandTaskRequest request, org.openapis.openapi.models.operations.UpdateUnderstandTaskSecurity security) throws Exception {
        return this.updateUnderstandTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateUnderstandTaskResponse updateUnderstandTask(org.openapis.openapi.models.operations.UpdateUnderstandTaskRequest request, org.openapis.openapi.models.operations.UpdateUnderstandTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandTaskRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandTaskResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandTaskResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTask = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTask.class);
                res.previewUnderstandAssistantTask = out;
            }
        }

        return res;
    }

    /**
     * Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsResponse updateUnderstandTaskActions(org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsRequest request, org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsSecurity security) throws Exception {
        return this.updateUnderstandTaskActions(request, security, null);
    }

    /**
     * Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsResponse updateUnderstandTaskActions(org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsRequest request, org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_UNDERSTAND_TASK_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsRequest.class, baseUrl, "/understand/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsResponse res = new org.openapis.openapi.models.operations.UpdateUnderstandTaskActionsResponse(contentType, httpRes.statusCode()) {{
            previewUnderstandAssistantTaskTaskActions = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskTaskActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewUnderstandAssistantTaskTaskActions.class);
                res.previewUnderstandAssistantTaskTaskActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWirelessRatePlanResponse updateWirelessRatePlan(org.openapis.openapi.models.operations.UpdateWirelessRatePlanRequest request, org.openapis.openapi.models.operations.UpdateWirelessRatePlanSecurity security) throws Exception {
        return this.updateWirelessRatePlan(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWirelessRatePlanResponse updateWirelessRatePlan(org.openapis.openapi.models.operations.UpdateWirelessRatePlanRequest request, org.openapis.openapi.models.operations.UpdateWirelessRatePlanSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WIRELESS_RATE_PLAN_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWirelessRatePlanRequest.class, baseUrl, "/wireless/RatePlans/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWirelessRatePlanResponse res = new org.openapis.openapi.models.operations.UpdateWirelessRatePlanResponse(contentType, httpRes.statusCode()) {{
            previewWirelessRatePlan = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessRatePlan out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessRatePlan.class);
                res.previewWirelessRatePlan = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWirelessSimResponse updateWirelessSim(org.openapis.openapi.models.operations.UpdateWirelessSimRequest request, org.openapis.openapi.models.operations.UpdateWirelessSimSecurity security) throws Exception {
        return this.updateWirelessSim(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWirelessSimResponse updateWirelessSim(org.openapis.openapi.models.operations.UpdateWirelessSimRequest request, org.openapis.openapi.models.operations.UpdateWirelessSimSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WIRELESS_SIM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWirelessSimRequest.class, baseUrl, "/wireless/Sims/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWirelessSimResponse res = new org.openapis.openapi.models.operations.UpdateWirelessSimResponse(contentType, httpRes.statusCode()) {{
            previewWirelessSim = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PreviewWirelessSim out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PreviewWirelessSim.class);
                res.previewWirelessSim = out;
            }
        }

        return res;
    }
}