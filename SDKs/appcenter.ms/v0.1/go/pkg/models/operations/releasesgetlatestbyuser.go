// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesGetLatestByUserSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ReleasesGetLatestByUserRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The check if the request is from Install page
	IsInstallPage *bool `queryParam:"style=form,explode=true,name=is_install_page"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the release, or `latest` to get the latest release from all the distribution groups assigned to the current user.
	ReleaseID string `pathParam:"style=simple,explode=false,name=release_id"`
	// when supplied, this call will also check if the given UDID is provisioned. Will be ignored for non-iOS platforms. The value will be returned in the property is_udid_provisioned.
	Udid *string `queryParam:"style=form,explode=true,name=udid"`
}

type ReleasesGetLatestByUser404ApplicationJSONCodeEnum string

const (
	ReleasesGetLatestByUser404ApplicationJSONCodeEnumBadRequest          ReleasesGetLatestByUser404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetLatestByUser404ApplicationJSONCodeEnumConflict            ReleasesGetLatestByUser404ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetLatestByUser404ApplicationJSONCodeEnumNotAcceptable       ReleasesGetLatestByUser404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetLatestByUser404ApplicationJSONCodeEnumNotFound            ReleasesGetLatestByUser404ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetLatestByUser404ApplicationJSONCodeEnumInternalServerError ReleasesGetLatestByUser404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetLatestByUser404ApplicationJSONCodeEnumUnauthorized        ReleasesGetLatestByUser404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetLatestByUser404ApplicationJSONCodeEnumTooManyRequests     ReleasesGetLatestByUser404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetLatestByUser404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetLatestByUser404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetLatestByUser404ApplicationJSON - Error codes:
// - `not_found` - A release or an app can't be found.
// - `no_releases_for_user` - No releases available for that user (will only be returned when `release_id` is `latest`)
type ReleasesGetLatestByUser404ApplicationJSON struct {
	Code    ReleasesGetLatestByUser404ApplicationJSONCodeEnum `json:"code"`
	Message string                                            `json:"message"`
}

type ReleasesGetLatestByUser400ApplicationJSONCodeEnum string

const (
	ReleasesGetLatestByUser400ApplicationJSONCodeEnumBadRequest          ReleasesGetLatestByUser400ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetLatestByUser400ApplicationJSONCodeEnumConflict            ReleasesGetLatestByUser400ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetLatestByUser400ApplicationJSONCodeEnumNotAcceptable       ReleasesGetLatestByUser400ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetLatestByUser400ApplicationJSONCodeEnumNotFound            ReleasesGetLatestByUser400ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetLatestByUser400ApplicationJSONCodeEnumInternalServerError ReleasesGetLatestByUser400ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetLatestByUser400ApplicationJSONCodeEnumUnauthorized        ReleasesGetLatestByUser400ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetLatestByUser400ApplicationJSONCodeEnumTooManyRequests     ReleasesGetLatestByUser400ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetLatestByUser400ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetLatestByUser400ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser400ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetLatestByUser400ApplicationJSON - `release_id` is not an integer or the string `latest`.
type ReleasesGetLatestByUser400ApplicationJSON struct {
	Code    ReleasesGetLatestByUser400ApplicationJSONCodeEnum `json:"code"`
	Message string                                            `json:"message"`
}

// ReleasesGetLatestByUser200ApplicationJSONBuild - Contains metadata about the build that produced the release being uploaded
type ReleasesGetLatestByUser200ApplicationJSONBuild struct {
	// The branch name of the build producing the release
	BranchName *string `json:"branch_name,omitempty"`
	// The commit hash of the build producing the release
	CommitHash *string `json:"commit_hash,omitempty"`
	// The commit message of the build producing the release
	CommitMessage *string `json:"commit_message,omitempty"`
}

// ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum - OBSOLETE. Will be removed in next version. The destination type.<br>
// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
// <b>tester</b>: The release distributed testers details will be returned.<br>
type ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum string

const (
	ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnumGroup  ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum = "group"
	ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnumStore  ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum = "store"
	ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnumTester ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum = "tester"
)

func (e *ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum - Destination can be either store or group.
type ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum string

const (
	ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnumGroup  ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum = "group"
	ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnumStore  ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum = "store"
	ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnumTester ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum = "tester"
)

func (e *ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum string

const (
	ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnumIntune     ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum = "intune"
	ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnumGoogleplay ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum = "googleplay"
	ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnumApple      ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum = "apple"
	ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnumNone       ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum = "none"
)

func (e *ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByUser200ApplicationJSONDestinations - A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
type ReleasesGetLatestByUser200ApplicationJSONDestinations struct {
	// Destination can be either store or group.
	DestinationType *ReleasesGetLatestByUser200ApplicationJSONDestinationsDestinationTypeEnum `json:"destination_type,omitempty"`
	// Display name for the group or tester
	DisplayName *string `json:"display_name,omitempty"`
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution store.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesGetLatestByUser200ApplicationJSONDestinationsTypeEnum `json:"type,omitempty"`
}

type ReleasesGetLatestByUser200ApplicationJSONDistributionGroups struct {
	// ID identifying a unique distribution group.
	ID string `json:"id"`
	// A name identifying a unique distribution group.
	Name *string `json:"name,omitempty"`
}

// ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum string

const (
	ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnumIntune     ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum = "intune"
	ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnumGoogleplay ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum = "googleplay"
	ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnumApple      ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum = "apple"
	ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnumNone       ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum = "none"
)

func (e *ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum: %s", s)
	}
}

type ReleasesGetLatestByUser200ApplicationJSONDistributionStores struct {
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesGetLatestByUser200ApplicationJSONDistributionStoresTypeEnum `json:"type,omitempty"`
}

// ReleasesGetLatestByUser200ApplicationJSONOriginEnum - The release's origin
type ReleasesGetLatestByUser200ApplicationJSONOriginEnum string

const (
	ReleasesGetLatestByUser200ApplicationJSONOriginEnumHockeyapp ReleasesGetLatestByUser200ApplicationJSONOriginEnum = "hockeyapp"
	ReleasesGetLatestByUser200ApplicationJSONOriginEnumAppcenter ReleasesGetLatestByUser200ApplicationJSONOriginEnum = "appcenter"
)

func (e *ReleasesGetLatestByUser200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hockeyapp":
		fallthrough
	case "appcenter":
		*e = ReleasesGetLatestByUser200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser200ApplicationJSONOriginEnum: %s", s)
	}
}

// ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum - The type of the provisioning profile for the requested app version.
type ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum string

const (
	ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnumAdhoc      ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum = "adhoc"
	ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnumEnterprise ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum = "enterprise"
	ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnumOther      ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum = "other"
)

func (e *ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "adhoc":
		fallthrough
	case "enterprise":
		fallthrough
	case "other":
		*e = ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum: %s", s)
	}
}

// ReleasesGetLatestByUser200ApplicationJSON - Details of an uploaded release
type ReleasesGetLatestByUser200ApplicationJSON struct {
	// The release's minimum required Android API level.
	AndroidMinAPILevel *string `json:"android_min_api_level,omitempty"`
	// The app's display name.
	AppDisplayName string `json:"app_display_name"`
	// A URL to the app's icon.
	AppIconURL string `json:"app_icon_url"`
	// The app's name (extracted from the uploaded release).
	AppName string `json:"app_name"`
	// The app's OS.
	AppOs *string `json:"app_os,omitempty"`
	// Contains metadata about the build that produced the release being uploaded
	Build *ReleasesGetLatestByUser200ApplicationJSONBuild `json:"build,omitempty"`
	// The identifier of the apps bundle.
	BundleIdentifier *string `json:"bundle_identifier,omitempty"`
	// In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.
	CanResign *bool `json:"can_resign,omitempty"`
	// OBSOLETE. Will be removed in next version. The destination type.<br>
	// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
	// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
	// <b>tester</b>: The release distributed testers details will be returned.<br>
	//
	DestinationType *ReleasesGetLatestByUser200ApplicationJSONDestinationTypeEnum `json:"destination_type,omitempty"`
	// A list of distribution groups or stores.
	Destinations []ReleasesGetLatestByUser200ApplicationJSONDestinations `json:"destinations,omitempty"`
	// The release's device family.
	DeviceFamily *string `json:"device_family,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
	DistributionGroups []ReleasesGetLatestByUser200ApplicationJSONDistributionGroups `json:"distribution_groups,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
	DistributionStores []ReleasesGetLatestByUser200ApplicationJSONDistributionStores `json:"distribution_stores,omitempty"`
	// The URL that hosts the binary for this release.
	DownloadURL *string `json:"download_url,omitempty"`
	// This value determines the whether a release currently is enabled or disabled.
	Enabled bool `json:"enabled"`
	// MD5 checksum of the release binary.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// ID identifying this unique release.
	ID int64 `json:"id"`
	// The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
	InstallURL *string `json:"install_url,omitempty"`
	// This value determines if a release is external or not.
	IsExternalBuild *bool `json:"is_external_build,omitempty"`
	// A flag that determines whether the release's provisioning profile is still extracted or not.
	IsProvisioningProfileSyncing *bool `json:"is_provisioning_profile_syncing,omitempty"`
	// In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.
	IsUdidProvisioned *bool `json:"is_udid_provisioned,omitempty"`
	// The release's minimum required operating system.
	MinOs *string `json:"min_os,omitempty"`
	// The release's origin
	Origin *ReleasesGetLatestByUser200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// Hashes for the packages.
	PackageHashes []string `json:"package_hashes,omitempty"`
	// expiration date of provisioning profile in UTC format.
	ProvisioningProfileExpiryDate *string `json:"provisioning_profile_expiry_date,omitempty"`
	// The release's provisioning profile name.
	ProvisioningProfileName *string `json:"provisioning_profile_name,omitempty"`
	// The type of the provisioning profile for the requested app version.
	ProvisioningProfileType *ReleasesGetLatestByUser200ApplicationJSONProvisioningProfileTypeEnum `json:"provisioning_profile_type,omitempty"`
	// The release's release notes.
	ReleaseNotes *string `json:"release_notes,omitempty"`
	// The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
	SecondaryDownloadURL *string `json:"secondary_download_url,omitempty"`
	// The release's short version.<br>
	// For iOS: CFBundleShortVersionString from info.plist.
	// For Android: android:versionName from AppManifest.xml.
	//
	ShortVersion string `json:"short_version"`
	// The release's size in bytes.
	Size *int64 `json:"size,omitempty"`
	// Status of the release.
	Status *string `json:"status,omitempty"`
	// UTC time in ISO 8601 format of the uploaded time.
	UploadedAt string `json:"uploaded_at"`
	// The release's version.<br>
	// For iOS: CFBundleVersion from info.plist.
	// For Android: android:versionCode from AppManifest.xml.
	//
	Version string `json:"version"`
}

type ReleasesGetLatestByUserResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesGetLatestByUser200ApplicationJSONObject *ReleasesGetLatestByUser200ApplicationJSON
	// `release_id` is not an integer or the string `latest`.
	//
	ReleasesGetLatestByUser400ApplicationJSONObject *ReleasesGetLatestByUser400ApplicationJSON
	// Error codes:
	// - `not_found` - A release or an app can't be found.
	// - `no_releases_for_user` - No releases available for that user (will only be returned when `release_id` is `latest`)
	//
	ReleasesGetLatestByUser404ApplicationJSONObject *ReleasesGetLatestByUser404ApplicationJSON
}
