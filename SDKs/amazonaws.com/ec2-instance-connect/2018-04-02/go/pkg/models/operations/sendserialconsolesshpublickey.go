// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SendSerialConsoleSSHPublicKeyXAmzTargetEnum
type SendSerialConsoleSSHPublicKeyXAmzTargetEnum string

const (
	SendSerialConsoleSSHPublicKeyXAmzTargetEnumAwsec2InstanceConnectServiceSendSerialConsoleSSHPublicKey SendSerialConsoleSSHPublicKeyXAmzTargetEnum = "AWSEC2InstanceConnectService.SendSerialConsoleSSHPublicKey"
)

func (e SendSerialConsoleSSHPublicKeyXAmzTargetEnum) ToPointer() *SendSerialConsoleSSHPublicKeyXAmzTargetEnum {
	return &e
}

func (e *SendSerialConsoleSSHPublicKeyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWSEC2InstanceConnectService.SendSerialConsoleSSHPublicKey":
		*e = SendSerialConsoleSSHPublicKeyXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SendSerialConsoleSSHPublicKeyXAmzTargetEnum: %v", v)
	}
}

type SendSerialConsoleSSHPublicKeyRequest struct {
	SendSerialConsoleSSHPublicKeyRequest shared.SendSerialConsoleSSHPublicKeyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                       *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                             *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                    *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                           SendSerialConsoleSSHPublicKeyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type SendSerialConsoleSSHPublicKeyResponse struct {
	// AuthException
	AuthException interface{}
	ContentType   string
	// EC2InstanceNotFoundException
	Ec2InstanceNotFoundException interface{}
	// EC2InstanceStateInvalidException
	Ec2InstanceStateInvalidException interface{}
	// EC2InstanceTypeInvalidException
	Ec2InstanceTypeInvalidException interface{}
	// EC2InstanceUnavailableException
	Ec2InstanceUnavailableException interface{}
	// InvalidArgsException
	InvalidArgsException interface{}
	// Success
	SendSerialConsoleSSHPublicKeyResponse *shared.SendSerialConsoleSSHPublicKeyResponse
	// SerialConsoleSessionUnavailableException
	SerialConsoleSessionUnavailableException interface{}
	StatusCode                               int
	RawResponse                              *http.Response
	// SerialConsoleAccessDisabledException
	SerialConsoleAccessDisabledException interface{}
	// SerialConsoleSessionLimitExceededException
	SerialConsoleSessionLimitExceededException interface{}
	// ServiceException
	ServiceException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
