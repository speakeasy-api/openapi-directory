// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeFpgaImagesResultFpgaImagesPciID - Information about the PCI bus.
type DescribeFpgaImagesResultFpgaImagesPciID struct {
	DeviceID          *string
	SubsystemID       *string
	SubsystemVendorID *string
	VendorID          *string
}

// DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum - The type of product code.
type DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum string

const (
	DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnumDevpay      DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum = "devpay"
	DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnumMarketplace DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum = "marketplace"
)

func (e DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum) ToPointer() *DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum {
	return &e
}

func (e *DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "devpay":
		fallthrough
	case "marketplace":
		*e = DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum: %v", v)
	}
}

// DescribeFpgaImagesResultFpgaImagesProductCodes - Describes a product code.
type DescribeFpgaImagesResultFpgaImagesProductCodes struct {
	ProductCodeID   *string
	ProductCodeType *DescribeFpgaImagesResultFpgaImagesProductCodesProductCodeTypeEnum
}

// DescribeFpgaImagesResultFpgaImagesStateCodeEnum - <p>The state. The following are the possible values:</p> <ul> <li> <p> <code>pending</code> - AFI bitstream generation is in progress.</p> </li> <li> <p> <code>available</code> - The AFI is available for use.</p> </li> <li> <p> <code>failed</code> - AFI bitstream generation failed.</p> </li> <li> <p> <code>unavailable</code> - The AFI is no longer available for use.</p> </li> </ul>
type DescribeFpgaImagesResultFpgaImagesStateCodeEnum string

const (
	DescribeFpgaImagesResultFpgaImagesStateCodeEnumPending     DescribeFpgaImagesResultFpgaImagesStateCodeEnum = "pending"
	DescribeFpgaImagesResultFpgaImagesStateCodeEnumFailed      DescribeFpgaImagesResultFpgaImagesStateCodeEnum = "failed"
	DescribeFpgaImagesResultFpgaImagesStateCodeEnumAvailable   DescribeFpgaImagesResultFpgaImagesStateCodeEnum = "available"
	DescribeFpgaImagesResultFpgaImagesStateCodeEnumUnavailable DescribeFpgaImagesResultFpgaImagesStateCodeEnum = "unavailable"
)

func (e DescribeFpgaImagesResultFpgaImagesStateCodeEnum) ToPointer() *DescribeFpgaImagesResultFpgaImagesStateCodeEnum {
	return &e
}

func (e *DescribeFpgaImagesResultFpgaImagesStateCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "failed":
		fallthrough
	case "available":
		fallthrough
	case "unavailable":
		*e = DescribeFpgaImagesResultFpgaImagesStateCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeFpgaImagesResultFpgaImagesStateCodeEnum: %v", v)
	}
}

// DescribeFpgaImagesResultFpgaImagesState - Information about the state of the AFI.
type DescribeFpgaImagesResultFpgaImagesState struct {
	Code    *DescribeFpgaImagesResultFpgaImagesStateCodeEnum
	Message *string
}

// DescribeFpgaImagesResultFpgaImagesTags - Describes a tag.
type DescribeFpgaImagesResultFpgaImagesTags struct {
	Key   *string
	Value *string
}

// DescribeFpgaImagesResultFpgaImages - Describes an Amazon FPGA image (AFI).
type DescribeFpgaImagesResultFpgaImages struct {
	CreateTime           *time.Time
	DataRetentionSupport *bool
	Description          *string
	FpgaImageGlobalID    *string
	FpgaImageID          *string
	InstanceTypes        []string
	Name                 *string
	OwnerAlias           *string
	OwnerID              *string
	PciID                *DescribeFpgaImagesResultFpgaImagesPciID
	ProductCodes         []DescribeFpgaImagesResultFpgaImagesProductCodes
	Public               *bool
	ShellVersion         *string
	State                *DescribeFpgaImagesResultFpgaImagesState
	Tags                 []DescribeFpgaImagesResultFpgaImagesTags
	UpdateTime           *time.Time
}

// DescribeFpgaImagesResult - Success
type DescribeFpgaImagesResult struct {
	FpgaImages []DescribeFpgaImagesResultFpgaImages
	NextToken  *string
}
