<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Management 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListResponse
     */
	public function analyticsManagementAccountSummariesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accountSummaries');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountSummariesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountSummaries = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountSummaries', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteResponse
     */
	public function analyticsManagementAccountUserLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/entityUserLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Adds a new user to the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertResponse
     */
	public function analyticsManagementAccountUserLinksInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/entityUserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists account-user links for a given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListResponse
     */
	public function analyticsManagementAccountUserLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/entityUserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLinks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLinks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates permissions for an existing user on the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateResponse
     */
	public function analyticsManagementAccountUserLinksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/entityUserLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountUserLinksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all accounts to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListResponse
     */
	public function analyticsManagementAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Accounts', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Hashes the given Client ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdResponse
     */
	public function analyticsManagementClientIdHashClientId(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/clientId:hashClientId');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hashClientIdRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementClientIdHashClientIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hashClientIdResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HashClientIdResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List custom data sources to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListResponse
     */
	public function analyticsManagementCustomDataSourcesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDataSourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customDataSources = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomDataSources', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a custom dimension to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetResponse
     */
	public function analyticsManagementCustomDimensionsGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customDimension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomDimension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new custom dimension.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertResponse
     */
	public function analyticsManagementCustomDimensionsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customDimensionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customDimension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomDimension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists custom dimensions to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListResponse
     */
	public function analyticsManagementCustomDimensionsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customDimensions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomDimensions', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing custom dimension. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchResponse
     */
	public function analyticsManagementCustomDimensionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customDimensionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customDimension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomDimension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing custom dimension.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateResponse
     */
	public function analyticsManagementCustomDimensionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customDimensionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomDimensionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customDimension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomDimension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a custom metric to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetResponse
     */
	public function analyticsManagementCustomMetricsGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customMetric = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomMetric', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new custom metric.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertResponse
     */
	public function analyticsManagementCustomMetricsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customMetricInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customMetric = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomMetric', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists custom metrics to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListResponse
     */
	public function analyticsManagementCustomMetricsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customMetrics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomMetrics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing custom metric. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchResponse
     */
	public function analyticsManagementCustomMetricsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customMetricInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customMetric = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomMetric', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing custom metric.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateResponse
     */
	public function analyticsManagementCustomMetricsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customMetricInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementCustomMetricsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customMetric = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomMetric', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteResponse
     */
	public function analyticsManagementExperimentsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns an experiment to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetResponse
     */
	public function analyticsManagementExperimentsGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experiment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Experiment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertResponse
     */
	public function analyticsManagementExperimentsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "experiment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experiment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Experiment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists experiments to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListResponse
     */
	public function analyticsManagementExperimentsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experiments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Experiments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing experiment. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchResponse
     */
	public function analyticsManagementExperimentsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "experiment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experiment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Experiment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing experiment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateResponse
     */
	public function analyticsManagementExperimentsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "experiment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementExperimentsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->experiment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Experiment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteResponse
     */
	public function analyticsManagementFiltersDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/filters/{filterId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns filters to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetResponse
     */
	public function analyticsManagementFiltersGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/filters/{filterId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertResponse
     */
	public function analyticsManagementFiltersInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/filters', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "filterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all filters for an account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListResponse
     */
	public function analyticsManagementFiltersList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/filters', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filters = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filters', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing filter. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchResponse
     */
	public function analyticsManagementFiltersPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/filters/{filterId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "filterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateResponse
     */
	public function analyticsManagementFiltersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/filters/{filterId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "filterInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementFiltersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a goal to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetResponse
     */
	public function analyticsManagementGoalsGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->goal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Goal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new goal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertResponse
     */
	public function analyticsManagementGoalsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "goal", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->goal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Goal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists goals to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListResponse
     */
	public function analyticsManagementGoalsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->goals = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Goals', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing goal. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchResponse
     */
	public function analyticsManagementGoalsPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "goal", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->goal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Goal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing goal.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateResponse
     */
	public function analyticsManagementGoalsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "goal", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->goal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Goal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a profile filter link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteResponse
     */
	public function analyticsManagementProfileFilterLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns a single profile filter link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetResponse
     */
	public function analyticsManagementProfileFilterLinksGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profileFilterLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfileFilterLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new profile filter link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertResponse
     */
	public function analyticsManagementProfileFilterLinksInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileFilterLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profileFilterLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfileFilterLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all profile filter links for a profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListResponse
     */
	public function analyticsManagementProfileFilterLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profileFilterLinks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfileFilterLinks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing profile filter link. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchResponse
     */
	public function analyticsManagementProfileFilterLinksPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileFilterLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profileFilterLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfileFilterLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing profile filter link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateResponse
     */
	public function analyticsManagementProfileFilterLinksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileFilterLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileFilterLinksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profileFilterLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProfileFilterLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from the given view (profile).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteResponse
     */
	public function analyticsManagementProfileUserLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Adds a new user to the given view (profile).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertResponse
     */
	public function analyticsManagementProfileUserLinksInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists profile-user links for a given view (profile).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListResponse
     */
	public function analyticsManagementProfileUserLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLinks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLinks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates permissions for an existing user on the given view (profile).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateResponse
     */
	public function analyticsManagementProfileUserLinksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfileUserLinksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a view (profile).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteResponse
     */
	public function analyticsManagementProfilesDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a view (profile) to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetResponse
     */
	public function analyticsManagementProfilesGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Profile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new view (profile).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertResponse
     */
	public function analyticsManagementProfilesInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Profile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists views (profiles) to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListResponse
     */
	public function analyticsManagementProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profiles = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Profiles', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing view (profile). This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchResponse
     */
	public function analyticsManagementProfilesPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Profile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing view (profile).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateResponse
     */
	public function analyticsManagementProfilesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "profileInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->profile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Profile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a remarketing audience.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteResponse
     */
	public function analyticsManagementRemarketingAudienceDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a remarketing audience to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetResponse
     */
	public function analyticsManagementRemarketingAudienceGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remarketingAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemarketingAudience', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new remarketing audience.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertResponse
     */
	public function analyticsManagementRemarketingAudienceInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "remarketingAudienceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remarketingAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemarketingAudience', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists remarketing audiences to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListResponse
     */
	public function analyticsManagementRemarketingAudienceList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remarketingAudiences = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemarketingAudiences', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing remarketing audience. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchResponse
     */
	public function analyticsManagementRemarketingAudiencePatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "remarketingAudienceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudiencePatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remarketingAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemarketingAudience', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing remarketing audience.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateResponse
     */
	public function analyticsManagementRemarketingAudienceUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "remarketingAudienceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementRemarketingAudienceUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->remarketingAudience = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemarketingAudience', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists segments to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListResponse
     */
	public function analyticsManagementSegmentsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/segments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->segments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Segments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an unsampled report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteResponse
     */
	public function analyticsManagementUnsampledReportsDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns a single unsampled report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetResponse
     */
	public function analyticsManagementUnsampledReportsGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsampledReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UnsampledReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new unsampled report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertResponse
     */
	public function analyticsManagementUnsampledReportsInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "unsampledReportInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsampledReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UnsampledReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists unsampled reports to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListResponse
     */
	public function analyticsManagementUnsampledReportsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUnsampledReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsampledReports = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UnsampledReports', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete data associated with a previous upload.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataResponse
     */
	public function analyticsManagementUploadsDeleteUploadData(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "analyticsDataimportDeleteUploadDataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsDeleteUploadDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List uploads to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetResponse
     */
	public function analyticsManagementUploadsGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->upload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Upload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List uploads to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListResponse
     */
	public function analyticsManagementUploadsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploads = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Uploads', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upload data for a custom data source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataResponse
     */
	public function analyticsManagementUploadsUploadData(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementUploadsUploadDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->upload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Upload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a web property-Google Ads link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse
     */
	public function analyticsManagementWebPropertyAdWordsLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Returns a web property-Google Ads link to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetResponse
     */
	public function analyticsManagementWebPropertyAdWordsLinksGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityAdWordsLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityAdWordsLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a webProperty-Google Ads link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertResponse
     */
	public function analyticsManagementWebPropertyAdWordsLinksInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityAdWordsLink", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityAdWordsLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityAdWordsLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists webProperty-Google Ads links for a given web property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListResponse
     */
	public function analyticsManagementWebPropertyAdWordsLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityAdWordsLinks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityAdWordsLinks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing webProperty-Google Ads link. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchResponse
     */
	public function analyticsManagementWebPropertyAdWordsLinksPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityAdWordsLink", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityAdWordsLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityAdWordsLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing webProperty-Google Ads link.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse
     */
	public function analyticsManagementWebPropertyAdWordsLinksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityAdWordsLink", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityAdWordsLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityAdWordsLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a web property to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetResponse
     */
	public function analyticsManagementWebpropertiesGet(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webproperty = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Webproperty', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertResponse
     */
	public function analyticsManagementWebpropertiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "webpropertyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webproperty = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Webproperty', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists web properties to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListResponse
     */
	public function analyticsManagementWebpropertiesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webproperties = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Webproperties', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing web property. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchResponse
     */
	public function analyticsManagementWebpropertiesPatch(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "webpropertyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webproperty = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Webproperty', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing web property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateResponse
     */
	public function analyticsManagementWebpropertiesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "webpropertyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webproperty = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Webproperty', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a user from the given web property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteResponse
     */
	public function analyticsManagementWebpropertyUserLinksDelete(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Adds a new user to the given web property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertResponse
     */
	public function analyticsManagementWebpropertyUserLinksInsert(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLink', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists webProperty-user links for a given web property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListResponse
     */
	public function analyticsManagementWebpropertyUserLinksList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLinks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLinks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates permissions for an existing user on the given web property.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateResponse
     */
	public function analyticsManagementWebpropertyUserLinksUpdate(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "entityUserLinkInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertyUserLinksUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityUserLink = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EntityUserLink', 'json');
            }
        }

        return $response;
    }
}