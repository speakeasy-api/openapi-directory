// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GooglePrivacyDlpV2ConditionOperatorEnum - Required. Operator used to compare the field or infoType to the value.
type GooglePrivacyDlpV2ConditionOperatorEnum string

const (
	GooglePrivacyDlpV2ConditionOperatorEnumRelationalOperatorUnspecified GooglePrivacyDlpV2ConditionOperatorEnum = "RELATIONAL_OPERATOR_UNSPECIFIED"
	GooglePrivacyDlpV2ConditionOperatorEnumEqualTo                       GooglePrivacyDlpV2ConditionOperatorEnum = "EQUAL_TO"
	GooglePrivacyDlpV2ConditionOperatorEnumNotEqualTo                    GooglePrivacyDlpV2ConditionOperatorEnum = "NOT_EQUAL_TO"
	GooglePrivacyDlpV2ConditionOperatorEnumGreaterThan                   GooglePrivacyDlpV2ConditionOperatorEnum = "GREATER_THAN"
	GooglePrivacyDlpV2ConditionOperatorEnumLessThan                      GooglePrivacyDlpV2ConditionOperatorEnum = "LESS_THAN"
	GooglePrivacyDlpV2ConditionOperatorEnumGreaterThanOrEquals           GooglePrivacyDlpV2ConditionOperatorEnum = "GREATER_THAN_OR_EQUALS"
	GooglePrivacyDlpV2ConditionOperatorEnumLessThanOrEquals              GooglePrivacyDlpV2ConditionOperatorEnum = "LESS_THAN_OR_EQUALS"
	GooglePrivacyDlpV2ConditionOperatorEnumExists                        GooglePrivacyDlpV2ConditionOperatorEnum = "EXISTS"
)

func (e GooglePrivacyDlpV2ConditionOperatorEnum) ToPointer() *GooglePrivacyDlpV2ConditionOperatorEnum {
	return &e
}

func (e *GooglePrivacyDlpV2ConditionOperatorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RELATIONAL_OPERATOR_UNSPECIFIED":
		fallthrough
	case "EQUAL_TO":
		fallthrough
	case "NOT_EQUAL_TO":
		fallthrough
	case "GREATER_THAN":
		fallthrough
	case "LESS_THAN":
		fallthrough
	case "GREATER_THAN_OR_EQUALS":
		fallthrough
	case "LESS_THAN_OR_EQUALS":
		fallthrough
	case "EXISTS":
		*e = GooglePrivacyDlpV2ConditionOperatorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GooglePrivacyDlpV2ConditionOperatorEnum: %v", v)
	}
}

// GooglePrivacyDlpV2Condition - The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.
type GooglePrivacyDlpV2Condition struct {
	// General identifier of a data field in a storage service.
	Field *GooglePrivacyDlpV2FieldID `json:"field,omitempty"`
	// Required. Operator used to compare the field or infoType to the value.
	Operator *GooglePrivacyDlpV2ConditionOperatorEnum `json:"operator,omitempty"`
	// Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
	Value *GooglePrivacyDlpV2Value `json:"value,omitempty"`
}
