// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// MergeBranchesBySquashXAmzTargetEnum
type MergeBranchesBySquashXAmzTargetEnum string

const (
	MergeBranchesBySquashXAmzTargetEnumCodeCommit20150413MergeBranchesBySquash MergeBranchesBySquashXAmzTargetEnum = "CodeCommit_20150413.MergeBranchesBySquash"
)

func (e *MergeBranchesBySquashXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.MergeBranchesBySquash":
		*e = MergeBranchesBySquashXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MergeBranchesBySquashXAmzTargetEnum: %s", s)
	}
}

type MergeBranchesBySquashRequest struct {
	MergeBranchesBySquashInput shared.MergeBranchesBySquashInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 MergeBranchesBySquashXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type MergeBranchesBySquashResponse struct {
	// BranchDoesNotExistException
	BranchDoesNotExistException interface{}
	// BranchNameIsTagNameException
	BranchNameIsTagNameException interface{}
	// BranchNameRequiredException
	BranchNameRequiredException interface{}
	// CommitDoesNotExistException
	CommitDoesNotExistException interface{}
	// CommitMessageLengthExceededException
	CommitMessageLengthExceededException interface{}
	// CommitRequiredException
	CommitRequiredException interface{}
	// ConcurrentReferenceUpdateException
	ConcurrentReferenceUpdateException interface{}
	ContentType                        string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// FileContentSizeLimitExceededException
	FileContentSizeLimitExceededException interface{}
	// FileModeRequiredException
	FileModeRequiredException interface{}
	// FolderContentSizeLimitExceededException
	FolderContentSizeLimitExceededException interface{}
	// InvalidBranchNameException
	InvalidBranchNameException interface{}
	// InvalidCommitException
	InvalidCommitException interface{}
	// InvalidConflictDetailLevelException
	InvalidConflictDetailLevelException interface{}
	// InvalidConflictResolutionException
	InvalidConflictResolutionException interface{}
	// InvalidConflictResolutionStrategyException
	InvalidConflictResolutionStrategyException interface{}
	// InvalidEmailException
	InvalidEmailException interface{}
	// InvalidFileModeException
	InvalidFileModeException interface{}
	// InvalidPathException
	InvalidPathException interface{}
	// InvalidReplacementContentException
	InvalidReplacementContentException interface{}
	// InvalidReplacementTypeException
	InvalidReplacementTypeException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// InvalidTargetBranchException
	InvalidTargetBranchException interface{}
	// ManualMergeRequiredException
	ManualMergeRequiredException interface{}
	// MaximumConflictResolutionEntriesExceededException
	MaximumConflictResolutionEntriesExceededException interface{}
	// MaximumFileContentToLoadExceededException
	MaximumFileContentToLoadExceededException interface{}
	// MaximumItemsToCompareExceededException
	MaximumItemsToCompareExceededException interface{}
	// Success
	MergeBranchesBySquashOutput *shared.MergeBranchesBySquashOutput
	// MultipleConflictResolutionEntriesException
	MultipleConflictResolutionEntriesException interface{}
	// NameLengthExceededException
	NameLengthExceededException interface{}
	// PathRequiredException
	PathRequiredException interface{}
	// ReplacementContentRequiredException
	ReplacementContentRequiredException interface{}
	// ReplacementTypeRequiredException
	ReplacementTypeRequiredException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
	// TipsDivergenceExceededException
	TipsDivergenceExceededException interface{}
}
