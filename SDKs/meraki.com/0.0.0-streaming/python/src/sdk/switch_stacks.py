"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class SwitchStacks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_network_switch_stack(self, request: operations.AddNetworkSwitchStackRequest) -> operations.AddNetworkSwitchStackResponse:
        r"""Add a switch to a stack
        Add a switch to a stack
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddNetworkSwitchStackRequest, base_url, '/networks/{networkId}/switchStacks/{switchStackId}/add', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddNetworkSwitchStackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.add_network_switch_stack_200_application_json_object = out

        return res

    def create_network_switch_stack(self, request: operations.CreateNetworkSwitchStackRequest) -> operations.CreateNetworkSwitchStackResponse:
        r"""Create a stack
        Create a stack
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkSwitchStackRequest, base_url, '/networks/{networkId}/switchStacks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkSwitchStackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_network_switch_stack_201_application_json_object = out

        return res

    def delete_network_switch_stack(self, request: operations.DeleteNetworkSwitchStackRequest) -> operations.DeleteNetworkSwitchStackResponse:
        r"""Delete a stack
        Delete a stack
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworkSwitchStackRequest, base_url, '/networks/{networkId}/switchStacks/{switchStackId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworkSwitchStackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_network_switch_stack(self, request: operations.GetNetworkSwitchStackRequest) -> operations.GetNetworkSwitchStackResponse:
        r"""Show a switch stack
        Show a switch stack
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchStackRequest, base_url, '/networks/{networkId}/switchStacks/{switchStackId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchStackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_switch_stack_200_application_json_object = out

        return res

    def get_network_switch_stacks(self, request: operations.GetNetworkSwitchStacksRequest) -> operations.GetNetworkSwitchStacksResponse:
        r"""List the switch stacks in a network
        List the switch stacks in a network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSwitchStacksRequest, base_url, '/networks/{networkId}/switchStacks', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSwitchStacksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_switch_stacks_200_application_json_objects = out

        return res

    def remove_network_switch_stack(self, request: operations.RemoveNetworkSwitchStackRequest) -> operations.RemoveNetworkSwitchStackResponse:
        r"""Remove a switch from a stack
        Remove a switch from a stack
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveNetworkSwitchStackRequest, base_url, '/networks/{networkId}/switchStacks/{switchStackId}/remove', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveNetworkSwitchStackResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.remove_network_switch_stack_200_application_json_object = out

        return res

    