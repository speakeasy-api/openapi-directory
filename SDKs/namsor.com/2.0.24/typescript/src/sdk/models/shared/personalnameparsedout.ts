/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FirstLastNameOut } from "./firstlastnameout";
import { Expose, Type } from "class-transformer";

/**
 * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
 */
export enum PersonalNameParsedOutNameParserTypeEnum {
  Fn1Ln1 = "FN1LN1",
  Ln1Fn1 = "LN1FN1",
  Fn1Ln2 = "FN1LN2",
  Ln2Fn1 = "LN2FN1",
  Fn1LNx = "FN1LNx",
  LNxFn1 = "LNxFN1",
  Fn2Ln1 = "FN2LN1",
  Ln1Fn2 = "LN1FN2",
  Fn2Ln2 = "FN2LN2",
  Ln2Fn2 = "LN2FN2",
  Fn2LNx = "FN2LNx",
  LNxFn2 = "LNxFN2",
  FNxLn1 = "FNxLN1",
  Ln1FNx = "LN1FNx",
  FNxLn2 = "FNxLN2",
  Ln2FNx = "LN2FNx",
  FNxLNx = "FNxLNx",
  LNxFNx = "LNxFNx",
}

/**
 * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
 */
export enum PersonalNameParsedOutNameParserTypeAltEnum {
  Fn1Ln1 = "FN1LN1",
  Ln1Fn1 = "LN1FN1",
  Fn1Ln2 = "FN1LN2",
  Ln2Fn1 = "LN2FN1",
  Fn1LNx = "FN1LNx",
  LNxFn1 = "LNxFN1",
  Fn2Ln1 = "FN2LN1",
  Ln1Fn2 = "LN1FN2",
  Fn2Ln2 = "FN2LN2",
  Ln2Fn2 = "LN2FN2",
  Fn2LNx = "FN2LNx",
  LNxFn2 = "LNxFN2",
  FNxLn1 = "FNxLN1",
  Ln1FNx = "LN1FNx",
  FNxLn2 = "FNxLN2",
  Ln2FNx = "LN2FNx",
  FNxLNx = "FNxLNx",
  LNxFNx = "LNxFNx",
}

/**
 * A origined name.
 */
export class PersonalNameParsedOut extends SpeakeasyBase {
  /**
   * First / last name structure corresponding to the most likely parsing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstLastName" })
  @Type(() => FirstLastNameOut)
  firstLastName?: FirstLastNameOut;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The input name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nameParserType" })
  nameParserType?: PersonalNameParsedOutNameParserTypeEnum;

  /**
   * Second best alternative parsing. Name parsing is addressed as a classification problem, for example FN1LN1 means a first then last name order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nameParserTypeAlt" })
  nameParserTypeAlt?: PersonalNameParsedOutNameParserTypeAltEnum;

  /**
   * Higher score is better, but score is not normalized. Use calibratedProbability if available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "score" })
  score?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "script" })
  script?: string;
}
