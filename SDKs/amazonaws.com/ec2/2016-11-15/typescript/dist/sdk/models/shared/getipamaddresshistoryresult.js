"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetIpamAddressHistoryResult = exports.GetIpamAddressHistoryResultHistoryRecords = exports.GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum = exports.GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum = exports.GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The compliance status of a resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum;
(function (GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum) {
    GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum["Compliant"] = "compliant";
    GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum["Noncompliant"] = "noncompliant";
    GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum["Unmanaged"] = "unmanaged";
    GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum["Ignored"] = "ignored";
})(GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum = exports.GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum || (exports.GetIpamAddressHistoryResultHistoryRecordsResourceComplianceStatusEnum = {}));
/**
 * The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum;
(function (GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum) {
    GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum["Overlapping"] = "overlapping";
    GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum["Nonoverlapping"] = "nonoverlapping";
    GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum["Ignored"] = "ignored";
})(GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum = exports.GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum || (exports.GetIpamAddressHistoryResultHistoryRecordsResourceOverlapStatusEnum = {}));
/**
 * The type of the resource.
 */
var GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum;
(function (GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum) {
    GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum["Eip"] = "eip";
    GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum["Vpc"] = "vpc";
    GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum["Subnet"] = "subnet";
    GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum["NetworkInterface"] = "network-interface";
    GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum["Instance"] = "instance";
})(GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum = exports.GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum || (exports.GetIpamAddressHistoryResultHistoryRecordsResourceTypeEnum = {}));
/**
 * The historical record of a CIDR within an IPAM scope. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/view-history-cidr-ipam.html">View the history of IP addresses</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var GetIpamAddressHistoryResultHistoryRecords = /** @class */ (function (_super) {
    __extends(GetIpamAddressHistoryResultHistoryRecords, _super);
    function GetIpamAddressHistoryResultHistoryRecords() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceComplianceStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceOverlapStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceOwnerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "sampledEndTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Date)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "sampledStartTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResultHistoryRecords.prototype, "vpcId", void 0);
    return GetIpamAddressHistoryResultHistoryRecords;
}(utils_1.SpeakeasyBase));
exports.GetIpamAddressHistoryResultHistoryRecords = GetIpamAddressHistoryResultHistoryRecords;
/**
 * Success
 */
var GetIpamAddressHistoryResult = /** @class */ (function (_super) {
    __extends(GetIpamAddressHistoryResult, _super);
    function GetIpamAddressHistoryResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: GetIpamAddressHistoryResultHistoryRecords }),
        __metadata("design:type", Array)
    ], GetIpamAddressHistoryResult.prototype, "historyRecords", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetIpamAddressHistoryResult.prototype, "nextToken", void 0);
    return GetIpamAddressHistoryResult;
}(utils_1.SpeakeasyBase));
exports.GetIpamAddressHistoryResult = GetIpamAddressHistoryResult;
