/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ControlSet } from "./controlset";
import { FrameworkTypeEnum } from "./frameworktypeenum";
import { Expose, Transform, Type } from "class-transformer";

/**
 *  The file that's used to structure and automate Audit Manager assessments for a given compliance standard.
 */
export class Framework extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "complianceType" })
  complianceType?: string;

  @SpeakeasyMetadata({ elemType: ControlSet })
  @Expose({ name: "controlSets" })
  @Type(() => ControlSet)
  controlSets?: ControlSet[];

  @SpeakeasyMetadata()
  @Expose({ name: "controlSources" })
  controlSources?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "createdBy" })
  createdBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdatedBy" })
  lastUpdatedBy?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logo" })
  logo?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: FrameworkTypeEnum;
}
