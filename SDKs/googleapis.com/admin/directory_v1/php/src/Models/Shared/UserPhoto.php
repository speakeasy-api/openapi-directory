<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UserPhoto - Successful response
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UserPhoto
{
    /**
     * ETag of the resource.
     * 
     * @var ?string $etag
     */
	#[\JMS\Serializer\Annotation\SerializedName('etag')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $etag = null;
    
    /**
     * Height of the photo in pixels.
     * 
     * @var ?int $height
     */
	#[\JMS\Serializer\Annotation\SerializedName('height')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $height = null;
    
    /**
     * The ID the API uses to uniquely identify the user.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.
     * 
     * @var ?string $mimeType
     */
	#[\JMS\Serializer\Annotation\SerializedName('mimeType')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $mimeType = null;
    
    /**
     * The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.
     * 
     * @var ?string $photoData
     */
	#[\JMS\Serializer\Annotation\SerializedName('photoData')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $photoData = null;
    
    /**
     * The user's primary email address.
     * 
     * @var ?string $primaryEmail
     */
	#[\JMS\Serializer\Annotation\SerializedName('primaryEmail')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $primaryEmail = null;
    
    /**
     * Width of the photo in pixels.
     * 
     * @var ?int $width
     */
	#[\JMS\Serializer\Annotation\SerializedName('width')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $width = null;
    
	public function __construct()
	{
		$this->etag = null;
		$this->height = null;
		$this->id = null;
		$this->kind = null;
		$this->mimeType = null;
		$this->photoData = null;
		$this->primaryEmail = null;
		$this->width = null;
	}
}
