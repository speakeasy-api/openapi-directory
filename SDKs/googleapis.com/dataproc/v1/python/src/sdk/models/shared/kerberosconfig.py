"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KerberosConfig:
    r"""Specifies Kerberos related configuration."""
    
    cross_realm_trust_admin_server: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crossRealmTrustAdminServer'), 'exclude': lambda f: f is None }})
    r"""Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship."""  
    cross_realm_trust_kdc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crossRealmTrustKdc'), 'exclude': lambda f: f is None }})
    r"""Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship."""  
    cross_realm_trust_realm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crossRealmTrustRealm'), 'exclude': lambda f: f is None }})
    r"""Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust."""  
    cross_realm_trust_shared_password_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('crossRealmTrustSharedPasswordUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship."""  
    enable_kerberos: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableKerberos'), 'exclude': lambda f: f is None }})
    r"""Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster."""  
    kdc_db_key_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kdcDbKeyUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database."""  
    key_password_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyPasswordUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc."""  
    keystore_password_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keystorePasswordUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc."""  
    keystore_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keystoreUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate."""  
    kms_key_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The uri of the KMS key used to encrypt various sensitive files."""  
    realm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('realm'), 'exclude': lambda f: f is None }})
    r"""Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm."""  
    root_principal_password_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rootPrincipalPasswordUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password."""  
    tgt_lifetime_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tgtLifetimeHours'), 'exclude': lambda f: f is None }})
    r"""Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used."""  
    truststore_password_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('truststorePasswordUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc."""  
    truststore_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('truststoreUri'), 'exclude': lambda f: f is None }})
    r"""Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate."""  
    