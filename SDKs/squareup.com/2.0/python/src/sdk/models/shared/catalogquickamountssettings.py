"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import catalogquickamount as shared_catalogquickamount
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CatalogQuickAmountsSettings:
    r"""A parent Catalog Object model represents a set of Quick Amounts and the settings control the amounts."""
    
    option: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('option') }})
    r"""Represents the option seller currently uses on Quick Amounts."""  
    amounts: Optional[list[shared_catalogquickamount.CatalogQuickAmount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amounts'), 'exclude': lambda f: f is None }})
    r"""Represents a set of Quick Amounts at this location."""  
    eligible_for_auto_amounts: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eligible_for_auto_amounts'), 'exclude': lambda f: f is None }})
    r"""Represents location's eligibility for auto amounts
    The boolean should be consistent with whether there are AUTO amounts in the `amounts`.
    """  
    