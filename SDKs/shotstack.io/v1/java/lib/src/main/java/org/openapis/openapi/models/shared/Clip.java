/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Clip - A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
 */
public class Clip {
    /**
     * The type of asset to display for the duration of this Clip. Value must be one of &lt;b&gt;TitleAsset&lt;/b&gt;, &lt;b&gt;ImageAsset&lt;/b&gt;, &lt;b&gt;VideoAsset&lt;/b&gt;, &lt;b&gt;HtmlAsset&lt;/b&gt;, &lt;b&gt;AudioAsset&lt;/b&gt; or &lt;b&gt;LumaAsset&lt;/b&gt;
     */
    @JsonProperty("asset")
    public Object asset;
    public Clip withAsset(Object asset) {
        this.asset = asset;
        return this;
    }
    
    /**
     * A motion effect to apply to the Clip. &lt;ul&gt;
     *   &lt;li&gt;`zoomIn` - slow zoom in&lt;/li&gt;
     *   &lt;li&gt;`zoomOut` - slow zoom out&lt;/li&gt;
     *   &lt;li&gt;`slideLeft` - slow slide (pan) left&lt;/li&gt;
     *   &lt;li&gt;`slideRight` - slow slide (pan) right&lt;/li&gt;
     *   &lt;li&gt;`slideUp` - slow slide (pan) up&lt;/li&gt;
     *   &lt;li&gt;`slideDown` - slow slide (pan) down&lt;/li&gt;
     * &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effect")
    public ClipEffectEnum effect;
    public Clip withEffect(ClipEffectEnum effect) {
        this.effect = effect;
        return this;
    }
    
    /**
     * A filter effect to apply to the Clip. &lt;ul&gt;
     *   &lt;li&gt;`boost` - boost contrast and saturation&lt;/li&gt;
     *   &lt;li&gt;`contrast` - increase contrast&lt;/li&gt;
     *   &lt;li&gt;`darken` - darken the scene&lt;/li&gt;
     *   &lt;li&gt;`greyscale` - remove colour&lt;/li&gt;
     *   &lt;li&gt;`lighten` - lighten the scene&lt;/li&gt;
     *   &lt;li&gt;`muted` - reduce saturation and contrast&lt;/li&gt;
     *   &lt;li&gt;`invert` - invert colors&lt;/li&gt;
     * &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    public ClipFilterEnum filter;
    public Clip withFilter(ClipFilterEnum filter) {
        this.filter = filter;
        return this;
    }
    
    /**
     * Set how the asset should be scaled to fit the viewport using one of the following options: 
     *   &lt;ul&gt;
     *     &lt;li&gt;`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.&lt;/li&gt;
     *     &lt;li&gt;`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.&lt;/li&gt;
     *     &lt;li&gt;`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.&lt;/li&gt;
     *     &lt;li&gt;`none` - preserves the original asset dimensions and does not apply any scaling.&lt;/li&gt;
     *   &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fit")
    public ClipFitEnum fit;
    public Clip withFit(ClipFitEnum fit) {
        this.fit = fit;
        return this;
    }
    
    /**
     * The length, in seconds, the Clip should play for.
     */
    @JsonProperty("length")
    public Double length;
    public Clip withLength(Double length) {
        this.length = length;
        return this;
    }
    
    /**
     * Offsets the position of an asset horizontally or vertically by a relative distance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Offset offset;
    public Clip withOffset(Offset offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opacity")
    public Double opacity;
    public Clip withOpacity(Double opacity) {
        this.opacity = opacity;
        return this;
    }
    
    /**
     * Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. &lt;ul&gt;
     *   &lt;li&gt;`top` - top (center)&lt;/li&gt;
     *   &lt;li&gt;`topRight` - top right&lt;/li&gt;
     *   &lt;li&gt;`right` - right (center)&lt;/li&gt;
     *   &lt;li&gt;`bottomRight` - bottom right&lt;/li&gt;
     *   &lt;li&gt;`bottom` - bottom (center)&lt;/li&gt;
     *   &lt;li&gt;`bottomLeft` - bottom left&lt;/li&gt;
     *   &lt;li&gt;`left` - left (center)&lt;/li&gt;
     *   &lt;li&gt;`topLeft` - top left&lt;/li&gt;
     *   &lt;li&gt;`center` - center&lt;/li&gt;
     * &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public ClipPositionEnum position;
    public Clip withPosition(ClipPositionEnum position) {
        this.position = position;
        return this;
    }
    
    /**
     * Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scale")
    public Double scale;
    public Clip withScale(Double scale) {
        this.scale = scale;
        return this;
    }
    
    /**
     * The start position of the Clip on the timeline, in seconds.
     */
    @JsonProperty("start")
    public Double start;
    public Clip withStart(Double start) {
        this.start = start;
        return this;
    }
    
    /**
     * In and out transitions for a clip - i.e. fade in and fade out
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transition")
    public Transition transition;
    public Clip withTransition(Transition transition) {
        this.transition = transition;
        return this;
    }
    
}
