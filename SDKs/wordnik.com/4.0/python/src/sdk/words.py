"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Words:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_random_word(self, request: operations.GetRandomWordRequest) -> operations.GetRandomWordResponse:
        r"""Returns a single random WordObject"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/words.json/randomWord'
        
        query_params = utils.get_query_params(operations.GetRandomWordRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRandomWordResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_random_words(self, request: operations.GetRandomWordsRequest) -> operations.GetRandomWordsResponse:
        r"""Returns an array of random WordObjects"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/words.json/randomWords'
        
        query_params = utils.get_query_params(operations.GetRandomWordsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRandomWordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_word_of_the_day(self, request: operations.GetWordOfTheDayRequest) -> operations.GetWordOfTheDayResponse:
        r"""Returns a specific WordOfTheDay"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/words.json/wordOfTheDay'
        
        query_params = utils.get_query_params(operations.GetWordOfTheDayRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWordOfTheDayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def reverse_dictionary(self, request: operations.ReverseDictionaryRequest) -> operations.ReverseDictionaryResponse:
        r"""Reverse dictionary search"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/words.json/reverseDictionary'
        
        query_params = utils.get_query_params(operations.ReverseDictionaryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReverseDictionaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def search_words(self, request: operations.SearchWordsRequest) -> operations.SearchWordsResponse:
        r"""Searches words"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SearchWordsRequest, base_url, '/words.json/search/{query}', request)
        
        query_params = utils.get_query_params(operations.SearchWordsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchWordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    