// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SendMessagesRequestFilters struct {
	Attributes []map[string]interface{} `json:"attributes,omitempty"`
	Tags       []string                 `json:"tags,omitempty"`
}

type SendMessagesRequestMedia struct {
	URL *string `json:"url,omitempty"`
}

type SendMessagesRequestPhoneNumberFilterGroup struct {
	ID *string `json:"id,omitempty"`
}

type SendMessagesRequestPhoneNumberFilter struct {
	Group *SendMessagesRequestPhoneNumberFilterGroup `json:"group,omitempty"`
}

type SendMessagesRequestTypeEnum string

const (
	SendMessagesRequestTypeEnumSms SendMessagesRequestTypeEnum = "SMS"
	SendMessagesRequestTypeEnumMms SendMessagesRequestTypeEnum = "MMS"
)

func (e *SendMessagesRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SMS":
		fallthrough
	case "MMS":
		*e = SendMessagesRequestTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SendMessagesRequestTypeEnum: %s", s)
	}
}

type SendMessagesRequest struct {
	Contacts             []ContactRequest `json:"contacts,omitempty"`
	ConversationStrategy *string          `json:"conversationStrategy,omitempty"`
	// List of conversation ids to send messages to
	Conversations []string                    `json:"conversations,omitempty"`
	Filters       *SendMessagesRequestFilters `json:"filters,omitempty"`
	// List of media objects to attach to message
	Media             []SendMessagesRequestMedia            `json:"media,omitempty"`
	PhoneNumberFilter *SendMessagesRequestPhoneNumberFilter `json:"phoneNumberFilter,omitempty"`
	Template          *string                               `json:"template,omitempty"`
	Type              *SendMessagesRequestTypeEnum          `json:"type,omitempty"`
}
