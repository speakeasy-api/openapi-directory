"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class CompanyAlternativeSearchSecurity:
    
    user_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'user_key' }})  
    

@dataclasses.dataclass
class CompanyAlternativeSearchRequestBody:
    r"""VAT number and the company details"""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'address' }})
    r"""Company address (or address partial)"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'name' }})
    r"""Company name"""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'number' }})
    r"""Company registration number"""  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'phone' }})
    r"""Company contact phone number"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'url' }})
    r"""Company url"""  
    vat: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'vat' }})
    r"""Company VAT number"""  
    

@dataclasses.dataclass
class CompanyAlternativeSearchRequest:
    
    country: str = dataclasses.field(metadata={'path_param': { 'field_name': 'country', 'style': 'simple', 'explode': False }})
    r"""ISO_3166-1_alpha-2 representation of a country name - 2 chars"""  
    request_body: Optional[CompanyAlternativeSearchRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})
    r"""VAT number and the company details"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanyAlternativeSearchDefaultApplicationJSON:
    r"""Detailed information about the error"""
    
    code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag') }})  
    fault: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fault'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CompanyAlternativeSearch200ApplicationJSON:
    
    address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country'), 'exclude': lambda f: f is None }})  
    date_of_incorporation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfIncorporation'), 'exclude': lambda f: f is None }})  
    extra_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraData'), 'exclude': lambda f: f is None }})  
    formatted_address: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formattedAddress'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    legal_form: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalForm'), 'exclude': lambda f: f is None }})  
    managing_directors: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('managingDirectors'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    registration_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationNumber'), 'exclude': lambda f: f is None }})  
    request_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestTime'), 'exclude': lambda f: f is None }})  
    secretaries: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretaries'), 'exclude': lambda f: f is None }})  
    sic_nace_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sicNaceCodes'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CompanyAlternativeSearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    company_alternative_search_200_application_json_objects: Optional[list[CompanyAlternativeSearch200ApplicationJSON]] = dataclasses.field(default=None)
    r"""List of companies"""  
    company_alternative_search_default_application_json_object: Optional[CompanyAlternativeSearchDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Detailed information about the error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    