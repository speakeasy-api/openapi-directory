/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetCertificatesIdRequest extends SpeakeasyBase {
  /**
   * ID of the resource
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * If issuance or renewal reports `failed`, this property contains information about what happened
 */
export class GetCertificatesIdCertificateResponseCertificateStatusError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

/**
 * Status of the issuance process of the Certificate
 */
export enum GetCertificatesIdCertificateResponseCertificateStatusIssuanceEnum {
  Pending = "pending",
  Completed = "completed",
  Failed = "failed",
}

/**
 * Status of the renewal process of the Certificate.
 */
export enum GetCertificatesIdCertificateResponseCertificateStatusRenewalEnum {
  Scheduled = "scheduled",
  Pending = "pending",
  Failed = "failed",
  Unavailable = "unavailable",
}

/**
 * Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
 */
export class GetCertificatesIdCertificateResponseCertificateStatus extends SpeakeasyBase {
  /**
   * If issuance or renewal reports `failed`, this property contains information about what happened
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => GetCertificatesIdCertificateResponseCertificateStatusError)
  error?: GetCertificatesIdCertificateResponseCertificateStatusError;

  /**
   * Status of the issuance process of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issuance" })
  issuance?: GetCertificatesIdCertificateResponseCertificateStatusIssuanceEnum;

  /**
   * Status of the renewal process of the Certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renewal" })
  renewal?: GetCertificatesIdCertificateResponseCertificateStatusRenewalEnum;
}

/**
 * Type of the Certificate
 */
export enum GetCertificatesIdCertificateResponseCertificateTypeEnum {
  Uploaded = "uploaded",
  Managed = "managed",
}

export class GetCertificatesIdCertificateResponseCertificateUsedBy extends SpeakeasyBase {
  /**
   * ID of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class GetCertificatesIdCertificateResponseCertificate extends SpeakeasyBase {
  /**
   * Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificate" })
  certificate: string;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Domains and subdomains covered by the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain_names" })
  domainNames: string[];

  /**
   * SHA256 fingerprint of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Point in time when the Certificate stops being valid (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not_valid_after" })
  notValidAfter: string;

  /**
   * Point in time when the Certificate becomes valid (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not_valid_before" })
  notValidBefore: string;

  /**
   * Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => GetCertificatesIdCertificateResponseCertificateStatus)
  status?: GetCertificatesIdCertificateResponseCertificateStatus;

  /**
   * Type of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetCertificatesIdCertificateResponseCertificateTypeEnum;

  /**
   * Resources currently using the Certificate
   */
  @SpeakeasyMetadata({
    elemType: GetCertificatesIdCertificateResponseCertificateUsedBy,
  })
  @Expose({ name: "used_by" })
  @Type(() => GetCertificatesIdCertificateResponseCertificateUsedBy)
  usedBy: GetCertificatesIdCertificateResponseCertificateUsedBy[];
}

/**
 * The `certificate` key contains a Certificate object
 */
export class GetCertificatesIdCertificateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "certificate" })
  @Type(() => GetCertificatesIdCertificateResponseCertificate)
  certificate: GetCertificatesIdCertificateResponseCertificate;
}

export class GetCertificatesIdResponse extends SpeakeasyBase {
  /**
   * The `certificate` key contains a Certificate object
   */
  @SpeakeasyMetadata()
  certificateResponse?: GetCertificatesIdCertificateResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
