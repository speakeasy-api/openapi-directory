/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Audit node info
 */
export class AuditNodeInfo extends SpeakeasyBase {
  /**
   * Number of direct children
   *
   * @remarks
   *
   * (no recursion; for rooms only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "countChildren" })
  countChildren?: number;

  /**
   * Node ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeId" })
  nodeId: number;

  /**
   * Encryption state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeIsEncrypted" })
  nodeIsEncrypted?: boolean;

  /**
   * Node name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeName" })
  nodeName: string;

  /**
   * Parent room ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeParentId" })
  nodeParentId?: number;

  /**
   * Parent node path
   *
   * @remarks
   *
   * `/` if node is a root node (room)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nodeParentPath" })
  nodeParentPath: string;
}
