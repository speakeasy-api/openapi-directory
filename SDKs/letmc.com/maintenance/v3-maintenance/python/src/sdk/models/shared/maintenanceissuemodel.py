"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import maintenancedocumentmodel as shared_maintenancedocumentmodel
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class MaintenanceIssueModelIssuePriorityEnum(str, Enum):
    r"""The priority of the job (Defaults to 'Low' if incorrect value or empty)"""
    LOW = 'Low'
    MEDIUM = 'Medium'
    HIGH = 'High'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MaintenanceIssueModel:
    r"""Submission Model - Handles all fields required to submit an online maintenance job"""
    
    documents: Optional[list[shared_maintenancedocumentmodel.MaintenanceDocumentModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Documents'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Documents', 'json': True }})
    r"""Documents linked to a submitted maintenance job"""  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExternalID'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ExternalID' }})
    r"""ID used externally to manage jobs before sending to the system. This has a 10 character limit."""  
    issue_fault: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssueFault'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'IssueFault' }})
    r"""The fault title if applicable"""  
    issue_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssueNotes'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'IssueNotes' }})
    r"""Fault notes"""  
    issue_priority: Optional[MaintenanceIssueModelIssuePriorityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuePriority'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'IssuePriority' }})
    r"""The priority of the job (Defaults to 'Low' if incorrect value or empty)"""  
    issue_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssueTitle'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'IssueTitle' }})
    r"""The title of the issue"""  
    property_address1: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyAddress1'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PropertyAddress1' }})
    r"""The first line of the property address"""  
    property_address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyAddress2'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PropertyAddress2' }})
    r"""The second line of the property address"""  
    property_address3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyAddress3'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PropertyAddress3' }})
    r"""The third line of the property address"""  
    property_address4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyAddress4'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PropertyAddress4' }})
    r"""The forth line of the property address"""  
    property_country: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyCountry'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PropertyCountry' }})
    r"""The country the property is located"""  
    property_postcode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PropertyPostcode'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PropertyPostcode' }})
    r"""The property postcode"""  
    reported_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReportedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ReportedAt' }})
    r"""The date the job was reported"""  
    tenant_e_mail_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenantEMailAddress'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TenantEMailAddress' }})
    r"""The email address of the Tenant"""  
    tenant_forename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenantForename'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TenantForename' }})
    r"""The forename of the Tenant"""  
    tenant_phone_primary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenantPhonePrimary'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TenantPhonePrimary' }})
    r"""The primary phone number of the Tenant"""  
    tenant_phone_secondary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenantPhoneSecondary'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TenantPhoneSecondary' }})
    r"""The secondary phone number of the Tenant"""  
    tenant_presence_requested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenantPresenceRequested'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TenantPresenceRequested' }})
    r"""Is the Tenant’s presence requested during the maintenance visit? (Defaults to “false” if incorrect value or empty)"""  
    tenant_surname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenantSurname'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TenantSurname' }})
    r"""The surname of the Tenant"""  
    tenant_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TenantTitle'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'TenantTitle' }})
    r"""The title of the Tenant"""  
    