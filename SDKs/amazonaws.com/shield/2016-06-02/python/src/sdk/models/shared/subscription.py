"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import autorenew_enum as shared_autorenew_enum
from ..shared import limit as shared_limit
from ..shared import proactiveengagementstatus_enum as shared_proactiveengagementstatus_enum
from ..shared import subscriptionlimits as shared_subscriptionlimits
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Subscription:
    r"""Information about the Shield Advanced subscription for an account."""
    
    subscription_limits: shared_subscriptionlimits.SubscriptionLimits = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionLimits') }})  
    auto_renew: Optional[shared_autorenew_enum.AutoRenewEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoRenew'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    limits: Optional[list[shared_limit.Limit]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Limits'), 'exclude': lambda f: f is None }})  
    proactive_engagement_status: Optional[shared_proactiveengagementstatus_enum.ProactiveEngagementStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProactiveEngagementStatus'), 'exclude': lambda f: f is None }})  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    subscription_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubscriptionArn'), 'exclude': lambda f: f is None }})  
    time_commitment_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeCommitmentInSeconds'), 'exclude': lambda f: f is None }})  
    