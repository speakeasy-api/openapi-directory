<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Report 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get report status by ID
     * 
     * Retrieves the Subscription's report status, filtering by its reportId.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetreportstatusbyIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetreportstatusbyIDResponse
     */
	public function getreportstatusbyID(
        \OpenAPI\OpenAPI\Models\Operations\GetreportstatusbyIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetreportstatusbyIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/report/reportStatus/{reportId}', \OpenAPI\OpenAPI\Models\Operations\GetreportstatusbyIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetreportstatusbyIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve Subscription report by Status
     * 
     * Retrieves Subscriptions' reports, filtering by status. The report will be sent by email, to the address inserted in the API's path.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestreportbyStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestreportbyStatusResponse
     */
	public function requestreportbyStatus(
        \OpenAPI\OpenAPI\Models\Operations\RequestreportbyStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestreportbyStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/report/subscriptionsByStatus');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestreportbyStatusRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestreportbyStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve Subscription report by date
     * 
     * Retrieves a report with the subscriptions created at the date interval requested
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestreportbydateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestreportbydateResponse
     */
	public function requestreportbydate(
        \OpenAPI\OpenAPI\Models\Operations\RequestreportbydateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestreportbydateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/report/subscriptionsByDate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestreportbydateRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestreportbydateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve Subscription report by order date
     * 
     * Retrieves a report regarding the Subscriptions created during the date interval of orders.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestreportbyorderdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestreportbyorderdateResponse
     */
	public function requestreportbyorderdate(
        \OpenAPI\OpenAPI\Models\Operations\RequestreportbyorderdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestreportbyorderdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/report/subscriptionsOrderByDate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestreportbyorderdateRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestreportbyorderdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieve Subscription report by schedule
     * 
     * Retrieves a report regarding the Subscriptions scheduled to execute at the date interval requested
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestreportbyscheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestreportbyscheduleResponse
     */
	public function requestreportbyschedule(
        \OpenAPI\OpenAPI\Models\Operations\RequestreportbyscheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestreportbyscheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/report/subscriptionsScheduled');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestreportbyscheduleRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestreportbyscheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Request report by update
     * 
     * Retrieves a report regarding Subscriptions updated in the date interval chosen. The report will be sent by email, to the address inserted in the API's path.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RequestreportbyupdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RequestreportbyupdateResponse
     */
	public function requestreportbyupdate(
        \OpenAPI\OpenAPI\Models\Operations\RequestreportbyupdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RequestreportbyupdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/report/subscriptionsUpdated');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RequestreportbyupdateRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RequestreportbyupdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}