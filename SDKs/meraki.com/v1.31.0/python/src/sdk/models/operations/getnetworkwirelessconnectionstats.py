"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetNetworkWirelessConnectionStatsBandEnum(str, Enum):
    r"""Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."""
    TWO_4 = '2.4'
    FIVE = '5'
    SIX = '6'


@dataclasses.dataclass
class GetNetworkWirelessConnectionStatsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    ap_tag: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'apTag', 'style': 'form', 'explode': True }})
    r"""Filter results by AP Tag"""  
    band: Optional[GetNetworkWirelessConnectionStatsBandEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'band', 'style': 'form', 'explode': True }})
    r"""Filter results by band (either '2.4', '5' or '6'). Note that data prior to February 2020 will not have band information."""  
    ssid: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ssid', 'style': 'form', 'explode': True }})
    r"""Filter results by SSID"""  
    t0: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 't0', 'style': 'form', 'explode': True }})
    r"""The beginning of the timespan for the data. The maximum lookback period is 180 days from today."""  
    t1: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 't1', 'style': 'form', 'explode': True }})
    r"""The end of the timespan for the data. t1 can be a maximum of 7 days after t0."""  
    timespan: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timespan', 'style': 'form', 'explode': True }})
    r"""The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 7 days."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vlan', 'style': 'form', 'explode': True }})
    r"""Filter results by VLAN"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkWirelessConnectionStats200ApplicationJSON:
    r"""Successful operation"""
    
    assoc: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assoc'), 'exclude': lambda f: f is None }})
    r"""The number of failed association attempts"""  
    auth: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth'), 'exclude': lambda f: f is None }})
    r"""The number of failed authentication attempts"""  
    dhcp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dhcp'), 'exclude': lambda f: f is None }})
    r"""The number of failed DHCP attempts"""  
    dns: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns'), 'exclude': lambda f: f is None }})
    r"""The number of failed DNS attempts"""  
    success: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""The number of successful connection attempts"""  
    

@dataclasses.dataclass
class GetNetworkWirelessConnectionStatsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_wireless_connection_stats_200_application_json_object: Optional[GetNetworkWirelessConnectionStats200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    