"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import full_repository as shared_full_repository
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReposUpdateRequestBodyMergeCommitMessageEnum(str, Enum):
    r"""The default value for a merge commit message.
    
    - `PR_TITLE` - default to the pull request's title.
    - `PR_BODY` - default to the pull request's body.
    - `BLANK` - default to a blank commit message.
    """
    PR_BODY = 'PR_BODY'
    PR_TITLE = 'PR_TITLE'
    BLANK = 'BLANK'

class ReposUpdateRequestBodyMergeCommitTitleEnum(str, Enum):
    r"""The default value for a merge commit title.
    
    - `PR_TITLE` - default to the pull request's title.
    - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    """
    PR_TITLE = 'PR_TITLE'
    MERGE_MESSAGE = 'MERGE_MESSAGE'

class ReposUpdateRequestBodySquashMergeCommitMessageEnum(str, Enum):
    r"""The default value for a squash merge commit message:
    
    - `PR_BODY` - default to the pull request's body.
    - `COMMIT_MESSAGES` - default to the branch's commit messages.
    - `BLANK` - default to a blank commit message.
    """
    PR_BODY = 'PR_BODY'
    COMMIT_MESSAGES = 'COMMIT_MESSAGES'
    BLANK = 'BLANK'

class ReposUpdateRequestBodySquashMergeCommitTitleEnum(str, Enum):
    r"""The default value for a squash merge commit title:
    
    - `PR_TITLE` - default to the pull request's title.
    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    """
    PR_TITLE = 'PR_TITLE'
    COMMIT_OR_PR_TITLE = 'COMMIT_OR_PR_TITLE'

class ReposUpdateRequestBodyVisibilityEnum(str, Enum):
    r"""The visibility of the repository."""
    PUBLIC = 'public'
    PRIVATE = 'private'
    INTERNAL = 'internal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposUpdateRequestBody:
    
    allow_auto_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_auto_merge'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge."""  
    allow_forking: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_forking'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow private forks, or `false` to prevent private forks."""  
    allow_merge_commit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_merge_commit'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits."""  
    allow_rebase_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_rebase_merge'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging."""  
    allow_squash_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_squash_merge'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging."""  
    allow_update_branch: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_update_branch'), 'exclude': lambda f: f is None }})
    r"""Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise."""  
    archived: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archived'), 'exclude': lambda f: f is None }})
    r"""Whether to archive this repository. **Note**: You cannot unarchive repositories through the API."""  
    default_branch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_branch'), 'exclude': lambda f: f is None }})
    r"""Updates the default branch for this repository."""  
    delete_branch_on_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete_branch_on_merge'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A short description of the repository."""  
    has_issues: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_issues'), 'exclude': lambda f: f is None }})
    r"""Either `true` to enable issues for this repository or `false` to disable them."""  
    has_projects: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_projects'), 'exclude': lambda f: f is None }})
    r"""Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error."""  
    has_wiki: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_wiki'), 'exclude': lambda f: f is None }})
    r"""Either `true` to enable the wiki for this repository or `false` to disable it."""  
    homepage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage'), 'exclude': lambda f: f is None }})
    r"""A URL with more information about the repository."""  
    is_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_template'), 'exclude': lambda f: f is None }})
    r"""Either `true` to make this repo available as a template repository or `false` to prevent it."""  
    merge_commit_message: Optional[ReposUpdateRequestBodyMergeCommitMessageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merge_commit_message'), 'exclude': lambda f: f is None }})
    r"""The default value for a merge commit message.
    
    - `PR_TITLE` - default to the pull request's title.
    - `PR_BODY` - default to the pull request's body.
    - `BLANK` - default to a blank commit message.
    """  
    merge_commit_title: Optional[ReposUpdateRequestBodyMergeCommitTitleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merge_commit_title'), 'exclude': lambda f: f is None }})
    r"""The default value for a merge commit title.
    
    - `PR_TITLE` - default to the pull request's title.
    - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
    """  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the repository."""  
    private: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private'), 'exclude': lambda f: f is None }})
    r"""Either `true` to make the repository private or `false` to make it public. Default: `false`.
    **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/github-ae@latest/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
    """  
    squash_merge_commit_message: Optional[ReposUpdateRequestBodySquashMergeCommitMessageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('squash_merge_commit_message'), 'exclude': lambda f: f is None }})
    r"""The default value for a squash merge commit message:
    
    - `PR_BODY` - default to the pull request's body.
    - `COMMIT_MESSAGES` - default to the branch's commit messages.
    - `BLANK` - default to a blank commit message.
    """  
    squash_merge_commit_title: Optional[ReposUpdateRequestBodySquashMergeCommitTitleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('squash_merge_commit_title'), 'exclude': lambda f: f is None }})
    r"""The default value for a squash merge commit title:
    
    - `PR_TITLE` - default to the pull request's title.
    - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
    """  
    use_squash_pr_title_as_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_squash_pr_title_as_default'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead."""  
    visibility: Optional[ReposUpdateRequestBodyVisibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""The visibility of the repository."""  
    web_commit_signoff_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('web_commit_signoff_required'), 'exclude': lambda f: f is None }})
    r"""Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits."""  
    

@dataclasses.dataclass
class ReposUpdateRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: Optional[ReposUpdateRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ReposUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Temporary Redirect"""  
    full_repository: Optional[shared_full_repository.FullRepository] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    