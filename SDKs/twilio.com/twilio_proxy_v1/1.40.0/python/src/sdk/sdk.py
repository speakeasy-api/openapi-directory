"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://proxy.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_message_interaction(self, request: operations.CreateMessageInteractionRequest, security: operations.CreateMessageInteractionSecurity, server_url: Optional[str] = None) -> operations.CreateMessageInteractionResponse:
        r"""Create a new message Interaction to send directly from your system to one [Participant](https://www.twilio.com/docs/proxy/api/participant).  The `inbound` properties for the Interaction will always be empty."""
        base_url = operations.CREATE_MESSAGE_INTERACTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateMessageInteractionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMessageInteractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSessionParticipantMessageInteraction])
                res.proxy_v1_service_session_participant_message_interaction = out

        return res

    def create_participant(self, request: operations.CreateParticipantRequest, security: operations.CreateParticipantSecurity, server_url: Optional[str] = None) -> operations.CreateParticipantResponse:
        r"""Add a new Participant to the Session"""
        base_url = operations.CREATE_PARTICIPANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateParticipantRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateParticipantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSessionParticipant])
                res.proxy_v1_service_session_participant = out

        return res

    def create_phone_number(self, request: operations.CreatePhoneNumberRequest, security: operations.CreatePhoneNumberSecurity, server_url: Optional[str] = None) -> operations.CreatePhoneNumberResponse:
        r"""Add a Phone Number to a Service's Proxy Number Pool."""
        base_url = operations.CREATE_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreatePhoneNumberRequest, base_url, '/v1/Services/{ServiceSid}/PhoneNumbers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServicePhoneNumber])
                res.proxy_v1_service_phone_number = out

        return res

    def create_service(self, request: operations.CreateServiceCreateServiceRequest, security: operations.CreateServiceSecurity, server_url: Optional[str] = None) -> operations.CreateServiceResponse:
        r"""Create a new Service for Twilio Proxy"""
        base_url = operations.CREATE_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Services'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1Service])
                res.proxy_v1_service = out

        return res

    def create_session(self, request: operations.CreateSessionRequest, security: operations.CreateSessionSecurity, server_url: Optional[str] = None) -> operations.CreateSessionResponse:
        r"""Create a new Session"""
        base_url = operations.CREATE_SESSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSessionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSession])
                res.proxy_v1_service_session = out

        return res

    def create_short_code(self, request: operations.CreateShortCodeRequest, security: operations.CreateShortCodeSecurity, server_url: Optional[str] = None) -> operations.CreateShortCodeResponse:
        r"""Add a Short Code to the Proxy Number Pool for the Service."""
        base_url = operations.CREATE_SHORT_CODE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateShortCodeRequest, base_url, '/v1/Services/{ServiceSid}/ShortCodes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateShortCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceShortCode])
                res.proxy_v1_service_short_code = out

        return res

    def delete_interaction(self, request: operations.DeleteInteractionRequest, security: operations.DeleteInteractionSecurity, server_url: Optional[str] = None) -> operations.DeleteInteractionResponse:
        r"""Delete a specific Interaction."""
        base_url = operations.DELETE_INTERACTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteInteractionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteInteractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_participant(self, request: operations.DeleteParticipantRequest, security: operations.DeleteParticipantSecurity, server_url: Optional[str] = None) -> operations.DeleteParticipantResponse:
        r"""Delete a specific Participant. This is a soft-delete. The participant remains associated with the session and cannot be re-added. Participants are only permanently deleted when the [Session](https://www.twilio.com/docs/proxy/api/session) is deleted."""
        base_url = operations.DELETE_PARTICIPANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteParticipantRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteParticipantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_phone_number(self, request: operations.DeletePhoneNumberRequest, security: operations.DeletePhoneNumberSecurity, server_url: Optional[str] = None) -> operations.DeletePhoneNumberResponse:
        r"""Delete a specific Phone Number from a Service."""
        base_url = operations.DELETE_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeletePhoneNumberRequest, base_url, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_service(self, request: operations.DeleteServiceRequest, security: operations.DeleteServiceSecurity, server_url: Optional[str] = None) -> operations.DeleteServiceResponse:
        r"""Delete a specific Service."""
        base_url = operations.DELETE_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteServiceRequest, base_url, '/v1/Services/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_session(self, request: operations.DeleteSessionRequest, security: operations.DeleteSessionSecurity, server_url: Optional[str] = None) -> operations.DeleteSessionResponse:
        r"""Delete a specific Session."""
        base_url = operations.DELETE_SESSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSessionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_short_code(self, request: operations.DeleteShortCodeRequest, security: operations.DeleteShortCodeSecurity, server_url: Optional[str] = None) -> operations.DeleteShortCodeResponse:
        r"""Delete a specific Short Code from a Service."""
        base_url = operations.DELETE_SHORT_CODE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteShortCodeRequest, base_url, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteShortCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_interaction(self, request: operations.FetchInteractionRequest, security: operations.FetchInteractionSecurity, server_url: Optional[str] = None) -> operations.FetchInteractionResponse:
        r"""Retrieve a list of Interactions for a given [Session](https://www.twilio.com/docs/proxy/api/session)."""
        base_url = operations.FETCH_INTERACTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchInteractionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchInteractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSessionInteraction])
                res.proxy_v1_service_session_interaction = out

        return res

    def fetch_message_interaction(self, request: operations.FetchMessageInteractionRequest, security: operations.FetchMessageInteractionSecurity, server_url: Optional[str] = None) -> operations.FetchMessageInteractionResponse:
        base_url = operations.FETCH_MESSAGE_INTERACTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchMessageInteractionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchMessageInteractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSessionParticipantMessageInteraction])
                res.proxy_v1_service_session_participant_message_interaction = out

        return res

    def fetch_participant(self, request: operations.FetchParticipantRequest, security: operations.FetchParticipantSecurity, server_url: Optional[str] = None) -> operations.FetchParticipantResponse:
        r"""Fetch a specific Participant."""
        base_url = operations.FETCH_PARTICIPANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchParticipantRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchParticipantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSessionParticipant])
                res.proxy_v1_service_session_participant = out

        return res

    def fetch_phone_number(self, request: operations.FetchPhoneNumberRequest, security: operations.FetchPhoneNumberSecurity, server_url: Optional[str] = None) -> operations.FetchPhoneNumberResponse:
        r"""Fetch a specific Phone Number."""
        base_url = operations.FETCH_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchPhoneNumberRequest, base_url, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServicePhoneNumber])
                res.proxy_v1_service_phone_number = out

        return res

    def fetch_service(self, request: operations.FetchServiceRequest, security: operations.FetchServiceSecurity, server_url: Optional[str] = None) -> operations.FetchServiceResponse:
        r"""Fetch a specific Service."""
        base_url = operations.FETCH_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchServiceRequest, base_url, '/v1/Services/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1Service])
                res.proxy_v1_service = out

        return res

    def fetch_session(self, request: operations.FetchSessionRequest, security: operations.FetchSessionSecurity, server_url: Optional[str] = None) -> operations.FetchSessionResponse:
        r"""Fetch a specific Session."""
        base_url = operations.FETCH_SESSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSessionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSession])
                res.proxy_v1_service_session = out

        return res

    def fetch_short_code(self, request: operations.FetchShortCodeRequest, security: operations.FetchShortCodeSecurity, server_url: Optional[str] = None) -> operations.FetchShortCodeResponse:
        r"""Fetch a specific Short Code."""
        base_url = operations.FETCH_SHORT_CODE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchShortCodeRequest, base_url, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchShortCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceShortCode])
                res.proxy_v1_service_short_code = out

        return res

    def list_interaction(self, request: operations.ListInteractionRequest, security: operations.ListInteractionSecurity, server_url: Optional[str] = None) -> operations.ListInteractionResponse:
        r"""Retrieve a list of all Interactions for a Session. A maximum of 100 records will be returned per page."""
        base_url = operations.LIST_INTERACTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListInteractionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Interactions', request)
        
        query_params = utils.get_query_params(operations.ListInteractionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListInteractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListInteractionListInteractionResponse])
                res.list_interaction_response = out

        return res

    def list_message_interaction(self, request: operations.ListMessageInteractionRequest, security: operations.ListMessageInteractionSecurity, server_url: Optional[str] = None) -> operations.ListMessageInteractionResponse:
        base_url = operations.LIST_MESSAGE_INTERACTION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListMessageInteractionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants/{ParticipantSid}/MessageInteractions', request)
        
        query_params = utils.get_query_params(operations.ListMessageInteractionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListMessageInteractionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListMessageInteractionListMessageInteractionResponse])
                res.list_message_interaction_response = out

        return res

    def list_participant(self, request: operations.ListParticipantRequest, security: operations.ListParticipantSecurity, server_url: Optional[str] = None) -> operations.ListParticipantResponse:
        r"""Retrieve a list of all Participants in a Session."""
        base_url = operations.LIST_PARTICIPANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListParticipantRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{SessionSid}/Participants', request)
        
        query_params = utils.get_query_params(operations.ListParticipantRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListParticipantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListParticipantListParticipantResponse])
                res.list_participant_response = out

        return res

    def list_phone_number(self, request: operations.ListPhoneNumberRequest, security: operations.ListPhoneNumberSecurity, server_url: Optional[str] = None) -> operations.ListPhoneNumberResponse:
        r"""Retrieve a list of all Phone Numbers in the Proxy Number Pool for a Service. A maximum of 100 records will be returned per page."""
        base_url = operations.LIST_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListPhoneNumberRequest, base_url, '/v1/Services/{ServiceSid}/PhoneNumbers', request)
        
        query_params = utils.get_query_params(operations.ListPhoneNumberRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPhoneNumberListPhoneNumberResponse])
                res.list_phone_number_response = out

        return res

    def list_service(self, request: operations.ListServiceRequest, security: operations.ListServiceSecurity, server_url: Optional[str] = None) -> operations.ListServiceResponse:
        r"""Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will be returned per page."""
        base_url = operations.LIST_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Services'
        
        query_params = utils.get_query_params(operations.ListServiceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListServiceListServiceResponse])
                res.list_service_response = out

        return res

    def list_session(self, request: operations.ListSessionRequest, security: operations.ListSessionSecurity, server_url: Optional[str] = None) -> operations.ListSessionResponse:
        r"""Retrieve a list of all Sessions for the Service. A maximum of 100 records will be returned per page."""
        base_url = operations.LIST_SESSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSessionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions', request)
        
        query_params = utils.get_query_params(operations.ListSessionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSessionListSessionResponse])
                res.list_session_response = out

        return res

    def list_short_code(self, request: operations.ListShortCodeRequest, security: operations.ListShortCodeSecurity, server_url: Optional[str] = None) -> operations.ListShortCodeResponse:
        r"""Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A maximum of 100 records will be returned per page."""
        base_url = operations.LIST_SHORT_CODE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListShortCodeRequest, base_url, '/v1/Services/{ServiceSid}/ShortCodes', request)
        
        query_params = utils.get_query_params(operations.ListShortCodeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListShortCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListShortCodeListShortCodeResponse])
                res.list_short_code_response = out

        return res

    def update_phone_number(self, request: operations.UpdatePhoneNumberRequest, security: operations.UpdatePhoneNumberSecurity, server_url: Optional[str] = None) -> operations.UpdatePhoneNumberResponse:
        r"""Update a specific Proxy Number."""
        base_url = operations.UPDATE_PHONE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdatePhoneNumberRequest, base_url, '/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePhoneNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServicePhoneNumber])
                res.proxy_v1_service_phone_number = out

        return res

    def update_service(self, request: operations.UpdateServiceRequest, security: operations.UpdateServiceSecurity, server_url: Optional[str] = None) -> operations.UpdateServiceResponse:
        r"""Update a specific Service."""
        base_url = operations.UPDATE_SERVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateServiceRequest, base_url, '/v1/Services/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateServiceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1Service])
                res.proxy_v1_service = out

        return res

    def update_session(self, request: operations.UpdateSessionRequest, security: operations.UpdateSessionSecurity, server_url: Optional[str] = None) -> operations.UpdateSessionResponse:
        r"""Update a specific Session."""
        base_url = operations.UPDATE_SESSION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSessionRequest, base_url, '/v1/Services/{ServiceSid}/Sessions/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceSession])
                res.proxy_v1_service_session = out

        return res

    def update_short_code(self, request: operations.UpdateShortCodeRequest, security: operations.UpdateShortCodeSecurity, server_url: Optional[str] = None) -> operations.UpdateShortCodeResponse:
        r"""Update a specific Short Code."""
        base_url = operations.UPDATE_SHORT_CODE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateShortCodeRequest, base_url, '/v1/Services/{ServiceSid}/ShortCodes/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateShortCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProxyV1ServiceShortCode])
                res.proxy_v1_service_short_code = out

        return res

    