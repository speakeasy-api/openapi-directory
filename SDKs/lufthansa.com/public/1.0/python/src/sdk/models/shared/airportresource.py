"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import airport as shared_airport
from ..shared import link as shared_link
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AirportResourceAirports:
    r"""Container for airport elements."""
    
    airport: Optional[shared_airport.Airport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Airport'), 'exclude': lambda f: f is None }})
    r"""Array of all available airports or one airport matching the request."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AirportResourceMeta:
    r"""Container for meta links."""
    
    at_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('@Version'), 'exclude': lambda f: f is None }})  
    link: Optional[list[shared_link.Link]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Link'), 'exclude': lambda f: f is None }})
    r"""Array: links to resource itself and other related resources."""  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalCount'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AirportResource:
    r"""Root element of airport response."""
    
    airports: Optional[AirportResourceAirports] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Airports'), 'exclude': lambda f: f is None }})
    r"""Container for airport elements."""  
    meta: Optional[AirportResourceMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Meta'), 'exclude': lambda f: f is None }})
    r"""Container for meta links."""  
    