"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class GetPhoneRecordingsSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetPhoneRecordingsRequest:
    
    from_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date and time in **yyyy-mm-dd** format or **yyyy-MM-dd’T’HH:mm:ss’Z’** format. The date range defined by the from and to parameters should only be one month as the report includes only one month worth of data at once."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The current page number of returned records."""  
    owner_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'owner_type', 'style': 'form', 'explode': True }})
    r"""The owner type. The allowed values are null, `user`, or `callQueue`. The default is null. If null, returns all owner types."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call. The default is **30**, and the maximum is **100**."""  
    recording_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'recording_type', 'style': 'form', 'explode': True }})
    r"""The recording type. The allowed values are null, `OnDemand`, or `Automatic`. The default is null. If null, returns all recording types."""  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'site_id', 'style': 'form', 'explode': True }})
    r"""The site ID. The default is `All sites`."""  
    to: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date and time in **yyyy-mm-dd** format or **yyyy-MM-dd’T’HH:mm:ss’Z’** format, the same formats supported by the `from` parameter."""  
    
class GetPhoneRecordings200ApplicationXMLRecordingsCalleeNumberTypeEnum(str, Enum):
    r"""Specifies the callee' number type.<br>
    `1` - internal<br>
    `2` - external<br>
    """
    ONE = '1'
    TWO = '2'

class GetPhoneRecordings200ApplicationXMLRecordingsCallerNumberTypeEnum(str, Enum):
    r"""Specifies the type of the caller number.<br>
    
    `1` - internal<br>
    `2` - external<br>
    """
    ONE = '1'
    TWO = '2'

class GetPhoneRecordings200ApplicationXMLRecordingsDirectionEnum(str, Enum):
    r"""The direction of the call. Values: `inbound` or `outbound`."""
    INBOUND = 'inbound'
    OUTBOUND = 'outbound'

class GetPhoneRecordings200ApplicationXMLRecordingsOwnerTypeEnum(str, Enum):
    r"""The owner type: `user` or `call queue`."""
    USER = 'user'
    CALL_QUEUE = 'call queue'


@dataclasses.dataclass
class GetPhoneRecordings200ApplicationXMLRecordingsOwner:
    r"""The owner of the recording."""
    
    extension_number: Optional[str] = dataclasses.field(default=None)
    r"""The extension number associated to the call number."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The owner's ID."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Name of the owner."""  
    type: Optional[GetPhoneRecordings200ApplicationXMLRecordingsOwnerTypeEnum] = dataclasses.field(default=None)
    r"""The owner type: `user` or `call queue`."""  
    

@dataclasses.dataclass
class GetPhoneRecordings200ApplicationXMLRecordingsSite:
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""The site ID."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""The site name."""  
    

@dataclasses.dataclass
class GetPhoneRecordings200ApplicationXMLRecordings:
    
    callee_name: Optional[str] = dataclasses.field(default=None)
    r"""The contact name of the callee."""  
    callee_number: Optional[str] = dataclasses.field(default=None)
    r"""The phone number of the callee."""  
    callee_number_type: Optional[GetPhoneRecordings200ApplicationXMLRecordingsCalleeNumberTypeEnum] = dataclasses.field(default=None)
    r"""Specifies the callee' number type.<br>
    `1` - internal<br>
    `2` - external<br>
    """  
    caller_name: Optional[str] = dataclasses.field(default=None)
    r"""The contact name of the caller."""  
    caller_number: Optional[str] = dataclasses.field(default=None)
    r"""The phone number associated to the caller."""  
    caller_number_type: Optional[GetPhoneRecordings200ApplicationXMLRecordingsCallerNumberTypeEnum] = dataclasses.field(default=None)
    r"""Specifies the type of the caller number.<br>
    
    `1` - internal<br>
    `2` - external<br>
    """  
    date_time: Optional[datetime] = dataclasses.field(default=None)
    r"""The date and time when the recording was received."""  
    direction: Optional[GetPhoneRecordings200ApplicationXMLRecordingsDirectionEnum] = dataclasses.field(default=None)
    r"""The direction of the call. Values: `inbound` or `outbound`."""  
    download_url: Optional[str] = dataclasses.field(default=None)
    r"""The download URL for the recording."""  
    duration: Optional[int] = dataclasses.field(default=None)
    r"""The duration of the recording."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Unique identifier of the recording."""  
    owner: Optional[GetPhoneRecordings200ApplicationXMLRecordingsOwner] = dataclasses.field(default=None)
    r"""The owner of the recording."""  
    recording_type: Optional[str] = dataclasses.field(default=None)
    r"""The recording type. The allowed values are `OnDemand` or `Automatic`."""  
    site: Optional[GetPhoneRecordings200ApplicationXMLRecordingsSite] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class GetPhoneRecordings200ApplicationXML:
    r"""**HTTP Status Code** `200`<br>
    OK.
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The current page number of returned records."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call. The default is **30**, and the maximum is **100**."""  
    recordings: Optional[list[GetPhoneRecordings200ApplicationXMLRecordings]] = dataclasses.field(default=None)  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""Total number of records returned."""  
    
class GetPhoneRecordings200ApplicationJSONRecordingsCalleeNumberTypeEnum(str, Enum):
    r"""Specifies the callee' number type.<br>
    `1` - internal<br>
    `2` - external<br>
    """
    ONE = '1'
    TWO = '2'

class GetPhoneRecordings200ApplicationJSONRecordingsCallerNumberTypeEnum(str, Enum):
    r"""Specifies the type of the caller number.<br>
    
    `1` - internal<br>
    `2` - external<br>
    """
    ONE = '1'
    TWO = '2'

class GetPhoneRecordings200ApplicationJSONRecordingsDirectionEnum(str, Enum):
    r"""The direction of the call. Values: `inbound` or `outbound`."""
    INBOUND = 'inbound'
    OUTBOUND = 'outbound'

class GetPhoneRecordings200ApplicationJSONRecordingsOwnerTypeEnum(str, Enum):
    r"""The owner type: `user` or `call queue`."""
    USER = 'user'
    CALL_QUEUE = 'call queue'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPhoneRecordings200ApplicationJSONRecordingsOwner:
    r"""The owner of the recording."""
    
    extension_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extension_number'), 'exclude': lambda f: f is None }})
    r"""The extension number associated to the call number."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The owner's ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the owner."""  
    type: Optional[GetPhoneRecordings200ApplicationJSONRecordingsOwnerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The owner type: `user` or `call queue`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPhoneRecordings200ApplicationJSONRecordingsSite:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The site ID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The site name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPhoneRecordings200ApplicationJSONRecordings:
    
    callee_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_name'), 'exclude': lambda f: f is None }})
    r"""The contact name of the callee."""  
    callee_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number'), 'exclude': lambda f: f is None }})
    r"""The phone number of the callee."""  
    callee_number_type: Optional[GetPhoneRecordings200ApplicationJSONRecordingsCalleeNumberTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callee_number_type'), 'exclude': lambda f: f is None }})
    r"""Specifies the callee' number type.<br>
    `1` - internal<br>
    `2` - external<br>
    """  
    caller_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_name'), 'exclude': lambda f: f is None }})
    r"""The contact name of the caller."""  
    caller_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number'), 'exclude': lambda f: f is None }})
    r"""The phone number associated to the caller."""  
    caller_number_type: Optional[GetPhoneRecordings200ApplicationJSONRecordingsCallerNumberTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caller_number_type'), 'exclude': lambda f: f is None }})
    r"""Specifies the type of the caller number.<br>
    
    `1` - internal<br>
    `2` - external<br>
    """  
    date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the recording was received."""  
    direction: Optional[GetPhoneRecordings200ApplicationJSONRecordingsDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('direction'), 'exclude': lambda f: f is None }})
    r"""The direction of the call. Values: `inbound` or `outbound`."""  
    download_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download_url'), 'exclude': lambda f: f is None }})
    r"""The download URL for the recording."""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""The duration of the recording."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier of the recording."""  
    owner: Optional[GetPhoneRecordings200ApplicationJSONRecordingsOwner] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner'), 'exclude': lambda f: f is None }})
    r"""The owner of the recording."""  
    recording_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_type'), 'exclude': lambda f: f is None }})
    r"""The recording type. The allowed values are `OnDemand` or `Automatic`."""  
    site: Optional[GetPhoneRecordings200ApplicationJSONRecordingsSite] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('site'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPhoneRecordings200ApplicationJSON:
    r"""**HTTP Status Code** `200`<br>
    OK.
    """
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The current page number of returned records."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call. The default is **30**, and the maximum is **100**."""  
    recordings: Optional[list[GetPhoneRecordings200ApplicationJSONRecordings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordings'), 'exclude': lambda f: f is None }})  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""Total number of records returned."""  
    

@dataclasses.dataclass
class GetPhoneRecordingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    get_phone_recordings_200_application_json_object: Optional[GetPhoneRecordings200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code** `200`<br>
    OK.
    """  
    get_phone_recordings_400_application_json_any: Optional[Any] = dataclasses.field(default=None)
    r"""**HTTP Response Code:** `400`<br>
    The template name you entered already exists. Provide a new name for the template and try again.<br>
    
    **Error Code:** `300`<br>
    Validation failed. You provided an incorrect value for the template type. Provide a valid value and try again.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    