"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UptimeCheckConfig = exports.UptimeCheckConfigSelectedRegionsEnum = exports.UptimeCheckConfigCheckerTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var contentmatcher_1 = require("./contentmatcher");
var httpcheck_1 = require("./httpcheck");
var internalchecker_1 = require("./internalchecker");
var monitoredresource_1 = require("./monitoredresource");
var resourcegroup_1 = require("./resourcegroup");
var tcpcheck_1 = require("./tcpcheck");
var class_transformer_1 = require("class-transformer");
/**
 * The type of checkers to use to execute the Uptime check.
 */
var UptimeCheckConfigCheckerTypeEnum;
(function (UptimeCheckConfigCheckerTypeEnum) {
    UptimeCheckConfigCheckerTypeEnum["CheckerTypeUnspecified"] = "CHECKER_TYPE_UNSPECIFIED";
    UptimeCheckConfigCheckerTypeEnum["StaticIpCheckers"] = "STATIC_IP_CHECKERS";
    UptimeCheckConfigCheckerTypeEnum["VpcCheckers"] = "VPC_CHECKERS";
})(UptimeCheckConfigCheckerTypeEnum = exports.UptimeCheckConfigCheckerTypeEnum || (exports.UptimeCheckConfigCheckerTypeEnum = {}));
var UptimeCheckConfigSelectedRegionsEnum;
(function (UptimeCheckConfigSelectedRegionsEnum) {
    UptimeCheckConfigSelectedRegionsEnum["RegionUnspecified"] = "REGION_UNSPECIFIED";
    UptimeCheckConfigSelectedRegionsEnum["Usa"] = "USA";
    UptimeCheckConfigSelectedRegionsEnum["Europe"] = "EUROPE";
    UptimeCheckConfigSelectedRegionsEnum["SouthAmerica"] = "SOUTH_AMERICA";
    UptimeCheckConfigSelectedRegionsEnum["AsiaPacific"] = "ASIA_PACIFIC";
    UptimeCheckConfigSelectedRegionsEnum["UsaOregon"] = "USA_OREGON";
    UptimeCheckConfigSelectedRegionsEnum["UsaIowa"] = "USA_IOWA";
    UptimeCheckConfigSelectedRegionsEnum["UsaVirginia"] = "USA_VIRGINIA";
})(UptimeCheckConfigSelectedRegionsEnum = exports.UptimeCheckConfigSelectedRegionsEnum || (exports.UptimeCheckConfigSelectedRegionsEnum = {}));
/**
 * This message configures which resources and services to monitor for availability.
 */
var UptimeCheckConfig = /** @class */ (function (_super) {
    __extends(UptimeCheckConfig, _super);
    function UptimeCheckConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "checkerType" }),
        __metadata("design:type", String)
    ], UptimeCheckConfig.prototype, "checkerType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: contentmatcher_1.ContentMatcher }),
        (0, class_transformer_1.Expose)({ name: "contentMatchers" }),
        (0, class_transformer_1.Type)(function () { return contentmatcher_1.ContentMatcher; }),
        __metadata("design:type", Array)
    ], UptimeCheckConfig.prototype, "contentMatchers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "displayName" }),
        __metadata("design:type", String)
    ], UptimeCheckConfig.prototype, "displayName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "httpCheck" }),
        (0, class_transformer_1.Type)(function () { return httpcheck_1.HttpCheck; }),
        __metadata("design:type", httpcheck_1.HttpCheck)
    ], UptimeCheckConfig.prototype, "httpCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: internalchecker_1.InternalChecker }),
        (0, class_transformer_1.Expose)({ name: "internalCheckers" }),
        (0, class_transformer_1.Type)(function () { return internalchecker_1.InternalChecker; }),
        __metadata("design:type", Array)
    ], UptimeCheckConfig.prototype, "internalCheckers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "isInternal" }),
        __metadata("design:type", Boolean)
    ], UptimeCheckConfig.prototype, "isInternal", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "monitoredResource" }),
        (0, class_transformer_1.Type)(function () { return monitoredresource_1.MonitoredResource; }),
        __metadata("design:type", monitoredresource_1.MonitoredResource)
    ], UptimeCheckConfig.prototype, "monitoredResource", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UptimeCheckConfig.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "period" }),
        __metadata("design:type", String)
    ], UptimeCheckConfig.prototype, "period", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "resourceGroup" }),
        (0, class_transformer_1.Type)(function () { return resourcegroup_1.ResourceGroup; }),
        __metadata("design:type", resourcegroup_1.ResourceGroup)
    ], UptimeCheckConfig.prototype, "resourceGroup", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selectedRegions" }),
        __metadata("design:type", Array)
    ], UptimeCheckConfig.prototype, "selectedRegions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tcpCheck" }),
        (0, class_transformer_1.Type)(function () { return tcpcheck_1.TcpCheck; }),
        __metadata("design:type", tcpcheck_1.TcpCheck)
    ], UptimeCheckConfig.prototype, "tcpCheck", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "timeout" }),
        __metadata("design:type", String)
    ], UptimeCheckConfig.prototype, "timeout", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "userLabels" }),
        __metadata("design:type", Object)
    ], UptimeCheckConfig.prototype, "userLabels", void 0);
    return UptimeCheckConfig;
}(utils_1.SpeakeasyBase));
exports.UptimeCheckConfig = UptimeCheckConfig;
