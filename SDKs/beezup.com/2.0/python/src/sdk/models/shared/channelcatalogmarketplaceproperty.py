"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import beezup_common_infosummaries as shared_beezup_common_infosummaries
from ..shared import beezup_common_lovlink3 as shared_beezup_common_lovlink3
from ..shared import channelcatalogmarketplacepropertydiscriminatortype_enum as shared_channelcatalogmarketplacepropertydiscriminatortype_enum
from ..shared import type_enum as shared_type_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelCatalogMarketplaceProperty:
    r"""Model for fetching a channel catalog marketplace property"""
    
    discriminator_type: shared_channelcatalogmarketplacepropertydiscriminatortype_enum.ChannelCatalogMarketplacePropertyDiscriminatorTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discriminatorType') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Channel catalog marketplace property name"""  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position') }})
    r"""Indicate the position of the property in the display group"""  
    read_only: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readOnly') }})
    r"""Indicate if the value cannot be changed. This is used for example for ebay token that should not be changed."""  
    required: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required') }})
    r"""Indicate if the property is required or not"""  
    type: shared_type_enum.TypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The Data Type"""  
    visible: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visible') }})
    r"""Indicates if this property should be displayed in the configuration page."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Indicate the description of the property"""  
    info: Optional[shared_beezup_common_infosummaries.BeezUPCommonInfoSummaries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})  
    lov_link: Optional[shared_beezup_common_lovlink3.BeezUPCommonLOVLink3] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lovLink'), 'exclude': lambda f: f is None }})
    r"""Describe the way you have to follow to get access to the LOV"""  
    lov_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lovRequired'), 'exclude': lambda f: f is None }})
    r"""Indicates if the property value must be in the list of value."""  
    max_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxItems'), 'exclude': lambda f: f is None }})
    r"""Indicates the maximum item count of the property value"""  
    max_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxLength'), 'exclude': lambda f: f is None }})
    r"""Indicates the maximum size of the property value"""  
    min_items: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minItems'), 'exclude': lambda f: f is None }})
    r"""Indicates the minimum item count of the property value."""  
    min_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minLength'), 'exclude': lambda f: f is None }})
    r"""Indicates the minimum size of the property value"""  
    offer_id_required: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerIdRequired'), 'exclude': lambda f: f is None }})
    r"""Indicates the offer identifier required to configure this property."""  
    pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pattern'), 'exclude': lambda f: f is None }})
    r"""Channel catalog marketplace setting value format validation regular expression"""  
    