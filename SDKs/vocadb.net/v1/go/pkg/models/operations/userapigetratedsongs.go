// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UserAPIGetRatedSongsPathParams struct {
	// ID of the user whose songs are to be browsed.
	ID int `pathParam:"style=simple,explode=false,name=id"`
}

// UserAPIGetRatedSongsArtistGroupingEnum - Logical grouping for artists.
type UserAPIGetRatedSongsArtistGroupingEnum string

const (
	UserAPIGetRatedSongsArtistGroupingEnumAnd UserAPIGetRatedSongsArtistGroupingEnum = "And"
	UserAPIGetRatedSongsArtistGroupingEnumOr  UserAPIGetRatedSongsArtistGroupingEnum = "Or"
)

func (e *UserAPIGetRatedSongsArtistGroupingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "And":
		fallthrough
	case "Or":
		*e = UserAPIGetRatedSongsArtistGroupingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetRatedSongsArtistGroupingEnum: %s", s)
	}
}

// UserAPIGetRatedSongsFieldsEnum - List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.
type UserAPIGetRatedSongsFieldsEnum string

const (
	UserAPIGetRatedSongsFieldsEnumNone            UserAPIGetRatedSongsFieldsEnum = "None"
	UserAPIGetRatedSongsFieldsEnumAdditionalNames UserAPIGetRatedSongsFieldsEnum = "AdditionalNames"
	UserAPIGetRatedSongsFieldsEnumAlbums          UserAPIGetRatedSongsFieldsEnum = "Albums"
	UserAPIGetRatedSongsFieldsEnumArtists         UserAPIGetRatedSongsFieldsEnum = "Artists"
	UserAPIGetRatedSongsFieldsEnumLyrics          UserAPIGetRatedSongsFieldsEnum = "Lyrics"
	UserAPIGetRatedSongsFieldsEnumMainPicture     UserAPIGetRatedSongsFieldsEnum = "MainPicture"
	UserAPIGetRatedSongsFieldsEnumNames           UserAPIGetRatedSongsFieldsEnum = "Names"
	UserAPIGetRatedSongsFieldsEnumPVs             UserAPIGetRatedSongsFieldsEnum = "PVs"
	UserAPIGetRatedSongsFieldsEnumReleaseEvent    UserAPIGetRatedSongsFieldsEnum = "ReleaseEvent"
	UserAPIGetRatedSongsFieldsEnumTags            UserAPIGetRatedSongsFieldsEnum = "Tags"
	UserAPIGetRatedSongsFieldsEnumThumbURL        UserAPIGetRatedSongsFieldsEnum = "ThumbUrl"
	UserAPIGetRatedSongsFieldsEnumWebLinks        UserAPIGetRatedSongsFieldsEnum = "WebLinks"
)

func (e *UserAPIGetRatedSongsFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "AdditionalNames":
		fallthrough
	case "Albums":
		fallthrough
	case "Artists":
		fallthrough
	case "Lyrics":
		fallthrough
	case "MainPicture":
		fallthrough
	case "Names":
		fallthrough
	case "PVs":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "Tags":
		fallthrough
	case "ThumbUrl":
		fallthrough
	case "WebLinks":
		*e = UserAPIGetRatedSongsFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetRatedSongsFieldsEnum: %s", s)
	}
}

// UserAPIGetRatedSongsLangEnum - Content language preference (optional).
type UserAPIGetRatedSongsLangEnum string

const (
	UserAPIGetRatedSongsLangEnumDefault  UserAPIGetRatedSongsLangEnum = "Default"
	UserAPIGetRatedSongsLangEnumJapanese UserAPIGetRatedSongsLangEnum = "Japanese"
	UserAPIGetRatedSongsLangEnumRomaji   UserAPIGetRatedSongsLangEnum = "Romaji"
	UserAPIGetRatedSongsLangEnumEnglish  UserAPIGetRatedSongsLangEnum = "English"
)

func (e *UserAPIGetRatedSongsLangEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Default":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = UserAPIGetRatedSongsLangEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetRatedSongsLangEnum: %s", s)
	}
}

// UserAPIGetRatedSongsNameMatchModeEnum - Match mode for song name (optional, defaults to Auto).
type UserAPIGetRatedSongsNameMatchModeEnum string

const (
	UserAPIGetRatedSongsNameMatchModeEnumAuto       UserAPIGetRatedSongsNameMatchModeEnum = "Auto"
	UserAPIGetRatedSongsNameMatchModeEnumPartial    UserAPIGetRatedSongsNameMatchModeEnum = "Partial"
	UserAPIGetRatedSongsNameMatchModeEnumStartsWith UserAPIGetRatedSongsNameMatchModeEnum = "StartsWith"
	UserAPIGetRatedSongsNameMatchModeEnumExact      UserAPIGetRatedSongsNameMatchModeEnum = "Exact"
	UserAPIGetRatedSongsNameMatchModeEnumWords      UserAPIGetRatedSongsNameMatchModeEnum = "Words"
)

func (e *UserAPIGetRatedSongsNameMatchModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Auto":
		fallthrough
	case "Partial":
		fallthrough
	case "StartsWith":
		fallthrough
	case "Exact":
		fallthrough
	case "Words":
		*e = UserAPIGetRatedSongsNameMatchModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetRatedSongsNameMatchModeEnum: %s", s)
	}
}

// UserAPIGetRatedSongsPvServicesEnum - Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.
type UserAPIGetRatedSongsPvServicesEnum string

const (
	UserAPIGetRatedSongsPvServicesEnumNothing       UserAPIGetRatedSongsPvServicesEnum = "Nothing"
	UserAPIGetRatedSongsPvServicesEnumNicoNicoDouga UserAPIGetRatedSongsPvServicesEnum = "NicoNicoDouga"
	UserAPIGetRatedSongsPvServicesEnumYoutube       UserAPIGetRatedSongsPvServicesEnum = "Youtube"
	UserAPIGetRatedSongsPvServicesEnumSoundCloud    UserAPIGetRatedSongsPvServicesEnum = "SoundCloud"
	UserAPIGetRatedSongsPvServicesEnumVimeo         UserAPIGetRatedSongsPvServicesEnum = "Vimeo"
	UserAPIGetRatedSongsPvServicesEnumPiapro        UserAPIGetRatedSongsPvServicesEnum = "Piapro"
	UserAPIGetRatedSongsPvServicesEnumBilibili      UserAPIGetRatedSongsPvServicesEnum = "Bilibili"
	UserAPIGetRatedSongsPvServicesEnumFile          UserAPIGetRatedSongsPvServicesEnum = "File"
	UserAPIGetRatedSongsPvServicesEnumLocalFile     UserAPIGetRatedSongsPvServicesEnum = "LocalFile"
	UserAPIGetRatedSongsPvServicesEnumCreofuga      UserAPIGetRatedSongsPvServicesEnum = "Creofuga"
	UserAPIGetRatedSongsPvServicesEnumBandcamp      UserAPIGetRatedSongsPvServicesEnum = "Bandcamp"
)

func (e *UserAPIGetRatedSongsPvServicesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "NicoNicoDouga":
		fallthrough
	case "Youtube":
		fallthrough
	case "SoundCloud":
		fallthrough
	case "Vimeo":
		fallthrough
	case "Piapro":
		fallthrough
	case "Bilibili":
		fallthrough
	case "File":
		fallthrough
	case "LocalFile":
		fallthrough
	case "Creofuga":
		fallthrough
	case "Bandcamp":
		*e = UserAPIGetRatedSongsPvServicesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetRatedSongsPvServicesEnum: %s", s)
	}
}

// UserAPIGetRatedSongsRatingEnum - Filter songs by given rating (optional).
type UserAPIGetRatedSongsRatingEnum string

const (
	UserAPIGetRatedSongsRatingEnumNothing  UserAPIGetRatedSongsRatingEnum = "Nothing"
	UserAPIGetRatedSongsRatingEnumDislike  UserAPIGetRatedSongsRatingEnum = "Dislike"
	UserAPIGetRatedSongsRatingEnumLike     UserAPIGetRatedSongsRatingEnum = "Like"
	UserAPIGetRatedSongsRatingEnumFavorite UserAPIGetRatedSongsRatingEnum = "Favorite"
)

func (e *UserAPIGetRatedSongsRatingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Dislike":
		fallthrough
	case "Like":
		fallthrough
	case "Favorite":
		*e = UserAPIGetRatedSongsRatingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetRatedSongsRatingEnum: %s", s)
	}
}

// UserAPIGetRatedSongsSortEnum - Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.
type UserAPIGetRatedSongsSortEnum string

const (
	UserAPIGetRatedSongsSortEnumNone           UserAPIGetRatedSongsSortEnum = "None"
	UserAPIGetRatedSongsSortEnumName           UserAPIGetRatedSongsSortEnum = "Name"
	UserAPIGetRatedSongsSortEnumAdditionDate   UserAPIGetRatedSongsSortEnum = "AdditionDate"
	UserAPIGetRatedSongsSortEnumPublishDate    UserAPIGetRatedSongsSortEnum = "PublishDate"
	UserAPIGetRatedSongsSortEnumFavoritedTimes UserAPIGetRatedSongsSortEnum = "FavoritedTimes"
	UserAPIGetRatedSongsSortEnumRatingScore    UserAPIGetRatedSongsSortEnum = "RatingScore"
	UserAPIGetRatedSongsSortEnumRatingDate     UserAPIGetRatedSongsSortEnum = "RatingDate"
)

func (e *UserAPIGetRatedSongsSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "None":
		fallthrough
	case "Name":
		fallthrough
	case "AdditionDate":
		fallthrough
	case "PublishDate":
		fallthrough
	case "FavoritedTimes":
		fallthrough
	case "RatingScore":
		fallthrough
	case "RatingDate":
		*e = UserAPIGetRatedSongsSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIGetRatedSongsSortEnum: %s", s)
	}
}

type UserAPIGetRatedSongsQueryParams struct {
	// List of advanced filters (optional).
	AdvancedFilters []interface{} `queryParam:"style=form,explode=true,name=advancedFilters"`
	// Logical grouping for artists.
	ArtistGrouping *UserAPIGetRatedSongsArtistGroupingEnum `queryParam:"style=form,explode=true,name=artistGrouping"`
	// Filter by song artist (optional).
	ArtistID []int `queryParam:"style=form,explode=true,name=artistId"`
	// Include child voicebanks, if the artist being filtered by has any.
	ChildVoicebanks *bool `queryParam:"style=form,explode=true,name=childVoicebanks"`
	// List of optional fields (optional). Possible values are Albums, Artists, Names, PVs, Tags, ThumbUrl, WebLinks.
	Fields *UserAPIGetRatedSongsFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Whether to load total number of items (optional, default to false).
	GetTotalCount *bool `queryParam:"style=form,explode=true,name=getTotalCount"`
	// Group results by rating so that highest rated are first.
	GroupByRating *bool `queryParam:"style=form,explode=true,name=groupByRating"`
	// Content language preference (optional).
	Lang *UserAPIGetRatedSongsLangEnum `queryParam:"style=form,explode=true,name=lang"`
	// Maximum number of results to be loaded (optional, defaults to 10, maximum of 50).
	MaxResults *int `queryParam:"style=form,explode=true,name=maxResults"`
	// Match mode for song name (optional, defaults to Auto).
	NameMatchMode *UserAPIGetRatedSongsNameMatchModeEnum `queryParam:"style=form,explode=true,name=nameMatchMode"`
	// Filter by one or more PV services (separated by commas). The song will pass the filter if it has a PV for any of the matched services.
	PvServices *UserAPIGetRatedSongsPvServicesEnum `queryParam:"style=form,explode=true,name=pvServices"`
	// Song name query (optional).
	Query *string `queryParam:"style=form,explode=true,name=query"`
	// Filter songs by given rating (optional).
	Rating *UserAPIGetRatedSongsRatingEnum `queryParam:"style=form,explode=true,name=rating"`
	// Filter songs by song list (optional).
	SongListID *int `queryParam:"style=form,explode=true,name=songListId"`
	// Sort rule (optional, defaults to Name). Possible values are None, Name, AdditionDate, FavoritedTimes, RatingScore.
	Sort *UserAPIGetRatedSongsSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// First item to be retrieved (optional, defaults to 0).
	Start *int `queryParam:"style=form,explode=true,name=start"`
	// Filter by tag Id (optional). This filter can be specified multiple times.
	TagID []int `queryParam:"style=form,explode=true,name=tagId"`
	// Filter by tag name (optional).
	TagName *string `queryParam:"style=form,explode=true,name=tagName"`
}

type UserAPIGetRatedSongsRequest struct {
	PathParams  UserAPIGetRatedSongsPathParams
	QueryParams UserAPIGetRatedSongsQueryParams
}

type UserAPIGetRatedSongsResponse struct {
	Body        []byte
	ContentType string
	// OK
	PartialFindResultRatedSongForUserForAPIContract *shared.PartialFindResultRatedSongForUserForAPIContract
	StatusCode                                      int
	RawResponse                                     *http.Response
}
