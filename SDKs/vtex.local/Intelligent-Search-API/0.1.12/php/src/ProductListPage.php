<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ProductListPage 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get list of banners registered for query
     * 
     * Lists the banners registered for a given query. Check the [configuring banners documentation](https://help.vtex.com/en/tracks/vtex-intelligent-search--19wrbB7nEQcmwzDPl1l4Cb/4ViKEivLJtJsvpaW0aqIQ5) for a full explanation of the banner feature.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBannersFacetsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBannersFacetsResponse
     */
	public function getBannersFacets(
        \OpenAPI\OpenAPI\Models\Operations\GetBannersFacetsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBannersFacetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/banners/{facets}', \OpenAPI\OpenAPI\Models\Operations\GetBannersFacetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetBannersFacetsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBannersFacetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->banners = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Banners', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get attempt of correction of a misspelled term
     * 
     * Tries to correct a misspelled term from the search.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCorrectionSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorrectionSearchResponse
     */
	public function getCorrectionSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetCorrectionSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorrectionSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/correction_search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCorrectionSearchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorrectionSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->correction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Correction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of the possible facets for a given query
     * 
     * Lists the possible facets for a given query
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFacetsFacetsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFacetsFacetsResponse
     */
	public function getFacetsFacets(
        \OpenAPI\OpenAPI\Models\Operations\GetFacetsFacetsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFacetsFacetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/facets/{facets}', \OpenAPI\OpenAPI\Models\Operations\GetFacetsFacetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFacetsFacetsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFacetsFacetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->facets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Facets', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of products for a query
     * 
     * Lists the products for a given query.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProductSearchFacetsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProductSearchFacetsResponse
     */
	public function getProductSearchFacets(
        \OpenAPI\OpenAPI\Models\Operations\GetProductSearchFacetsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProductSearchFacetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/product_search/{facets}', \OpenAPI\OpenAPI\Models\Operations\GetProductSearchFacetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProductSearchFacetsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProductSearchFacetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->productSearch = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ProductSearch', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get list of suggested terms similar to the search term
     * 
     * Lists suggested terms similar to the search term.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsResponse
     */
	public function getSearchSuggestions(
        \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search_suggestions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSearchSuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchSuggestions = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchSuggestions', 'json');
            }
        }
        else if (($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}