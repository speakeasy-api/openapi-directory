// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MessagePropertyContentTypeEnum - The type of message that you are sending.
//
// **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.
//
// **Viber Business Messages**: supports `image` and `text`.
//
// **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.
//
// **SMS**: supports `text`.
type MessagePropertyContentTypeEnum string

const (
	MessagePropertyContentTypeEnumText     MessagePropertyContentTypeEnum = "text"
	MessagePropertyContentTypeEnumImage    MessagePropertyContentTypeEnum = "image"
	MessagePropertyContentTypeEnumAudio    MessagePropertyContentTypeEnum = "audio"
	MessagePropertyContentTypeEnumVideo    MessagePropertyContentTypeEnum = "video"
	MessagePropertyContentTypeEnumFile     MessagePropertyContentTypeEnum = "file"
	MessagePropertyContentTypeEnumTemplate MessagePropertyContentTypeEnum = "template"
	MessagePropertyContentTypeEnumCustom   MessagePropertyContentTypeEnum = "custom"
)

func (e *MessagePropertyContentTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "text":
		fallthrough
	case "image":
		fallthrough
	case "audio":
		fallthrough
	case "video":
		fallthrough
	case "file":
		fallthrough
	case "template":
		fallthrough
	case "custom":
		*e = MessagePropertyContentTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessagePropertyContentTypeEnum: %s", s)
	}
}

type MessagePropertyContent struct {
	Audio    *AudioProperty    `json:"audio,omitempty"`
	File     *FileProperty     `json:"file,omitempty"`
	Image    *ImageProperty    `json:"image,omitempty"`
	Template *TemplateProperty `json:"template,omitempty"`
	// The text of the message.
	//
	// **Messenger**: Is limited to 640 characters
	//
	// **SMS** or **Viber**: Is 1000 characters
	//
	// **WhatsApp**: is 4096 characters
	//
	Text *string `json:"text,omitempty"`
	// The type of message that you are sending.
	//
	// **Messenger**: supports `text`, `image`, `audio`, `video` and `file`.
	//
	// **Viber Business Messages**: supports `image` and `text`.
	//
	// **WhatsApp**: supports `template`, `text`, `image`, `audio`, `video` and `file`.
	//
	// **SMS**: supports `text`.
	//
	Type  MessagePropertyContentTypeEnum `json:"type"`
	Video *VideoProperty                 `json:"video,omitempty"`
}

// MessagePropertyMessengerCategoryEnum - The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
type MessagePropertyMessengerCategoryEnum string

const (
	MessagePropertyMessengerCategoryEnumResponse   MessagePropertyMessengerCategoryEnum = "response"
	MessagePropertyMessengerCategoryEnumUpdate     MessagePropertyMessengerCategoryEnum = "update"
	MessagePropertyMessengerCategoryEnumMessageTag MessagePropertyMessengerCategoryEnum = "message_tag"
)

func (e *MessagePropertyMessengerCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "response":
		fallthrough
	case "update":
		fallthrough
	case "message_tag":
		*e = MessagePropertyMessengerCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessagePropertyMessengerCategoryEnum: %s", s)
	}
}

type MessagePropertyMessenger struct {
	// The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy]( https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
	Category *MessagePropertyMessengerCategoryEnum `json:"category,omitempty"`
	// ‘A full list of the possible tags is available on [developers.facebook.com](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)'
	Tag *string `json:"tag,omitempty"`
}

// MessagePropertyViberServiceMsgCategoryEnum - The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative and a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
type MessagePropertyViberServiceMsgCategoryEnum string

const (
	MessagePropertyViberServiceMsgCategoryEnumTransaction MessagePropertyViberServiceMsgCategoryEnum = "transaction"
	MessagePropertyViberServiceMsgCategoryEnumPromotion   MessagePropertyViberServiceMsgCategoryEnum = "promotion"
)

func (e *MessagePropertyViberServiceMsgCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "transaction":
		fallthrough
	case "promotion":
		*e = MessagePropertyViberServiceMsgCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessagePropertyViberServiceMsgCategoryEnum: %s", s)
	}
}

type MessagePropertyViberServiceMsg struct {
	// The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative and a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
	Category *MessagePropertyViberServiceMsgCategoryEnum `json:"category,omitempty"`
	// Only valid for Viber Business Messages. Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
	TTL *int64 `json:"ttl,omitempty"`
}

// MessagePropertyWhatsappPolicyEnum - Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.
type MessagePropertyWhatsappPolicyEnum string

const (
	MessagePropertyWhatsappPolicyEnumFallback      MessagePropertyWhatsappPolicyEnum = "fallback"
	MessagePropertyWhatsappPolicyEnumDeterministic MessagePropertyWhatsappPolicyEnum = "deterministic"
)

func (e *MessagePropertyWhatsappPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fallback":
		fallthrough
	case "deterministic":
		*e = MessagePropertyWhatsappPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MessagePropertyWhatsappPolicyEnum: %s", s)
	}
}

type MessagePropertyWhatsapp struct {
	// We are using the industry standard, BCP 47, for locales. So in your API call to the /messages API you will need to put “en-GB” and this will refer to the “en_GB” template for WhatsApp. A full list of the possible locales is available on [developers.facebook.com](https://developers.facebook.com/docs/whatsapp/message-templates/creation#translations).
	Locale *string `json:"locale,omitempty"`
	// Please note that WhatsApp will deprecate `fallback` policy in January 2020. There are two policies that you can specify when sending a Message Template: `deterministic` and `fallback`. `deterministic` — Deliver the Message Template in exactly the language and locale asked for. `fallback` — Deliver the Message Template in the language that matches users language/locale setting on device. If one can not be found, deliver using the specified fallback language.
	Policy *MessagePropertyWhatsappPolicyEnum `json:"policy,omitempty"`
}

type MessageProperty struct {
	Content         MessagePropertyContent          `json:"content"`
	Messenger       *MessagePropertyMessenger       `json:"messenger,omitempty"`
	ViberServiceMsg *MessagePropertyViberServiceMsg `json:"viber_service_msg,omitempty"`
	Whatsapp        *MessagePropertyWhatsapp        `json:"whatsapp,omitempty"`
}
