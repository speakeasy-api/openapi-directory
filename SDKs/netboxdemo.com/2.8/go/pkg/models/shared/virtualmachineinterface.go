// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type VirtualMachineInterfaceModeLabelEnum string

const (
	VirtualMachineInterfaceModeLabelEnumAccess    VirtualMachineInterfaceModeLabelEnum = "Access"
	VirtualMachineInterfaceModeLabelEnumTagged    VirtualMachineInterfaceModeLabelEnum = "Tagged"
	VirtualMachineInterfaceModeLabelEnumTaggedAll VirtualMachineInterfaceModeLabelEnum = "Tagged (All)"
)

func (e *VirtualMachineInterfaceModeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Access":
		fallthrough
	case "Tagged":
		fallthrough
	case "Tagged (All)":
		*e = VirtualMachineInterfaceModeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineInterfaceModeLabelEnum: %s", s)
	}
}

type VirtualMachineInterfaceModeValueEnum string

const (
	VirtualMachineInterfaceModeValueEnumAccess    VirtualMachineInterfaceModeValueEnum = "access"
	VirtualMachineInterfaceModeValueEnumTagged    VirtualMachineInterfaceModeValueEnum = "tagged"
	VirtualMachineInterfaceModeValueEnumTaggedAll VirtualMachineInterfaceModeValueEnum = "tagged-all"
)

func (e *VirtualMachineInterfaceModeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access":
		fallthrough
	case "tagged":
		fallthrough
	case "tagged-all":
		*e = VirtualMachineInterfaceModeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineInterfaceModeValueEnum: %s", s)
	}
}

type VirtualMachineInterfaceMode struct {
	Label VirtualMachineInterfaceModeLabelEnum `json:"label"`
	Value VirtualMachineInterfaceModeValueEnum `json:"value"`
}

type VirtualMachineInterfaceTypeLabelEnum string

const (
	VirtualMachineInterfaceTypeLabelEnumVirtual VirtualMachineInterfaceTypeLabelEnum = "Virtual"
)

func (e *VirtualMachineInterfaceTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Virtual":
		*e = VirtualMachineInterfaceTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineInterfaceTypeLabelEnum: %s", s)
	}
}

type VirtualMachineInterfaceTypeValueEnum string

const (
	VirtualMachineInterfaceTypeValueEnumVirtual VirtualMachineInterfaceTypeValueEnum = "virtual"
)

func (e *VirtualMachineInterfaceTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "virtual":
		*e = VirtualMachineInterfaceTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineInterfaceTypeValueEnum: %s", s)
	}
}

type VirtualMachineInterfaceType struct {
	Label VirtualMachineInterfaceTypeLabelEnum `json:"label"`
	Value VirtualMachineInterfaceTypeValueEnum `json:"value"`
}

type VirtualMachineInterface struct {
	Description    *string                      `json:"description,omitempty"`
	Enabled        *bool                        `json:"enabled,omitempty"`
	ID             *int64                       `json:"id,omitempty"`
	MacAddress     *string                      `json:"mac_address,omitempty"`
	Mode           *VirtualMachineInterfaceMode `json:"mode,omitempty"`
	Mtu            *int64                       `json:"mtu,omitempty"`
	Name           string                       `json:"name"`
	TaggedVlans    []NestedVLAN                 `json:"tagged_vlans,omitempty"`
	Tags           []string                     `json:"tags,omitempty"`
	Type           *VirtualMachineInterfaceType `json:"type,omitempty"`
	UntaggedVlan   *NestedVLAN                  `json:"untagged_vlan,omitempty"`
	VirtualMachine NestedVirtualMachine         `json:"virtual_machine"`
}
