"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import import_ as shared_import_
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MigrationsStartImportRequestBodyVcsEnum(str, Enum):
    r"""The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response."""
    SUBVERSION = 'subversion'
    GIT = 'git'
    MERCURIAL = 'mercurial'
    TFVC = 'tfvc'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MigrationsStartImportRequestBody:
    
    vcs_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs_url') }})
    r"""The URL of the originating repository."""  
    tfvc_project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tfvc_project'), 'exclude': lambda f: f is None }})
    r"""For a tfvc import, the name of the project that is being imported."""  
    vcs: Optional[MigrationsStartImportRequestBodyVcsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs'), 'exclude': lambda f: f is None }})
    r"""The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response."""  
    vcs_password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs_password'), 'exclude': lambda f: f is None }})
    r"""If authentication is required, the password to provide to `vcs_url`."""  
    vcs_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vcs_username'), 'exclude': lambda f: f is None }})
    r"""If authentication is required, the username to provide to `vcs_url`."""  
    

@dataclasses.dataclass
class MigrationsStartImportRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})
    r"""The account owner of the repository. The name is not case sensitive."""  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})
    r"""The name of the repository. The name is not case sensitive."""  
    request_body: MigrationsStartImportRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class MigrationsStartImportResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    import_: Optional[shared_import_.Import] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    