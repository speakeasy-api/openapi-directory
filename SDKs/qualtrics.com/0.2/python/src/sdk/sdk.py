"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "https://fra1.qualtrics.com/API/v3",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Work with Qualtrics surveys, distributions and response events"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_contact_in_mailinglist(self, request: operations.CreateContactInMailinglistRequest) -> operations.CreateContactInMailinglistResponse:
        r"""Create contact in mailing list
        Creates a contact in a given mailing list
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateContactInMailinglistRequest, base_url, '/directories/{DirectoryId}/mailinglists/{MailingListId}/contacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_contact_in_mailing_list", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateContactInMailinglistResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def generate_distribution_links(self, request: shared.CreateDistributionLinks) -> operations.GenerateDistributionLinksResponse:
        r"""Generate distribution links
        Geneates links for individual distribution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/distributions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GenerateDistributionLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_distributions(self, request: operations.GetDistributionsRequest) -> operations.GetDistributionsResponse:
        r"""Get distributions for survey
        Gets all distributions for a given survey
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/distributions'
        
        query_params = utils.get_query_params(operations.GetDistributionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDistributionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DistributionsResponse])
                res.distributions_response = out

        return res

    def get_event_subscriptions(self, request: operations.GetEventSubscriptionsRequest) -> operations.GetEventSubscriptionsResponse:
        r"""Get event subscriptions
        Get event subscriptions
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEventSubscriptionsRequest, base_url, '/eventsubscriptions/{SubscriptionId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEventSubscriptionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventSubscriptionsResponse])
                res.event_subscriptions_response = out

        return res

    def get_survey(self, request: operations.GetSurveyRequest) -> operations.GetSurveyResponse:
        r"""Get survey
        Gets a single Qualtrics survey speficied by its ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSurveyRequest, base_url, '/survey-definitions/{SurveyId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSurveyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.survey_response = out
        else:
            pass

        return res

    def retrievedistributionlinks(self, request: operations.RetrievedistributionlinksRequest) -> operations.RetrievedistributionlinksResponse:
        r"""Retrieve distribution links
        Retrieves all the individual links for a given distribution
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrievedistributionlinksRequest, base_url, '/distributions/{DistributionId}/links', request)
        
        query_params = utils.get_query_params(operations.RetrievedistributionlinksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrievedistributionlinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveDistributionLinksResponse])
                res.retrieve_distribution_links_response = out

        return res

    def webhook_delete(self, request: shared.SubscribeToEventBody) -> operations.WebhookDeleteResponse:
        r"""Remove subscription to response event
        Remove event subscription
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/eventsubscriptions/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WebhookDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventSubscriptionsResponse])
                res.event_subscriptions_response = out

        return res

    def when_a_response_is_received(self, request: shared.SubscribeToEventBody) -> operations.WhenAResponseIsReceivedResponse:
        r"""Triggers when a response is submitted to a qualtrics survey
        Subscribe to response event
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/eventsubscriptions/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WhenAResponseIsReceivedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventSubscriptionsResponse])
                res.event_subscriptions_response = out

        return res

    