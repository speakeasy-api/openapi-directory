/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://video.twilio.com",
	};
    /**
	 * CREATE_COMPOSITION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_COMPOSITION_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * CREATE_COMPOSITION_HOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_COMPOSITION_HOOK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * CREATE_COMPOSITION_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_COMPOSITION_SETTINGS_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * CREATE_RECORDING_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_RECORDING_SETTINGS_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * CREATE_ROOM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ROOM_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * DELETE_COMPOSITION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_COMPOSITION_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * DELETE_COMPOSITION_HOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_COMPOSITION_HOOK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * DELETE_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_RECORDING_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * DELETE_ROOM_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ROOM_RECORDING_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_COMPOSITION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_COMPOSITION_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_COMPOSITION_HOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_COMPOSITION_HOOK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_COMPOSITION_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_COMPOSITION_SETTINGS_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RECORDING_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_RECORDING_SETTINGS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_RECORDING_SETTINGS_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_ROOM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROOM_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_ROOM_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROOM_PARTICIPANT_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_ROOM_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROOM_RECORDING_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * FETCH_ROOM_RECORDING_RULE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ROOM_RECORDING_RULE_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_COMPOSITION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_COMPOSITION_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_COMPOSITION_HOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_COMPOSITION_HOOK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_RECORDING_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_ROOM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROOM_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_ROOM_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROOM_PARTICIPANT_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * LIST_ROOM_RECORDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ROOM_RECORDING_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * UPDATE_COMPOSITION_HOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_COMPOSITION_HOOK_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * UPDATE_ROOM_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROOM_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * UPDATE_ROOM_PARTICIPANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROOM_PARTICIPANT_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * UPDATE_ROOM_PARTICIPANT_ANONYMIZE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROOM_PARTICIPANT_ANONYMIZE_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * UPDATE_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS = {
        "https://video.twilio.com",
    };
	
    /**
	 * UPDATE_ROOM_RECORDING_RULE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ROOM_RECORDING_RULE_SERVERS = {
        "https://video.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateCompositionResponse createComposition(org.openapis.openapi.models.operations.CreateCompositionCreateCompositionRequest request, org.openapis.openapi.models.operations.CreateCompositionSecurity security) throws Exception {
        return this.createComposition(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateCompositionResponse createComposition(org.openapis.openapi.models.operations.CreateCompositionCreateCompositionRequest request, org.openapis.openapi.models.operations.CreateCompositionSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_COMPOSITION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Compositions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCompositionResponse res = new org.openapis.openapi.models.operations.CreateCompositionResponse() {{
            videoV1Composition = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1Composition out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1Composition.class);
                res.videoV1Composition = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateCompositionHookResponse createCompositionHook(org.openapis.openapi.models.operations.CreateCompositionHookCreateCompositionHookRequest request, org.openapis.openapi.models.operations.CreateCompositionHookSecurity security) throws Exception {
        return this.createCompositionHook(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateCompositionHookResponse createCompositionHook(org.openapis.openapi.models.operations.CreateCompositionHookCreateCompositionHookRequest request, org.openapis.openapi.models.operations.CreateCompositionHookSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_COMPOSITION_HOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/CompositionHooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCompositionHookResponse res = new org.openapis.openapi.models.operations.CreateCompositionHookResponse() {{
            videoV1CompositionHook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1CompositionHook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1CompositionHook.class);
                res.videoV1CompositionHook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateCompositionSettingsResponse createCompositionSettings(org.openapis.openapi.models.operations.CreateCompositionSettingsCreateCompositionSettingsRequest request, org.openapis.openapi.models.operations.CreateCompositionSettingsSecurity security) throws Exception {
        return this.createCompositionSettings(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateCompositionSettingsResponse createCompositionSettings(org.openapis.openapi.models.operations.CreateCompositionSettingsCreateCompositionSettingsRequest request, org.openapis.openapi.models.operations.CreateCompositionSettingsSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_COMPOSITION_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/CompositionSettings/Default");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCompositionSettingsResponse res = new org.openapis.openapi.models.operations.CreateCompositionSettingsResponse() {{
            videoV1CompositionSettings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1CompositionSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1CompositionSettings.class);
                res.videoV1CompositionSettings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateRecordingSettingsResponse createRecordingSettings(org.openapis.openapi.models.operations.CreateRecordingSettingsCreateRecordingSettingsRequest request, org.openapis.openapi.models.operations.CreateRecordingSettingsSecurity security) throws Exception {
        return this.createRecordingSettings(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateRecordingSettingsResponse createRecordingSettings(org.openapis.openapi.models.operations.CreateRecordingSettingsCreateRecordingSettingsRequest request, org.openapis.openapi.models.operations.CreateRecordingSettingsSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_RECORDING_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/RecordingSettings/Default");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateRecordingSettingsResponse res = new org.openapis.openapi.models.operations.CreateRecordingSettingsResponse() {{
            videoV1RecordingSettings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RecordingSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RecordingSettings.class);
                res.videoV1RecordingSettings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateRoomResponse createRoom(org.openapis.openapi.models.operations.CreateRoomCreateRoomRequest request, org.openapis.openapi.models.operations.CreateRoomSecurity security) throws Exception {
        return this.createRoom(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateRoomResponse createRoom(org.openapis.openapi.models.operations.CreateRoomCreateRoomRequest request, org.openapis.openapi.models.operations.CreateRoomSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ROOM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Rooms");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateRoomResponse res = new org.openapis.openapi.models.operations.CreateRoomResponse() {{
            videoV1Room = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1Room out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1Room.class);
                res.videoV1Room = out;
            }
        }

        return res;
    }

    /**
     * Delete a Recording Composition resource identified by a Composition SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCompositionResponse deleteComposition(org.openapis.openapi.models.operations.DeleteCompositionRequest request, org.openapis.openapi.models.operations.DeleteCompositionSecurity security) throws Exception {
        return this.deleteComposition(request, security, null);
    }

    /**
     * Delete a Recording Composition resource identified by a Composition SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCompositionResponse deleteComposition(org.openapis.openapi.models.operations.DeleteCompositionRequest request, org.openapis.openapi.models.operations.DeleteCompositionSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_COMPOSITION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCompositionRequest.class, baseUrl, "/v1/Compositions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCompositionResponse res = new org.openapis.openapi.models.operations.DeleteCompositionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Recording CompositionHook resource identified by a `CompositionHook SID`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCompositionHookResponse deleteCompositionHook(org.openapis.openapi.models.operations.DeleteCompositionHookRequest request, org.openapis.openapi.models.operations.DeleteCompositionHookSecurity security) throws Exception {
        return this.deleteCompositionHook(request, security, null);
    }

    /**
     * Delete a Recording CompositionHook resource identified by a `CompositionHook SID`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteCompositionHookResponse deleteCompositionHook(org.openapis.openapi.models.operations.DeleteCompositionHookRequest request, org.openapis.openapi.models.operations.DeleteCompositionHookSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_COMPOSITION_HOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCompositionHookRequest.class, baseUrl, "/v1/CompositionHooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCompositionHookResponse res = new org.openapis.openapi.models.operations.DeleteCompositionHookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Recording resource identified by a Recording SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRecordingResponse deleteRecording(org.openapis.openapi.models.operations.DeleteRecordingRequest request, org.openapis.openapi.models.operations.DeleteRecordingSecurity security) throws Exception {
        return this.deleteRecording(request, security, null);
    }

    /**
     * Delete a Recording resource identified by a Recording SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRecordingResponse deleteRecording(org.openapis.openapi.models.operations.DeleteRecordingRequest request, org.openapis.openapi.models.operations.DeleteRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRecordingRequest.class, baseUrl, "/v1/Recordings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRecordingResponse res = new org.openapis.openapi.models.operations.DeleteRecordingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteRoomRecordingResponse deleteRoomRecording(org.openapis.openapi.models.operations.DeleteRoomRecordingRequest request, org.openapis.openapi.models.operations.DeleteRoomRecordingSecurity security) throws Exception {
        return this.deleteRoomRecording(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteRoomRecordingResponse deleteRoomRecording(org.openapis.openapi.models.operations.DeleteRoomRecordingRequest request, org.openapis.openapi.models.operations.DeleteRoomRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ROOM_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRoomRecordingRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Recordings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRoomRecordingResponse res = new org.openapis.openapi.models.operations.DeleteRoomRecordingResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Returns a single Composition resource identified by a Composition SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCompositionResponse fetchComposition(org.openapis.openapi.models.operations.FetchCompositionRequest request, org.openapis.openapi.models.operations.FetchCompositionSecurity security) throws Exception {
        return this.fetchComposition(request, security, null);
    }

    /**
     * Returns a single Composition resource identified by a Composition SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCompositionResponse fetchComposition(org.openapis.openapi.models.operations.FetchCompositionRequest request, org.openapis.openapi.models.operations.FetchCompositionSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_COMPOSITION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCompositionRequest.class, baseUrl, "/v1/Compositions/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCompositionResponse res = new org.openapis.openapi.models.operations.FetchCompositionResponse() {{
            videoV1Composition = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1Composition out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1Composition.class);
                res.videoV1Composition = out;
            }
        }

        return res;
    }

    /**
     * Returns a single CompositionHook resource identified by a CompositionHook SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCompositionHookResponse fetchCompositionHook(org.openapis.openapi.models.operations.FetchCompositionHookRequest request, org.openapis.openapi.models.operations.FetchCompositionHookSecurity security) throws Exception {
        return this.fetchCompositionHook(request, security, null);
    }

    /**
     * Returns a single CompositionHook resource identified by a CompositionHook SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchCompositionHookResponse fetchCompositionHook(org.openapis.openapi.models.operations.FetchCompositionHookRequest request, org.openapis.openapi.models.operations.FetchCompositionHookSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_COMPOSITION_HOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCompositionHookRequest.class, baseUrl, "/v1/CompositionHooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCompositionHookResponse res = new org.openapis.openapi.models.operations.FetchCompositionHookResponse() {{
            videoV1CompositionHook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1CompositionHook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1CompositionHook.class);
                res.videoV1CompositionHook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchCompositionSettingsResponse fetchCompositionSettings() throws Exception {
        return this.fetchCompositionSettings(null);
    }

    public org.openapis.openapi.models.operations.FetchCompositionSettingsResponse fetchCompositionSettings(String serverURL) throws Exception {
        String baseUrl = FETCH_COMPOSITION_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/CompositionSettings/Default");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCompositionSettingsResponse res = new org.openapis.openapi.models.operations.FetchCompositionSettingsResponse() {{
            videoV1CompositionSettings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1CompositionSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1CompositionSettings.class);
                res.videoV1CompositionSettings = out;
            }
        }

        return res;
    }

    /**
     * Returns a single Recording resource identified by a Recording SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRecordingResponse fetchRecording(org.openapis.openapi.models.operations.FetchRecordingRequest request, org.openapis.openapi.models.operations.FetchRecordingSecurity security) throws Exception {
        return this.fetchRecording(request, security, null);
    }

    /**
     * Returns a single Recording resource identified by a Recording SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRecordingResponse fetchRecording(org.openapis.openapi.models.operations.FetchRecordingRequest request, org.openapis.openapi.models.operations.FetchRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRecordingRequest.class, baseUrl, "/v1/Recordings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRecordingResponse res = new org.openapis.openapi.models.operations.FetchRecordingResponse() {{
            videoV1Recording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1Recording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1Recording.class);
                res.videoV1Recording = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchRecordingSettingsResponse fetchRecordingSettings() throws Exception {
        return this.fetchRecordingSettings(null);
    }

    public org.openapis.openapi.models.operations.FetchRecordingSettingsResponse fetchRecordingSettings(String serverURL) throws Exception {
        String baseUrl = FETCH_RECORDING_SETTINGS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/RecordingSettings/Default");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRecordingSettingsResponse res = new org.openapis.openapi.models.operations.FetchRecordingSettingsResponse() {{
            videoV1RecordingSettings = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RecordingSettings out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RecordingSettings.class);
                res.videoV1RecordingSettings = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchRoomResponse fetchRoom(org.openapis.openapi.models.operations.FetchRoomRequest request, org.openapis.openapi.models.operations.FetchRoomSecurity security) throws Exception {
        return this.fetchRoom(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchRoomResponse fetchRoom(org.openapis.openapi.models.operations.FetchRoomRequest request, org.openapis.openapi.models.operations.FetchRoomSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROOM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoomRequest.class, baseUrl, "/v1/Rooms/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoomResponse res = new org.openapis.openapi.models.operations.FetchRoomResponse() {{
            videoV1Room = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1Room out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1Room.class);
                res.videoV1Room = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchRoomParticipantResponse fetchRoomParticipant(org.openapis.openapi.models.operations.FetchRoomParticipantRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantSecurity security) throws Exception {
        return this.fetchRoomParticipant(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchRoomParticipantResponse fetchRoomParticipant(org.openapis.openapi.models.operations.FetchRoomParticipantRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROOM_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoomParticipantRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoomParticipantResponse res = new org.openapis.openapi.models.operations.FetchRoomParticipantResponse() {{
            videoV1RoomRoomParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomParticipant.class);
                res.videoV1RoomRoomParticipant = out;
            }
        }

        return res;
    }

    /**
     * Returns a single Track resource represented by TrackName or SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackResponse fetchRoomParticipantPublishedTrack(org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackSecurity security) throws Exception {
        return this.fetchRoomParticipantPublishedTrack(request, security, null);
    }

    /**
     * Returns a single Track resource represented by TrackName or SID.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackResponse fetchRoomParticipantPublishedTrack(org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackResponse res = new org.openapis.openapi.models.operations.FetchRoomParticipantPublishedTrackResponse() {{
            videoV1RoomRoomParticipantRoomParticipantPublishedTrack = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantPublishedTrack out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantPublishedTrack.class);
                res.videoV1RoomRoomParticipantRoomParticipantPublishedTrack = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of Subscribe Rules for the Participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleResponse fetchRoomParticipantSubscribeRule(org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleSecurity security) throws Exception {
        return this.fetchRoomParticipantSubscribeRule(request, security, null);
    }

    /**
     * Returns a list of Subscribe Rules for the Participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleResponse fetchRoomParticipantSubscribeRule(org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleResponse res = new org.openapis.openapi.models.operations.FetchRoomParticipantSubscribeRuleResponse() {{
            videoV1RoomRoomParticipantRoomParticipantSubscribeRule = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantSubscribeRule out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantSubscribeRule.class);
                res.videoV1RoomRoomParticipantRoomParticipantSubscribeRule = out;
            }
        }

        return res;
    }

    /**
     * Returns a single Track resource represented by `track_sid`.  Note: This is one resource with the Video API that requires a SID, be Track Name on the subscriber side is not guaranteed to be unique.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackResponse fetchRoomParticipantSubscribedTrack(org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackSecurity security) throws Exception {
        return this.fetchRoomParticipantSubscribedTrack(request, security, null);
    }

    /**
     * Returns a single Track resource represented by `track_sid`.  Note: This is one resource with the Video API that requires a SID, be Track Name on the subscriber side is not guaranteed to be unique.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackResponse fetchRoomParticipantSubscribedTrack(org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackRequest request, org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackResponse res = new org.openapis.openapi.models.operations.FetchRoomParticipantSubscribedTrackResponse() {{
            videoV1RoomRoomParticipantRoomParticipantSubscribedTrack = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantSubscribedTrack.class);
                res.videoV1RoomRoomParticipantRoomParticipantSubscribedTrack = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchRoomRecordingResponse fetchRoomRecording(org.openapis.openapi.models.operations.FetchRoomRecordingRequest request, org.openapis.openapi.models.operations.FetchRoomRecordingSecurity security) throws Exception {
        return this.fetchRoomRecording(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchRoomRecordingResponse fetchRoomRecording(org.openapis.openapi.models.operations.FetchRoomRecordingRequest request, org.openapis.openapi.models.operations.FetchRoomRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROOM_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoomRecordingRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Recordings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoomRecordingResponse res = new org.openapis.openapi.models.operations.FetchRoomRecordingResponse() {{
            videoV1RoomRoomRecording = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomRecording out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomRecording.class);
                res.videoV1RoomRoomRecording = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of Recording Rules for the Room.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomRecordingRuleResponse fetchRoomRecordingRule(org.openapis.openapi.models.operations.FetchRoomRecordingRuleRequest request, org.openapis.openapi.models.operations.FetchRoomRecordingRuleSecurity security) throws Exception {
        return this.fetchRoomRecordingRule(request, security, null);
    }

    /**
     * Returns a list of Recording Rules for the Room.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchRoomRecordingRuleResponse fetchRoomRecordingRule(org.openapis.openapi.models.operations.FetchRoomRecordingRuleRequest request, org.openapis.openapi.models.operations.FetchRoomRecordingRuleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ROOM_RECORDING_RULE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchRoomRecordingRuleRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/RecordingRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchRoomRecordingRuleResponse res = new org.openapis.openapi.models.operations.FetchRoomRecordingRuleResponse() {{
            videoV1RoomRoomRecordingRule = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomRecordingRule out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomRecordingRule.class);
                res.videoV1RoomRoomRecordingRule = out;
            }
        }

        return res;
    }

    /**
     * List of all Recording compositions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCompositionResponse listComposition(org.openapis.openapi.models.operations.ListCompositionRequest request, org.openapis.openapi.models.operations.ListCompositionSecurity security) throws Exception {
        return this.listComposition(request, security, null);
    }

    /**
     * List of all Recording compositions.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCompositionResponse listComposition(org.openapis.openapi.models.operations.ListCompositionRequest request, org.openapis.openapi.models.operations.ListCompositionSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_COMPOSITION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Compositions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCompositionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCompositionResponse res = new org.openapis.openapi.models.operations.ListCompositionResponse() {{
            listCompositionResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCompositionListCompositionResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCompositionListCompositionResponse.class);
                res.listCompositionResponse = out;
            }
        }

        return res;
    }

    /**
     * List of all Recording CompositionHook resources.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCompositionHookResponse listCompositionHook(org.openapis.openapi.models.operations.ListCompositionHookRequest request, org.openapis.openapi.models.operations.ListCompositionHookSecurity security) throws Exception {
        return this.listCompositionHook(request, security, null);
    }

    /**
     * List of all Recording CompositionHook resources.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListCompositionHookResponse listCompositionHook(org.openapis.openapi.models.operations.ListCompositionHookRequest request, org.openapis.openapi.models.operations.ListCompositionHookSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_COMPOSITION_HOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/CompositionHooks");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCompositionHookRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCompositionHookResponse res = new org.openapis.openapi.models.operations.ListCompositionHookResponse() {{
            listCompositionHookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCompositionHookListCompositionHookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCompositionHookListCompositionHookResponse.class);
                res.listCompositionHookResponse = out;
            }
        }

        return res;
    }

    /**
     * List of all Track recordings.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRecordingResponse listRecording(org.openapis.openapi.models.operations.ListRecordingRequest request, org.openapis.openapi.models.operations.ListRecordingSecurity security) throws Exception {
        return this.listRecording(request, security, null);
    }

    /**
     * List of all Track recordings.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRecordingResponse listRecording(org.openapis.openapi.models.operations.ListRecordingRequest request, org.openapis.openapi.models.operations.ListRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Recordings");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRecordingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRecordingResponse res = new org.openapis.openapi.models.operations.ListRecordingResponse() {{
            listRecordingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRecordingListRecordingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRecordingListRecordingResponse.class);
                res.listRecordingResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListRoomResponse listRoom(org.openapis.openapi.models.operations.ListRoomRequest request, org.openapis.openapi.models.operations.ListRoomSecurity security) throws Exception {
        return this.listRoom(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListRoomResponse listRoom(org.openapis.openapi.models.operations.ListRoomRequest request, org.openapis.openapi.models.operations.ListRoomSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ROOM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Rooms");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoomRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoomResponse res = new org.openapis.openapi.models.operations.ListRoomResponse() {{
            listRoomResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoomListRoomResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoomListRoomResponse.class);
                res.listRoomResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListRoomParticipantResponse listRoomParticipant(org.openapis.openapi.models.operations.ListRoomParticipantRequest request, org.openapis.openapi.models.operations.ListRoomParticipantSecurity security) throws Exception {
        return this.listRoomParticipant(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListRoomParticipantResponse listRoomParticipant(org.openapis.openapi.models.operations.ListRoomParticipantRequest request, org.openapis.openapi.models.operations.ListRoomParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ROOM_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRoomParticipantRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoomParticipantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoomParticipantResponse res = new org.openapis.openapi.models.operations.ListRoomParticipantResponse() {{
            listRoomParticipantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoomParticipantListRoomParticipantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoomParticipantListRoomParticipantResponse.class);
                res.listRoomParticipantResponse = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of tracks associated with a given Participant. Only `currently` Published Tracks are in the list resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackResponse listRoomParticipantPublishedTrack(org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackRequest request, org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackSecurity security) throws Exception {
        return this.listRoomParticipantPublishedTrack(request, security, null);
    }

    /**
     * Returns a list of tracks associated with a given Participant. Only `currently` Published Tracks are in the list resource.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackResponse listRoomParticipantPublishedTrack(org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackRequest request, org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ROOM_PARTICIPANT_PUBLISHED_TRACK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/PublishedTracks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackResponse res = new org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackResponse() {{
            listRoomParticipantPublishedTrackResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackListRoomParticipantPublishedTrackResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoomParticipantPublishedTrackListRoomParticipantPublishedTrackResponse.class);
                res.listRoomParticipantPublishedTrackResponse = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of tracks that are subscribed for the participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackResponse listRoomParticipantSubscribedTrack(org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackRequest request, org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackSecurity security) throws Exception {
        return this.listRoomParticipantSubscribedTrack(request, security, null);
    }

    /**
     * Returns a list of tracks that are subscribed for the participant.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackResponse listRoomParticipantSubscribedTrack(org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackRequest request, org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ROOM_PARTICIPANT_SUBSCRIBED_TRACK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribedTracks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackResponse res = new org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackResponse() {{
            listRoomParticipantSubscribedTrackResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackListRoomParticipantSubscribedTrackResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoomParticipantSubscribedTrackListRoomParticipantSubscribedTrackResponse.class);
                res.listRoomParticipantSubscribedTrackResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListRoomRecordingResponse listRoomRecording(org.openapis.openapi.models.operations.ListRoomRecordingRequest request, org.openapis.openapi.models.operations.ListRoomRecordingSecurity security) throws Exception {
        return this.listRoomRecording(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListRoomRecordingResponse listRoomRecording(org.openapis.openapi.models.operations.ListRoomRecordingRequest request, org.openapis.openapi.models.operations.ListRoomRecordingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ROOM_RECORDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListRoomRecordingRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Recordings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListRoomRecordingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListRoomRecordingResponse res = new org.openapis.openapi.models.operations.ListRoomRecordingResponse() {{
            listRoomRecordingResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListRoomRecordingListRoomRecordingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListRoomRecordingListRoomRecordingResponse.class);
                res.listRoomRecordingResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateCompositionHookResponse updateCompositionHook(org.openapis.openapi.models.operations.UpdateCompositionHookRequest request, org.openapis.openapi.models.operations.UpdateCompositionHookSecurity security) throws Exception {
        return this.updateCompositionHook(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateCompositionHookResponse updateCompositionHook(org.openapis.openapi.models.operations.UpdateCompositionHookRequest request, org.openapis.openapi.models.operations.UpdateCompositionHookSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_COMPOSITION_HOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCompositionHookRequest.class, baseUrl, "/v1/CompositionHooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCompositionHookResponse res = new org.openapis.openapi.models.operations.UpdateCompositionHookResponse() {{
            videoV1CompositionHook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1CompositionHook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1CompositionHook.class);
                res.videoV1CompositionHook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateRoomResponse updateRoom(org.openapis.openapi.models.operations.UpdateRoomRequest request, org.openapis.openapi.models.operations.UpdateRoomSecurity security) throws Exception {
        return this.updateRoom(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateRoomResponse updateRoom(org.openapis.openapi.models.operations.UpdateRoomRequest request, org.openapis.openapi.models.operations.UpdateRoomSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ROOM_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRoomRequest.class, baseUrl, "/v1/Rooms/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoomResponse res = new org.openapis.openapi.models.operations.UpdateRoomResponse() {{
            videoV1Room = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1Room out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1Room.class);
                res.videoV1Room = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateRoomParticipantResponse updateRoomParticipant(org.openapis.openapi.models.operations.UpdateRoomParticipantRequest request, org.openapis.openapi.models.operations.UpdateRoomParticipantSecurity security) throws Exception {
        return this.updateRoomParticipant(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateRoomParticipantResponse updateRoomParticipant(org.openapis.openapi.models.operations.UpdateRoomParticipantRequest request, org.openapis.openapi.models.operations.UpdateRoomParticipantSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ROOM_PARTICIPANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRoomParticipantRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoomParticipantResponse res = new org.openapis.openapi.models.operations.UpdateRoomParticipantResponse() {{
            videoV1RoomRoomParticipant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomParticipant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomParticipant.class);
                res.videoV1RoomRoomParticipant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeResponse updateRoomParticipantAnonymize(org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeRequest request, org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeSecurity security) throws Exception {
        return this.updateRoomParticipantAnonymize(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeResponse updateRoomParticipantAnonymize(org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeRequest request, org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ROOM_PARTICIPANT_ANONYMIZE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{Sid}/Anonymize", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeResponse res = new org.openapis.openapi.models.operations.UpdateRoomParticipantAnonymizeResponse() {{
            videoV1RoomRoomParticipantRoomParticipantAnonymize = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantAnonymize out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantAnonymize.class);
                res.videoV1RoomRoomParticipantRoomParticipantAnonymize = out;
            }
        }

        return res;
    }

    /**
     * Update the Subscribe Rules for the Participant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleResponse updateRoomParticipantSubscribeRule(org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleRequest request, org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleSecurity security) throws Exception {
        return this.updateRoomParticipantSubscribeRule(request, security, null);
    }

    /**
     * Update the Subscribe Rules for the Participant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleResponse updateRoomParticipantSubscribeRule(org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleRequest request, org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ROOM_PARTICIPANT_SUBSCRIBE_RULE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/Participants/{ParticipantSid}/SubscribeRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleResponse res = new org.openapis.openapi.models.operations.UpdateRoomParticipantSubscribeRuleResponse() {{
            videoV1RoomRoomParticipantRoomParticipantSubscribeRule = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantSubscribeRule out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomParticipantRoomParticipantSubscribeRule.class);
                res.videoV1RoomRoomParticipantRoomParticipantSubscribeRule = out;
            }
        }

        return res;
    }

    /**
     * Update the Recording Rules for the Room
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRoomRecordingRuleResponse updateRoomRecordingRule(org.openapis.openapi.models.operations.UpdateRoomRecordingRuleRequest request, org.openapis.openapi.models.operations.UpdateRoomRecordingRuleSecurity security) throws Exception {
        return this.updateRoomRecordingRule(request, security, null);
    }

    /**
     * Update the Recording Rules for the Room
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateRoomRecordingRuleResponse updateRoomRecordingRule(org.openapis.openapi.models.operations.UpdateRoomRecordingRuleRequest request, org.openapis.openapi.models.operations.UpdateRoomRecordingRuleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ROOM_RECORDING_RULE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateRoomRecordingRuleRequest.class, baseUrl, "/v1/Rooms/{RoomSid}/RecordingRules", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRoomRecordingRuleResponse res = new org.openapis.openapi.models.operations.UpdateRoomRecordingRuleResponse() {{
            videoV1RoomRoomRecordingRule = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VideoV1RoomRoomRecordingRule out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VideoV1RoomRoomRecordingRule.class);
                res.videoV1RoomRoomRecordingRule = out;
            }
        }

        return res;
    }
}