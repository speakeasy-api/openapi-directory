// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetReportSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type GetReportRequest struct {
	// UUID of the report request (`request_id` in response).
	ReportID string `pathParam:"style=simple,explode=false,name=report_id"`
}

// GetReport404ApplicationJSON - Not found
type GetReport404ApplicationJSON struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// GetReport401ApplicationJSON - Unauthorized
type GetReport401ApplicationJSON struct {
	Detail   *string `json:"detail,omitempty"`
	Instance *string `json:"instance,omitempty"`
	Title    *string `json:"title,omitempty"`
	Type     *string `json:"type,omitempty"`
}

type GetReport200ApplicationJSONType string

const (
	GetReport200ApplicationJSONTypeSmsResponseGetReport           GetReport200ApplicationJSONType = "sms_response_get_report"
	GetReport200ApplicationJSONTypeVoiceCallResponseGetReport     GetReport200ApplicationJSONType = "voice_call_response_get_report"
	GetReport200ApplicationJSONTypeInAppVoiceResponseGetReport    GetReport200ApplicationJSONType = "in_app_voice_response_get_report"
	GetReport200ApplicationJSONTypeWebsocketCallResponseGetReport GetReport200ApplicationJSONType = "websocket_call_response_get_report"
	GetReport200ApplicationJSONTypeVerifyAPIResponseGetReport     GetReport200ApplicationJSONType = "verify_api_response_get_report"
	GetReport200ApplicationJSONTypeNumberInsightResponseGetReport GetReport200ApplicationJSONType = "number_insight_response_get_report"
	GetReport200ApplicationJSONTypeMessagesResponseGetReport      GetReport200ApplicationJSONType = "messages_response_get_report"
	GetReport200ApplicationJSONTypeConversationsResponseGetReport GetReport200ApplicationJSONType = "conversations_response_get_report"
	GetReport200ApplicationJSONTypeAsrResponseGetReport           GetReport200ApplicationJSONType = "asr_response_get_report"
)

type GetReport200ApplicationJSON struct {
	SmsResponseGetReport           *shared.SmsResponseGetReport
	VoiceCallResponseGetReport     *shared.VoiceCallResponseGetReport
	InAppVoiceResponseGetReport    *shared.InAppVoiceResponseGetReport
	WebsocketCallResponseGetReport *shared.WebsocketCallResponseGetReport
	VerifyAPIResponseGetReport     *shared.VerifyAPIResponseGetReport
	NumberInsightResponseGetReport *shared.NumberInsightResponseGetReport
	MessagesResponseGetReport      *shared.MessagesResponseGetReport
	ConversationsResponseGetReport *shared.ConversationsResponseGetReport
	AsrResponseGetReport           *shared.AsrResponseGetReport

	Type GetReport200ApplicationJSONType
}

func CreateGetReport200ApplicationJSONSmsResponseGetReport(smsResponseGetReport shared.SmsResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeSmsResponseGetReport

	return GetReport200ApplicationJSON{
		SmsResponseGetReport: &smsResponseGetReport,
		Type:                 typ,
	}
}

func CreateGetReport200ApplicationJSONVoiceCallResponseGetReport(voiceCallResponseGetReport shared.VoiceCallResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeVoiceCallResponseGetReport

	return GetReport200ApplicationJSON{
		VoiceCallResponseGetReport: &voiceCallResponseGetReport,
		Type:                       typ,
	}
}

func CreateGetReport200ApplicationJSONInAppVoiceResponseGetReport(inAppVoiceResponseGetReport shared.InAppVoiceResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeInAppVoiceResponseGetReport

	return GetReport200ApplicationJSON{
		InAppVoiceResponseGetReport: &inAppVoiceResponseGetReport,
		Type:                        typ,
	}
}

func CreateGetReport200ApplicationJSONWebsocketCallResponseGetReport(websocketCallResponseGetReport shared.WebsocketCallResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeWebsocketCallResponseGetReport

	return GetReport200ApplicationJSON{
		WebsocketCallResponseGetReport: &websocketCallResponseGetReport,
		Type:                           typ,
	}
}

func CreateGetReport200ApplicationJSONVerifyAPIResponseGetReport(verifyAPIResponseGetReport shared.VerifyAPIResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeVerifyAPIResponseGetReport

	return GetReport200ApplicationJSON{
		VerifyAPIResponseGetReport: &verifyAPIResponseGetReport,
		Type:                       typ,
	}
}

func CreateGetReport200ApplicationJSONNumberInsightResponseGetReport(numberInsightResponseGetReport shared.NumberInsightResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeNumberInsightResponseGetReport

	return GetReport200ApplicationJSON{
		NumberInsightResponseGetReport: &numberInsightResponseGetReport,
		Type:                           typ,
	}
}

func CreateGetReport200ApplicationJSONMessagesResponseGetReport(messagesResponseGetReport shared.MessagesResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeMessagesResponseGetReport

	return GetReport200ApplicationJSON{
		MessagesResponseGetReport: &messagesResponseGetReport,
		Type:                      typ,
	}
}

func CreateGetReport200ApplicationJSONConversationsResponseGetReport(conversationsResponseGetReport shared.ConversationsResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeConversationsResponseGetReport

	return GetReport200ApplicationJSON{
		ConversationsResponseGetReport: &conversationsResponseGetReport,
		Type:                           typ,
	}
}

func CreateGetReport200ApplicationJSONAsrResponseGetReport(asrResponseGetReport shared.AsrResponseGetReport) GetReport200ApplicationJSON {
	typ := GetReport200ApplicationJSONTypeAsrResponseGetReport

	return GetReport200ApplicationJSON{
		AsrResponseGetReport: &asrResponseGetReport,
		Type:                 typ,
	}
}

func (u *GetReport200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	smsResponseGetReport := new(shared.SmsResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&smsResponseGetReport); err == nil {
		u.SmsResponseGetReport = smsResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeSmsResponseGetReport
		return nil
	}

	voiceCallResponseGetReport := new(shared.VoiceCallResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&voiceCallResponseGetReport); err == nil {
		u.VoiceCallResponseGetReport = voiceCallResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeVoiceCallResponseGetReport
		return nil
	}

	inAppVoiceResponseGetReport := new(shared.InAppVoiceResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&inAppVoiceResponseGetReport); err == nil {
		u.InAppVoiceResponseGetReport = inAppVoiceResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeInAppVoiceResponseGetReport
		return nil
	}

	websocketCallResponseGetReport := new(shared.WebsocketCallResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&websocketCallResponseGetReport); err == nil {
		u.WebsocketCallResponseGetReport = websocketCallResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeWebsocketCallResponseGetReport
		return nil
	}

	verifyAPIResponseGetReport := new(shared.VerifyAPIResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&verifyAPIResponseGetReport); err == nil {
		u.VerifyAPIResponseGetReport = verifyAPIResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeVerifyAPIResponseGetReport
		return nil
	}

	numberInsightResponseGetReport := new(shared.NumberInsightResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&numberInsightResponseGetReport); err == nil {
		u.NumberInsightResponseGetReport = numberInsightResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeNumberInsightResponseGetReport
		return nil
	}

	messagesResponseGetReport := new(shared.MessagesResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&messagesResponseGetReport); err == nil {
		u.MessagesResponseGetReport = messagesResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeMessagesResponseGetReport
		return nil
	}

	conversationsResponseGetReport := new(shared.ConversationsResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&conversationsResponseGetReport); err == nil {
		u.ConversationsResponseGetReport = conversationsResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeConversationsResponseGetReport
		return nil
	}

	asrResponseGetReport := new(shared.AsrResponseGetReport)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&asrResponseGetReport); err == nil {
		u.AsrResponseGetReport = asrResponseGetReport
		u.Type = GetReport200ApplicationJSONTypeAsrResponseGetReport
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetReport200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.SmsResponseGetReport != nil {
		return json.Marshal(u.SmsResponseGetReport)
	}

	if u.VoiceCallResponseGetReport != nil {
		return json.Marshal(u.VoiceCallResponseGetReport)
	}

	if u.InAppVoiceResponseGetReport != nil {
		return json.Marshal(u.InAppVoiceResponseGetReport)
	}

	if u.WebsocketCallResponseGetReport != nil {
		return json.Marshal(u.WebsocketCallResponseGetReport)
	}

	if u.VerifyAPIResponseGetReport != nil {
		return json.Marshal(u.VerifyAPIResponseGetReport)
	}

	if u.NumberInsightResponseGetReport != nil {
		return json.Marshal(u.NumberInsightResponseGetReport)
	}

	if u.MessagesResponseGetReport != nil {
		return json.Marshal(u.MessagesResponseGetReport)
	}

	if u.ConversationsResponseGetReport != nil {
		return json.Marshal(u.ConversationsResponseGetReport)
	}

	if u.AsrResponseGetReport != nil {
		return json.Marshal(u.AsrResponseGetReport)
	}

	return nil, nil
}

type GetReportResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	GetReport200ApplicationJSONOneOf *GetReport200ApplicationJSON
	// Unauthorized
	GetReport401ApplicationJSONObject *GetReport401ApplicationJSON
	// Not found
	GetReport404ApplicationJSONObject *GetReport404ApplicationJSON
}
