"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import inferenceexperimentdatastorageconfig as shared_inferenceexperimentdatastorageconfig
from ..shared import inferenceexperimentschedule as shared_inferenceexperimentschedule
from ..shared import inferenceexperimenttype_enum as shared_inferenceexperimenttype_enum
from ..shared import modelvariantconfig as shared_modelvariantconfig
from ..shared import shadowmodeconfig as shared_shadowmodeconfig
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateInferenceExperimentRequest:
    
    endpoint_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointName') }})  
    model_variants: list[shared_modelvariantconfig.ModelVariantConfig] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelVariants') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    shadow_mode_config: shared_shadowmodeconfig.ShadowModeConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShadowModeConfig') }})  
    type: shared_inferenceexperimenttype_enum.InferenceExperimentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    data_storage_config: Optional[shared_inferenceexperimentdatastorageconfig.InferenceExperimentDataStorageConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataStorageConfig'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    kms_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKey'), 'exclude': lambda f: f is None }})  
    schedule: Optional[shared_inferenceexperimentschedule.InferenceExperimentSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Schedule'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    