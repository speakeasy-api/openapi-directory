<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SearchAPI 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Fetch related search terms
     * 
     * Suggest related search terms. The results are more comprehensive than from `GET /typeahead`. This endpoint is available only in the PRO/ENTERPRISE plan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRelatedSearchesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRelatedSearchesResponse
     */
	public function getRelatedSearches(
        \OpenAPI\OpenAPI\Models\Operations\GetRelatedSearchesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRelatedSearchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/related_searches');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRelatedSearchesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRelatedSearchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relatedSearchesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RelatedSearchesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
        }

        return $response;
    }
	
    /**
     * Fetch trending search terms
     * 
     * Fetch up to 10 most recent trending search terms on the Listen Notes platform.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrendingSearchesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrendingSearchesResponse
     */
	public function getTrendingSearches(
        \OpenAPI\OpenAPI\Models\Operations\GetTrendingSearchesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrendingSearchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/trending_searches');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrendingSearchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->trendingSearchesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TrendingSearchesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
        }

        return $response;
    }
	
    /**
     * Full-text search
     * 
     * Full-text search on episodes, podcasts, or curated lists of podcasts.
     * Use the `offset` parameter to paginate through search results.
     * The FREE plan allows to see up to 30 search results (or `offset` < 30) per query.
     * The PRO plan allows to see up to 300 search results (or `offset` < 300) per query.
     * The ENTERPRISE plan allows to see up to 10,000 search results (or `offset` < 10000) per query.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchResponse
     */
	public function search(
        \OpenAPI\OpenAPI\Models\Operations\SearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->searchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SearchResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
        }

        return $response;
    }
	
    /**
     * Spell check on a search term
     * 
     * Suggest a list of words that correct the spelling errors of a search term. This endpoint is available only in the PRO/ENTERPRISE plan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SpellcheckRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SpellcheckResponse
     */
	public function spellcheck(
        \OpenAPI\OpenAPI\Models\Operations\SpellcheckRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SpellcheckResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/spellcheck');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SpellcheckRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SpellcheckResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->spellCheckResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SpellCheckResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
        }

        return $response;
    }
	
    /**
     * Typeahead search
     * 
     * Suggest search terms, podcast genres, and podcasts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TypeaheadRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TypeaheadResponse
     */
	public function typeahead(
        \OpenAPI\OpenAPI\Models\Operations\TypeaheadRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TypeaheadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/typeahead');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TypeaheadRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TypeaheadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->typeaheadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TypeaheadResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429 or ($httpResponse->getStatusCode() >= 500 && $httpResponse->getStatusCode() < 600)) {
        }

        return $response;
    }
}