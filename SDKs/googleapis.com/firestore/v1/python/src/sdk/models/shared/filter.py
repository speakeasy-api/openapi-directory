"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compositefilter as shared_compositefilter
from ..shared import fieldfilter as shared_fieldfilter
from ..shared import unaryfilter as shared_unaryfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filter:
    r"""A filter."""
    
    composite_filter: Optional[shared_compositefilter.CompositeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compositeFilter'), 'exclude': lambda f: f is None }})
    r"""A filter that merges multiple other filters using the given operator."""  
    field_filter: Optional[shared_fieldfilter.FieldFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fieldFilter'), 'exclude': lambda f: f is None }})
    r"""A filter on a specific field."""  
    unary_filter: Optional[shared_unaryfilter.UnaryFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unaryFilter'), 'exclude': lambda f: f is None }})
    r"""A filter with a single operand."""  
    