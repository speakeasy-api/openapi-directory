/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export enum UpdateTopicStatusRequestBodyEnabledEnum {
  True = "true",
  False = "false",
}

export enum UpdateTopicStatusRequestBodyStatusEnum {
  Closed = "closed",
  Pinned = "pinned",
  PinnedGlobally = "pinned_globally",
  Archived = "archived",
  Visible = "visible",
}

export class UpdateTopicStatusRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: UpdateTopicStatusRequestBodyEnabledEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: UpdateTopicStatusRequestBodyStatusEnum;

  /**
   * Only required for `pinned` and `pinned_globally`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "until" })
  until?: string;
}

export class UpdateTopicStatusRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Api-Key",
  })
  apiKey: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Api-Username",
  })
  apiUsername: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateTopicStatusRequestBody;

  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: string;
}

/**
 * topic updated
 */
export class UpdateTopicStatus200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "topic_status_update" })
  topicStatusUpdate?: string;
}

export class UpdateTopicStatusResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * topic updated
   */
  @SpeakeasyMetadata()
  updateTopicStatus200ApplicationJSONObject?: UpdateTopicStatus200ApplicationJSON;
}
