"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Platform:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_balance_platforms_id(self, request: operations.GetBalancePlatformsIDRequest, security: operations.GetBalancePlatformsIDSecurity) -> operations.GetBalancePlatformsIDResponse:
        r"""Get a balance platform
        Returns a balance platform.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBalancePlatformsIDRequest, base_url, '/balancePlatforms/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBalancePlatformsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BalancePlatform])
                res.balance_platform = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_balance_platforms_id_account_holders(self, request: operations.GetBalancePlatformsIDAccountHoldersRequest, security: operations.GetBalancePlatformsIDAccountHoldersSecurity) -> operations.GetBalancePlatformsIDAccountHoldersResponse:
        r"""Get all account holders under a balance platform
        Returns a paginated list of all the account holders that belong to the balance platform. To fetch multiple pages, use the query parameters. 
        
        For example, to limit the page to 5 account holders and to skip the first 20, use `/balancePlatforms/{id}/accountHolders?limit=5&offset=20`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBalancePlatformsIDAccountHoldersRequest, base_url, '/balancePlatforms/{id}/accountHolders', request)
        
        query_params = utils.get_query_params(operations.GetBalancePlatformsIDAccountHoldersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBalancePlatformsIDAccountHoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedAccountHoldersResponse])
                res.paginated_account_holders_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    