"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils

class EntryPointParameterTypeEnum(str, Enum):
    r"""The type of the parameter, indicating its location in the HTTP request."""
    QUERY = 'query'
    HEADER = 'header'
    URI = 'uri'
    PATH = 'path'
    BODY = 'body'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EntryPointParameter:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A short description of the parameter for use in the OSDB Action Console. Optional - may be null."""  
    display_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('display_name') }})
    r"""The parameter's display name in the OSDB Action Console. Optional - may be null."""  
    parameter_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameter_name') }})
    r"""The parameter name as present in the HTTP request. e.g. the key name in a query string key-value pair."""  
    permitted_values: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permitted_values') }})
    r"""If the parameter accepts only a limited set of values, the allowed set of values. Null if not applicable."""  
    required: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required') }})
    r"""A flag indicating if the parameter is optional."""  
    type: EntryPointParameterTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the parameter, indicating its location in the HTTP request."""  
    