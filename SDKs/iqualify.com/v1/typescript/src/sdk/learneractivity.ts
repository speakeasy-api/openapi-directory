/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class LearnerActivity {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Find learner progress in a specified offering
   *
   * @remarks
   * Responds with all learner progress in the offering.
   */
  getOfferingsOfferingIdAnalyticsLearnersProgress(
    req: operations.GetOfferingsOfferingIdAnalyticsLearnersProgressRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdAnalyticsLearnersProgressResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetOfferingsOfferingIdAnalyticsLearnersProgressRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/analytics/learners-progress",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdAnalyticsLearnersProgressResponse =
        new operations.GetOfferingsOfferingIdAnalyticsLearnersProgressResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.learnerProgressResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.learnerProgressResponses = utils.objectToClass(
              httpRes?.data,
              shared.LearnerProgressResponse,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find shared social notes in an offering
   *
   * @remarks
   * Responds with all shared social notes in a specified offering.
   */
  getOfferingsOfferingIdAnalyticsSocialNotes(
    req: operations.GetOfferingsOfferingIdAnalyticsSocialNotesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdAnalyticsSocialNotesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOfferingsOfferingIdAnalyticsSocialNotesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/analytics/social-notes",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdAnalyticsSocialNotesResponse =
        new operations.GetOfferingsOfferingIdAnalyticsSocialNotesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.socialNotesResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.socialNotesResponses = utils.objectToClass(
              httpRes?.data,
              shared.SocialNotesResponse,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find unit reactions
   *
   * @remarks
   * Responds with user reactions to units in a specified offering.
   */
  getOfferingsOfferingIdAnalyticsUnitReactions(
    req: operations.GetOfferingsOfferingIdAnalyticsUnitReactionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOfferingsOfferingIdAnalyticsUnitReactionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOfferingsOfferingIdAnalyticsUnitReactionsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/offerings/{offeringId}/analytics/unit-reactions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOfferingsOfferingIdAnalyticsUnitReactionsResponse =
        new operations.GetOfferingsOfferingIdAnalyticsUnitReactionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unitReactionsAnalyticsResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.unitReactionsAnalyticsResponses = utils.objectToClass(
              httpRes?.data,
              shared.UnitReactionsAnalyticsResponse,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find learner's progress in a specified offering
   *
   * @remarks
   * Responds with the learner's progress in a specified offering.
   */
  getUsersUserEmailOfferingsOfferingIdProgress(
    req: operations.GetUsersUserEmailOfferingsOfferingIdProgressRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserEmailOfferingsOfferingIdProgressResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserEmailOfferingsOfferingIdProgressRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{userEmail}/offerings/{offeringId}/progress",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserEmailOfferingsOfferingIdProgressResponse =
        new operations.GetUsersUserEmailOfferingsOfferingIdProgressResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getUsersUserEmailOfferingsOfferingIdProgress200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetUsersUserEmailOfferingsOfferingIdProgress200ApplicationJSON
              );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Find learner's progress in offerings
   *
   * @remarks
   * Responds with the specified learner's progress in all offerings.
   */
  getUsersUserEmailProgress(
    req: operations.GetUsersUserEmailProgressRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetUsersUserEmailProgressResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetUsersUserEmailProgressRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/users/{userEmail}/progress",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetUsersUserEmailProgressResponse =
        new operations.GetUsersUserEmailProgressResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.learnerResponse = utils.objectToClass(
              httpRes?.data,
              shared.LearnerResponse
            );
          }
          break;
        case [400, 401, 403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
