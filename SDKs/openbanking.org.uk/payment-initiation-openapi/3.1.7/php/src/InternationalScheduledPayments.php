<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class InternationalScheduledPayments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create International Scheduled Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsJsonResponse
     */
	public function createInternationalScheduledPaymentConsentsJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/international-scheduled-payment-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteInternationalScheduledConsent5", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledConsentResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledConsentResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create International Scheduled Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsRawResponse
     */
	public function createInternationalScheduledPaymentConsentsRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/international-scheduled-payment-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentConsentsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledConsentResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledConsentResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create International Scheduled Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsJsonResponse
     */
	public function createInternationalScheduledPaymentsJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/international-scheduled-payments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteInternationalScheduled3", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create International Scheduled Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsRawResponse
     */
	public function createInternationalScheduledPaymentsRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/international-scheduled-payments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInternationalScheduledPaymentsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get International Scheduled Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdResponse
     */
	public function getInternationalScheduledPaymentConsentsConsentId(
        \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/international-scheduled-payment-consents/{ConsentId}', \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledConsentResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledConsentResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledConsentResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get International Scheduled Payment Consents Funds Confirmation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationResponse
     */
	public function getInternationalScheduledPaymentConsentsConsentIdFundsConfirmation(
        \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/international-scheduled-payment-consents/{ConsentId}/funds-confirmation', \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteFundsConfirmationResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteFundsConfirmationResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteFundsConfirmationResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteFundsConfirmationResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get International Scheduled Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdResponse
     */
	public function getInternationalScheduledPaymentsInternationalScheduledPaymentId(
        \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/international-scheduled-payments/{InternationalScheduledPaymentId}', \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInternationalScheduledPaymentsInternationalScheduledPaymentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledResponse6', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteInternationalScheduledResponse6 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteInternationalScheduledResponse6', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
}