<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AlbumsEssentials 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAlbumResponse
     */
	public function createAlbum(
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAlbumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums', \OpenAPI\OpenAPI\Models\Operations\CreateAlbumRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAlbumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumAlt1RequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAlbumAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAlbumAlt1Response
     */
	public function createAlbumAlt1(
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumAlt1RequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAlbumAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAlbumAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAlbumAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumResponse
     */
	public function deleteAlbum(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Response
     */
	public function deleteAlbumAlt1(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAlbumAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditAlbumRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditAlbumSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditAlbumResponse
     */
	public function editAlbum(
        \OpenAPI\OpenAPI\Models\Operations\EditAlbumRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditAlbumSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditAlbumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}', \OpenAPI\OpenAPI\Models\Operations\EditAlbumRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditAlbumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit an album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Response
     */
	public function editAlbumAlt1(
        \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}', \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditAlbumAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumResponse
     */
	public function getAlbum(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums/{album_id}', \OpenAPI\OpenAPI\Models\Operations\GetAlbumRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a specific album
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumAlt1Response
     */
	public function getAlbumAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums/{album_id}', \OpenAPI\OpenAPI\Models\Operations\GetAlbumAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->album = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Album', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.album+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the albums that belong to a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumsResponse
     */
	public function getAlbums(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/albums', \OpenAPI\OpenAPI\Models\Operations\GetAlbumsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->albums = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Album>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the albums that belong to a user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAlbumsAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAlbumsAlt1Response
     */
	public function getAlbumsAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetAlbumsAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAlbumsAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/albums');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAlbumsAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAlbumsAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->albums = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Album>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}