// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetOrganizationDevicesProductTypesEnum string

const (
	GetOrganizationDevicesProductTypesEnumAppliance       GetOrganizationDevicesProductTypesEnum = "appliance"
	GetOrganizationDevicesProductTypesEnumCamera          GetOrganizationDevicesProductTypesEnum = "camera"
	GetOrganizationDevicesProductTypesEnumCellularGateway GetOrganizationDevicesProductTypesEnum = "cellularGateway"
	GetOrganizationDevicesProductTypesEnumSensor          GetOrganizationDevicesProductTypesEnum = "sensor"
	GetOrganizationDevicesProductTypesEnumSwitch          GetOrganizationDevicesProductTypesEnum = "switch"
	GetOrganizationDevicesProductTypesEnumSystemsManager  GetOrganizationDevicesProductTypesEnum = "systemsManager"
	GetOrganizationDevicesProductTypesEnumWireless        GetOrganizationDevicesProductTypesEnum = "wireless"
)

func (e GetOrganizationDevicesProductTypesEnum) ToPointer() *GetOrganizationDevicesProductTypesEnum {
	return &e
}

func (e *GetOrganizationDevicesProductTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "sensor":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetOrganizationDevicesProductTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesProductTypesEnum: %v", v)
	}
}

// GetOrganizationDevicesTagsFilterTypeEnum - Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
type GetOrganizationDevicesTagsFilterTypeEnum string

const (
	GetOrganizationDevicesTagsFilterTypeEnumWithAllTags GetOrganizationDevicesTagsFilterTypeEnum = "withAllTags"
	GetOrganizationDevicesTagsFilterTypeEnumWithAnyTags GetOrganizationDevicesTagsFilterTypeEnum = "withAnyTags"
)

func (e GetOrganizationDevicesTagsFilterTypeEnum) ToPointer() *GetOrganizationDevicesTagsFilterTypeEnum {
	return &e
}

func (e *GetOrganizationDevicesTagsFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "withAllTags":
		fallthrough
	case "withAnyTags":
		*e = GetOrganizationDevicesTagsFilterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesTagsFilterTypeEnum: %v", v)
	}
}

type GetOrganizationDevicesRequest struct {
	// Filter results by whether or not the device's configuration has been updated after the given timestamp
	ConfigurationUpdatedAfter *string `queryParam:"style=form,explode=true,name=configurationUpdatedAfter"`
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Optional parameter to filter devices by MAC address. All returned devices will have a MAC address that contains the search term or is an exact match.
	Mac *string `queryParam:"style=form,explode=true,name=mac"`
	// Optional parameter to filter devices by one or more MAC addresses. All returned devices will have a MAC address that is an exact match.
	Macs []string `queryParam:"style=form,explode=false,name=macs"`
	// Optional parameter to filter devices by model. All returned devices will have a model that contains the search term or is an exact match.
	Model *string `queryParam:"style=form,explode=true,name=model"`
	// Optional parameter to filter devices by one or more models. All returned devices will have a model that is an exact match.
	Models []string `queryParam:"style=form,explode=false,name=models"`
	// Optional parameter to filter devices by name. All returned devices will have a name that contains the search term or is an exact match.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Optional parameter to filter devices by network.
	NetworkIds     []string `queryParam:"style=form,explode=false,name=networkIds"`
	OrganizationID string   `pathParam:"style=simple,explode=false,name=organizationId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Optional parameter to filter devices by product type. Valid types are wireless, appliance, switch, systemsManager, camera, cellularGateway, and sensor.
	ProductTypes []GetOrganizationDevicesProductTypesEnum `queryParam:"style=form,explode=false,name=productTypes"`
	// Optional parameter to filter devices by the alert profiles that are bound to them. Only applies to sensor devices.
	SensorAlertProfileIds []string `queryParam:"style=form,explode=false,name=sensorAlertProfileIds"`
	// Optional parameter to filter devices by the metrics that they provide. Only applies to sensor devices.
	SensorMetrics []string `queryParam:"style=form,explode=false,name=sensorMetrics"`
	// Optional parameter to filter devices by serial number. All returned devices will have a serial number that contains the search term or is an exact match.
	Serial *string `queryParam:"style=form,explode=true,name=serial"`
	// Optional parameter to filter devices by one or more serial numbers. All returned devices will have a serial number that is an exact match.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// Optional parameter to filter devices by tags.
	Tags []string `queryParam:"style=form,explode=false,name=tags"`
	// Optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return networks which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
	TagsFilterType *GetOrganizationDevicesTagsFilterTypeEnum `queryParam:"style=form,explode=true,name=tagsFilterType"`
}

type GetOrganizationDevices200ApplicationJSON struct {
	// Physical address of the device
	Address *string `json:"address,omitempty"`
	// Firmware version of the device
	Firmware *string `json:"firmware,omitempty"`
	// LAN IP address of the device
	LanIP *string `json:"lanIp,omitempty"`
	// Latitude of the device
	Lat *float32 `json:"lat,omitempty"`
	// Longitude of the device
	Lng *float32 `json:"lng,omitempty"`
	// MAC address of the device
	Mac *string `json:"mac,omitempty"`
	// Model of the device
	Model *string `json:"model,omitempty"`
	// Name of the device
	Name *string `json:"name,omitempty"`
	// ID of the network the device belongs to
	NetworkID *string `json:"networkId,omitempty"`
	// Notes for the device, limited to 255 characters
	Notes *string `json:"notes,omitempty"`
	// Product type of the device
	ProductType *string `json:"productType,omitempty"`
	// Serial number of the device
	Serial *string `json:"serial,omitempty"`
	// List of tags assigned to the device
	Tags []string `json:"tags,omitempty"`
}

type GetOrganizationDevicesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationDevices200ApplicationJSONObjects []GetOrganizationDevices200ApplicationJSON
}
