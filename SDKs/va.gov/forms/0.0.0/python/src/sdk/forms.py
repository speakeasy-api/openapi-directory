"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Forms:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def find_form_by_form_name(self, request: operations.FindFormByFormNameRequest, security: operations.FindFormByFormNameSecurity) -> operations.FindFormByFormNameResponse:
        r"""Find form by form name
        Returns a single form and the full revision history
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FindFormByFormNameRequest, base_url, '/forms/{form_name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindFormByFormNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FindFormByFormName200ApplicationJSON])
                res.find_form_by_form_name_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FindFormByFormName401ApplicationJSON])
                res.find_form_by_form_name_401_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FindFormByFormName404ApplicationJSON])
                res.find_form_by_form_name_404_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FindFormByFormName429ApplicationJSON])
                res.find_form_by_form_name_429_application_json_object = out

        return res

    def find_forms(self, request: operations.FindFormsRequest, security: operations.FindFormsSecurity) -> operations.FindFormsResponse:
        r"""Returns all VA Forms and their last revision date
        Returns an index of all available VA forms. Optionally, pass a query parameter to filter forms by form number or title.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/forms'
        
        query_params = utils.get_query_params(operations.FindFormsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindFormsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FindForms200ApplicationJSON])
                res.find_forms_200_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FindForms401ApplicationJSON])
                res.find_forms_401_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.FindForms429ApplicationJSON])
                res.find_forms_429_application_json_object = out

        return res

    