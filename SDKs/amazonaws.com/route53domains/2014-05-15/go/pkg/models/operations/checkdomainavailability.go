// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CheckDomainAvailabilityXAmzTargetEnum
type CheckDomainAvailabilityXAmzTargetEnum string

const (
	CheckDomainAvailabilityXAmzTargetEnumRoute53DomainsV20140515CheckDomainAvailability CheckDomainAvailabilityXAmzTargetEnum = "Route53Domains_v20140515.CheckDomainAvailability"
)

func (e *CheckDomainAvailabilityXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53Domains_v20140515.CheckDomainAvailability":
		*e = CheckDomainAvailabilityXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckDomainAvailabilityXAmzTargetEnum: %s", s)
	}
}

type CheckDomainAvailabilityRequest struct {
	CheckDomainAvailabilityRequest shared.CheckDomainAvailabilityRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                  *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                     CheckDomainAvailabilityXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CheckDomainAvailabilityResponse struct {
	// Success
	CheckDomainAvailabilityResponse *shared.CheckDomainAvailabilityResponse
	ContentType                     string
	// InvalidInput
	InvalidInput interface{}
	StatusCode   int
	RawResponse  *http.Response
	// UnsupportedTLD
	UnsupportedTLD interface{}
}
