<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Clubhouse API
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://www.clubhouseapi.com/api/',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Clubhouse uses this to check for updates when app is not installed from App Store (eg TestFlight)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCheckForUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCheckForUpdateResponse
     */
	public function getCheckForUpdate(
        \OpenAPI\OpenAPI\Models\Operations\GetCheckForUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCheckForUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/check_for_update');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCheckForUpdateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCheckForUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * get actionable notifications (the bell again)
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetActionableNotificationsResponse
     */
	public function getGetActionableNotifications(
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetActionableNotificationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_actionable_notifications');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetActionableNotificationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * gets all topics.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetAllTopicsResponse
     */
	public function getGetAllTopics(
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetAllTopicsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_all_topics');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetAllTopicsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * get all channels
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetChannelsResponse
     */
	public function getGetChannels(
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_channels');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * the Upcoming for You page
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetEventsResponse
     */
	public function getGetEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetGetEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_events');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetEventsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * get notifications (the bell icon)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetNotificationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetNotificationsResponse
     */
	public function getGetNotifications(
        \OpenAPI\OpenAPI\Models\Operations\GetGetNotificationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetNotificationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_notifications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetNotificationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetNotificationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * get notification settings
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetSettingsResponse
     */
	public function getGetSettings(
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_settings');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * gets suggested follows during signup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetSuggestedFollowsAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetSuggestedFollowsAllResponse
     */
	public function getGetSuggestedFollowsAll(
        \OpenAPI\OpenAPI\Models\Operations\GetGetSuggestedFollowsAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetSuggestedFollowsAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_suggested_follows_all');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetSuggestedFollowsAllRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetSuggestedFollowsAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * looks up users by topic.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGetUsersForTopicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetUsersForTopicResponse
     */
	public function getGetUsersForTopic(
        \OpenAPI\OpenAPI\Models\Operations\GetGetUsersForTopicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetUsersForTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_users_for_topic');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGetUsersForTopicRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetUsersForTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * called during signup
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGetWelcomeChannelResponse
     */
	public function getGetWelcomeChannel(
    ): \OpenAPI\OpenAPI\Models\Operations\GetGetWelcomeChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_welcome_channel');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGetWelcomeChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Call phone number auth.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCallPhoneNumberAuthResponse
     */
	public function postCallPhoneNumberAuth(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCallPhoneNumberAuthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/call_phone_number_auth');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCallPhoneNumberAuthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * checks waitlist status.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCheckWaitlistStatusResponse
     */
	public function postCheckWaitlistStatus(
    ): \OpenAPI\OpenAPI\Models\Operations\PostCheckWaitlistStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/check_waitlist_status');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCheckWaitlistStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Call phone number auth.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCompletePhoneNumberAuthResponse
     */
	public function postCompletePhoneNumberAuth(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCompletePhoneNumberAuthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/complete_phone_number_auth');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCompletePhoneNumberAuthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * creates a channel
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCreateChannelResponse
     */
	public function postCreateChannel(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCreateChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/create_channel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCreateChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * follows a user
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostFollowResponse
     */
	public function postFollow(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostFollowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/follow');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostFollowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * gets club by id
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetClubResponse
     */
	public function postGetClub(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetClubResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_club');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetClubResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * looks up clubs by topic.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetClubsForTopicResponse
     */
	public function postGetClubsForTopic(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetClubsForTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_clubs_for_topic');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetClubsForTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * is fetched when you tap Create Room
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetCreateChannelTargetsResponse
     */
	public function postGetCreateChannelTargets(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetCreateChannelTargetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_create_channel_targets');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetCreateChannelTargetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * get a list of the users and clubs that this user is following. Returned users have bios truncated to ~80 characters.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetFollowingResponse
     */
	public function postGetFollowing(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetFollowingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_following');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetFollowingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * gets online friends on the app homepage.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetOnlineFriendsResponse
     */
	public function postGetOnlineFriends(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetOnlineFriendsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_online_friends');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetOnlineFriendsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * looks up user profile by ID.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetProfileResponse
     */
	public function postGetProfile(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_profile');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * gets release notes.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetReleaseNotesResponse
     */
	public function postGetReleaseNotes(
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetReleaseNotesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_release_notes');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetReleaseNotesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * find users to invite to clubs based on phone number
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedClubInvitesResponse
     */
	public function postGetSuggestedClubInvites(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedClubInvitesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_suggested_club_invites');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedClubInvitesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * find people to follow by uploading contacts during signup
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedFollowsFriendsOnlyResponse
     */
	public function postGetSuggestedFollowsFriendsOnly(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedFollowsFriendsOnlyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_suggested_follows_friends_only');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedFollowsFriendsOnlyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * find similar users. (The Sparkles button on Clubhouse's profile page)
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedFollowsSimilarResponse
     */
	public function postGetSuggestedFollowsSimilar(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedFollowsSimilarResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_suggested_follows_similar');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedFollowsSimilarResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * find users to invite based on phone number.
     * 
     * (also see https://zerforschung.org/posts/clubhouse-telefonnummern-en/ for @zerforschung's analysis of the privacy implications of this API)
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedInvitesResponse
     */
	public function postGetSuggestedInvites(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedInvitesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_suggested_invites');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedInvitesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * gets suggested users when you start a private room
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedSpeakersResponse
     */
	public function postGetSuggestedSpeakers(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedSpeakersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_suggested_speakers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetSuggestedSpeakersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * looks up topic by ID.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostGetTopicResponse
     */
	public function postGetTopic(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostGetTopicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/get_topic');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostGetTopicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * wave to another user on the waitlist to give them access
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostInviteFromWaitlistResponse
     */
	public function postInviteFromWaitlist(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostInviteFromWaitlistResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/invite_from_waitlist');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostInviteFromWaitlistResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * invite a user to the app, using one of your invites
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostInviteToAppResponse
     */
	public function postInviteToApp(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostInviteToAppResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/invite_to_app');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostInviteToAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * join a channel.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostJoinChannelResponse
     */
	public function postJoinChannel(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostJoinChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/join_channel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostJoinChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * leave a channel.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostLeaveChannelResponse
     */
	public function postLeaveChannel(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostLeaveChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/leave_channel');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostLeaveChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * gets user
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMeResponse
     */
	public function postMe(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * analytics
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRecordActionTrailsResponse
     */
	public function postRecordActionTrails(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRecordActionTrailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/record_action_trails');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRecordActionTrailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * gets an access_token from a refresh_token.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRefreshTokenResponse
     */
	public function postRefreshToken(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRefreshTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/refresh_token');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRefreshTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Resend phone number auth.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostResendPhoneNumberAuthResponse
     */
	public function postResendPhoneNumberAuth(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostResendPhoneNumberAuthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resend_phone_number_auth');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostResendPhoneNumberAuthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * search clubs.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSearchClubsResponse
     */
	public function postSearchClubs(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSearchClubsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search_clubs');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSearchClubsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * search for users
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSearchUsersResponse
     */
	public function postSearchUsers(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSearchUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search_users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSearchUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Starts phone number auth.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostStartPhoneNumberAuthResponse
     */
	public function postStartPhoneNumberAuth(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostStartPhoneNumberAuthResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/start_phone_number_auth');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostStartPhoneNumberAuthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * updates notification during signup.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUpdateNotificationsResponse
     */
	public function postUpdateNotifications(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUpdateNotificationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/update_notifications');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUpdateNotificationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * edits username.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostUpdateUsernameResponse
     */
	public function postUpdateUsername(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostUpdateUsernameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/update_username');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostUpdateUsernameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}