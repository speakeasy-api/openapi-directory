/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Sequence's parent is a schema.
 */
export class SequenceEntity extends SpeakeasyBase {
  /**
   * Indicates number of entries to cache / precreate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cache" })
  cache?: string;

  /**
   * Custom engine specific features.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customFeatures" })
  customFeatures?: Record<string, any>;

  /**
   * Indicates whether the sequence value should cycle through.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cycle" })
  cycle?: boolean;

  /**
   * Increment value for the sequence.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "increment" })
  increment?: string;

  /**
   * Maximum number for the sequence represented as bytes to accommodate large. numbers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxValue" })
  maxValue?: string;

  /**
   * Minimum number for the sequence represented as bytes to accommodate large. numbers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minValue" })
  minValue?: string;

  /**
   * Start number for the sequence represented as bytes to accommodate large. numbers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startValue" })
  startValue?: string;
}
