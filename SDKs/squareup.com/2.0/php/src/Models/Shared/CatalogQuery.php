<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CatalogQuery - A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
 * 
 * 
 * Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](https://developer.squareup.com/reference/square_2021-08-18/catalog-api/search-catalog-objects).
 * Any combination of the following types may be used together:
 * - [exact_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryExact)
 * - [prefix_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryPrefix)
 * - [range_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryRange)
 * - [sorted_attribute_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQuerySortedAttribute)
 * - [text_query](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogQueryText)
 * All other query types cannot be combined with any others.
 * 
 * When a query filter is based on an attribute, the attribute must be searchable.
 * Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
 * 
 * * Searchable attribute and objects queryable by searchable attributes **
 * - `name`:  `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
 * - `description`: `CatalogItem`, `CatalogItemOptionValue`
 * - `abbreviation`: `CatalogItem`
 * - `upc`: `CatalogItemVariation`
 * - `sku`: `CatalogItemVariation`
 * - `caption`: `CatalogImage`
 * - `display_name`: `CatalogItemOption`
 * 
 * For example, to search for [CatalogItem](https://developer.squareup.com/reference/square_2021-08-18/objects/CatalogItem) objects by searchable attributes, you can use
 * the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CatalogQuery
{
    /**
     * The query filter to return the search result by exact match of the specified attribute name and value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryExact $exactQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('exact_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryExact')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryExact $exactQuery = null;
    
    /**
     * The query filter to return the item variations containing the specified item option value IDs.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemVariationsForItemOptionValues $itemVariationsForItemOptionValuesQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('item_variations_for_item_option_values_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemVariationsForItemOptionValues')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryItemVariationsForItemOptionValues $itemVariationsForItemOptionValuesQuery = null;
    
    /**
     * The query filter to return the items containing the specified item option IDs.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemsForItemOptions $itemsForItemOptionsQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('items_for_item_options_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemsForItemOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryItemsForItemOptions $itemsForItemOptionsQuery = null;
    
    /**
     * The query filter to return the items containing the specified modifier list IDs.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemsForModifierList $itemsForModifierListQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('items_for_modifier_list_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemsForModifierList')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryItemsForModifierList $itemsForModifierListQuery = null;
    
    /**
     * The query filter to return the items containing the specified tax IDs.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemsForTax $itemsForTaxQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('items_for_tax_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryItemsForTax')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryItemsForTax $itemsForTaxQuery = null;
    
    /**
     * The query filter to return the search result whose named attribute values are prefixed by the specified attribute value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryPrefix $prefixQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('prefix_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryPrefix')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryPrefix $prefixQuery = null;
    
    /**
     * The query filter to return the search result whose named attribute values fall between the specified range.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryRange $rangeQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('range_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryRange')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryRange $rangeQuery = null;
    
    /**
     * The query filter to return the search result(s) by exact match of the specified `attribute_name` and any of
     * 
     * the `attribute_values`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQuerySet $setQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('set_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQuerySet')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQuerySet $setQuery = null;
    
    /**
     * The query expression to specify the key to sort search results.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQuerySortedAttribute $sortedAttributeQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('sorted_attribute_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQuerySortedAttribute')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQuerySortedAttribute $sortedAttributeQuery = null;
    
    /**
     * The query filter to return the search result whose searchable attribute values contain all of the specified keywords or tokens, independent of the token order or case.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CatalogQueryText $textQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('text_query')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CatalogQueryText')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CatalogQueryText $textQuery = null;
    
	public function __construct()
	{
		$this->exactQuery = null;
		$this->itemVariationsForItemOptionValuesQuery = null;
		$this->itemsForItemOptionsQuery = null;
		$this->itemsForModifierListQuery = null;
		$this->itemsForTaxQuery = null;
		$this->prefixQuery = null;
		$this->rangeQuery = null;
		$this->setQuery = null;
		$this->sortedAttributeQuery = null;
		$this->textQuery = null;
	}
}
