/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class VappVmNetworkConnection {
    /**
     * Method used to allocate IP addresses for the specified vApp network.
     */
    @JsonProperty("addressingMode")
    public VappVmIpAddressingModeEnum addressingMode;

    public VappVmNetworkConnection withAddressingMode(VappVmIpAddressingModeEnum addressingMode) {
        this.addressingMode = addressingMode;
        return this;
    }
    
    /**
     * IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipAddress")
    public String ipAddress;

    public VappVmNetworkConnection withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }
    
    /**
     * Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.
     */
    @JsonProperty("isConnected")
    public Boolean isConnected;

    public VappVmNetworkConnection withIsConnected(Boolean isConnected) {
        this.isConnected = isConnected;
        return this;
    }
    
    /**
     * MAC address of the NIC that is used by the specified vApp network connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("macAddress")
    public String macAddress;

    public VappVmNetworkConnection withMacAddress(String macAddress) {
        this.macAddress = macAddress;
        return this;
    }
    
    /**
     * The network adapter type of the NIC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkAdapterType")
    public String networkAdapterType;

    public VappVmNetworkConnection withNetworkAdapterType(String networkAdapterType) {
        this.networkAdapterType = networkAdapterType;
        return this;
    }
    
    /**
     * Index assigned to the NIC that is used by the specified vApp network connection.
     */
    @JsonProperty("nicIndex")
    public Integer nicIndex;

    public VappVmNetworkConnection withNicIndex(Integer nicIndex) {
        this.nicIndex = nicIndex;
        return this;
    }
    
    /**
     * Name of the vApp network to which the NIC corresponding to this connection will connect to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vappNetworkName")
    public String vappNetworkName;

    public VappVmNetworkConnection withVappNetworkName(String vappNetworkName) {
        this.vappNetworkName = vappNetworkName;
        return this;
    }
    
    public VappVmNetworkConnection(@JsonProperty("addressingMode") VappVmIpAddressingModeEnum addressingMode, @JsonProperty("isConnected") Boolean isConnected, @JsonProperty("nicIndex") Integer nicIndex) {
        this.addressingMode = addressingMode;
        this.isConnected = isConnected;
        this.nicIndex = nicIndex;
  }
}
