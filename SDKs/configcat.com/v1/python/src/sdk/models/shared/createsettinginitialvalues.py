"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import initialvalue as shared_initialvalue
from ..shared import settingtype_enum as shared_settingtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSettingInitialValues:
    
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""The key of the setting."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the setting, shown on the Dashboard UI."""  
    setting_type: shared_settingtype_enum.SettingTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settingType') }})  
    hint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hint'), 'exclude': lambda f: f is None }})
    r"""A short description for the setting, shown on the Dashboard UI."""  
    initial_values: Optional[list[shared_initialvalue.InitialValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialValues'), 'exclude': lambda f: f is None }})
    r"""Optional, initial values of the feature flag or setting in the given Environments."""  
    tags: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The IDs of the tags which are attached to the setting."""  
    