"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetTopExampleUseCanonicalEnum(str, Enum):
    r"""If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""
    FALSE = 'false'
    TRUE = 'true'


@dataclasses.dataclass
class GetTopExampleRequest:
    
    word: str = dataclasses.field(metadata={'path_param': { 'field_name': 'word', 'style': 'simple', 'explode': False }})
    r"""Word to fetch examples for"""  
    use_canonical: Optional[GetTopExampleUseCanonicalEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'useCanonical', 'style': 'form', 'explode': True }})
    r"""If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested."""  
    

@dataclasses.dataclass
class GetTopExampleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    