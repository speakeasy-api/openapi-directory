// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InterfaceCircuitTerminationTerminationEnum string

const (
	InterfaceCircuitTerminationTerminationEnumA InterfaceCircuitTerminationTerminationEnum = "A"
	InterfaceCircuitTerminationTerminationEnumZ InterfaceCircuitTerminationTerminationEnum = "Z"
)

func (e *InterfaceCircuitTerminationTerminationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "A":
		fallthrough
	case "Z":
		*e = InterfaceCircuitTerminationTerminationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for InterfaceCircuitTerminationTerminationEnum: %s", s)
	}
}

type InterfaceCircuitTermination struct {
	Circuit   *InterfaceNestedCircuit                    `json:"circuit,omitempty"`
	ID        *int64                                     `json:"id,omitempty"`
	PortSpeed int64                                      `json:"port_speed"`
	PpInfo    *string                                    `json:"pp_info,omitempty"`
	TermSide  InterfaceCircuitTerminationTerminationEnum `json:"term_side"`
	// Upstream speed, if different from port speed
	UpstreamSpeed *int64  `json:"upstream_speed,omitempty"`
	XconnectID    *string `json:"xconnect_id,omitempty"`
}
