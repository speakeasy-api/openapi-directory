"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import insights_v1_conference as shared_insights_v1_conference
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional

LIST_CONFERENCE_SERVERS = [
	"https://insights.twilio.com",
]


@dataclasses.dataclass
class ListConferenceSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class ListConferenceRequest:
    
    conference_sid: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ConferenceSid', 'style': 'form', 'explode': True }})
    r"""The SID of the conference."""  
    created_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CreatedAfter', 'style': 'form', 'explode': True }})
    r"""Conferences created after the provided timestamp specified in ISO 8601 format"""  
    created_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CreatedBefore', 'style': 'form', 'explode': True }})
    r"""Conferences created before the provided timestamp specified in ISO 8601 format."""  
    detected_issues: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DetectedIssues', 'style': 'form', 'explode': True }})
    r"""Potential configuration, behavior, or performance issues detected during the conference."""  
    end_reason: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EndReason', 'style': 'form', 'explode': True }})
    r"""Conference end reason; e.g. last participant left, modified by API, etc."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FriendlyName', 'style': 'form', 'explode': True }})
    r"""Custom label for the conference resource, up to 64 characters."""  
    mixer_region: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MixerRegion', 'style': 'form', 'explode': True }})
    r"""Twilio region where the conference media was mixed."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Page', 'style': 'form', 'explode': True }})
    r"""The page index. This value is simply for client state."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageToken', 'style': 'form', 'explode': True }})
    r"""The page token. This is provided by the API."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Status', 'style': 'form', 'explode': True }})
    r"""Conference status."""  
    subaccount: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Subaccount', 'style': 'form', 'explode': True }})
    r"""Account SID for the subaccount whose resources you wish to retrieve."""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Tags', 'style': 'form', 'explode': True }})
    r"""Tags applied by Twilio for common potential configuration, quality, or performance issues."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListConferenceListConferenceResponseMeta:
    
    first_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_page_url'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    next_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_url'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})  
    previous_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page_url'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListConferenceListConferenceResponse:
    r"""OK"""
    
    conferences: Optional[list[shared_insights_v1_conference.InsightsV1Conference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conferences'), 'exclude': lambda f: f is None }})  
    meta: Optional[ListConferenceListConferenceResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListConferenceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_conference_response: Optional[ListConferenceListConferenceResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    