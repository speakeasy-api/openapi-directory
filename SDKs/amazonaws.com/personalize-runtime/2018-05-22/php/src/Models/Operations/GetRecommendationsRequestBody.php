<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class GetRecommendationsRequestBody
{
    /**
     * The Amazon Resource Name (ARN) of the campaign to use for getting recommendations.
     * 
     * @var ?string $campaignArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('campaignArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $campaignArn = null;
    
    /**
     * The contextual metadata to use when getting recommendations. Contextual metadata includes any interaction information that might be relevant when getting a user's recommendations, such as the user's current location or device type.
     * 
     * @var ?array<string, string> $context
     */
	#[\JMS\Serializer\Annotation\SerializedName('context')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $context = null;
    
    /**
     * <p>The ARN of the filter to apply to the returned recommendations. For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering Recommendations</a>.</p> <p>When using this parameter, be sure the filter resource is <code>ACTIVE</code>.</p>
     * 
     * @var ?string $filterArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $filterArn = null;
    
    /**
     * <p>The values to use when filtering recommendations. For each placeholder parameter in your filter expression, provide the parameter name (in matching case) as a key and the filter value(s) as the corresponding value. Separate multiple values for one parameter with a comma. </p> <p>For filter expressions that use an <code>INCLUDE</code> element to include items, you must provide values for all parameters that are defined in the expression. For filters with expressions that use an <code>EXCLUDE</code> element to exclude items, you can omit the <code>filter-values</code>.In this case, Amazon Personalize doesn't use that portion of the expression to filter recommendations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/personalize/latest/dg/filter.html">Filtering recommendations and user segments</a>.</p>
     * 
     * @var ?array<string, string> $filterValues
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterValues')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filterValues = null;
    
    /**
     * <p>The item ID to provide recommendations for.</p> <p>Required for <code>RELATED_ITEMS</code> recipe type.</p>
     * 
     * @var ?string $itemId
     */
	#[\JMS\Serializer\Annotation\SerializedName('itemId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $itemId = null;
    
    /**
     * The number of results to return. The default is 25. The maximum is 500.
     * 
     * @var ?int $numResults
     */
	#[\JMS\Serializer\Annotation\SerializedName('numResults')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $numResults = null;
    
    /**
     * The promotions to apply to the recommendation request. A promotion defines additional business rules that apply to a configurable subset of recommended items.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Promotion> $promotions
     */
	#[\JMS\Serializer\Annotation\SerializedName('promotions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Promotion>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $promotions = null;
    
    /**
     * The Amazon Resource Name (ARN) of the recommender to use to get recommendations. Provide a recommender ARN if you created a Domain dataset group with a recommender for a domain use case.
     * 
     * @var ?string $recommenderArn
     */
	#[\JMS\Serializer\Annotation\SerializedName('recommenderArn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recommenderArn = null;
    
    /**
     * <p>The user ID to provide recommendations for.</p> <p>Required for <code>USER_PERSONALIZATION</code> recipe type.</p>
     * 
     * @var ?string $userId
     */
	#[\JMS\Serializer\Annotation\SerializedName('userId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userId = null;
    
	public function __construct()
	{
		$this->campaignArn = null;
		$this->context = null;
		$this->filterArn = null;
		$this->filterValues = null;
		$this->itemId = null;
		$this->numResults = null;
		$this->promotions = null;
		$this->recommenderArn = null;
		$this->userId = null;
	}
}
