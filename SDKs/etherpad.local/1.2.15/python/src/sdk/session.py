"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Session:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_session_using_get(self, request: operations.CreateSessionUsingGETRequest) -> operations.CreateSessionUsingGETResponse:
        r"""creates a new session. validUntil is an unix timestamp in seconds"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createSession'
        
        query_params = utils.get_query_params(operations.CreateSessionUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSessionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingGET200ApplicationJSON])
                res.create_session_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingGET400ApplicationJSON])
                res.create_session_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingGET401ApplicationJSON])
                res.create_session_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingGET500ApplicationJSON])
                res.create_session_using_get_500_application_json_object = out

        return res

    def create_session_using_post(self, request: operations.CreateSessionUsingPOSTRequest) -> operations.CreateSessionUsingPOSTResponse:
        r"""creates a new session. validUntil is an unix timestamp in seconds"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/createSession'
        
        query_params = utils.get_query_params(operations.CreateSessionUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSessionUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingPOST200ApplicationJSON])
                res.create_session_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingPOST400ApplicationJSON])
                res.create_session_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingPOST401ApplicationJSON])
                res.create_session_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateSessionUsingPOST500ApplicationJSON])
                res.create_session_using_post_500_application_json_object = out

        return res

    def delete_session_using_get(self, request: operations.DeleteSessionUsingGETRequest) -> operations.DeleteSessionUsingGETResponse:
        r"""deletes a session"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deleteSession'
        
        query_params = utils.get_query_params(operations.DeleteSessionUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSessionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingGET200ApplicationJSON])
                res.delete_session_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingGET400ApplicationJSON])
                res.delete_session_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingGET401ApplicationJSON])
                res.delete_session_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingGET500ApplicationJSON])
                res.delete_session_using_get_500_application_json_object = out

        return res

    def delete_session_using_post(self, request: operations.DeleteSessionUsingPOSTRequest) -> operations.DeleteSessionUsingPOSTResponse:
        r"""deletes a session"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/deleteSession'
        
        query_params = utils.get_query_params(operations.DeleteSessionUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSessionUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingPOST200ApplicationJSON])
                res.delete_session_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingPOST400ApplicationJSON])
                res.delete_session_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingPOST401ApplicationJSON])
                res.delete_session_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteSessionUsingPOST500ApplicationJSON])
                res.delete_session_using_post_500_application_json_object = out

        return res

    def get_session_info_using_get(self, request: operations.GETSessionInfoUsingGETRequest) -> operations.GETSessionInfoUsingGETResponse:
        r"""returns informations about a session"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getSessionInfo'
        
        query_params = utils.get_query_params(operations.GETSessionInfoUsingGETRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETSessionInfoUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSessionInfoUsingGET200ApplicationJSON])
                res.get_session_info_using_get_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSessionInfoUsingGET400ApplicationJSON])
                res.get_session_info_using_get_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSessionInfoUsingGET401ApplicationJSON])
                res.get_session_info_using_get_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETSessionInfoUsingGET500ApplicationJSON])
                res.get_session_info_using_get_500_application_json_object = out

        return res

    def get_session_info_using_post(self, request: operations.GetSessionInfoUsingPOSTRequest) -> operations.GetSessionInfoUsingPOSTResponse:
        r"""returns informations about a session"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/getSessionInfo'
        
        query_params = utils.get_query_params(operations.GetSessionInfoUsingPOSTRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSessionInfoUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSessionInfoUsingPOST200ApplicationJSON])
                res.get_session_info_using_post_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSessionInfoUsingPOST400ApplicationJSON])
                res.get_session_info_using_post_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSessionInfoUsingPOST401ApplicationJSON])
                res.get_session_info_using_post_401_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSessionInfoUsingPOST500ApplicationJSON])
                res.get_session_info_using_post_500_application_json_object = out

        return res

    