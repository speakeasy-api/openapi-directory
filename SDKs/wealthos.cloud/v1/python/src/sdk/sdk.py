"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .bank_accounts import BankAccounts
from .fees import Fees
from .financial_products import FinancialProducts
from .investment_product_transactions import InvestmentProductTransactions
from .investment_products import InvestmentProducts
from .investor_accounts import InvestorAccounts
from .investors import Investors
from .payments import Payments
from .portfolio_templates import PortfolioTemplates
from .pots_holdings_and_transactions import PotsHoldingsAndTransactions
from .rates import Rates
from .rebalance import Rebalance
from .switch_instruction import SwitchInstruction
from .test_methods import TestMethods
from .utility import Utility
from .withdrawal import Withdrawal

SERVERS = [
    "https://wos-gb.demo.wealthos.cloud",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Welcome to WealthOS. Here you will find the comprehensive set of information you need to rapidly build rich digital wealth management features.
    # Getting Started
    Before you start developing your features using the WealthOS API, please make sure that the following steps are complete:
    
    * Set-up your own environment unique to your organisation using the link we have provided
    * Follow the step-by-step [guide](/admin/docs/guide) to configuring your environment
    * Sign-up and obtain keys for sandbox environments of all 3rd party integrations you require from the market place of available integrations in WealthOS
    * Setup the keys of the 3rd party integrations within the WealthOS Admin UI
    
    Once you have set yourself up, you can add other users who will be able to collaborate with you.
    
    ---
    # WealthOS API Basics
    The WealthOS API is a RESTful API that provides synchronous communication between your application and the WealthOS platform. For some calls where WealthOS communicates with a 3rd party application (e.g. KYC providers, Payment providers, Custodians) thus causing asynchronicity in communication, WealthOS also provides anebsocket API so you do not have to build a polling function to retrieve responses. 
    
    Your API URLs will be in the following formats:
    
    **RESTful API** - https://{unique_tenancy_identifier}.sandbox.wealthos.cloud/tenant/{endpoint}/v1
    
    ```           E.g. https://acorn-gb.sandbox.wealthos.cloud/investors/v1```
    
    **Websocket API** - wss://{unique_tenancy_identifier}-ws.sandbox.wealthos.cloud/ws/
    
    ```           E.g. wss://acorn-gb-ws.sandbox.wealthos.cloud/ws/```
    
    The Websocket API is used by WealthOS to push asynchronous notifications to your application.
    
    ---
    # Authentication
    The wealth management organisation is granted a **secret key** that they must use in their API calls to interact with the WealthOS platform securely. This key must be stored securely only in your application server side code. It grants the highest level of access privileges to the WealthOS platform. 
    <!-- Each wealth management organisation is granted a set of keys that they must use in their API calls to interact with the WealthOS platform securely.
    
     There are two (2) types of API keys:
    
     * The **secret key**. This must be stored securely only in your application server side code. It grants the highest level of access privileges to the WealthOS platform. 
    
     * **Publishable keys**. These are temporary keys with a short life span issued specifically for some activities. These have limited privileges in terms of what types of calls are permitted to be made using them. Usually these are sent as a response to another API call (e.g. creating a payment intent)
    -->
    ## Testing your keys
    You may test your keys by calling on the following endpoints. 
    
    ### RESTful API
    To test the **secret key**:&nbsp;Perform a GET call on ```~/tenant/test/hello-world-be```
    <!--
    To test the **temporary key**:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Perform a GET call on ```~/tenant/test/hello-world-gui```
    -->
    ### Socket API
     In order for WealthOS to authenticate a Websocket API call, a query parameter x-token must be included within the URL. 
    
    x-token = your organisationâ€™s secret key 
    
    Full URL must read as follows: 
    ````
    wss://{unique_tenancy_identifier}-ws.sandbox.wealthos.cloud/ws?x-token=<api_secret_key>
    ````
    ---
    # Idempotency
    Some of the capabilities exposed via WealthOS tenant API needs to be idempotant (from the perspective of the system). For those requests an additional field `request_id` is required to be sent with the request. The purpose of the `request_id` is to give an unique id for the request, so the system can differentiate requests. Advantage of the `request_id` is the system can check whether the request have already reached the system. If a request (that should be idempotant) has already reached the system, the duplicate request will be rejected.
    
    #### Sample response
    
    ```json
    
    {
      \"status\": 409,
      \"body\": {
        \"message\" : \"duplicate request\", 
        \"status\" : \"COMPLETE|PROCESSING\", 
        \"response\" : \"<stringified original response body>\"
      }
    }
    
    ```
    The `request_id` stored for idempotency checks will be deleted after <span style=\"color:red\">**1 hour**</span> after which point a message with the same `request_id` will be considered as a new request.
    
    ---
    # Entity Versioning
    WealthOS maintains versioning for reference data entities stored within the platform which can be updated by the Wealth Manager BE. This is to ensure integrity of data in the event the same entity is being updated by multiple users via the API. 
    
    When requesting for an entity via the API the system will return the latest  `reference_version` which must be provided when the Wealth Manager BE is updating an entity. If the received `reference_version` is different to the latest `reference_version` in the system, the update will be rejected.
    
    With each sucessful update done to the entity via the API the system will increment the  `reference_version`. 
    
    ---
    # Limits
    
    Currently there are limits to the number of requests that can be made to the WealthOS API. Following are these limits:
    * Average requests per second       1000
    * Burst requests                    500
    * Total requests per day            10,000
    
    ---
    # FAQ
    
    - **How do I see my API keys and how do I re-new the keys?**
        - Your API keys are displayed in the developer section of the WOS Admin GUI. You have to be of user type 'developer' or 'admin' to see this. 
    
    - **Is it mandatory to connect to the web socket**
        - Right now this is optional. However it is highly recommended to do so, because the wealth manager BE can avoid polling (Remember: the REST API calls have a daily quota) for certain important events.
    
    ---
    # Socket API
    ## Intro
    Web socket API is used by the WOS system to notify (push) asynchronous events to the Wealth Manager BE
    ## Accessing the Socket api
    Your Socket API URL would be wss://{socket api root}/ws
    
    For example lets assume your env is `gb` and tenant id is `acorn`. Then,
    
    - Socket API Root: acorn-gb-ws.sandbox.wealthos.cloud
    
    - Socket API URL: wss://acorn-gb-ws.sandbox.wealthos.cloud/ws
    ## Authenticating Socket Connection
    WealthOS requires to authenticate the web socket connection before allowing you to communicate with the system through the socket. For that purpose WealthOS socket API expects a query parameter `x-token` to be attached with the socket URL.
    
    `x-token` is the ApiSecretKey given you by the WealthOS system
    
    So the actual connection URL must look like
    
    ```
    wss://acme-gb-ws.sandbox.wealthos.cloud/ws?x-token=<api_secret_key>
    ```
    ## Channels
    WealthOS socket api uses the concept of channels to group messages exchanged through web socket. A single socket connection may be used to handle one or many channels. Users are advised to implement a proper load balancing scheme.
    
    Messages sent via the channels will be strictly ordered by the event generation time. However, there is no guarantee of ordering messages across channels.
    
    A generic data message passed through the socket looks like,
    
    ```json
    {
        type: \"a string tag that identifies the message\"
        resend: \"[optional] Indicates whether this is a resend message. Resends can be sent during explicit recovery servicing or due to server recovering from errors\"
        ch: \"channel name\" 
        payload: { 
            .... 
        }
        id: \"unique id for this message\"
        ts: \"unique sequence number of message\"
        
    }
    ``` 
    **Note**: The unique sequence number `ts` is a strictly monotonically increasing timestamp (milliseconds elapsed since January 1, 1970, 00:00:00 UTC). This is unique per channel.
    ## Subscribe
    Sent from client to server to subscribe to a channel.
      * Channel name should be specified in the `ch` attribute.
      * Unique request id must be sent in the `req_id` attribute.
    
    ```
    {
        \"type\": \"subscription\",
        \"ch\": \"channel to be subscribed\",
        \"req_id\": \"request ID\",
        \"from_ts\": past sequence number / Timestamp value (milliseconds)
    }
    ```
    Server responds with a **subscribe** message which echoes the request. In addition, a **status** field indicates the subscription status (success or failed) and aneason field indicating the reason in the case of a failure.
    
    ```
    {
        \"type\": \"subscription\",
        \"ch\": \"subscribed channel\",
        \"req_id\": \"request ID\",
        \"status\": \"ACK\"
    }
    ```
    
    ```
    {
        \"type\": \"subscription\",
        \"ch\": \"subscribed channel\",
        \"req_id\": \"request ID\",
        \"status\": \"NACK\",
        \"reason\": \"Error Message\"
    }
    ```
    ## Unsubscribe
    Sent from client to server to unsubscribe from a channel.
      * Channel name should be specified in the `ch` attribute.
      * Unique request id must be sent in the `req_id` attribute.
    
    ```
    {
        \"type\": \"unsubscription\",
        \"ch\": \"channel to be unsubscribed\",
        \"req_id\": \"request ID\"
    }
    ```
    Server responds with a **unsubscribe** message which echoes the request. In addition, a **status** field indicates the unsubscription status (success or failed) and aneason field indicating the reason in the case of a failure.
    
    ```
    {
        \"type\": \"unsubscription\",
        \"ch\": \"channel to be unsubscribed\",
        \"req_id\": \"request ID\",
        \"status\": \"ACK\"
    }
    ```
    
    ```
    {
        \"type\": \"unsubscription\",
        \"ch\": \"channel to be unsubscribed\",
        \"req_id\": \"request ID\",
        \"status\": \"NACK\",
        \"reason\": \"Error Message\"
    }
    ```
    **NOTE**
    * Subscribing to an already subscribed channel will be rejected.
    * Client is expected to re-try, if no response is received within 60 secs
     <!--Server will only cache messages for 1 day.-->
    
    ## Heart beats
    The ws client must send a 'heart-beat'  to the server every **60 seconds** to keep the socket connection alive. Server will reply back with heat-beat (HB). Server will disconnect the ws connection if no HBs are recived for **3 HB intervals** (i.e. between 2 to 3 minutes). Client should also disconnet if no data or hb message is received for 3 minutes
    
    ```json
    {
        type: \"hb\",
        ch: \"system\"
    }
    ```
    <div class=\"warning\" style='padding:0.1em; background-color:#FFD2D2; color:#D8000C;'>
        <span>
            <p style='margin-top:0.9em;margin-bottom:0.9em;margin-left:1em; text-align:left'>
                <b>â“˜</b> A live socket connection will be automatically disconnected by the server after 2 hours
            </p>
        </span>
    </div>
    
    
    ## Recover missed updates
    The ws client can send a **past sequence number** with the subscription to receive missed updates from the provided sequence number onwards.
    
    ```json
    {
        \"type\": \"subscription\",
        \"ch\": \"channel to be subscribed\",
        \"req_id\": \"request ID\",
        \"from_ts\": \"past sequence number\"
    }
    ```
    Server responds with a **subscribe** message which echoes the request. Then the ws client will receive past socket updates from the provided sequence number onwards.
    
    ```
    {
        \"type\": \"subscription\",
        \"ch\": \"subscribed channel\",
        \"req_id\": \"request ID\",
        \"status\": \"ACK\",
        \"from_ts\": 1625660972000
    }
    {
        \"type\": \"investor_status\",
        \"ch\": \"investors\",
        \"payload\": {
            \"investor_id\" : \"<investor_id>\",
            \"status\" : \"'fail' | 'success'\", 
            \"error\" : \"\",  
            \"event\": \"'kyc.started' | 'kyc.completed'\" 
        },
        \"id\": \"fd232671-d47b-4ae2-a4c4-0a37258ffae5\",
        \"ts\": 1625660972222,
        \"resend\": true
    }
    ```
    **NOTE**
    * If the provided sequence number equals **-1**, Then the system will send all the past socket updates to the client.
    * System only accepts integer type sequence number values.
    
    ## Supported Channels
    
    - investors
    - payments
    - transactions  
    - holdings
    - reconciliations
    
    ###  publish investors
    
    This channel publishes investor related updates.
    
    #### Message
    
    
    The investor channel publishes the following message types:
    - `investor_status` : This message type is used to communicate updates to the KYC/AML status of an investor
    
    ##### Payload
    			
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type | string | message type | `investor_status` |
    | ch   | string  | channel name | `investors` |
    | payload.investor_id | string | unique Id of investor | |
    | payload.status   | string  | | `fail` , `success` |
    | payload.error | string | error text. Populated only on failure | |
    | payload.event   | string  | KYC status. Populated only if request is sucessful | `kyc.started`, `kyc.completed` |
    
    ##### Examples
    ```json
    {
        \"type\": \"investor_status\",
        \"ch\": \"investors\",
        \"payload\": {
            \"investor_id\" : \"<investor_id>\",
            \"status\" : \"'fail' | 'success'\", 
            \"error\" : \"\",  
            \"event\": \"'kyc.started' | 'kyc.completed'\" 
        },
        \"id\": \"fd232671-d47b-4ae2-a4c4-0a37258ffae5\",
        \"ts\": 1625660972222
    }
    ```
    
    <a name=\"payments\"></a>
    
    ###  publish payments
    
    This channel publishes payment status related updates
    
    #### Message
    
    The payments channel publishes the following message types:
    - `payment_update` : This message type is used to communicate updates to the status of the payment.
    
    ##### Payload
    			
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type | string | | `payment_update` |
    | ch   | string  | | `payments` |
    | payload.transaction_id | string | Unique Id of the payment | |
    | payload.pot_id | string | Id of the pot the payment is directed to | |
    | payload.status   | string  | | `pending_confirmation`, `processing`, `succeeded`, `cancelled`, `failed` |
    
    ##### Examples
    
    ```json
    {
        \"type\": \"payment_update\",
        \"ch\": \"payments\",
        \"payload\": {
            \"transaction_id\" : \"<transaction_id>\",
            \"pot_id\" : \"<pot_id>\",
            \"status\" : \"'pending_confirmation' | 'processing' | 'succeeded' | 'cancelled' | 'failed'\" 
        },
        \"id\": \"fd232671-d47b-4ae2-a4c4-0a37258ffae5\",
        \"ts\": 1625660972222
    }
    ```
    
    <a name=\"channel-transactions\"></a>
    
    ###  publish transactions
    
    This channel publishes various transaction related updates.
    
    #### Message
    
    The transactions channel publishes the following message types:
    - `transaction_initiated` : This message type is used to communicate a new transaction created within the system (e.g. a scheduled fee deduction, individual transactions of a portfolio rebalance etc.)
    - `transaction_updated` : This message type is used to communicate an update to a transaction.
    - `external_transaction_added` : This message type is used to communicate a new transaction created in the system via an external party (e.g. transaction created by a custodian).
    
    
    ##### Payload
    For further information regarding the description of fields in the payload, mandatory fields and conditionally returned fields etc. please refer [GET pending & past transactions of a pot](#operation/getPotTransactions). 
    			
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type   | string  | | `transaction_updated`,`transaction_initiated`,`external_transaction_added` |
    | ch | string | | `transactions` |
    | payload.transaction_id | string | Unique Id of the transaction | |
    | payload.parent_transaction_id | string | Parent Transaction ID | |
    | payload.external_transaction_reference | string | External Transaction Reference | |
    | payload.pot_id | string | Pot ID of the transaction | |
    | payload.investment_product_id | string | Invetment Prouct ID or cash | |
    | payload.client_order_id | string | (Optional) Order identifier assigned by the wealth manager | |
    | payload.primary_transaction_type | string | Primary Transaction Type | `Fees`,`Buy`,`Sell`,`Transfers`,`Income`,`Tax`,`Contribution`,`Withdrawal`,`Corporate actions` |
    | payload.sub_transaction_type | string | Sub Transaction Type | `Dividend Reinvestment`,`Interest Reinvestment`,`Reinvestment`,`Buy`,`Sell Cancel`,`Switch Buy`,`Sell`,`Buy Cancel`,`Switch Sell`,`Lump sum`,`Employer contribution`,`Employee contribution`,`Regular contribution`,`Payment in for fees`,`Internal Transfer - Cash In`,`Internal Transfer - Stock In`,`Internal Transfer - Cash Out`,`Internal Transfer - Stock Out`,`Stock Transfer In`,`Cash Transfer In`,`Stock Transfer Out`,`Cash Transfer Out`,`Commission`,`Ancillary fee`,`Management fee`,`Fee credit`,`Fee rebate`,`Advisor ongoing fee`,`One-off advisor fee`,`Commission rebate`,`Custody fees`,`Dividends`,`Distributions`,`Interest`,`Other income`,`Takeovers, Mergers & Name Changes - Create`,`Takeovers, Mergers & Name Changes - Extinguish`,`Rights Expiry`,`Rights Exercise`,`Warrant Exercise`,`Fixed Income Maturity - Receive Capital`, `Fixed Income Maturity - Extinguish Bond Units`,`Fund Merger - Create New Fund Units`,`Fund Merger - Extinguish Old Fund Units`,`Rights Issue`,`Stock Dividend`,`Spin-Off`,`Warrant Issue`,`Stock Split`,`Fee Tax`,`Tax Relief`,`GST`,`HST`,`PST`,`QST`,`Withholding Tax`,`Non-resident Tax`,`Penalty`,`Contribution Refund`,`Income Withdrawal`,`Reversal`,`Withdrawal`,`Miscellaneous Corporate Action Exercise - Buy`,`Miscellaneous Corporate Action Exercise - Sell` |
    | payload.type | string | Type of the transaction | `pending`,`archived` |
    | payload.sub_type | string | Sub type of the transaction | `instructed`,`confirmed`,`priced`,`rejected`,`settled`,`cancelled`, `scheduled` |
    | payload.currency | string | Currency of the pot | |
    | payload.direction | string | Direction of the transaction | `in`,`out` |
    | payload.transaction_quantity | string | Quantity of the investment product transaction. This will be empty for cash transactions | |
    | payload.transaction_value | string | Value of the transaction | |
    | payload.execution_price | string | Executed price of the buy, sell transaction | |
    | payload.trade_date | date | Will indicate the date where this transaction was effected | |
    | payload.settlement_date | date | Intendent settlement date of the pending transaction or actual the settled day of the transaction | |
    | payload.created_at | time | Transaction created date | |
    | payload.updated_at | time | Transaction last updated date | |
    | payload.additional_external_details | Object | Additional external details of the transaction, This may be populated in reconciliation process | |
    | payload.origin | string | Origin of the transaction | `api`, `admin_ui`, `file_upload`, `system` | 
    
    ##### Examples
    
    ```json
    {
        \"type\": \"transaction_updated\",
        \"ch\": \"transactions\",
        \"object\": {
             \"pot_id\":\"pt-62f4930b-dc7d-4671-8d17-f9dd56138316\",
             \"transaction_id\":\"bc317049-076e-4fcc-8b5e-f64d958681ab\",
             \"investment_product_id\":\"GB0000495209\",
             \"primary_transaction_type\":\"Buy\",
             \"sub_transaction_type\":\"Buy\",
             \"type\":\"archived\",
             \"sub_type\":\"settled\",
             \"currency\":\"CAD\",
             \"direction\":\"in\",
             \"transaction_quantity\":\"20\",
             \"transaction_value\":\"129.69\",
             \"execution_price\":\"6.45\",
             \"trade_date\":\"2021-08-06\",
             \"settlement_date\":\"2021-08-06\",
             \"origin\": \"admin_ui\",
             \"created_at\":\"2021-08-06T09:25:44.251Z\",
             \"updated_at\":\"2021-08-06T09:27:18.003Z\",
             \"external_transaction_reference\": \"117709248888833\"
         },
        \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",
        \"ts\":1628244517263
    }
    ```
    <a name=\"holdings\"></a>
    
    ###  publish holdings
    
    This channel publishes holdings related updates.
    
    #### Message
    
    The holdings channel publishes the following message types:
    - `holding_updated` : This message type is used to communicate an update to the units of an investment product holding, or value of a cash holding.
    
    ##### Payload
    For further information regarding the description of fields in the payload, mandatory fields and conditionally returned fields etc. please refer [GET current holdings of a pot](#operation/getPotHoldings). 
    			
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type | string | | `holding_updated` |
    | ch   | string  | | `holdings` | 
    | payload.pot_id | string | Id of the pot the payment is directed to | |
    | payload.investment_product_id | string | Investment product ID or 'cash' for cash | |
    | payload.currency | string | Currency of the pot | |
    | payload.total_quantity | string | Total Quantity of the investment product holding. This value is empty for cash holdings | |
    | payload.free_quantity | string | Free Quantity of the investment product holding. This value is empty for cash holdings | |
    | payload.locked_quantity | string | Locked Quantity of the investment product holding. This value is empty for cash holdings | |
    | payload.total_value | string | Total Value of the holding | |
    | payload.free_value | string | Free Value of the holding | |
    | payload.locked_value | string | Locked Value of the holding | |
    | payload.investment_product_name | string | Name of the investment product | |
    | payload.price | string | Price of the holding | |
    | payload.price_date | time | The time which the price is updated | |
    | payload.average_book_cost | string | Per-unit book cost for a particular holding (applicable for investment product holdings only) | |
    | payload.cost_of_holding | string | Total book cost for the total units currently held within the pot (applicable for investment product holdings only) | |
    | payload.settled_cash_position | string | Settled cash amount within the pot (applicable for cash holdings only) | |
    | payload.additional_external_details | Object | Additional external details of the holding, This may be populated in reconciliation process | |
    
    ##### Examples
    
    ```json
    {
        \"type\": \"holding_updated\",
        \"ch\": \"holdings\",
        \"payload\": {
             \"pot_id\":\"pt-62f4930b-dc7d-4671-8d17-f9dd56138316\",
             \"investment_product_id\":\"GB0000495209\",
             \"currency\":\"CAD\",
             \"total_quantity\":\"20\",
             \"free_quantity\":\"20\",
             \"locked_quantity\":\"0\",
             \"total_value\":\"137.358\",
             \"free_value\":\"137.358\",
             \"locked_value\":\"0\",
             \"investment_product_name\":\"BlackRock European Dynamic Fund A Accumulation\",
             \"price\":\"6.8679\",
             \"price_date\":\"2021-08-06T09:27:37.512Z\",
             \"average_book_cost\": \"5\",
             \"cost_of_holding\": \"100\"        
        },
        \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",
        \"ts\":1628244517263
    }
    ```
    
    <a name=\"reconciliations\"></a> 
    
    ###  publish reconciliations
    
    The reconciliations channel publishes the following message types:
    - `investor_summary` : This message type is used to communicate a summary of investor reconciliation process.
    - `investor_mismatch` : This message type is used to communicate all mismatches in each investor reconciliations process.
    - `pot_summary` : This message type is used to communicate a summary of pot reconciliation process.
    - `pot_mismatch` : This message type is used to communicate all mismatches in each pot reconciliations process.
    - `transaction_summary` : This message type is used to communicate a summary of transaction reconciliation process.
    - `transaction_mismatch` : This message type is used to communicate mismatches in each transaction reconciliations process.
    - `transaction_ingestion_failure` : This message type is used to communicate ingestion failures in each transaction reconciliations process.
    - `transaction_ignored` : This message type is used to communicate all ignored transactions in each transaction reconciliations process.
    - `holdings_summary` : This message type is used to communicate a summary of holding reconciliation process.
    - `holdings_mismatch` : This message type is used to communicate all mismatches in each holding reconciliations process.
    
    #### Investor summary message
    ##### Payload
    			
    
    | Name   | Type   | Description | Accepted values |
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `investor_summary` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | type of reconciliations | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |
    | payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |
    | payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |
    | payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |
    
    
    ##### Examples
    
    ```json
    {
        \"type\":\"investor_summary\",
        \"ch\":\"reconciliations\",
            \"payload\":
            {
                \"job_id\":\"hydrangea-dc-210806-1628240463777\",
                \"job_name\":\"Investor Details\",
                \"date\":\"2021-08-09T06:49:34.227Z\",
                \"total_records\":1,
                \"mismatched_records\":1,
                \"incoming_records\": 0,
                \"no_incoming_records\": 0
            },
        \"id\":\"e1c7797f-f590-4490-a452-01894b33d014\",
        \"ts\":1628244517823
    }
    
    ```
    
    #### Investor mismatch message
    ##### Payload
    
    | Name   | Type   | Description | Accepted values |
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `investor_mismatch` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |
    | payload.investor_id | string | unique id of the investor being reconciled (if available) | |
    | payload.record_status <br><font size=\"2\" color=\"red\">Required</font>  | number | record status   |  `reconciled`, `unreconciled`, `not_found`, `key_unavailable` |
    | payload.fields | object | mismatched fields with field, incoming_value, available_value and status   | |
    | payload.fields.field <br><font size=\"2\" color=\"red\">Required</font>  | object | Name of the fields  | |
    | payload.fields.incoming_value | object | Incoming value for the field | |
    | payload.fields.available_value | object | Available value for the field | |
    | payload.fields.status | object | status of the field | `mismatched`, `matched` |
    
    ##### Examples
    
    ```json
    {
        \"type\":\"investor_mismatch\",
        \"ch\":\"reconciliations\",
        \"payload\":
        {
            \"job_id\":\"hydrangea-dc-210806-1628240463777\",
            \"date\":\"2021-08-09T06:49:34.227Z\",
            \"record_id\":\"F180010Q\",
            \"record_status\":\"not_found\",
            \"fields\":
            [
                {\"field\":\"first_name\",\"incoming_value\":\"Santa\",\"available_value\": \"sando\", \"status\":\"mismatched\"},
                {\"field\":\"last_name\",\"incoming_value\":\"Claus\", \"available_value\": \"clerk\", \"status\":\"mismatched\"}
            ]
        },
        \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",
        \"ts\":1628244517263
    }
    
    ```
    
    #### Pot summary message
    ##### Payload
    			
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `pot_summary` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | type of reconciliations | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |
    | payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |
    | payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |
    | payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |
    
    ##### Examples
    
    ```json
    {
        \"type\": \"pot_summary\",
        \"ch\": \"reconciliations\",
        \"payload\": {
            \"job_id\": \"dev14_recon_pot_200\",
            \"job_name\": \"Pot Details\",
            \"date\": \"2021-09-02T10:07:40.578Z\",
            \"total_records\": 91,
            \"mismatched_records\": 41,
            \"incoming_records\": 0,
            \"no_incoming_records\": 0
        },
        \"id\": \"c574d276-de4b-4014-80f3-80e54d31d3da\",
        \"ts\": 1630577304480
    }
    ```
    
    #### Pot mismatch message
    ##### Payload
    
    | Name   | Type   | Description | Accepted values |  
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `pot_mismatch` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |
    | payload.pot_id | string | unique id of the pot being reconciled (if available) | |
    | payload.record_status <br><font size=\"2\" color=\"red\">Required</font>  | number | record status   |  `reconciled`, `unreconciled`, `not_found`, `key_unavailable` |
    | payload.fields | object | mismatched fields | |
    | payload.fields.field <br><font size=\"2\" color=\"red\">Required</font>  | object | Name of the fields  | |
    | payload.fields.incoming_value | object | Incoming value for the field | |
    | payload.fields.available_value | object | Available value for the field | |
    | payload.fields.status | object | status of the field | `matched`, `mismatched` |
    
    ##### Examples
    
    ```json
    {
        \"type\": \"pot_mismatch\",
        \"ch\": \"reconciliations\",
        \"payload\": {
            \"job_id\": \"dev14_recon_pot_200\",
            \"date\": \"2021-09-02T10:07:40.578Z\",
            \"record_id\": \"53_RWM\",
            \"record_status\": \"not_found\",
            \"fields\": [
                {\"field\": \"custodian_account_reference\",\"incoming_value\": \"F3A0023Q\",\"status\": \"mismatched\"},
                {\"field\": \"pot_currency\",\"incoming_value\": \"CAD\",\"status\": \"mismatched\"}
     
            ]
        },
        \"id\": \"7722f072-4e8d-48ec-ad4f-4543e64fb536\",
        \"ts\": 1630577304156
    }
    ```
    
    #### Transaction summary message
    ##### Payload
    			
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `transaction_summary` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | Name of the reconciliations job | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |
    | payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |
    | payload.updated_records <br><font size=\"2\" color=\"red\">Required</font>  | number | updated record count | |
    | payload.unable_to_ingest <br><font size=\"2\" color=\"red\">Required</font>  | number | ingestion failed record count | |
    | payload.ignored_records <br><font size=\"2\" color=\"red\">Required</font>  | number | ignored record count | |
    | payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |
    | payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |
    
    
    ##### Examples
    
    ```json
    {
        \"type\": \"transaction_summary\",
        \"ch\": \"reconciliations\",
        \"payload\": {
            \"job_id\": \"dev10_cat_inv_178\",
            \"job_name\": \"Transaction Details\",
            \"date\": \"2021-08-18T09:08:27.171Z\",
            \"total_records\": 8,
            \"mismatched_records\": 1,
            \"updated_records\": 4,
            \"unable_to_ingest\": 1,
            \"ignored_records\": 1,
            \"incoming_records\": 7,
            \"no_incoming_records\": 1
        },
        \"id\": \"7d3614c7-3f63-4930-88df-062c5059047d\",
        \"ts\": 1629277726128
    }
    ```
    
    #### Transaction mismatch message
    ##### Payload
    
    | Name   | Type   | Description | Accepted values |
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font> | string | | `transaction_mismatch` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>  | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font> | string | Unique Id of reconciliation process | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font> | string | date and time  | |
    | payload.record_id <br><font size=\"2\" color=\"red\">Required</font> | string | unique id of a record | |
    | payload.external_transaction_reference | string | External transaction reference (if available) | |
    | payload.transaction_ids | object | Transaction ids of mismatched records (if available) | |
    | payload.pot_id | string | Pot ID of the transaction (if available) | |
    | payload.record_status <br><font size=\"2\" color=\"red\">Required</font> | number | record status   |  `unreconciled`,`not_found`,`key_unavailable`, `multiple_found`, `no_incoming_record`, `updated` |
    | payload.fields | object | mismatched fields | |
    | payload.fields.field <br><font size=\"2\" color=\"red\">Required</font> | object | Name of the fields  | |
    | payload.fields.incoming_value | object | Incoming value for the field | |
    | payload.fields.available_value | object | Available value for the field | |
    | payload.fields.status | object | status of the field | `matched`, `mismatched`, `key_value_missing` |
    
    ##### Examples
    
    ```json
    {
    	\"type\":\"transaction_mismatch\",
    	\"ch\":\"reconciliations\",
    	\"payload\":{\"job_id\":\"peony-transaction_reconciliations-1630493472846\",
    	\"date\":\"2021-09-01T10:51:18.577Z\",
    	\"record_id\":\"2_RWM\",
    	\"external_transaction_reference\":\"117709248888833\",
        \"transaction_ids\": [ \"dc71fad5-7b79-4f4f-8400-7ab4d55979c8\" ],
    	\"pot_id\":\"pt-6090c97b-3dd3-45b8-b7cf-7fd24bf8249d\",
    	\"record_status\":\"unreconciled\",
    	\"fields\":[
    	{
    		\"field\":\"primary_transaction_type\",
    		\"incoming_value\":\"Buy\",
    		\"available_value\":\"Corporate actions\",
    		\"status\":\"mismatched\"
    	},
    	{
    		\"field\":\"sub_transaction_type\",
    		\"incoming_value\":\"Buy\",
    		\"available_value\":\"Stock Split\",
    		\"status\":\"mismatched\"
        },
    	{
    		\"field\":\"execution_price\",
    		\"incoming_value\":null,
    		\"status\":\"mismatched\"
        },
    	{
    		\"field\":\"trade_date\",
    		\"incoming_value\":\"2021-08-31\",
    		\"status\":\"mismatched\"
    	},
    	{
    		\"field\":\"settlement_date\",
    		\"incoming_value\":\"2021-09-02\",
    		\"status\":\"mismatched\"
    	}
    	]
    },
    	\"id\":\"0b3aa3b1-b14c-44ee-ac47-656149645ba9\",
    	\"ts\":1630493491292
    }
    ```
    
    #### Transaction ingestion failure message
    ##### Payload
    
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font> | string | | `transaction_ingestion_failure` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>  | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font> | string | Unique Id of reconciliation process | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font> | string | date and time  | |
    | payload.record_id <br><font size=\"2\" color=\"red\">Required</font> | string | unique id of a record | |
    | payload.external_transaction_reference | string | External transaction reference | |
    | payload.pot_id | string | Pot ID of the transaction (if available) | |
    | payload.record_status <br><font size=\"2\" color=\"red\">Required</font> | number | record status | `unable_to_ingest` |
    | payload.fields <br><font size=\"2\" color=\"red\">Required</font> | object | fields | |
    | payload.fields.field <br><font size=\"2\" color=\"red\">Required</font> | object | Name of the fields  | |
    | payload.fields.incoming_value <br><font size=\"2\" color=\"red\">Required</font> | object | Incoming value for the field | |
    | payload.fields.status <br><font size=\"2\" color=\"red\">Required</font> | object | status of the field | `unrecognised`, `key_value_missing` |
    
    ##### Examples
    
    ```json
    {
        \"type\": \"transaction_ingestion_failure\",
        \"ch\": \"reconciliations\",
        \"payload\": {
            \"job_id\": \"peony-transaction_reconciliations-1630657432163\",
            \"date\": \"2021-09-03T08:23:54.373Z\",
            \"record_id\": \"3_RWM\",
            \"external_transaction_reference\": \"331738147053699\",
            \"record_status\": \"unable_to_ingest\",
            \"fields\": [
                {
                    \"field\": \"custodian_account_reference\",
                    \"incoming_value\": \"F3A0000A\",
                    \"status\": \"unrecognised\"
                },
                {
                    \"field\": \"pot_currency\",
                    \"incoming_value\": \"CAD\",
                    \"status\": \"unrecognised\"
                },
                {
                    \"field\": \"investment_product_id\",
                    \"incoming_value\": \"CA1358251\",
                    \"status\": \"unrecognised\"
                }
            ]
        },
        \"id\": \"718f9758-e2b0-4a07-9cc6-8a6cb5aae419\",
        \"ts\": 1630657439928
    }
    ```
    
    #### Transaction ignored failure message
    ##### Payload
    
    | Name   | Type   | Description | Accepted values |  
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font> | string | | `transaction_ignored` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |
    | payload.record_status <br><font size=\"2\" color=\"red\">Required</font>  | number | record status   | `ignored` |
    
    ##### Examples
    
    ```json
    {
        \"type\": \"transaction_ignored\",
        \"ch\": \"reconciliations\",
        \"payload\": {
            \"job_id\": \"peony-transaction_reconciliations-1630657867836\",
            \"date\": \"2021-09-03T08:31:08.191Z\",
            \"record_id\": \"3_RWM\",
            \"record_status\": \"ignored\"
        },
        \"id\": \"8a82df6b-d34a-4eb9-91a1-b98cd18aa4e2\",
        \"ts\": 1630657913417
    }    
    ```
    #### Holding summary message
    ##### Payload
    			
    | Name   | Type   | Description | Accepted values |  
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `holdings_summary` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.job_name <br><font size=\"2\" color=\"red\">Required</font>  | string | type of reconciliations | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.total_records <br><font size=\"2\" color=\"red\">Required</font>  | number | total record count | |
    | payload.mismatched_records <br><font size=\"2\" color=\"red\">Required</font>  | number | mismatched record count | |
    | payload.incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | incoming record count | |
    | payload.no_incoming_records <br><font size=\"2\" color=\"red\">Required</font>  | number | no incoming record count | |
    
    ##### Examples
    
    ```json
    {
        \"type\":\"holdings_summary\",
        \"ch\":\"reconciliations\",
            \"payload\":
            {
                \"job_id\":\"cat-holding_reconciliations-1631619829926\",
                \"job_name\":\"Holdings Details\",
                \"date\":\"2021-08-09T06:49:34.227Z\",
                \"total_records\":10,
                \"mismatched_records\":5,
                \"incoming_records\": 0,
                \"no_incoming_records\": 0
            },
        \"id\":\"e1c7797f-f590-4490-a452-01894b33d014\",
        \"ts\":1628244517823
    }
    
    ```
    
    #### Holding mismatch message
    ##### Payload
    
    | Name   | Type   | Description | Accepted values | 
    | ----------- | ----------- | ----------- | ----------- |
    | type <br><font size=\"2\" color=\"red\">Required</font>  | string | | `holding_mismatch` |
    | ch <br><font size=\"2\" color=\"red\">Required</font>    | string  | | `reconciliations` |
    | payload.job_id <br><font size=\"2\" color=\"red\">Required</font>  | string | Unique Id of reconciliation process | |
    | payload.date <br><font size=\"2\" color=\"red\">Required</font>  | string | date and time  | |
    | payload.record_id <br><font size=\"2\" color=\"red\">Required</font>  | string | unique id of a record | |
    | payload.pot_id | string | unique id of the pot being reconciled (if available) | |
    | payload.investment_product_id | string | unique id of the investment product being reconciled (if available) | |
    | payload.record_status <br><font size=\"2\" color=\"red\">Required</font> | number | record status   |  `reconciled`, `unreconciled`, `not_found`, `key_unavailable` |
    | payload.fields | object | mismatched fields with field, incoming_value, available_value and status   | |
    | payload.fields.field <br><font size=\"2\" color=\"red\">Required</font>  | object | Name of the fields  | |
    | payload.fields.incoming_value | object | Incoming value for the field | |
    | payload.fields.available_value | object | Available value for the field | |
    | payload.fields.status | object | status of the field | `mismatched`, `matched`, `updated` |
    
    ##### Examples
    
    ```json
    {
        \"type\":\"holding_mismatch\",
        \"ch\":\"reconciliations\",
        \"payload\":
        {
            \"job_id\":\"cat-holding_reconciliations-1631619829926\",
            \"date\":\"2021-08-09T06:49:34.227Z\",
            \"record_id\":\"RWM_9_sr\",
            \"pot_id\": \"abc\",
            \"investment_product_id\": \"pqr\",
            \"record_status\":\"not_found\",
            \"fields\":
            [
                {\"field\":\"custodian_account_reference\",\"incoming_value\":\"F180010Q\",\"status\":\"mismatched\"},
                {\"field\":\"free_value\",\"incoming_value\":0, \"status\":\"mismatched\"}
            ]
        },
        \"id\":\"8e754ef9-5d63-4c2a-9f43-ac42f588e122\",
        \"ts\":1628244517263
    }
    
    ```
    """
    bank_accounts: BankAccounts
    r"""The Bank Account endpoint allows a wealth manager to create, update and retrieve the bank account details of an investor. An investor can have one or more bank accounts within the system and a default bank account should always be configured.
    
    Every bank account has an account status that represents the `active` or `inactive` status of an account. Only `active` bank accounts can be used for any transactions in the system.
    """
    fees: Fees
    r"""<!-- <div class=\\"warning\\" style='padding:0.1em; background-color:#FEEFB3; color:#9F6000;'>
        <span>
            <p style='margin-top:0.9em;margin-bottom:0.9em;margin-left:1em; text-align:left'>
                <b>â“˜</b> This feature is currently in BETA mode
            </p>
        </span>
    </div>
    
    The Fees endpoints allow a wealth manager to manage fees in terms of creating and charging an external fee or retrieving information on fee configurations setup in the system for recurring fee computations. -->
    
    The Fees endpoint allows a wealth manager to charge an externally calculated or derived fee from an investor's pot.
    """
    financial_products: FinancialProducts
    r"""Financial Products are the tax wrapper investment vehicles offered by the Wealth Manager (e.g. General Investment Accounts, Stocks and Shares ISAs, SIPPs, LISAs etc.). Currently WealthOS supports General Investment Accounts (GIAs).
    
    The Financial Products endpoint returns all financial products and their configurations setup by the Wealth Manager via the WealthOS Admin UI.
    """
    investment_product_transactions: InvestmentProductTransactions
    r"""The Transactions endpoint allows you to buy or sell Investment Products. The endpoint supports single or bulk transactions.
    
    A transaction to buy or sell an investment product can be specified in units (i.e. buy/sell n number of units of the investment product) or as a value (i.e. buy/sell up to n value of the investment product).
    """
    investment_products: InvestmentProducts
    r"""Investment products  (e.g. mutual funds, ETFs, stocks etc.) are bought and sold by the investor (or by the wealth manager on the investorâ€™s behalf).
    
    The Investment Products endpoint returns all the investment products that are offered by the wealth manager, as well as the current market price. The wealth manager must specify the universe of supported investment products via the WealthOS Admin UI.
    """
    investor_accounts: InvestorAccounts
    r"""An investor account is designed to manage a group of pots attached to a single financial product. A user can maintain multiple accounts for a given financial product if the product regulations support this setup."""
    investors: Investors
    r"""The Investor endpoint allows you to create investors, update investors and retrieve investor records in bulk or individually. If a KYC/AML service has been set-up through WealthOS (e.g. Onfido), then the investor will be verified using this service.
    
    When retrieving the investor, the following fields will provide information regarding the investorâ€™s status that can be used for deciding on what subsequent investor action must be permitted.
     
    * dealing_status: Normally set to Active once KYC/AML passes, however may be independently set by administrators if required. 
     
    * kyc_aml_status - the status of the KYC/AML check 
     
    * Status - ultimate status of the investor derived from dealing_status and kcy_aml_status.
    
    If WealthOS is not set-up to manage the KYC/AML service then the wealth manager must specify the `kyc_aml_status` and `dealing_status` on investor creation and update. The `status` of the investor will be consider active only when the `kyc_aml_status : \"clear\"` and `dealing_status : \"active\"`
    """
    payments: Payments
    r"""The Payments endpoint allows you to put cash into a specific pot in your account by sending a payment intent. This intent must capture the following information regarding the payment:
    
    * Details regarding payment such as the `amount` to collect and the `currency`
    * Supported `payment_type` (card payments, electronic fund transfers etc.).
    * Associated key information to track a payment (e.g. `pot_id`).
    * Intention of payment:
        * Cash into the pot only, do not invest (`purpose: \"cash\"`)
        * Invest based on the portfolio attached to the investor (`purpose: \"invest\"` and `investment_instructions` not populated)
        * Invest based on attached instructions (`purpose: \"invest\"` and `investment_instructions` populated). If the pot has a portfolio attached, then the priority will be given to investment instructions. If the investment instructions apply only for a propotion of money coming in, then the rest will be added as cash.
    
    <!-- If you have additional parameters to associate with a payment, you can define a custom object and include it under a top-level field of the request body with the value you used for `payment_type` as its field name. (e.g. `\"stripe\": {.....}`). -->
    Additionaly, if the `service_provider` is given as `\"truelayer\"` extra accept an extra object `service_provider_params` where you have to provide the `bank_account_id`as a key-value pair and you will recieve this object in response including the fields, `bank_account_id`, `payment_intent_id` and `hpp_url`. (e.g `\"service_provider_params: {\"bank_account_id\": \"ba-82faf049...\", \"payment_intent_id: 91aa9de...\", \"hpp_url\":\"https://...\"}\"`).
    
    For `\"stripe\"`, in the response, you will receive the  `payment_intent_id`, `client_secret` and `publishable_key` inside that additional object with the value you used for `payment_type` as its field name. (e.g. `\"service_provider_params\": {\"payment_intent_id: 91aa9de...\", \"client_secret\": \"pi_XXXXX\", \"publishable_key\": \"pk_test_XXXXX\", .....}`).
    
    These values will be used with the client library for each payment call for the following purposes.
    
    * `payment_intent_id` - to uniquely identify your payment intent
    * `client_secret` - The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source.
    * `publishable_key` - to uniquely identify your payment service account
    * `hpp_url` - The redirect URL for proceed with bank payment (only for Truelayer)
    """
    portfolio_templates: PortfolioTemplates
    r"""A portfolio template captures how an investorâ€™s cash (once transferred to a pot) should be automatically invested by the system. A portfolio template consists of a set of investment products and the ratios in which these products must be bought, once cleared cash is available to invest.
    
    For example, a portfolio template â€˜PT1â€™ has the following template
    
    Investment Product | Ratio
    -------------------|-------
    Investment Product A | 20%
    Investment Product B | 30%
    Investment Product C | 50%
    
    If GBP 100 is transferred to a pot linked to Portfolio template PT1, the following buy orders will be triggered
    
    * BUY Investment Product A for GBP 20
    * BUY Investment Product B for GBP 30
    * BUY Investment Product C for GBP 50
    
    ### Portfolio Creation
    
    Portfolio Templates can be created by the Wealth Manger (generic set of portfolio templates created in WealthOS and a single template will be assigned to an Investorâ€™s pot based on suitability - e.g. robo advisory) 
    
    <!-- If a Portfolio template is created by an investor then the request must have `owner : \"investor\"` and `investor_id` populated with the relevant investor ID.  -->
    
    The ratios of investment products within a portfolio template must add up to a 100% - if this is not the case, the system will reject the portfolio creation or update. 
    
    Once cleared cash is available in a pot, the system can be instructed to trigger investment product buy requests based on the portfolio template linked to the pot.
    """
    pots_holdings_and_transactions: PotsHoldingsAndTransactions
    r"""Pots allows a wealth manager to compartmentalise investments made by (or on behalf of) an investor to represent different savings goals, risk appetite and investment instructions (e.g. model portfolios).
    An Investor can have multiple pots for a financial product (e.g within the General Investment Account, one pot could be to target a house purchase goal whereas another pot could target savings for school fees etc.). Each pot consists of cash,  investment product holdings, both cash and investments or nothing (empty pot - pending investments). 
    <!--Creating or updating a pot with a linked portfolio template - `portfolio_template_id`  will allow WealthOS to carry out actions such as automated investing based on portfolio, portfolio rebalancing etc. for a pot. 
    -->
    This end point also returns key information related to the pot (e.g. value, total holdings etc.) as well as transaction history for the pot.
    
    ### Current Holdings and Transaction History
    #### Current Holding
    * Cash : `investment_product_id` will be specified as `cash`. For cash holdings, `free_quantity` and `free_value` will return the cash that is settled and available, while `locked_quantity` and `locked_value`  returns the value of cash which is locked (i.e unsettled, ringfenced for a fee deduction etc.) and cannot be used.`total_quantity` and `total_value` will be the total of free and locked. 
    
    * Investment Products : For investment product holdings,  `total_quantity`  return the total number of units held of an investment product within the pot, `locked-quantity` returns the total number of unit which are locked (e.g. ringfenced to be sold) and `free-quantity` returns number of units available for trading. Value of the holdings are calculated using latest available price. So the formula to calculate the value of the investment products holdings will be `quantity`*`price`.
    
    #### Pending Transactions
    * Cash : `type : pending`,`direction : in` (if cash is inbound) or `out` (if cash is withdrawn - functionality not available yet).
    
    * Investment products : `type : pending`,`direction : in`(buy instruction) or `out` (sell instruction).
    
    #### Archived Transactions (historical)
    
    * Cash : `type = archived`, `direction= in` (if cash is inbound) or `out` (if cash is withdrawn - functionality not available yet) and `sub-type : \"rejected\" or \"cancelled\"`for a failed transaction, and `sub-type = \"confirmed\"or \"settled\"` for a successful transaction.  
    
    * Investment Products : `type = archived`, `direction= in` (buy instruction) or `out` (sell instruction) and `sub-type = \"rejected\"or \"cancelled\"` for a failed transaction, and `sub-type = \"confirmed\"or \"settled\"` for a successful transaction.
    """
    rates: Rates
    r"""Wealth Managers require various types of rates (e.g. spot fx rates, interest rates) for valuations, currency conversations etc.
    
    The Rates endpoint returns all the configured rate types along with the latest available rate.
    """
    rebalance: Rebalance
    r"""The rebalancing feature provides advisors and portfolio managers the ability to evaluate which pots have drifted significantly from their target portfolios, and trigger a rebalance execution for these pots to bring the holdings back to parity with the pot's target portfolio. Driven by a single rebalance request, the system completely orchestrates this multi-day buy/sell process across a host of different pots, with status updates being provided via API endpoints and web sockets."""
    switch_instruction: SwitchInstruction
    r"""The Switch Instruction endpoints allow you to switch existing holdings (cash and investment products) to a new set of investment products via a single instruction. You can specify the holdings you want to sell along with a `mode` and `value` (e.g. number of units to be sold, total value of holding to be sold or % of holding to be sold) and the investment products you want to buy (using the proceeds of the sales and and/or free cash available in the pot). The buy instructions can also be specified with a `mode` and `value` (e.g. number of units to buy, total value of holding to be bought or % of proceeds to be used to buy specific investment product).
    
    You can view the status of your switch instruction at any point through the API (both the overall 'parent' switch instruction as well as the individual 'child' buy/sell transactions).
    """
    test_methods: TestMethods
    r"""Test methods are used for easier testing of connectivity, keys and tokens. Since they are not tied to a speific functionality you can use them freely"""
    utility: Utility
    r"""The utility endpoint allows the Wealth Manager to upload information required by the system to support the daily operations (e.g. file uploads for daily jobs, calendar updates etc.)"""
    withdrawal: Withdrawal
    r"""The Withdrawal endpoint allows an investor to withdraw money from one of his/her pots."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.bank_accounts = BankAccounts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.fees = Fees(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.financial_products = FinancialProducts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.investment_product_transactions = InvestmentProductTransactions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.investment_products = InvestmentProducts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.investor_accounts = InvestorAccounts(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.investors = Investors(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.payments = Payments(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.portfolio_templates = PortfolioTemplates(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.pots_holdings_and_transactions = PotsHoldingsAndTransactions(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.rates = Rates(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.rebalance = Rebalance(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.switch_instruction = SwitchInstruction(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.test_methods = TestMethods(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.utility = Utility(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.withdrawal = Withdrawal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    