"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Output = exports.OutputScaleToEnum = exports.OutputResolutionEnum = exports.OutputQualityEnum = exports.OutputFpsEnum = exports.OutputFormatEnum = exports.OutputAspectRatioEnum = void 0;
var utils_1 = require("../../../internal/utils");
var poster_1 = require("./poster");
var range_1 = require("./range");
var size_1 = require("./size");
var thumbnail_1 = require("./thumbnail");
var class_transformer_1 = require("class-transformer");
/**
 * The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>
 *
 * @remarks
 *   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>
 *   <li>`9:16` - vertical/portrait aspect ratio</li>
 *   <li>`1:1` - square aspect ratio</li>
 *   <li>`4:5` - short vertical/portrait aspect ratio</li>
 *   <li>`4:3` - legacy TV aspect ratio</li>
 * </ul>
 */
var OutputAspectRatioEnum;
(function (OutputAspectRatioEnum) {
    OutputAspectRatioEnum["Sixteen9"] = "16:9";
    OutputAspectRatioEnum["Nine16"] = "9:16";
    OutputAspectRatioEnum["One1"] = "1:1";
    OutputAspectRatioEnum["Four5"] = "4:5";
    OutputAspectRatioEnum["Four3"] = "4:3";
})(OutputAspectRatioEnum = exports.OutputAspectRatioEnum || (exports.OutputAspectRatioEnum = {}));
/**
 * The output format and type of media file to generate. <ul>
 *
 * @remarks
 *   <li>`mp4` - mp4 video file</li>
 *   <li>`gif` - animated gif</li>
 *   <li>`jpg` - jpg image file</li>
 *   <li>`png` - png image file</li>
 *   <li>`bmp` - bmp image file</li>
 *   <li>`mp3` - mp3 audio file (audio only)</li>
 * </ul>
 */
var OutputFormatEnum;
(function (OutputFormatEnum) {
    OutputFormatEnum["Mp4"] = "mp4";
    OutputFormatEnum["Gif"] = "gif";
    OutputFormatEnum["Mp3"] = "mp3";
    OutputFormatEnum["Jpg"] = "jpg";
    OutputFormatEnum["Png"] = "png";
    OutputFormatEnum["Bmp"] = "bmp";
})(OutputFormatEnum = exports.OutputFormatEnum || (exports.OutputFormatEnum = {}));
/**
 * Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>
 *
 * @remarks
 *   <li>`12` - 12fps</li>
 *   <li>`15` - 15fps</li>
 *   <li>`24` - 24fps</li>
 *   <li>`25` - 25fps</li>
 *   <li>`30` - 30fps</li>
 * </ul>
 */
var OutputFpsEnum;
(function (OutputFpsEnum) {
    OutputFpsEnum["Twelve"] = "12";
    OutputFpsEnum["Fifteen"] = "15";
    OutputFpsEnum["TwentyFour"] = "24";
    OutputFpsEnum["TwentyFive"] = "25";
    OutputFpsEnum["Thirty"] = "30";
})(OutputFpsEnum = exports.OutputFpsEnum || (exports.OutputFpsEnum = {}));
/**
 * Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>
 *
 * @remarks
 *   <li>`low` - slightly reduced quality, smaller file size</li>
 *   <li>`medium` - optimized quality, render speeds and file size</li>
 *   <li>`high` - slightly increased quality, larger file size</li>
 * </ul>
 */
var OutputQualityEnum;
(function (OutputQualityEnum) {
    OutputQualityEnum["Low"] = "low";
    OutputQualityEnum["Medium"] = "medium";
    OutputQualityEnum["High"] = "high";
})(OutputQualityEnum = exports.OutputQualityEnum || (exports.OutputQualityEnum = {}));
/**
 * The output resolution of the video or image. <ul>
 *
 * @remarks
 *   <li>`preview` - 512px x 288px @ 15fps</li>
 *   <li>`mobile` - 640px x 360px @ 25fps</li>
 *   <li>`sd` - 1024px x 576px @ 25fps</li>
 *   <li>`hd` - 1280px x 720px @ 25fps</li>
 *   <li>`1080` - 1920px x 1080px @ 25fps</li>
 * </ul>
 */
var OutputResolutionEnum;
(function (OutputResolutionEnum) {
    OutputResolutionEnum["Preview"] = "preview";
    OutputResolutionEnum["Mobile"] = "mobile";
    OutputResolutionEnum["Sd"] = "sd";
    OutputResolutionEnum["Hd"] = "hd";
    OutputResolutionEnum["OneThousandAndEighty"] = "1080";
})(OutputResolutionEnum = exports.OutputResolutionEnum || (exports.OutputResolutionEnum = {}));
/**
 * Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>
 *
 * @remarks
 *   <li>`preview` - 512px x 288px @ 15fps</li>
 *   <li>`mobile` - 640px x 360px @ 25fps</li>
 *   <li>`sd` - 1024px x 576px @25fps</li>
 *   <li>`hd` - 1280px x 720px @25fps</li>
 *   <li>`1080` - 1920px x 1080px @25fps</li>
 * </ul>
 */
var OutputScaleToEnum;
(function (OutputScaleToEnum) {
    OutputScaleToEnum["Preview"] = "preview";
    OutputScaleToEnum["Mobile"] = "mobile";
    OutputScaleToEnum["Sd"] = "sd";
    OutputScaleToEnum["Hd"] = "hd";
    OutputScaleToEnum["OneThousandAndEighty"] = "1080";
})(OutputScaleToEnum = exports.OutputScaleToEnum || (exports.OutputScaleToEnum = {}));
/**
 * The output format, render range and type of media to generate.
 */
var Output = /** @class */ (function (_super) {
    __extends(Output, _super);
    function Output() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "aspectRatio" }),
        __metadata("design:type", String)
    ], Output.prototype, "aspectRatio", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "destinations" }),
        __metadata("design:type", Array)
    ], Output.prototype, "destinations", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "format" }),
        __metadata("design:type", String)
    ], Output.prototype, "format", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fps" }),
        __metadata("design:type", String)
    ], Output.prototype, "fps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "poster" }),
        (0, class_transformer_1.Type)(function () { return poster_1.Poster; }),
        __metadata("design:type", poster_1.Poster)
    ], Output.prototype, "poster", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "quality" }),
        __metadata("design:type", String)
    ], Output.prototype, "quality", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "range" }),
        (0, class_transformer_1.Type)(function () { return range_1.Range; }),
        __metadata("design:type", range_1.Range)
    ], Output.prototype, "range", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "resolution" }),
        __metadata("design:type", String)
    ], Output.prototype, "resolution", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "scaleTo" }),
        __metadata("design:type", String)
    ], Output.prototype, "scaleTo", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "size" }),
        (0, class_transformer_1.Type)(function () { return size_1.Size; }),
        __metadata("design:type", size_1.Size)
    ], Output.prototype, "size", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "thumbnail" }),
        (0, class_transformer_1.Type)(function () { return thumbnail_1.Thumbnail; }),
        __metadata("design:type", thumbnail_1.Thumbnail)
    ], Output.prototype, "thumbnail", void 0);
    return Output;
}(utils_1.SpeakeasyBase));
exports.Output = Output;
