"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import picture as shared_picture
from ..shared import user as shared_user
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumPictureSizes:
    
    height: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    r"""The height of the image."""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The direct link to the image."""  
    width: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    r"""The width of the image."""  
    link_with_play_button: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link_with_play_button'), 'exclude': lambda f: f is None }})
    r"""The direct link to the image with a play button overlay."""  
    
class AlbumPictureTypeEnum(str, Enum):
    r"""The type of the picture:
    
    Option descriptions:
     * `caution` - An image that is appropriate for all ages.
     * `custom` - A custom image for the video.
     * `default` - The default image for the video.
    """
    CAUTION = 'caution'
    CUSTOM = 'custom'
    DEFAULT = 'default'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumPicture:
    r"""The custom logo for this album."""
    
    active: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('active') }})
    r"""Whether this picture is the active picture for its parent resource."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The picture's resource key string."""  
    sizes: list[AlbumPictureSizes] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizes') }})
    r"""An array containing reference information about all available image files."""  
    type: AlbumPictureTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the picture:
    
    Option descriptions:
     * `caution` - An image that is appropriate for all ages.
     * `custom` - A custom image for the video.
     * `default` - The default image for the video.
    """  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The picture's URI."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The upload URL for the picture. This field appears when you create the picture resource for the first time."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumEmbed:
    r"""Embed data for the album."""
    
    html: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html') }})
    r"""The responsive HTML code to embed the playlist on a website. This is present only when `privacy.view` isn't password and when the album has embeddable videos."""  
    
class AlbumLayoutEnum(str, Enum):
    r"""The album's layout preference"""
    GRID = 'grid'
    PLAYER = 'player'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumMetadataConnectionsVideos:
    r"""Information about the videos that belong to this album."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of the HTTP methods permitted on this URI."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The total number of videos on this connection."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumMetadataConnections:
    r"""A collection of information that is connected to this resource."""
    
    videos: AlbumMetadataConnectionsVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos') }})
    r"""Information about the videos that belong to this album."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumMetadataInteractionsAddCustomThumbnails:
    r"""An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumMetadataInteractionsAddLogos:
    r"""An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumMetadataInteractionsAddVideos:
    r"""An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope."""
    
    options: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options') }})
    r"""An array of HTTP methods allowed on this URI. This data requires a bearer token with the `private` scope."""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumMetadataInteractions:
    r"""A list of resource URIs related to the album."""
    
    add_custom_thumbnails: AlbumMetadataInteractionsAddCustomThumbnails = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_custom_thumbnails') }})
    r"""An action indicating that the authenticated user is an admin of the album and may therefore add custom thumbnails. This data requires a bearer token with the `private` scope."""  
    add_logos: AlbumMetadataInteractionsAddLogos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_logos') }})
    r"""An action indicating that the authenticated user is an admin of the album and may therefore add custom logos. This data requires a bearer token with the `private` scope."""  
    add_videos: AlbumMetadataInteractionsAddVideos = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('add_videos') }})
    r"""An action indicating that the authenticated user is an admin of the album and may therefore add videos. This data requires a bearer token with the `private` scope."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumMetadata:
    r"""Metadata about the album."""
    
    connections: AlbumMetadataConnections = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connections') }})
    r"""A collection of information that is connected to this resource."""  
    interactions: AlbumMetadataInteractions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interactions') }})
    r"""A list of resource URIs related to the album."""  
    
class AlbumPrivacyViewEnum(str, Enum):
    r"""Who can view the album:
    
    Option descriptions:
     * `anybody` - Anyone can view the album.
     * `embed_only` - Only owner can see album, can be embedded off-site
     * `password` - Only those with the password can view the album.
    """
    ANYBODY = 'anybody'
    EMBED_ONLY = 'embed_only'
    PASSWORD = 'password'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlbumPrivacy:
    r"""The privacy settings of the album."""
    
    view: AlbumPrivacyViewEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('view') }})
    r"""Who can view the album:
    
    Option descriptions:
     * `anybody` - Anyone can view the album.
     * `embed_only` - Only owner can see album, can be embedded off-site
     * `password` - Only those with the password can view the album.
    """  
    password: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password'), 'exclude': lambda f: f is None }})
    r"""The privacy-enabled password to see this album. Present only when `privacy.view` is `password`."""  
    
class AlbumSortEnum(str, Enum):
    r"""Sort type of the album."""
    ADDED_FIRST = 'added_first'
    ADDED_LAST = 'added_last'
    ALPHABETICAL = 'alphabetical'
    ARRANGED = 'arranged'
    COMMENTS = 'comments'
    LIKES = 'likes'
    NEWEST = 'newest'
    OLDEST = 'oldest'
    PLAYS = 'plays'

class AlbumThemeEnum(str, Enum):
    r"""The album's color theme preference"""
    DARK = 'dark'
    STANDARD = 'standard'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Album:
    r"""The album was created."""
    
    allow_continuous_play: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_continuous_play') }})
    r"""Whether an album should allow continuous play."""  
    allow_downloads: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_downloads') }})
    r"""Whether an album should allow downloads."""  
    allow_share: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_share') }})
    r"""Whether an album should allow sharing."""  
    brand_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand_color') }})
    r"""Hexadecimal color code for the decorative color. For example, album videos use this color for player buttons."""  
    created_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_time') }})
    r"""The time in ISO 8601 format that the album was created."""  
    custom_logo: AlbumPicture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_logo') }})
    r"""The custom logo for this album."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A brief description of the album's content."""  
    domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})
    r"""The custom domain a user has selected for their album."""  
    duration: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The total duration in seconds of all the videos in the album."""  
    embed: AlbumEmbed = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed') }})
    r"""Embed data for the album."""  
    embed_brand_color: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed_brand_color') }})
    r"""Whether to show the album's custom brand color in the player of the album's embedded playlist."""  
    embed_custom_logo: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embed_custom_logo') }})
    r"""Whether to show the album's custom logo in the player of the album's embedded playlist."""  
    hide_nav: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hide_nav') }})
    r"""Whether to hide the Vimeo navigation when viewing the album."""  
    hide_vimeo_logo: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hide_vimeo_logo') }})
    r"""Whether to hide the Vimeo logo in the player of the album's embedded playlist."""  
    layout: AlbumLayoutEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layout') }})
    r"""The album's layout preference"""  
    link: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link') }})
    r"""The URL to access the album."""  
    metadata: AlbumMetadata = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""Metadata about the album."""  
    modified_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_time') }})
    r"""The time in ISO 8601 format when the album was last modified."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The album's display name."""  
    pictures: shared_picture.Picture = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pictures') }})
    r"""The active image for the album; defaults to the thumbnail of the last video added to the album."""  
    privacy: AlbumPrivacy = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy') }})
    r"""The privacy settings of the album."""  
    resource_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resource_key') }})
    r"""The album resource key."""  
    review_mode: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('review_mode') }})
    r"""Whether album videos should use the review mode URL."""  
    sort: AlbumSortEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort') }})
    r"""Sort type of the album."""  
    theme: AlbumThemeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('theme') }})
    r"""The album's color theme preference"""  
    uri: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri') }})
    r"""The album's URI."""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The custom Vimeo URL a user has selected for their album."""  
    use_custom_domain: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('use_custom_domain') }})
    r"""Whether the user has opted in to use a custom domain for their album."""  
    user: shared_user.User = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user') }})
    r"""The owner of the album."""  
    web_brand_color: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('web_brand_color') }})
    r"""Whether an album should show the brand color in the web layout."""  
    web_custom_logo: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('web_custom_logo') }})
    r"""Whether an album's custom logo should be shown in the web layout."""  
    