// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnum
type POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnum string

const (
	POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnumIncreaseNodeGroupsInGlobalReplicationGroup POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnum = "IncreaseNodeGroupsInGlobalReplicationGroup"
)

func (e *POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IncreaseNodeGroupsInGlobalReplicationGroup":
		*e = POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnum: %s", s)
	}
}

// POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnum
type POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnum string

const (
	POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnumTwoThousandAndFifteen0202 POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnum = "2015-02-02"
)

func (e *POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-02-02":
		*e = POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnum: %s", s)
	}
}

type POSTIncreaseNodeGroupsInGlobalReplicationGroupQueryParams struct {
	Action  POSTIncreaseNodeGroupsInGlobalReplicationGroupActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTIncreaseNodeGroupsInGlobalReplicationGroupVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTIncreaseNodeGroupsInGlobalReplicationGroupHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTIncreaseNodeGroupsInGlobalReplicationGroupRequest struct {
	QueryParams POSTIncreaseNodeGroupsInGlobalReplicationGroupQueryParams
	Headers     POSTIncreaseNodeGroupsInGlobalReplicationGroupHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTIncreaseNodeGroupsInGlobalReplicationGroupResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
