"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LocationTypeEnum(str, Enum):
    r"""Contains the type of location this Location is for. Regional or Zonal."""
    LOCATION_TYPE_UNSPECIFIED = 'LOCATION_TYPE_UNSPECIFIED'
    ZONE = 'ZONE'
    REGION = 'REGION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Location:
    r"""Location returns the location name, and if the location is recommended for GKE cluster scheduling."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Contains the name of the resource requested. Specified in the format `projects/*/locations/*`."""  
    recommended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommended'), 'exclude': lambda f: f is None }})
    r"""Whether the location is recommended for GKE cluster scheduling."""  
    type: Optional[LocationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Contains the type of location this Location is for. Regional or Zonal."""  
    