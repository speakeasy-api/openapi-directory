"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAtmsRequest:
    
    if_modified_since: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-Modified-Since', 'style': 'simple', 'explode': False }})
    r"""Used for conditional request, to retrieve data only if modified since a given date"""  
    if_none_match: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'If-None-Match', 'style': 'simple', 'explode': False }})
    r"""Used for conditional request, to retrieve data only if the given Etag value does not match"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtmsErrorObject:
    r"""A standard error response."""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Further details describing the error"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""This corresponds to the HTTP status code"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""A short title of the type of error"""  
    
class GetAtms503ErrorObjectDescriptionEnum(str, Enum):
    THE_SERVICE_IS_TEMPORARILY_UNAVAILABLE_ = 'The service is temporarily unavailable.'

class GetAtms503ErrorObjectStatusEnum(str, Enum):
    FIVE_HUNDRED_AND_THREE = '503'

class GetAtms503ErrorObjectTitleEnum(str, Enum):
    SERVICE_TEMPORARILY_UNAVAILABLE = 'Service temporarily unavailable'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms503ErrorObject:
    r"""The service is temporarily unavailable."""
    
    description: GetAtms503ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetAtms503ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetAtms503ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetAtms500ErrorObjectDescriptionEnum(str, Enum):
    AN_ERROR_OCCURRED_ON_THE_SERVER_NO_FURTHER_INFORMATION_IS_AVAILABLE_ = 'An error occurred on the server. No further information is available.'

class GetAtms500ErrorObjectStatusEnum(str, Enum):
    FIVE_HUNDRED = '500'

class GetAtms500ErrorObjectTitleEnum(str, Enum):
    INTERNAL_SERVER_ERROR = 'Internal server error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms500ErrorObject:
    r"""An error occurred on the server. No further information is available."""
    
    description: GetAtms500ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetAtms500ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetAtms500ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetAtms429ErrorObjectDescriptionEnum(str, Enum):
    YOU_HAVE_REQUESTED_THIS_RESOURCE_TOO_OFTEN_SLOW_DOWN_ = 'You have requested this resource too often. Slow down.'

class GetAtms429ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED_AND_TWENTY_NINE = '429'

class GetAtms429ErrorObjectTitleEnum(str, Enum):
    TOO_MANY_REQUESTS = 'Too many requests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms429ErrorObject:
    r"""You have requested this resource too often. Slow down."""
    
    description: GetAtms429ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetAtms429ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetAtms429ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetAtms408ErrorObjectDescriptionEnum(str, Enum):
    YOUR_CLIENT_HAS_FAILED_TO_SUBMIT_A_REQUEST_AND_A_TIMEOUT_HAS_OCCURRED_ = 'Your client has failed to submit a request, and a timeout has occurred.'

class GetAtms408ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED_AND_EIGHT = '408'

class GetAtms408ErrorObjectTitleEnum(str, Enum):
    CLIENT_TIMEOUT = 'Client timeout'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms408ErrorObject:
    r"""Your client has failed to submit a request, and a timeout has occurred."""
    
    description: GetAtms408ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetAtms408ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetAtms408ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetAtms400ErrorObjectDescriptionEnum(str, Enum):
    YOU_HAVE_SENT_A_REQUEST_WHICH_COULD_NOT_BE_UNDERSTOOD_ = 'You have sent a request which could not be understood.'

class GetAtms400ErrorObjectStatusEnum(str, Enum):
    FOUR_HUNDRED = '400'

class GetAtms400ErrorObjectTitleEnum(str, Enum):
    BAD_REQUEST = 'Bad request'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms400ErrorObject:
    r"""You have sent a request which could not be understood."""
    
    description: GetAtms400ErrorObjectDescriptionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    status: GetAtms400ErrorObjectStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: GetAtms400ErrorObjectTitleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMATMServicesEnum(str, Enum):
    r"""Information about ATM services"""
    BALANCE = 'Balance'
    BILL_PAYMENTS = 'BillPayments'
    CASH_DEPOSITS = 'CashDeposits'
    CASH_WITHDRAWAL = 'CashWithdrawal'
    CHARITY_DONATION = 'CharityDonation'
    CHEQUE_BOOK_REQUEST = 'ChequeBookRequest'
    CHEQUE_DEPOSITS = 'ChequeDeposits'
    FAST_CASH = 'FastCash'
    MINI_STATEMENT = 'MiniStatement'
    MOBILE_BANKING_REGISTRATION = 'MobileBankingRegistration'
    MOBILE_PAYMENT_REGISTRATION = 'MobilePaymentRegistration'
    MOBILE_PHONE_TOP_UP = 'MobilePhoneTopUp'
    ORDER_STATEMENT = 'OrderStatement'
    PIN_ACTIVATION = 'PINActivation'
    PIN_CHANGE = 'PINChange'

class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMAccessibilityTypesEnum(str, Enum):
    r"""Information about the accessibility"""
    AUDIO_CASH_MACHINE = 'AudioCashMachine'
    AUTOMATIC_DOORS = 'AutomaticDoors'
    CHAIR_ACCESS = 'ChairAccess'
    DRIVE_THRU = 'DriveThru'
    EXTERNAL_RAMP = 'ExternalRamp'
    INDUCTION_LOOP = 'InductionLoop'
    INTERNAL_RAMP = 'InternalRamp'
    LEVEL_ACCESS = 'LevelAccess'
    LOWER_LEVEL_COUNTER = 'LowerLevelCounter'
    WHEELCHAIR_ACCESS = 'WheelchairAccess'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMAddress:
    r"""Postal Address"""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country') }})
    r"""Nation with its own government"""  
    post_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostCode') }})
    r"""Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail"""  
    street_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreetName') }})
    r"""Name of a street or thoroughfare"""  
    building_number_or_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildingNumberOrName'), 'exclude': lambda f: f is None }})
    r"""Number or Name that identifies the position of a building on a street"""  
    country_sub_division: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountrySubDivision'), 'exclude': lambda f: f is None }})
    r"""Identifies a subdivision of a country such as state, region, county"""  
    optional_address_field: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OptionalAddressField'), 'exclude': lambda f: f is None }})
    r"""Directions for customers"""  
    town_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TownName'), 'exclude': lambda f: f is None }})
    r"""Name of a built-up area, with defined boundaries, and a local government"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMGeographicLocation:
    r"""Geographic Coordinates"""
    
    latitude: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Latitude') }})
    r"""The Latitude measured in decimal format according to ISO 213"""  
    longitude: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Longitude') }})
    r"""The longitude measured in decimal format according to ISO 213"""  
    
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMLocationCategoryEnum(str, Enum):
    r"""Indicates the environment of the ATM"""
    AIRPORT = 'Airport'
    BANK_SPECIALISED_OUTLET = 'BankSpecialisedOutlet'
    BRANCH_EXTERNAL = 'BranchExternal'
    BRANCH_INTERNAL = 'BranchInternal'
    BRANCH_LOBBY = 'BranchLobby'
    BUREAU_DE_CHANGE = 'BureauDeChange'
    COACH_STATION = 'CoachStation'
    COMMERCIAL_SPACE_INTERNAL = 'CommercialSpaceInternal'
    CONVENIENCE_STORE = 'ConvenienceStore'
    EXHIBITION_CENTRE = 'ExhibitionCentre'
    FACTORY_OR_OFFICE = 'FactoryOrOffice'
    FILLING_STATION = 'FillingStation'
    FINANCIAL_INSTITUTION = 'FinancialInstitution'
    GOVERNMENT_OFFICE = 'GovernmentOffice'
    HOSPITAL = 'Hospital'
    HOTEL = 'Hotel'
    KIOSK_POD = 'KioskPod'
    LEISURE_CENTRE = 'LeisureCentre'
    PLEASURE_PARK = 'PleasurePark'
    PUBLIC_HOUSE = 'PublicHouse'
    RAILWAY_STATION = 'RailwayStation'
    REMOTE_UNIT = 'RemoteUnit'
    RETAILER_DEPARTMENT_STORE = 'RetailerDepartmentStore'
    RETAILER_OUTLET = 'RetailerOutlet'
    SEAPORT_TERMINAL = 'SeaportTerminal'
    SERVICE_STATION = 'ServiceStation'
    SHOPPING_CENTRE_EXTERNAL = 'ShoppingCentreExternal'
    SHOPPING_CENTRE_INTERNAL = 'ShoppingCentreInternal'
    STORAGE_DEPOT = 'StorageDepot'
    SUPERMARKET_EXTERNAL = 'SupermarketExternal'
    SUPERMARKET_INTERNAL = 'SupermarketInternal'
    UNDERGROUND_RAILWAY_STATION = 'UndergroundRailwayStation'
    UNIVERSITY_OR_COLLEGE = 'UniversityOrCollege'

class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMMinimumValueDispensedEnum(str, Enum):
    r"""Minimum currency denominations usually available"""
    POUND_5 = '£5'
    POUND_10 = '£10'
    POUND_20 = '£20'
    POUND_50 = '£50'
    POUND_100 = '£100'

class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationBrandTrademarkIPOCodeEnum(str, Enum):
    r"""The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)"""
    UK = 'UK'
    EU = 'EU'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationBrand:
    r"""Brand"""
    
    trademark_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrademarkID') }})
    r"""The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted"""  
    trademark_ipo_code: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationBrandTrademarkIPOCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TrademarkIPOCode') }})
    r"""The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationParentOrganisationOrganisationName:
    r"""Organisation Name"""
    
    legal_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LegalName') }})
    r"""Legal Name of the organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationParentOrganisation:
    r"""Parent organisation"""
    
    organisation_name: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationParentOrganisationOrganisationName = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganisationName') }})
    r"""Organisation Name"""  
    bic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BIC'), 'exclude': lambda f: f is None }})
    r"""The BIC from the organisation"""  
    lei: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LEI'), 'exclude': lambda f: f is None }})
    r"""The LEI ID of the organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisation:
    r"""Organisation"""
    
    brand: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationBrand = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Brand') }})
    r"""Brand"""  
    parent_organisation: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisationParentOrganisation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParentOrganisation') }})
    r"""Parent organisation"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATM:
    
    address: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMAddress = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Address') }})
    r"""Postal Address"""  
    atmid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ATMID') }})
    r"""ATM terminal device identification for the acquirer and the issuer"""  
    atm_services: list[GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMATMServicesEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ATMServices') }})
    r"""Information about ATM services"""  
    currency: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency') }})
    r"""Defines currency type available for dispense"""  
    geographic_location: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMGeographicLocation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeographicLocation') }})
    r"""Geographic Coordinates"""  
    organisation: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMOrganisation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Organisation') }})
    r"""Organisation"""  
    supported_languages: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedLanguages') }})
    r"""Languages that the ATM supports"""  
    accessibility_types: Optional[list[GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMAccessibilityTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessibilityTypes'), 'exclude': lambda f: f is None }})
    r"""Information about the accessibility"""  
    additional_atm_services: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalATMServices'), 'exclude': lambda f: f is None }})
    r"""ATM Service Description"""  
    branch_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BranchIdentification'), 'exclude': lambda f: f is None }})
    r"""Unique and unambiguous identification of a retail branch of a financial institution"""  
    location_category: Optional[GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMLocationCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LocationCategory'), 'exclude': lambda f: f is None }})
    r"""Indicates the environment of the ATM"""  
    minimum_value_dispensed: Optional[GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATMMinimumValueDispensedEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MinimumValueDispensed'), 'exclude': lambda f: f is None }})
    r"""Minimum currency denominations usually available"""  
    site_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SiteID'), 'exclude': lambda f: f is None }})
    r"""Site identifying code, where ATM is located"""  
    site_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SiteName'), 'exclude': lambda f: f is None }})
    r"""Site identifying name, where ATM is located"""  
    
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum(str, Enum):
    USE_OF_THE_AP_IS_AND_ANY_RELATED_DATA_WILL_BE_SUBJECT_TO_THE_TERMS_OF_THE_OPEN_LICENCE_AND_SUBJECT_TO_TERMS_AND_CONDITIONS = 'Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions'

class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum(str, Enum):
    r"""Open Banking License"""
    HTTPS_WWW_OPENBANKING_ORG_UK_OPEN_LICENCE = 'https://www.openbanking.org.uk/open-licence'

class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum(str, Enum):
    r"""Open Banking Terms of Use"""
    HTTPS_WWW_OPENBANKING_ORG_UK_TERMS = 'https://www.openbanking.org.uk/terms'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData:
    
    agreement: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataAgreementEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Agreement') }})  
    last_updated: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdated'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    license: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataLicenseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('License') }})
    r"""Open Banking License"""  
    terms_of_use: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaDataTermsOfUseEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TermsOfUse') }})
    r"""Open Banking Terms of Use"""  
    total_results: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TotalResults') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSON:
    r"""Successful response with a list of `ATM` data"""
    
    data: list[GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONATM] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    meta: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSONMetaData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})  
    

@dataclasses.dataclass
class GetAtmsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_error_object: Optional[GetAtms400ErrorObject] = dataclasses.field(default=None)
    r"""You have sent a request which could not be understood."""  
    four_hundred_and_eight_error_object: Optional[GetAtms408ErrorObject] = dataclasses.field(default=None)
    r"""Your client has failed to submit a request, and a timeout has occurred."""  
    four_hundred_and_twenty_nine_error_object: Optional[GetAtms429ErrorObject] = dataclasses.field(default=None)
    r"""You have requested this resource too often. Slow down."""  
    five_hundred_error_object: Optional[GetAtms500ErrorObject] = dataclasses.field(default=None)
    r"""An error occurred on the server. No further information is available."""  
    five_hundred_and_three_error_object: Optional[GetAtms503ErrorObject] = dataclasses.field(default=None)
    r"""The service is temporarily unavailable."""  
    error_object: Optional[GetAtmsErrorObject] = dataclasses.field(default=None)
    r"""A standard error response."""  
    get_atms_200_application_prs_openbanking_opendata_v1_3_plus_json_object: Optional[GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJSON] = dataclasses.field(default=None)
    r"""Successful response with a list of `ATM` data"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    