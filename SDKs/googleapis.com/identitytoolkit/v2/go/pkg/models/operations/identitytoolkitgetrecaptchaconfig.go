// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type IdentitytoolkitGetRecaptchaConfigSecurity struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

// IdentitytoolkitGetRecaptchaConfigClientTypeEnum - reCAPTCHA Enterprise uses separate site keys for different client types. Specify the client type to get the corresponding key.
type IdentitytoolkitGetRecaptchaConfigClientTypeEnum string

const (
	IdentitytoolkitGetRecaptchaConfigClientTypeEnumClientTypeUnspecified IdentitytoolkitGetRecaptchaConfigClientTypeEnum = "CLIENT_TYPE_UNSPECIFIED"
	IdentitytoolkitGetRecaptchaConfigClientTypeEnumClientTypeWeb         IdentitytoolkitGetRecaptchaConfigClientTypeEnum = "CLIENT_TYPE_WEB"
	IdentitytoolkitGetRecaptchaConfigClientTypeEnumClientTypeAndroid     IdentitytoolkitGetRecaptchaConfigClientTypeEnum = "CLIENT_TYPE_ANDROID"
	IdentitytoolkitGetRecaptchaConfigClientTypeEnumClientTypeIos         IdentitytoolkitGetRecaptchaConfigClientTypeEnum = "CLIENT_TYPE_IOS"
)

func (e IdentitytoolkitGetRecaptchaConfigClientTypeEnum) ToPointer() *IdentitytoolkitGetRecaptchaConfigClientTypeEnum {
	return &e
}

func (e *IdentitytoolkitGetRecaptchaConfigClientTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CLIENT_TYPE_UNSPECIFIED":
		fallthrough
	case "CLIENT_TYPE_WEB":
		fallthrough
	case "CLIENT_TYPE_ANDROID":
		fallthrough
	case "CLIENT_TYPE_IOS":
		*e = IdentitytoolkitGetRecaptchaConfigClientTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IdentitytoolkitGetRecaptchaConfigClientTypeEnum: %v", v)
	}
}

// IdentitytoolkitGetRecaptchaConfigVersionEnum - The reCAPTCHA version.
type IdentitytoolkitGetRecaptchaConfigVersionEnum string

const (
	IdentitytoolkitGetRecaptchaConfigVersionEnumRecaptchaVersionUnspecified IdentitytoolkitGetRecaptchaConfigVersionEnum = "RECAPTCHA_VERSION_UNSPECIFIED"
	IdentitytoolkitGetRecaptchaConfigVersionEnumRecaptchaEnterprise         IdentitytoolkitGetRecaptchaConfigVersionEnum = "RECAPTCHA_ENTERPRISE"
)

func (e IdentitytoolkitGetRecaptchaConfigVersionEnum) ToPointer() *IdentitytoolkitGetRecaptchaConfigVersionEnum {
	return &e
}

func (e *IdentitytoolkitGetRecaptchaConfigVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECAPTCHA_VERSION_UNSPECIFIED":
		fallthrough
	case "RECAPTCHA_ENTERPRISE":
		*e = IdentitytoolkitGetRecaptchaConfigVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IdentitytoolkitGetRecaptchaConfigVersionEnum: %v", v)
	}
}

type IdentitytoolkitGetRecaptchaConfigRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// reCAPTCHA Enterprise uses separate site keys for different client types. Specify the client type to get the corresponding key.
	ClientType *IdentitytoolkitGetRecaptchaConfigClientTypeEnum `queryParam:"style=form,explode=true,name=clientType"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// The id of a tenant.
	TenantID *string `queryParam:"style=form,explode=true,name=tenantId"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// The reCAPTCHA version.
	Version *IdentitytoolkitGetRecaptchaConfigVersionEnum `queryParam:"style=form,explode=true,name=version"`
}

type IdentitytoolkitGetRecaptchaConfigResponse struct {
	ContentType string
	// Successful response
	GoogleCloudIdentitytoolkitV2RecaptchaConfig *shared.GoogleCloudIdentitytoolkitV2RecaptchaConfig
	StatusCode                                  int
	RawResponse                                 *http.Response
}
