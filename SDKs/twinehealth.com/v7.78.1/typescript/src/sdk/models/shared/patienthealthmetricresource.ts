/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class PatientHealthMetricResourceAttributesCode extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "system" })
  system: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;
}

export enum PatientHealthMetricResourceAttributesTypeEnum {
  BloodPressureSystolic = "blood_pressure_systolic",
  BloodPressureDiastolic = "blood_pressure_diastolic",
  HemoglobinA1c = "hemoglobin_a1c",
  HdlCholesterol = "hdl_cholesterol",
  LdlCholesterol = "ldl_cholesterol",
  TotalCholesterol = "total_cholesterol",
  Triglycerides = "triglycerides",
  BloodUreaNitrogen = "blood_urea_nitrogen",
  Creatinine = "creatinine",
  Hemoglobin = "hemoglobin",
  Hematocrit = "hematocrit",
  TotalSerumIron = "total_serum_iron",
  ThyroidStimulatingHormone = "thyroid_stimulating_hormone",
  FreeThyroxine = "free_thyroxine",
  FreeTriiodothyronine = "free_triiodothyronine",
  TotalTriiodothyronine = "total_triiodothyronine",
  Cd4CellCount = "cd4_cell_count",
  HivViralLoad = "hiv_viral_load",
  Inr = "inr",
  FreeTestosterone = "free_testosterone",
  TotalTestosterone = "total_testosterone",
  CReactiveProtein = "c_reactive_protein",
  ProstateSpecificAntigen = "prostate_specific_antigen",
  Cotinine = "cotinine",
  CPeptide = "c_peptide",
  BloodPressure = "blood_pressure",
  BloodGlucose = "blood_glucose",
  Weight = "weight",
  HeartRate = "heart_rate",
  BodyFatPercentage = "body_fat_percentage",
  BodyMassIndex = "body_mass_index",
  BodyTemperature = "body_temperature",
  ForcedExpiratoryVolume1 = "forced_expiratory_volume1",
  ForcedVitalCapacity = "forced_vital_capacity",
  LeanBodyMass = "lean_body_mass",
  NauseaLevel = "nausea_level",
  OxygenSaturation = "oxygen_saturation",
  PainLevel = "pain_level",
  PeakExpiratoryFlowRate = "peak_expiratory_flow_rate",
  PeripheralPerfusionIndex = "peripheral_perfusion_index",
  RespiratoryRate = "respiratory_rate",
  InhalerUsage = "inhaler_usage",
}

export class PatientHealthMetricResourceAttributes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  @Type(() => PatientHealthMetricResourceAttributesCode)
  code?: PatientHealthMetricResourceAttributesCode;

  @SpeakeasyMetadata()
  @Expose({ name: "diastolic" })
  diastolic?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "occurred_at" })
  occurredAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "systolic" })
  systolic?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PatientHealthMetricResourceAttributesTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "unit" })
  unit?: string;

  /**
   * Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: any;
}

export class PatientHealthMetricResourceRelationshipsPatientDataMetaQueryIdentifier extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "system" })
  system: string;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value: string;
}

/**
 * The query must return one and only one patient.
 */
export class PatientHealthMetricResourceRelationshipsPatientDataMetaQuery extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "groups" })
  groups?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "identifier" })
  @Type(
    () => PatientHealthMetricResourceRelationshipsPatientDataMetaQueryIdentifier
  )
  identifier: PatientHealthMetricResourceRelationshipsPatientDataMetaQueryIdentifier;

  @SpeakeasyMetadata()
  @Expose({ name: "organization" })
  organization?: string;
}

/**
 * Allows the specification of a query for a patient rather than providing a patient id directly
 */
export class PatientHealthMetricResourceRelationshipsPatientDataMeta extends SpeakeasyBase {
  /**
   * The query must return one and only one patient.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  @Type(() => PatientHealthMetricResourceRelationshipsPatientDataMetaQuery)
  query: PatientHealthMetricResourceRelationshipsPatientDataMetaQuery;
}

export class PatientHealthMetricResourceRelationshipsPatientData extends SpeakeasyBase {
  /**
   * Required if the `meta.query` is not defined.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Allows the specification of a query for a patient rather than providing a patient id directly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PatientHealthMetricResourceRelationshipsPatientDataMeta)
  meta?: PatientHealthMetricResourceRelationshipsPatientDataMeta;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class PatientHealthMetricResourceRelationshipsPatient extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  @Type(() => PatientHealthMetricResourceRelationshipsPatientData)
  data?: PatientHealthMetricResourceRelationshipsPatientData;

  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  links?: Record<string, any>;
}

export class PatientHealthMetricResourceRelationships extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "patient" })
  @Type(() => PatientHealthMetricResourceRelationshipsPatient)
  patient?: PatientHealthMetricResourceRelationshipsPatient;
}

export class PatientHealthMetricResource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => PatientHealthMetricResourceAttributes)
  attributes?: PatientHealthMetricResourceAttributes;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "relationships" })
  @Type(() => PatientHealthMetricResourceRelationships)
  relationships?: PatientHealthMetricResourceRelationships;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
