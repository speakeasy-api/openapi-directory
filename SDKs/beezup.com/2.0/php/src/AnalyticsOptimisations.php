<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AnalyticsOptimisations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Copy product optimisations between 2 channels
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CopyOptimisationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CopyOptimisationResponse
     */
	public function copyOptimisation(
        \OpenAPI\OpenAPI\Models\Operations\CopyOptimisationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CopyOptimisationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/optimisations/copy', \OpenAPI\OpenAPI\Models\Operations\CopyOptimisationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "copyOptimisationRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CopyOptimisationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->copyOptimisationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CopyOptimisationResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Optimise products by page
     * 
     * /!\ WARNING /!\ \
     * Apply the operation on every product related to this request. \
     * This operation is used at the bottom of the analytics page result.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptimiseRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptimiseResponse
     */
	public function optimise(
        \OpenAPI\OpenAPI\Models\Operations\OptimiseRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptimiseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/optimisations/{actionName}', \OpenAPI\OpenAPI\Models\Operations\OptimiseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "optimiseRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptimiseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Optimise all products
     * 
     * /!\ WARNING /!\ \
     * Apply the operation on every product related to this request. \
     * This operation is used at the bottom of the analytics page result.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptimiseAllRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptimiseAllResponse
     */
	public function optimiseAll(
        \OpenAPI\OpenAPI\Models\Operations\OptimiseAllRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptimiseAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/optimisations/all/{actionName}', \OpenAPI\OpenAPI\Models\Operations\OptimiseAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "optimiseAllRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptimiseAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Optimise products by category
     * 
     * /!\ WARNING /!\ \
     * This operation will reenable or disable products's category for every channel indicated in the body.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptimiseByCategoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptimiseByCategoryResponse
     */
	public function optimiseByCategory(
        \OpenAPI\OpenAPI\Models\Operations\OptimiseByCategoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptimiseByCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/optimisations/bycategory/{catalogCategoryId}/{actionName}', \OpenAPI\OpenAPI\Models\Operations\OptimiseByCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptimiseByCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Optimise products by channel
     * 
     * /!\ WARNING /!\ \
     * Apply the operation on every product on this channel.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptimiseByChannelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptimiseByChannelResponse
     */
	public function optimiseByChannel(
        \OpenAPI\OpenAPI\Models\Operations\OptimiseByChannelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptimiseByChannelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/optimisations/bychannel/{channelId}/{actionName}', \OpenAPI\OpenAPI\Models\Operations\OptimiseByChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptimiseByChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Optimise product
     * 
     * /!\ WARNING /!\ \
     * This operation will reenable or disable this product for every channel indicated in the body.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OptimiseByProductRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\OptimiseByProductResponse
     */
	public function optimiseByProduct(
        \OpenAPI\OpenAPI\Models\Operations\OptimiseByProductRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\OptimiseByProductResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/user/analytics/{storeId}/optimisations/byproduct/{productId}/{actionName}', \OpenAPI\OpenAPI\Models\Operations\OptimiseByProductRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OptimiseByProductResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->beezUPCommonErrorResponseMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BeezUPCommonErrorResponseMessage', 'json');
            }
        }

        return $response;
    }
}