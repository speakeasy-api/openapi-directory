// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribePullRequestEventsXAmzTargetEnum
type DescribePullRequestEventsXAmzTargetEnum string

const (
	DescribePullRequestEventsXAmzTargetEnumCodeCommit20150413DescribePullRequestEvents DescribePullRequestEventsXAmzTargetEnum = "CodeCommit_20150413.DescribePullRequestEvents"
)

func (e DescribePullRequestEventsXAmzTargetEnum) ToPointer() *DescribePullRequestEventsXAmzTargetEnum {
	return &e
}

func (e *DescribePullRequestEventsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.DescribePullRequestEvents":
		*e = DescribePullRequestEventsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribePullRequestEventsXAmzTargetEnum: %v", v)
	}
}

type DescribePullRequestEventsRequest struct {
	DescribePullRequestEventsInput shared.DescribePullRequestEventsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                  *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256              *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                 *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                       *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken              *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                  *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders              *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                     DescribePullRequestEventsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type DescribePullRequestEventsResponse struct {
	// ActorDoesNotExistException
	ActorDoesNotExistException interface{}
	ContentType                string
	// Success
	DescribePullRequestEventsOutput *shared.DescribePullRequestEventsOutput
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidActorArnException
	InvalidActorArnException interface{}
	// InvalidContinuationTokenException
	InvalidContinuationTokenException interface{}
	// InvalidMaxResultsException
	InvalidMaxResultsException interface{}
	// InvalidPullRequestEventTypeException
	InvalidPullRequestEventTypeException interface{}
	// InvalidPullRequestIdException
	InvalidPullRequestIDException interface{}
	// PullRequestDoesNotExistException
	PullRequestDoesNotExistException interface{}
	// PullRequestIdRequiredException
	PullRequestIDRequiredException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
}
