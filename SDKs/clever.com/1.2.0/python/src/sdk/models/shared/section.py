"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import term as shared_term
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SectionGradeEnum(str, Enum):
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'
    SIX = '6'
    SEVEN = '7'
    EIGHT = '8'
    NINE = '9'
    TEN = '10'
    ELEVEN = '11'
    TWELVE = '12'
    PRE_KINDERGARTEN = 'PreKindergarten'
    KINDERGARTEN = 'Kindergarten'
    POST_GRADUATE = 'PostGraduate'
    OTHER = 'Other'

class SectionSubjectEnum(str, Enum):
    ENGLISH_LANGUAGE_ARTS = 'english/language arts'
    MATH = 'math'
    SCIENCE = 'science'
    SOCIAL_STUDIES = 'social studies'
    LANGUAGE = 'language'
    HOMEROOM_ADVISORY = 'homeroom/advisory'
    INTERVENTIONS_ONLINE_LEARNING = 'interventions/online learning'
    TECHNOLOGY_AND_ENGINEERING = 'technology and engineering'
    PE_AND_HEALTH = 'PE and health'
    ARTS_AND_MUSIC = 'arts and music'
    OTHER = 'other'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Section:
    
    course_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('course_description'), 'exclude': lambda f: f is None }})  
    course_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('course_name'), 'exclude': lambda f: f is None }})  
    course_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('course_number'), 'exclude': lambda f: f is None }})  
    created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'exclude': lambda f: f is None }})  
    district: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('district'), 'exclude': lambda f: f is None }})  
    grade: Optional[SectionGradeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grade'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_modified'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('period'), 'exclude': lambda f: f is None }})  
    school: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('school'), 'exclude': lambda f: f is None }})  
    section_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('section_number'), 'exclude': lambda f: f is None }})  
    sis_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sis_id'), 'exclude': lambda f: f is None }})  
    students: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('students'), 'exclude': lambda f: f is None }})  
    subject: Optional[SectionSubjectEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject'), 'exclude': lambda f: f is None }})  
    teacher: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teacher'), 'exclude': lambda f: f is None }})  
    teachers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('teachers'), 'exclude': lambda f: f is None }})  
    term: Optional[shared_term.Term] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('term'), 'exclude': lambda f: f is None }})  
    