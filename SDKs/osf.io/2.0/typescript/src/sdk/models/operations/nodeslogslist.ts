/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class NodesLogsListRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the node.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=node_id",
  })
  nodeId: string;
}

/**
 * The type of action performed on the OSF. See description for full list of possible actions.
 */
export class NodesLogsListLogAttributesLogParams extends SpeakeasyBase {
  /**
   * The addon associated with the connected node.
   */
  @SpeakeasyMetadata()
  addon?: string;

  /**
   * The view only link added to the node was anonymous.
   */
  @SpeakeasyMetadata()
  anonymousLink?: boolean;

  /**
   * The Amazon s3 bucket connected to the connected node.
   */
  @SpeakeasyMetadata()
  bucket?: string;

  /**
   * Name of citation associated with the connected node.
   */
  @SpeakeasyMetadata()
  citationName?: string;

  /**
   * List of contributors on the connected node involved in the action represented by this node log.
   */
  @SpeakeasyMetadata()
  contributors?: string;

  /**
   * The dataset associated with the connected node.
   */
  @SpeakeasyMetadata()
  dataSet?: string;

  /**
   * A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title.
   */
  @SpeakeasyMetadata()
  destination?: string;

  /**
   * Title of the fighshare project associated with this node log
   */
  @SpeakeasyMetadata()
  figshareTitle?: string;

  /**
   * Dictionary with information about the file involved with the log.
   */
  @SpeakeasyMetadata()
  file?: string;

  /**
   * Filename for the file associated with the log.
   */
  @SpeakeasyMetadata()
  filename?: string;

  /**
   * Folder associated with the log.
   */
  @SpeakeasyMetadata()
  folder?: string;

  /**
   * Name of the folder associated with the log.
   */
  @SpeakeasyMetadata()
  folderName?: string;

  /**
   * URL that the connected node forwards to.
   */
  @SpeakeasyMetadata()
  forwardUrl?: string;

  /**
   * The github repository involved with the action represented by this node log.
   */
  @SpeakeasyMetadata()
  githubRepo?: string;

  /**
   * The github user involved with the action represented by this node log.
   */
  @SpeakeasyMetadata()
  githubUser?: string;

  /**
   * Dictionary containing the DOI and ARK ID for a preprint associated with the log.
   */
  @SpeakeasyMetadata()
  identifiers?: string;

  /**
   * Dictionary containing the ID and Name of the institution associated with the log.
   */
  @SpeakeasyMetadata()
  institution?: string;

  /**
   * Kind of the object associated with the log.
   */
  @SpeakeasyMetadata()
  kind?: string;

  /**
   * License for the associated node.
   */
  @SpeakeasyMetadata()
  license?: string;

  /**
   * Old name of wiki page for a wiki rename log action.
   */
  @SpeakeasyMetadata()
  oldPage?: string;

  /**
   * Current name of wiki page for rename log action.
   */
  @SpeakeasyMetadata()
  page?: string;

  /**
   * Primary key of the wiki page associated with the log.
   */
  @SpeakeasyMetadata()
  pageId?: string;

  /**
   * Node that is refered to in the params of the log.
   */
  @SpeakeasyMetadata()
  paramsNode?: string;

  /**
   * Project that is refered to in the params of the log.
   */
  @SpeakeasyMetadata()
  paramsProject?: string;

  /**
   * Path for a file associated with the log.
   */
  @SpeakeasyMetadata()
  path?: string;

  /**
   * A dictionary with information about the node that is linked to the associated node.
   */
  @SpeakeasyMetadata()
  pointer?: string;

  /**
   * Preprint related to the associated node.
   */
  @SpeakeasyMetadata()
  preprint?: string;

  /**
   * Preprint provider for the associated node.
   */
  @SpeakeasyMetadata()
  preprintProvider?: string;

  /**
   * If a primary institution for the associated node is changed, this will show the previous institution.
   */
  @SpeakeasyMetadata()
  previousInstitution?: string;

  /**
   * A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title.
   */
  @SpeakeasyMetadata()
  source?: string;

  /**
   * Dataverse study linked to the associated node.
   */
  @SpeakeasyMetadata()
  study?: string;

  /**
   * Tag associated with the associated node.
   */
  @SpeakeasyMetadata()
  tag?: string;

  /**
   * Tags associated with the associated node.
   */
  @SpeakeasyMetadata()
  tags?: string;

  /**
   * A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title.
   */
  @SpeakeasyMetadata()
  target?: string;

  /**
   * A dictionary containing information about the node that was used as a template for the associated node.
   */
  @SpeakeasyMetadata()
  templateNode?: string;

  /**
   * The new title for the associated node.
   */
  @SpeakeasyMetadata()
  titleNew?: string;

  /**
   * The original title for the associated node
   */
  @SpeakeasyMetadata()
  titleOriginal?: string;

  /**
   * A dictionary containing all of the fields updated on the associated node.
   */
  @SpeakeasyMetadata()
  updatedFields?: string;

  /**
   * Links to access information about the file associated with this log.
   */
  @SpeakeasyMetadata()
  urls?: string;

  /**
   * Version of the wiki page associated with this log.
   */
  @SpeakeasyMetadata()
  version?: string;

  /**
   * A dictionary with information about the wiki page associated with the log.
   */
  @SpeakeasyMetadata()
  wiki?: string;
}

/**
 * The properties of the log.
 */
export class NodesLogsListLogAttributes extends SpeakeasyBase {
  /**
   * The type of action performed on the OSF. See actions section for full list of possible actions.
   */
  @SpeakeasyMetadata()
  action: string;

  /**
   * The date and time at which the log was created, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  date: Date;

  /**
   * The type of action performed on the OSF. See description for full list of possible actions.
   */
  @SpeakeasyMetadata()
  params?: NodesLogsListLogAttributesLogParams;
}

/**
 * URLs to alternative representations of the log entity.
 */
export class NodesLogsListLogLinks extends SpeakeasyBase {
  /**
   * A link to the detail page for the log.
   */
  @SpeakeasyMetadata()
  self: string;
}

/**
 * URLs to other entities or entity collections that have a relationship to the log.
 */
export class NodesLogsListLogRelationships extends SpeakeasyBase {
  /**
   * A relationship to the node linked to this log.
   */
  @SpeakeasyMetadata()
  linkedNode?: string;

  /**
   * A relationship to the node associated with this log.
   */
  @SpeakeasyMetadata()
  node: string;

  /**
   * A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.
   */
  @SpeakeasyMetadata()
  originalNode?: string;

  /**
   * A relationship to the node used as a template for this log.
   */
  @SpeakeasyMetadata()
  templateNode?: string;

  /**
   * A relationship to the user who performed the log action.
   */
  @SpeakeasyMetadata()
  user?: string;
}

export class NodesLogsListLog extends SpeakeasyBase {
  /**
   * The properties of the log.
   */
  @SpeakeasyMetadata()
  attributes: NodesLogsListLogAttributes;

  /**
   * The identifier of the log.
   */
  @SpeakeasyMetadata()
  id: string;

  /**
   * URLs to alternative representations of the log entity.
   */
  @SpeakeasyMetadata()
  links: NodesLogsListLogLinks;

  /**
   * URLs to other entities or entity collections that have a relationship to the log.
   */
  @SpeakeasyMetadata()
  relationships: NodesLogsListLogRelationships;

  /**
   * The type identifier of the log (`logs`)
   */
  @SpeakeasyMetadata()
  type: string;
}

export class NodesLogsListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
