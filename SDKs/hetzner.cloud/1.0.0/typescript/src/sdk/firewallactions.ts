/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class FirewallActions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get all Actions for a Firewall
   *
   * @remarks
   * Returns all Action objects for a Firewall. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
   */
  getFirewallsIdActions(
    req: operations.GetFirewallsIdActionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFirewallsIdActionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFirewallsIdActionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firewalls/{id}/actions",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFirewallsIdActionsResponse =
        new operations.GetFirewallsIdActionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionsResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetFirewallsIdActionsActionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an Action for a Firewall
   *
   * @remarks
   * Returns a specific Action for a Firewall.
   */
  getFirewallsIdActionsActionId(
    req: operations.GetFirewallsIdActionsActionIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFirewallsIdActionsActionIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFirewallsIdActionsActionIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firewalls/{id}/actions/{action_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFirewallsIdActionsActionIdResponse =
        new operations.GetFirewallsIdActionsActionIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionResponse = utils.objectToClass(
              httpRes?.data,
              operations.GetFirewallsIdActionsActionIdActionResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Apply to Resources
   *
   * @remarks
   * Applies one Firewall to multiple resources.
   *
   * Currently servers (public network interface) and label selectors are supported.
   *
   * #### Call specific error codes
   *
   * | Code                          | Description                                                   |
   * |-------------------------------|---------------------------------------------------------------|
   * | `firewall_already_applied`    | Firewall was already applied on resource                      |
   * | `incompatible_network_type`   | The Network type is incompatible for the given resource       |
   * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
   *
   */
  postFirewallsIdActionsApplyToResources(
    req: operations.PostFirewallsIdActionsApplyToResourcesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFirewallsIdActionsApplyToResourcesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFirewallsIdActionsApplyToResourcesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firewalls/{id}/actions/apply_to_resources",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFirewallsIdActionsApplyToResourcesResponse =
        new operations.PostFirewallsIdActionsApplyToResourcesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionsResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFirewallsIdActionsApplyToResourcesActionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove from Resources
   *
   * @remarks
   * Removes one Firewall from multiple resources.
   *
   * Currently only Servers (and their public network interfaces) are supported.
   *
   * #### Call specific error codes
   *
   * | Code                                  | Description                                                            |
   * |---------------------------------------|------------------------------------------------------------------------|
   * | `firewall_already_removed`            | Firewall was already removed from the resource                         |
   * | `firewall_resource_not_found`         | The resource the Firewall should be attached to was not found          |
   * | `firewall_managed_by_label_selector`  | Firewall was applied via label selector and cannot be removed manually |
   *
   */
  postFirewallsIdActionsRemoveFromResources(
    req: operations.PostFirewallsIdActionsRemoveFromResourcesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFirewallsIdActionsRemoveFromResourcesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFirewallsIdActionsRemoveFromResourcesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firewalls/{id}/actions/remove_from_resources",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFirewallsIdActionsRemoveFromResourcesResponse =
        new operations.PostFirewallsIdActionsRemoveFromResourcesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionsResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFirewallsIdActionsRemoveFromResourcesActionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Set Rules
   *
   * @remarks
   * Sets the rules of a Firewall.
   *
   * All existing rules will be overwritten. Pass an empty `rules` array to remove all rules.
   * The maximum amount of rules that can be defined is 50.
   *
   * #### Call specific error codes
   *
   * | Code                          | Description                                                   |
   * |-------------------------------|---------------------------------------------------------------|
   * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
   *
   */
  postFirewallsIdActionsSetRules(
    req: operations.PostFirewallsIdActionsSetRulesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostFirewallsIdActionsSetRulesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostFirewallsIdActionsSetRulesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firewalls/{id}/actions/set_rules",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostFirewallsIdActionsSetRulesResponse =
        new operations.PostFirewallsIdActionsSetRulesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.actionsResponse = utils.objectToClass(
              httpRes?.data,
              operations.PostFirewallsIdActionsSetRulesActionsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
