"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from ..shared import oneorders_get_responses_404_content_application_1json_schema as shared_oneorders_get_responses_404_content_application_1json_schema
from ..shared import oneorders_post_responses_201_content_application_1json_schema_properties_originalconsignee as shared_oneorders_post_responses_201_content_application_1json_schema_properties_originalconsignee
from ..shared import onereturns_get_responses_200_content_application_1json_schema_properties_data_items_properties_updatedby as shared_onereturns_get_responses_200_content_application_1json_schema_properties_data_items_properties_updatedby
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class PostOrdersSecurity:
    
    fdc_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PostOrdersOrderRequestV2IntegratorEnum(str, Enum):
    r"""Use of this property requires special permission and must be discussed with your account executive; values are restricted while custom values need to be accepted by your AE."""
    ONE_SHOPPING_CART = '1ShoppingCart'
    THREED_CART = '3dCart'
    ADOBE_BC = 'AdobeBC'
    AMAZON_AU = 'AmazonAU'
    AMAZON_EU = 'AmazonEU'
    AMAZON_NA = 'AmazonNA'
    BIG_COMMERCE = 'BigCommerce'
    BRAND_BOOM = 'BrandBoom'
    BRIGHT_PEARL = 'BrightPearl'
    BUY_GOODS = 'BuyGoods'
    CELERY = 'Celery'
    CHANNEL_ADVISOR = 'ChannelAdvisor'
    CLICKBANK = 'Clickbank'
    COMMERCE_HUB = 'CommerceHub'
    CUSTOM = 'Custom'
    DEMANDWARE = 'Demandware'
    EBAY = 'Ebay'
    ECWID = 'Ecwid'
    ETSY = 'Etsy'
    FOXY_CART = 'FoxyCart'
    GOODSIE = 'Goodsie'
    INFUSIONSOFT = 'Infusionsoft'
    KONNEKTIVE = 'Konnektive'
    LIME_LIGHT = 'LimeLight'
    LINIO = 'Linio'
    LINNWORKS = 'Linnworks'
    MAGENTO = 'Magento'
    NETSUITE = 'Netsuite'
    NEW_EGG = 'NewEgg'
    NEXTERNAL = 'Nexternal'
    NU_ORDER = 'NuOrder'
    OPENCART = 'Opencart'
    ORDER_WAVE = 'OrderWave'
    OS_COMMERCE1 = 'osCommerce1'
    OVERSTOCK = 'Overstock'
    PAY_PAL = 'PayPal'
    PRESTA_SHOP = 'PrestaShop'
    PRICEFALLS = 'Pricefalls'
    QUICKBOOKS = 'Quickbooks'
    RAKUTEN = 'Rakuten'
    SEARS = 'Sears'
    SELLBRITE = 'Sellbrite'
    SELLER_CLOUD = 'SellerCloud'
    SHIPSTATION = 'Shipstation'
    SHOPIFY = 'Shopify'
    SKUBANA = 'Skubana'
    SOLID_COMMERCE = 'SolidCommerce'
    SPARK_PAY = 'SparkPay'
    SPREE_COMMERCE = 'SpreeCommerce'
    SPS_COMMERCE = 'spsCommerce'
    STITCH_LABS = 'StitchLabs'
    STONE_EDGE = 'StoneEdge'
    TRADE_GECKO = 'TradeGecko'
    ULTRA_CART = 'UltraCart'
    VOLUSION = 'Volusion'
    VTEX = 'VTEX'
    WALMART = 'Walmart'
    WOO_COMMERCE = 'WooCommerce'
    YAHOO = 'Yahoo'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderRequestV2Items:
    
    declared_value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('declaredValue') }})
    r"""Using USD, a per unit value of a single SKU. If your declaring a kit this is the sum total for a single kit. In both scenarios we will multiply the `declaredValue` against the `quantity` for customs declaration."""  
    quantity: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity') }})  
    sku: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderRequestV2ConsigneeNewV2:
    
    address1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address1') }})
    r"""Address Line 1"""  
    address_locality: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLocality') }})
    r"""City"""  
    address_region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressRegion') }})
    r"""Province / State"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Country, for best results please provide the two character ISO code"""  
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Email, required for international shipments"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})  
    phone: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone') }})
    r"""Phone number, required for international shipments"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address2'), 'exclude': lambda f: f is None }})
    r"""Address Line 2"""  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode'), 'exclude': lambda f: f is None }})
    r"""Postal Code / Zip"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderRequestV2Warehouse:
    r"""We automatically select a warehouse based on inventory availability, requested carrier and delivery schedule, and carrier cost. You may however override this process. Because this is not recommended please inform your AE prior to using so they may enable this feature."""
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderRequestV2:
    r"""The order to create"""
    
    items: list[PostOrdersOrderRequestV2Items] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('items') }})  
    merchant_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantOrderId') }})
    r"""Unique ID provided by the merchant"""  
    recipient: PostOrdersOrderRequestV2ConsigneeNewV2 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient') }})  
    shipping_method: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingMethod') }})
    r"""Custom for you, it will be mapped to an actual method within the OMS UI"""  
    integrator: Optional[PostOrdersOrderRequestV2IntegratorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('integrator'), 'exclude': lambda f: f is None }})
    r"""Use of this property requires special permission and must be discussed with your account executive; values are restricted while custom values need to be accepted by your AE."""  
    merchant_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantId'), 'exclude': lambda f: f is None }})
    r"""Necessary if you have a multitenancy account, otherwise we will associate the order with your account"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})  
    warehouse: Optional[PostOrdersOrderRequestV2Warehouse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouse'), 'exclude': lambda f: f is None }})
    r"""We automatically select a warehouse based on inventory availability, requested carrier and delivery schedule, and carrier cost. You may however override this process. Because this is not recommended please inform your AE prior to using so they may enable this feature."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersErrorStandardWithContextV2:
    r"""Conflict"""
    
    context: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('context'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy:
    r"""Responsibility for resolving this issue"""
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Human readable description of responsible party to resolve the issue"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2StatusEventV2StatusTypeV2Stage:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2StatusEventV2StatusTypeV2State:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2StatusEventV2StatusTypeV2:
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Code, see [status codes](#section/Getting-Started/Status-Codes)"""  
    detail_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detailCode') }})  
    stage: PostOrdersOrderResponseV2StatusEventV2StatusTypeV2Stage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stage') }})  
    state: PostOrdersOrderResponseV2StatusEventV2StatusTypeV2State = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state') }})  
    action_required_by: Optional[PostOrdersOrderResponseV2StatusEventV2StatusTypeV2ActionRequiredBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionRequiredBy'), 'exclude': lambda f: f is None }})
    r"""Responsibility for resolving this issue"""  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Depricated, use code instead"""  
    is_closed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isClosed'), 'exclude': lambda f: f is None }})
    r"""Depricated, does this status event close the order"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Depricated, use stage/state instead"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Depricated"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2StatusEventV2:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    created_by: Optional[shared_onereturns_get_responses_200_content_application_1json_schema_properties_data_items_properties_updatedby.OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})  
    date_: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""DateTime of Status Event"""  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reason'), 'exclude': lambda f: f is None }})
    r"""Explanation for status"""  
    status: Optional[PostOrdersOrderResponseV2StatusEventV2StatusTypeV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2MerchantV2:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Merchant Company Name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2ConsigneeV2IsoCountryV2:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    iso2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iso2'), 'exclude': lambda f: f is None }})
    r"""Two character ISO code"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Country Name"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2ConsigneeV2:
    
    address1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address1') }})  
    address_locality: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressLocality') }})
    r"""City"""  
    address_region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('addressRegion') }})
    r"""Province / State"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Ideally provide the two character ISO code"""  
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})  
    postal_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCode') }})
    r"""Postal Code / Zip"""  
    address2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address2'), 'exclude': lambda f: f is None }})  
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    iso: Optional[PostOrdersOrderResponseV2ConsigneeV2IsoCountryV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iso'), 'exclude': lambda f: f is None }})  
    phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    updated_by: Optional[shared_onereturns_get_responses_200_content_application_1json_schema_properties_data_items_properties_updatedby.OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedBy'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2ParentOrder:
    
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Reference to parent `id` if order was grouped"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2TrackingNumberV2CarrierSimpleV2:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2TrackingNumberV2:
    
    barcode_scan_value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcodeScanValue'), 'exclude': lambda f: f is None }})
    r"""The computer readable alternative to the human readable"""  
    carrier: Optional[PostOrdersOrderResponseV2TrackingNumberV2CarrierSimpleV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('carrier'), 'exclude': lambda f: f is None }})  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The human readable tracking number recipients (consignee) expect"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2WarehouseV2:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostOrdersOrderResponseV2:
    r"""Order Created"""
    
    current_status: PostOrdersOrderResponseV2StatusEventV2 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentStatus') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""FDC ID for this order"""  
    merchant: PostOrdersOrderResponseV2MerchantV2 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant') }})  
    merchant_order_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantOrderId') }})
    r"""Merchant provided ID"""  
    merchant_shipping_method: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantShippingMethod') }})
    r"""Requested ship method"""  
    original_consignee: PostOrdersOrderResponseV2ConsigneeV2 = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalConsignee') }})  
    recorded_on: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordedOn'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""DateTime order was recorded by FDC"""  
    validated_consignee: shared_oneorders_post_responses_201_content_application_1json_schema_properties_originalconsignee.OneordersPostResponses201ContentApplication1jsonSchemaPropertiesOriginalConsignee = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validatedConsignee') }})  
    depart_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""DateTime order departed an FDC warehouse"""  
    dispatch_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dispatchDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""DateTime order was dispatched for fulfillment by FDC"""  
    parent_order: Optional[PostOrdersOrderResponseV2ParentOrder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentOrder'), 'exclude': lambda f: f is None }})  
    purchase_order_num: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purchaseOrderNum'), 'exclude': lambda f: f is None }})
    r"""Merchant provided PO#"""  
    tracking_numbers: Optional[list[PostOrdersOrderResponseV2TrackingNumberV2]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trackingNumbers'), 'exclude': lambda f: f is None }})  
    warehouse: Optional[PostOrdersOrderResponseV2WarehouseV2] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warehouse'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostOrdersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    oneorders_get_responses_404_content_application_1json_schema: Optional[shared_oneorders_get_responses_404_content_application_1json_schema.OneordersGetResponses404ContentApplication1jsonSchema] = dataclasses.field(default=None)
    r"""Invalid order object"""  
    error_standard_with_context_v2: Optional[PostOrdersErrorStandardWithContextV2] = dataclasses.field(default=None)
    r"""Conflict"""  
    order_response_v2: Optional[PostOrdersOrderResponseV2] = dataclasses.field(default=None)
    r"""Order Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    