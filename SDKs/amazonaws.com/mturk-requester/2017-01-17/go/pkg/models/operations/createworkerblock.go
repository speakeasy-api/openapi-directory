// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateWorkerBlockXAmzTargetEnum
type CreateWorkerBlockXAmzTargetEnum string

const (
	CreateWorkerBlockXAmzTargetEnumMTurkRequesterServiceV20170117CreateWorkerBlock CreateWorkerBlockXAmzTargetEnum = "MTurkRequesterServiceV20170117.CreateWorkerBlock"
)

func (e *CreateWorkerBlockXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MTurkRequesterServiceV20170117.CreateWorkerBlock":
		*e = CreateWorkerBlockXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWorkerBlockXAmzTargetEnum: %s", s)
	}
}

type CreateWorkerBlockRequest struct {
	CreateWorkerBlockRequest shared.CreateWorkerBlockRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               CreateWorkerBlockXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateWorkerBlockResponse struct {
	ContentType string
	// Success
	CreateWorkerBlockResponse map[string]interface{}
	// RequestError
	RequestError interface{}
	// ServiceFault
	ServiceFault interface{}
	StatusCode   int
	RawResponse  *http.Response
}
