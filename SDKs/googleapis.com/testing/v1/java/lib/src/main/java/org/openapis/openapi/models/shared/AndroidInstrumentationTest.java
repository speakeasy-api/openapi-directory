/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AndroidInstrumentationTest - A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
 */
public class AndroidInstrumentationTest {
    /**
     * A reference to a file, used for user inputs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appApk")
    public FileReference appApk;
    public AndroidInstrumentationTest withAppApk(FileReference appApk) {
        this.appApk = appApk;
        return this;
    }
    
    /**
     * An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appBundle")
    public AppBundle appBundle;
    public AndroidInstrumentationTest withAppBundle(AppBundle appBundle) {
        this.appBundle = appBundle;
        return this;
    }
    
    /**
     * The java package for the application under test. The default value is determined by examining the application's manifest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appPackageId")
    public String appPackageId;
    public AndroidInstrumentationTest withAppPackageId(String appPackageId) {
        this.appPackageId = appPackageId;
        return this;
    }
    
    /**
     * The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orchestratorOption")
    public AndroidInstrumentationTestOrchestratorOptionEnum orchestratorOption;
    public AndroidInstrumentationTest withOrchestratorOption(AndroidInstrumentationTestOrchestratorOptionEnum orchestratorOption) {
        this.orchestratorOption = orchestratorOption;
        return this;
    }
    
    /**
     * Options for enabling sharding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shardingOption")
    public ShardingOption shardingOption;
    public AndroidInstrumentationTest withShardingOption(ShardingOption shardingOption) {
        this.shardingOption = shardingOption;
        return this;
    }
    
    /**
     * A reference to a file, used for user inputs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testApk")
    public FileReference testApk;
    public AndroidInstrumentationTest withTestApk(FileReference testApk) {
        this.testApk = testApk;
        return this;
    }
    
    /**
     * The java package for the test to be executed. The default value is determined by examining the application's manifest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testPackageId")
    public String testPackageId;
    public AndroidInstrumentationTest withTestPackageId(String testPackageId) {
        this.testPackageId = testPackageId;
        return this;
    }
    
    /**
     * The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testRunnerClass")
    public String testRunnerClass;
    public AndroidInstrumentationTest withTestRunnerClass(String testRunnerClass) {
        this.testRunnerClass = testRunnerClass;
        return this;
    }
    
    /**
     * Each target must be fully qualified with the package name or class name, in one of these formats: - "package package_name" - "class package_name.class_name" - "class package_name.class_name#method_name" If empty, all targets in the module will be run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("testTargets")
    public String[] testTargets;
    public AndroidInstrumentationTest withTestTargets(String[] testTargets) {
        this.testTargets = testTargets;
        return this;
    }
    
}
