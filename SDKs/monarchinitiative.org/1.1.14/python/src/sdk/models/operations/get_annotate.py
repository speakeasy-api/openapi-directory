"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetAnnotateRequest:
    
    content: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'content', 'style': 'form', 'explode': True }})
    r"""The text content to annotate"""  
    exclude_category: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_category', 'style': 'form', 'explode': True }})
    r"""Categories to exclude for annotation"""  
    include_abbreviation: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_abbreviation', 'style': 'form', 'explode': True }})
    r"""Should abbreviations be included"""  
    include_acronym: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_acronym', 'style': 'form', 'explode': True }})
    r"""Should acronyms be included"""  
    include_category: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_category', 'style': 'form', 'explode': True }})
    r"""Categories to include for annotation"""  
    include_numbers: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_numbers', 'style': 'form', 'explode': True }})
    r"""Should numbers be included"""  
    longest_only: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'longest_only', 'style': 'form', 'explode': True }})
    r"""Should only the longest entity be returned for an overlapping group"""  
    min_length: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_length', 'style': 'form', 'explode': True }})
    r"""The minimum number of characters in the annotated entity"""  
    

@dataclasses.dataclass
class GetAnnotateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    