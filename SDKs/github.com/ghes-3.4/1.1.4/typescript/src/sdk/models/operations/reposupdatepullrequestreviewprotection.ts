/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Allow specific users, teams, or apps to bypass pull request requirements.
 */
export class ReposUpdatePullRequestReviewProtectionRequestBodyBypassPullRequestAllowances extends SpeakeasyBase {
  /**
   * The list of app `slug`s allowed to bypass pull request requirements.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apps" })
  apps?: string[];

  /**
   * The list of team `slug`s allowed to bypass pull request requirements.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "teams" })
  teams?: string[];

  /**
   * The list of user `login`s allowed to bypass pull request requirements.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users?: string[];
}

/**
 * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
 */
export class ReposUpdatePullRequestReviewProtectionRequestBodyDismissalRestrictions extends SpeakeasyBase {
  /**
   * The list of app `slug`s with dismissal access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "apps" })
  apps?: string[];

  /**
   * The list of team `slug`s with dismissal access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "teams" })
  teams?: string[];

  /**
   * The list of user `login`s with dismissal access
   */
  @SpeakeasyMetadata()
  @Expose({ name: "users" })
  users?: string[];
}

export class ReposUpdatePullRequestReviewProtectionRequestBody extends SpeakeasyBase {
  /**
   * Allow specific users, teams, or apps to bypass pull request requirements.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bypass_pull_request_allowances" })
  @Type(
    () =>
      ReposUpdatePullRequestReviewProtectionRequestBodyBypassPullRequestAllowances
  )
  bypassPullRequestAllowances?: ReposUpdatePullRequestReviewProtectionRequestBodyBypassPullRequestAllowances;

  /**
   * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dismiss_stale_reviews" })
  dismissStaleReviews?: boolean;

  /**
   * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dismissal_restrictions" })
  @Type(
    () => ReposUpdatePullRequestReviewProtectionRequestBodyDismissalRestrictions
  )
  dismissalRestrictions?: ReposUpdatePullRequestReviewProtectionRequestBodyDismissalRestrictions;

  /**
   * Blocks merging pull requests until [code owners](https://docs.github.com/enterprise-server@3.4/articles/about-code-owners/) have reviewed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_code_owner_reviews" })
  requireCodeOwnerReviews?: boolean;

  /**
   * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required_approving_review_count" })
  requiredApprovingReviewCount?: number;
}

export class ReposUpdatePullRequestReviewProtectionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: ReposUpdatePullRequestReviewProtectionRequestBody;

  /**
   * The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.4/graphql).
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=branch",
  })
  branch: string;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class ReposUpdatePullRequestReviewProtectionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  protectedBranchPullRequestReview?: shared.ProtectedBranchPullRequestReview;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
