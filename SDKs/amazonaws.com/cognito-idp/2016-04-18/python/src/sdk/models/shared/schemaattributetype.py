"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributedatatype_enum as shared_attributedatatype_enum
from ..shared import numberattributeconstraintstype as shared_numberattributeconstraintstype
from ..shared import stringattributeconstraintstype as shared_stringattributeconstraintstype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemaAttributeType:
    r"""Contains information about the schema attribute."""
    
    attribute_data_type: Optional[shared_attributedatatype_enum.AttributeDataTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttributeDataType'), 'exclude': lambda f: f is None }})  
    developer_only_attribute: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeveloperOnlyAttribute'), 'exclude': lambda f: f is None }})  
    mutable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mutable'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    number_attribute_constraints: Optional[shared_numberattributeconstraintstype.NumberAttributeConstraintsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberAttributeConstraints'), 'exclude': lambda f: f is None }})  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Required'), 'exclude': lambda f: f is None }})  
    string_attribute_constraints: Optional[shared_stringattributeconstraintstype.StringAttributeConstraintsType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StringAttributeConstraints'), 'exclude': lambda f: f is None }})  
    