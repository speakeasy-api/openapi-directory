/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class DfareportingCreativesListRequest {
    /**
     * V1 error format.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=$.xgafv")
    public org.openapis.openapi.models.shared.XgafvEnum dollarXgafv;
    public DfareportingCreativesListRequest withDollarXgafv(org.openapis.openapi.models.shared.XgafvEnum dollarXgafv) {
        this.dollarXgafv = dollarXgafv;
        return this;
    }
    
    /**
     * OAuth access token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=access_token")
    public String accessToken;
    public DfareportingCreativesListRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * Select only active creatives. Leave blank to select active and inactive creatives.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=active")
    public Boolean active;
    public DfareportingCreativesListRequest withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * Select only creatives with this advertiser ID.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=advertiserId")
    public String advertiserId;
    public DfareportingCreativesListRequest withAdvertiserId(String advertiserId) {
        this.advertiserId = advertiserId;
        return this;
    }
    
    /**
     * Data format for response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=alt")
    public org.openapis.openapi.models.shared.AltEnum alt;
    public DfareportingCreativesListRequest withAlt(org.openapis.openapi.models.shared.AltEnum alt) {
        this.alt = alt;
        return this;
    }
    
    /**
     * Select only archived creatives. Leave blank to select archived and unarchived creatives.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=archived")
    public Boolean archived;
    public DfareportingCreativesListRequest withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * JSONP
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=callback")
    public String callback;
    public DfareportingCreativesListRequest withCallback(String callback) {
        this.callback = callback;
        return this;
    }
    
    /**
     * Select only creatives with this campaign ID.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=campaignId")
    public String campaignId;
    public DfareportingCreativesListRequest withCampaignId(String campaignId) {
        this.campaignId = campaignId;
        return this;
    }
    
    /**
     * Select only in-stream video creatives with these companion IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=companionCreativeIds")
    public String[] companionCreativeIds;
    public DfareportingCreativesListRequest withCompanionCreativeIds(String[] companionCreativeIds) {
        this.companionCreativeIds = companionCreativeIds;
        return this;
    }
    
    /**
     * Select only creatives with these creative field IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=creativeFieldIds")
    public String[] creativeFieldIds;
    public DfareportingCreativesListRequest withCreativeFieldIds(String[] creativeFieldIds) {
        this.creativeFieldIds = creativeFieldIds;
        return this;
    }
    
    /**
     * Selector specifying which fields to include in a partial response.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    public String fields;
    public DfareportingCreativesListRequest withFields(String fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * Select only creatives with these IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ids")
    public String[] ids;
    public DfareportingCreativesListRequest withIds(String[] ids) {
        this.ids = ids;
        return this;
    }
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=key")
    public String key;
    public DfareportingCreativesListRequest withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * Maximum number of results to return.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=maxResults")
    public Long maxResults;
    public DfareportingCreativesListRequest withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * OAuth 2.0 token for the current user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=oauth_token")
    public String oauthToken;
    public DfareportingCreativesListRequest withOauthToken(String oauthToken) {
        this.oauthToken = oauthToken;
        return this;
    }
    
    /**
     * Value of the nextPageToken from the previous result page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageToken")
    public String pageToken;
    public DfareportingCreativesListRequest withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * Returns response with indentations and line breaks.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=prettyPrint")
    public Boolean prettyPrint;
    public DfareportingCreativesListRequest withPrettyPrint(Boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
        return this;
    }
    
    /**
     * User profile ID associated with this request.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=profileId")
    public String profileId;
    public DfareportingCreativesListRequest withProfileId(String profileId) {
        this.profileId = profileId;
        return this;
    }
    
    /**
     * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=quotaUser")
    public String quotaUser;
    public DfareportingCreativesListRequest withQuotaUser(String quotaUser) {
        this.quotaUser = quotaUser;
        return this;
    }
    
    /**
     * Select only creatives with these rendering IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=renderingIds")
    public String[] renderingIds;
    public DfareportingCreativesListRequest withRenderingIds(String[] renderingIds) {
        this.renderingIds = renderingIds;
        return this;
    }
    
    /**
     * Allows searching for objects by name or ID. Wildcards (*) are allowed. For example, "creative*2015" will return objects with names like "creative June 2015", "creative April 2015", or simply "creative 2015". Most of the searches also add wildcards implicitly at the start and the end of the search string. For example, a search string of "creative" will match objects with name "my creative", "creative 2015", or simply "creative".
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=searchString")
    public String searchString;
    public DfareportingCreativesListRequest withSearchString(String searchString) {
        this.searchString = searchString;
        return this;
    }
    
    /**
     * Select only creatives with these size IDs.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sizeIds")
    public String[] sizeIds;
    public DfareportingCreativesListRequest withSizeIds(String[] sizeIds) {
        this.sizeIds = sizeIds;
        return this;
    }
    
    /**
     * Field by which to sort the list.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortField")
    public DfareportingCreativesListSortFieldEnum sortField;
    public DfareportingCreativesListRequest withSortField(DfareportingCreativesListSortFieldEnum sortField) {
        this.sortField = sortField;
        return this;
    }
    
    /**
     * Order of sorted results.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sortOrder")
    public DfareportingCreativesListSortOrderEnum sortOrder;
    public DfareportingCreativesListRequest withSortOrder(DfareportingCreativesListSortOrderEnum sortOrder) {
        this.sortOrder = sortOrder;
        return this;
    }
    
    /**
     * Select only creatives corresponding to this Studio creative ID.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=studioCreativeId")
    public String studioCreativeId;
    public DfareportingCreativesListRequest withStudioCreativeId(String studioCreativeId) {
        this.studioCreativeId = studioCreativeId;
        return this;
    }
    
    /**
     * Select only creatives with these creative types.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=types")
    public DfareportingCreativesListTypesEnum[] types;
    public DfareportingCreativesListRequest withTypes(DfareportingCreativesListTypesEnum[] types) {
        this.types = types;
        return this;
    }
    
    /**
     * Legacy upload protocol for media (e.g. "media", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=uploadType")
    public String uploadType;
    public DfareportingCreativesListRequest withUploadType(String uploadType) {
        this.uploadType = uploadType;
        return this;
    }
    
    /**
     * Upload protocol for media (e.g. "raw", "multipart").
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=upload_protocol")
    public String uploadProtocol;
    public DfareportingCreativesListRequest withUploadProtocol(String uploadProtocol) {
        this.uploadProtocol = uploadProtocol;
        return this;
    }
    
}
