"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ManagedZones:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dns_managed_zones_create(self, request: operations.DNSManagedZonesCreateRequest, security: operations.DNSManagedZonesCreateSecurity) -> operations.DNSManagedZonesCreateResponse:
        r"""Creates a new ManagedZone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesCreateRequest, base_url, '/dns/v1beta2/projects/{project}/managedZones', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "managed_zone", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSManagedZonesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedZone])
                res.managed_zone = out

        return res

    def dns_managed_zones_delete(self, request: operations.DNSManagedZonesDeleteRequest, security: operations.DNSManagedZonesDeleteSecurity) -> operations.DNSManagedZonesDeleteResponse:
        r"""Deletes a previously created ManagedZone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesDeleteRequest, base_url, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', request)
        
        query_params = utils.get_query_params(operations.DNSManagedZonesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dns_managed_zones_get(self, request: operations.DNSManagedZonesGetRequest, security: operations.DNSManagedZonesGetSecurity) -> operations.DNSManagedZonesGetResponse:
        r"""Fetches the representation of an existing ManagedZone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesGetRequest, base_url, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', request)
        
        query_params = utils.get_query_params(operations.DNSManagedZonesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedZone])
                res.managed_zone = out

        return res

    def dns_managed_zones_get_iam_policy(self, request: operations.DNSManagedZonesGetIamPolicyRequest, security: operations.DNSManagedZonesGetIamPolicySecurity) -> operations.DNSManagedZonesGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesGetIamPolicyRequest, base_url, '/dns/v1beta2/{resource}:getIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_get_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSManagedZonesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def dns_managed_zones_list(self, request: operations.DNSManagedZonesListRequest, security: operations.DNSManagedZonesListSecurity) -> operations.DNSManagedZonesListResponse:
        r"""Enumerates ManagedZones that have been created but not yet deleted."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesListRequest, base_url, '/dns/v1beta2/projects/{project}/managedZones', request)
        
        query_params = utils.get_query_params(operations.DNSManagedZonesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ManagedZonesListResponse])
                res.managed_zones_list_response = out

        return res

    def dns_managed_zones_patch(self, request: operations.DNSManagedZonesPatchRequest, security: operations.DNSManagedZonesPatchSecurity) -> operations.DNSManagedZonesPatchResponse:
        r"""Applies a partial update to an existing ManagedZone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesPatchRequest, base_url, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "managed_zone1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSManagedZonesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def dns_managed_zones_set_iam_policy(self, request: operations.DNSManagedZonesSetIamPolicyRequest, security: operations.DNSManagedZonesSetIamPolicySecurity) -> operations.DNSManagedZonesSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesSetIamPolicyRequest, base_url, '/dns/v1beta2/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSManagedZonesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1Policy])
                res.google_iam_v1_policy = out

        return res

    def dns_managed_zones_test_iam_permissions(self, request: operations.DNSManagedZonesTestIamPermissionsRequest, security: operations.DNSManagedZonesTestIamPermissionsSecurity) -> operations.DNSManagedZonesTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this returns an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesTestIamPermissionsRequest, base_url, '/dns/v1beta2/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_iam_v1_test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSManagedZonesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleIamV1TestIamPermissionsResponse])
                res.google_iam_v1_test_iam_permissions_response = out

        return res

    def dns_managed_zones_update(self, request: operations.DNSManagedZonesUpdateRequest, security: operations.DNSManagedZonesUpdateSecurity) -> operations.DNSManagedZonesUpdateResponse:
        r"""Updates an existing ManagedZone."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSManagedZonesUpdateRequest, base_url, '/dns/v1beta2/projects/{project}/managedZones/{managedZone}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "managed_zone1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSManagedZonesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSManagedZonesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    