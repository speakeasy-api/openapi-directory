// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type BookingAvailabilityTourgradesHeaders struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string `header:"style=simple,explode=false,name=Accept-Language"`
}

type BookingAvailabilityTourgradesRequestBodyAgeBands struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	BandID *int64 `json:"bandId,omitempty"`
	// **numeric count** of number of travelers in *this* age band
	Count *int64 `json:"count,omitempty"`
}

type BookingAvailabilityTourgradesRequestBody struct {
	// **array** of ageBand objects
	AgeBands []BookingAvailabilityTourgradesRequestBodyAgeBands `json:"ageBands,omitempty"`
	// **date** to enquire about available tour grades for *this* product (must be in the future)
	BookingDate *string `json:"bookingDate,omitempty"`
	// **currency code** for the currency in which to display pricing information
	CurrencyCode *string `json:"currencyCode,omitempty"`
	ProductCode  *string `json:"productCode,omitempty"`
}

type BookingAvailabilityTourgradesRequest struct {
	Headers BookingAvailabilityTourgradesHeaders
	Request *BookingAvailabilityTourgradesRequestBody `request:"mediaType=application/json"`
}

type BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	BandID *int64 `json:"bandId,omitempty"`
	// **maximum number** of passengers from *this* age band allowable for *this* tour grade
	MaximumCountRequired *int64 `json:"maximumCountRequired,omitempty"`
	// **minimum number** of passengers from *this* age band required for *this* tour grade
	MinimumCountRequired *int64 `json:"minimumCountRequired,omitempty"`
}

type BookingAvailabilityTourgrades200ApplicationJSONData struct {
	// **array** of age band objects describing the age bands and respective passenger counts allowed to book *this* tour grade; `null` if `ageBandsRequired` is filled and `available` is `false`
	AgeBands []interface{} `json:"ageBands,omitempty"`
	// **array of arrays** of age band objects describing the traveler mixes eligible to book *this* tour grade; `null` if `ageBands` is filled and `available` is `true`
	// - **note**: multiple objects; structure will depend on available tour grades â€“ see response sample for an example, but the exact result you receive will differ
	//
	AgeBandsRequired [][]BookingAvailabilityTourgrades200ApplicationJSONDataAgeBandsRequired `json:"ageBandsRequired,omitempty"`
	// **indicator** - `true` if this tour grade is available to be booked according to the traveler mix specified
	Available *bool `json:"available,omitempty"`
	// **date** on which *this* tour grade operates
	BookingDate *string `json:"bookingDate,omitempty"`
	// **currency code for the specified currency** (will be `'ERROR'` if `available` is `false`)
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **language code for standard langauge** for *this* product
	DefaultLanguageCode *string `json:"defaultLanguageCode,omitempty"`
	// **alphanumeric identifier** of *this* tour grade
	GradeCode *string `json:"gradeCode,omitempty"`
	// **time** of *this* product
	GradeDepartureTime *string `json:"gradeDepartureTime,omitempty"`
	// **natural-language description** of the tour grade
	GradeDescription *string `json:"gradeDescription,omitempty"`
	// **natural-language title** of the tour grade
	GradeTitle *string `json:"gradeTitle,omitempty"`
	// **object** detailing language services available for *this* product** (will be `null` if `available` is `false`)
	LangServices map[string]interface{} `json:"langServices,omitempty"`
	// **numeric merchant net rate** for *this* tour grade
	// **Note**: will be `0` if `available` is `false`
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPrice *float64 `json:"merchantNetPrice,omitempty"`
	// **currency-formatted merchant net rate** for *this* tour grade
	// **Note**: will be empty if `available` is `false`
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPriceFormatted *string `json:"merchantNetPriceFormatted,omitempty"`
	// **numeric suggested retail price** for *this* tour grade
	// **Note**: will be `0` if `available` is `false`
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	RetailPrice *float64 `json:"retailPrice,omitempty"`
	// **currency-formatted suggested retail price** for *this* tour grade
	// **Note**: (will be '' if `available` is `false`)
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	RetailPriceFormatted *string `json:"retailPriceFormatted,omitempty"`
	// **sort order** for *this* tour grade availability object
	SortOrder *int64 `json:"sortOrder,omitempty"`
	// **enum specifier of reason for product unavailability** (will be `null` if `available` is `true`)
	UnavailableReason *string `json:"unavailableReason,omitempty"`
}

// BookingAvailabilityTourgrades200ApplicationJSON - Success
type BookingAvailabilityTourgrades200ApplicationJSON struct {
	Data []BookingAvailabilityTourgrades200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type BookingAvailabilityTourgradesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BookingAvailabilityTourgrades200ApplicationJSONObject *BookingAvailabilityTourgrades200ApplicationJSON
}
