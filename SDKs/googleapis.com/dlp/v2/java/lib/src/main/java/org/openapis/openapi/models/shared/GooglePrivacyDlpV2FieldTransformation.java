/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2FieldTransformation - The transformation to apply to the field.
 */
public class GooglePrivacyDlpV2FieldTransformation {
    /**
     * A condition for determining whether a transformation should be applied to a field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition")
    public GooglePrivacyDlpV2RecordCondition condition;
    public GooglePrivacyDlpV2FieldTransformation withCondition(GooglePrivacyDlpV2RecordCondition condition) {
        this.condition = condition;
        return this;
    }
    
    /**
     * Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of "contact.nums[0].type", use "contact.nums.type".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    public GooglePrivacyDlpV2FieldId[] fields;
    public GooglePrivacyDlpV2FieldTransformation withFields(GooglePrivacyDlpV2FieldId[] fields) {
        this.fields = fields;
        return this;
    }
    
    /**
     * A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infoTypeTransformations")
    public GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations;
    public GooglePrivacyDlpV2FieldTransformation withInfoTypeTransformations(GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations) {
        this.infoTypeTransformations = infoTypeTransformations;
        return this;
    }
    
    /**
     * A rule for transforming a value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primitiveTransformation")
    public GooglePrivacyDlpV2PrimitiveTransformation primitiveTransformation;
    public GooglePrivacyDlpV2FieldTransformation withPrimitiveTransformation(GooglePrivacyDlpV2PrimitiveTransformation primitiveTransformation) {
        this.primitiveTransformation = primitiveTransformation;
        return this;
    }
    
}
