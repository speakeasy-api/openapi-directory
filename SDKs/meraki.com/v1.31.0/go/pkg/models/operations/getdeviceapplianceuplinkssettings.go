// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetDeviceApplianceUplinksSettingsRequest struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication - Settings for PPPoE Authentication.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication struct {
	// Whether PPPoE authentication is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Username for PPPoE authentication.
	Username *string `json:"username,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe - Configuration options for PPPoE.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe struct {
	// Settings for PPPoE Authentication.
	Authentication *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1PppoeAuthentication `json:"authentication,omitempty"`
	// Whether PPPoE is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum string

const (
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnumDynamic GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum = "dynamic"
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnumStatic  GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum = "static"
)

func (e *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum: %s", s)
	}
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers - The nameserver settings for this SVI.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4 - IPv4 settings for static/dynamic mode.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4 struct {
	// IP address and subnet mask when in static mode.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Gateway IP address when in static mode.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4Nameservers `json:"nameservers,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum string

const (
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnumDynamic GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum = "dynamic"
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnumStatic  GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum = "static"
)

func (e *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum: %s", s)
	}
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers - The nameserver settings for this SVI.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6 - IPv6 settings for static/dynamic mode.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6 struct {
	// Static address that will override the one(s) received by SLAAC.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Static gateway that will override the one received by autoconf.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6Nameservers `json:"nameservers,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis - SVI settings by protocol.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis struct {
	// IPv4 settings for static/dynamic mode.
	Ipv4 *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv4 `json:"ipv4,omitempty"`
	// IPv6 settings for static/dynamic mode.
	Ipv6 *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1SvisIpv6 `json:"ipv6,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging - VLAN tagging settings.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging struct {
	// Whether VLAN tagging is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the VLAN to use for VLAN tagging.
	VlanID *int64 `json:"vlanId,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1 - WAN 1 settings.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1 struct {
	// Enable or disable the interface.
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration options for PPPoE.
	Pppoe *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Pppoe `json:"pppoe,omitempty"`
	// SVI settings by protocol.
	Svis *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1Svis `json:"svis,omitempty"`
	// VLAN tagging settings.
	VlanTagging *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1VlanTagging `json:"vlanTagging,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication - Settings for PPPoE Authentication.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication struct {
	// Whether PPPoE authentication is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Username for PPPoE authentication.
	Username *string `json:"username,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe - Configuration options for PPPoE.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe struct {
	// Settings for PPPoE Authentication.
	Authentication *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2PppoeAuthentication `json:"authentication,omitempty"`
	// Whether PPPoE is enabled.
	Enabled *bool `json:"enabled,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum string

const (
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnumDynamic GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum = "dynamic"
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnumStatic  GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum = "static"
)

func (e *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum: %s", s)
	}
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers - The nameserver settings for this SVI.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4 - IPv4 settings for static/dynamic mode.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4 struct {
	// IP address and subnet mask when in static mode.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Gateway IP address when in static mode.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4Nameservers `json:"nameservers,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum - The assignment mode for this SVI. Applies only when PPPoE is disabled.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum string

const (
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnumDynamic GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum = "dynamic"
	GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnumStatic  GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum = "static"
)

func (e *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "dynamic":
		fallthrough
	case "static":
		*e = GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum: %s", s)
	}
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers - The nameserver settings for this SVI.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers struct {
	// Up to 2 nameserver addresses to use, ordered in priority from highest to lowest priority.
	Addresses []string `json:"addresses,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6 - IPv6 settings for static/dynamic mode.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6 struct {
	// Static address that will override the one(s) received by SLAAC.
	Address *string `json:"address,omitempty"`
	// The assignment mode for this SVI. Applies only when PPPoE is disabled.
	AssignmentMode *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6AssignmentModeEnum `json:"assignmentMode,omitempty"`
	// Static gateway that will override the one received by autoconf.
	Gateway *string `json:"gateway,omitempty"`
	// The nameserver settings for this SVI.
	Nameservers *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6Nameservers `json:"nameservers,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis - SVI settings by protocol.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis struct {
	// IPv4 settings for static/dynamic mode.
	Ipv4 *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv4 `json:"ipv4,omitempty"`
	// IPv6 settings for static/dynamic mode.
	Ipv6 *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2SvisIpv6 `json:"ipv6,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging - VLAN tagging settings.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging struct {
	// Whether VLAN tagging is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// The ID of the VLAN to use for VLAN tagging.
	VlanID *int64 `json:"vlanId,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2 - WAN 2 settings.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2 struct {
	// Enable or disable the interface.
	Enabled *bool `json:"enabled,omitempty"`
	// Configuration options for PPPoE.
	Pppoe *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Pppoe `json:"pppoe,omitempty"`
	// SVI settings by protocol.
	Svis *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2Svis `json:"svis,omitempty"`
	// VLAN tagging settings.
	VlanTagging *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2VlanTagging `json:"vlanTagging,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSONInterfaces - Interface settings.
type GetDeviceApplianceUplinksSettings200ApplicationJSONInterfaces struct {
	// WAN 1 settings.
	Wan1 *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan1 `json:"wan1,omitempty"`
	// WAN 2 settings.
	Wan2 *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfacesWan2 `json:"wan2,omitempty"`
}

// GetDeviceApplianceUplinksSettings200ApplicationJSON - Successful operation
type GetDeviceApplianceUplinksSettings200ApplicationJSON struct {
	// Interface settings.
	Interfaces *GetDeviceApplianceUplinksSettings200ApplicationJSONInterfaces `json:"interfaces,omitempty"`
}

type GetDeviceApplianceUplinksSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetDeviceApplianceUplinksSettings200ApplicationJSONObject *GetDeviceApplianceUplinksSettings200ApplicationJSON
}
