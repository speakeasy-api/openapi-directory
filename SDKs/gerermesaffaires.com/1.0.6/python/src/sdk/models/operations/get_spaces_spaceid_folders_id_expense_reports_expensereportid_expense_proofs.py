"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import expenseproof as shared_expenseproof
from enum import Enum
from typing import Optional

class GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsStatusEnum(str, Enum):
    r"""Status of the expense proof"""
    R = 'R'
    W = 'W'
    V = 'V'


@dataclasses.dataclass
class GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsRequest:
    
    expense_report_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'expenseReportId', 'style': 'simple', 'explode': False }})
    r"""Id of the expense report"""  
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Date', 'style': 'form', 'explode': True }})
    r"""Date of the documents (YYYY or YYYYMM or YYYYMMDD)"""  
    folder_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FolderDate', 'style': 'form', 'explode': True }})
    r"""Date of upload of the document (YYYY or YYYYMM or YYYYMMDD)"""  
    status: Optional[GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Status', 'style': 'form', 'explode': True }})
    r"""Status of the expense proof"""  
    

@dataclasses.dataclass
class GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_spaces_space_id_folders_id_expense_reports_expense_report_id_expense_proofs_200_application_json_all_ofs: Optional[list[shared_expenseproof.ExpenseProof]] = dataclasses.field(default=None)
    r"""A list of expense proof of the folder (if the folder is social the PersonId is also returned)"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    