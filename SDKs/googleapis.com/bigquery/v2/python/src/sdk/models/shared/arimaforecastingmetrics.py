"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import arimafittingmetrics as shared_arimafittingmetrics
from ..shared import arimaorder as shared_arimaorder
from ..shared import arimasinglemodelforecastingmetrics as shared_arimasinglemodelforecastingmetrics
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ArimaForecastingMetricsSeasonalPeriodsEnum(str, Enum):
    SEASONAL_PERIOD_TYPE_UNSPECIFIED = 'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
    NO_SEASONALITY = 'NO_SEASONALITY'
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    QUARTERLY = 'QUARTERLY'
    YEARLY = 'YEARLY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ArimaForecastingMetrics:
    r"""Model evaluation metrics for ARIMA forecasting models."""
    
    arima_fitting_metrics: Optional[list[shared_arimafittingmetrics.ArimaFittingMetrics]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arimaFittingMetrics'), 'exclude': lambda f: f is None }})
    r"""Arima model fitting metrics."""  
    arima_single_model_forecasting_metrics: Optional[list[shared_arimasinglemodelforecastingmetrics.ArimaSingleModelForecastingMetrics]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arimaSingleModelForecastingMetrics'), 'exclude': lambda f: f is None }})
    r"""Repeated as there can be many metric sets (one for each model) in auto-arima and the large-scale case."""  
    has_drift: Optional[list[bool]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasDrift'), 'exclude': lambda f: f is None }})
    r"""Whether Arima model fitted with drift or not. It is always false when d is not 1."""  
    non_seasonal_order: Optional[list[shared_arimaorder.ArimaOrder]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonSeasonalOrder'), 'exclude': lambda f: f is None }})
    r"""Non-seasonal order."""  
    seasonal_periods: Optional[list[ArimaForecastingMetricsSeasonalPeriodsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seasonalPeriods'), 'exclude': lambda f: f is None }})
    r"""Seasonal periods. Repeated because multiple periods are supported for one time series."""  
    time_series_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesId'), 'exclude': lambda f: f is None }})
    r"""Id to differentiate different time series for the large-scale case."""  
    