/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Criterion } from "./criterion";
import { Expose, Transform } from "class-transformer";

/**
 * Contains information about an archive rule.
 */
export class ArchiveRuleSummary extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata({ elemType: Criterion })
  @Expose({ name: "filter" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Criterion> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Criterion);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  filter: Record<string, Criterion>;

  @SpeakeasyMetadata()
  @Expose({ name: "ruleName" })
  ruleName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updatedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt: Date;
}
