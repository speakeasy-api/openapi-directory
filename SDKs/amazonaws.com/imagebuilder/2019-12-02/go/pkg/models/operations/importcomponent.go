// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ImportComponentHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// ImportComponentRequestBodyFormatEnum - The format of the resource that you want to import as a component.
type ImportComponentRequestBodyFormatEnum string

const (
	ImportComponentRequestBodyFormatEnumShell ImportComponentRequestBodyFormatEnum = "SHELL"
)

func (e *ImportComponentRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SHELL":
		*e = ImportComponentRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportComponentRequestBodyFormatEnum: %s", s)
	}
}

// ImportComponentRequestBodyPlatformEnum - The platform of the component.
type ImportComponentRequestBodyPlatformEnum string

const (
	ImportComponentRequestBodyPlatformEnumWindows ImportComponentRequestBodyPlatformEnum = "Windows"
	ImportComponentRequestBodyPlatformEnumLinux   ImportComponentRequestBodyPlatformEnum = "Linux"
)

func (e *ImportComponentRequestBodyPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Windows":
		fallthrough
	case "Linux":
		*e = ImportComponentRequestBodyPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportComponentRequestBodyPlatformEnum: %s", s)
	}
}

// ImportComponentRequestBodyTypeEnum - The type of the component denotes whether the component is used to build the image, or only to test it.
type ImportComponentRequestBodyTypeEnum string

const (
	ImportComponentRequestBodyTypeEnumBuild ImportComponentRequestBodyTypeEnum = "BUILD"
	ImportComponentRequestBodyTypeEnumTest  ImportComponentRequestBodyTypeEnum = "TEST"
)

func (e *ImportComponentRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BUILD":
		fallthrough
	case "TEST":
		*e = ImportComponentRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportComponentRequestBodyTypeEnum: %s", s)
	}
}

type ImportComponentRequestBody struct {
	// The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
	ChangeDescription *string `json:"changeDescription,omitempty"`
	// The idempotency token of the component.
	ClientToken string `json:"clientToken"`
	// The data of the component. Used to specify the data inline. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
	Data *string `json:"data,omitempty"`
	// The description of the component. Describes the contents of the component.
	Description *string `json:"description,omitempty"`
	// The format of the resource that you want to import as a component.
	Format ImportComponentRequestBodyFormatEnum `json:"format"`
	// The ID of the KMS key that should be used to encrypt this component.
	KmsKeyID *string `json:"kmsKeyId,omitempty"`
	//  The name of the component.
	Name string `json:"name"`
	// The platform of the component.
	Platform ImportComponentRequestBodyPlatformEnum `json:"platform"`
	// <p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Filtering:</b> With semantic versioning, you have the flexibility to use wildcards (x) to specify the most recent versions or nodes when selecting the base image or components for your recipe. When you use a wildcard in any node, all nodes to the right of the first wildcard must also be wildcards.</p> </note>
	SemanticVersion string `json:"semanticVersion"`
	// The tags of the component.
	Tags map[string]string `json:"tags,omitempty"`
	// The type of the component denotes whether the component is used to build the image, or only to test it.
	Type ImportComponentRequestBodyTypeEnum `json:"type"`
	// The uri of the component. Must be an Amazon S3 URL and the requester must have permission to access the Amazon S3 bucket. If you use Amazon S3, you can specify component content up to your service quota. Either <code>data</code> or <code>uri</code> can be used to specify the data within the component.
	URI *string `json:"uri,omitempty"`
}

type ImportComponentRequest struct {
	Headers ImportComponentHeaders
	Request ImportComponentRequestBody `request:"mediaType=application/json"`
}

type ImportComponentResponse struct {
	// CallRateLimitExceededException
	CallRateLimitExceededException interface{}
	// ClientException
	ClientException interface{}
	ContentType     string
	// ForbiddenException
	ForbiddenException interface{}
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// Success
	ImportComponentResponse *shared.ImportComponentResponse
	// InvalidParameterCombinationException
	InvalidParameterCombinationException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// InvalidVersionNumberException
	InvalidVersionNumberException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
}
