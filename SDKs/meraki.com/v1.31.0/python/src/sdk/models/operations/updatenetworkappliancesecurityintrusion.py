"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum(str, Enum):
    r"""Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved"""
    BALANCED = 'balanced'
    CONNECTIVITY = 'connectivity'
    SECURITY = 'security'

class UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum(str, Enum):
    r"""Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)"""
    DETECTION = 'detection'
    DISABLED = 'disabled'
    PREVENTION = 'prevention'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSecurityIntrusionRequestBodyProtectedNetworks:
    r"""Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode"""
    
    excluded_cidr: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excludedCidr'), 'exclude': lambda f: f is None }})
    r"""list of IP addresses or subnets being excluded from protection (required if 'useDefault' is false)"""  
    included_cidr: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includedCidr'), 'exclude': lambda f: f is None }})
    r"""list of IP addresses or subnets being protected (required if 'useDefault' is false)"""  
    use_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDefault'), 'exclude': lambda f: f is None }})
    r"""true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkApplianceSecurityIntrusionRequestBody:
    
    ids_rulesets: Optional[UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idsRulesets'), 'exclude': lambda f: f is None }})
    r"""Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved"""  
    mode: Optional[UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)"""  
    protected_networks: Optional[UpdateNetworkApplianceSecurityIntrusionRequestBodyProtectedNetworks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protectedNetworks'), 'exclude': lambda f: f is None }})
    r"""Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode"""  
    

@dataclasses.dataclass
class UpdateNetworkApplianceSecurityIntrusionRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateNetworkApplianceSecurityIntrusionRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkApplianceSecurityIntrusionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_appliance_security_intrusion_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    