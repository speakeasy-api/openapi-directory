// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ListDeviceEventsRequest struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The unique identifier of the device.
	DeviceID string `pathParam:"style=simple,explode=false,name=deviceId"`
	// The start date for the device event query, in ISO8061 format. For example,
	//  2018-03-28T15:45:12.880Z
	//
	FromTimeStamp time.Time `queryParam:"style=form,explode=true,name=fromTimeStamp"`
	// The maximum number of results to return per request. If not set, a default value of
	//  100 is used.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// The token to retrieve the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	// The end date for the device event query, in ISO8061 format. For example,
	//  2018-03-28T15:45:12.880Z
	//
	ToTimeStamp time.Time `queryParam:"style=form,explode=true,name=toTimeStamp"`
}

type ListDeviceEventsResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListDeviceEventsResponse *shared.ListDeviceEventsResponse
	// RangeNotSatisfiableException
	RangeNotSatisfiableException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
