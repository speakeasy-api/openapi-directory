"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import migrationeffort_enum as shared_migrationeffort_enum
from ..shared import platformdifference_enum as shared_platformdifference_enum
from ..shared import savingsopportunity as shared_savingsopportunity
from ..shared import utilizationmetric as shared_utilizationmetric
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceRecommendationOption:
    r"""Describes a recommendation option for an Amazon EC2 instance."""
    
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})  
    migration_effort: Optional[shared_migrationeffort_enum.MigrationEffortEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('migrationEffort'), 'exclude': lambda f: f is None }})  
    performance_risk: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceRisk'), 'exclude': lambda f: f is None }})  
    platform_differences: Optional[list[shared_platformdifference_enum.PlatformDifferenceEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformDifferences'), 'exclude': lambda f: f is None }})  
    projected_utilization_metrics: Optional[list[shared_utilizationmetric.UtilizationMetric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('projectedUtilizationMetrics'), 'exclude': lambda f: f is None }})  
    rank: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank'), 'exclude': lambda f: f is None }})  
    savings_opportunity: Optional[shared_savingsopportunity.SavingsOpportunity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingsOpportunity'), 'exclude': lambda f: f is None }})  
    