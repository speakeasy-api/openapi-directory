"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GetPayeesPayeeBankAccountsPayeeCreatedByEnum(str, Enum):
    r"""The creation source of the payee."""
    CUSTOMER = 'CUSTOMER'
    LODGEMENT = 'LODGEMENT'
    DIRECT_DEBIT = 'DIRECT DEBIT'
    OPEN_BANKING = 'OPEN BANKING'
    FIRE_OPEN_PAYMENT = 'FIRE OPEN PAYMENT'
    FIRE_DIRECT = 'FIRE DIRECT'

class GetPayeesPayeeBankAccountsPayeeCurrencyCodeEnum(str, Enum):
    r"""The three letter code for the currency - either `EUR` or `GBP`."""
    EUR = 'EUR'
    GBP = 'GBP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayeesPayeeBankAccountsPayeeCurrency:
    r"""The currency."""
    
    code: Optional[GetPayeesPayeeBankAccountsPayeeCurrencyCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The three letter code for the currency - either `EUR` or `GBP`."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The name of the currency"""  
    
class GetPayeesPayeeBankAccountsPayeeStatusEnum(str, Enum):
    r"""The status of the payee. Only payees in LIVE status can be selected as a destination account for an outgoing payment.
      * 'CREATED' - The payee has been set-up via Bank Transfer Received, Direct Debit, or Open Banking. This payee must be converted to LIVE status to select as a destination account for an outgoing payment.
      * 'LIVE' - The payee can be selected as a destination account for an outgoing payment.
      * 'CLOSED'
      * 'ARCHIVED' - The payee has been deleted and must be added again to be selected as a destination account for an outgoing payment.
    """
    CREATED = 'CREATED'
    LIVE = 'LIVE'
    CLOSED = 'CLOSED'
    ARCHIVED = 'ARCHIVED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayeesPayeeBankAccountsPayee:
    
    account_holder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolderName'), 'exclude': lambda f: f is None }})
    r"""The name on the payee bank account."""  
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountName'), 'exclude': lambda f: f is None }})
    r"""The alias attributed to the payee, usually set by the user when creating the payee."""  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""The Account Number of the account if currency is GBP."""  
    bic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bic'), 'exclude': lambda f: f is None }})
    r"""The BIC of the account if currency is EUR."""  
    created_by: Optional[GetPayeesPayeeBankAccountsPayeeCreatedByEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdBy'), 'exclude': lambda f: f is None }})
    r"""The creation source of the payee."""  
    currency: Optional[GetPayeesPayeeBankAccountsPayeeCurrency] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency."""  
    date_created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateCreated'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date the payee was created. ISO Date Time."""  
    iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iban'), 'exclude': lambda f: f is None }})
    r"""The IBAN of the account if currency is EUR."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Identifier for the fire.com payee bank account (assigned by fire.com)."""  
    nsc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nsc'), 'exclude': lambda f: f is None }})
    r"""The Sort Code of the account if currency is GBP."""  
    status: Optional[GetPayeesPayeeBankAccountsPayeeStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the payee. Only payees in LIVE status can be selected as a destination account for an outgoing payment.
      * 'CREATED' - The payee has been set-up via Bank Transfer Received, Direct Debit, or Open Banking. This payee must be converted to LIVE status to select as a destination account for an outgoing payment.
      * 'LIVE' - The payee can be selected as a destination account for an outgoing payment.
      * 'CLOSED'
      * 'ARCHIVED' - The payee has been deleted and must be added again to be selected as a destination account for an outgoing payment.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPayeesPayeeBankAccounts:
    r"""An array of Payee Bank Accounts"""
    
    funding_sources: Optional[list[GetPayeesPayeeBankAccountsPayee]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundingSources'), 'exclude': lambda f: f is None }})  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})
    r"""The total number of payees in the list."""  
    

@dataclasses.dataclass
class GetPayeesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    payee_bank_accounts: Optional[GetPayeesPayeeBankAccounts] = dataclasses.field(default=None)
    r"""An array of Payee Bank Accounts"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    