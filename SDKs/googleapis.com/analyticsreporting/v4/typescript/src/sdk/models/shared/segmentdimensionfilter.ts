/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * The operator to use to match the dimension with the expressions.
 */
export enum SegmentDimensionFilterOperatorEnum {
  OperatorUnspecified = "OPERATOR_UNSPECIFIED",
  Regexp = "REGEXP",
  BeginsWith = "BEGINS_WITH",
  EndsWith = "ENDS_WITH",
  Partial = "PARTIAL",
  Exact = "EXACT",
  InList = "IN_LIST",
  NumericLessThan = "NUMERIC_LESS_THAN",
  NumericGreaterThan = "NUMERIC_GREATER_THAN",
  NumericBetween = "NUMERIC_BETWEEN",
}

/**
 * Dimension filter specifies the filtering options on a dimension.
 */
export class SegmentDimensionFilter extends SpeakeasyBase {
  /**
   * Should the match be case sensitive, ignored for `IN_LIST` operator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "caseSensitive" })
  caseSensitive?: boolean;

  /**
   * Name of the dimension for which the filter is being applied.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimensionName" })
  dimensionName?: string;

  /**
   * The list of expressions, only the first element is used for all operators
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expressions" })
  expressions?: string[];

  /**
   * Maximum comparison values for `BETWEEN` match type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxComparisonValue" })
  maxComparisonValue?: string;

  /**
   * Minimum comparison values for `BETWEEN` match type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minComparisonValue" })
  minComparisonValue?: string;

  /**
   * The operator to use to match the dimension with the expressions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operator" })
  operator?: SegmentDimensionFilterOperatorEnum;
}
