// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SMSMessageRequestBodyOutputCaseEnum - The output case style
type SMSMessageRequestBodyOutputCaseEnum string

const (
	SMSMessageRequestBodyOutputCaseEnumCamel SMSMessageRequestBodyOutputCaseEnum = "camel"
)

func (e *SMSMessageRequestBodyOutputCaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "camel":
		*e = SMSMessageRequestBodyOutputCaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SMSMessageRequestBodyOutputCaseEnum: %s", s)
	}
}

type SMSMessageRequestBody struct {
	// ISO 2-letter country code, assume numbers are based in this country. <br>If not set numbers are assumed to be in international format (with or without the leading + sign)
	CountryCode *string `form:"name=country-code"`
	// Limit the total number of SMS allowed to the supplied phone number, if the limit is reached error code 14 will be returned (the default is no limit)
	Limit *int `form:"name=limit"`
	// Set the TTL in number of days that the 'limit' option will remember a phone number (the default is 1 day and the maximum is 365 days)
	LimitTTL *int `form:"name=limit-ttl"`
	// The SMS message to send. Messages are truncated to a maximum of 150 characters for ASCII content OR 70 characters for UTF content
	Message string `form:"name=message"`
	// The phone number to send a message to
	Number string `form:"name=number"`
	// The output case style
	OutputCase *SMSMessageRequestBodyOutputCaseEnum `form:"name=output-case"`
}

type SMSMessageRequest struct {
	Request *SMSMessageRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
}

type SMSMessageResponse struct {
	// Your API request has been rejected. Check error code for details
	APIError           *shared.APIError
	ContentType        string
	SMSMessageResponse *shared.SMSMessageResponse
	StatusCode         int
	RawResponse        *http.Response
}
