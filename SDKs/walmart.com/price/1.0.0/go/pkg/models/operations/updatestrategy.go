// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum string

const (
	UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnumUnit       UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum = "UNIT"
	UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnumPercentage UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum = "PERCENTAGE"
)

func (e UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum) ToPointer() *UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum {
	return &e
}

func (e *UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNIT":
		fallthrough
	case "PERCENTAGE":
		*e = UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum: %v", v)
	}
}

type UpdateStrategyRequestBodyStrategiesStrategyTypeEnum string

const (
	UpdateStrategyRequestBodyStrategiesStrategyTypeEnumBuyBoxPrice      UpdateStrategyRequestBodyStrategiesStrategyTypeEnum = "Buy Box Price"
	UpdateStrategyRequestBodyStrategiesStrategyTypeEnumExternalPrice    UpdateStrategyRequestBodyStrategiesStrategyTypeEnum = "External Price"
	UpdateStrategyRequestBodyStrategiesStrategyTypeEnumCompetitivePrice UpdateStrategyRequestBodyStrategiesStrategyTypeEnum = "Competitive Price"
)

func (e UpdateStrategyRequestBodyStrategiesStrategyTypeEnum) ToPointer() *UpdateStrategyRequestBodyStrategiesStrategyTypeEnum {
	return &e
}

func (e *UpdateStrategyRequestBodyStrategiesStrategyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Buy Box Price":
		fallthrough
	case "External Price":
		fallthrough
	case "Competitive Price":
		*e = UpdateStrategyRequestBodyStrategiesStrategyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStrategyRequestBodyStrategiesStrategyTypeEnum: %v", v)
	}
}

type UpdateStrategyRequestBodyStrategies struct {
	AdjustmentType  *UpdateStrategyRequestBodyStrategiesAdjustmentTypeEnum `json:"adjustmentType,omitempty"`
	AdjustmentValue *float64                                               `json:"adjustmentValue,omitempty"`
	StrategyType    *UpdateStrategyRequestBodyStrategiesStrategyTypeEnum   `json:"strategyType,omitempty"`
}

// UpdateStrategyRequestBody - The request body will have the strategy related information
type UpdateStrategyRequestBody struct {
	// Status of item on promotions to be enable on repricer
	EnableRepricerForPromotion *bool `json:"enableRepricerForPromotion,omitempty"`
	// Status of the Strategy Collection
	Enabled *bool `json:"enabled,omitempty"`
	// Name of the Strategy Collection
	RepricerStrategy *string `json:"repricerStrategy,omitempty"`
	// Strategies
	Strategies []UpdateStrategyRequestBodyStrategies `json:"strategies,omitempty"`
}

type UpdateStrategyRequest struct {
	// The request body will have the strategy related information
	RequestBody UpdateStrategyRequestBody `request:"mediaType=application/json"`
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
	// Automatically added
	StrategyCollectionID string `pathParam:"style=simple,explode=false,name=strategyCollectionId"`
}

type UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum string

const (
	UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnumUnit       UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum = "UNIT"
	UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnumPercentage UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum = "PERCENTAGE"
)

func (e UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum) ToPointer() *UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum {
	return &e
}

func (e *UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "UNIT":
		fallthrough
	case "PERCENTAGE":
		*e = UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum: %v", v)
	}
}

type UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum string

const (
	UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnumBuyBoxPrice      UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum = "Buy Box Price"
	UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnumExternalPrice    UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum = "External Price"
	UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnumCompetitivePrice UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum = "Competitive Price"
)

func (e UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum) ToPointer() *UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum {
	return &e
}

func (e *UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Buy Box Price":
		fallthrough
	case "External Price":
		fallthrough
	case "Competitive Price":
		*e = UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum: %v", v)
	}
}

type UpdateStrategy200ApplicationJSONStrategies struct {
	AdjustmentType  *UpdateStrategy200ApplicationJSONStrategiesAdjustmentTypeEnum `json:"adjustmentType,omitempty"`
	AdjustmentValue *float64                                                      `json:"adjustmentValue,omitempty"`
	StrategyType    *UpdateStrategy200ApplicationJSONStrategiesStrategyTypeEnum   `json:"strategyType,omitempty"`
}

// UpdateStrategy200ApplicationJSON - Successful Operation
type UpdateStrategy200ApplicationJSON struct {
	EnableRepricerForPromotion *bool                                        `json:"enableRepricerForPromotion,omitempty"`
	Enabled                    *bool                                        `json:"enabled,omitempty"`
	RepricerStrategy           *string                                      `json:"repricerStrategy,omitempty"`
	Strategies                 []UpdateStrategy200ApplicationJSONStrategies `json:"strategies,omitempty"`
	StrategyCollectionID       *string                                      `json:"strategyCollectionId,omitempty"`
}

type UpdateStrategyResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	UpdateStrategy200ApplicationJSONObject *UpdateStrategy200ApplicationJSON
}
