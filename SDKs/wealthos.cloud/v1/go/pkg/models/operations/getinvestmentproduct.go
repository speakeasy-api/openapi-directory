// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetInvestmentProductSecurity struct {
	APISecretKey shared.SchemeAPISecretKey `security:"scheme,type=apiKey,subtype=header"`
}

// GetInvestmentProductCategoryIDEnum - Investment Product Category Id
type GetInvestmentProductCategoryIDEnum string

const (
	GetInvestmentProductCategoryIDEnumFunds GetInvestmentProductCategoryIDEnum = "funds"
)

func (e *GetInvestmentProductCategoryIDEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "funds":
		*e = GetInvestmentProductCategoryIDEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestmentProductCategoryIDEnum: %s", s)
	}
}

type GetInvestmentProductPathParams struct {
	// Investment Product Category Id
	CategoryID GetInvestmentProductCategoryIDEnum `pathParam:"style=simple,explode=false,name=category_id"`
	// Investment Product Id
	InvestmentProductID string `pathParam:"style=simple,explode=false,name=investment_product_id"`
}

type GetInvestmentProductHeaders struct {
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

type GetInvestmentProductRequest struct {
	PathParams GetInvestmentProductPathParams
	Headers    GetInvestmentProductHeaders
	Security   GetInvestmentProductSecurity
}

// GetInvestmentProduct500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetInvestmentProduct500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestmentProduct429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetInvestmentProduct429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestmentProduct404ApplicationJSON - The specified resource was not found
type GetInvestmentProduct404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestmentProduct403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetInvestmentProduct403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetInvestmentProduct401ApplicationJSON - You do not have permissions to access this resource.
type GetInvestmentProduct401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum string

const (
	GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnumGia GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum = "gia"
	GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnumIsa GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum = "isa"
)

func (e *GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gia":
		fallthrough
	case "isa":
		*e = GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum: %s", s)
	}
}

// GetInvestmentProduct200ApplicationJSONAssetTypeEnum - Category of the investment product
type GetInvestmentProduct200ApplicationJSONAssetTypeEnum string

const (
	GetInvestmentProduct200ApplicationJSONAssetTypeEnumFunds GetInvestmentProduct200ApplicationJSONAssetTypeEnum = "funds"
)

func (e *GetInvestmentProduct200ApplicationJSONAssetTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "funds":
		*e = GetInvestmentProduct200ApplicationJSONAssetTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestmentProduct200ApplicationJSONAssetTypeEnum: %s", s)
	}
}

// GetInvestmentProduct200ApplicationJSONIDTypeEnum - The type of id that is populated as investment_product_id
type GetInvestmentProduct200ApplicationJSONIDTypeEnum string

const (
	GetInvestmentProduct200ApplicationJSONIDTypeEnumIsin       GetInvestmentProduct200ApplicationJSONIDTypeEnum = "ISIN"
	GetInvestmentProduct200ApplicationJSONIDTypeEnumCusip      GetInvestmentProduct200ApplicationJSONIDTypeEnum = "CUSIP"
	GetInvestmentProduct200ApplicationJSONIDTypeEnumFundServID GetInvestmentProduct200ApplicationJSONIDTypeEnum = "FundServID"
)

func (e *GetInvestmentProduct200ApplicationJSONIDTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ISIN":
		fallthrough
	case "CUSIP":
		fallthrough
	case "FundServID":
		*e = GetInvestmentProduct200ApplicationJSONIDTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestmentProduct200ApplicationJSONIDTypeEnum: %s", s)
	}
}

// GetInvestmentProduct200ApplicationJSONStatusEnum - Status of the investment product
type GetInvestmentProduct200ApplicationJSONStatusEnum string

const (
	GetInvestmentProduct200ApplicationJSONStatusEnumActive   GetInvestmentProduct200ApplicationJSONStatusEnum = "active"
	GetInvestmentProduct200ApplicationJSONStatusEnumInactive GetInvestmentProduct200ApplicationJSONStatusEnum = "inactive"
)

func (e *GetInvestmentProduct200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = GetInvestmentProduct200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetInvestmentProduct200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetInvestmentProduct200ApplicationJSON - success
type GetInvestmentProduct200ApplicationJSON struct {
	// Supplies additional custom information of an investment product
	AdditionalProviderDetails map[string]interface{} `json:"additional_provider_details"`
	// Financial products this investment product is applicable for
	ApplicableFinancialProducts []GetInvestmentProduct200ApplicationJSONApplicableFinancialProductsEnum `json:"applicable_financial_products,omitempty"`
	// Sub-category of the investment product
	AssetSubType *string `json:"asset_sub_type,omitempty"`
	// Category of the investment product
	AssetType GetInvestmentProduct200ApplicationJSONAssetTypeEnum `json:"asset_type"`
	// The final price for the day of the investment product
	ClosePrice *string `json:"close_price,omitempty"`
	// Exact day the close_price was recorded for the investment product
	ClosePriceOnDate *string    `json:"close_price_on_date,omitempty"`
	CreatedAt        *time.Time `json:"created_at,omitempty"`
	// currency of the investment product in ISO 4217 format
	Currency *string `json:"currency,omitempty"`
	// Sub-type of investment product. Relevant for investment products of type fund only
	FundAssetType *string `json:"fund_asset_type,omitempty"`
	// Fund code identifier. Relevant for investment products of type fund
	FundCode *string `json:"fund_code,omitempty"`
	// The type of id that is populated as investment_product_id
	IDType GetInvestmentProduct200ApplicationJSONIDTypeEnum `json:"id_type"`
	// Unique identifier of an investment product
	InvestmentProductID string `json:"investment_product_id"`
	// Investment product name
	Name *string `json:"name,omitempty"`
	// Method used to calculate the investment product price
	PricingMethod string `json:"pricing_method"`
	// settlement date offset of investment product
	SettlementDateOffset *float64 `json:"settlement_date_offset,omitempty"`
	// Status of the investment product
	Status    *GetInvestmentProduct200ApplicationJSONStatusEnum `json:"status,omitempty"`
	UpdatedAt *time.Time                                        `json:"updated_at,omitempty"`
}

type GetInvestmentProductResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	GetInvestmentProduct200ApplicationJSONObject *GetInvestmentProduct200ApplicationJSON
	// You do not have permissions to access this resource.
	GetInvestmentProduct401ApplicationJSONObject *GetInvestmentProduct401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetInvestmentProduct403ApplicationJSONObject *GetInvestmentProduct403ApplicationJSON
	// The specified resource was not found
	GetInvestmentProduct404ApplicationJSONObject *GetInvestmentProduct404ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetInvestmentProduct429ApplicationJSONObject *GetInvestmentProduct429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetInvestmentProduct500ApplicationJSONObject *GetInvestmentProduct500ApplicationJSON
}
