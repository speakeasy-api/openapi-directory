"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import codegenconfigurationnode as shared_codegenconfigurationnode
from ..shared import connectionslist as shared_connectionslist
from ..shared import executionclass_enum as shared_executionclass_enum
from ..shared import executionproperty as shared_executionproperty
from ..shared import jobcommand as shared_jobcommand
from ..shared import notificationproperty as shared_notificationproperty
from ..shared import sourcecontroldetails as shared_sourcecontroldetails
from ..shared import workertype_enum as shared_workertype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobUpdate:
    r"""Specifies information used to update an existing job definition. The previous job definition is completely overwritten by this information."""
    
    allocated_capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllocatedCapacity'), 'exclude': lambda f: f is None }})  
    code_gen_configuration_nodes: Optional[dict[str, shared_codegenconfigurationnode.CodeGenConfigurationNode]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CodeGenConfigurationNodes'), 'exclude': lambda f: f is None }})  
    command: Optional[shared_jobcommand.JobCommand] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Command'), 'exclude': lambda f: f is None }})  
    connections: Optional[shared_connectionslist.ConnectionsList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Connections'), 'exclude': lambda f: f is None }})  
    default_arguments: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DefaultArguments'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    execution_class: Optional[shared_executionclass_enum.ExecutionClassEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionClass'), 'exclude': lambda f: f is None }})  
    execution_property: Optional[shared_executionproperty.ExecutionProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExecutionProperty'), 'exclude': lambda f: f is None }})  
    glue_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GlueVersion'), 'exclude': lambda f: f is None }})  
    log_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogUri'), 'exclude': lambda f: f is None }})  
    max_capacity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxCapacity'), 'exclude': lambda f: f is None }})  
    max_retries: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxRetries'), 'exclude': lambda f: f is None }})  
    non_overridable_arguments: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NonOverridableArguments'), 'exclude': lambda f: f is None }})  
    notification_property: Optional[shared_notificationproperty.NotificationProperty] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationProperty'), 'exclude': lambda f: f is None }})  
    number_of_workers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumberOfWorkers'), 'exclude': lambda f: f is None }})  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role'), 'exclude': lambda f: f is None }})  
    security_configuration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityConfiguration'), 'exclude': lambda f: f is None }})  
    source_control_details: Optional[shared_sourcecontroldetails.SourceControlDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceControlDetails'), 'exclude': lambda f: f is None }})  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timeout'), 'exclude': lambda f: f is None }})  
    worker_type: Optional[shared_workertype_enum.WorkerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkerType'), 'exclude': lambda f: f is None }})  
    