/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RsaMfaServerDetail - Added a new RSA server.
 */
public class RsaMfaServerDetail {
    /**
     * The name of a Cloud Authentication Service policy. This setting is only required for RSA Cloud Service configurations.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assurancePolicyName")
    public String assurancePolicyName;

    public RsaMfaServerDetail withAssurancePolicyName(String assurancePolicyName) {
        this.assurancePolicyName = assurancePolicyName;
        return this;
    }
    
    /**
     * The base url for RSA REST API server including the host name and port number. A valid input looks like https://&lt;SECURID_ACCESS_HOST &gt;:&lt;REST_API_PORT&gt;/mfa/v1_1.
     * 
     */
    @JsonProperty("baseUrl")
    public String baseUrl;

    public RsaMfaServerDetail withBaseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    
    /**
     * ID corresponding to the imported certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateId")
    public String certificateId;

    public RsaMfaServerDetail withCertificateId(String certificateId) {
        this.certificateId = certificateId;
        return this;
    }
    
    /**
     * A unique name to identify the client. When the client is configured to use RSA Authentication Manager, the client ID must match an authentication agent name.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    public String clientId;

    public RsaMfaServerDetail withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Unique server identifier.
     */
    @JsonProperty("id")
    public String id;

    public RsaMfaServerDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * LDAP attribute to query the username used for performing MFA.
     * 
     */
    @JsonProperty("ldapUsernameAttribute")
    public String ldapUsernameAttribute;

    public RsaMfaServerDetail withLdapUsernameAttribute(String ldapUsernameAttribute) {
        this.ldapUsernameAttribute = ldapUsernameAttribute;
        return this;
    }
    
    /**
     * Specifies the name to identify MFA server configuration.
     * 
     */
    @JsonProperty("name")
    public String name;

    public RsaMfaServerDetail withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Specifies a number of seconds to wait for server response to a given authentication method.
     * 
     */
    @JsonProperty("timeout")
    public Integer timeout;

    public RsaMfaServerDetail withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }
    
    public RsaMfaServerDetail(@JsonProperty("baseUrl") String baseUrl, @JsonProperty("id") String id, @JsonProperty("ldapUsernameAttribute") String ldapUsernameAttribute, @JsonProperty("name") String name, @JsonProperty("timeout") Integer timeout) {
        this.baseUrl = baseUrl;
        this.id = id;
        this.ldapUsernameAttribute = ldapUsernameAttribute;
        this.name = name;
        this.timeout = timeout;
  }
}
