/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DateTimeJsonResponse - the current time for the timezone requested in JSON format
 */
public class DateTimeJsonResponse {
    /**
     * the abbreviated name of the timezone
     */
    @JsonProperty("abbreviation")
    public String abbreviation;

    public DateTimeJsonResponse withAbbreviation(String abbreviation) {
        this.abbreviation = abbreviation;
        return this;
    }
    
    /**
     * the IP of the client making the request
     */
    @JsonProperty("client_ip")
    public String clientIp;

    public DateTimeJsonResponse withClientIp(String clientIp) {
        this.clientIp = clientIp;
        return this;
    }
    
    /**
     * an ISO8601-valid string representing the current, local date/time
     */
    @JsonProperty("datetime")
    public String datetime;

    public DateTimeJsonResponse withDatetime(String datetime) {
        this.datetime = datetime;
        return this;
    }
    
    /**
     * current day number of the week, where sunday is 0
     */
    @JsonProperty("day_of_week")
    public Long dayOfWeek;

    public DateTimeJsonResponse withDayOfWeek(Long dayOfWeek) {
        this.dayOfWeek = dayOfWeek;
        return this;
    }
    
    /**
     * ordinal date of the current year
     */
    @JsonProperty("day_of_year")
    public Long dayOfYear;

    public DateTimeJsonResponse withDayOfYear(Long dayOfYear) {
        this.dayOfYear = dayOfYear;
        return this;
    }
    
    /**
     * flag indicating whether the local time is in daylight savings
     */
    @JsonProperty("dst")
    public Boolean dst;

    public DateTimeJsonResponse withDst(Boolean dst) {
        this.dst = dst;
        return this;
    }
    
    /**
     * an ISO8601-valid string representing the datetime when daylight savings started for this timezone
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dst_from")
    public String dstFrom;

    public DateTimeJsonResponse withDstFrom(String dstFrom) {
        this.dstFrom = dstFrom;
        return this;
    }
    
    /**
     * the difference in seconds between the current local time and daylight saving time for the location
     */
    @JsonProperty("dst_offset")
    public Long dstOffset;

    public DateTimeJsonResponse withDstOffset(Long dstOffset) {
        this.dstOffset = dstOffset;
        return this;
    }
    
    /**
     * an ISO8601-valid string representing the datetime when daylight savings will end for this timezone
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dst_until")
    public String dstUntil;

    public DateTimeJsonResponse withDstUntil(String dstUntil) {
        this.dstUntil = dstUntil;
        return this;
    }
    
    /**
     * the difference in seconds between the current local time and the time in UTC, excluding any daylight saving difference (see dst_offset)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_offset")
    public Long rawOffset;

    public DateTimeJsonResponse withRawOffset(Long rawOffset) {
        this.rawOffset = rawOffset;
        return this;
    }
    
    /**
     * timezone in `Area/Location` or `Area/Location/Region` format
     */
    @JsonProperty("timezone")
    public String timezone;

    public DateTimeJsonResponse withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * number of seconds since the Epoch
     */
    @JsonProperty("unixtime")
    public Long unixtime;

    public DateTimeJsonResponse withUnixtime(Long unixtime) {
        this.unixtime = unixtime;
        return this;
    }
    
    /**
     * an ISO8601-valid string representing the current date/time in UTC
     */
    @JsonProperty("utc_datetime")
    public String utcDatetime;

    public DateTimeJsonResponse withUtcDatetime(String utcDatetime) {
        this.utcDatetime = utcDatetime;
        return this;
    }
    
    /**
     * an ISO8601-valid string representing the offset from UTC
     */
    @JsonProperty("utc_offset")
    public String utcOffset;

    public DateTimeJsonResponse withUtcOffset(String utcOffset) {
        this.utcOffset = utcOffset;
        return this;
    }
    
    /**
     * the current week number
     */
    @JsonProperty("week_number")
    public Long weekNumber;

    public DateTimeJsonResponse withWeekNumber(Long weekNumber) {
        this.weekNumber = weekNumber;
        return this;
    }
    
    public DateTimeJsonResponse(@JsonProperty("abbreviation") String abbreviation, @JsonProperty("client_ip") String clientIp, @JsonProperty("datetime") String datetime, @JsonProperty("day_of_week") Long dayOfWeek, @JsonProperty("day_of_year") Long dayOfYear, @JsonProperty("dst") Boolean dst, @JsonProperty("dst_offset") Long dstOffset, @JsonProperty("timezone") String timezone, @JsonProperty("unixtime") Long unixtime, @JsonProperty("utc_datetime") String utcDatetime, @JsonProperty("utc_offset") String utcOffset, @JsonProperty("week_number") Long weekNumber) {
        this.abbreviation = abbreviation;
        this.clientIp = clientIp;
        this.datetime = datetime;
        this.dayOfWeek = dayOfWeek;
        this.dayOfYear = dayOfYear;
        this.dst = dst;
        this.dstOffset = dstOffset;
        this.timezone = timezone;
        this.unixtime = unixtime;
        this.utcDatetime = utcDatetime;
        this.utcOffset = utcOffset;
        this.weekNumber = weekNumber;
  }
}
