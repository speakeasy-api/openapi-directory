// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListAttachedIndicesQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListAttachedIndicesXAmzConsistencyLevelEnum - The consistency level to use for this operation.
type ListAttachedIndicesXAmzConsistencyLevelEnum string

const (
	ListAttachedIndicesXAmzConsistencyLevelEnumSerializable ListAttachedIndicesXAmzConsistencyLevelEnum = "SERIALIZABLE"
	ListAttachedIndicesXAmzConsistencyLevelEnumEventual     ListAttachedIndicesXAmzConsistencyLevelEnum = "EVENTUAL"
)

func (e *ListAttachedIndicesXAmzConsistencyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SERIALIZABLE":
		fallthrough
	case "EVENTUAL":
		*e = ListAttachedIndicesXAmzConsistencyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAttachedIndicesXAmzConsistencyLevelEnum: %s", s)
	}
}

type ListAttachedIndicesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The consistency level to use for this operation.
	XAmzConsistencyLevel *ListAttachedIndicesXAmzConsistencyLevelEnum `header:"style=simple,explode=false,name=x-amz-consistency-level"`
	// The ARN of the directory.
	XAmzDataPartition string `header:"style=simple,explode=false,name=x-amz-data-partition"`
}

// ListAttachedIndicesRequestBodyTargetReference - The reference that identifies an object.
type ListAttachedIndicesRequestBodyTargetReference struct {
	Selector *string `json:"Selector,omitempty"`
}

type ListAttachedIndicesRequestBody struct {
	// The maximum number of results to retrieve.
	MaxResults *int64 `json:"MaxResults,omitempty"`
	// The pagination token.
	NextToken *string `json:"NextToken,omitempty"`
	// The reference that identifies an object.
	TargetReference ListAttachedIndicesRequestBodyTargetReference `json:"TargetReference"`
}

type ListAttachedIndicesRequest struct {
	QueryParams ListAttachedIndicesQueryParams
	Headers     ListAttachedIndicesHeaders
	Request     ListAttachedIndicesRequestBody `request:"mediaType=application/json"`
}

type ListAttachedIndicesResponse struct {
	// AccessDeniedException
	AccessDeniedException *shared.AccessDeniedException
	ContentType           string
	// DirectoryNotEnabledException
	DirectoryNotEnabledException *shared.DirectoryNotEnabledException
	// InternalServiceException
	InternalServiceException *shared.InternalServiceException
	// InvalidArnException
	InvalidArnException *shared.InvalidArnException
	// LimitExceededException
	LimitExceededException *shared.LimitExceededException
	// Success
	ListAttachedIndicesResponse *shared.ListAttachedIndicesResponse
	StatusCode                  int
	RawResponse                 *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException *shared.ResourceNotFoundException
	// RetryableConflictException
	RetryableConflictException *shared.RetryableConflictException
	// ValidationException
	ValidationException *shared.ValidationException
}
