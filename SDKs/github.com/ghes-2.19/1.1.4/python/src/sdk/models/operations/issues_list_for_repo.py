"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import direction_enum as shared_direction_enum
from ..shared import issue_simple as shared_issue_simple
from ..shared import validation_error as shared_validation_error
from datetime import datetime
from enum import Enum
from typing import Optional

class IssuesListForRepoSortEnum(str, Enum):
    r"""What to sort results by. Can be either `created`, `updated`, `comments`."""
    CREATED = 'created'
    UPDATED = 'updated'
    COMMENTS = 'comments'

class IssuesListForRepoStateEnum(str, Enum):
    r"""Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`."""
    OPEN = 'open'
    CLOSED = 'closed'
    ALL = 'all'


@dataclasses.dataclass
class IssuesListForRepoRequest:
    
    owner: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner', 'style': 'simple', 'explode': False }})  
    repo: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo', 'style': 'simple', 'explode': False }})  
    assignee: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'assignee', 'style': 'form', 'explode': True }})
    r"""Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user."""  
    creator: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'creator', 'style': 'form', 'explode': True }})
    r"""The user that created the issue."""  
    direction: Optional[shared_direction_enum.DirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""One of `asc` (ascending) or `desc` (descending)."""  
    labels: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'labels', 'style': 'form', 'explode': True }})
    r"""A list of comma separated label names. Example: `bug,ui,@high`"""  
    mentioned: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'mentioned', 'style': 'form', 'explode': True }})
    r"""A user that's mentioned in the issue."""  
    milestone: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'milestone', 'style': 'form', 'explode': True }})
    r"""If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number of the results to fetch."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Results per page (max 100)"""  
    since: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'since', 'style': 'form', 'explode': True }})
    r"""Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`."""  
    sort: Optional[IssuesListForRepoSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""What to sort results by. Can be either `created`, `updated`, `comments`."""  
    state: Optional[IssuesListForRepoStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`."""  
    

@dataclasses.dataclass
class IssuesListForRepoResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Moved permanently"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    issue_simples: Optional[list[shared_issue_simple.IssueSimple]] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    