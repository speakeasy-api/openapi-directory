// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type KkidShareGetSecurity struct {
	AuthKey shared.SchemeAuthKey `security:"scheme,type=apiKey,subtype=header"`
}

// KkidShareGetLinkEnum - Link to share
type KkidShareGetLinkEnum string

const (
	KkidShareGetLinkEnumHTTPSKhomeKumpeappsComPortalWishListPhp    KkidShareGetLinkEnum = "https://khome.kumpeapps.com/portal/wish-list.php"
	KkidShareGetLinkEnumHTTPSKhomeKumpeappsComPortalChoresTodayPhp KkidShareGetLinkEnum = "https://khome.kumpeapps.com/portal/chores-today.php"
)

func (e *KkidShareGetLinkEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "https://khome.kumpeapps.com/portal/wish-list.php":
		fallthrough
	case "https://khome.kumpeapps.com/portal/chores-today.php":
		*e = KkidShareGetLinkEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidShareGetLinkEnum: %s", s)
	}
}

// KkidShareGetScopeEnum - Authentication scope for link
type KkidShareGetScopeEnum string

const (
	KkidShareGetScopeEnumWishList      KkidShareGetScopeEnum = "WishList"
	KkidShareGetScopeEnumWishListAdmin KkidShareGetScopeEnum = "WishListAdmin"
	KkidShareGetScopeEnumChores        KkidShareGetScopeEnum = "Chores"
	KkidShareGetScopeEnumChoresAdmin   KkidShareGetScopeEnum = "ChoresAdmin"
)

func (e *KkidShareGetScopeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WishList":
		fallthrough
	case "WishListAdmin":
		fallthrough
	case "Chores":
		fallthrough
	case "ChoresAdmin":
		*e = KkidShareGetScopeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidShareGetScopeEnum: %s", s)
	}
}

// KkidShareGetScope2Enum - Authentication scope for link
type KkidShareGetScope2Enum string

const (
	KkidShareGetScope2EnumWishList      KkidShareGetScope2Enum = "WishList"
	KkidShareGetScope2EnumWishListAdmin KkidShareGetScope2Enum = "WishListAdmin"
	KkidShareGetScope2EnumChores        KkidShareGetScope2Enum = "Chores"
	KkidShareGetScope2EnumChoresAdmin   KkidShareGetScope2Enum = "ChoresAdmin"
)

func (e *KkidShareGetScope2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WishList":
		fallthrough
	case "WishListAdmin":
		fallthrough
	case "Chores":
		fallthrough
	case "ChoresAdmin":
		*e = KkidShareGetScope2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidShareGetScope2Enum: %s", s)
	}
}

// KkidShareGetScope3Enum - Authentication scope for link
type KkidShareGetScope3Enum string

const (
	KkidShareGetScope3EnumWishList      KkidShareGetScope3Enum = "WishList"
	KkidShareGetScope3EnumWishListAdmin KkidShareGetScope3Enum = "WishListAdmin"
	KkidShareGetScope3EnumChores        KkidShareGetScope3Enum = "Chores"
	KkidShareGetScope3EnumChoresAdmin   KkidShareGetScope3Enum = "ChoresAdmin"
)

func (e *KkidShareGetScope3Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WishList":
		fallthrough
	case "WishListAdmin":
		fallthrough
	case "Chores":
		fallthrough
	case "ChoresAdmin":
		*e = KkidShareGetScope3Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidShareGetScope3Enum: %s", s)
	}
}

// KkidShareGetScope4Enum - Authentication scope for link
type KkidShareGetScope4Enum string

const (
	KkidShareGetScope4EnumWishList      KkidShareGetScope4Enum = "WishList"
	KkidShareGetScope4EnumWishListAdmin KkidShareGetScope4Enum = "WishListAdmin"
	KkidShareGetScope4EnumChores        KkidShareGetScope4Enum = "Chores"
	KkidShareGetScope4EnumChoresAdmin   KkidShareGetScope4Enum = "ChoresAdmin"
)

func (e *KkidShareGetScope4Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WishList":
		fallthrough
	case "WishListAdmin":
		fallthrough
	case "Chores":
		fallthrough
	case "ChoresAdmin":
		*e = KkidShareGetScope4Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for KkidShareGetScope4Enum: %s", s)
	}
}

type KkidShareGetQueryParams struct {
	// Link to share
	Link KkidShareGetLinkEnum `queryParam:"style=form,explode=true,name=link"`
	// User ID that the link should be authenticated to
	LinkUserID string `queryParam:"style=form,explode=true,name=linkUserId"`
	// Authentication scope for link
	Scope KkidShareGetScopeEnum `queryParam:"style=form,explode=true,name=scope"`
	// Authentication scope for link
	Scope2 *KkidShareGetScope2Enum `queryParam:"style=form,explode=true,name=scope2"`
	// Authentication scope for link
	Scope3 *KkidShareGetScope3Enum `queryParam:"style=form,explode=true,name=scope3"`
	// Authentication scope for link
	Scope4 *KkidShareGetScope4Enum `queryParam:"style=form,explode=true,name=scope4"`
}

type KkidShareGetRequest struct {
	QueryParams KkidShareGetQueryParams
	Security    KkidShareGetSecurity
}

type KkidShareGetResponse struct {
	// authenticated link created
	TwoHundredAndOneShare *shared.TwoHundredAndOneShare
	ContentType           string
	StatusCode            int
	RawResponse           *http.Response
}
