"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import subresourcetype_enum as shared_subresourcetype_enum
from ..shared import summarizedattackvector as shared_summarizedattackvector
from ..shared import summarizedcounter as shared_summarizedcounter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubResourceSummary:
    r"""The attack information for the specified SubResource."""
    
    attack_vectors: Optional[list[shared_summarizedattackvector.SummarizedAttackVector]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttackVectors'), 'exclude': lambda f: f is None }})  
    counters: Optional[list[shared_summarizedcounter.SummarizedCounter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Counters'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_subresourcetype_enum.SubResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    