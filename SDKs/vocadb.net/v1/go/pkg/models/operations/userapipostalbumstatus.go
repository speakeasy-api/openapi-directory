// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UserAPIPostAlbumStatusPathParams struct {
	// ID of the album to be rated.
	AlbumID int `pathParam:"style=simple,explode=false,name=albumId"`
}

// UserAPIPostAlbumStatusCollectionStatusEnum - Collection status. Possible values are Nothing, Wishlisted, Ordered and Owned.
type UserAPIPostAlbumStatusCollectionStatusEnum string

const (
	UserAPIPostAlbumStatusCollectionStatusEnumNothing    UserAPIPostAlbumStatusCollectionStatusEnum = "Nothing"
	UserAPIPostAlbumStatusCollectionStatusEnumWishlisted UserAPIPostAlbumStatusCollectionStatusEnum = "Wishlisted"
	UserAPIPostAlbumStatusCollectionStatusEnumOrdered    UserAPIPostAlbumStatusCollectionStatusEnum = "Ordered"
	UserAPIPostAlbumStatusCollectionStatusEnumOwned      UserAPIPostAlbumStatusCollectionStatusEnum = "Owned"
)

func (e *UserAPIPostAlbumStatusCollectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "Wishlisted":
		fallthrough
	case "Ordered":
		fallthrough
	case "Owned":
		*e = UserAPIPostAlbumStatusCollectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIPostAlbumStatusCollectionStatusEnum: %s", s)
	}
}

// UserAPIPostAlbumStatusMediaTypeEnum - Album media type. Possible values are PhysicalDisc, DigitalDownload and Other.
type UserAPIPostAlbumStatusMediaTypeEnum string

const (
	UserAPIPostAlbumStatusMediaTypeEnumPhysicalDisc    UserAPIPostAlbumStatusMediaTypeEnum = "PhysicalDisc"
	UserAPIPostAlbumStatusMediaTypeEnumDigitalDownload UserAPIPostAlbumStatusMediaTypeEnum = "DigitalDownload"
	UserAPIPostAlbumStatusMediaTypeEnumOther           UserAPIPostAlbumStatusMediaTypeEnum = "Other"
)

func (e *UserAPIPostAlbumStatusMediaTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PhysicalDisc":
		fallthrough
	case "DigitalDownload":
		fallthrough
	case "Other":
		*e = UserAPIPostAlbumStatusMediaTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAPIPostAlbumStatusMediaTypeEnum: %s", s)
	}
}

type UserAPIPostAlbumStatusQueryParams struct {
	// Collection status. Possible values are Nothing, Wishlisted, Ordered and Owned.
	CollectionStatus UserAPIPostAlbumStatusCollectionStatusEnum `queryParam:"style=form,explode=true,name=collectionStatus"`
	// Album media type. Possible values are PhysicalDisc, DigitalDownload and Other.
	MediaType UserAPIPostAlbumStatusMediaTypeEnum `queryParam:"style=form,explode=true,name=mediaType"`
	// Rating to be given. Possible values are between 0 and 5.
	Rating int `queryParam:"style=form,explode=true,name=rating"`
}

type UserAPIPostAlbumStatusRequest struct {
	PathParams  UserAPIPostAlbumStatusPathParams
	QueryParams UserAPIPostAlbumStatusQueryParams
}

type UserAPIPostAlbumStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	UserAPIPostAlbumStatus200ApplicationJSONString *string
	// OK
	UserAPIPostAlbumStatus200ApplicationJavascriptString *string
	// OK
	UserAPIPostAlbumStatus200ApplicationJsonpString *string
	// OK
	UserAPIPostAlbumStatus200ApplicationXMLString *string
	// OK
	UserAPIPostAlbumStatus200TextJSONString *string
	// OK
	UserAPIPostAlbumStatus200TextJavascriptString *string
	// OK
	UserAPIPostAlbumStatus200TextXMLString *string
}
