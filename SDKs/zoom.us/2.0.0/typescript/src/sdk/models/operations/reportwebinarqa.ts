/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ReportWebinarQASecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class ReportWebinarQARequest extends SpeakeasyBase {
  /**
   * The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: string;
}

export class ReportWebinarQa200ApplicationXMLQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Given answer.
   */
  @SpeakeasyMetadata()
  answer?: string;

  /**
   * Asked question.
   */
  @SpeakeasyMetadata()
  question?: string;
}

export class ReportWebinarQa200ApplicationXMLQuestions extends SpeakeasyBase {
  /**
   * Participant email.
   */
  @SpeakeasyMetadata()
  email?: string;

  /**
   * Participant display name.<br>
   *
   * @remarks
   *
   * If anonymous [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&A without providing their name, the value of the `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Array of questions from user.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarQa200ApplicationXMLQuestionsQuestionDetails,
  })
  questionDetails?: ReportWebinarQa200ApplicationXMLQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Webinar Q&A report returned.<br>
 * This is only available for paid account:{accountId}.<br>
 * A report cannot be generated for this account because this account has not subscribed to a webinar plan.
 */
export class ReportWebinarQa200ApplicationXML extends SpeakeasyBase {
  /**
   * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Array of webinar question objects.
   */
  @SpeakeasyMetadata({ elemType: ReportWebinarQa200ApplicationXMLQuestions })
  questions?: ReportWebinarQa200ApplicationXMLQuestions[];

  /**
   * Webinar start time.
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Webinar UUID. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

export class ReportWebinarQa200ApplicationJSONQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Given answer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answer" })
  answer?: string;

  /**
   * Asked question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "question" })
  question?: string;
}

export class ReportWebinarQa200ApplicationJSONQuestions extends SpeakeasyBase {
  /**
   * Participant email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Participant display name.<br>
   *
   * @remarks
   *
   * If anonymous [Q&A](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) option is enabled and if a participant submits the Q&A without providing their name, the value of the `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Array of questions from user.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarQa200ApplicationJSONQuestionsQuestionDetails,
  })
  @Expose({ name: "question_details" })
  @Type(() => ReportWebinarQa200ApplicationJSONQuestionsQuestionDetails)
  questionDetails?: ReportWebinarQa200ApplicationJSONQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Webinar Q&A report returned.<br>
 * This is only available for paid account:{accountId}.<br>
 * A report cannot be generated for this account because this account has not subscribed to a webinar plan.
 */
export class ReportWebinarQa200ApplicationJSON extends SpeakeasyBase {
  /**
   * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Array of webinar question objects.
   */
  @SpeakeasyMetadata({ elemType: ReportWebinarQa200ApplicationJSONQuestions })
  @Expose({ name: "questions" })
  @Type(() => ReportWebinarQa200ApplicationJSONQuestions)
  questions?: ReportWebinarQa200ApplicationJSONQuestions[];

  /**
   * Webinar start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Webinar UUID. Each Webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class ReportWebinarQAResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Webinar Q&A report returned.<br>
   * This is only available for paid account:{accountId}.<br>
   * A report cannot be generated for this account because this account has not subscribed to a webinar plan.
   */
  @SpeakeasyMetadata()
  reportWebinarQA200ApplicationJSONObject?: ReportWebinarQa200ApplicationJSON;
}
