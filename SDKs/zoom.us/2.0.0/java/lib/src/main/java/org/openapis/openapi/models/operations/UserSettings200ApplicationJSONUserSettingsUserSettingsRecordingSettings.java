/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings {
    /**
     * Ask host to confirm the disclaimer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ask_host_to_confirm_disclaimer")
    public Boolean askHostToConfirmDisclaimer;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withAskHostToConfirmDisclaimer(Boolean askHostToConfirmDisclaimer) {
        this.askHostToConfirmDisclaimer = askHostToConfirmDisclaimer;
        return this;
    }
    
    /**
     * This field can be used if `recording_disclaimer` is set to true. This field indicates whether or not you would like to ask participants for consent when a recording starts. The value can be one of the following:&lt;br&gt;
     * * `true`: Ask participants for consent when a recording starts. &lt;br&gt;
     * * `false`: Do not ask participants for consent when a recording starts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ask_participants_to_consent_disclaimer")
    public Boolean askParticipantsToConsentDisclaimer;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withAskParticipantsToConsentDisclaimer(Boolean askParticipantsToConsentDisclaimer) {
        this.askParticipantsToConsentDisclaimer = askParticipantsToConsentDisclaimer;
        return this;
    }
    
    /**
     * Auto delete cloud recordings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_delete_cmr")
    public Boolean autoDeleteCmr;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withAutoDeleteCmr(Boolean autoDeleteCmr) {
        this.autoDeleteCmr = autoDeleteCmr;
        return this;
    }
    
    /**
     * A specified number of days of auto delete cloud recordings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_delete_cmr_days")
    public Long autoDeleteCmrDays;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withAutoDeleteCmrDays(Long autoDeleteCmrDays) {
        this.autoDeleteCmrDays = autoDeleteCmrDays;
        return this;
    }
    
    /**
     * Automatic recording:&lt;br&gt;`local` - Record on local.&lt;br&gt;`cloud` - Record on cloud.&lt;br&gt;`none` - Disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_recording")
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum autoRecording;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withAutoRecording(UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsAutoRecordingEnum autoRecording) {
        this.autoRecording = autoRecording;
        return this;
    }
    
    /**
     * Cloud recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloud_recording")
    public Boolean cloudRecording;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withCloudRecording(Boolean cloudRecording) {
        this.cloudRecording = cloudRecording;
        return this;
    }
    
    /**
     * Host can pause/stop the auto recording in the cloud.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_pause_stop_recording")
    public Boolean hostPauseStopRecording;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withHostPauseStopRecording(Boolean hostPauseStopRecording) {
        this.hostPauseStopRecording = hostPauseStopRecording;
        return this;
    }
    
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_address_access_control")
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl ipAddressAccessControl;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withIpAddressAccessControl(UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsIpAddressAccessControl ipAddressAccessControl) {
        this.ipAddressAccessControl = ipAddressAccessControl;
        return this;
    }
    
    /**
     * Local recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("local_recording")
    public Boolean localRecording;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withLocalRecording(Boolean localRecording) {
        this.localRecording = localRecording;
        return this;
    }
    
    /**
     * Record an audio only file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_audio_file")
    public Boolean recordAudioFile;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withRecordAudioFile(Boolean recordAudioFile) {
        this.recordAudioFile = recordAudioFile;
        return this;
    }
    
    /**
     * Record the gallery view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_gallery_view")
    public Boolean recordGalleryView;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withRecordGalleryView(Boolean recordGalleryView) {
        this.recordGalleryView = recordGalleryView;
        return this;
    }
    
    /**
     * Record the active speaker view.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_speaker_view")
    public Boolean recordSpeakerView;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withRecordSpeakerView(Boolean recordSpeakerView) {
        this.recordSpeakerView = recordSpeakerView;
        return this;
    }
    
    /**
     * Audio transcript.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_audio_transcript")
    public Boolean recordingAudioTranscript;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withRecordingAudioTranscript(Boolean recordingAudioTranscript) {
        this.recordingAudioTranscript = recordingAudioTranscript;
        return this;
    }
    
    /**
     * Show a disclaimer to participants before a recording starts
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_disclaimer")
    public Boolean recordingDisclaimer;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withRecordingDisclaimer(Boolean recordingDisclaimer) {
        this.recordingDisclaimer = recordingDisclaimer;
        return this;
    }
    
    /**
     * This object represents the minimum passcode requirements set for recordings via Account Recording Settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_password_requirement")
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement recordingPasswordRequirement;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withRecordingPasswordRequirement(UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettingsRecordingPasswordRequirement recordingPasswordRequirement) {
        this.recordingPasswordRequirement = recordingPasswordRequirement;
        return this;
    }
    
    /**
     * Save chat text from the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("save_chat_text")
    public Boolean saveChatText;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withSaveChatText(Boolean saveChatText) {
        this.saveChatText = saveChatText;
        return this;
    }
    
    /**
     * Show timestamp on video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_timestamp")
    public Boolean showTimestamp;
    public UserSettings200ApplicationJSONUserSettingsUserSettingsRecordingSettings withShowTimestamp(Boolean showTimestamp) {
        this.showTimestamp = showTimestamp;
        return this;
    }
    
}
