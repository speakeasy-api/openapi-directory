"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import eventfilter as shared_eventfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DisjunctiveMatchStatement:
    r"""Represents a Disjunctive Match Statement resource, which is a conjunction (and) of disjunctive (or) boolean statements."""
    
    event_filters: Optional[list[shared_eventfilter.EventFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventFilters'), 'exclude': lambda f: f is None }})
    r"""The event filters contained within this disjunctive match statement."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kind of resource this is, in this case dfareporting#disjunctiveMatchStatement."""  
    