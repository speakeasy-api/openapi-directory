"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ConfirmationOfFundsServicePIIS:
    r"""Confirmation of Funds Service (PIIS) returns a confirmation of funds request at the ASPSP."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def check_availability_of_funds(self, request: operations.CheckAvailabilityOfFundsRequest, security: operations.CheckAvailabilityOfFundsSecurity) -> operations.CheckAvailabilityOfFundsResponse:
        r"""Confirmation of funds request
        Creates a confirmation of funds request at the ASPSP. Checks whether a specific amount is available at point of time of the request on an account linked to a given tuple card issuer(TPP)/card number, or addressed by IBAN and TPP respectively.
        If the related extended services are used a conditional Consent-ID is contained in the header. This field is contained but commented out in this specification.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/funds-confirmations'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "confirmation_of_funds", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckAvailabilityOfFundsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CheckAvailabilityOfFunds200ApplicationJSON])
                res.check_availability_of_funds_200_application_json_object = out
        elif http_res.status_code == 400:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error400NGAIS])
                res.error400_ng_ais = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error400AIS])
                res.error400_ais = out
        elif http_res.status_code == 401:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401NGPIIS])
                res.error401_ng_piis = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error401PIIS])
                res.error401_piis = out
        elif http_res.status_code == 403:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error403NGPIIS])
                res.error403_ng_piis = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error403PIIS])
                res.error403_piis = out
        elif http_res.status_code == 404:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error404NGPIIS])
                res.error404_ng_piis = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error404PIIS])
                res.error404_piis = out
        elif http_res.status_code == 405:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error405NGPIIS])
                res.error405_ng_piis = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error405PIIS])
                res.error405_piis = out
        elif http_res.status_code in [406, 408, 415, 429, 500, 503]:
            res.headers = http_res.headers
            
        elif http_res.status_code == 409:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error409NGPIIS])
                res.error409_ng_piis = out
            if utils.match_content_type(content_type, 'application/problem+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error409PIIS])
                res.error409_piis = out

        return res

    