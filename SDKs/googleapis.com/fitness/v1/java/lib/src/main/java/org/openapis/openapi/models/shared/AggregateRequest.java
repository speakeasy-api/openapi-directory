/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AggregateRequest - Next id: 10
 */
public class AggregateRequest {
    /**
     * The specification of data to be aggregated. At least one aggregateBy spec must be provided. All data that is specified will be aggregated using the same bucketing criteria. There will be one dataset in the response for every aggregateBy spec.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregateBy")
    public AggregateBy[] aggregateBy;

    public AggregateRequest withAggregateBy(AggregateBy[] aggregateBy) {
        this.aggregateBy = aggregateBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucketByActivitySegment")
    public BucketByActivity bucketByActivitySegment;

    public AggregateRequest withBucketByActivitySegment(BucketByActivity bucketByActivitySegment) {
        this.bucketByActivitySegment = bucketByActivitySegment;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucketByActivityType")
    public BucketByActivity bucketByActivityType;

    public AggregateRequest withBucketByActivityType(BucketByActivity bucketByActivityType) {
        this.bucketByActivityType = bucketByActivityType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucketBySession")
    public BucketBySession bucketBySession;

    public AggregateRequest withBucketBySession(BucketBySession bucketBySession) {
        this.bucketBySession = bucketBySession;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucketByTime")
    public BucketByTime bucketByTime;

    public AggregateRequest withBucketByTime(BucketByTime bucketByTime) {
        this.bucketByTime = bucketByTime;
        return this;
    }
    
    /**
     * The end of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive. The maximum allowed difference between start_time_millis // and end_time_millis is 7776000000 (roughly 90 days).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endTimeMillis")
    public String endTimeMillis;

    public AggregateRequest withEndTimeMillis(String endTimeMillis) {
        this.endTimeMillis = endTimeMillis;
        return this;
    }
    
    /**
     * DO NOT POPULATE THIS FIELD. It is ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filteredDataQualityStandard")
    public AggregateRequestFilteredDataQualityStandardEnum[] filteredDataQualityStandard;

    public AggregateRequest withFilteredDataQualityStandard(AggregateRequestFilteredDataQualityStandardEnum[] filteredDataQualityStandard) {
        this.filteredDataQualityStandard = filteredDataQualityStandard;
        return this;
    }
    
    /**
     * The start of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startTimeMillis")
    public String startTimeMillis;

    public AggregateRequest withStartTimeMillis(String startTimeMillis) {
        this.startTimeMillis = startTimeMillis;
        return this;
    }
    
    public AggregateRequest(){}
}
