"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class General:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def name_type(self, request: operations.NameTypeRequest, security: operations.NameTypeSecurity) -> operations.NameTypeResponse:
        r"""Infer the likely type of a proper noun (personal name, brand name, place name etc.)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NameTypeRequest, base_url, '/api2/json/nameType/{properNoun}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NameTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProperNounCategorizedOut])
                res.proper_noun_categorized_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def name_type_batch(self, request: shared.BatchNameIn, security: operations.NameTypeBatchSecurity) -> operations.NameTypeBatchResponse:
        r"""Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/nameTypeBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NameTypeBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchProperNounCategorizedOut])
                res.batch_proper_noun_categorized_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def name_type_geo(self, request: operations.NameTypeGeoRequest, security: operations.NameTypeGeoSecurity) -> operations.NameTypeGeoResponse:
        r"""Infer the likely type of a proper noun (personal name, brand name, place name etc.)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.NameTypeGeoRequest, base_url, '/api2/json/nameTypeGeo/{properNoun}/{countryIso2}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NameTypeGeoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProperNounCategorizedOut])
                res.proper_noun_categorized_out = out
        elif http_res.status_code in [401, 403]:
            pass

        return res

    def name_type_geo_batch(self, request: shared.BatchNameGeoIn, security: operations.NameTypeGeoBatchSecurity) -> operations.NameTypeGeoBatchResponse:
        r"""Infer the likely common type of up to 100 proper nouns (personal name, brand name, place name etc.)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api2/json/nameTypeGeoBatch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NameTypeGeoBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchProperNounCategorizedOut])
                res.batch_proper_noun_categorized_out = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    