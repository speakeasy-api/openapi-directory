<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class QuoteImages 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a quote image. The user needs to be the owner of the quote image to be able to delete it.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageResponse
     */
	public function deleteQuoteImage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a background image file. The user needs to be the owner of the background image to be able to delete it.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundResponse
     */
	public function deleteQuoteImageBackground(
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/background');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageBackgroundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete a font file. The user needs to be the owner of the font to be able to delete it.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontResponse
     */
	public function deleteQuoteImageFont(
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/font');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteQuoteImageFontResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. `TODO`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageResponse
     */
	public function getQuoteImage(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteImageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Lists background images in your private collection. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListResponse
     */
	public function getQuoteImageBackgroundList(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/background/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Searches for a background image with a given tag. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchResponse
     */
	public function getQuoteImageBackgroundSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/background/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageBackgroundSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Lists background images in your private collection. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListResponse
     */
	public function getQuoteImageFontList(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/font/list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Searches for a font with a given tag. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchResponse
     */
	public function getQuoteImageFontSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/font/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageFontSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Gets a Random Quote image. Optional `category` param determines the category of quote used in the image. Optional `author` param gets the quote image of a given author. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchResponse
     */
	public function getQuoteImageSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetQuoteImageSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add an image for use later as a quote background image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundResponse
     */
	public function postQuoteImageBackground(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/background');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Add a tag to a given Image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddResponse
     */
	public function postQuoteImageBackgroundTagsAdd(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/background/tags/add');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove a tag from a given Image.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveResponse
     */
	public function postQuoteImageBackgroundTagsRemove(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/background/tags/remove');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageBackgroundTagsRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Add a font file for use later in creating a quote image. This is essentially a `PUT` but not many clients handle PUT with binary stream i.e. a file, gracefully.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontResponse
     */
	public function postQuoteImageFont(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/font');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Add a tag to a given font.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddResponse
     */
	public function postQuoteImageFontTagsAdd(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/font/tags/add');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsAddResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove a tag from a given Font.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveResponse
     */
	public function postQuoteImageFontTagsRemove(
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image/font/tags/remove');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostQuoteImageFontTagsRemoveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?!
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutQuoteImageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutQuoteImageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutQuoteImageResponse
     */
	public function putQuoteImage(
        \OpenAPI\OpenAPI\Models\Operations\PutQuoteImageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutQuoteImageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutQuoteImageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/quote/image');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutQuoteImageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutQuoteImageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}