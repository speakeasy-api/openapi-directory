/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Promotion - Represents a promotion. See the following articles for more details. * [Promotions feed specification](https://support.google.com/merchants/answer/2906014) * [Local promotions feed specification](https://support.google.com/merchants/answer/10146130) * [Promotions on Buy on Google product data specification](https://support.google.com/merchants/answer/9173673)
 */
public class Promotion {
    /**
     * Product filter by brand for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand")
    public String[] brand;

    public Promotion withBrand(String[] brand) {
        this.brand = brand;
        return this;
    }
    
    /**
     * Product filter by brand exclusion for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brandExclusion")
    public String[] brandExclusion;

    public Promotion withBrandExclusion(String[] brandExclusion) {
        this.brandExclusion = brandExclusion;
        return this;
    }
    
    /**
     * Required. The content language used as part of the unique identifier. `en` content language is available for all target countries. `fr` content language is available for `CA` and `FR` target countries. `de` content language is available for `DE` target country. `nl` content language is available for `NL` target country. `it` content language is available for `IT` target country. `pt` content language is available for `BR` target country. `ja` content language is available for `JP` target country. `ko` content language is available for `KR` target country.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentLanguage")
    public String contentLanguage;

    public Promotion withContentLanguage(String contentLanguage) {
        this.contentLanguage = contentLanguage;
        return this;
    }
    
    /**
     * Required. Coupon value type for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("couponValueType")
    public PromotionCouponValueTypeEnum couponValueType;

    public Promotion withCouponValueType(PromotionCouponValueTypeEnum couponValueType) {
        this.couponValueType = couponValueType;
        return this;
    }
    
    /**
     * Free gift description for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeGiftDescription")
    public String freeGiftDescription;

    public Promotion withFreeGiftDescription(String freeGiftDescription) {
        this.freeGiftDescription = freeGiftDescription;
        return this;
    }
    
    /**
     * Free gift item ID for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeGiftItemId")
    public String freeGiftItemId;

    public Promotion withFreeGiftItemId(String freeGiftItemId) {
        this.freeGiftItemId = freeGiftItemId;
        return this;
    }
    
    /**
     * The price represented as a number and currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("freeGiftValue")
    public PriceAmount freeGiftValue;

    public Promotion withFreeGiftValue(PriceAmount freeGiftValue) {
        this.freeGiftValue = freeGiftValue;
        return this;
    }
    
    /**
     * Generic redemption code for the promotion. To be used with the `offerType` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("genericRedemptionCode")
    public String genericRedemptionCode;

    public Promotion withGenericRedemptionCode(String genericRedemptionCode) {
        this.genericRedemptionCode = genericRedemptionCode;
        return this;
    }
    
    /**
     * The number of items discounted in the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("getThisQuantityDiscounted")
    public Integer getThisQuantityDiscounted;

    public Promotion withGetThisQuantityDiscounted(Integer getThisQuantityDiscounted) {
        this.getThisQuantityDiscounted = getThisQuantityDiscounted;
        return this;
    }
    
    /**
     * Required. Output only. The REST promotion ID to uniquely identify the promotion. Content API methods that operate on promotions take this as their `promotionId` parameter. The REST ID for a promotion is of the form channel:contentLanguage:targetCountry:promotionId The `channel` field has a value of `"online"`, `"in_store"`, or `"online_in_store"`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Promotion withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Product filter by item group ID for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemGroupId")
    public String[] itemGroupId;

    public Promotion withItemGroupId(String[] itemGroupId) {
        this.itemGroupId = itemGroupId;
        return this;
    }
    
    /**
     * Product filter by item group ID exclusion for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemGroupIdExclusion")
    public String[] itemGroupIdExclusion;

    public Promotion withItemGroupIdExclusion(String[] itemGroupIdExclusion) {
        this.itemGroupIdExclusion = itemGroupIdExclusion;
        return this;
    }
    
    /**
     * Product filter by item ID for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemId")
    public String[] itemId;

    public Promotion withItemId(String[] itemId) {
        this.itemId = itemId;
        return this;
    }
    
    /**
     * Product filter by item ID exclusion for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemIdExclusion")
    public String[] itemIdExclusion;

    public Promotion withItemIdExclusion(String[] itemIdExclusion) {
        this.itemIdExclusion = itemIdExclusion;
        return this;
    }
    
    /**
     * Maximum purchase quantity for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limitQuantity")
    public Integer limitQuantity;

    public Promotion withLimitQuantity(Integer limitQuantity) {
        this.limitQuantity = limitQuantity;
        return this;
    }
    
    /**
     * The price represented as a number and currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limitValue")
    public PriceAmount limitValue;

    public Promotion withLimitValue(PriceAmount limitValue) {
        this.limitValue = limitValue;
        return this;
    }
    
    /**
     * Required. Long title for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longTitle")
    public String longTitle;

    public Promotion withLongTitle(String longTitle) {
        this.longTitle = longTitle;
        return this;
    }
    
    /**
     * The price represented as a number and currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumPurchaseAmount")
    public PriceAmount minimumPurchaseAmount;

    public Promotion withMinimumPurchaseAmount(PriceAmount minimumPurchaseAmount) {
        this.minimumPurchaseAmount = minimumPurchaseAmount;
        return this;
    }
    
    /**
     * Minimum purchase quantity for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumPurchaseQuantity")
    public Integer minimumPurchaseQuantity;

    public Promotion withMinimumPurchaseQuantity(Integer minimumPurchaseQuantity) {
        this.minimumPurchaseQuantity = minimumPurchaseQuantity;
        return this;
    }
    
    /**
     * The price represented as a number and currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moneyBudget")
    public PriceAmount moneyBudget;

    public Promotion withMoneyBudget(PriceAmount moneyBudget) {
        this.moneyBudget = moneyBudget;
        return this;
    }
    
    /**
     * The price represented as a number and currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moneyOffAmount")
    public PriceAmount moneyOffAmount;

    public Promotion withMoneyOffAmount(PriceAmount moneyOffAmount) {
        this.moneyOffAmount = moneyOffAmount;
        return this;
    }
    
    /**
     * Required. Type of the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offerType")
    public PromotionOfferTypeEnum offerType;

    public Promotion withOfferType(PromotionOfferTypeEnum offerType) {
        this.offerType = offerType;
        return this;
    }
    
    /**
     * Order limit for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderLimit")
    public Integer orderLimit;

    public Promotion withOrderLimit(Integer orderLimit) {
        this.orderLimit = orderLimit;
        return this;
    }
    
    /**
     * The percentage discount offered in the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("percentOff")
    public Integer percentOff;

    public Promotion withPercentOff(Integer percentOff) {
        this.percentOff = percentOff;
        return this;
    }
    
    /**
     * Required. Applicability of the promotion to either all products or only specific products.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productApplicability")
    public PromotionProductApplicabilityEnum productApplicability;

    public Promotion withProductApplicability(PromotionProductApplicabilityEnum productApplicability) {
        this.productApplicability = productApplicability;
        return this;
    }
    
    /**
     * Product filter by product type for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productType")
    public String[] productType;

    public Promotion withProductType(String[] productType) {
        this.productType = productType;
        return this;
    }
    
    /**
     * Product filter by product type exclusion for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productTypeExclusion")
    public String[] productTypeExclusion;

    public Promotion withProductTypeExclusion(String[] productTypeExclusion) {
        this.productTypeExclusion = productTypeExclusion;
        return this;
    }
    
    /**
     * Destination ID for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionDestinationIds")
    public String[] promotionDestinationIds;

    public Promotion withPromotionDestinationIds(String[] promotionDestinationIds) {
        this.promotionDestinationIds = promotionDestinationIds;
        return this;
    }
    
    /**
     * String representation of the promotion display dates. Deprecated. Use `promotion_display_time_period` instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionDisplayDates")
    public String promotionDisplayDates;

    public Promotion withPromotionDisplayDates(String promotionDisplayDates) {
        this.promotionDisplayDates = promotionDisplayDates;
        return this;
    }
    
    /**
     * A message that represents a time period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionDisplayTimePeriod")
    public TimePeriod promotionDisplayTimePeriod;

    public Promotion withPromotionDisplayTimePeriod(TimePeriod promotionDisplayTimePeriod) {
        this.promotionDisplayTimePeriod = promotionDisplayTimePeriod;
        return this;
    }
    
    /**
     * String representation of the promotion effective dates. Deprecated. Use `promotion_effective_time_period` instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionEffectiveDates")
    public String promotionEffectiveDates;

    public Promotion withPromotionEffectiveDates(String promotionEffectiveDates) {
        this.promotionEffectiveDates = promotionEffectiveDates;
        return this;
    }
    
    /**
     * A message that represents a time period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionEffectiveTimePeriod")
    public TimePeriod promotionEffectiveTimePeriod;

    public Promotion withPromotionEffectiveTimePeriod(TimePeriod promotionEffectiveTimePeriod) {
        this.promotionEffectiveTimePeriod = promotionEffectiveTimePeriod;
        return this;
    }
    
    /**
     * Required. The user provided promotion ID to uniquely identify the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionId")
    public String promotionId;

    public Promotion withPromotionId(String promotionId) {
        this.promotionId = promotionId;
        return this;
    }
    
    /**
     * The status of the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionStatus")
    public PromotionPromotionStatus promotionStatus;

    public Promotion withPromotionStatus(PromotionPromotionStatus promotionStatus) {
        this.promotionStatus = promotionStatus;
        return this;
    }
    
    /**
     * URL to the page on the merchant's site where the promotion shows. Local Inventory ads promotions throw an error if no promo url is included. URL is used to confirm that the promotion is valid and can be redeemed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("promotionUrl")
    public String promotionUrl;

    public Promotion withPromotionUrl(String promotionUrl) {
        this.promotionUrl = promotionUrl;
        return this;
    }
    
    /**
     * Required. Redemption channel for the promotion. At least one channel is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redemptionChannel")
    public PromotionRedemptionChannelEnum[] redemptionChannel;

    public Promotion withRedemptionChannel(PromotionRedemptionChannelEnum[] redemptionChannel) {
        this.redemptionChannel = redemptionChannel;
        return this;
    }
    
    /**
     * Shipping service names for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shippingServiceNames")
    public String[] shippingServiceNames;

    public Promotion withShippingServiceNames(String[] shippingServiceNames) {
        this.shippingServiceNames = shippingServiceNames;
        return this;
    }
    
    /**
     * Whether the promotion applies to all stores, or only specified stores. Local Inventory ads promotions throw an error if no store applicability is included. An INVALID_ARGUMENT error is thrown if store_applicability is set to ALL_STORES and store_code or score_code_exclusion is set to a value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storeApplicability")
    public PromotionStoreApplicabilityEnum storeApplicability;

    public Promotion withStoreApplicability(PromotionStoreApplicabilityEnum storeApplicability) {
        this.storeApplicability = storeApplicability;
        return this;
    }
    
    /**
     * Store codes to include for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storeCode")
    public String[] storeCode;

    public Promotion withStoreCode(String[] storeCode) {
        this.storeCode = storeCode;
        return this;
    }
    
    /**
     * Store codes to exclude for the promotion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storeCodeExclusion")
    public String[] storeCodeExclusion;

    public Promotion withStoreCodeExclusion(String[] storeCodeExclusion) {
        this.storeCodeExclusion = storeCodeExclusion;
        return this;
    }
    
    /**
     * Required. The target country used as part of the unique identifier. Can be `AU`, `CA`, `DE`, `FR`, `GB`, `IN`, `US`, `BR`, `ES`, `NL`, `JP`, `IT` or `KR`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetCountry")
    public String targetCountry;

    public Promotion withTargetCountry(String targetCountry) {
        this.targetCountry = targetCountry;
        return this;
    }
    
    public Promotion(){}
}
