/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class IdentityProviders {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete the identity provider
   */
  deleteRealmIdentityProviderInstancesAlias(
    req: operations.DeleteRealmIdentityProviderInstancesAliasRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmIdentityProviderInstancesAliasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmIdentityProviderInstancesAliasRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmIdentityProviderInstancesAliasResponse =
        new operations.DeleteRealmIdentityProviderInstancesAliasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Delete a mapper for the identity provider
   */
  deleteRealmIdentityProviderInstancesAliasMappersId(
    req: operations.DeleteRealmIdentityProviderInstancesAliasMappersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmIdentityProviderInstancesAliasMappersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRealmIdentityProviderInstancesAliasMappersIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/mappers/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmIdentityProviderInstancesAliasMappersIdResponse =
        new operations.DeleteRealmIdentityProviderInstancesAliasMappersIdResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get identity providers
   */
  getRealmIdentityProviderInstances(
    req: operations.GetRealmIdentityProviderInstancesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderInstancesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmIdentityProviderInstancesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderInstancesResponse =
        new operations.GetRealmIdentityProviderInstancesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.identityProviderRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.identityProviderRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.IdentityProviderRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get the identity provider
   */
  getRealmIdentityProviderInstancesAlias(
    req: operations.GetRealmIdentityProviderInstancesAliasRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderInstancesAliasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmIdentityProviderInstancesAliasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderInstancesAliasResponse =
        new operations.GetRealmIdentityProviderInstancesAliasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.identityProviderRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.IdentityProviderRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Export public broker configuration for identity provider
   */
  getRealmIdentityProviderInstancesAliasExport(
    req: operations.GetRealmIdentityProviderInstancesAliasExportRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderInstancesAliasExportResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmIdentityProviderInstancesAliasExportRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/export",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderInstancesAliasExportResponse =
        new operations.GetRealmIdentityProviderInstancesAliasExportResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Return object stating whether client Authorization permissions have been initialized or not and a reference
   */
  getRealmIdentityProviderInstancesAliasManagementPermissions(
    req: operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/management/permissions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse =
        new operations.GetRealmIdentityProviderInstancesAliasManagementPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managementPermissionReference = utils.objectToClass(
              httpRes?.data,
              shared.ManagementPermissionReference
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mapper types for identity provider
   */
  getRealmIdentityProviderInstancesAliasMapperTypes(
    req: operations.GetRealmIdentityProviderInstancesAliasMapperTypesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderInstancesAliasMapperTypesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmIdentityProviderInstancesAliasMapperTypesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/mapper-types",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderInstancesAliasMapperTypesResponse =
        new operations.GetRealmIdentityProviderInstancesAliasMapperTypesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get mappers for identity provider
   */
  getRealmIdentityProviderInstancesAliasMappers(
    req: operations.GetRealmIdentityProviderInstancesAliasMappersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderInstancesAliasMappersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmIdentityProviderInstancesAliasMappersRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/mappers",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderInstancesAliasMappersResponse =
        new operations.GetRealmIdentityProviderInstancesAliasMappersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.identityProviderMapperRepresentations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.identityProviderMapperRepresentations = utils.objectToClass(
              httpRes?.data,
              shared.IdentityProviderMapperRepresentation,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get mapper by id for the identity provider
   */
  getRealmIdentityProviderInstancesAliasMappersId(
    req: operations.GetRealmIdentityProviderInstancesAliasMappersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderInstancesAliasMappersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetRealmIdentityProviderInstancesAliasMappersIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/mappers/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderInstancesAliasMappersIdResponse =
        new operations.GetRealmIdentityProviderInstancesAliasMappersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.identityProviderMapperRepresentation = utils.objectToClass(
              httpRes?.data,
              shared.IdentityProviderMapperRepresentation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get identity providers
   */
  getRealmIdentityProviderProvidersProviderId(
    req: operations.GetRealmIdentityProviderProvidersProviderIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmIdentityProviderProvidersProviderIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmIdentityProviderProvidersProviderIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/providers/{provider_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmIdentityProviderProvidersProviderIdResponse =
        new operations.GetRealmIdentityProviderProvidersProviderIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Import identity provider from uploaded JSON file
   */
  postRealmIdentityProviderImportConfig(
    req: operations.PostRealmIdentityProviderImportConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmIdentityProviderImportConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmIdentityProviderImportConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/import-config",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmIdentityProviderImportConfigResponse =
        new operations.PostRealmIdentityProviderImportConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.postRealmIdentityProviderImportConfig2XXApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create a new identity provider
   */
  postRealmIdentityProviderInstances(
    req: operations.PostRealmIdentityProviderInstancesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmIdentityProviderInstancesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostRealmIdentityProviderInstancesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "identityProviderRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmIdentityProviderInstancesResponse =
        new operations.PostRealmIdentityProviderInstancesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Add a mapper to identity provider
   */
  postRealmIdentityProviderInstancesAliasMappers(
    req: operations.PostRealmIdentityProviderInstancesAliasMappersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PostRealmIdentityProviderInstancesAliasMappersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PostRealmIdentityProviderInstancesAliasMappersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/mappers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "identityProviderMapperRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostRealmIdentityProviderInstancesAliasMappersResponse =
        new operations.PostRealmIdentityProviderInstancesAliasMappersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Update the identity provider
   */
  putRealmIdentityProviderInstancesAlias(
    req: operations.PutRealmIdentityProviderInstancesAliasRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmIdentityProviderInstancesAliasResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutRealmIdentityProviderInstancesAliasRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "identityProviderRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmIdentityProviderInstancesAliasResponse =
        new operations.PutRealmIdentityProviderInstancesAliasResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Return object stating whether client Authorization permissions have been initialized or not and a reference
   */
  putRealmIdentityProviderInstancesAliasManagementPermissions(
    req: operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/management/permissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "managementPermissionReference",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse =
        new operations.PutRealmIdentityProviderInstancesAliasManagementPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.managementPermissionReference = utils.objectToClass(
              httpRes?.data,
              shared.ManagementPermissionReference
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update a mapper for the identity provider
   */
  putRealmIdentityProviderInstancesAliasMappersId(
    req: operations.PutRealmIdentityProviderInstancesAliasMappersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutRealmIdentityProviderInstancesAliasMappersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutRealmIdentityProviderInstancesAliasMappersIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/identity-provider/instances/{alias}/mappers/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "identityProviderMapperRepresentation",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutRealmIdentityProviderInstancesAliasMappersIdResponse =
        new operations.PutRealmIdentityProviderInstancesAliasMappersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }
}
