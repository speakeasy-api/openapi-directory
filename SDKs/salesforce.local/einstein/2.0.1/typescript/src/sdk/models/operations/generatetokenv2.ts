/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * specify the authentication method desired
 */
export enum GenerateTokenV2RequestBodyGrantTypeEnum {
  UrnIetfParamsOauthGrantTypeJwtBearer = "urn:ietf:params:oauth:grant-type:jwt-bearer",
  RefreshToken = "refresh_token",
}

export class GenerateTokenV2RequestBody extends SpeakeasyBase {
  /**
   * encrypted payload to identify yourself
   */
  @SpeakeasyMetadata({ data: "form, name=assertion" })
  assertion?: string;

  /**
   * specify the authentication method desired
   */
  @SpeakeasyMetadata({ data: "form, name=grant_type" })
  grantType?: GenerateTokenV2RequestBodyGrantTypeEnum;

  /**
   * The refresh token you created previously.
   */
  @SpeakeasyMetadata({ data: "form, name=refresh_token" })
  refreshToken?: string;

  /**
   * set to `offline` to generate a refresh token
   */
  @SpeakeasyMetadata({ data: "form, name=scope" })
  scope?: string;

  /**
   * Number of seconds until the access token expires. Default is 60 seconds. Maximum value is 30 days
   */
  @SpeakeasyMetadata({ data: "form, name=valid_for" })
  validFor?: number;
}

export class GenerateTokenV2Response extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * access token result
   */
  @SpeakeasyMetadata()
  generateAccessTokenResponse?: shared.GenerateAccessTokenResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
