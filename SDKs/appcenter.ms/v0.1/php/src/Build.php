<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Build 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Configures the branch for build
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateResponse
     */
	public function branchConfigurationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->branchConfigurationsCreate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsCreate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the branch build configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteResponse
     */
	public function branchConfigurationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->branchConfigurationsDelete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsDelete200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the branch configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetResponse
     */
	public function branchConfigurationsGet(
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->branchConfigurationsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->branchConfigurationsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reconfigures the branch for build
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateResponse
     */
	public function branchConfigurationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/config', \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->branchConfigurationsUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BranchConfigurationsUpdate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the build configuration in Azure pipeline YAML format
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetResponse
     */
	public function buildConfigurationsGet(
        \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/export_config', \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildConfigurationsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGet200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildConfigurationsGetDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildConfigurationsGetDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a build
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsCreateResponse
     */
	public function buildsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BuildsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds', \OpenAPI\OpenAPI\Models\Operations\BuildsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsCreate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsCreate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Distribute a build
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeResponse
     */
	public function buildsDistribute(
        \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute', \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsDistributeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsDistribute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsDistribute200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the build detail for the given build ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsGetResponse
     */
	public function buildsGet(
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}', \OpenAPI\OpenAPI\Models\Operations\BuildsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsGet200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsGet200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the download URI
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriResponse
     */
	public function buildsGetDownloadUri(
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}', \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUriResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsGetDownloadUri200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsGetDownloadUri200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the build log
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogResponse
     */
	public function buildsGetLog(
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs', \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsGetLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsGetLog200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsGetLog200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Application specific build service status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdResponse
     */
	public function buildsGetStatusByAppId(
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/build_service_status', \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsGetStatusByAppId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsGetStatusByAppId200ApplicationJSON', 'json');
            }
        }
        else {
        }

        return $response;
    }
	
    /**
     * Returns the list of Git branches for this application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesResponse
     */
	public function buildsListBranches(
        \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches', \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListBranches200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\BuildsListBranches200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListBranchesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsListBranchesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of builds for the branch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchResponse
     */
	public function buildsListByBranch(
        \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds', \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsListByBranchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListByBranch200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\BuildsListByBranch200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the projects in the repository for the branch, for all toolsets
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsResponse
     */
	public function buildsListToolsetProjects(
        \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects', \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjectsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListToolsetProjects200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetProjects200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns available toolsets for application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsResponse
     */
	public function buildsListToolsets(
        \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/toolsets', \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListToolsets200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsListToolsets200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListToolsetsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsListToolsetsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Xamarin SDK bundles available to this app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function buildsListXamarinSDKBundles(
        \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/xamarin_sdk_bundles', \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListXamarinSDKBundles200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundles200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListXamarinSDKBundlesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsListXamarinSDKBundlesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Xcode versions available to this app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsResponse
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
	public function buildsListXcodeVersions(
        \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsResponse
    {
        trigger_error('Method ' . __METHOD__ . ' is deprecated', E_USER_DEPRECATED);
        
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/xcode_versions', \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListXcodeVersions200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersions200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsListXcodeVersionsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsListXcodeVersionsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels a build
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateResponse
     */
	public function buildsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/builds/{build_id}', \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsUpdate200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Public webhook sink
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BuildsWebhookResponse
     */
	public function buildsWebhook(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BuildsWebhookResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/public/hooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BuildsWebhookResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildsWebhookDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BuildsWebhookDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns commit information for a batch of shas
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListResponse
     */
	public function commitsListByShaList(
        \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/commits/batch', \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CommitsListByShaListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->commitsListByShaList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\CommitsListByShaList200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new asset to upload a file
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateResponse
     */
	public function fileAssetsCreate(
        \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/file_asset', \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileAssetsCreate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FileAssetsCreate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileAssetsCreateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\FileAssetsCreateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the repositories available from the source code host
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RepositoriesListResponse
     */
	public function repositoriesList(
        \OpenAPI\OpenAPI\Models\Operations\RepositoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RepositoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RepositoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/source_hosts/{source_host}/repositories', \OpenAPI\OpenAPI\Models\Operations\RepositoriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RepositoriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RepositoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoriesList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\RepositoriesList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoriesListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RepositoriesListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Configures the repository for build
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateResponse
     */
	public function repositoryConfigurationsCreateOrUpdate(
        \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/repo_config', \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryConfigurationsCreateOrUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryConfigurationsCreateOrUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsCreateOrUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the configuration for the repository
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteResponse
     */
	public function repositoryConfigurationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/repo_config', \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryConfigurationsDelete200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDelete200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryConfigurationsDeleteDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsDeleteDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the repository build configuration status of the app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListResponse
     */
	public function repositoryConfigurationsList(
        \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/repo_config', \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryConfigurationsList200ApplicationJSONAnies = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->repositoryConfigurationsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\RepositoryConfigurationsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}