/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BackfillAllStrategy } from "./backfillallstrategy";
import { DestinationConfig } from "./destinationconfig";
import { ErrorT } from "./error";
import { SourceConfig } from "./sourceconfig";
import { Expose, Type } from "class-transformer";

/**
 * The state of the stream.
 */
export enum StreamStateEnum {
  StateUnspecified = "STATE_UNSPECIFIED",
  NotStarted = "NOT_STARTED",
  Running = "RUNNING",
  Paused = "PAUSED",
  Maintenance = "MAINTENANCE",
  Failed = "FAILED",
  FailedPermanently = "FAILED_PERMANENTLY",
  Starting = "STARTING",
  Draining = "DRAINING",
}

/**
 * A resource representing streaming data from a source to a destination.
 */
export class StreamInput extends SpeakeasyBase {
  /**
   * Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backfillAll" })
  @Type(() => BackfillAllStrategy)
  backfillAll?: BackfillAllStrategy;

  /**
   * Backfill strategy to disable automatic backfill for the Stream's objects.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backfillNone" })
  backfillNone?: Record<string, any>;

  /**
   * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customerManagedEncryptionKey" })
  customerManagedEncryptionKey?: string;

  /**
   * The configuration of the stream destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationConfig" })
  @Type(() => DestinationConfig)
  destinationConfig?: DestinationConfig;

  /**
   * Required. Display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Labels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * The configuration of the stream source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceConfig" })
  @Type(() => SourceConfig)
  sourceConfig?: SourceConfig;

  /**
   * The state of the stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: StreamStateEnum;
}

/**
 * A resource representing streaming data from a source to a destination.
 */
export class Stream extends SpeakeasyBase {
  /**
   * Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backfillAll" })
  @Type(() => BackfillAllStrategy)
  backfillAll?: BackfillAllStrategy;

  /**
   * Backfill strategy to disable automatic backfill for the Stream's objects.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "backfillNone" })
  backfillNone?: Record<string, any>;

  /**
   * Output only. The creation time of the stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customerManagedEncryptionKey" })
  customerManagedEncryptionKey?: string;

  /**
   * The configuration of the stream destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationConfig" })
  @Type(() => DestinationConfig)
  destinationConfig?: DestinationConfig;

  /**
   * Required. Display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Output only. Errors on the Stream.
   */
  @SpeakeasyMetadata({ elemType: ErrorT })
  @Expose({ name: "errors" })
  @Type(() => ErrorT)
  errors?: ErrorT[];

  /**
   * Labels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Output only. The stream's name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The configuration of the stream source.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceConfig" })
  @Type(() => SourceConfig)
  sourceConfig?: SourceConfig;

  /**
   * The state of the stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: StreamStateEnum;

  /**
   * Output only. The last update time of the stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}
