/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CommentSnippet - Basic details about a comment, such as its author and text.
 */
public class CommentSnippet {
    /**
     * The id of the author's YouTube channel, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorChannelId")
    public CommentSnippetAuthorChannelId authorChannelId;

    public CommentSnippet withAuthorChannelId(CommentSnippetAuthorChannelId authorChannelId) {
        this.authorChannelId = authorChannelId;
        return this;
    }
    
    /**
     * Link to the author's YouTube channel, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorChannelUrl")
    public String authorChannelUrl;

    public CommentSnippet withAuthorChannelUrl(String authorChannelUrl) {
        this.authorChannelUrl = authorChannelUrl;
        return this;
    }
    
    /**
     * The name of the user who posted the comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorDisplayName")
    public String authorDisplayName;

    public CommentSnippet withAuthorDisplayName(String authorDisplayName) {
        this.authorDisplayName = authorDisplayName;
        return this;
    }
    
    /**
     * The URL for the avatar of the user who posted the comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorProfileImageUrl")
    public String authorProfileImageUrl;

    public CommentSnippet withAuthorProfileImageUrl(String authorProfileImageUrl) {
        this.authorProfileImageUrl = authorProfileImageUrl;
        return this;
    }
    
    /**
     * Whether the current viewer can rate this comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("canRate")
    public Boolean canRate;

    public CommentSnippet withCanRate(Boolean canRate) {
        this.canRate = canRate;
        return this;
    }
    
    /**
     * The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelId")
    public String channelId;

    public CommentSnippet withChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }
    
    /**
     * The total number of likes this comment has received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("likeCount")
    public Long likeCount;

    public CommentSnippet withLikeCount(Long likeCount) {
        this.likeCount = likeCount;
        return this;
    }
    
    /**
     * The comment's moderation status. Will not be set if the comments were requested through the id filter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moderationStatus")
    public CommentSnippetModerationStatusEnum moderationStatus;

    public CommentSnippet withModerationStatus(CommentSnippetModerationStatusEnum moderationStatus) {
        this.moderationStatus = moderationStatus;
        return this;
    }
    
    /**
     * The unique id of the parent comment, only set for replies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    public String parentId;

    public CommentSnippet withParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * The date and time when the comment was originally published.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("publishedAt")
    public OffsetDateTime publishedAt;

    public CommentSnippet withPublishedAt(OffsetDateTime publishedAt) {
        this.publishedAt = publishedAt;
        return this;
    }
    
    /**
     * The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textDisplay")
    public String textDisplay;

    public CommentSnippet withTextDisplay(String textDisplay) {
        this.textDisplay = textDisplay;
        return this;
    }
    
    /**
     * The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textOriginal")
    public String textOriginal;

    public CommentSnippet withTextOriginal(String textOriginal) {
        this.textOriginal = textOriginal;
        return this;
    }
    
    /**
     * The date and time when the comment was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;

    public CommentSnippet withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The ID of the video the comment refers to, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoId")
    public String videoId;

    public CommentSnippet withVideoId(String videoId) {
        this.videoId = videoId;
        return this;
    }
    
    /**
     * The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewerRating")
    public CommentSnippetViewerRatingEnum viewerRating;

    public CommentSnippet withViewerRating(CommentSnippetViewerRatingEnum viewerRating) {
        this.viewerRating = viewerRating;
        return this;
    }
    
    public CommentSnippet(){}
}
