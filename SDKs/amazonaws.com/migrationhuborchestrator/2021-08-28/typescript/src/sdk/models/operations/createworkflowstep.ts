/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
 */
export enum CreateWorkflowStepRequestBodyStepActionTypeEnum {
  Manual = "MANUAL",
  Automated = "AUTOMATED",
}

/**
 * The custom script to run tests on source or target environments.
 */
export class CreateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  @Type(() => shared.PlatformCommand)
  command?: shared.PlatformCommand;

  @SpeakeasyMetadata()
  @Expose({ name: "runEnvironment" })
  runEnvironment?: shared.RunEnvironmentEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "scriptLocationS3Bucket" })
  scriptLocationS3Bucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "scriptLocationS3Key" })
  @Type(() => shared.PlatformScriptKey)
  scriptLocationS3Key?: shared.PlatformScriptKey;

  @SpeakeasyMetadata()
  @Expose({ name: "targetType" })
  targetType?: shared.TargetTypeEnum;
}

export class CreateWorkflowStepRequestBody extends SpeakeasyBase {
  /**
   * The description of the step.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The name of the step.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The next step.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  next?: string[];

  /**
   * The key value pairs added for the expected output.
   */
  @SpeakeasyMetadata({ elemType: shared.WorkflowStepOutput })
  @Expose({ name: "outputs" })
  @Type(() => shared.WorkflowStepOutput)
  outputs?: shared.WorkflowStepOutput[];

  /**
   * The previous step.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous" })
  previous?: string[];

  /**
   * The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stepActionType" })
  stepActionType: CreateWorkflowStepRequestBodyStepActionTypeEnum;

  /**
   * The ID of the step group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stepGroupId" })
  stepGroupId: string;

  /**
   * The servers on which a step will be run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stepTarget" })
  stepTarget?: string[];

  /**
   * The ID of the migration workflow.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflowId" })
  workflowId: string;

  /**
   * The custom script to run tests on source or target environments.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workflowStepAutomationConfiguration" })
  @Type(() => CreateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration)
  workflowStepAutomationConfiguration?: CreateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration;
}

export class CreateWorkflowStepRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateWorkflowStepRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateWorkflowStepResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createWorkflowStepResponse?: shared.CreateWorkflowStepResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
