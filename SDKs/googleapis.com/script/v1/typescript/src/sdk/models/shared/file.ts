/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleAppsScriptTypeFunctionSet } from "./googleappsscripttypefunctionset";
import { GoogleAppsScriptTypeUser } from "./googleappsscripttypeuser";
import { Expose, Type } from "class-transformer";

/**
 * The type of the file.
 */
export enum FileTypeEnum {
  EnumTypeUnspecified = "ENUM_TYPE_UNSPECIFIED",
  ServerJs = "SERVER_JS",
  Html = "HTML",
  Json = "JSON",
}

/**
 * An individual file within a script project. A file is a third-party source code created by one or more developers. It can be a server-side JS code, HTML, or a configuration file. Each script project can contain multiple files.
 */
export class File extends SpeakeasyBase {
  /**
   * Creation date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * A set of functions. No duplicates are permitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "functionSet" })
  @Type(() => GoogleAppsScriptTypeFunctionSet)
  functionSet?: GoogleAppsScriptTypeFunctionSet;

  /**
   * A simple user profile resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastModifyUser" })
  @Type(() => GoogleAppsScriptTypeUser)
  lastModifyUser?: GoogleAppsScriptTypeUser;

  /**
   * The name of the file. The file extension is not part of the file name, which can be identified from the type field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The file content.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  /**
   * The type of the file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: FileTypeEnum;

  /**
   * Last modified date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}
