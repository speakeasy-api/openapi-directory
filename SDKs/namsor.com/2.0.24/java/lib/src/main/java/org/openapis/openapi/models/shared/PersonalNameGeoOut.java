/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PersonalNameGeoOut - Classified geo names
 */
public class PersonalNameGeoOut {
    /**
     * List countries (top 10)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countriesTop")
    public String[] countriesTop;
    public PersonalNameGeoOut withCountriesTop(String[] countriesTop) {
        this.countriesTop = countriesTop;
        return this;
    }
    
    /**
     * Most likely country 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;
    public PersonalNameGeoOut withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * Second best alternative : country 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryAlt")
    public String countryAlt;
    public PersonalNameGeoOut withCountryAlt(String countryAlt) {
        this.countryAlt = countryAlt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public PersonalNameGeoOut withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The input name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PersonalNameGeoOut withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The calibrated probability for country OR countryAlt to have been guessed correctly. -1 = still calibrating. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("probabilityAltCalibrated")
    public Double probabilityAltCalibrated;
    public PersonalNameGeoOut withProbabilityAltCalibrated(Double probabilityAltCalibrated) {
        this.probabilityAltCalibrated = probabilityAltCalibrated;
        return this;
    }
    
    /**
     * The calibrated probability for country to have been guessed correctly. -1 = still calibrating. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("probabilityCalibrated")
    public Double probabilityCalibrated;
    public PersonalNameGeoOut withProbabilityCalibrated(Double probabilityCalibrated) {
        this.probabilityCalibrated = probabilityCalibrated;
        return this;
    }
    
    /**
     * Most likely region (based on country ISO2 code)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public PersonalNameGeoOut withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * Higher score is better, but score is not normalized. Use calibratedProbability if available. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public Double score;
    public PersonalNameGeoOut withScore(Double score) {
        this.score = score;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("script")
    public String script;
    public PersonalNameGeoOut withScript(String script) {
        this.script = script;
        return this;
    }
    
    /**
     * Most likely sub region (based on country ISO2 code)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subRegion")
    public String subRegion;
    public PersonalNameGeoOut withSubRegion(String subRegion) {
        this.subRegion = subRegion;
        return this;
    }
    
    /**
     * Most likely top region (based on country ISO2 code)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topRegion")
    public String topRegion;
    public PersonalNameGeoOut withTopRegion(String topRegion) {
        this.topRegion = topRegion;
        return this;
    }
    
}
