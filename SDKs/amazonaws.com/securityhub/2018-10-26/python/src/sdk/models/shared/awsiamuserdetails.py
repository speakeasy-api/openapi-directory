"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awsiamattachedmanagedpolicy as shared_awsiamattachedmanagedpolicy
from ..shared import awsiampermissionsboundary as shared_awsiampermissionsboundary
from ..shared import awsiamuserpolicy as shared_awsiamuserpolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsIamUserDetails:
    r"""Information about an IAM user."""
    
    attached_managed_policies: Optional[list[shared_awsiamattachedmanagedpolicy.AwsIamAttachedManagedPolicy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachedManagedPolicies'), 'exclude': lambda f: f is None }})  
    create_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateDate'), 'exclude': lambda f: f is None }})  
    group_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GroupList'), 'exclude': lambda f: f is None }})  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Path'), 'exclude': lambda f: f is None }})  
    permissions_boundary: Optional[shared_awsiampermissionsboundary.AwsIamPermissionsBoundary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PermissionsBoundary'), 'exclude': lambda f: f is None }})  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserId'), 'exclude': lambda f: f is None }})  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserName'), 'exclude': lambda f: f is None }})  
    user_policy_list: Optional[list[shared_awsiamuserpolicy.AwsIamUserPolicy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserPolicyList'), 'exclude': lambda f: f is None }})  
    