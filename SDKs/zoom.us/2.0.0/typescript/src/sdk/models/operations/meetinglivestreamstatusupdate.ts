/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class MeetingLiveStreamStatusUpdateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * Update the status of a livestream.
 *
 * @remarks
 *
 * The value can be one of the following:<br>
 * `start`: Start a live stream. <br>
 * `stop`: Stop an ongoing live stream.
 */
export enum MeetingLiveStreamStatusUpdateApplicationJSONActionEnum {
  Start = "start",
  Stop = "stop",
}

/**
 * Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.
 */
export class MeetingLiveStreamStatusUpdateApplicationJSONSettings extends SpeakeasyBase {
  /**
   * Display the name of the active speaker during a live stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active_speaker_name" })
  activeSpeakerName?: boolean;

  /**
   * Display name of the live stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;
}

/**
 * Meeting live stream status.
 */
export class MeetingLiveStreamStatusUpdateApplicationJSON extends SpeakeasyBase {
  /**
   * Update the status of a livestream.
   *
   * @remarks
   *
   * The value can be one of the following:<br>
   * `start`: Start a live stream. <br>
   * `stop`: Stop an ongoing live stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: MeetingLiveStreamStatusUpdateApplicationJSONActionEnum;

  /**
   * Update the settings of a live streaming session. The settings can only be updated for a live stream that has been stopped. You can not update the settings of an ongoing live stream.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settings" })
  @Type(() => MeetingLiveStreamStatusUpdateApplicationJSONSettings)
  settings?: MeetingLiveStreamStatusUpdateApplicationJSONSettings;
}

export class MeetingLiveStreamStatusUpdateRequest extends SpeakeasyBase {
  /**
   * Meeting
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: MeetingLiveStreamStatusUpdateApplicationJSON;

  /**
   * The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
   *
   * @remarks
   *
   * While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: number;
}

export class MeetingLiveStreamStatusUpdateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
