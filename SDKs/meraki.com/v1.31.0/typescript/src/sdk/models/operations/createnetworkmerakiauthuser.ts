/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Authorization type for user. Can be 'Guest' or '802.1X' for wireless networks, or 'Client VPN' for wired networks. Defaults to '802.1X'.
 */
export enum CreateNetworkMerakiAuthUserRequestBodyAccountTypeEnum {
  EightHundredAndTwo1X = "802.1X",
  ClientVPN = "Client VPN",
  Guest = "Guest",
}

export class CreateNetworkMerakiAuthUserRequestBodyAuthorizations extends SpeakeasyBase {
  /**
   * Date for authorization to expire. Set to 'Never' for the authorization to not expire, which is the default.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiresAt" })
  expiresAt?: string;

  /**
   * Required for wireless networks. The SSID for which the user is being authorized, which must be configured for the user's given accountType.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssidNumber" })
  ssidNumber?: number;
}

export class CreateNetworkMerakiAuthUserRequestBody extends SpeakeasyBase {
  /**
   * Authorization type for user. Can be 'Guest' or '802.1X' for wireless networks, or 'Client VPN' for wired networks. Defaults to '802.1X'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountType" })
  accountType?: CreateNetworkMerakiAuthUserRequestBodyAccountTypeEnum;

  /**
   * Authorization zones and expiration dates for the user.
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkMerakiAuthUserRequestBodyAuthorizations,
  })
  @Expose({ name: "authorizations" })
  @Type(() => CreateNetworkMerakiAuthUserRequestBodyAuthorizations)
  authorizations: CreateNetworkMerakiAuthUserRequestBodyAuthorizations[];

  /**
   * Email address of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  /**
   * Whether or not Meraki should email the password to user. Default is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailPasswordToUser" })
  emailPasswordToUser?: boolean;

  /**
   * Whether or not the user is a Dashboard administrator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAdmin" })
  isAdmin?: boolean;

  /**
   * Name of the user. Only required If the user is not a Dashboard administrator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The password for this user account. Only required If the user is not a Dashboard administrator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password" })
  password?: string;
}

export class CreateNetworkMerakiAuthUserRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNetworkMerakiAuthUserRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class CreateNetworkMerakiAuthUser201ApplicationJSONAuthorizations extends SpeakeasyBase {
  /**
   * User is authorized by the account email address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizedByEmail" })
  authorizedByEmail?: string;

  /**
   * User is authorized by the account name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizedByName" })
  authorizedByName?: string;

  /**
   * Authorized zone of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizedZone" })
  authorizedZone?: string;

  /**
   * Authorization expiration time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiresAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expiresAt?: Date;

  /**
   * SSID number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssidNumber" })
  ssidNumber?: number;
}

/**
 * Successful operation
 */
export class CreateNetworkMerakiAuthUser201ApplicationJSON extends SpeakeasyBase {
  /**
   * Authorization type for user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountType" })
  accountType?: string;

  /**
   * User authorization info
   */
  @SpeakeasyMetadata({
    elemType: CreateNetworkMerakiAuthUser201ApplicationJSONAuthorizations,
  })
  @Expose({ name: "authorizations" })
  @Type(() => CreateNetworkMerakiAuthUser201ApplicationJSONAuthorizations)
  authorizations?: CreateNetworkMerakiAuthUser201ApplicationJSONAuthorizations[];

  /**
   * Creation time of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Email address of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Meraki auth user id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Whether or not the user is a Dashboard administrator
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAdmin" })
  isAdmin?: boolean;

  /**
   * Name of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class CreateNetworkMerakiAuthUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createNetworkMerakiAuthUser201ApplicationJSONObject?: CreateNetworkMerakiAuthUser201ApplicationJSON;
}
