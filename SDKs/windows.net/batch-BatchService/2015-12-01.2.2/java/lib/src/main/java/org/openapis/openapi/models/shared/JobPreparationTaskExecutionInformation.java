/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * JobPreparationTaskExecutionInformation - Contains information about the execution of a Job Preparation task on a compute node.
 */
public class JobPreparationTaskExecutionInformation {
    /**
     * Gets or sets the time at which the Job Preparation task completed. This property is set only if the task is in the Completed state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("endTime")
    public OffsetDateTime endTime;

    public JobPreparationTaskExecutionInformation withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Gets or sets the exit code of the Job Preparation task. This property is set only if the task is in the Completed state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exitCode")
    public Integer exitCode;

    public JobPreparationTaskExecutionInformation withExitCode(Integer exitCode) {
        this.exitCode = exitCode;
        return this;
    }
    
    /**
     * Gets or sets the most recent time at which a retry of the Job Preparation task started running. This property is set only if the task was retried (i.e. retryCount is nonzero).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastRetryTime")
    public OffsetDateTime lastRetryTime;

    public JobPreparationTaskExecutionInformation withLastRetryTime(OffsetDateTime lastRetryTime) {
        this.lastRetryTime = lastRetryTime;
        return this;
    }
    
    /**
     * Gets or sets the number of times the Job Preparation task has been retried by the Batch service.
     */
    @JsonProperty("retryCount")
    public Integer retryCount;

    public JobPreparationTaskExecutionInformation withRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
        return this;
    }
    
    /**
     * Information about an error when scheduling a task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedulingError")
    public TaskSchedulingError schedulingError;

    public JobPreparationTaskExecutionInformation withSchedulingError(TaskSchedulingError schedulingError) {
        this.schedulingError = schedulingError;
        return this;
    }
    
    /**
     * Gets or sets the time at which the Job Preparation task started running.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startTime")
    public OffsetDateTime startTime;

    public JobPreparationTaskExecutionInformation withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Gets or sets the current running state of the Job Preparation task on the compute node.
     */
    @JsonProperty("state")
    public JobPreparationTaskExecutionInformationStateEnum state;

    public JobPreparationTaskExecutionInformation withState(JobPreparationTaskExecutionInformationStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Gets or sets the root directory of the Job Preparation task on the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskRootDirectory")
    public String taskRootDirectory;

    public JobPreparationTaskExecutionInformation withTaskRootDirectory(String taskRootDirectory) {
        this.taskRootDirectory = taskRootDirectory;
        return this;
    }
    
    /**
     * Gets or sets the URL to the root directory of the Job Preparation task on the compute node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskRootDirectoryUrl")
    public String taskRootDirectoryUrl;

    public JobPreparationTaskExecutionInformation withTaskRootDirectoryUrl(String taskRootDirectoryUrl) {
        this.taskRootDirectoryUrl = taskRootDirectoryUrl;
        return this;
    }
    
    public JobPreparationTaskExecutionInformation(@JsonProperty("retryCount") Integer retryCount, @JsonProperty("startTime") OffsetDateTime startTime, @JsonProperty("state") JobPreparationTaskExecutionInformationStateEnum state) {
        this.retryCount = retryCount;
        this.startTime = startTime;
        this.state = state;
  }
}
