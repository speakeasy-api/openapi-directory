"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createunreferencedmergecommitinput as shared_createunreferencedmergecommitinput
from ..shared import createunreferencedmergecommitoutput as shared_createunreferencedmergecommitoutput
from enum import Enum
from typing import Any, Optional

class CreateUnreferencedMergeCommitXAmzTargetEnum(str, Enum):
    CODE_COMMIT_20150413_CREATE_UNREFERENCED_MERGE_COMMIT = 'CodeCommit_20150413.CreateUnreferencedMergeCommit'


@dataclasses.dataclass
class CreateUnreferencedMergeCommitRequest:
    
    create_unreferenced_merge_commit_input: shared_createunreferencedmergecommitinput.CreateUnreferencedMergeCommitInput = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_target: CreateUnreferencedMergeCommitXAmzTargetEnum = dataclasses.field(metadata={'header': { 'field_name': 'X-Amz-Target', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateUnreferencedMergeCommitResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    commit_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommitDoesNotExistException"""  
    commit_message_length_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommitMessageLengthExceededException"""  
    commit_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CommitRequiredException"""  
    concurrent_reference_update_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConcurrentReferenceUpdateException"""  
    create_unreferenced_merge_commit_output: Optional[shared_createunreferencedmergecommitoutput.CreateUnreferencedMergeCommitOutput] = dataclasses.field(default=None)
    r"""Success"""  
    encryption_integrity_checks_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionIntegrityChecksFailedException"""  
    encryption_key_access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyAccessDeniedException"""  
    encryption_key_disabled_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyDisabledException"""  
    encryption_key_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyNotFoundException"""  
    encryption_key_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""EncryptionKeyUnavailableException"""  
    file_content_size_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""FileContentSizeLimitExceededException"""  
    file_mode_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""FileModeRequiredException"""  
    folder_content_size_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""FolderContentSizeLimitExceededException"""  
    invalid_commit_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCommitException"""  
    invalid_conflict_detail_level_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidConflictDetailLevelException"""  
    invalid_conflict_resolution_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidConflictResolutionException"""  
    invalid_conflict_resolution_strategy_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidConflictResolutionStrategyException"""  
    invalid_email_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidEmailException"""  
    invalid_file_mode_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidFileModeException"""  
    invalid_merge_option_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidMergeOptionException"""  
    invalid_path_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidPathException"""  
    invalid_replacement_content_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidReplacementContentException"""  
    invalid_replacement_type_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidReplacementTypeException"""  
    invalid_repository_name_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRepositoryNameException"""  
    manual_merge_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ManualMergeRequiredException"""  
    maximum_conflict_resolution_entries_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaximumConflictResolutionEntriesExceededException"""  
    maximum_file_content_to_load_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaximumFileContentToLoadExceededException"""  
    maximum_items_to_compare_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MaximumItemsToCompareExceededException"""  
    merge_option_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MergeOptionRequiredException"""  
    multiple_conflict_resolution_entries_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MultipleConflictResolutionEntriesException"""  
    name_length_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NameLengthExceededException"""  
    path_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PathRequiredException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    replacement_content_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ReplacementContentRequiredException"""  
    replacement_type_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ReplacementTypeRequiredException"""  
    repository_does_not_exist_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryDoesNotExistException"""  
    repository_name_required_exception: Optional[Any] = dataclasses.field(default=None)
    r"""RepositoryNameRequiredException"""  
    tips_divergence_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TipsDivergenceExceededException"""  
    