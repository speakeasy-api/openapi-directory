<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Applications 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create an application
     * 
     * Application is a group of tiers. A tier is a group of virtual machines based on membership criteria. Tiers are bound to single
     * application. An application name is unique and should not conflict with another application name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddApplicationResponse
     */
	public function addApplication(
        \OpenAPI\OpenAPI\Models\Shared\ApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->application = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Application', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create tier in application
     * 
     * Create a tier of an application by with specified membership criteria. The membership criteria id defined in terms of
     * virtual machines or ip addresses/subnet. Please refer to API Guide on how to construct membership criteria.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTierRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTierSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddTierResponse
     */
	public function addTier(
        \OpenAPI\OpenAPI\Models\Operations\AddTierRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddTierSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddTierResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications/{id}/tiers', \OpenAPI\OpenAPI\Models\Operations\AddTierRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tierRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddTierResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tier = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tier', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiError', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete an application
     * 
     * Deleting an application deletes all the tiers of the application along with the application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationResponse
     */
	public function deleteApplication(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Delete tier
     * 
     * Delete tier of an application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTierRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTierSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTierResponse
     */
	public function deleteTier(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTierRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTierSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTierResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications/{id}/tiers/{tier-id}', \OpenAPI\OpenAPI\Models\Operations\DeleteTierRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTierResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show application details
     * 
     * Show application details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApplicationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApplicationResponse
     */
	public function getApplication(
        \OpenAPI\OpenAPI\Models\Operations\GetApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApplicationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApplicationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->application = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Application', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show tier details
     * 
     * Show tier details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierResponse
     */
	public function getApplicationTier(
        \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications/{id}/tiers/{tier-id}', \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApplicationTierResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tier = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tier', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Show tier details
     * 
     * Show tier details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTierRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTierSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTierResponse
     */
	public function getTier(
        \OpenAPI\OpenAPI\Models\Operations\GetTierRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTierSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTierResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/tiers/{tier-id}', \OpenAPI\OpenAPI\Models\Operations\GetTierRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTierResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tier = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tier', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List tiers of an application
     * 
     * List tiers of an application
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersResponse
     */
	public function listApplicationTiers(
        \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications/{id}/tiers', \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListApplicationTiersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tierListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TierListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * List applications
     * 
     * List applications
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListApplicationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListApplicationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListApplicationsResponse
     */
	public function listApplications(
        \OpenAPI\OpenAPI\Models\Operations\ListApplicationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListApplicationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListApplicationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/applications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListApplicationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListApplicationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pagedListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PagedListResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
}