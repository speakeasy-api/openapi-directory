"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awscertificatemanagercertificatedomainvalidationoption as shared_awscertificatemanagercertificatedomainvalidationoption
from ..shared import awscertificatemanagercertificateextendedkeyusage as shared_awscertificatemanagercertificateextendedkeyusage
from ..shared import awscertificatemanagercertificatekeyusage as shared_awscertificatemanagercertificatekeyusage
from ..shared import awscertificatemanagercertificateoptions as shared_awscertificatemanagercertificateoptions
from ..shared import awscertificatemanagercertificaterenewalsummary as shared_awscertificatemanagercertificaterenewalsummary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsCertificateManagerCertificateDetails:
    r"""Provides details about an Certificate Manager certificate."""
    
    certificate_authority_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateAuthorityArn'), 'exclude': lambda f: f is None }})  
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedAt'), 'exclude': lambda f: f is None }})  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainName'), 'exclude': lambda f: f is None }})  
    domain_validation_options: Optional[list[shared_awscertificatemanagercertificatedomainvalidationoption.AwsCertificateManagerCertificateDomainValidationOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainValidationOptions'), 'exclude': lambda f: f is None }})  
    extended_key_usages: Optional[list[shared_awscertificatemanagercertificateextendedkeyusage.AwsCertificateManagerCertificateExtendedKeyUsage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExtendedKeyUsages'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FailureReason'), 'exclude': lambda f: f is None }})  
    imported_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImportedAt'), 'exclude': lambda f: f is None }})  
    in_use_by: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InUseBy'), 'exclude': lambda f: f is None }})  
    issued_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuedAt'), 'exclude': lambda f: f is None }})  
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Issuer'), 'exclude': lambda f: f is None }})  
    key_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyAlgorithm'), 'exclude': lambda f: f is None }})  
    key_usages: Optional[list[shared_awscertificatemanagercertificatekeyusage.AwsCertificateManagerCertificateKeyUsage]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeyUsages'), 'exclude': lambda f: f is None }})  
    not_after: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotAfter'), 'exclude': lambda f: f is None }})  
    not_before: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotBefore'), 'exclude': lambda f: f is None }})  
    options: Optional[shared_awscertificatemanagercertificateoptions.AwsCertificateManagerCertificateOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Options'), 'exclude': lambda f: f is None }})  
    renewal_eligibility: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RenewalEligibility'), 'exclude': lambda f: f is None }})  
    renewal_summary: Optional[shared_awscertificatemanagercertificaterenewalsummary.AwsCertificateManagerCertificateRenewalSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RenewalSummary'), 'exclude': lambda f: f is None }})  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Serial'), 'exclude': lambda f: f is None }})  
    signature_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SignatureAlgorithm'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Subject'), 'exclude': lambda f: f is None }})  
    subject_alternative_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubjectAlternativeNames'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    