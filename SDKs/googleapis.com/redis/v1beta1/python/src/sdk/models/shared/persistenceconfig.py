"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PersistenceConfigPersistenceModeEnum(str, Enum):
    r"""Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used."""
    PERSISTENCE_MODE_UNSPECIFIED = 'PERSISTENCE_MODE_UNSPECIFIED'
    DISABLED = 'DISABLED'
    RDB = 'RDB'

class PersistenceConfigRdbSnapshotPeriodEnum(str, Enum):
    r"""Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default."""
    SNAPSHOT_PERIOD_UNSPECIFIED = 'SNAPSHOT_PERIOD_UNSPECIFIED'
    ONE_HOUR = 'ONE_HOUR'
    SIX_HOURS = 'SIX_HOURS'
    TWELVE_HOURS = 'TWELVE_HOURS'
    TWENTY_FOUR_HOURS = 'TWENTY_FOUR_HOURS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PersistenceConfigInput:
    r"""Configuration of the persistence functionality."""
    
    persistence_mode: Optional[PersistenceConfigPersistenceModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persistenceMode'), 'exclude': lambda f: f is None }})
    r"""Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used."""  
    rdb_snapshot_period: Optional[PersistenceConfigRdbSnapshotPeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rdbSnapshotPeriod'), 'exclude': lambda f: f is None }})
    r"""Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default."""  
    rdb_snapshot_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rdbSnapshotStartTime'), 'exclude': lambda f: f is None }})
    r"""Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PersistenceConfig:
    r"""Configuration of the persistence functionality."""
    
    persistence_mode: Optional[PersistenceConfigPersistenceModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('persistenceMode'), 'exclude': lambda f: f is None }})
    r"""Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used."""  
    rdb_next_snapshot_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rdbNextSnapshotTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The next time that a snapshot attempt is scheduled to occur."""  
    rdb_snapshot_period: Optional[PersistenceConfigRdbSnapshotPeriodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rdbSnapshotPeriod'), 'exclude': lambda f: f is None }})
    r"""Optional. Period between RDB snapshots. Snapshots will be attempted every period starting from the provided snapshot start time. For example, a start time of 01/01/2033 06:45 and SIX_HOURS snapshot period will do nothing until 01/01/2033, and then trigger snapshots every day at 06:45, 12:45, 18:45, and 00:45 the next day, and so on. If not provided, TWENTY_FOUR_HOURS will be used as default."""  
    rdb_snapshot_start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rdbSnapshotStartTime'), 'exclude': lambda f: f is None }})
    r"""Optional. Date and time that the first snapshot was/will be attempted, and to which future snapshots will be aligned. If not provided, the current time will be used."""  
    