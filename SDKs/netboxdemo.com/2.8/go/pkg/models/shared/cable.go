// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CableLengthUnitLabelEnum string

const (
	CableLengthUnitLabelEnumMeters      CableLengthUnitLabelEnum = "Meters"
	CableLengthUnitLabelEnumCentimeters CableLengthUnitLabelEnum = "Centimeters"
	CableLengthUnitLabelEnumFeet        CableLengthUnitLabelEnum = "Feet"
	CableLengthUnitLabelEnumInches      CableLengthUnitLabelEnum = "Inches"
)

func (e *CableLengthUnitLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Meters":
		fallthrough
	case "Centimeters":
		fallthrough
	case "Feet":
		fallthrough
	case "Inches":
		*e = CableLengthUnitLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CableLengthUnitLabelEnum: %s", s)
	}
}

type CableLengthUnitValueEnum string

const (
	CableLengthUnitValueEnumM  CableLengthUnitValueEnum = "m"
	CableLengthUnitValueEnumCm CableLengthUnitValueEnum = "cm"
	CableLengthUnitValueEnumFt CableLengthUnitValueEnum = "ft"
	CableLengthUnitValueEnumIn CableLengthUnitValueEnum = "in"
)

func (e *CableLengthUnitValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "m":
		fallthrough
	case "cm":
		fallthrough
	case "ft":
		fallthrough
	case "in":
		*e = CableLengthUnitValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CableLengthUnitValueEnum: %s", s)
	}
}

type CableLengthUnit struct {
	Label CableLengthUnitLabelEnum `json:"label"`
	Value CableLengthUnitValueEnum `json:"value"`
}

type CableStatusLabelEnum string

const (
	CableStatusLabelEnumConnected       CableStatusLabelEnum = "Connected"
	CableStatusLabelEnumPlanned         CableStatusLabelEnum = "Planned"
	CableStatusLabelEnumDecommissioning CableStatusLabelEnum = "Decommissioning"
)

func (e *CableStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Connected":
		fallthrough
	case "Planned":
		fallthrough
	case "Decommissioning":
		*e = CableStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CableStatusLabelEnum: %s", s)
	}
}

type CableStatusValueEnum string

const (
	CableStatusValueEnumConnected       CableStatusValueEnum = "connected"
	CableStatusValueEnumPlanned         CableStatusValueEnum = "planned"
	CableStatusValueEnumDecommissioning CableStatusValueEnum = "decommissioning"
)

func (e *CableStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "connected":
		fallthrough
	case "planned":
		fallthrough
	case "decommissioning":
		*e = CableStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CableStatusValueEnum: %s", s)
	}
}

type CableStatus struct {
	Label CableStatusLabelEnum `json:"label"`
	Value CableStatusValueEnum `json:"value"`
}

type CableTypeEnum string

const (
	CableTypeEnumCat3       CableTypeEnum = "cat3"
	CableTypeEnumCat5       CableTypeEnum = "cat5"
	CableTypeEnumCat5e      CableTypeEnum = "cat5e"
	CableTypeEnumCat6       CableTypeEnum = "cat6"
	CableTypeEnumCat6a      CableTypeEnum = "cat6a"
	CableTypeEnumCat7       CableTypeEnum = "cat7"
	CableTypeEnumDacActive  CableTypeEnum = "dac-active"
	CableTypeEnumDacPassive CableTypeEnum = "dac-passive"
	CableTypeEnumMrj21Trunk CableTypeEnum = "mrj21-trunk"
	CableTypeEnumCoaxial    CableTypeEnum = "coaxial"
	CableTypeEnumMmf        CableTypeEnum = "mmf"
	CableTypeEnumMmfOm1     CableTypeEnum = "mmf-om1"
	CableTypeEnumMmfOm2     CableTypeEnum = "mmf-om2"
	CableTypeEnumMmfOm3     CableTypeEnum = "mmf-om3"
	CableTypeEnumMmfOm4     CableTypeEnum = "mmf-om4"
	CableTypeEnumSmf        CableTypeEnum = "smf"
	CableTypeEnumSmfOs1     CableTypeEnum = "smf-os1"
	CableTypeEnumSmfOs2     CableTypeEnum = "smf-os2"
	CableTypeEnumAoc        CableTypeEnum = "aoc"
	CableTypeEnumPower      CableTypeEnum = "power"
)

func (e *CableTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cat3":
		fallthrough
	case "cat5":
		fallthrough
	case "cat5e":
		fallthrough
	case "cat6":
		fallthrough
	case "cat6a":
		fallthrough
	case "cat7":
		fallthrough
	case "dac-active":
		fallthrough
	case "dac-passive":
		fallthrough
	case "mrj21-trunk":
		fallthrough
	case "coaxial":
		fallthrough
	case "mmf":
		fallthrough
	case "mmf-om1":
		fallthrough
	case "mmf-om2":
		fallthrough
	case "mmf-om3":
		fallthrough
	case "mmf-om4":
		fallthrough
	case "smf":
		fallthrough
	case "smf-os1":
		fallthrough
	case "smf-os2":
		fallthrough
	case "aoc":
		fallthrough
	case "power":
		*e = CableTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CableTypeEnum: %s", s)
	}
}

type Cable struct {
	Color            *string           `json:"color,omitempty"`
	ID               *int64            `json:"id,omitempty"`
	Label            *string           `json:"label,omitempty"`
	Length           *int64            `json:"length,omitempty"`
	LengthUnit       *CableLengthUnit  `json:"length_unit,omitempty"`
	Status           *CableStatus      `json:"status,omitempty"`
	TerminationA     map[string]string `json:"termination_a,omitempty"`
	TerminationAID   int64             `json:"termination_a_id"`
	TerminationAType string            `json:"termination_a_type"`
	TerminationB     map[string]string `json:"termination_b,omitempty"`
	TerminationBID   int64             `json:"termination_b_id"`
	TerminationBType string            `json:"termination_b_type"`
	Type             *CableTypeEnum    `json:"type,omitempty"`
}
