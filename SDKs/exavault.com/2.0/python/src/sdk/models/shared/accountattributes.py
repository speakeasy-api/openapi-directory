"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import brandingsettings as shared_brandingsettings
from ..shared import plandetails as shared_plandetails
from ..shared import quota as shared_quota
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountAttributesAllowedIP:
    
    ip_end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipEnd'), 'exclude': lambda f: f is None }})  
    ip_start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipStart'), 'exclude': lambda f: f is None }})  
    
class AccountAttributesBrandingEnum(str, Enum):
    r"""Branding flag. Set to `true` if the account has branding functionality enabled."""
    TRUE = 'true'
    FALSE = 'false'

class AccountAttributesCustomDomainEnum(str, Enum):
    r"""Custom domain flag. Set to `true` if account type allows custom domain functionality."""
    TRUE = 'true'
    FALSE = 'false'

class AccountAttributesStatusEnum(str, Enum):
    r"""Account status flag. A one (1) means the account is active; zero (0) means it is suspended."""
    ONE = '1'
    ZERO = '0'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccountAttributes:
    
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountName'), 'exclude': lambda f: f is None }})
    r"""Name of the account"""  
    account_onboarding: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountOnboarding'), 'exclude': lambda f: f is None }})
    r"""Whether the web application onboarding help is enabled for new users in the account."""  
    allowed_ip: Optional[list[AccountAttributesAllowedIP]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIp'), 'exclude': lambda f: f is None }})
    r"""Range of IP addresses allowed to access this account."""  
    branding: Optional[AccountAttributesBrandingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('branding'), 'exclude': lambda f: f is None }})
    r"""Branding flag. Set to `true` if the account has branding functionality enabled."""  
    branding_settings: Optional[shared_brandingsettings.BrandingSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandingSettings'), 'exclude': lambda f: f is None }})  
    client_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""(ExaVault Use Only) Internal ID of the account in CMS."""  
    complex_passwords: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complexPasswords'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares."""  
    created: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of account creation."""  
    custom_domain: Optional[AccountAttributesCustomDomainEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customDomain'), 'exclude': lambda f: f is None }})
    r"""Custom domain flag. Set to `true` if account type allows custom domain functionality."""  
    custom_signature: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customSignature'), 'exclude': lambda f: f is None }})
    r"""Custom signature for all account emails users or recipients will receive."""  
    external_domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalDomains'), 'exclude': lambda f: f is None }})
    r"""Custom domain used to brand this account."""  
    max_users: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxUsers'), 'exclude': lambda f: f is None }})
    r"""Maximum number of users the account can have. This can be increased by contacting ExaVault Support."""  
    modified: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp of account modification."""  
    plan_details: Optional[shared_plandetails.PlanDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('planDetails'), 'exclude': lambda f: f is None }})  
    quota: Optional[shared_quota.Quota] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota'), 'exclude': lambda f: f is None }})  
    secure_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secureOnly'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21."""  
    show_referral_links: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showReferralLinks'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations."""  
    status: Optional[AccountAttributesStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Account status flag. A one (1) means the account is active; zero (0) means it is suspended."""  
    user_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userCount'), 'exclude': lambda f: f is None }})
    r"""Current number of users on the account."""  
    welcome_email_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcomeEmailContent'), 'exclude': lambda f: f is None }})
    r"""Content of welcome email each new user will receive."""  
    welcome_email_subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('welcomeEmailSubject'), 'exclude': lambda f: f is None }})
    r"""Subject of welcome email each new user will receive."""  
    