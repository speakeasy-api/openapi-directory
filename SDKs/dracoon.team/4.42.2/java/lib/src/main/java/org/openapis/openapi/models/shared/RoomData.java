/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * RoomData - Room information
 */
public class RoomData {
    /**
     * &amp;#128679; Deprecated since v4.10.0
     * 
     * List of rooms, where this room is a parent (if exist)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("children")
    public RoomData[] children;
    public RoomData withChildren(RoomData[] children) {
        this.children = children;
        return this;
    }
    
    /**
     * Returns the number of Download Shares of this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntDownloadShares")
    public Integer cntDownloadShares;
    public RoomData withCntDownloadShares(Integer cntDownloadShares) {
        this.cntDownloadShares = cntDownloadShares;
        return this;
    }
    
    /**
     * Returns the number of Upload Shares of this node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cntUploadShares")
    public Integer cntUploadShares;
    public RoomData withCntUploadShares(Integer cntUploadShares) {
        this.cntUploadShares = cntUploadShares;
        return this;
    }
    
    /**
     * Expiration date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public RoomData withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * User information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    public UserInfo createdBy;
    public RoomData withCreatedBy(UserInfo createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * &amp;#128679; Deprecated since v4.10.0
     * 
     * Is recycle bin active (for rooms only)
     * 
     * Recycle bin is always on (disabling is not possible).
     */
    @JsonProperty("hasRecycleBin")
    public Boolean hasRecycleBin;
    public RoomData withHasRecycleBin(Boolean hasRecycleBin) {
        this.hasRecycleBin = hasRecycleBin;
        return this;
    }
    
    /**
     * Room ID
     */
    @JsonProperty("id")
    public Long id;
    public RoomData withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Encryption state
     */
    @JsonProperty("isEncrypted")
    public Boolean isEncrypted;
    public RoomData withIsEncrypted(Boolean isEncrypted) {
        this.isEncrypted = isEncrypted;
        return this;
    }
    
    /**
     * Node is marked as favorite (for rooms / folders only)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isFavorite")
    public Boolean isFavorite;
    public RoomData withIsFavorite(Boolean isFavorite) {
        this.isFavorite = isFavorite;
        return this;
    }
    
    /**
     * Is user granted room permissions
     */
    @JsonProperty("isGranted")
    public Boolean isGranted;
    public RoomData withIsGranted(Boolean isGranted) {
        this.isGranted = isGranted;
        return this;
    }
    
    /**
     * Name
     */
    @JsonProperty("name")
    public String name;
    public RoomData withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Parent node ID (room or folder)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentId")
    public Long parentId;
    public RoomData withParentId(Long parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * Node permissions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public NodePermissions permissions;
    public RoomData withPermissions(NodePermissions permissions) {
        this.permissions = permissions;
        return this;
    }
    
    /**
     * Quota in byte
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quota")
    public Long quota;
    public RoomData withQuota(Long quota) {
        this.quota = quota;
        return this;
    }
    
    /**
     * Retention period for deleted nodes in days
     */
    @JsonProperty("recycleBinRetentionPeriod")
    public Integer recycleBinRetentionPeriod;
    public RoomData withRecycleBinRetentionPeriod(Integer recycleBinRetentionPeriod) {
        this.recycleBinRetentionPeriod = recycleBinRetentionPeriod;
        return this;
    }
    
    /**
     * Room size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;
    public RoomData withSize(Long size) {
        this.size = size;
        return this;
    }
    
    /**
     * Node type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public RoomDataTypeEnum type;
    public RoomData withType(RoomDataTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Modification date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;
    public RoomData withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * User information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    public UserInfo updatedBy;
    public RoomData withUpdatedBy(UserInfo updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
}
