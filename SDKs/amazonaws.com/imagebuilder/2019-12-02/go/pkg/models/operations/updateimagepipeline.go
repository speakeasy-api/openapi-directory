// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateImagePipelineHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdateImagePipelineRequestBodyImageTestsConfiguration - Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
type UpdateImagePipelineRequestBodyImageTestsConfiguration struct {
	ImageTestsEnabled *bool  `json:"imageTestsEnabled,omitempty"`
	TimeoutMinutes    *int64 `json:"timeoutMinutes,omitempty"`
}

// UpdateImagePipelineRequestBodySchedule - A schedule configures how often and when a pipeline will automatically create a new image.
type UpdateImagePipelineRequestBodySchedule struct {
	PipelineExecutionStartCondition *shared.PipelineExecutionStartConditionEnum `json:"pipelineExecutionStartCondition,omitempty"`
	ScheduleExpression              *string                                     `json:"scheduleExpression,omitempty"`
	Timezone                        *string                                     `json:"timezone,omitempty"`
}

// UpdateImagePipelineRequestBodyStatusEnum - The status of the image pipeline.
type UpdateImagePipelineRequestBodyStatusEnum string

const (
	UpdateImagePipelineRequestBodyStatusEnumDisabled UpdateImagePipelineRequestBodyStatusEnum = "DISABLED"
	UpdateImagePipelineRequestBodyStatusEnumEnabled  UpdateImagePipelineRequestBodyStatusEnum = "ENABLED"
)

func (e *UpdateImagePipelineRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DISABLED":
		fallthrough
	case "ENABLED":
		*e = UpdateImagePipelineRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateImagePipelineRequestBodyStatusEnum: %s", s)
	}
}

type UpdateImagePipelineRequestBody struct {
	// The idempotency token used to make this request idempotent.
	ClientToken string `json:"clientToken"`
	// The Amazon Resource Name (ARN) of the container pipeline to update.
	ContainerRecipeArn *string `json:"containerRecipeArn,omitempty"`
	// The description of the image pipeline.
	Description *string `json:"description,omitempty"`
	// The Amazon Resource Name (ARN) of the distribution configuration that will be used to configure and distribute images updated by this image pipeline.
	DistributionConfigurationArn *string `json:"distributionConfigurationArn,omitempty"`
	//  Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default.
	EnhancedImageMetadataEnabled *bool `json:"enhancedImageMetadataEnabled,omitempty"`
	// The Amazon Resource Name (ARN) of the image pipeline that you want to update.
	ImagePipelineArn string `json:"imagePipelineArn"`
	// The Amazon Resource Name (ARN) of the image recipe that will be used to configure images updated by this image pipeline.
	ImageRecipeArn *string `json:"imageRecipeArn,omitempty"`
	// Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it.
	ImageTestsConfiguration *UpdateImagePipelineRequestBodyImageTestsConfiguration `json:"imageTestsConfiguration,omitempty"`
	// The Amazon Resource Name (ARN) of the infrastructure configuration that will be used to build images updated by this image pipeline.
	InfrastructureConfigurationArn string `json:"infrastructureConfigurationArn"`
	// A schedule configures how often and when a pipeline will automatically create a new image.
	Schedule *UpdateImagePipelineRequestBodySchedule `json:"schedule,omitempty"`
	// The status of the image pipeline.
	Status *UpdateImagePipelineRequestBodyStatusEnum `json:"status,omitempty"`
}

type UpdateImagePipelineRequest struct {
	Headers UpdateImagePipelineHeaders
	Request UpdateImagePipelineRequestBody `request:"mediaType=application/json"`
}

type UpdateImagePipelineResponse struct {
	// CallRateLimitExceededException
	CallRateLimitExceededException interface{}
	// ClientException
	ClientException interface{}
	ContentType     string
	// ForbiddenException
	ForbiddenException interface{}
	// IdempotentParameterMismatchException
	IdempotentParameterMismatchException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ServiceException
	ServiceException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	// Success
	UpdateImagePipelineResponse *shared.UpdateImagePipelineResponse
}
