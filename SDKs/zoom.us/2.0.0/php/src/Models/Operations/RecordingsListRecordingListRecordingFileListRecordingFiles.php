<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * RecordingsListRecordingListRecordingFileListRecordingFiles - Recording file object.
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class RecordingsListRecordingListRecordingFileListRecordingFiles
{
    /**
     * The time at which recording was deleted. Returned in the response only for trash query.
     * 
     * @var ?string $deletedTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('deleted_time')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $deletedTime = null;
    
    /**
     * The URL using which the recording file can be downloaded. **To access a private or password protected cloud recording of a user in your account, you can use a [Zoom JWT App Type](https://marketplace.zoom.us/docs/guides/getting-started/app-types/create-jwt-app). Use the generated JWT token as the value of the `access_token` query parameter and include this query parameter at the end of the URL as shown in the example.**  
     * 
     * <br>
     * Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ JWT Token }}`
     * 
     * **Similarly, if the user has installed your OAuth app that contains recording scope(s), you can also use the user's [OAuth access token](https://marketplace.zoom.us/docs/guides/auth/oauth) to download the Cloud Recording.**<br>
     * 
     * Example: `https://api.zoom.us/recording/download/{{ Download Path }}?access_token={{ OAuth Access Token }}`
     * 
     * 
     * 
     * @var ?string $downloadUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('download_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $downloadUrl = null;
    
    /**
     * The recording file size.
     * 
     * @var ?float $fileSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('file_size')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $fileSize = null;
    
    /**
     * The recording file type. The value of this field could be one of the following:<br>
     * 
     * `MP4`: Video file of the recording.<br>`M4A` Audio-only file of the recording.<br>`TIMELINE`: Timestamp file of the recording in JSON file format. To get a timeline file, the "Add a timestamp to the recording" setting must be enabled in the [recording settings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-recording#h_3f14c3a4-d16b-4a3c-bbe5-ef7d24500048). The time will display in the host's timezone, set on their Zoom profile.
     * <br> `TRANSCRIPT`: Transcription file of the recording in VTT format.<br> `CHAT`: A TXT file containing in-meeting chat messages that were sent during the meeting.<br>`CC`: File containing closed captions of the recording in VTT file format.<br>`CSV`: File containing polling data in csv format.
     * 
     * <br>
     * 
     * A recording file object with file type of either `CC` or `TIMELINE` **does not have** the following properties:<br>
     * 	`id`, `status`, `file_size`, `recording_type`, and `play_url`.
     * 
     * @var ?string $fileType
     */
	#[\JMS\Serializer\Annotation\SerializedName('file_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fileType = null;
    
    /**
     * The recording file ID. Included in the response of general query.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The meeting ID. 
     * 
     * @var ?string $meetingId
     */
	#[\JMS\Serializer\Annotation\SerializedName('meeting_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $meetingId = null;
    
    /**
     * The URL using which a recording file can be played.
     * 
     * @var ?string $playUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('play_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $playUrl = null;
    
    /**
     * The recording end time. Response in general query.
     * 
     * @var ?string $recordingEnd
     */
	#[\JMS\Serializer\Annotation\SerializedName('recording_end')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recordingEnd = null;
    
    /**
     * The recording start time.
     * 
     * @var ?string $recordingStart
     */
	#[\JMS\Serializer\Annotation\SerializedName('recording_start')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recordingStart = null;
    
    /**
     * The recording type. The value of this field can be one of the following:<br>`shared_screen_with_speaker_view(CC)`<br>`shared_screen_with_speaker_view`<br>`shared_screen_with_gallery_view`<br>`speaker_view`<br>`gallery_view`<br>`shared_screen`<br>`audio_only`<br>`audio_transcript`<br>`chat_file`<br>`active_speaker`<br>`poll`
     * 
     * @var ?string $recordingType
     */
	#[\JMS\Serializer\Annotation\SerializedName('recording_type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $recordingType = null;
    
    /**
     * The recording status.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\RecordingsListRecordingListRecordingFileListRecordingFilesStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\RecordingsListRecordingListRecordingFileListRecordingFilesStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?RecordingsListRecordingListRecordingFileListRecordingFilesStatusEnum $status = null;
    
	public function __construct()
	{
		$this->deletedTime = null;
		$this->downloadUrl = null;
		$this->fileSize = null;
		$this->fileType = null;
		$this->id = null;
		$this->meetingId = null;
		$this->playUrl = null;
		$this->recordingEnd = null;
		$this->recordingStart = null;
		$this->recordingType = null;
		$this->status = null;
	}
}
