"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Statuses:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_device_switch_ports_statuses(self, request: operations.GetDeviceSwitchPortsStatusesRequest) -> operations.GetDeviceSwitchPortsStatusesResponse:
        r"""Return the status for all the ports of a switch
        Return the status for all the ports of a switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceSwitchPortsStatusesRequest, base_url, '/devices/{serial}/switch/ports/statuses', request)
        
        query_params = utils.get_query_params(operations.GetDeviceSwitchPortsStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceSwitchPortsStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetDeviceSwitchPortsStatuses200ApplicationJSON]])
                res.get_device_switch_ports_statuses_200_application_json_objects = out

        return res

    def get_device_switch_ports_statuses_packets(self, request: operations.GetDeviceSwitchPortsStatusesPacketsRequest) -> operations.GetDeviceSwitchPortsStatusesPacketsResponse:
        r"""Return the packet counters for all the ports of a switch
        Return the packet counters for all the ports of a switch
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceSwitchPortsStatusesPacketsRequest, base_url, '/devices/{serial}/switch/ports/statuses/packets', request)
        
        query_params = utils.get_query_params(operations.GetDeviceSwitchPortsStatusesPacketsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceSwitchPortsStatusesPacketsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_device_switch_ports_statuses_packets_200_application_json_objects = out

        return res

    def get_organization_appliance_uplink_statuses(self, request: operations.GetOrganizationApplianceUplinkStatusesRequest) -> operations.GetOrganizationApplianceUplinkStatusesResponse:
        r"""List the uplink status of every Meraki MX and Z series appliances in the organization
        List the uplink status of every Meraki MX and Z series appliances in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationApplianceUplinkStatusesRequest, base_url, '/organizations/{organizationId}/appliance/uplink/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationApplianceUplinkStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationApplianceUplinkStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_appliance_uplink_statuses_200_application_json_objects = out

        return res

    def get_organization_appliance_vpn_statuses(self, request: operations.GetOrganizationApplianceVpnStatusesRequest) -> operations.GetOrganizationApplianceVpnStatusesResponse:
        r"""Show VPN status for networks in an organization
        Show VPN status for networks in an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationApplianceVpnStatusesRequest, base_url, '/organizations/{organizationId}/appliance/vpn/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationApplianceVpnStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationApplianceVpnStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_appliance_vpn_statuses_200_application_json_objects = out

        return res

    def get_organization_camera_onboarding_statuses(self, request: operations.GetOrganizationCameraOnboardingStatusesRequest) -> operations.GetOrganizationCameraOnboardingStatusesResponse:
        r"""Fetch onboarding status of cameras
        Fetch onboarding status of cameras
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationCameraOnboardingStatusesRequest, base_url, '/organizations/{organizationId}/camera/onboarding/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationCameraOnboardingStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationCameraOnboardingStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_camera_onboarding_statuses_200_application_json_objects = out

        return res

    def get_organization_cellular_gateway_uplink_statuses(self, request: operations.GetOrganizationCellularGatewayUplinkStatusesRequest) -> operations.GetOrganizationCellularGatewayUplinkStatusesResponse:
        r"""List the uplink status of every Meraki MG cellular gateway in the organization
        List the uplink status of every Meraki MG cellular gateway in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationCellularGatewayUplinkStatusesRequest, base_url, '/organizations/{organizationId}/cellularGateway/uplink/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationCellularGatewayUplinkStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationCellularGatewayUplinkStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationCellularGatewayUplinkStatuses200ApplicationJSON]])
                res.get_organization_cellular_gateway_uplink_statuses_200_application_json_objects = out

        return res

    def get_organization_devices_power_modules_statuses_by_device(self, request: operations.GetOrganizationDevicesPowerModulesStatusesByDeviceRequest) -> operations.GetOrganizationDevicesPowerModulesStatusesByDeviceResponse:
        r"""List the power status information for devices in an organization
        List the power status information for devices in an organization. The data returned by this endpoint is updated every 5 minutes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDevicesPowerModulesStatusesByDeviceRequest, base_url, '/organizations/{organizationId}/devices/powerModules/statuses/byDevice', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationDevicesPowerModulesStatusesByDeviceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDevicesPowerModulesStatusesByDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON]])
                res.get_organization_devices_power_modules_statuses_by_device_200_application_json_objects = out

        return res

    def get_organization_devices_statuses(self, request: operations.GetOrganizationDevicesStatusesRequest) -> operations.GetOrganizationDevicesStatusesResponse:
        r"""List the status of every Meraki device in the organization
        List the status of every Meraki device in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDevicesStatusesRequest, base_url, '/organizations/{organizationId}/devices/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationDevicesStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDevicesStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationDevicesStatuses200ApplicationJSON])
                res.get_organization_devices_statuses_200_application_json_object = out

        return res

    def get_organization_devices_statuses_overview(self, request: operations.GetOrganizationDevicesStatusesOverviewRequest) -> operations.GetOrganizationDevicesStatusesOverviewResponse:
        r"""Return an overview of current device statuses
        Return an overview of current device statuses
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDevicesStatusesOverviewRequest, base_url, '/organizations/{organizationId}/devices/statuses/overview', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationDevicesStatusesOverviewRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDevicesStatusesOverviewResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOrganizationDevicesStatusesOverview200ApplicationJSON])
                res.get_organization_devices_statuses_overview_200_application_json_object = out

        return res

    def get_organization_uplinks_statuses(self, request: operations.GetOrganizationUplinksStatusesRequest) -> operations.GetOrganizationUplinksStatusesResponse:
        r"""List the uplink status of every Meraki MX, MG and Z series devices in the organization
        List the uplink status of every Meraki MX, MG and Z series devices in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationUplinksStatusesRequest, base_url, '/organizations/{organizationId}/uplinks/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationUplinksStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationUplinksStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationUplinksStatuses200ApplicationJSON]])
                res.get_organization_uplinks_statuses_200_application_json_objects = out

        return res

    def get_organization_wireless_devices_ethernet_statuses(self, request: operations.GetOrganizationWirelessDevicesEthernetStatusesRequest) -> operations.GetOrganizationWirelessDevicesEthernetStatusesResponse:
        r"""Endpoint to see power status for wireless devices
        Endpoint to see power status for wireless devices
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationWirelessDevicesEthernetStatusesRequest, base_url, '/organizations/{organizationId}/wireless/devices/ethernet/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationWirelessDevicesEthernetStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationWirelessDevicesEthernetStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationWirelessDevicesEthernetStatuses200ApplicationJSON]])
                res.get_organization_wireless_devices_ethernet_statuses_200_application_json_objects = out

        return res

    def update_organization_camera_onboarding_statuses(self, request: operations.UpdateOrganizationCameraOnboardingStatusesRequest) -> operations.UpdateOrganizationCameraOnboardingStatusesResponse:
        r"""Notify that credential handoff to camera has completed
        Notify that credential handoff to camera has completed
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationCameraOnboardingStatusesRequest, base_url, '/organizations/{organizationId}/camera/onboarding/statuses', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationCameraOnboardingStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_organization_camera_onboarding_statuses_200_application_json_object = out

        return res

    