"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import listactivitiesresponse as shared_listactivitiesresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class AppsactivityActivitiesListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class AppsactivityActivitiesListGroupingStrategyEnum(str, Enum):
    r"""Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object."""
    DRIVE_UI = 'driveUi'
    NONE = 'none'


@dataclasses.dataclass
class AppsactivityActivitiesListRequest:
    
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    drive_ancestor_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'drive.ancestorId', 'style': 'form', 'explode': True }})
    r"""Identifies the Drive folder containing the items for which to return activities."""  
    drive_file_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'drive.fileId', 'style': 'form', 'explode': True }})
    r"""Identifies the Drive item to return activities for."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    grouping_strategy: Optional[AppsactivityActivitiesListGroupingStrategyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'groupingStrategy', 'style': 'form', 'explode': True }})
    r"""Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""The maximum number of events to return on a page. The response includes a continuation token if there are more events."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""A token to retrieve a specific page of results."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""The Google service from which to return activities. Possible values of source are:
    - drive.google.com
    """  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userId', 'style': 'form', 'explode': True }})
    r"""The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    

@dataclasses.dataclass
class AppsactivityActivitiesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_activities_response: Optional[shared_listactivitiesresponse.ListActivitiesResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    