<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Datafeeds 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchResponse
     */
	public function contentDatafeedsCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/datafeeds/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "datafeedsCustomBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datafeedsCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DatafeedsCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a datafeed configuration from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteResponse
     */
	public function contentDatafeedsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/datafeeds/{datafeedId}', \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the Products service to update your product data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowResponse
     */
	public function contentDatafeedsFetchnow(
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/datafeeds/{datafeedId}/fetchNow', \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsFetchnowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datafeedsFetchNowResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DatafeedsFetchNowResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a datafeed configuration from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetResponse
     */
	public function contentDatafeedsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/datafeeds/{datafeedId}', \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datafeed = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Datafeed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Registers a datafeed configuration with your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertResponse
     */
	public function contentDatafeedsInsert(
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/datafeeds', \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "datafeed", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datafeed = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Datafeed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the configurations for datafeeds in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListResponse
     */
	public function contentDatafeedsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/datafeeds', \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datafeedsListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DatafeedsListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateResponse
     */
	public function contentDatafeedsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/datafeeds/{datafeedId}', \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "datafeed", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentDatafeedsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->datafeed = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Datafeed', 'json');
            }
        }

        return $response;
    }
}