<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Certificate - A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Certificate
{
    /**
     * An error encountered by the Batch service when deleting a certificate.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DeleteCertificateError $deleteCertificateError
     */
	#[\JMS\Serializer\Annotation\SerializedName('deleteCertificateError')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DeleteCertificateError')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DeleteCertificateError $deleteCertificateError = null;
    
    /**
     * The previous state of the certificate. This property is not set if the certificate is in its initial Active state.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertificatePreviousStateEnum $previousState
     */
	#[\JMS\Serializer\Annotation\SerializedName('previousState')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificatePreviousStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificatePreviousStateEnum $previousState = null;
    
    /**
     * The time at which the certificate entered its previous state. This property is not set if the certificate is in its initial Active state.
     * 
     * @var ?\DateTime $previousStateTransitionTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('previousStateTransitionTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $previousStateTransitionTime = null;
    
    /**
     * The public part of the certificate as a base-64 encoded .cer file.
     * 
     * @var ?string $publicData
     */
	#[\JMS\Serializer\Annotation\SerializedName('publicData')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $publicData = null;
    
    /**
     * The current state of the certificate.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CertificateStateEnum $state
     */
	#[\JMS\Serializer\Annotation\SerializedName('state')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\CertificateStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CertificateStateEnum $state = null;
    
    /**
     * The time at which the certificate entered its current state.
     * 
     * @var ?\DateTime $stateTransitionTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('stateTransitionTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $stateTransitionTime = null;
    
    /**
     * The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
     * 
     * @var ?string $thumbprint
     */
	#[\JMS\Serializer\Annotation\SerializedName('thumbprint')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $thumbprint = null;
    
    /**
     * The algorithm used to derive the thumbprint. This must be sha1.
     * 
     * @var ?string $thumbprintAlgorithm
     */
	#[\JMS\Serializer\Annotation\SerializedName('thumbprintAlgorithm')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $thumbprintAlgorithm = null;
    
    /**
     * The URL of the certificate.
     * 
     * @var ?string $url
     */
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $url = null;
    
	public function __construct()
	{
		$this->deleteCertificateError = null;
		$this->previousState = null;
		$this->previousStateTransitionTime = null;
		$this->publicData = null;
		$this->state = null;
		$this->stateTransitionTime = null;
		$this->thumbprint = null;
		$this->thumbprintAlgorithm = null;
		$this->url = null;
	}
}
