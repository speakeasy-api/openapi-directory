/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum StartQueryXAmzTargetEnum {
  ComAmazonawsCloudtrailV20131101CloudTrail20131101StartQuery = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.StartQuery",
}

export class StartQueryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  startQueryRequest: shared.StartQueryRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: StartQueryXAmzTargetEnum;
}

export class StartQueryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * EventDataStoreARNInvalidException
   */
  @SpeakeasyMetadata()
  eventDataStoreARNInvalidException?: any;

  /**
   * EventDataStoreNotFoundException
   */
  @SpeakeasyMetadata()
  eventDataStoreNotFoundException?: any;

  /**
   * InactiveEventDataStoreException
   */
  @SpeakeasyMetadata()
  inactiveEventDataStoreException?: any;

  /**
   * InsufficientEncryptionPolicyException
   */
  @SpeakeasyMetadata()
  insufficientEncryptionPolicyException?: any;

  /**
   * InsufficientS3BucketPolicyException
   */
  @SpeakeasyMetadata()
  insufficientS3BucketPolicyException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * InvalidQueryStatementException
   */
  @SpeakeasyMetadata()
  invalidQueryStatementException?: any;

  /**
   * InvalidS3BucketNameException
   */
  @SpeakeasyMetadata()
  invalidS3BucketNameException?: any;

  /**
   * InvalidS3PrefixException
   */
  @SpeakeasyMetadata()
  invalidS3PrefixException?: any;

  /**
   * MaxConcurrentQueriesException
   */
  @SpeakeasyMetadata()
  maxConcurrentQueriesException?: any;

  /**
   * NoManagementAccountSLRExistsException
   */
  @SpeakeasyMetadata()
  noManagementAccountSLRExistsException?: any;

  /**
   * OperationNotPermittedException
   */
  @SpeakeasyMetadata()
  operationNotPermittedException?: any;

  /**
   * S3BucketDoesNotExistException
   */
  @SpeakeasyMetadata()
  s3BucketDoesNotExistException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  startQueryResponse?: shared.StartQueryResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnsupportedOperationException
   */
  @SpeakeasyMetadata()
  unsupportedOperationException?: any;
}
