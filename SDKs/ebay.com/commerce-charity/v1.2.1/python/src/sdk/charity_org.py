"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CharityOrg:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_charity_org(self, request: operations.GetCharityOrgRequest, security: operations.GetCharityOrgSecurity) -> operations.GetCharityOrgResponse:
        r"""This call is used to retrieve detailed information about supported charitable organizations. It allows users to retrieve the details for a specific charitable organization using its charity organization ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCharityOrgRequest, base_url, '/charity_org/{charity_org_id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCharityOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CharityOrg])
                res.charity_org = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def get_charity_orgs(self, request: operations.GetCharityOrgsRequest, security: operations.GetCharityOrgsSecurity) -> operations.GetCharityOrgsResponse:
        r"""This call is used to search for supported charitable organizations. It allows users to search for a specific charitable organization, or for multiple charitable organizations, from a particular charitable domain and/or geographical region, or by using search criteria.<br /><br />The call returns paginated search results containing the charitable organizations that match the specified criteria."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/charity_org'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetCharityOrgsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCharityOrgsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CharitySearchResponse])
                res.charity_search_response = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    