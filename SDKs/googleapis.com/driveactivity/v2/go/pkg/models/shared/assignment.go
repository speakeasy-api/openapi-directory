// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssignmentSubtypeEnum - The sub-type of this event.
type AssignmentSubtypeEnum string

const (
	AssignmentSubtypeEnumSubtypeUnspecified AssignmentSubtypeEnum = "SUBTYPE_UNSPECIFIED"
	AssignmentSubtypeEnumAdded              AssignmentSubtypeEnum = "ADDED"
	AssignmentSubtypeEnumDeleted            AssignmentSubtypeEnum = "DELETED"
	AssignmentSubtypeEnumReplyAdded         AssignmentSubtypeEnum = "REPLY_ADDED"
	AssignmentSubtypeEnumReplyDeleted       AssignmentSubtypeEnum = "REPLY_DELETED"
	AssignmentSubtypeEnumResolved           AssignmentSubtypeEnum = "RESOLVED"
	AssignmentSubtypeEnumReopened           AssignmentSubtypeEnum = "REOPENED"
	AssignmentSubtypeEnumReassigned         AssignmentSubtypeEnum = "REASSIGNED"
)

func (e AssignmentSubtypeEnum) ToPointer() *AssignmentSubtypeEnum {
	return &e
}

func (e *AssignmentSubtypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUBTYPE_UNSPECIFIED":
		fallthrough
	case "ADDED":
		fallthrough
	case "DELETED":
		fallthrough
	case "REPLY_ADDED":
		fallthrough
	case "REPLY_DELETED":
		fallthrough
	case "RESOLVED":
		fallthrough
	case "REOPENED":
		fallthrough
	case "REASSIGNED":
		*e = AssignmentSubtypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssignmentSubtypeEnum: %v", v)
	}
}

// Assignment - A comment with an assignment.
type Assignment struct {
	// Information about an end user.
	AssignedUser *User `json:"assignedUser,omitempty"`
	// The sub-type of this event.
	Subtype *AssignmentSubtypeEnum `json:"subtype,omitempty"`
}
