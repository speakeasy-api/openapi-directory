/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Job - Job represents the configuration of a single job. A job an immutable resource that references a container image which is run to completion.
 */
public class Job {
    /**
     * Optional. APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources +optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public String apiVersion;
    public Job withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * Optional. Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds +optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Job withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public ObjectMeta metadata;
    public Job withMetadata(ObjectMeta metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * JobSpec describes how the job execution will look like.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec")
    public JobSpec spec;
    public Job withSpec(JobSpec spec) {
        this.spec = spec;
        return this;
    }
    
    /**
     * JobStatus represents the current state of a Job.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public JobStatus status;
    public Job withStatus(JobStatus status) {
        this.status = status;
        return this;
    }
    
}
