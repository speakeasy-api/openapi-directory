"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nodepermissions as shared_nodepermissions
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RoomGroupsAddBatchRequestItemNewGroupMemberAcceptanceEnum(str, Enum):
    r"""Behaviour when new users are added to the group:
    
    * `autoallow`
    
    * `pending`
    
    
    
    Only relevant if `adminGroupIds` has items.
    """
    AUTOALLOW = 'autoallow'
    PENDING = 'pending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RoomGroupsAddBatchRequestItem:
    r"""Request item model for granting group to the room"""
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier for the group"""  
    permissions: shared_nodepermissions.NodePermissions = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions') }})
    r"""Node permissions"""  
    new_group_member_acceptance: Optional[RoomGroupsAddBatchRequestItemNewGroupMemberAcceptanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newGroupMemberAcceptance'), 'exclude': lambda f: f is None }})
    r"""Behaviour when new users are added to the group:
    
    * `autoallow`
    
    * `pending`
    
    
    
    Only relevant if `adminGroupIds` has items.
    """  
    