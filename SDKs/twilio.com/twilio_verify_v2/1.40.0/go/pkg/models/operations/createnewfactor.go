// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var CreateNewFactorServerList = []string{
	"https://verify.twilio.com",
}

type CreateNewFactorSecurity struct {
	AccountSidAuthToken shared.SchemeAccountSidAuthToken `security:"scheme,type=http,subtype=basic"`
}

type CreateNewFactorPathParams struct {
	// Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
	Identity string `pathParam:"style=simple,explode=false,name=Identity"`
	// The unique SID identifier of the Service.
	ServiceSid string `pathParam:"style=simple,explode=false,name=ServiceSid"`
}

type CreateNewFactorCreateNewFactorRequest struct {
	// The algorithm used when `factor_type` is `push`. Algorithm supported: `ES256`
	BindingAlg *string `form:"name=Binding.Alg"`
	// The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.
	//
	// Required when `factor_type` is `push`
	BindingPublicKey *string `form:"name=Binding.PublicKey"`
	// The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.
	//
	// Used when `factor_type` is `totp`
	BindingSecret *string                                 `form:"name=Binding.Secret"`
	ConfigAlg     *shared.NewFactorEnumTotpAlgorithmsEnum `form:"name=Config.Alg"`
	// The ID that uniquely identifies your app in the Google or Apple store, such as `com.example.myapp`. It can be up to 100 characters long.
	//
	// Required when `factor_type` is `push`.
	ConfigAppID *string `form:"name=Config.AppId"`
	// Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property `totp.code_length`. If not configured defaults to 6.
	//
	// Used when `factor_type` is `totp`
	ConfigCodeLength           *int64                                         `form:"name=Config.CodeLength"`
	ConfigNotificationPlatform *shared.NewFactorEnumNotificationPlatformsEnum `form:"name=Config.NotificationPlatform"`
	// For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.
	//
	// Required when `factor_type` is `push`.
	ConfigNotificationToken *string `form:"name=Config.NotificationToken"`
	// The Verify Push SDK version used to configure the factor
	//
	// Required when `factor_type` is `push`
	ConfigSDKVersion *string `form:"name=Config.SdkVersion"`
	// The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property `totp.skew`. If not configured defaults to 1.
	//
	// Used when `factor_type` is `totp`
	ConfigSkew *int64 `form:"name=Config.Skew"`
	// Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property `totp.time_step`. Defaults to 30 seconds if not configured.
	//
	// Used when `factor_type` is `totp`
	ConfigTimeStep *int64                              `form:"name=Config.TimeStep"`
	FactorType     shared.NewFactorEnumFactorTypesEnum `form:"name=FactorType"`
	// The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors.
	// For `factor_type` `push`, this could be a device name.
	// For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property.
	// At the same time, we recommend avoiding providing PII.
	FriendlyName string `form:"name=FriendlyName"`
	// Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{"os": "Android"}`. Can be up to 1024 characters in length.
	Metadata interface{} `form:"name=Metadata"`
}

type CreateNewFactorRequest struct {
	PathParams CreateNewFactorPathParams
	Request    *CreateNewFactorCreateNewFactorRequest `request:"mediaType=application/x-www-form-urlencoded"`
	Security   CreateNewFactorSecurity
	ServerURL  *string
}

type CreateNewFactorResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Created
	VerifyV2ServiceEntityNewFactor *shared.VerifyV2ServiceEntityNewFactor
}
