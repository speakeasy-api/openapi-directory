"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateNetworkVlanResponse = exports.UpdateNetworkVlanRequest = exports.UpdateNetworkVlanRequestBody = exports.UpdateNetworkVlanRequestBodyReservedIpRanges = exports.UpdateNetworkVlanRequestBodyDhcpOptions = exports.UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum = exports.UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = exports.UpdateNetworkVlanRequestBodyDhcpHandlingEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
 */
var UpdateNetworkVlanRequestBodyDhcpHandlingEnum;
(function (UpdateNetworkVlanRequestBodyDhcpHandlingEnum) {
    UpdateNetworkVlanRequestBodyDhcpHandlingEnum["DoNotRespondToDHCPRequests"] = "Do not respond to DHCP requests";
    UpdateNetworkVlanRequestBodyDhcpHandlingEnum["RelayDHCPToAnotherServer"] = "Relay DHCP to another server";
    UpdateNetworkVlanRequestBodyDhcpHandlingEnum["RunADHCPServer"] = "Run a DHCP server";
})(UpdateNetworkVlanRequestBodyDhcpHandlingEnum = exports.UpdateNetworkVlanRequestBodyDhcpHandlingEnum || (exports.UpdateNetworkVlanRequestBodyDhcpHandlingEnum = {}));
/**
 * The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
 */
var UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum;
(function (UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum) {
    UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum["OneDay"] = "1 day";
    UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum["OneHour"] = "1 hour";
    UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum["OneWeek"] = "1 week";
    UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum["TwelveHours"] = "12 hours";
    UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum["ThirtyMinutes"] = "30 minutes";
    UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum["FourHours"] = "4 hours";
})(UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = exports.UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum || (exports.UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = {}));
/**
 * The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
 */
var UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum;
(function (UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum) {
    UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum["Hex"] = "hex";
    UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum["Integer"] = "integer";
    UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum["Ip"] = "ip";
    UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum["Text"] = "text";
})(UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum = exports.UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum || (exports.UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum = {}));
var UpdateNetworkVlanRequestBodyDhcpOptions = /** @class */ (function (_super) {
    __extends(UpdateNetworkVlanRequestBodyDhcpOptions, _super);
    function UpdateNetworkVlanRequestBodyDhcpOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBodyDhcpOptions.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBodyDhcpOptions.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBodyDhcpOptions.prototype, "value", void 0);
    return UpdateNetworkVlanRequestBodyDhcpOptions;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkVlanRequestBodyDhcpOptions = UpdateNetworkVlanRequestBodyDhcpOptions;
var UpdateNetworkVlanRequestBodyReservedIpRanges = /** @class */ (function (_super) {
    __extends(UpdateNetworkVlanRequestBodyReservedIpRanges, _super);
    function UpdateNetworkVlanRequestBodyReservedIpRanges() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBodyReservedIpRanges.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "end" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBodyReservedIpRanges.prototype, "end", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "start" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBodyReservedIpRanges.prototype, "start", void 0);
    return UpdateNetworkVlanRequestBodyReservedIpRanges;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkVlanRequestBodyReservedIpRanges = UpdateNetworkVlanRequestBodyReservedIpRanges;
var UpdateNetworkVlanRequestBody = /** @class */ (function (_super) {
    __extends(UpdateNetworkVlanRequestBody, _super);
    function UpdateNetworkVlanRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "applianceIp" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "applianceIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootFilename" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "dhcpBootFilename", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootNextServer" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "dhcpBootNextServer", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpBootOptionsEnabled" }),
        __metadata("design:type", Boolean)
    ], UpdateNetworkVlanRequestBody.prototype, "dhcpBootOptionsEnabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpHandling" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "dhcpHandling", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpLeaseTime" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "dhcpLeaseTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: UpdateNetworkVlanRequestBodyDhcpOptions }),
        (0, class_transformer_1.Expose)({ name: "dhcpOptions" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkVlanRequestBodyDhcpOptions; }),
        __metadata("design:type", Array)
    ], UpdateNetworkVlanRequestBody.prototype, "dhcpOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dhcpRelayServerIps" }),
        __metadata("design:type", Array)
    ], UpdateNetworkVlanRequestBody.prototype, "dhcpRelayServerIps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dnsNameservers" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "dnsNameservers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fixedIpAssignments" }),
        __metadata("design:type", Object)
    ], UpdateNetworkVlanRequestBody.prototype, "fixedIpAssignments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "groupPolicyId" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "groupPolicyId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: UpdateNetworkVlanRequestBodyReservedIpRanges }),
        (0, class_transformer_1.Expose)({ name: "reservedIpRanges" }),
        (0, class_transformer_1.Type)(function () { return UpdateNetworkVlanRequestBodyReservedIpRanges; }),
        __metadata("design:type", Array)
    ], UpdateNetworkVlanRequestBody.prototype, "reservedIpRanges", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnet" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "subnet", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vpnNatSubnet" }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequestBody.prototype, "vpnNatSubnet", void 0);
    return UpdateNetworkVlanRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkVlanRequestBody = UpdateNetworkVlanRequestBody;
var UpdateNetworkVlanRequest = /** @class */ (function (_super) {
    __extends(UpdateNetworkVlanRequest, _super);
    function UpdateNetworkVlanRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateNetworkVlanRequestBody)
    ], UpdateNetworkVlanRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=networkId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequest.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=vlanId",
        }),
        __metadata("design:type", String)
    ], UpdateNetworkVlanRequest.prototype, "vlanId", void 0);
    return UpdateNetworkVlanRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkVlanRequest = UpdateNetworkVlanRequest;
var UpdateNetworkVlanResponse = /** @class */ (function (_super) {
    __extends(UpdateNetworkVlanResponse, _super);
    function UpdateNetworkVlanResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateNetworkVlanResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateNetworkVlanResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkVlanResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateNetworkVlanResponse.prototype, "updateNetworkVlan200ApplicationJSONObject", void 0);
    return UpdateNetworkVlanResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateNetworkVlanResponse = UpdateNetworkVlanResponse;
