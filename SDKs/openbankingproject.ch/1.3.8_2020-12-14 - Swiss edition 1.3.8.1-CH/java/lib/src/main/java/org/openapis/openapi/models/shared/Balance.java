/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Balance - A single balance element.
 * 
 */
public class Balance {
    @JsonProperty("balanceAmount")
    public Amount balanceAmount;

    public Balance withBalanceAmount(Amount balanceAmount) {
        this.balanceAmount = balanceAmount;
        return this;
    }
    
    /**
     * The following balance types are defined:
     *   - "closingBooked":
     *     Balance of the account at the end of the pre-agreed account reporting period.
     *     It is the sum of the opening booked balance at the beginning of the period and all entries booked
     *     to the account during the pre-agreed account reporting period.
     * 
     *     For card-accounts, this is composed of
     * 
     *       - invoiced, but not yet paid entries
     * 
     *   - "expected":
     *     Balance composed of booked entries and pending items known at the time of calculation,
     *     which projects the end of day balance if everything is booked on the account and no other entry is posted.
     *     
     *     For card accounts, this is composed of:
     *       - invoiced, but not yet paid entries
     *       - not yet invoiced but already booked entries and
     *       - pending items (not yet booked)
     *     
     *     For card-accounts:
     * 
     *     "money to spend with the value of a pre-approved credit limit on the card account"
     * 
     *   - "openingBooked":
     *     Book balance of the account at the beginning of the account reporting period.
     *     It always equals the closing book balance from the previous report.
     *   - "interimAvailable":
     *     Available balance calculated in the course of the account ?servicer?s business day,
     *     at the time specified, and subject to further changes during the business day.
     *     The interim balance is calculated on the basis of booked credit and debit items during the calculation
     *     time/period specified.
     *     
     *     For card-accounts, this is composed of:
     *       - invoiced, but not yet paid entries
     *       - not yet invoiced but already booked entries
     *   - "interimBooked":
     *     Balance calculated in the course of the account servicer's business day, at the time specified,
     *     and subject to further changes during the business day.
     *     The interim balance is calculated on the basis of booked credit and debit items during the calculation time/period
     *     specified.
     *   - "forwardAvailable":
     *     Forward available balance of money that is at the disposal of the account owner on the date specified.
     *   - "nonInvoiced":
     *     Only for card accounts, to be checked yet.
     * 
     */
    @JsonProperty("balanceType")
    public BalanceTypeEnum balanceType;

    public Balance withBalanceType(BalanceTypeEnum balanceType) {
        this.balanceType = balanceType;
        return this;
    }
    
    /**
     * A flag indicating if the credit limit of the corresponding account
     * is included in the calculation of the balance, where applicable.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creditLimitIncluded")
    public Boolean creditLimitIncluded;

    public Balance withCreditLimitIncluded(Boolean creditLimitIncluded) {
        this.creditLimitIncluded = creditLimitIncluded;
        return this;
    }
    
    /**
     * This data element might be used to indicate e.g. with the expected or booked balance that no action is known
     * on the account, which is not yet booked.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastChangeDateTime")
    public OffsetDateTime lastChangeDateTime;

    public Balance withLastChangeDateTime(OffsetDateTime lastChangeDateTime) {
        this.lastChangeDateTime = lastChangeDateTime;
        return this;
    }
    
    /**
     * "entryReference" of the last commited transaction to support the TPP in identifying whether all
     * PSU transactions are already known.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastCommittedTransaction")
    public String lastCommittedTransaction;

    public Balance withLastCommittedTransaction(String lastCommittedTransaction) {
        this.lastCommittedTransaction = lastCommittedTransaction;
        return this;
    }
    
    /**
     * Indicates the date of the balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("referenceDate")
    public LocalDate referenceDate;

    public Balance withReferenceDate(LocalDate referenceDate) {
        this.referenceDate = referenceDate;
        return this;
    }
    
    public Balance(@JsonProperty("balanceAmount") Amount balanceAmount, @JsonProperty("balanceType") BalanceTypeEnum balanceType) {
        this.balanceAmount = balanceAmount;
        this.balanceType = balanceType;
  }
}
