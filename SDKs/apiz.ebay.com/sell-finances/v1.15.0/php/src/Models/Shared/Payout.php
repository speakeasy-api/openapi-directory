<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Payout - This type is used to express the details of one seller payout that is returned with the <strong>getPayout</strong> or <strong>getPayouts</strong> methods.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Payout
{
    /**
     * This type is used to express the dollar value and currency used for any transaction retrieved with the <strong>Finances API</strong>, including an order total, a seller payout, a buyer refund, or a seller credit.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Amount $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $amount = null;
    
    /**
     * This field contains additional information provided by the bank and passed on by the payment processor; e.g., the manner in which the transaction will appear on the seller's bank statement. The field is returned only when provided by the bank and processor.
     * 
     * @var ?string $bankReference
     */
	#[\JMS\Serializer\Annotation\SerializedName('bankReference')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $bankReference = null;
    
    /**
     * This timestamp indicates the date/time when eBay last attempted to process a seller payout but it failed. This field is only returned if a seller payout fails, and the <strong>payoutStatus</strong> value shows <code>RETRYABLE_FAILED</code> or <code>TERMINAL_FAILED</code>. A seller can filter on the <b>lastAttemptedPayoutDate</b> in a <b>getPayouts</b> request.
     * 
     * @var ?string $lastAttemptedPayoutDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastAttemptedPayoutDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $lastAttemptedPayoutDate = null;
    
    /**
     * This timestamp indicates when the seller payout began processing. The following format is used: <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>. For example, <code>2015-08-04T19:09:02.768Z</code>. This field is still returned even if the payout was pending but failed (<strong>payoutStatus</strong> value shows <code>RETRYABLE_FAILED</code> or <code>TERMINAL_FAILED</code>).
     * 
     * @var ?string $payoutDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('payoutDate')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payoutDate = null;
    
    /**
     * The unique identifier of the seller payout. This identifier is generated once eBay begins processing the payout to the seller's bank account.
     * 
     * @var ?string $payoutId
     */
	#[\JMS\Serializer\Annotation\SerializedName('payoutId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payoutId = null;
    
    /**
     * This type provides details about the seller's account that received (or is scheduled to receive) a payout.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PayoutInstrument $payoutInstrument
     */
	#[\JMS\Serializer\Annotation\SerializedName('payoutInstrument')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PayoutInstrument')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PayoutInstrument $payoutInstrument = null;
    
    /**
     * This field contains information provided by upstream components, based on internal and external commitments. A typical message would contain the expected arrival time of the payout.
     * 
     * @var ?string $payoutMemo
     */
	#[\JMS\Serializer\Annotation\SerializedName('payoutMemo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payoutMemo = null;
    
    /**
     * This enumeration value indicates the current status of the seller payout. For a successful payout, the value returned will be <code>SUCCEEDED</code>. See the <strong>PayoutStatusEnum</strong> type for more details on each payout status value. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:PayoutStatusEnum'>eBay API documentation</a>
     * 
     * @var ?string $payoutStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('payoutStatus')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payoutStatus = null;
    
    /**
     * This field provides more details about the current status of payout. The description returned here will correspond with enumeration value returned in the <strong>payoutStatus</strong> field. The following shows what description text might appear based on the different <strong>payoutStatus</strong> values:<ul><li><code>INITIATED</code>: <em>Preparing to send</em></li><li><code>SUCCEEDED</code>: <em>Funds sent</em></li><li><code>REVERSED</code>: <em>Waiting to retry : Money rejected by seller's bank</em></li><li><code>RETRYABLE_FAILED</code>: <em>Waiting to retry</em></li><li><code>TERMINAL_FAILED</code>: <em>Payout failed</em></li></ul>
     * 
     * @var ?string $payoutStatusDescription
     */
	#[\JMS\Serializer\Annotation\SerializedName('payoutStatusDescription')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payoutStatusDescription = null;
    
    /**
     * This type is used to express the dollar value and currency used for any transaction retrieved with the <strong>Finances API</strong>, including an order total, a seller payout, a buyer refund, or a seller credit.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Amount $totalAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('totalAmount')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $totalAmount = null;
    
    /**
     * This type is used to express the dollar value and currency used for any transaction retrieved with the <strong>Finances API</strong>, including an order total, a seller payout, a buyer refund, or a seller credit.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Amount $totalFee
     */
	#[\JMS\Serializer\Annotation\SerializedName('totalFee')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Amount')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Amount $totalFee = null;
    
    /**
     * This integer value indicates the number of monetary transactions (all orders, refunds, and credits, etc.) that have occurred with the corresponding payout. Its value should always be at least <code>1</code>, since there is at least one order per seller payout.
     * 
     * @var ?int $transactionCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('transactionCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $transactionCount = null;
    
	public function __construct()
	{
		$this->amount = null;
		$this->bankReference = null;
		$this->lastAttemptedPayoutDate = null;
		$this->payoutDate = null;
		$this->payoutId = null;
		$this->payoutInstrument = null;
		$this->payoutMemo = null;
		$this->payoutStatus = null;
		$this->payoutStatusDescription = null;
		$this->totalAmount = null;
		$this->totalFee = null;
		$this->transactionCount = null;
	}
}
