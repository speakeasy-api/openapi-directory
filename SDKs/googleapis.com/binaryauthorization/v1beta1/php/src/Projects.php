<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateResponse
     */
	public function binaryauthorizationProjectsAttestorsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/attestors', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "attestorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attestor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attestor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteResponse
     */
	public function binaryauthorizationProjectsAttestorsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListResponse
     */
	public function binaryauthorizationProjectsAttestorsList(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/attestors', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAttestorsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAttestorsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an attestor. Returns NOT_FOUND if the attestor does not exist.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateResponse
     */
	public function binaryauthorizationProjectsAttestorsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "attestorInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attestor = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attestor', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns whether the given Attestation for the given image URI was signed by the given Attestor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse
     */
	public function binaryauthorizationProjectsAttestorsValidateAttestationOccurrence(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{attestor}:validateAttestationOccurrence', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "validateAttestationOccurrenceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->validateAttestationOccurrenceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ValidateAttestationOccurrenceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicyResponse
     */
	public function binaryauthorizationProjectsPolicyGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->iamPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IamPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicyResponse
     */
	public function binaryauthorizationProjectsPolicySetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicySetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->iamPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IamPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsResponse
     */
	public function binaryauthorizationProjectsPolicyTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BinaryauthorizationProjectsPolicyTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}