/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The type of resource, for example a VPC attachment.
 */
export enum AcceptTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum {
  Vpc = "vpc",
  Vpn = "vpn",
  DirectConnectGateway = "direct-connect-gateway",
  Connect = "connect",
  Peering = "peering",
  TgwPeering = "tgw-peering",
}

/**
 * The state of the subnet association.
 */
export enum AcceptTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum {
  PendingAcceptance = "pendingAcceptance",
  Associating = "associating",
  Associated = "associated",
  Disassociating = "disassociating",
  Disassociated = "disassociated",
  Rejected = "rejected",
  Failed = "failed",
}

/**
 * Describes the subnet association with the transit gateway multicast domain.
 */
export class AcceptTransitGatewayMulticastDomainAssociationsResultAssociationsSubnets extends SpeakeasyBase {
  @SpeakeasyMetadata()
  state?: AcceptTransitGatewayMulticastDomainAssociationsResultAssociationsSubnetsStateEnum;

  @SpeakeasyMetadata()
  subnetId?: string;
}

/**
 * Information about the multicast domain associations.
 */
export class AcceptTransitGatewayMulticastDomainAssociationsResultAssociations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceId?: string;

  @SpeakeasyMetadata()
  resourceOwnerId?: string;

  @SpeakeasyMetadata()
  resourceType?: AcceptTransitGatewayMulticastDomainAssociationsResultAssociationsResourceTypeEnum;

  @SpeakeasyMetadata({
    elemType:
      AcceptTransitGatewayMulticastDomainAssociationsResultAssociationsSubnets,
  })
  subnets?: AcceptTransitGatewayMulticastDomainAssociationsResultAssociationsSubnets[];

  @SpeakeasyMetadata()
  transitGatewayAttachmentId?: string;

  @SpeakeasyMetadata()
  transitGatewayMulticastDomainId?: string;
}

/**
 * Success
 */
export class AcceptTransitGatewayMulticastDomainAssociationsResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  associations?: AcceptTransitGatewayMulticastDomainAssociationsResultAssociations;
}
