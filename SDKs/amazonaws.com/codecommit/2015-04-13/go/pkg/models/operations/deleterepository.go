// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteRepositoryXAmzTargetEnum
type DeleteRepositoryXAmzTargetEnum string

const (
	DeleteRepositoryXAmzTargetEnumCodeCommit20150413DeleteRepository DeleteRepositoryXAmzTargetEnum = "CodeCommit_20150413.DeleteRepository"
)

func (e *DeleteRepositoryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.DeleteRepository":
		*e = DeleteRepositoryXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteRepositoryXAmzTargetEnum: %s", s)
	}
}

type DeleteRepositoryHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DeleteRepositoryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteRepositoryRequest struct {
	Headers DeleteRepositoryHeaders
	Request shared.DeleteRepositoryInput `request:"mediaType=application/json"`
}

type DeleteRepositoryResponse struct {
	ContentType string
	// Success
	DeleteRepositoryOutput *shared.DeleteRepositoryOutput
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	StatusCode                      int
	RawResponse                     *http.Response
}
