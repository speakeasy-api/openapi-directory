"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import create_tweet as shared_create_tweet
from ..shared import five_hundred_error as shared_five_hundred_error
from ..shared import four_hundred_and_one_error as shared_four_hundred_and_one_error
from ..shared import four_hundred_and_three_error as shared_four_hundred_and_three_error
from ..shared import four_hundred_error as shared_four_hundred_error
from typing import Optional


@dataclasses.dataclass
class GetReportsTweetCreateRequest:
    
    end_date: int = dataclasses.field(metadata={'query_param': { 'field_name': 'end_date', 'style': 'form', 'explode': True }})
    r"""A unix timestamp. end_date will be set to the next midnight."""  
    report_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'report_name', 'style': 'form', 'explode': True }})
    r"""Name of report"""  
    start_date: int = dataclasses.field(metadata={'query_param': { 'field_name': 'start_date', 'style': 'form', 'explode': True }})
    r"""A unix timestamp. start_date will be set to the previous midnight."""  
    terms: str = dataclasses.field(metadata={'query_param': { 'field_name': 'terms', 'style': 'form', 'explode': True }})
    r"""If you are tracking a single term, then the keyword itself is suffice otherwise, tracking multiple terms must be in JSON form, example '[{\\"operator\\":\\"\\",\\"word\\":\\"http://google.com\\"},{\\"operator\\":\\"or\\",\\"word\\":\\"#test\\"},{\\"operator\\":\\"and\\",\\"word\\":\\"test2\\"}]' Which results in filtering tweets containing 'http://google.com' OR '#test' AND 'test2'. (NOTE) Make sure to URL encode the terms value for multiple terms."""  
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""Filtering options to be used when creating a filtered report. The options must be in JSON form, example: {'gender':['male'],'ages':['18-24'],'countries':['usa']}"""  
    

@dataclasses.dataclass
class GetReportsTweetCreateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    four_hundred_error: Optional[shared_four_hundred_error.FourHundredError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: Invalid API parameters, error_code_msg: API_INVALID_PARAMS}<br>{success: 0, msg: Error please include the 'action' parameter, error_code_msg: API_MISSING_ACTION_PARAMETER}"""  
    four_hundred_and_one_error: Optional[shared_four_hundred_and_one_error.FourHundredAndOneError] = dataclasses.field(default=None)
    r"""{success: 0, msg: Invalid API key, error_code_msg: API_INVALID_KEY}"""  
    four_hundred_and_three_error: Optional[shared_four_hundred_and_three_error.FourHundredAndThreeError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: you are going too fast}<br>{success: 0, msg: Not enough tokens remaining under your application, error_code_msg: API_INSUFFICIENT_TOKENS_REMAINING}"""  
    five_hundred_error: Optional[shared_five_hundred_error.FiveHundredError] = dataclasses.field(default=None)
    r"""Possible reasons include:<br>{success: 0, msg: Error getting application's credentials, error_code_msg: API_ERROR_GETTING_APPLICATION_INFO}<br>{success: 0, msg: Internal database error, error_code_msg: API_ERROR_DATABASE_INITIATION_ERROR}"""  
    create_tweet: Optional[shared_create_tweet.CreateTweet] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    