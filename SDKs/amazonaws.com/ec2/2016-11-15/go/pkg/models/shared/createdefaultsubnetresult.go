// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum - The state of a CIDR block.
type CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum string

const (
	CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociating    CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associating"
	CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumAssociated     CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "associated"
	CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociating CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociating"
	CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumDisassociated  CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "disassociated"
	CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailing        CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failing"
	CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnumFailed         CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum = "failed"
)

func (e *CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum: %s", s)
	}
}

// CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState - The state of the CIDR block.
type CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState struct {
	State         *CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum
	StatusMessage *string
}

// CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet - Describes an association between a subnet and an IPv6 CIDR block.
type CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet struct {
	AssociationID      *string
	Ipv6CidrBlock      *string
	Ipv6CidrBlockState *CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSetIpv6CidrBlockState
}

// CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum - The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
type CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum string

const (
	CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnumIPName       CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum = "ip-name"
	CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnumResourceName CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum = "resource-name"
)

func (e *CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ip-name":
		fallthrough
	case "resource-name":
		*e = CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum: %s", s)
	}
}

// CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunch - The type of hostnames to assign to instances in the subnet at launch. An instance hostname is based on the IPv4 address or ID of the instance.
type CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunch struct {
	EnableResourceNameDNSAAAARecord *bool
	EnableResourceNameDNSARecord    *bool
	HostnameType                    *CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunchHostnameTypeEnum
}

// CreateDefaultSubnetResultSubnetStateEnum - The current state of the subnet.
type CreateDefaultSubnetResultSubnetStateEnum string

const (
	CreateDefaultSubnetResultSubnetStateEnumPending   CreateDefaultSubnetResultSubnetStateEnum = "pending"
	CreateDefaultSubnetResultSubnetStateEnumAvailable CreateDefaultSubnetResultSubnetStateEnum = "available"
)

func (e *CreateDefaultSubnetResultSubnetStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "available":
		*e = CreateDefaultSubnetResultSubnetStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDefaultSubnetResultSubnetStateEnum: %s", s)
	}
}

// CreateDefaultSubnetResultSubnetTags - Describes a tag.
type CreateDefaultSubnetResultSubnetTags struct {
	Key   *string
	Value *string
}

// CreateDefaultSubnetResultSubnet - Information about the subnet.
type CreateDefaultSubnetResultSubnet struct {
	AssignIpv6AddressOnCreation   *bool
	AvailabilityZone              *string
	AvailabilityZoneID            *string
	AvailableIPAddressCount       *int64
	CidrBlock                     *string
	CustomerOwnedIpv4Pool         *string
	DefaultForAz                  *bool
	EnableDns64                   *bool
	EnableLniAtDeviceIndex        *int64
	Ipv6CidrBlockAssociationSet   []CreateDefaultSubnetResultSubnetIpv6CidrBlockAssociationSet
	Ipv6Native                    *bool
	MapCustomerOwnedIPOnLaunch    *bool
	MapPublicIPOnLaunch           *bool
	OutpostArn                    *string
	OwnerID                       *string
	PrivateDNSNameOptionsOnLaunch *CreateDefaultSubnetResultSubnetPrivateDNSNameOptionsOnLaunch
	State                         *CreateDefaultSubnetResultSubnetStateEnum
	SubnetArn                     *string
	SubnetID                      *string
	Tags                          []CreateDefaultSubnetResultSubnetTags
	VpcID                         *string
}

// CreateDefaultSubnetResult - Success
type CreateDefaultSubnetResult struct {
	Subnet *CreateDefaultSubnetResultSubnet
}
