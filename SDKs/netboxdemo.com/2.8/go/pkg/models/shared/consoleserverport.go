// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ConsoleServerPortConnectionStatusLabelEnum string

const (
	ConsoleServerPortConnectionStatusLabelEnumNotConnected ConsoleServerPortConnectionStatusLabelEnum = "Not Connected"
	ConsoleServerPortConnectionStatusLabelEnumConnected    ConsoleServerPortConnectionStatusLabelEnum = "Connected"
)

func (e *ConsoleServerPortConnectionStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Not Connected":
		fallthrough
	case "Connected":
		*e = ConsoleServerPortConnectionStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsoleServerPortConnectionStatusLabelEnum: %s", s)
	}
}

type ConsoleServerPortConnectionStatusValueEnum string

const (
	ConsoleServerPortConnectionStatusValueEnumFalse ConsoleServerPortConnectionStatusValueEnum = "false"
	ConsoleServerPortConnectionStatusValueEnumTrue  ConsoleServerPortConnectionStatusValueEnum = "true"
)

func (e *ConsoleServerPortConnectionStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = ConsoleServerPortConnectionStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsoleServerPortConnectionStatusValueEnum: %s", s)
	}
}

type ConsoleServerPortConnectionStatus struct {
	Label ConsoleServerPortConnectionStatusLabelEnum `json:"label"`
	Value ConsoleServerPortConnectionStatusValueEnum `json:"value"`
}

type ConsoleServerPortTypeLabelEnum string

const (
	ConsoleServerPortTypeLabelEnumDe9       ConsoleServerPortTypeLabelEnum = "DE-9"
	ConsoleServerPortTypeLabelEnumDb25      ConsoleServerPortTypeLabelEnum = "DB-25"
	ConsoleServerPortTypeLabelEnumRj11      ConsoleServerPortTypeLabelEnum = "RJ-11"
	ConsoleServerPortTypeLabelEnumRj12      ConsoleServerPortTypeLabelEnum = "RJ-12"
	ConsoleServerPortTypeLabelEnumRj45      ConsoleServerPortTypeLabelEnum = "RJ-45"
	ConsoleServerPortTypeLabelEnumUsbTypeA  ConsoleServerPortTypeLabelEnum = "USB Type A"
	ConsoleServerPortTypeLabelEnumUsbTypeB  ConsoleServerPortTypeLabelEnum = "USB Type B"
	ConsoleServerPortTypeLabelEnumUsbTypeC  ConsoleServerPortTypeLabelEnum = "USB Type C"
	ConsoleServerPortTypeLabelEnumUsbMiniA  ConsoleServerPortTypeLabelEnum = "USB Mini A"
	ConsoleServerPortTypeLabelEnumUsbMiniB  ConsoleServerPortTypeLabelEnum = "USB Mini B"
	ConsoleServerPortTypeLabelEnumUsbMicroA ConsoleServerPortTypeLabelEnum = "USB Micro A"
	ConsoleServerPortTypeLabelEnumUsbMicroB ConsoleServerPortTypeLabelEnum = "USB Micro B"
	ConsoleServerPortTypeLabelEnumOther     ConsoleServerPortTypeLabelEnum = "Other"
)

func (e *ConsoleServerPortTypeLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DE-9":
		fallthrough
	case "DB-25":
		fallthrough
	case "RJ-11":
		fallthrough
	case "RJ-12":
		fallthrough
	case "RJ-45":
		fallthrough
	case "USB Type A":
		fallthrough
	case "USB Type B":
		fallthrough
	case "USB Type C":
		fallthrough
	case "USB Mini A":
		fallthrough
	case "USB Mini B":
		fallthrough
	case "USB Micro A":
		fallthrough
	case "USB Micro B":
		fallthrough
	case "Other":
		*e = ConsoleServerPortTypeLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsoleServerPortTypeLabelEnum: %s", s)
	}
}

type ConsoleServerPortTypeValueEnum string

const (
	ConsoleServerPortTypeValueEnumDe9       ConsoleServerPortTypeValueEnum = "de-9"
	ConsoleServerPortTypeValueEnumDb25      ConsoleServerPortTypeValueEnum = "db-25"
	ConsoleServerPortTypeValueEnumRj11      ConsoleServerPortTypeValueEnum = "rj-11"
	ConsoleServerPortTypeValueEnumRj12      ConsoleServerPortTypeValueEnum = "rj-12"
	ConsoleServerPortTypeValueEnumRj45      ConsoleServerPortTypeValueEnum = "rj-45"
	ConsoleServerPortTypeValueEnumUsbA      ConsoleServerPortTypeValueEnum = "usb-a"
	ConsoleServerPortTypeValueEnumUsbB      ConsoleServerPortTypeValueEnum = "usb-b"
	ConsoleServerPortTypeValueEnumUsbC      ConsoleServerPortTypeValueEnum = "usb-c"
	ConsoleServerPortTypeValueEnumUsbMiniA  ConsoleServerPortTypeValueEnum = "usb-mini-a"
	ConsoleServerPortTypeValueEnumUsbMiniB  ConsoleServerPortTypeValueEnum = "usb-mini-b"
	ConsoleServerPortTypeValueEnumUsbMicroA ConsoleServerPortTypeValueEnum = "usb-micro-a"
	ConsoleServerPortTypeValueEnumUsbMicroB ConsoleServerPortTypeValueEnum = "usb-micro-b"
	ConsoleServerPortTypeValueEnumOther     ConsoleServerPortTypeValueEnum = "other"
)

func (e *ConsoleServerPortTypeValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "de-9":
		fallthrough
	case "db-25":
		fallthrough
	case "rj-11":
		fallthrough
	case "rj-12":
		fallthrough
	case "rj-45":
		fallthrough
	case "usb-a":
		fallthrough
	case "usb-b":
		fallthrough
	case "usb-c":
		fallthrough
	case "usb-mini-a":
		fallthrough
	case "usb-mini-b":
		fallthrough
	case "usb-micro-a":
		fallthrough
	case "usb-micro-b":
		fallthrough
	case "other":
		*e = ConsoleServerPortTypeValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ConsoleServerPortTypeValueEnum: %s", s)
	}
}

type ConsoleServerPortType struct {
	Label ConsoleServerPortTypeLabelEnum `json:"label"`
	Value ConsoleServerPortTypeValueEnum `json:"value"`
}

type ConsoleServerPort struct {
	Cable *NestedCable `json:"cable,omitempty"`
	// Return the appropriate serializer for the type of connected object.
	//
	ConnectedEndpoint     map[string]string                  `json:"connected_endpoint,omitempty"`
	ConnectedEndpointType *string                            `json:"connected_endpoint_type,omitempty"`
	ConnectionStatus      *ConsoleServerPortConnectionStatus `json:"connection_status,omitempty"`
	Description           *string                            `json:"description,omitempty"`
	Device                NestedDevice                       `json:"device"`
	ID                    *int64                             `json:"id,omitempty"`
	Name                  string                             `json:"name"`
	Tags                  []string                           `json:"tags,omitempty"`
	Type                  *ConsoleServerPortType             `json:"type,omitempty"`
}
