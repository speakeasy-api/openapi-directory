<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Crx 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getCrxdeStatus
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCrxdeStatusResponse
     */
	public function getCrxdeStatus(
    ): \OpenAPI\OpenAPI\Models\Operations\GetCrxdeStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crx/server/crx.default/jcr:root/.1.json');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCrxdeStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->getCrxdeStatus200PlainTextString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'plain/text')) {
                $response->getCrxdeStatus404PlainTextString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getInstallStatus
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetInstallStatusResponse
     */
	public function getInstallStatus(
    ): \OpenAPI\OpenAPI\Models\Operations\GetInstallStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crx/packmgr/installstatus.jsp');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetInstallStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->installStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstallStatus', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->getInstallStatusDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getPackageManagerServlet
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPackageManagerServletResponse
     */
	public function getPackageManagerServlet(
    ): \OpenAPI\OpenAPI\Models\Operations\GetPackageManagerServletResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crx/packmgr/service/script.html');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPackageManagerServletResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->getPackageManagerServlet404TextHTMLString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 405) {
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->getPackageManagerServlet405TextHTMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postPackageService
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceResponse
     */
	public function postPackageService(
        \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crx/packmgr/service.jsp');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostPackageServiceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->postPackageServiceDefaultTextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postPackageServiceJson
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceJsonResponse
     */
	public function postPackageServiceJson(
        \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crx/packmgr/service/.json/{path}', \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "multipart");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostPackageServiceJsonRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPackageServiceJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->postPackageServiceJSONDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postPackageUpdate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostPackageUpdateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostPackageUpdateResponse
     */
	public function postPackageUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PostPackageUpdateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostPackageUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crx/packmgr/update.jsp');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostPackageUpdateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostPackageUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->postPackageUpdateDefaultApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postSetPassword
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostSetPasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostSetPasswordResponse
     */
	public function postSetPassword(
        \OpenAPI\OpenAPI\Models\Operations\PostSetPasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostSetPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/crx/explorer/ui/setpassword.jsp');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostSetPasswordRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostSetPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'text/plain')) {
                $response->postSetPasswordDefaultTextPlainString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}