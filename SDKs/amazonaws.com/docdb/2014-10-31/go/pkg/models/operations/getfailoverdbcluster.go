// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETFailoverDBClusterActionEnum
type GETFailoverDBClusterActionEnum string

const (
	GETFailoverDBClusterActionEnumFailoverDbCluster GETFailoverDBClusterActionEnum = "FailoverDBCluster"
)

func (e GETFailoverDBClusterActionEnum) ToPointer() *GETFailoverDBClusterActionEnum {
	return &e
}

func (e *GETFailoverDBClusterActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FailoverDBCluster":
		*e = GETFailoverDBClusterActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETFailoverDBClusterActionEnum: %v", v)
	}
}

// GETFailoverDBClusterVersionEnum
type GETFailoverDBClusterVersionEnum string

const (
	GETFailoverDBClusterVersionEnumTwoThousandAndFourteen1031 GETFailoverDBClusterVersionEnum = "2014-10-31"
)

func (e GETFailoverDBClusterVersionEnum) ToPointer() *GETFailoverDBClusterVersionEnum {
	return &e
}

func (e *GETFailoverDBClusterVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2014-10-31":
		*e = GETFailoverDBClusterVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETFailoverDBClusterVersionEnum: %v", v)
	}
}

type GETFailoverDBClusterRequest struct {
	Action GETFailoverDBClusterActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>A cluster identifier to force a failover for. This parameter is not case sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing <code>DBCluster</code>.</p> </li> </ul>
	DBClusterIdentifier *string `queryParam:"style=form,explode=true,name=DBClusterIdentifier"`
	// <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Amazon DocumentDB replica in the cluster. For example, <code>mydbcluster-replica1</code>.</p>
	TargetDBInstanceIdentifier *string                         `queryParam:"style=form,explode=true,name=TargetDBInstanceIdentifier"`
	Version                    GETFailoverDBClusterVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm              *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETFailoverDBClusterResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
