/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class VideosCredits {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Credit a user in a video
   */
  addVideoCredit(
    req: operations.AddVideoCreditRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoCreditResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoCreditRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/credits",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoCreditResponse =
        new operations.AddVideoCreditResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.credit = utils.objectToClass(httpRes?.data, shared.Credit);
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Credit a user in a video
   */
  addVideoCreditAlt1(
    req: operations.AddVideoCreditAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.AddVideoCreditAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddVideoCreditAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}/credits",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddVideoCreditAlt1Response =
        new operations.AddVideoCreditAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.credit = utils.objectToClass(httpRes?.data, shared.Credit);
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete a credit for a user in a video
   */
  deleteVideoCredit(
    req: operations.DeleteVideoCreditRequest,
    security: operations.DeleteVideoCreditSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteVideoCreditResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteVideoCreditRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/credits/{credit_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteVideoCreditSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteVideoCreditResponse =
        new operations.DeleteVideoCreditResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Edit a credit for a user in a video
   */
  editVideoCredit(
    req: operations.EditVideoCreditRequest,
    security: operations.EditVideoCreditSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EditVideoCreditResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.EditVideoCreditRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/credits/{credit_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.EditVideoCreditSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.EditVideoCreditResponse =
        new operations.EditVideoCreditResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.credit = utils.objectToClass(httpRes?.data, shared.Credit);
          }
          break;
        case [400, 404].includes(httpRes?.status):
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a specific credited user in a video
   */
  getVideoCredit(
    req: operations.GetVideoCreditRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVideoCreditResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVideoCreditRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/credits/{credit_id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVideoCreditResponse =
        new operations.GetVideoCreditResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.credit = utils.objectToClass(httpRes?.data, shared.Credit);
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.legacyError = utils.objectToClass(
              httpRes?.data,
              shared.LegacyError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the credited users in a video
   */
  getVideoCredits(
    req: operations.GetVideoCreditsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVideoCreditsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVideoCreditsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/videos/{video_id}/credits",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVideoCreditsResponse =
        new operations.GetVideoCreditsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.credits = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.credits = utils.objectToClass(
              httpRes?.data,
              shared.Credit,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all the credited users in a video
   */
  getVideoCreditsAlt1(
    req: operations.GetVideoCreditsAlt1Request,
    config?: AxiosRequestConfig
  ): Promise<operations.GetVideoCreditsAlt1Response> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetVideoCreditsAlt1Request(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/channels/{channel_id}/videos/{video_id}/credits",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetVideoCreditsAlt1Response =
        new operations.GetVideoCreditsAlt1Response({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/vnd.vimeo.credit+json`
            )
          ) {
            res.credits = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.credits = utils.objectToClass(
              httpRes?.data,
              shared.Credit,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }
}
