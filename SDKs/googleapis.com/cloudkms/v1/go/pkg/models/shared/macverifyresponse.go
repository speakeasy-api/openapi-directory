// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MacVerifyResponseProtectionLevelEnum - The ProtectionLevel of the CryptoKeyVersion used for verification.
type MacVerifyResponseProtectionLevelEnum string

const (
	MacVerifyResponseProtectionLevelEnumProtectionLevelUnspecified MacVerifyResponseProtectionLevelEnum = "PROTECTION_LEVEL_UNSPECIFIED"
	MacVerifyResponseProtectionLevelEnumSoftware                   MacVerifyResponseProtectionLevelEnum = "SOFTWARE"
	MacVerifyResponseProtectionLevelEnumHsm                        MacVerifyResponseProtectionLevelEnum = "HSM"
	MacVerifyResponseProtectionLevelEnumExternal                   MacVerifyResponseProtectionLevelEnum = "EXTERNAL"
	MacVerifyResponseProtectionLevelEnumExternalVpc                MacVerifyResponseProtectionLevelEnum = "EXTERNAL_VPC"
)

func (e MacVerifyResponseProtectionLevelEnum) ToPointer() *MacVerifyResponseProtectionLevelEnum {
	return &e
}

func (e *MacVerifyResponseProtectionLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROTECTION_LEVEL_UNSPECIFIED":
		fallthrough
	case "SOFTWARE":
		fallthrough
	case "HSM":
		fallthrough
	case "EXTERNAL":
		fallthrough
	case "EXTERNAL_VPC":
		*e = MacVerifyResponseProtectionLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MacVerifyResponseProtectionLevelEnum: %v", v)
	}
}

// MacVerifyResponse - Response message for KeyManagementService.MacVerify.
type MacVerifyResponse struct {
	// The resource name of the CryptoKeyVersion used for verification. Check this field to verify that the intended resource was used for verification.
	Name *string `json:"name,omitempty"`
	// The ProtectionLevel of the CryptoKeyVersion used for verification.
	ProtectionLevel *MacVerifyResponseProtectionLevelEnum `json:"protectionLevel,omitempty"`
	// This field indicates whether or not the verification operation for MacVerifyRequest.mac over MacVerifyRequest.data was successful.
	Success *bool `json:"success,omitempty"`
	// Integrity verification field. A flag indicating whether MacVerifyRequest.data_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.data_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.data_crc32c but this field is still false, discard the response and perform a limited number of retries.
	VerifiedDataCrc32c *bool `json:"verifiedDataCrc32c,omitempty"`
	// Integrity verification field. A flag indicating whether MacVerifyRequest.mac_crc32c was received by KeyManagementService and used for the integrity verification of the data. A false value of this field indicates either that MacVerifyRequest.mac_crc32c was left unset or that it was not delivered to KeyManagementService. If you've set MacVerifyRequest.mac_crc32c but this field is still false, discard the response and perform a limited number of retries.
	VerifiedMacCrc32c *bool `json:"verifiedMacCrc32c,omitempty"`
	// Integrity verification field. This value is used for the integrity verification of [MacVerifyResponse.success]. If the value of this field contradicts the value of [MacVerifyResponse.success], discard the response and perform a limited number of retries.
	VerifiedSuccessIntegrity *bool `json:"verifiedSuccessIntegrity,omitempty"`
}
