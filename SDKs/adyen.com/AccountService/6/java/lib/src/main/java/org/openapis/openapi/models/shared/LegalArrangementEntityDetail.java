/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class LegalArrangementEntityDetail {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public ViasAddress address;

    public LegalArrangementEntityDetail withAddress(ViasAddress address) {
        this.address = address;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("businessDetails")
    public BusinessDetails businessDetails;

    public LegalArrangementEntityDetail withBusinessDetails(BusinessDetails businessDetails) {
        this.businessDetails = businessDetails;
        return this;
    }
    
    /**
     * The e-mail address of the entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public LegalArrangementEntityDetail withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The phone number of the contact provided as a single string.  It will be handled as a landline phone.
     * **Examples:** "0031 6 11 22 33 44", "+316/1122-3344", "(0031) 611223344"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullPhoneNumber")
    public String fullPhoneNumber;

    public LegalArrangementEntityDetail withFullPhoneNumber(String fullPhoneNumber) {
        this.fullPhoneNumber = fullPhoneNumber;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("individualDetails")
    public IndividualDetails individualDetails;

    public LegalArrangementEntityDetail withIndividualDetails(IndividualDetails individualDetails) {
        this.individualDetails = individualDetails;
        return this;
    }
    
    /**
     * Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement entity.
     * Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legalArrangementEntityCode")
    public String legalArrangementEntityCode;

    public LegalArrangementEntityDetail withLegalArrangementEntityCode(String legalArrangementEntityCode) {
        this.legalArrangementEntityCode = legalArrangementEntityCode;
        return this;
    }
    
    /**
     * Your reference for the legal arrangement entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legalArrangementEntityReference")
    public String legalArrangementEntityReference;

    public LegalArrangementEntityDetail withLegalArrangementEntityReference(String legalArrangementEntityReference) {
        this.legalArrangementEntityReference = legalArrangementEntityReference;
        return this;
    }
    
    /**
     * An array containing the roles of the entity in the legal arrangement.
     * 
     * The possible values depend on the legal arrangement `type`.
     * 
     * - For `type` **Association**: **ControllingPerson** and **Shareholder**.
     * 
     * - For `type` **Partnership**: **Partner** and **Shareholder**.
     * 
     * - For `type` **Trust**: **Trustee**, **Settlor**, **Protector**, **Beneficiary**,  and **Shareholder**.
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legalArrangementMembers")
    public LegalArrangementEntityDetailLegalArrangementMembersEnum[] legalArrangementMembers;

    public LegalArrangementEntityDetail withLegalArrangementMembers(LegalArrangementEntityDetailLegalArrangementMembersEnum[] legalArrangementMembers) {
        this.legalArrangementMembers = legalArrangementMembers;
        return this;
    }
    
    /**
     * The legal entity type.
     * 
     * Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legalEntityType")
    public LegalArrangementEntityDetailLegalEntityTypeEnum legalEntityType;

    public LegalArrangementEntityDetail withLegalEntityType(LegalArrangementEntityDetailLegalEntityTypeEnum legalEntityType) {
        this.legalEntityType = legalEntityType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    public ViasPhoneNumber phoneNumber;

    public LegalArrangementEntityDetail withPhoneNumber(ViasPhoneNumber phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * The URL of the website of the contact.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webAddress")
    public String webAddress;

    public LegalArrangementEntityDetail withWebAddress(String webAddress) {
        this.webAddress = webAddress;
        return this;
    }
    
    public LegalArrangementEntityDetail(){}
}
