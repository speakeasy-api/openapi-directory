<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Sets user's password to a new value.
     * 
     * Sets user's password to a new value.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
     */
	public function changePassword(
        \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/password', \OpenAPI\OpenAPI\Models\Operations\ChangePasswordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ChangePasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Returns list of simple users representations
     * 
     * Returns list of simple users representations
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIds1Response
     */
	public function getAllNamesWithIds1(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIds1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIds1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityWithNameDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EntityWithNameDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns user details.
     * 
     * Returns user details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById6Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById6Response
     */
	public function getById6(
        \OpenAPI\OpenAPI\Models\Operations\GetById6Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById6Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\GetById6Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById6Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom field of a given user.
     * 
     * Returns custom field of a given user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomField1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomField1Response
     */
	public function getCustomField1(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomField1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomField1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/customFields/{customFieldKey}', \OpenAPI\OpenAPI\Models\Operations\GetCustomField1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomField1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given user.
     * 
     * Returns custom fields of a given user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields4Response
     */
	public function getCustomFields4(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields4Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns currently signed in user details.
     * 
     * Returns currently signed in user details.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
     */
	public function getMe(
    ): \OpenAPI\OpenAPI\Models\Operations\GetMeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns time zone preferred by user currently signed in.
     * 
     * Returns time zone preferred by user currently signed in.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTimeZoneResponse
     */
	public function getTimeZone(
    ): \OpenAPI\OpenAPI\Models\Operations\GetTimeZoneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/me/timeZone');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTimeZoneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->timeZoneDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TimeZoneDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates given custom field of a given user.
     * 
     * Updates given custom field of a given user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField1Response
     */
	public function updateCustomField1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/customFields/{customFieldKey}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customFieldDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomField1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates custom fields of a given user.
     * 
     * Updates custom fields of a given user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields2Response
     */
	public function updateCustomFields2(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}/customFields', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing user.
     * 
     * Updates an existing user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Update3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Update3Response
     */
	public function update3(
        \OpenAPI\OpenAPI\Models\Operations\Update3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Update3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\Update3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Update3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserDTO', 'json');
            }
        }

        return $response;
    }
}