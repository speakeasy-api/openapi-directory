// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdatePortalPathParams struct {
	// The ARN of the web portal.
	PortalArn string `pathParam:"style=simple,explode=false,name=portalArn"`
}

type UpdatePortalHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// UpdatePortalRequestBodyAuthenticationTypeEnum - <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p> <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p> <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
type UpdatePortalRequestBodyAuthenticationTypeEnum string

const (
	UpdatePortalRequestBodyAuthenticationTypeEnumStandard          UpdatePortalRequestBodyAuthenticationTypeEnum = "Standard"
	UpdatePortalRequestBodyAuthenticationTypeEnumIamIdentityCenter UpdatePortalRequestBodyAuthenticationTypeEnum = "IAM_Identity_Center"
)

func (e *UpdatePortalRequestBodyAuthenticationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Standard":
		fallthrough
	case "IAM_Identity_Center":
		*e = UpdatePortalRequestBodyAuthenticationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePortalRequestBodyAuthenticationTypeEnum: %s", s)
	}
}

type UpdatePortalRequestBody struct {
	// <p>The type of authentication integration points used when signing into the web portal. Defaults to <code>Standard</code>.</p> <p> <code>Standard</code> web portals are authenticated directly through your identity provider. You need to call <code>CreateIdentityProvider</code> to integrate your identity provider with your web portal. User and group access to your web portal is controlled through your identity provider.</p> <p> <code>IAM_Identity_Center</code> web portals are authenticated through AWS IAM Identity Center (successor to AWS Single Sign-On). They provide additional features, such as IdP-initiated authentication. Identity sources (including external identity provider integration), plus user and group access to your web portal, can be configured in the IAM Identity Center.</p>
	AuthenticationType *UpdatePortalRequestBodyAuthenticationTypeEnum `json:"authenticationType,omitempty"`
	// The name of the web portal. This is not visible to users who log into the web portal.
	DisplayName *string `json:"displayName,omitempty"`
}

type UpdatePortalRequest struct {
	PathParams UpdatePortalPathParams
	Headers    UpdatePortalHeaders
	Request    UpdatePortalRequestBody `request:"mediaType=application/json"`
}

type UpdatePortalResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdatePortalResponse *shared.UpdatePortalResponse
	// ValidationException
	ValidationException interface{}
}
