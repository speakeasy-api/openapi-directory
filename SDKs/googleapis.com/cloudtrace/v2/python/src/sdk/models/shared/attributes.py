"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributevalue as shared_attributevalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Attributes:
    r"""A set of attributes as key-value pairs."""
    
    attribute_map: Optional[dict[str, shared_attributevalue.AttributeValue]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributeMap'), 'exclude': lambda f: f is None }})
    r"""A set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the boolean values `true` or `false`. For example: \\"/instance_id\\": { \\"string_value\\": { \\"value\\": \\"my-instance\\" } } \\"/http/request_bytes\\": { \\"int_value\\": 300 } \\"abc.com/myattribute\\": { \\"bool_value\\": false }"""  
    dropped_attributes_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('droppedAttributesCount'), 'exclude': lambda f: f is None }})
    r"""The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid."""  
    