// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CreateAndValidateShipmentDeliveryConfirmationEnum - The possible delivery confirmation values
type CreateAndValidateShipmentDeliveryConfirmationEnum string

const (
	CreateAndValidateShipmentDeliveryConfirmationEnumNone               CreateAndValidateShipmentDeliveryConfirmationEnum = "none"
	CreateAndValidateShipmentDeliveryConfirmationEnumDelivery           CreateAndValidateShipmentDeliveryConfirmationEnum = "delivery"
	CreateAndValidateShipmentDeliveryConfirmationEnumSignature          CreateAndValidateShipmentDeliveryConfirmationEnum = "signature"
	CreateAndValidateShipmentDeliveryConfirmationEnumAdultSignature     CreateAndValidateShipmentDeliveryConfirmationEnum = "adult_signature"
	CreateAndValidateShipmentDeliveryConfirmationEnumDirectSignature    CreateAndValidateShipmentDeliveryConfirmationEnum = "direct_signature"
	CreateAndValidateShipmentDeliveryConfirmationEnumDeliveryMailed     CreateAndValidateShipmentDeliveryConfirmationEnum = "delivery_mailed"
	CreateAndValidateShipmentDeliveryConfirmationEnumVerbalConfirmation CreateAndValidateShipmentDeliveryConfirmationEnum = "verbal_confirmation"
)

func (e CreateAndValidateShipmentDeliveryConfirmationEnum) ToPointer() *CreateAndValidateShipmentDeliveryConfirmationEnum {
	return &e
}

func (e *CreateAndValidateShipmentDeliveryConfirmationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "delivery":
		fallthrough
	case "signature":
		fallthrough
	case "adult_signature":
		fallthrough
	case "direct_signature":
		fallthrough
	case "delivery_mailed":
		fallthrough
	case "verbal_confirmation":
		*e = CreateAndValidateShipmentDeliveryConfirmationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndValidateShipmentDeliveryConfirmationEnum: %v", v)
	}
}

// CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum - The possible package contents values
type CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum string

const (
	CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnumMerchandise   CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum = "merchandise"
	CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnumDocuments     CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum = "documents"
	CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnumGift          CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum = "gift"
	CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnumReturnedGoods CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum = "returned_goods"
	CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnumSample        CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum = "sample"
)

func (e CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum) ToPointer() *CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum {
	return &e
}

func (e *CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "merchandise":
		fallthrough
	case "documents":
		fallthrough
	case "gift":
		fallthrough
	case "returned_goods":
		fallthrough
	case "sample":
		*e = CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum: %v", v)
	}
}

// CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum - The possible non delivery values
type CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum string

const (
	CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnumReturnToSender   CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum = "return_to_sender"
	CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnumTreatAsAbandoned CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum = "treat_as_abandoned"
)

func (e CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum) ToPointer() *CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum {
	return &e
}

func (e *CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "return_to_sender":
		fallthrough
	case "treat_as_abandoned":
		*e = CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum: %v", v)
	}
}

// CreateAndValidateShipmentInternationalShipmentOptions - Options for international shipments, such as customs declarations.
type CreateAndValidateShipmentInternationalShipmentOptions struct {
	// The type of contents in this shipment.  This may impact import duties or customs treatment.
	Contents CreateAndValidateShipmentInternationalShipmentOptionsPackageContentsEnum `json:"contents"`
	// Customs declarations for each item in the shipment.
	CustomsItems []CustomsItem `json:"customs_items,omitempty"`
	// Indicates what to do if a package is unable to be delivered.
	NonDelivery CreateAndValidateShipmentInternationalShipmentOptionsNonDeliveryEnum `json:"non_delivery"`
}

// CreateAndValidateShipmentInsuranceProviderEnum - The possible insurance provider values
type CreateAndValidateShipmentInsuranceProviderEnum string

const (
	CreateAndValidateShipmentInsuranceProviderEnumNone        CreateAndValidateShipmentInsuranceProviderEnum = "none"
	CreateAndValidateShipmentInsuranceProviderEnumShipsurance CreateAndValidateShipmentInsuranceProviderEnum = "shipsurance"
	CreateAndValidateShipmentInsuranceProviderEnumCarrier     CreateAndValidateShipmentInsuranceProviderEnum = "carrier"
	CreateAndValidateShipmentInsuranceProviderEnumThirdParty  CreateAndValidateShipmentInsuranceProviderEnum = "third_party"
)

func (e CreateAndValidateShipmentInsuranceProviderEnum) ToPointer() *CreateAndValidateShipmentInsuranceProviderEnum {
	return &e
}

func (e *CreateAndValidateShipmentInsuranceProviderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "shipsurance":
		fallthrough
	case "carrier":
		fallthrough
	case "third_party":
		*e = CreateAndValidateShipmentInsuranceProviderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndValidateShipmentInsuranceProviderEnum: %v", v)
	}
}

// CreateAndValidateShipmentOriginTypeEnum - Indicates if the package will be picked up or dropped off by the carrier
type CreateAndValidateShipmentOriginTypeEnum string

const (
	CreateAndValidateShipmentOriginTypeEnumPickup  CreateAndValidateShipmentOriginTypeEnum = "pickup"
	CreateAndValidateShipmentOriginTypeEnumDropOff CreateAndValidateShipmentOriginTypeEnum = "drop_off"
)

func (e CreateAndValidateShipmentOriginTypeEnum) ToPointer() *CreateAndValidateShipmentOriginTypeEnum {
	return &e
}

func (e *CreateAndValidateShipmentOriginTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pickup":
		fallthrough
	case "drop_off":
		*e = CreateAndValidateShipmentOriginTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndValidateShipmentOriginTypeEnum: %v", v)
	}
}

// CreateAndValidateShipmentShipmentStatusEnum - The possible shipment status values
type CreateAndValidateShipmentShipmentStatusEnum string

const (
	CreateAndValidateShipmentShipmentStatusEnumPending        CreateAndValidateShipmentShipmentStatusEnum = "pending"
	CreateAndValidateShipmentShipmentStatusEnumProcessing     CreateAndValidateShipmentShipmentStatusEnum = "processing"
	CreateAndValidateShipmentShipmentStatusEnumLabelPurchased CreateAndValidateShipmentShipmentStatusEnum = "label_purchased"
	CreateAndValidateShipmentShipmentStatusEnumCancelled      CreateAndValidateShipmentShipmentStatusEnum = "cancelled"
)

func (e CreateAndValidateShipmentShipmentStatusEnum) ToPointer() *CreateAndValidateShipmentShipmentStatusEnum {
	return &e
}

func (e *CreateAndValidateShipmentShipmentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "processing":
		fallthrough
	case "label_purchased":
		fallthrough
	case "cancelled":
		*e = CreateAndValidateShipmentShipmentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAndValidateShipmentShipmentStatusEnum: %v", v)
	}
}

// CreateAndValidateShipmentWeight - The weight of a package
type CreateAndValidateShipmentWeight struct {
	Unit WeightUnitEnum `json:"unit"`
	// The weight, in the specified unit
	Value float64 `json:"value"`
}

// CreateAndValidateShipment - The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
type CreateAndValidateShipment struct {
	// The address validation
	AddressValidation *AddressValidationResult `json:"address_validation,omitempty"`
	// Advanced shipment options.  These are entirely optional.
	AdvancedOptions *AdvancedShipmentOptions `json:"advanced_options,omitempty"`
	// The carrier account that is billed for the shipping charges
	CarrierID *string `json:"carrier_id,omitempty"`
	// The type of delivery confirmation that is required for this shipment.
	Confirmation *CreateAndValidateShipmentDeliveryConfirmationEnum `json:"confirmation,omitempty"`
	// The date and time that the shipment was created in ShipEngine.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Customs information.  This is usually only needed for international shipments.
	//
	Customs *CreateAndValidateShipmentInternationalShipmentOptions `json:"customs,omitempty"`
	// An array of errors that occurred while creating shipment.
	Errors []string `json:"errors,omitempty"`
	// ID that the Order Source assigned
	ExternalOrderID *string `json:"external_order_id,omitempty"`
	// A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.
	//
	// > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
	//
	ExternalShipmentID *string `json:"external_shipment_id,omitempty"`
	// The insurance provider to use for any insured packages in the shipment.
	//
	InsuranceProvider *CreateAndValidateShipmentInsuranceProviderEnum `json:"insurance_provider,omitempty"`
	// An optional indicator if the shipment is intended to be a return. Defaults to false if not provided.
	//
	IsReturn *bool `json:"is_return,omitempty"`
	// Describe the packages included in this shipment as related to potential metadata that was imported from
	// external order sources
	//
	Items []ShipmentItem `json:"items,omitempty"`
	// The date and time that the shipment was created or last modified.
	ModifiedAt      *time.Time           `json:"modified_at,omitempty"`
	OrderSourceCode *OrderSourceNameEnum `json:"order_source_code,omitempty"`
	// Indicates if the package will be picked up or dropped off by the carrier
	OriginType *CreateAndValidateShipmentOriginTypeEnum `json:"origin_type,omitempty"`
	// The packages in the shipment.
	//
	// > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned.
	//
	Packages []Package `json:"packages,omitempty"`
	// The return address for this shipment.  Defaults to the `ship_from` address.
	//
	ReturnTo *ShippingAddress `json:"return_to,omitempty"`
	// The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
	//
	ServiceCode *string `json:"service_code,omitempty"`
	// The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
	//
	ShipDate *time.Time `json:"ship_date,omitempty"`
	// The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time.
	//
	ShipFrom *ShippingAddress `json:"ship_from,omitempty"`
	// The recipient's mailing address
	ShipTo *ShippingAddress `json:"ship_to,omitempty"`
	// A string that uniquely identifies the shipment
	ShipmentID *string `json:"shipment_id,omitempty"`
	// A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.
	//
	// > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated.
	//
	ShipmentNumber *string `json:"shipment_number,omitempty"`
	// The current status of the shipment
	ShipmentStatus *CreateAndValidateShipmentShipmentStatusEnum `json:"shipment_status,omitempty"`
	// Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags.
	//
	Tags           []Tag           `json:"tags,omitempty"`
	TaxIdentifiers []TaxIdentifier `json:"tax_identifiers,omitempty"`
	// The combined weight of all packages in the shipment
	TotalWeight *CreateAndValidateShipmentWeight `json:"total_weight,omitempty"`
	// The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified.
	//
	WarehouseID *string `json:"warehouse_id,omitempty"`
}
