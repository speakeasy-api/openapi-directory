"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import choiceupdate as shared_choiceupdate
from ..shared import updateansweroutput as shared_updateansweroutput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateAnswerRequestBodyReasonEnum(str, Enum):
    r"""The reason why a question is not applicable to your workload."""
    OUT_OF_SCOPE = 'OUT_OF_SCOPE'
    BUSINESS_PRIORITIES = 'BUSINESS_PRIORITIES'
    ARCHITECTURE_CONSTRAINTS = 'ARCHITECTURE_CONSTRAINTS'
    OTHER = 'OTHER'
    NONE = 'NONE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAnswerRequestBody:
    
    choice_updates: Optional[dict[str, shared_choiceupdate.ChoiceUpdate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ChoiceUpdates'), 'exclude': lambda f: f is None }})
    r"""A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated."""  
    is_applicable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsApplicable'), 'exclude': lambda f: f is None }})
    r"""Defines whether this question is applicable to a lens review."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notes'), 'exclude': lambda f: f is None }})
    r"""The notes associated with the workload."""  
    reason: Optional[UpdateAnswerRequestBodyReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reason'), 'exclude': lambda f: f is None }})
    r"""The reason why a question is not applicable to your workload."""  
    selected_choices: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SelectedChoices'), 'exclude': lambda f: f is None }})
    r"""<p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>"""  
    

@dataclasses.dataclass
class UpdateAnswerRequest:
    
    lens_alias: str = dataclasses.field(metadata={'path_param': { 'field_name': 'LensAlias', 'style': 'simple', 'explode': False }})  
    question_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'QuestionId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateAnswerRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    workload_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'WorkloadId', 'style': 'simple', 'explode': False }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateAnswerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_answer_output: Optional[shared_updateansweroutput.UpdateAnswerOutput] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    