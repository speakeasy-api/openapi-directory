// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateLocationSmbXAmzTargetEnum
type CreateLocationSmbXAmzTargetEnum string

const (
	CreateLocationSmbXAmzTargetEnumFmrsServiceCreateLocationSmb CreateLocationSmbXAmzTargetEnum = "FmrsService.CreateLocationSmb"
)

func (e *CreateLocationSmbXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FmrsService.CreateLocationSmb":
		*e = CreateLocationSmbXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLocationSmbXAmzTargetEnum: %s", s)
	}
}

type CreateLocationSmbRequest struct {
	CreateLocationSmbRequest shared.CreateLocationSmbRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               CreateLocationSmbXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateLocationSmbResponse struct {
	ContentType string
	// Success
	CreateLocationSmbResponse *shared.CreateLocationSmbResponse
	// InternalException
	InternalException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
}
