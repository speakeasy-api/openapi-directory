/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CustomSourceLocation } from "./customsourcelocation";
import { PubsubLocation } from "./pubsublocation";
import { StreamingSideInputLocation } from "./streamingsideinputlocation";
import { StreamingStageLocation } from "./streamingstagelocation";
import { Expose, Type } from "class-transformer";

/**
 * Describes a stream of data, either as input to be processed or as output of a streaming Dataflow job.
 */
export class StreamLocation extends SpeakeasyBase {
  /**
   * Identifies the location of a custom souce.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customSourceLocation" })
  @Type(() => CustomSourceLocation)
  customSourceLocation?: CustomSourceLocation;

  /**
   * Identifies a pubsub location to use for transferring data into or out of a streaming Dataflow job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pubsubLocation" })
  @Type(() => PubsubLocation)
  pubsubLocation?: PubsubLocation;

  /**
   * Identifies the location of a streaming side input.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sideInputLocation" })
  @Type(() => StreamingSideInputLocation)
  sideInputLocation?: StreamingSideInputLocation;

  /**
   * Identifies the location of a streaming computation stage, for stage-to-stage communication.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "streamingStageLocation" })
  @Type(() => StreamingStageLocation)
  streamingStageLocation?: StreamingStageLocation;
}
