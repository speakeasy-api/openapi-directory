/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Information about a position.
 */
export class ConfigureAccessPointRequestBodyPosition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "elevation" })
  elevation?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "elevationReference" })
  elevationReference?: shared.ElevationReferenceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "elevationUnit" })
  elevationUnit?: shared.ElevationUnitEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude?: number;
}

export class ConfigureAccessPointRequestBody extends SpeakeasyBase {
  /**
   * The Amazon Resource Name (ARN) of the network resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessPointArn" })
  accessPointArn: string;

  /**
   * A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpiSecretKey" })
  cpiSecretKey?: string;

  /**
   * The CPI user ID of the CPI user who is certifying the coordinates of the network resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpiUserId" })
  cpiUserId?: string;

  /**
   * The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpiUserPassword" })
  cpiUserPassword?: string;

  /**
   * The CPI user name of the CPI user who is certifying the coordinates of the radio unit.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cpiUsername" })
  cpiUsername?: string;

  /**
   * Information about a position.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "position" })
  @Type(() => ConfigureAccessPointRequestBodyPosition)
  position?: ConfigureAccessPointRequestBodyPosition;
}

export class ConfigureAccessPointRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ConfigureAccessPointRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class ConfigureAccessPointResponse extends SpeakeasyBase {
  /**
   * Success
   */
  @SpeakeasyMetadata()
  configureAccessPointResponse?: shared.ConfigureAccessPointResponse;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
