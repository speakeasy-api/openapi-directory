"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ListCategoriesIncludeSubcategoriesEnum(str, Enum):
    TRUE = 'true'


@dataclasses.dataclass
class ListCategoriesRequest:
    
    include_subcategories: Optional[ListCategoriesIncludeSubcategoriesEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_subcategories', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategories200ApplicationJSONCategoryListCategories:
    
    can_edit: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_edit') }})  
    color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color') }})  
    default_list_filter: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_list_filter') }})  
    default_top_period: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_top_period') }})  
    default_view: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_view') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    description_excerpt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_excerpt') }})  
    description_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description_text') }})  
    has_children: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_children') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    minimum_required_tags: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_required_tags') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    navigate_to_first_post_after_read: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('navigate_to_first_post_after_read') }})  
    notification_level: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification_level') }})  
    num_featured_topics: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_featured_topics') }})  
    permission: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission') }})  
    position: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position') }})  
    post_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('post_count') }})  
    read_restricted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_restricted') }})  
    show_subcategory_list: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('show_subcategory_list') }})  
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})  
    sort_ascending: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_ascending') }})  
    sort_order: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order') }})  
    subcategory_ids: list[Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategory_ids') }})  
    subcategory_list_style: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategory_list_style') }})  
    text_color: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text_color') }})  
    topic_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_count') }})  
    topic_template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_template') }})  
    topic_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_url') }})  
    topics_all_time: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_all_time') }})  
    topics_day: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_day') }})  
    topics_month: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_month') }})  
    topics_week: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_week') }})  
    topics_year: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics_year') }})  
    uploaded_background: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_background') }})  
    uploaded_logo: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_logo') }})  
    uploaded_logo_dark: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploaded_logo_dark') }})  
    is_uncategorized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_uncategorized'), 'exclude': lambda f: f is None }})  
    subcategory_list: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subcategory_list'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategories200ApplicationJSONCategoryList:
    
    can_create_category: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_create_category') }})  
    can_create_topic: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('can_create_topic') }})  
    categories: list[ListCategories200ApplicationJSONCategoryListCategories] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListCategories200ApplicationJSON:
    r"""success response"""
    
    category_list: ListCategories200ApplicationJSONCategoryList = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category_list') }})  
    

@dataclasses.dataclass
class ListCategoriesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_categories_200_application_json_object: Optional[ListCategories200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    