"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Suppliers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def suppliers_delete(self, request: operations.SuppliersDeleteRequest) -> operations.SuppliersDeleteResponse:
        r"""Removes an existing Supplier."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuppliersDeleteRequest, base_url, '/v1/suppliers/{id}', request)
        
        query_params = utils.get_query_params(operations.SuppliersDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.suppliers_delete_200_application_json_object = out

        return res

    def suppliers_get(self) -> operations.SuppliersGetResponse:
        r"""Returns a list of company's Suppliers. Supports OData querying protocol.
        Filtering is forbidden.
        Ordering is allowed by \\"id\\" and \\"code\\" fields.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/suppliers'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PageResultSupplierQueryDto])
                res.page_result_supplier_query_dto = out

        return res

    def suppliers_get_account_trans(self, request: operations.SuppliersGetAccountTransRequest) -> operations.SuppliersGetAccountTransResponse:
        r"""Returns a list of Supplier's account transactions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuppliersGetAccountTransRequest, base_url, '/v1/suppliers/{itemId}/accountTrans', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersGetAccountTransResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AccountTranDto]])
                res.account_tran_dtos = out

        return res

    def suppliers_get_opening_balance(self, request: operations.SuppliersGetOpeningBalanceRequest) -> operations.SuppliersGetOpeningBalanceResponse:
        r"""Returns a Supplier's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuppliersGetOpeningBalanceRequest, base_url, '/v1/suppliers/{itemId}/openingBalance', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersGetOpeningBalanceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OwnerOpeningBalanceInPeriodsDto])
                res.owner_opening_balance_in_periods_dto = out

        return res

    def suppliers_get_opening_balance_list(self, request: operations.SuppliersGetOpeningBalanceListRequest) -> operations.SuppliersGetOpeningBalanceListResponse:
        r"""Returns a list of Supplier's opening balance transactions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuppliersGetOpeningBalanceListRequest, base_url, '/v1/suppliers/{itemId}/openingBalanceList', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersGetOpeningBalanceListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OwnerOpeningBalanceDto]])
                res.owner_opening_balance_dtos = out

        return res

    def suppliers_post(self, request: shared.SupplierDto) -> operations.SuppliersPostResponse:
        r"""Creates a new Supplier."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/suppliers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.suppliers_post_200_application_json_object = out

        return res

    def suppliers_process_batch(self, request: list[shared.BatchItemSupplierDto]) -> operations.SuppliersProcessBatchResponse:
        r"""Processes a batch of Suppliers."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/suppliers/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersProcessBatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.suppliers_process_batch_200_application_json_object = out

        return res

    def suppliers_put(self, request: operations.SuppliersPutRequest) -> operations.SuppliersPutResponse:
        r"""Updates an existing Supplier."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuppliersPutRequest, base_url, '/v1/suppliers/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "supplier_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuppliersPutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.suppliers_put_200_application_json_object = out

        return res

    def get_v1_suppliers_id_(self, request: operations.GetV1SuppliersIDRequest) -> operations.GetV1SuppliersIDResponse:
        r"""Returns information about a single Supplier. You may specify that Supplier's ledger balance should be calculated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetV1SuppliersIDRequest, base_url, '/v1/suppliers/{id}', request)
        
        query_params = utils.get_query_params(operations.GetV1SuppliersIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetV1SuppliersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SupplierDto])
                res.supplier_dto = out

        return res

    