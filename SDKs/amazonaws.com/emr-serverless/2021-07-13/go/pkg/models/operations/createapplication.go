// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateApplicationRequestBodyArchitectureEnum - The CPU architecture of an application.
type CreateApplicationRequestBodyArchitectureEnum string

const (
	CreateApplicationRequestBodyArchitectureEnumArm64 CreateApplicationRequestBodyArchitectureEnum = "ARM64"
	CreateApplicationRequestBodyArchitectureEnumX8664 CreateApplicationRequestBodyArchitectureEnum = "X86_64"
)

func (e CreateApplicationRequestBodyArchitectureEnum) ToPointer() *CreateApplicationRequestBodyArchitectureEnum {
	return &e
}

func (e *CreateApplicationRequestBodyArchitectureEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ARM64":
		fallthrough
	case "X86_64":
		*e = CreateApplicationRequestBodyArchitectureEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateApplicationRequestBodyArchitectureEnum: %v", v)
	}
}

// CreateApplicationRequestBodyAutoStartConfiguration - The configuration for an application to automatically start on job submission.
type CreateApplicationRequestBodyAutoStartConfiguration struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// CreateApplicationRequestBodyAutoStopConfiguration - The configuration for an application to automatically stop after a certain amount of time being idle.
type CreateApplicationRequestBodyAutoStopConfiguration struct {
	Enabled            *bool  `json:"enabled,omitempty"`
	IdleTimeoutMinutes *int64 `json:"idleTimeoutMinutes,omitempty"`
}

// CreateApplicationRequestBodyImageConfiguration - The image configuration.
type CreateApplicationRequestBodyImageConfiguration struct {
	ImageURI *string `json:"imageUri,omitempty"`
}

// CreateApplicationRequestBodyMaximumCapacity - The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.
type CreateApplicationRequestBodyMaximumCapacity struct {
	CPU    *string `json:"cpu,omitempty"`
	Disk   *string `json:"disk,omitempty"`
	Memory *string `json:"memory,omitempty"`
}

// CreateApplicationRequestBodyNetworkConfiguration - The network configuration for customer VPC connectivity.
type CreateApplicationRequestBodyNetworkConfiguration struct {
	SecurityGroupIds []string `json:"securityGroupIds,omitempty"`
	SubnetIds        []string `json:"subnetIds,omitempty"`
}

type CreateApplicationRequestBody struct {
	// The CPU architecture of an application.
	Architecture *CreateApplicationRequestBodyArchitectureEnum `json:"architecture,omitempty"`
	// The configuration for an application to automatically start on job submission.
	AutoStartConfiguration *CreateApplicationRequestBodyAutoStartConfiguration `json:"autoStartConfiguration,omitempty"`
	// The configuration for an application to automatically stop after a certain amount of time being idle.
	AutoStopConfiguration *CreateApplicationRequestBodyAutoStopConfiguration `json:"autoStopConfiguration,omitempty"`
	// The client idempotency token of the application to create. Its value must be unique for each request.
	ClientToken string `json:"clientToken"`
	// The image configuration.
	ImageConfiguration *CreateApplicationRequestBodyImageConfiguration `json:"imageConfiguration,omitempty"`
	// The capacity to initialize when the application is created.
	InitialCapacity map[string]shared.InitialCapacityConfig `json:"initialCapacity,omitempty"`
	// The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.
	MaximumCapacity *CreateApplicationRequestBodyMaximumCapacity `json:"maximumCapacity,omitempty"`
	// The name of the application.
	Name *string `json:"name,omitempty"`
	// The network configuration for customer VPC connectivity.
	NetworkConfiguration *CreateApplicationRequestBodyNetworkConfiguration `json:"networkConfiguration,omitempty"`
	// The EMR release associated with the application.
	ReleaseLabel string `json:"releaseLabel"`
	// The tags assigned to the application.
	Tags map[string]string `json:"tags,omitempty"`
	// The type of application you want to start, such as Spark or Hive.
	Type string `json:"type"`
	// The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.
	WorkerTypeSpecifications map[string]shared.WorkerTypeSpecificationInput `json:"workerTypeSpecifications,omitempty"`
}

type CreateApplicationRequest struct {
	RequestBody       CreateApplicationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateApplicationResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateApplicationResponse *shared.CreateApplicationResponse
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ValidationException
	ValidationException interface{}
}
