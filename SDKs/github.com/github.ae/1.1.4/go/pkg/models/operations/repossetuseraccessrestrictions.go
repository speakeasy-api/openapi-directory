// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type ReposSetUserAccessRestrictionsPathParams struct {
	// The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/github-ae@latest/graphql).
	Branch string `pathParam:"style=simple,explode=false,name=branch"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type ReposSetUserAccessRestrictionsRequestBody1 struct {
	// The username for users
	Users []string `json:"users"`
}

type ReposSetUserAccessRestrictionsRequestBodyType string

const (
	ReposSetUserAccessRestrictionsRequestBodyTypeReposSetUserAccessRestrictionsRequestBody1 ReposSetUserAccessRestrictionsRequestBodyType = "repos/set-user-access-restrictions_requestBody_1"
	ReposSetUserAccessRestrictionsRequestBodyTypeArrayOfstr                                 ReposSetUserAccessRestrictionsRequestBodyType = "arrayOfstr"
)

type ReposSetUserAccessRestrictionsRequestBody struct {
	ReposSetUserAccessRestrictionsRequestBody1 *ReposSetUserAccessRestrictionsRequestBody1
	ArrayOfstr                                 []string

	Type ReposSetUserAccessRestrictionsRequestBodyType
}

func CreateReposSetUserAccessRestrictionsRequestBodyReposSetUserAccessRestrictionsRequestBody1(reposSetUserAccessRestrictionsRequestBody1 ReposSetUserAccessRestrictionsRequestBody1) ReposSetUserAccessRestrictionsRequestBody {
	typ := ReposSetUserAccessRestrictionsRequestBodyTypeReposSetUserAccessRestrictionsRequestBody1

	return ReposSetUserAccessRestrictionsRequestBody{
		ReposSetUserAccessRestrictionsRequestBody1: &reposSetUserAccessRestrictionsRequestBody1,
		Type: typ,
	}
}

func CreateReposSetUserAccessRestrictionsRequestBodyArrayOfstr(arrayOfstr []string) ReposSetUserAccessRestrictionsRequestBody {
	typ := ReposSetUserAccessRestrictionsRequestBodyTypeArrayOfstr

	return ReposSetUserAccessRestrictionsRequestBody{
		ArrayOfstr: arrayOfstr,
		Type:       typ,
	}
}

func (u *ReposSetUserAccessRestrictionsRequestBody) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	reposSetUserAccessRestrictionsRequestBody1 := new(ReposSetUserAccessRestrictionsRequestBody1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&reposSetUserAccessRestrictionsRequestBody1); err == nil {
		u.ReposSetUserAccessRestrictionsRequestBody1 = reposSetUserAccessRestrictionsRequestBody1
		u.Type = ReposSetUserAccessRestrictionsRequestBodyTypeReposSetUserAccessRestrictionsRequestBody1
		return nil
	}

	arrayOfstr := []string{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfstr); err == nil {
		u.ArrayOfstr = arrayOfstr
		u.Type = ReposSetUserAccessRestrictionsRequestBodyTypeArrayOfstr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u ReposSetUserAccessRestrictionsRequestBody) MarshalJSON() ([]byte, error) {
	if u.ReposSetUserAccessRestrictionsRequestBody1 != nil {
		return json.Marshal(u.ReposSetUserAccessRestrictionsRequestBody1)
	}

	if u.ArrayOfstr != nil {
		return json.Marshal(u.ArrayOfstr)
	}

	return nil, nil
}

type ReposSetUserAccessRestrictionsRequest struct {
	PathParams ReposSetUserAccessRestrictionsPathParams
	Request    *ReposSetUserAccessRestrictionsRequestBody `request:"mediaType=application/json"`
}

type ReposSetUserAccessRestrictionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Response
	SimpleUsers []shared.SimpleUser
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
