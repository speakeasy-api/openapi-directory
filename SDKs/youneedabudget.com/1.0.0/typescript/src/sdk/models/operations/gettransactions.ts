/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
 */
export enum GetTransactionsTypeEnum {
  Uncategorized = "uncategorized",
  Unapproved = "unapproved",
}

export class GetTransactionsRequest extends SpeakeasyBase {
  /**
   * The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled (see: https://api.youneedabudget.com/#oauth-default-budget).
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=budget_id",
  })
  budgetId: string;

  /**
   * The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=last_knowledge_of_server",
  })
  lastKnowledgeOfServer?: number;

  /**
   * If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=since_date;dateTimeFormat=YYYY-MM-DD",
  })
  sinceDate?: Date;

  /**
   * If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: GetTransactionsTypeEnum;
}

export class GetTransactionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * An error occurred
   */
  @SpeakeasyMetadata()
  errorResponse?: shared.ErrorResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The list of requested transactions
   */
  @SpeakeasyMetadata()
  transactionsResponse?: shared.TransactionsResponse;
}
