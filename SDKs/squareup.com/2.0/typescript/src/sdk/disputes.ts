/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Disputes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * AcceptDispute
   *
   * @remarks
   * Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
   * updates the dispute state to ACCEPTED.
   *
   * Square debits the disputed amount from the sellerâ€™s Square account. If the Square account
   * does not have sufficient funds, Square debits the associated bank account.
   */
  acceptDispute(
    req: operations.AcceptDisputeRequest,
    security: operations.AcceptDisputeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AcceptDisputeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AcceptDisputeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/disputes/{dispute_id}/accept",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AcceptDisputeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AcceptDisputeResponse =
        new operations.AcceptDisputeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.acceptDisputeResponse = utils.objectToClass(
              httpRes?.data,
              shared.AcceptDisputeResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreateDisputeEvidenceText
   *
   * @remarks
   * Uploads text to use as evidence for a dispute challenge.
   */
  createDisputeEvidenceText(
    req: operations.CreateDisputeEvidenceTextRequest,
    security: operations.CreateDisputeEvidenceTextSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateDisputeEvidenceTextResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateDisputeEvidenceTextRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/disputes/{dispute_id}/evidence-text",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createDisputeEvidenceTextRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateDisputeEvidenceTextSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateDisputeEvidenceTextResponse =
        new operations.CreateDisputeEvidenceTextResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createDisputeEvidenceTextResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateDisputeEvidenceTextResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * DeleteDisputeEvidence
   *
   * @remarks
   * Removes specified evidence from a dispute.
   *
   * Square does not send the bank any evidence that is removed. Also, you cannot remove evidence after
   * submitting it to the bank using [SubmitEvidence](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/submit-evidence).
   */
  deleteDisputeEvidence(
    req: operations.DeleteDisputeEvidenceRequest,
    security: operations.DeleteDisputeEvidenceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDisputeEvidenceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDisputeEvidenceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/disputes/{dispute_id}/evidence/{evidence_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteDisputeEvidenceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDisputeEvidenceResponse =
        new operations.DeleteDisputeEvidenceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteDisputeEvidenceResponse = utils.objectToClass(
              httpRes?.data,
              shared.DeleteDisputeEvidenceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListDisputeEvidence
   *
   * @remarks
   * Returns a list of evidence associated with a dispute.
   */
  listDisputeEvidence(
    req: operations.ListDisputeEvidenceRequest,
    security: operations.ListDisputeEvidenceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListDisputeEvidenceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListDisputeEvidenceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/disputes/{dispute_id}/evidence",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListDisputeEvidenceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListDisputeEvidenceResponse =
        new operations.ListDisputeEvidenceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDisputeEvidenceResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDisputeEvidenceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ListDisputes
   *
   * @remarks
   * Returns a list of disputes associated with a particular account.
   */
  listDisputes(
    req: operations.ListDisputesRequest,
    security: operations.ListDisputesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListDisputesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListDisputesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/disputes";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListDisputesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListDisputesResponse =
        new operations.ListDisputesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDisputesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDisputesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveDispute
   *
   * @remarks
   * Returns details about a specific dispute.
   */
  retrieveDispute(
    req: operations.RetrieveDisputeRequest,
    security: operations.RetrieveDisputeSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveDisputeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveDisputeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/disputes/{dispute_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveDisputeSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveDisputeResponse =
        new operations.RetrieveDisputeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveDisputeResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveDisputeResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveDisputeEvidence
   *
   * @remarks
   * Returns the evidence metadata specified by the evidence ID in the request URL path
   *
   * You must maintain a copy of the evidence you upload if you want to reference it later. You cannot
   * download the evidence after you upload it.
   */
  retrieveDisputeEvidence(
    req: operations.RetrieveDisputeEvidenceRequest,
    security: operations.RetrieveDisputeEvidenceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveDisputeEvidenceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveDisputeEvidenceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/disputes/{dispute_id}/evidence/{evidence_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveDisputeEvidenceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveDisputeEvidenceResponse =
        new operations.RetrieveDisputeEvidenceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveDisputeEvidenceResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveDisputeEvidenceResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SubmitEvidence
   *
   * @remarks
   * Submits evidence to the cardholder's bank.
   *
   * Before submitting evidence, Square compiles all available evidence. This includes evidence uploaded
   * using the [CreateDisputeEvidenceFile](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-file) and
   * [CreateDisputeEvidenceText](https://developer.squareup.com/reference/square_2021-08-18/disputes-api/create-dispute-evidence-text) endpoints and
   * evidence automatically provided by Square, when available.
   */
  submitEvidence(
    req: operations.SubmitEvidenceRequest,
    security: operations.SubmitEvidenceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SubmitEvidenceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SubmitEvidenceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/disputes/{dispute_id}/submit-evidence",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SubmitEvidenceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SubmitEvidenceResponse =
        new operations.SubmitEvidenceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.submitEvidenceResponse = utils.objectToClass(
              httpRes?.data,
              shared.SubmitEvidenceResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
