// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetMultiNodeInventoryForAllSkuAndAllShipNodesQueryParams struct {
	// The number of items returned. Cannot be more than 50.
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// String returned from initial API call to indicate pagination. Specify nextCursor value to retrieve the next 50 items.
	NextCursor *string `queryParam:"style=form,explode=true,name=nextCursor"`
}

type GetMultiNodeInventoryForAllSkuAndAllShipNodesHeaders struct {
	// A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	WmConsumerChannelType *string `header:"style=simple,explode=false,name=WM_CONSUMER.CHANNEL.TYPE"`
	// A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	WmQosCorrelationID string `header:"style=simple,explode=false,name=WM_QOS.CORRELATION_ID"`
	// The access token retrieved in the Token API call
	WmSecAccessToken string `header:"style=simple,explode=false,name=WM_SEC.ACCESS_TOKEN"`
	// Walmart Service Name
	WmSvcName string `header:"style=simple,explode=false,name=WM_SVC.NAME"`
}

type GetMultiNodeInventoryForAllSkuAndAllShipNodesRequest struct {
	QueryParams GetMultiNodeInventoryForAllSkuAndAllShipNodesQueryParams
	Headers     GetMultiNodeInventoryForAllSkuAndAllShipNodesHeaders
}

// GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum - The unit of measurement. Example: 'EACH'
type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum string

const (
	GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnumEach GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum = "EACH"
)

func (e *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum: %s", s)
	}
}

// GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty - Quantity of an item that is available to be allocated to orders
type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQtyUnitEnum `json:"unit"`
}

// GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum - The unit of measurement. Example: 'EACH'
type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum string

const (
	GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnumEach GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum = "EACH"
)

func (e *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum: %s", s)
	}
}

// GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty - Quantity of an item that is input by the seller
type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQtyUnitEnum `json:"unit"`
}

// GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum - The unit of measurement. Example: 'EACH'
type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum string

const (
	GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnumEach GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum = "EACH"
)

func (e *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EACH":
		*e = GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum: %s", s)
	}
}

// GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty - Quantity that has been ordered by the customers but not yet shipped
type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty struct {
	// Inventory Count
	Amount float64 `json:"amount"`
	// The unit of measurement. Example: 'EACH'
	Unit GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQtyUnitEnum `json:"unit"`
}

type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes struct {
	// Quantity of an item that is available to be allocated to orders
	AvailToSellQty *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesAvailToSellQty `json:"availToSellQty,omitempty"`
	// Quantity of an item that is input by the seller
	InputQty *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesInputQty `json:"inputQty,omitempty"`
	// Quantity that has been ordered by the customers but not yet shipped
	ReservedQty *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodesReservedQty `json:"reservedQty,omitempty"`
	// ShipNode Id of the ship node for which the inventory is requested
	ShipNode *string `json:"shipNode,omitempty"`
}

type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories struct {
	Nodes []GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventoriesNodes `json:"nodes,omitempty"`
	// An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
	Sku *string `json:"sku,omitempty"`
}

type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElements struct {
	Inventories []GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElementsInventories `json:"inventories,omitempty"`
}

type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONMeta struct {
	// Used for pagination to fetch the next set of items.
	NextCursor *string `json:"nextCursor,omitempty"`
	// Total number of Skus of the Seller. Example: '235'
	TotalCount *float64 `json:"totalCount,omitempty"`
}

// GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSON - Successful Operation
type GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSON struct {
	Elements *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONElements `json:"elements,omitempty"`
	Meta     *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONMeta     `json:"meta,omitempty"`
}

type GetMultiNodeInventoryForAllSkuAndAllShipNodesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful Operation
	GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSONObject *GetMultiNodeInventoryForAllSkuAndAllShipNodes200ApplicationJSON
}
