// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ScoreDetailResultEnum - Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status
type ScoreDetailResultEnum string

const (
	ScoreDetailResultEnumPending  ScoreDetailResultEnum = "pending"
	ScoreDetailResultEnumFound    ScoreDetailResultEnum = "found"
	ScoreDetailResultEnumNotFound ScoreDetailResultEnum = "not_found"
	ScoreDetailResultEnumError    ScoreDetailResultEnum = "error"
	ScoreDetailResultEnumDelayed  ScoreDetailResultEnum = "delayed"
	ScoreDetailResultEnumIgnored  ScoreDetailResultEnum = "ignored"
)

func (e ScoreDetailResultEnum) ToPointer() *ScoreDetailResultEnum {
	return &e
}

func (e *ScoreDetailResultEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "found":
		fallthrough
	case "not_found":
		fallthrough
	case "error":
		fallthrough
	case "delayed":
		fallthrough
	case "ignored":
		*e = ScoreDetailResultEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreDetailResultEnum: %v", v)
	}
}

// ScoreDetailSeverityEnum - Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none
type ScoreDetailSeverityEnum string

const (
	ScoreDetailSeverityEnumUnknown  ScoreDetailSeverityEnum = "unknown"
	ScoreDetailSeverityEnumNone     ScoreDetailSeverityEnum = "none"
	ScoreDetailSeverityEnumVeryLow  ScoreDetailSeverityEnum = "very_low"
	ScoreDetailSeverityEnumLow      ScoreDetailSeverityEnum = "low"
	ScoreDetailSeverityEnumMedium   ScoreDetailSeverityEnum = "medium"
	ScoreDetailSeverityEnumHigh     ScoreDetailSeverityEnum = "high"
	ScoreDetailSeverityEnumVeryHigh ScoreDetailSeverityEnum = "very_high"
)

func (e ScoreDetailSeverityEnum) ToPointer() *ScoreDetailSeverityEnum {
	return &e
}

func (e *ScoreDetailSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "none":
		fallthrough
	case "very_low":
		fallthrough
	case "low":
		fallthrough
	case "medium":
		fallthrough
	case "high":
		fallthrough
	case "very_high":
		*e = ScoreDetailSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScoreDetailSeverityEnum: %v", v)
	}
}

// ScoreDetail - Represents score detail of a background check
type ScoreDetail struct {
	// Overall result of the data collected. If at least one collected data status is found, the result will be found, otherwise, it will be the most frecuent status
	Result ScoreDetailResultEnum `json:"result"`
	// Dataset score. Number between 0 and 1 where 1 is the best score.
	Score float32 `json:"score"`
	// Risk asociated with each category for the search according to the information found. None is returned when the person, vehicle or company is in the clear. Unknown is returned when the score is none
	Severity ScoreDetailSeverityEnum `json:"severity"`
}
