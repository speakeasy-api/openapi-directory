"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import currentperformancerisk_enum as shared_currentperformancerisk_enum
from ..shared import lambdafunctionmemoryrecommendationoption as shared_lambdafunctionmemoryrecommendationoption
from ..shared import lambdafunctionrecommendationfinding_enum as shared_lambdafunctionrecommendationfinding_enum
from ..shared import lambdafunctionrecommendationfindingreasoncode_enum as shared_lambdafunctionrecommendationfindingreasoncode_enum
from ..shared import lambdafunctionutilizationmetric as shared_lambdafunctionutilizationmetric
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LambdaFunctionRecommendation:
    r"""Describes an Lambda function recommendation."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})  
    current_memory_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentMemorySize'), 'exclude': lambda f: f is None }})  
    current_performance_risk: Optional[shared_currentperformancerisk_enum.CurrentPerformanceRiskEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentPerformanceRisk'), 'exclude': lambda f: f is None }})  
    finding: Optional[shared_lambdafunctionrecommendationfinding_enum.LambdaFunctionRecommendationFindingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finding'), 'exclude': lambda f: f is None }})  
    finding_reason_codes: Optional[list[shared_lambdafunctionrecommendationfindingreasoncode_enum.LambdaFunctionRecommendationFindingReasonCodeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('findingReasonCodes'), 'exclude': lambda f: f is None }})  
    function_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functionArn'), 'exclude': lambda f: f is None }})  
    function_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('functionVersion'), 'exclude': lambda f: f is None }})  
    last_refresh_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRefreshTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    lookback_period_in_days: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lookbackPeriodInDays'), 'exclude': lambda f: f is None }})  
    memory_size_recommendation_options: Optional[list[shared_lambdafunctionmemoryrecommendationoption.LambdaFunctionMemoryRecommendationOption]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('memorySizeRecommendationOptions'), 'exclude': lambda f: f is None }})  
    number_of_invocations: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfInvocations'), 'exclude': lambda f: f is None }})  
    utilization_metrics: Optional[list[shared_lambdafunctionutilizationmetric.LambdaFunctionUtilizationMetric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utilizationMetrics'), 'exclude': lambda f: f is None }})  
    