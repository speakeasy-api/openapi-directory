<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new ScanConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateResponse
     */
	public function websecurityscannerProjectsScanConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/scanConfigs', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scanConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an existing ScanConfig and its child resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteResponse
     */
	public function websecurityscannerProjectsScanConfigsDelete(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ScanConfigs under a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListResponse
     */
	public function websecurityscannerProjectsScanConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/scanConfigs', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listScanConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListScanConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a ScanConfig. This method support partial update of a ScanConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchResponse
     */
	public function websecurityscannerProjectsScanConfigsPatch(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scanConfig", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List CrawledUrls under a given ScanRun.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse
     */
	public function websecurityscannerProjectsScanConfigsScanRunsCrawledUrlsList(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/crawledUrls', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsCrawledUrlsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCrawledUrlsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCrawledUrlsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all FindingTypeStats under a given ScanRun.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse
     */
	public function websecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsList(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/findingTypeStats', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingTypeStatsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFindingTypeStatsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFindingTypeStatsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a Finding.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse
     */
	public function websecurityscannerProjectsScanConfigsScanRunsFindingsGet(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->finding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Finding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List Findings under a given ScanRun.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse
     */
	public function websecurityscannerProjectsScanConfigsScanRunsFindingsList(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/findings', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsFindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists ScanRuns under a given ScanConfig, in descending order of ScanRun stop time.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListResponse
     */
	public function websecurityscannerProjectsScanConfigsScanRunsList(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{parent}/scanRuns', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listScanRunsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListScanRunsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops a ScanRun. The stopped ScanRun is returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopResponse
     */
	public function websecurityscannerProjectsScanConfigsScanRunsStop(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsScanRunsStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanRun', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start a ScanRun according to the given ScanConfig.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartResponse
     */
	public function websecurityscannerProjectsScanConfigsStart(
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta/{name}:start', \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebsecurityscannerProjectsScanConfigsStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scanRun = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScanRun', 'json');
            }
        }

        return $response;
    }
}