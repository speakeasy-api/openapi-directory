/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class GetV2UsersJsonRequest extends SpeakeasyBase {
  /**
   * Filters users based on active attribute. Defaults to not applied
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=active",
  })
  active?: boolean;

  /**
   * Filters users by group_id.  An additional value of "_is_null" can be passed to filter users that are not in a group
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=group_id",
  })
  groupId?: string[];

  /**
   * Filters list to only include guids
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=guid" })
  guid?: string[];

  /**
   * Filters users based on if they have a crm user mapped or not.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=has_crm_user",
  })
  hasCrmUser?: boolean;

  /**
   * IDs of users to fetch. If a record can't be found, that record won't be returned and your request will be successful
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=false;name=ids" })
  ids?: number[];

  /**
   * Whether to include total_pages and total_count in the metadata. Defaults to false
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_paging_counts",
  })
  includePagingCounts?: boolean;

  /**
   * The current page to fetch users from. Defaults to returning all users
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * How many users to show per page in the range [1, 100]. Defaults to 25.  Results are only paginated if the page parameter is defined
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Filters users by role_id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=role_id",
  })
  roleId?: string[];

  /**
   * Space-separated list of keywords used to find case-insensitive substring matches against First Name, Last Name, or Email
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search",
  })
  search?: string;

  /**
   * Key to sort on, must be one of: id, email, name, group, role. Defaults to id
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_by",
  })
  sortBy?: string;

  /**
   * Direction to sort in, must be one of: ASC, DESC. Defaults to DESC
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_direction",
  })
  sortDirection?: string;

  /**
   * Defaults to true.
   *
   * @remarks
   *
   * When true, only shows users that are actionable based on the team's privacy settings.
   * When false, shows all users on the team, even if you can't take action on that user. Deactivated users are also included when false.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=visible_only",
  })
  visibleOnly?: boolean;

  /**
   * Filters users based on assigned work_country.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=work_country",
  })
  workCountry?: string[];
}

export class GetV2UsersJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
