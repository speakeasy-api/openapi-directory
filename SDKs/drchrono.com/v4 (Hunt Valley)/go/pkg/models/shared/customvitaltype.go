// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CustomVitalTypeDataTypeEnum - One of `text`, `number`, or `single_sel`
type CustomVitalTypeDataTypeEnum string

const (
	CustomVitalTypeDataTypeEnumText      CustomVitalTypeDataTypeEnum = "text"
	CustomVitalTypeDataTypeEnumNumber    CustomVitalTypeDataTypeEnum = "number"
	CustomVitalTypeDataTypeEnumSingleSel CustomVitalTypeDataTypeEnum = "single_sel"
)

func (e *CustomVitalTypeDataTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "text":
		fallthrough
	case "number":
		fallthrough
	case "single_sel":
		*e = CustomVitalTypeDataTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CustomVitalTypeDataTypeEnum: %s", s)
	}
}

// CustomVitalType - OK
type CustomVitalType struct {
	// If `data_type` is `single_sel`, this is the array of values in the select's dropdown.
	AllowedValues []string `json:"allowed_values,omitempty"`
	// Indicates that the object has been soft-deleted and should not be used
	Archived *bool `json:"archived,omitempty"`
	// One of `text`, `number`, or `single_sel`
	DataType    *CustomVitalTypeDataTypeEnum `json:"data_type,omitempty"`
	Description *string                      `json:"description,omitempty"`
	// ID of the doctor who created the custom vital
	Doctor *string `json:"doctor,omitempty"`
	// If `is_fraction_field` is true, this is the character separating the numerator and denominator
	FractionDelimiter *string `json:"fraction_delimiter,omitempty"`
	ID                *int64  `json:"id,omitempty"`
	IsFractionField   *bool   `json:"is_fraction_field,omitempty"`
	Name              *string `json:"name,omitempty"`
	Unit              *string `json:"unit,omitempty"`
}
