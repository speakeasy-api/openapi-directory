// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribeDBProxyTargetsActionEnum
type POSTDescribeDBProxyTargetsActionEnum string

const (
	POSTDescribeDBProxyTargetsActionEnumDescribeDbProxyTargets POSTDescribeDBProxyTargetsActionEnum = "DescribeDBProxyTargets"
)

func (e *POSTDescribeDBProxyTargetsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBProxyTargets":
		*e = POSTDescribeDBProxyTargetsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBProxyTargetsActionEnum: %s", s)
	}
}

// POSTDescribeDBProxyTargetsVersionEnum
type POSTDescribeDBProxyTargetsVersionEnum string

const (
	POSTDescribeDBProxyTargetsVersionEnumTwoThousandAndFourteen1031 POSTDescribeDBProxyTargetsVersionEnum = "2014-10-31"
)

func (e *POSTDescribeDBProxyTargetsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2014-10-31":
		*e = POSTDescribeDBProxyTargetsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribeDBProxyTargetsVersionEnum: %s", s)
	}
}

type POSTDescribeDBProxyTargetsQueryParams struct {
	Action POSTDescribeDBProxyTargetsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination token
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// Pagination limit
	MaxRecords *string                               `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version    POSTDescribeDBProxyTargetsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribeDBProxyTargetsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribeDBProxyTargetsRequest struct {
	QueryParams POSTDescribeDBProxyTargetsQueryParams
	Headers     POSTDescribeDBProxyTargetsHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribeDBProxyTargetsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
