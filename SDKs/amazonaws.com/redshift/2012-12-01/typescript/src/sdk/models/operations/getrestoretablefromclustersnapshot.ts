/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETRestoreTableFromClusterSnapshotActionEnum {
  RestoreTableFromClusterSnapshot = "RestoreTableFromClusterSnapshot",
}

export enum GETRestoreTableFromClusterSnapshotVersionEnum {
  TwoThousandAndTwelve1201 = "2012-12-01",
}

export class GETRestoreTableFromClusterSnapshotRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETRestoreTableFromClusterSnapshotActionEnum;

  /**
   * The identifier of the Amazon Redshift cluster to restore the table to.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ClusterIdentifier",
  })
  clusterIdentifier: string;

  /**
   * Indicates whether name identifiers for database, schema, and table are case sensitive. If <code>true</code>, the names are case sensitive. If <code>false</code> (default), the names are not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=EnableCaseSensitiveIdentifier",
  })
  enableCaseSensitiveIdentifier?: boolean;

  /**
   * The name of the table to create as a result of the current request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NewTableName",
  })
  newTableName: string;

  /**
   * The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SnapshotIdentifier",
  })
  snapshotIdentifier: string;

  /**
   * The name of the source database that contains the table to restore from.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SourceDatabaseName",
  })
  sourceDatabaseName: string;

  /**
   * The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SourceSchemaName",
  })
  sourceSchemaName?: string;

  /**
   * The name of the source table to restore from.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=SourceTableName",
  })
  sourceTableName: string;

  /**
   * The name of the database to restore the table to.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TargetDatabaseName",
  })
  targetDatabaseName?: string;

  /**
   * The name of the schema to restore the table to.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TargetSchemaName",
  })
  targetSchemaName?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETRestoreTableFromClusterSnapshotVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETRestoreTableFromClusterSnapshotResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
