"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import legacy_error as shared_legacy_error
from ..shared import on_demand_promotion as shared_on_demand_promotion
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CreateVodPromotionSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class CreateVodPromotionRequestBodyAccessTypeEnum(str, Enum):
    r"""The promotion access type, which is a purchase option that isn't available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the `download` or `stream_period` fields.
    
    Option descriptions:
     * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.
     * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn't available on the container. \"vip\" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields.
    """
    DEFAULT = 'default'
    VIP = 'vip'

class CreateVodPromotionRequestBodyDiscountTypeEnum(str, Enum):
    r"""The type of discount offered by the promo code. When `access_type` is `vip`, the value of this field must be `free`.
    
    Option descriptions:
     * `free` - Reduces the price to zero.
     * `percent` - Reduces the price by an amount defined in the \"percent_off\" field.
    """
    FREE = 'free'
    PERCENT = 'percent'

class CreateVodPromotionRequestBodyProductTypeEnum(str, Enum):
    r"""The type of transaction to which the promotion applies. When `access_type` is `default`, the default value is `any`, but the default value is `rent` when `access_type` is `vip`. Also, when `access_type` is `vip`, the only valid product types are `buy` and `rent`."""
    ANY = 'any'
    BUY = 'buy'
    BUY_EPISODE = 'buy_episode'
    RENT = 'rent'
    RENT_EPISODE = 'rent_episode'
    SUBSCRIBE = 'subscribe'

class CreateVodPromotionRequestBodyStreamPeriodEnum(str, Enum):
    r"""The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when `access_type` is `vip` or `product_type` is `rent`."""
    ONE_WEEK = '1_week'
    ONE_YEAR = '1_year'
    TWENTY_FOUR_HOUR = '24_hour'
    THIRTY_DAY = '30_day'
    THREE_MONTH = '3_month'
    FORTY_EIGHT_HOUR = '48_hour'
    SIX_MONTH = '6_month'
    SEVENTY_TWO_HOUR = '72_hour'

class CreateVodPromotionRequestBodyTypeEnum(str, Enum):
    r"""The type of promotion. When `access_type` is `vip`, the value for this field must be `batch`.
    
    Option descriptions:
     * `batch` - Generates many random promo codes with one use each.
     * `single` - Generates one promo code that can be used many times.
    """
    BATCH = 'batch'
    SINGLE = 'single'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateVodPromotionRequestBody:
    
    download: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('download') }})
    r"""Whether the promotion grants download access to VOD content. This is necessary only when not previously defined in the On Demand container or when `access_type` is `vip` or `product_type` is `buy`."""  
    stream_period: CreateVodPromotionRequestBodyStreamPeriodEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stream_period') }})
    r"""The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when `access_type` is `vip` or `product_type` is `rent`."""  
    total: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total') }})
    r"""The number of promotions to generate when `type` is `batch`, or the number of uses of the promotion when `type` is `single`."""  
    type: CreateVodPromotionRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of promotion. When `access_type` is `vip`, the value for this field must be `batch`.
    
    Option descriptions:
     * `batch` - Generates many random promo codes with one use each.
     * `single` - Generates one promo code that can be used many times.
    """  
    access_type: Optional[CreateVodPromotionRequestBodyAccessTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access_type'), 'exclude': lambda f: f is None }})
    r"""The promotion access type, which is a purchase option that isn't available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the `download` or `stream_period` fields.
    
    Option descriptions:
     * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.
     * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn't available on the container. \"vip\" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields.
    """  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The promotion code. This field is ignored for batch promotions."""  
    discount_type: Optional[CreateVodPromotionRequestBodyDiscountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('discount_type'), 'exclude': lambda f: f is None }})
    r"""The type of discount offered by the promo code. When `access_type` is `vip`, the value of this field must be `free`.
    
    Option descriptions:
     * `free` - Reduces the price to zero.
     * `percent` - Reduces the price by an amount defined in the \"percent_off\" field.
    """  
    end_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'exclude': lambda f: f is None }})
    r"""The end of the promotion period. If you don't specify a value, the promotion will never expire."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""The description of a batch promotion. This field is ignored for single promotions."""  
    percent_off: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percent_off'), 'exclude': lambda f: f is None }})
    r"""The percentage of the discount by using this promo code. This field is applicable only when `discount_type` is `percent`."""  
    product_type: Optional[CreateVodPromotionRequestBodyProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product_type'), 'exclude': lambda f: f is None }})
    r"""The type of transaction to which the promotion applies. When `access_type` is `default`, the default value is `any`, but the default value is `rent` when `access_type` is `vip`. Also, when `access_type` is `vip`, the only valid product types are `buy` and `rent`."""  
    start_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'exclude': lambda f: f is None }})
    r"""The start of the promotion period. If you don't specify a value, the start time defaults to the time that the promotion was created."""  
    

@dataclasses.dataclass
class CreateVodPromotionRequest:
    
    ondemand_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'ondemand_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the On Demand."""  
    request_body: CreateVodPromotionRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/vnd.vimeo.ondemand.promotion+json' }})  
    

@dataclasses.dataclass
class CreateVodPromotionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""* There are errors in the request.
    * The promo code already exists.
    """  
    on_demand_promotion: Optional[shared_on_demand_promotion.OnDemandPromotion] = dataclasses.field(default=None)
    r"""The promotion was added."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    