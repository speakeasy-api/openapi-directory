"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FacebookMessenger:
    r"""Managing your [Facebook Messenger](https://developer.nexmo.com/messages/concepts/facebook) account"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_messenger_account(self, request: operations.CreateMessengerAccountRequestBody, security: operations.CreateMessengerAccountSecurity) -> operations.CreateMessengerAccountResponse:
        r"""Create a Messenger account"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/messenger'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMessengerAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessengerAccountResponse])
                res.messenger_account_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateMessengerAccount400ApplicationJSON])
                res.create_messenger_account_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndOneResponse])
                res.four_hundred_and_one_response = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThreeResponse])
                res.four_hundred_and_three_response = out

        return res

    def delete_messenger_account(self, request: operations.DeleteMessengerAccountRequest, security: operations.DeleteMessengerAccountSecurity) -> operations.DeleteMessengerAccountResponse:
        r"""Delete a Messenger account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteMessengerAccountRequest, base_url, '/messenger/{external_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteMessengerAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 404]:
            pass
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndOneResponse])
                res.four_hundred_and_one_response = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThreeResponse])
                res.four_hundred_and_three_response = out

        return res

    def get_messenger_account(self, request: operations.GetMessengerAccountRequest, security: operations.GetMessengerAccountSecurity) -> operations.GetMessengerAccountResponse:
        r"""Retrieve a Messenger account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMessengerAccountRequest, base_url, '/messenger/{external_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMessengerAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessengerAccountResponse])
                res.messenger_account_response = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndOneResponse])
                res.four_hundred_and_one_response = out
        elif http_res.status_code == 404:
            pass

        return res

    def update_messenger_account(self, request: operations.UpdateMessengerAccountRequest, security: operations.UpdateMessengerAccountSecurity) -> operations.UpdateMessengerAccountResponse:
        r"""Update a Messenger account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateMessengerAccountRequest, base_url, '/messenger/{external_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateMessengerAccountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateMessengerAccount200ApplicationJSON])
                res.update_messenger_account_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateMessengerAccount400ApplicationJSON])
                res.update_messenger_account_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndOneResponse])
                res.four_hundred_and_one_response = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndThreeResponse])
                res.four_hundred_and_three_response = out
        elif http_res.status_code == 404:
            pass

        return res

    