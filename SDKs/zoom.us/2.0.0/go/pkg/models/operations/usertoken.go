// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UserTokenSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

// UserTokenTypeEnum - User token types:<br>`token` - Used for starting meetings with the client SDK. This token expires in 14 days and a new token will be returned after the expiry.<br>`zak` - Used for generating the start meeting URL. The token expiration time is two hours. For API users, the expiration time is 90 days.
type UserTokenTypeEnum string

const (
	UserTokenTypeEnumToken UserTokenTypeEnum = "token"
	UserTokenTypeEnumZak   UserTokenTypeEnum = "zak"
)

func (e *UserTokenTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "token":
		fallthrough
	case "zak":
		*e = UserTokenTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserTokenTypeEnum: %s", s)
	}
}

type UserTokenRequest struct {
	// Use this field in conjunction with the `type` field where the value of `type` field is `zak`. The value of this field denotes the expiry time of the `zak` token in seconds. For example, if you would like the zak token to be expired after one hour of the token generation, the value of this field should be `3600`.
	TTL *int64 `queryParam:"style=form,explode=true,name=ttl"`
	// User token types:<br>`token` - Used for starting meetings with the client SDK. This token expires in 14 days and a new token will be returned after the expiry.<br>`zak` - Used for generating the start meeting URL. The token expiration time is two hours. For API users, the expiration time is 90 days.
	Type *UserTokenTypeEnum `queryParam:"style=form,explode=true,name=type"`
	// The user ID or email address of the user. For user-level apps, pass `me` as the value for userId.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

// UserToken200ApplicationXML - **HTTP Status Code:** `200`<br>
// Token returned.
type UserToken200ApplicationXML struct {
	// User token.
	Token *string
}

// UserToken200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Token returned.
type UserToken200ApplicationJSON struct {
	// User token.
	Token *string `json:"token,omitempty"`
}

type UserTokenResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Token returned.
	UserToken200ApplicationJSONObject *UserToken200ApplicationJSON
}
