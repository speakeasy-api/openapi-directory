/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * &lt;div class="swagger-ui-wrap extraFooter"&gt;&lt;h3&gt;Common Features / Behaviors&lt;/h3&gt; &lt;div class="features"&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;* "sort" param:&lt;/strong&gt; supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. &lt;br/&gt; &lt;strong&gt;&lt;span&gt;Examples:&lt;/span&gt;&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;span class="example"&gt;name&lt;/span&gt;&lt;span class="description"&gt;sort results by name ascending&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class="example"&gt;-name&lt;/span&gt;&lt;span class="description"&gt;sort results by name descending&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class="example"&gt;-name,id&lt;/span&gt;&lt;span class="description"&gt;sort results by name descending and then by id ascending&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class="example"&gt;id,-dateContentAuthored&lt;/span&gt;&lt;span class="description"&gt;sort results by id ascending and then date descending&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Date formats:&lt;/strong&gt; Date input format is expected to be based on &lt;a href="http://www.ietf.org/rfc/rfc3339.txt"&gt;RFC 3339&lt;/a&gt;. &lt;br/&gt; &lt;span&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/span&gt; &lt;ul&gt;&lt;li&gt;2013-11-18T18:43:01Z&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "/api/v2",
	};
  	
    /**
     * Information about campaigns
     */
    public Campaigns campaigns;
    /**
     * Information about languages
     */
    public Languages languages;
    /**
     * Information about media
     */
    public Media media;
    /**
     * Information about media types
     */
    public MediaTypes mediaTypes;
    /**
     * Global Search
     */
    public Resources resources;
    /**
     * Information about tags
     */
    public Sources sources;
    /**
     * Information about tags
     */
    public Tags tags;
    /**
     * Get media from user generated lists.
     */
    public UserMediaLists userMediaLists;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
		
		this.campaigns = new Campaigns(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.languages = new Languages(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.media = new Media(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.mediaTypes = new MediaTypes(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.resources = new Resources(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.sources = new Sources(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.tags = new Tags(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.userMediaLists = new UserMediaLists(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}