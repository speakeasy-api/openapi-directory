// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PrfndSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type PrfndRequestBodyCertificateParameters struct {
	// Account No./PPO No.
	AcNo string `json:"AC_NO"`
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
}

// PrfndRequestBodyFormatEnum - The format of the certificate in response.
type PrfndRequestBodyFormatEnum string

const (
	PrfndRequestBodyFormatEnumPdf PrfndRequestBodyFormatEnum = "pdf"
)

func (e *PrfndRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = PrfndRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PrfndRequestBodyFormatEnum: %s", s)
	}
}

// PrfndRequestBody - Request format
type PrfndRequestBody struct {
	CertificateParameters *PrfndRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PrfndRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type PrfndRequest struct {
	// Request format
	Request  *PrfndRequestBody `request:"mediaType=application/json"`
	Security PrfndSecurity
}

type Prfnd504ApplicationJSONErrorEnum string

const (
	Prfnd504ApplicationJSONErrorEnumGatewayTimeout Prfnd504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Prfnd504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Prfnd504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd504ApplicationJSONErrorEnum: %s", s)
	}
}

type Prfnd504ApplicationJSONErrorDescriptionEnum string

const (
	Prfnd504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Prfnd504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Prfnd504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Prfnd504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prfnd504ApplicationJSON - Gateway timeout
type Prfnd504ApplicationJSON struct {
	Error            *Prfnd504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prfnd504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prfnd503ApplicationJSONErrorEnum string

const (
	Prfnd503ApplicationJSONErrorEnumServiceUnavailable Prfnd503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Prfnd503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Prfnd503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd503ApplicationJSONErrorEnum: %s", s)
	}
}

type Prfnd503ApplicationJSONErrorDescriptionEnum string

const (
	Prfnd503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Prfnd503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Prfnd503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Prfnd503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prfnd503ApplicationJSON - Service unavailable
type Prfnd503ApplicationJSON struct {
	Error            *Prfnd503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prfnd503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prfnd502ApplicationJSONErrorEnum string

const (
	Prfnd502ApplicationJSONErrorEnumBadGatewy Prfnd502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Prfnd502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Prfnd502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd502ApplicationJSONErrorEnum: %s", s)
	}
}

type Prfnd502ApplicationJSONErrorDescriptionEnum string

const (
	Prfnd502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Prfnd502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Prfnd502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Prfnd502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prfnd502ApplicationJSON - Bad gateway
type Prfnd502ApplicationJSON struct {
	Error            *Prfnd502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prfnd502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prfnd500ApplicationJSONErrorEnum string

const (
	Prfnd500ApplicationJSONErrorEnumInternalServerError Prfnd500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Prfnd500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Prfnd500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd500ApplicationJSONErrorEnum: %s", s)
	}
}

type Prfnd500ApplicationJSONErrorDescriptionEnum string

const (
	Prfnd500ApplicationJSONErrorDescriptionEnumInternalServerError Prfnd500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Prfnd500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Prfnd500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prfnd500ApplicationJSON - Internal server error
type Prfnd500ApplicationJSON struct {
	Error            *Prfnd500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prfnd500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prfnd404ApplicationJSONErrorEnum string

const (
	Prfnd404ApplicationJSONErrorEnumRecordNotFound Prfnd404ApplicationJSONErrorEnum = "record_not_found"
	Prfnd404ApplicationJSONErrorEnumURLNotFound    Prfnd404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Prfnd404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Prfnd404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd404ApplicationJSONErrorEnum: %s", s)
	}
}

type Prfnd404ApplicationJSONErrorDescriptionEnum string

const (
	Prfnd404ApplicationJSONErrorDescriptionEnumNoRecordFound               Prfnd404ApplicationJSONErrorDescriptionEnum = "No record found"
	Prfnd404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Prfnd404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Prfnd404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Prfnd404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prfnd404ApplicationJSON - No record found
type Prfnd404ApplicationJSON struct {
	Error            *Prfnd404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prfnd404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prfnd401ApplicationJSONErrorEnum string

const (
	Prfnd401ApplicationJSONErrorEnumInvalidAuthentication Prfnd401ApplicationJSONErrorEnum = "invalid_authentication"
	Prfnd401ApplicationJSONErrorEnumInvalidAuthorization  Prfnd401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Prfnd401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Prfnd401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd401ApplicationJSONErrorEnum: %s", s)
	}
}

type Prfnd401ApplicationJSONErrorDescriptionEnum string

const (
	Prfnd401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Prfnd401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Prfnd401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Prfnd401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Prfnd401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Prfnd401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prfnd401ApplicationJSON - Unauthorized access
type Prfnd401ApplicationJSON struct {
	Error            *Prfnd401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prfnd401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Prfnd400ApplicationJSONErrorEnum string

const (
	Prfnd400ApplicationJSONErrorEnumMissingParameter Prfnd400ApplicationJSONErrorEnum = "missing_parameter"
	Prfnd400ApplicationJSONErrorEnumInvalidParameter Prfnd400ApplicationJSONErrorEnum = "invalid_parameter"
	Prfnd400ApplicationJSONErrorEnumInvalidFormat    Prfnd400ApplicationJSONErrorEnum = "invalid_format"
	Prfnd400ApplicationJSONErrorEnumInvalidTxnid     Prfnd400ApplicationJSONErrorEnum = "invalid_txnid"
	Prfnd400ApplicationJSONErrorEnumInvalidConsentid Prfnd400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Prfnd400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Prfnd400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd400ApplicationJSONErrorEnum: %s", s)
	}
}

type Prfnd400ApplicationJSONErrorDescriptionEnum string

const (
	Prfnd400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Prfnd400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Prfnd400ApplicationJSONErrorDescriptionEnumBadRequest                              Prfnd400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Prfnd400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Prfnd400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Prfnd400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Prfnd400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Prfnd400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Prfnd400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Prfnd400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Prfnd400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Prfnd400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Prfnd400ApplicationJSON - Bad request
type Prfnd400ApplicationJSON struct {
	Error            *Prfnd400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Prfnd400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PrfndResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Prfnd400ApplicationJSONObject *Prfnd400ApplicationJSON
	// Unauthorized access
	Prfnd401ApplicationJSONObject *Prfnd401ApplicationJSON
	// No record found
	Prfnd404ApplicationJSONObject *Prfnd404ApplicationJSON
	// Internal server error
	Prfnd500ApplicationJSONObject *Prfnd500ApplicationJSON
	// Bad gateway
	Prfnd502ApplicationJSONObject *Prfnd502ApplicationJSON
	// Service unavailable
	Prfnd503ApplicationJSONObject *Prfnd503ApplicationJSON
	// Gateway timeout
	Prfnd504ApplicationJSONObject *Prfnd504ApplicationJSON
}
