"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateOrganizationAdminRequestBodyAuthenticationMethodEnum(str, Enum):
    r"""The method of authentication the user will use to sign in to the Meraki dashboard. Can be one of 'Email' or 'Cisco SecureX Sign-On'. The default is Email authentication"""
    CISCO_SECURE_X_SIGN_ON = 'Cisco SecureX Sign-On'
    EMAIL = 'Email'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrganizationAdminRequestBodyNetworks:
    
    access: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access') }})
    r"""The privilege of the dashboard administrator on the network"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The network ID"""  
    
class CreateOrganizationAdminRequestBodyOrgAccessEnum(str, Enum):
    r"""The privilege of the dashboard administrator on the organization. Can be one of 'full', 'read-only', 'enterprise' or 'none'"""
    ENTERPRISE = 'enterprise'
    FULL = 'full'
    NONE = 'none'
    READ_ONLY = 'read-only'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrganizationAdminRequestBodyTags:
    
    access: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('access') }})
    r"""The privilege of the dashboard administrator on the tag"""  
    tag: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag') }})
    r"""The name of the tag"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOrganizationAdminRequestBody:
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""The email of the dashboard administrator. This attribute can not be updated."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the dashboard administrator"""  
    org_access: CreateOrganizationAdminRequestBodyOrgAccessEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orgAccess') }})
    r"""The privilege of the dashboard administrator on the organization. Can be one of 'full', 'read-only', 'enterprise' or 'none'"""  
    authentication_method: Optional[CreateOrganizationAdminRequestBodyAuthenticationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationMethod'), 'exclude': lambda f: f is None }})
    r"""The method of authentication the user will use to sign in to the Meraki dashboard. Can be one of 'Email' or 'Cisco SecureX Sign-On'. The default is Email authentication"""  
    networks: Optional[list[CreateOrganizationAdminRequestBodyNetworks]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networks'), 'exclude': lambda f: f is None }})
    r"""The list of networks that the dashboard administrator has privileges on"""  
    tags: Optional[list[CreateOrganizationAdminRequestBodyTags]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The list of tags that the dashboard administrator has privileges on"""  
    

@dataclasses.dataclass
class CreateOrganizationAdminRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: CreateOrganizationAdminRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateOrganizationAdminResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_organization_admin_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    