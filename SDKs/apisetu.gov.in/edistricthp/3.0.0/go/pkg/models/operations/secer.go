// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SecerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type SecerRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// SecerRequestBodyFormatEnum - The format of the certificate in response.
type SecerRequestBodyFormatEnum string

const (
	SecerRequestBodyFormatEnumPdf SecerRequestBodyFormatEnum = "pdf"
)

func (e *SecerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SecerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SecerRequestBodyFormatEnum: %s", s)
	}
}

// SecerRequestBody - Request format
type SecerRequestBody struct {
	CertificateParameters *SecerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SecerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type SecerRequest struct {
	// Request format
	Request  *SecerRequestBody `request:"mediaType=application/json"`
	Security SecerSecurity
}

type Secer504ApplicationJSONErrorEnum string

const (
	Secer504ApplicationJSONErrorEnumGatewayTimeout Secer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Secer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Secer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Secer504ApplicationJSONErrorDescriptionEnum string

const (
	Secer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Secer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Secer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Secer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Secer504ApplicationJSON - Gateway timeout
type Secer504ApplicationJSON struct {
	Error            *Secer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Secer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Secer503ApplicationJSONErrorEnum string

const (
	Secer503ApplicationJSONErrorEnumServiceUnavailable Secer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Secer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Secer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Secer503ApplicationJSONErrorDescriptionEnum string

const (
	Secer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Secer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Secer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Secer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Secer503ApplicationJSON - Service unavailable
type Secer503ApplicationJSON struct {
	Error            *Secer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Secer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Secer502ApplicationJSONErrorEnum string

const (
	Secer502ApplicationJSONErrorEnumBadGatewy Secer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Secer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Secer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Secer502ApplicationJSONErrorDescriptionEnum string

const (
	Secer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Secer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Secer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Secer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Secer502ApplicationJSON - Bad gateway
type Secer502ApplicationJSON struct {
	Error            *Secer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Secer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Secer500ApplicationJSONErrorEnum string

const (
	Secer500ApplicationJSONErrorEnumInternalServerError Secer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Secer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Secer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Secer500ApplicationJSONErrorDescriptionEnum string

const (
	Secer500ApplicationJSONErrorDescriptionEnumInternalServerError Secer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Secer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Secer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Secer500ApplicationJSON - Internal server error
type Secer500ApplicationJSON struct {
	Error            *Secer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Secer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Secer404ApplicationJSONErrorEnum string

const (
	Secer404ApplicationJSONErrorEnumRecordNotFound Secer404ApplicationJSONErrorEnum = "record_not_found"
	Secer404ApplicationJSONErrorEnumURLNotFound    Secer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Secer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Secer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Secer404ApplicationJSONErrorDescriptionEnum string

const (
	Secer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Secer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Secer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Secer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Secer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Secer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Secer404ApplicationJSON - No record found
type Secer404ApplicationJSON struct {
	Error            *Secer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Secer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Secer401ApplicationJSONErrorEnum string

const (
	Secer401ApplicationJSONErrorEnumInvalidAuthentication Secer401ApplicationJSONErrorEnum = "invalid_authentication"
	Secer401ApplicationJSONErrorEnumInvalidAuthorization  Secer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Secer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Secer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Secer401ApplicationJSONErrorDescriptionEnum string

const (
	Secer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Secer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Secer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Secer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Secer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Secer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Secer401ApplicationJSON - Unauthorized access
type Secer401ApplicationJSON struct {
	Error            *Secer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Secer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Secer400ApplicationJSONErrorEnum string

const (
	Secer400ApplicationJSONErrorEnumMissingParameter Secer400ApplicationJSONErrorEnum = "missing_parameter"
	Secer400ApplicationJSONErrorEnumInvalidParameter Secer400ApplicationJSONErrorEnum = "invalid_parameter"
	Secer400ApplicationJSONErrorEnumInvalidFormat    Secer400ApplicationJSONErrorEnum = "invalid_format"
	Secer400ApplicationJSONErrorEnumInvalidTxnid     Secer400ApplicationJSONErrorEnum = "invalid_txnid"
	Secer400ApplicationJSONErrorEnumInvalidConsentid Secer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Secer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Secer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Secer400ApplicationJSONErrorDescriptionEnum string

const (
	Secer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Secer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Secer400ApplicationJSONErrorDescriptionEnumBadRequest                              Secer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Secer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Secer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Secer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Secer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Secer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Secer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Secer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Secer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Secer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Secer400ApplicationJSON - Bad request
type Secer400ApplicationJSON struct {
	Error            *Secer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Secer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SecerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Secer400ApplicationJSONObject *Secer400ApplicationJSON
	// Unauthorized access
	Secer401ApplicationJSONObject *Secer401ApplicationJSON
	// No record found
	Secer404ApplicationJSONObject *Secer404ApplicationJSON
	// Internal server error
	Secer500ApplicationJSONObject *Secer500ApplicationJSON
	// Bad gateway
	Secer502ApplicationJSONObject *Secer502ApplicationJSON
	// Service unavailable
	Secer503ApplicationJSONObject *Secer503ApplicationJSON
	// Gateway timeout
	Secer504ApplicationJSONObject *Secer504ApplicationJSON
}
