/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The mutual TLS authentication configuration for a custom domain name.
 */
export class UpdateDomainNameRequestBodyMutualTlsAuthentication extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "TruststoreUri" })
  truststoreUri?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TruststoreVersion" })
  truststoreVersion?: string;
}

export class UpdateDomainNameRequestBody extends SpeakeasyBase {
  /**
   * The domain name configurations.
   */
  @SpeakeasyMetadata({ elemType: shared.DomainNameConfiguration })
  @Expose({ name: "domainNameConfigurations" })
  @Type(() => shared.DomainNameConfiguration)
  domainNameConfigurations?: shared.DomainNameConfiguration[];

  /**
   * The mutual TLS authentication configuration for a custom domain name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mutualTlsAuthentication" })
  @Type(() => UpdateDomainNameRequestBodyMutualTlsAuthentication)
  mutualTlsAuthentication?: UpdateDomainNameRequestBodyMutualTlsAuthentication;
}

export class UpdateDomainNameRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateDomainNameRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The domain name.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=domainName",
  })
  domainName: string;
}

export class UpdateDomainNameResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateDomainNameResponse?: shared.UpdateDomainNameResponse;
}
