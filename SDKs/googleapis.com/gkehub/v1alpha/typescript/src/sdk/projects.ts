/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Adds a new Feature.
   */
  gkehubProjectsLocationsFeaturesCreate(
    req: operations.GkehubProjectsLocationsFeaturesCreateRequest,
    security: operations.GkehubProjectsLocationsFeaturesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsFeaturesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsFeaturesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/features",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "featureInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsFeaturesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsFeaturesCreateResponse =
        new operations.GkehubProjectsLocationsFeaturesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Features in a given project and location.
   */
  gkehubProjectsLocationsFeaturesList(
    req: operations.GkehubProjectsLocationsFeaturesListRequest,
    security: operations.GkehubProjectsLocationsFeaturesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsFeaturesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsFeaturesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/features",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsFeaturesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsFeaturesListResponse =
        new operations.GkehubProjectsLocationsFeaturesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFeaturesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFeaturesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a fleet.
   */
  gkehubProjectsLocationsFleetsCreate(
    req: operations.GkehubProjectsLocationsFleetsCreateRequest,
    security: operations.GkehubProjectsLocationsFleetsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsFleetsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsFleetsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/fleets",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "fleetInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsFleetsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsFleetsCreateResponse =
        new operations.GkehubProjectsLocationsFleetsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns all fleets within an organization or a project that the caller has access to.
   */
  gkehubProjectsLocationsFleetsList(
    req: operations.GkehubProjectsLocationsFleetsListRequest,
    security: operations.GkehubProjectsLocationsFleetsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsFleetsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsFleetsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/fleets",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsFleetsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsFleetsListResponse =
        new operations.GkehubProjectsLocationsFleetsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listFleetsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListFleetsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  gkehubProjectsLocationsList(
    req: operations.GkehubProjectsLocationsListRequest,
    security: operations.GkehubProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsListResponse =
        new operations.GkehubProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a MembershipBinding.
   */
  gkehubProjectsLocationsMembershipsBindingsCreate(
    req: operations.GkehubProjectsLocationsMembershipsBindingsCreateRequest,
    security: operations.GkehubProjectsLocationsMembershipsBindingsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsBindingsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsMembershipsBindingsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/bindings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "membershipBindingInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsBindingsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsBindingsCreateResponse =
        new operations.GkehubProjectsLocationsMembershipsBindingsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists MembershipBindings.
   */
  gkehubProjectsLocationsMembershipsBindingsList(
    req: operations.GkehubProjectsLocationsMembershipsBindingsListRequest,
    security: operations.GkehubProjectsLocationsMembershipsBindingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsBindingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsMembershipsBindingsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/bindings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsBindingsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsBindingsListResponse =
        new operations.GkehubProjectsLocationsMembershipsBindingsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMembershipBindingsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMembershipBindingsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
   */
  gkehubProjectsLocationsMembershipsCreate(
    req: operations.GkehubProjectsLocationsMembershipsCreateRequest,
    security: operations.GkehubProjectsLocationsMembershipsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsMembershipsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/memberships",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "membershipInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsCreateResponse =
        new operations.GkehubProjectsLocationsMembershipsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly.
   */
  gkehubProjectsLocationsMembershipsGenerateConnectManifest(
    req: operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest,
    security: operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}:generateConnectManifest",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse =
        new operations.GkehubProjectsLocationsMembershipsGenerateConnectManifestResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateConnectManifestResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateConnectManifestResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
   */
  gkehubProjectsLocationsMembershipsGetIamPolicy(
    req: operations.GkehubProjectsLocationsMembershipsGetIamPolicyRequest,
    security: operations.GkehubProjectsLocationsMembershipsGetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsGetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsMembershipsGetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{resource}:getIamPolicy",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsGetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsGetIamPolicyResponse =
        new operations.GkehubProjectsLocationsMembershipsGetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Memberships in a given project and location.
   */
  gkehubProjectsLocationsMembershipsList(
    req: operations.GkehubProjectsLocationsMembershipsListRequest,
    security: operations.GkehubProjectsLocationsMembershipsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsMembershipsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/memberships",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsMembershipsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsListResponse =
        new operations.GkehubProjectsLocationsMembershipsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMembershipsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListMembershipsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Memberships of admin clusters in a given project and location. **This method is only used internally**.
   */
  gkehubProjectsLocationsMembershipsListAdmin(
    req: operations.GkehubProjectsLocationsMembershipsListAdminRequest,
    security: operations.GkehubProjectsLocationsMembershipsListAdminSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsListAdminResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsMembershipsListAdminRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/memberships:listAdmin",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsListAdminSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsListAdminResponse =
        new operations.GkehubProjectsLocationsMembershipsListAdminResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAdminClusterMembershipsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAdminClusterMembershipsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   */
  gkehubProjectsLocationsMembershipsSetIamPolicy(
    req: operations.GkehubProjectsLocationsMembershipsSetIamPolicyRequest,
    security: operations.GkehubProjectsLocationsMembershipsSetIamPolicySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsSetIamPolicyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsMembershipsSetIamPolicyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{resource}:setIamPolicy",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "setIamPolicyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsSetIamPolicySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsSetIamPolicyResponse =
        new operations.GkehubProjectsLocationsMembershipsSetIamPolicyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.policy = utils.objectToClass(httpRes?.data, shared.Policy);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
   */
  gkehubProjectsLocationsMembershipsTestIamPermissions(
    req: operations.GkehubProjectsLocationsMembershipsTestIamPermissionsRequest,
    security: operations.GkehubProjectsLocationsMembershipsTestIamPermissionsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsTestIamPermissionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsMembershipsTestIamPermissionsRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{resource}:testIamPermissions",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "testIamPermissionsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsTestIamPermissionsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsTestIamPermissionsResponse =
        new operations.GkehubProjectsLocationsMembershipsTestIamPermissionsResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.testIamPermissionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.TestIamPermissionsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * ValidateCreateMembership is a preflight check for CreateMembership. It checks the following: 1. Caller has the required `gkehub.memberships.create` permission. 2. The membership_id is still available.
   */
  gkehubProjectsLocationsMembershipsValidateCreate(
    req: operations.GkehubProjectsLocationsMembershipsValidateCreateRequest,
    security: operations.GkehubProjectsLocationsMembershipsValidateCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsMembershipsValidateCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsMembershipsValidateCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/memberships:validateCreate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "validateCreateMembershipRequestInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsMembershipsValidateCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsMembershipsValidateCreateResponse =
        new operations.GkehubProjectsLocationsMembershipsValidateCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validateCreateMembershipResponse = utils.objectToClass(
              httpRes?.data,
              shared.ValidateCreateMembershipResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a fleet namespace.
   */
  gkehubProjectsLocationsNamespacesCreate(
    req: operations.GkehubProjectsLocationsNamespacesCreateRequest,
    security: operations.GkehubProjectsLocationsNamespacesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsNamespacesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsNamespacesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/namespaces",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "namespaceInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsNamespacesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsNamespacesCreateResponse =
        new operations.GkehubProjectsLocationsNamespacesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists fleet namespaces.
   */
  gkehubProjectsLocationsNamespacesList(
    req: operations.GkehubProjectsLocationsNamespacesListRequest,
    security: operations.GkehubProjectsLocationsNamespacesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsNamespacesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsNamespacesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/namespaces",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsNamespacesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsNamespacesListResponse =
        new operations.GkehubProjectsLocationsNamespacesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listNamespacesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListNamespacesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a RBACRoleBinding.
   */
  gkehubProjectsLocationsNamespacesRbacrolebindingsCreate(
    req: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateRequest,
    security: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/rbacrolebindings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "rbacRoleBindingInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateResponse =
        new operations.GkehubProjectsLocationsNamespacesRbacrolebindingsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists RBACRoleBinding.
   */
  gkehubProjectsLocationsNamespacesRbacrolebindingsList(
    req: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListRequest,
    security: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/rbacrolebindings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListResponse =
        new operations.GkehubProjectsLocationsNamespacesRbacrolebindingsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listRBACRoleBindingsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListRBACRoleBindingsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  gkehubProjectsLocationsOperationsCancel(
    req: operations.GkehubProjectsLocationsOperationsCancelRequest,
    security: operations.GkehubProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsOperationsCancelRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}:cancel",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsOperationsCancelSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsOperationsCancelResponse =
        new operations.GkehubProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  gkehubProjectsLocationsOperationsList(
    req: operations.GkehubProjectsLocationsOperationsListRequest,
    security: operations.GkehubProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsOperationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsOperationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsOperationsListResponse =
        new operations.GkehubProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a Scope.
   */
  gkehubProjectsLocationsScopesCreate(
    req: operations.GkehubProjectsLocationsScopesCreateRequest,
    security: operations.GkehubProjectsLocationsScopesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsScopesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsScopesCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/scopes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "scopeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsScopesCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsScopesCreateResponse =
        new operations.GkehubProjectsLocationsScopesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a Scope.
   */
  gkehubProjectsLocationsScopesDelete(
    req: operations.GkehubProjectsLocationsScopesDeleteRequest,
    security: operations.GkehubProjectsLocationsScopesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsScopesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsScopesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsScopesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsScopesDeleteResponse =
        new operations.GkehubProjectsLocationsScopesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the details of a Scope.
   */
  gkehubProjectsLocationsScopesGet(
    req: operations.GkehubProjectsLocationsScopesGetRequest,
    security: operations.GkehubProjectsLocationsScopesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsScopesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsScopesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsScopesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsScopesGetResponse =
        new operations.GkehubProjectsLocationsScopesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.scope = utils.objectToClass(httpRes?.data, shared.Scope);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists Scopes.
   */
  gkehubProjectsLocationsScopesList(
    req: operations.GkehubProjectsLocationsScopesListRequest,
    security: operations.GkehubProjectsLocationsScopesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsScopesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsScopesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/{parent}/scopes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsScopesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsScopesListResponse =
        new operations.GkehubProjectsLocationsScopesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listScopesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListScopesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a scopes.
   */
  gkehubProjectsLocationsScopesPatch(
    req: operations.GkehubProjectsLocationsScopesPatchRequest,
    security: operations.GkehubProjectsLocationsScopesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GkehubProjectsLocationsScopesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GkehubProjectsLocationsScopesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1alpha/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "scopeInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GkehubProjectsLocationsScopesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GkehubProjectsLocationsScopesPatchResponse =
        new operations.GkehubProjectsLocationsScopesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
