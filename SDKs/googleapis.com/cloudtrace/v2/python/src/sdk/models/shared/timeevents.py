"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import timeevent as shared_timeevent
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TimeEvents:
    r"""A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation on the span, consisting of either user-supplied key:value pairs, or details of a message sent/received between Spans."""
    
    dropped_annotations_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('droppedAnnotationsCount'), 'exclude': lambda f: f is None }})
    r"""The number of dropped annotations in all the included time events. If the value is 0, then no annotations were dropped."""  
    dropped_message_events_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('droppedMessageEventsCount'), 'exclude': lambda f: f is None }})
    r"""The number of dropped message events in all the included time events. If the value is 0, then no message events were dropped."""  
    time_event: Optional[list[shared_timeevent.TimeEvent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeEvent'), 'exclude': lambda f: f is None }})
    r"""A collection of `TimeEvent`s."""  
    