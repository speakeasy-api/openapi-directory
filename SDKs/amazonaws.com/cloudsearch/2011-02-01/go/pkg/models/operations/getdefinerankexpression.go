// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDefineRankExpressionActionEnum
type GETDefineRankExpressionActionEnum string

const (
	GETDefineRankExpressionActionEnumDefineRankExpression GETDefineRankExpressionActionEnum = "DefineRankExpression"
)

func (e GETDefineRankExpressionActionEnum) ToPointer() *GETDefineRankExpressionActionEnum {
	return &e
}

func (e *GETDefineRankExpressionActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DefineRankExpression":
		*e = GETDefineRankExpressionActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDefineRankExpressionActionEnum: %v", v)
	}
}

// GETDefineRankExpressionRankExpression - A named expression that can be evaluated at search time and used for ranking or thresholding in a search query.
type GETDefineRankExpressionRankExpression struct {
	RankExpression string `queryParam:"name=RankExpression"`
	RankName       string `queryParam:"name=RankName"`
}

// GETDefineRankExpressionVersionEnum
type GETDefineRankExpressionVersionEnum string

const (
	GETDefineRankExpressionVersionEnumTwoThousandAndEleven0201 GETDefineRankExpressionVersionEnum = "2011-02-01"
)

func (e GETDefineRankExpressionVersionEnum) ToPointer() *GETDefineRankExpressionVersionEnum {
	return &e
}

func (e *GETDefineRankExpressionVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2011-02-01":
		*e = GETDefineRankExpressionVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDefineRankExpressionVersionEnum: %v", v)
	}
}

type GETDefineRankExpressionRequest struct {
	Action     GETDefineRankExpressionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	DomainName string                            `queryParam:"style=form,explode=true,name=DomainName"`
	// A named expression that can be evaluated at search time and used for ranking or thresholding in a search query.
	RankExpression    GETDefineRankExpressionRankExpression `queryParam:"style=form,explode=true,name=RankExpression"`
	Version           GETDefineRankExpressionVersionEnum    `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDefineRankExpressionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
