"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getpodcastrecommendationsresponse as shared_getpodcastrecommendationsresponse
from ..shared import safemodeparam_enum as shared_safemodeparam_enum
from typing import Optional


@dataclasses.dataclass
class GetPodcastRecommendationsRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Podcast id."""  
    x_listen_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'X-ListenAPI-Key', 'style': 'simple', 'explode': False }})
    r"""Get API Key on listennotes.com/api"""  
    safe_mode: Optional[shared_safemodeparam_enum.SafeModeParamEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'safe_mode', 'style': 'form', 'explode': True }})
    r"""Whether or not to exclude podcasts with explicit language. 1 is yes, and 0 is no."""  
    

@dataclasses.dataclass
class GetPodcastRecommendationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_podcast_recommendations_response: Optional[shared_getpodcastrecommendationsresponse.GetPodcastRecommendationsResponse] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    