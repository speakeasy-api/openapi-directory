"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMultipartUploadRequestBodyMetadata:
    
    sha1_checksum: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha1-checksum'), 'exclude': lambda f: f is None }})
    r"""The SHA1 checksum of the upload binary blob. Optionally
    be provided and serves as an additional security check when
    later processing the file in complete-external-upload endpoint.
    """  
    
class CreateMultipartUploadRequestBodyUploadTypeEnum(str, Enum):
    AVATAR = 'avatar'
    PROFILE_BACKGROUND = 'profile_background'
    CARD_BACKGROUND = 'card_background'
    CUSTOM_EMOJI = 'custom_emoji'
    COMPOSER = 'composer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMultipartUploadRequestBody:
    
    file_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_name') }})  
    file_size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_size') }})
    r"""File size should be represented in bytes."""  
    upload_type: CreateMultipartUploadRequestBodyUploadTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('upload_type') }})  
    metadata: Optional[CreateMultipartUploadRequestBodyMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateMultipartUpload200ApplicationJSON:
    r"""external upload initialized"""
    
    external_upload_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_upload_identifier') }})
    r"""The identifier of the multipart upload in the external
    storage provider. This is the multipart upload_id in AWS S3.
    """  
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""The path of the temporary file on the external storage
    service.
    """  
    unique_identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique_identifier') }})
    r"""A unique string that identifies the external upload.
    This must be stored and then sent in the /complete-multipart
    and /batch-presign-multipart-parts endpoints.
    """  
    

@dataclasses.dataclass
class CreateMultipartUploadResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_multipart_upload_200_application_json_object: Optional[CreateMultipartUpload200ApplicationJSON] = dataclasses.field(default=None)
    r"""external upload initialized"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    