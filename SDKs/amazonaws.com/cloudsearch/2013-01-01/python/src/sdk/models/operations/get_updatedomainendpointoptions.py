"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tlssecuritypolicy_enum as shared_tlssecuritypolicy_enum
from enum import Enum
from typing import Optional

class GETUpdateDomainEndpointOptionsActionEnum(str, Enum):
    UPDATE_DOMAIN_ENDPOINT_OPTIONS = 'UpdateDomainEndpointOptions'


@dataclasses.dataclass
class GETUpdateDomainEndpointOptionsDomainEndpointOptions:
    r"""The domain's endpoint options."""
    
    enforce_https: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnforceHTTPS' }})  
    tls_security_policy: Optional[shared_tlssecuritypolicy_enum.TLSSecurityPolicyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TLSSecurityPolicy' }})  
    
class GETUpdateDomainEndpointOptionsVersionEnum(str, Enum):
    TWO_THOUSAND_AND_THIRTEEN_01_01 = '2013-01-01'


@dataclasses.dataclass
class GETUpdateDomainEndpointOptionsRequest:
    
    action: GETUpdateDomainEndpointOptionsActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    domain_endpoint_options: GETUpdateDomainEndpointOptionsDomainEndpointOptions = dataclasses.field(metadata={'query_param': { 'field_name': 'DomainEndpointOptions', 'style': 'form', 'explode': True }})
    r"""Whether to require that all requests to the domain arrive over HTTPS. We recommend Policy-Min-TLS-1-2-2019-07 for TLSSecurityPolicy. For compatibility with older clients, the default is Policy-Min-TLS-1-0-2019-07."""  
    domain_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DomainName', 'style': 'form', 'explode': True }})
    r"""A string that represents the name of a domain."""  
    version: GETUpdateDomainEndpointOptionsVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETUpdateDomainEndpointOptionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    