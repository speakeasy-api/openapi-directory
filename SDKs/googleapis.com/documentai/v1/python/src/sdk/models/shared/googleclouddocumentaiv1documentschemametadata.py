"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDocumentaiV1DocumentSchemaMetadata:
    r"""Metadata for global schema behavior."""
    
    document_allow_multiple_labels: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentAllowMultipleLabels'), 'exclude': lambda f: f is None }})
    r"""If true, on a given page, there can be multiple `document` annotations covering it."""  
    document_splitter: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('documentSplitter'), 'exclude': lambda f: f is None }})
    r"""If true, a `document` entity type can be applied to subdocument ( splitting). Otherwise, it can only be applied to the entire document (classification)."""  
    prefixed_naming_on_properties: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prefixedNamingOnProperties'), 'exclude': lambda f: f is None }})
    r"""If set, all the nested entities must be prefixed with the parents."""  
    skip_naming_validation: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipNamingValidation'), 'exclude': lambda f: f is None }})
    r"""If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked."""  
    