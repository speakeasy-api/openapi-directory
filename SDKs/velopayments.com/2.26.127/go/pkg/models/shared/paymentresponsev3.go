// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// PaymentResponseV3FundingStatusEnum - The funding status of the payment
type PaymentResponseV3FundingStatusEnum string

const (
	PaymentResponseV3FundingStatusEnumFunded     PaymentResponseV3FundingStatusEnum = "FUNDED"
	PaymentResponseV3FundingStatusEnumInstructed PaymentResponseV3FundingStatusEnum = "INSTRUCTED"
	PaymentResponseV3FundingStatusEnumUnfunded   PaymentResponseV3FundingStatusEnum = "UNFUNDED"
)

func (e *PaymentResponseV3FundingStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FUNDED":
		fallthrough
	case "INSTRUCTED":
		fallthrough
	case "UNFUNDED":
		*e = PaymentResponseV3FundingStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponseV3FundingStatusEnum: %s", s)
	}
}

type PaymentResponseV3StatusEnum string

const (
	PaymentResponseV3StatusEnumAccepted             PaymentResponseV3StatusEnum = "ACCEPTED"
	PaymentResponseV3StatusEnumAwaitingFunds        PaymentResponseV3StatusEnum = "AWAITING_FUNDS"
	PaymentResponseV3StatusEnumFunded               PaymentResponseV3StatusEnum = "FUNDED"
	PaymentResponseV3StatusEnumUnfunded             PaymentResponseV3StatusEnum = "UNFUNDED"
	PaymentResponseV3StatusEnumBankPaymentRequested PaymentResponseV3StatusEnum = "BANK_PAYMENT_REQUESTED"
	PaymentResponseV3StatusEnumRejected             PaymentResponseV3StatusEnum = "REJECTED"
	PaymentResponseV3StatusEnumAcceptedByRails      PaymentResponseV3StatusEnum = "ACCEPTED_BY_RAILS"
	PaymentResponseV3StatusEnumConfirmed            PaymentResponseV3StatusEnum = "CONFIRMED"
	PaymentResponseV3StatusEnumFailed               PaymentResponseV3StatusEnum = "FAILED"
	PaymentResponseV3StatusEnumWithdrawn            PaymentResponseV3StatusEnum = "WITHDRAWN"
)

func (e *PaymentResponseV3StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCEPTED":
		fallthrough
	case "AWAITING_FUNDS":
		fallthrough
	case "FUNDED":
		fallthrough
	case "UNFUNDED":
		fallthrough
	case "BANK_PAYMENT_REQUESTED":
		fallthrough
	case "REJECTED":
		fallthrough
	case "ACCEPTED_BY_RAILS":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "FAILED":
		fallthrough
	case "WITHDRAWN":
		*e = PaymentResponseV3StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentResponseV3StatusEnum: %s", s)
	}
}

// PaymentResponseV3 - 200 response, request completed okay
type PaymentResponseV3 struct {
	AccountName *string `json:"accountName,omitempty"`
	// The account number for the account which will receive the payment.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// The country code of the payment channel.
	CountryCode *string                  `json:"countryCode,omitempty"`
	Events      []PaymentEventResponseV3 `json:"events"`
	// ACH file payment was submitted in, if applicable
	FilenameReference *string `json:"filenameReference,omitempty"`
	// The funding status of the payment
	FundingStatus PaymentResponseV3FundingStatusEnum `json:"fundingStatus"`
	// The iban for the payment.
	Iban *string `json:"iban,omitempty"`
	// Individual Identification Number assigned to the payment in the ACH file, if applicable
	IndividualIdentificationNumber *string `json:"individualIdentificationNumber,omitempty"`
	// The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
	InvertedRate *float32 `json:"invertedRate,omitempty"`
	// The id of the paymeee
	PayeeID string `json:"payeeId"`
	// The amount which the payee will receive
	PaymentAmount      int64   `json:"paymentAmount"`
	PaymentChannelID   *string `json:"paymentChannelId,omitempty"`
	PaymentChannelName *string `json:"paymentChannelName,omitempty"`
	// ISO 3 character currency code
	PaymentCurrency *PaymentAuditCurrencyV3Enum `json:"paymentCurrency,omitempty"`
	// The id of the payment
	PaymentID string `json:"paymentId"`
	// The payment memo set by the payor
	PaymentMemo *string `json:"paymentMemo,omitempty"`
	// The id of the payor
	PayorID string `json:"payorId"`
	// The name of the payor
	PayorName      *string `json:"payorName,omitempty"`
	PayorPaymentID *string `json:"payorPaymentId,omitempty"`
	// The quote Id used for the FX
	QuoteID      string  `json:"quoteId"`
	RailsBatchID *string `json:"railsBatchId,omitempty"`
	// The rails ID. Default value is RAILS ID UNAVAILABLE when not populated.
	RailsID        string  `json:"railsId"`
	RailsPaymentID *string `json:"railsPaymentId,omitempty"`
	// The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed
	Rate            *float32 `json:"rate,omitempty"`
	RejectionReason *string  `json:"rejectionReason,omitempty"`
	// The remote id by which the payor refers to the payee. Only populated once payment is confirmed
	RemoteID *string `json:"remoteId,omitempty"`
	// The return cost if a returned payment.
	ReturnCost   *int64  `json:"returnCost,omitempty"`
	ReturnReason *string `json:"returnReason,omitempty"`
	// The routing number for the payment.
	RoutingNumber *string `json:"routingNumber,omitempty"`
	// The id of the source account from which the payment was taken
	SourceAccountID string `json:"sourceAccountId"`
	// The name of the source account from which the payment was taken
	SourceAccountName *string `json:"sourceAccountName,omitempty"`
	// The source amount for the payment (amount debited to make the payment)
	SourceAmount *int64 `json:"sourceAmount,omitempty"`
	// ISO 3 character currency code
	SourceCurrency    *PaymentAuditCurrencyV3Enum `json:"sourceCurrency,omitempty"`
	Status            PaymentResponseV3StatusEnum `json:"status"`
	SubmittedDateTime time.Time                   `json:"submittedDateTime"`
	// Trace Number assigned to the payment in the ACH file, if applicable
	TraceNumber *string `json:"traceNumber,omitempty"`
}
