"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelInput:
    r"""A single channel. Channels are custom groups of related websites and apps."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""The ID of the advertiser that owns the channel."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the channel. Must be UTF-8 encoded with a maximum length of 240 bytes."""  
    partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerId'), 'exclude': lambda f: f is None }})
    r"""The ID of the partner that owns the channel."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Channel:
    r"""A single channel. Channels are custom groups of related websites and apps."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""The ID of the advertiser that owns the channel."""  
    channel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the channel. Assigned by the system."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the channel. Must be UTF-8 encoded with a maximum length of 240 bytes."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the channel."""  
    negatively_targeted_line_item_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('negativelyTargetedLineItemCount'), 'exclude': lambda f: f is None }})
    r"""Output only. Number of line items that are directly targeting this channel negatively."""  
    partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerId'), 'exclude': lambda f: f is None }})
    r"""The ID of the partner that owns the channel."""  
    positively_targeted_line_item_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('positivelyTargetedLineItemCount'), 'exclude': lambda f: f is None }})
    r"""Output only. Number of line items that are directly targeting this channel positively."""  
    