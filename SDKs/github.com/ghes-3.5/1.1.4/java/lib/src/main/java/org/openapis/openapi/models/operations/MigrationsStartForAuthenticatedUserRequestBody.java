/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class MigrationsStartForAuthenticatedUserRequestBody {
    /**
     * Exclude attributes from the API response to improve performance
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude")
    public MigrationsStartForAuthenticatedUserRequestBodyExcludeEnum[] exclude;

    public MigrationsStartForAuthenticatedUserRequestBody withExclude(MigrationsStartForAuthenticatedUserRequestBodyExcludeEnum[] exclude) {
        this.exclude = exclude;
        return this;
    }
    
    /**
     * Do not include attachments in the migration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_attachments")
    public Boolean excludeAttachments;

    public MigrationsStartForAuthenticatedUserRequestBody withExcludeAttachments(Boolean excludeAttachments) {
        this.excludeAttachments = excludeAttachments;
        return this;
    }
    
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_git_data")
    public Boolean excludeGitData;

    public MigrationsStartForAuthenticatedUserRequestBody withExcludeGitData(Boolean excludeGitData) {
        this.excludeGitData = excludeGitData;
        return this;
    }
    
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_metadata")
    public Boolean excludeMetadata;

    public MigrationsStartForAuthenticatedUserRequestBody withExcludeMetadata(Boolean excludeMetadata) {
        this.excludeMetadata = excludeMetadata;
        return this;
    }
    
    /**
     * Indicates whether projects owned by the organization or users should be excluded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_owner_projects")
    public Boolean excludeOwnerProjects;

    public MigrationsStartForAuthenticatedUserRequestBody withExcludeOwnerProjects(Boolean excludeOwnerProjects) {
        this.excludeOwnerProjects = excludeOwnerProjects;
        return this;
    }
    
    /**
     * Do not include releases in the migration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_releases")
    public Boolean excludeReleases;

    public MigrationsStartForAuthenticatedUserRequestBody withExcludeReleases(Boolean excludeReleases) {
        this.excludeReleases = excludeReleases;
        return this;
    }
    
    /**
     * Lock the repositories being migrated at the start of the migration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lock_repositories")
    public Boolean lockRepositories;

    public MigrationsStartForAuthenticatedUserRequestBody withLockRepositories(Boolean lockRepositories) {
        this.lockRepositories = lockRepositories;
        return this;
    }
    
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org_metadata_only")
    public Boolean orgMetadataOnly;

    public MigrationsStartForAuthenticatedUserRequestBody withOrgMetadataOnly(Boolean orgMetadataOnly) {
        this.orgMetadataOnly = orgMetadataOnly;
        return this;
    }
    
    @JsonProperty("repositories")
    public String[] repositories;

    public MigrationsStartForAuthenticatedUserRequestBody withRepositories(String[] repositories) {
        this.repositories = repositories;
        return this;
    }
    
    public MigrationsStartForAuthenticatedUserRequestBody(@JsonProperty("repositories") String[] repositories) {
        this.repositories = repositories;
  }
}
