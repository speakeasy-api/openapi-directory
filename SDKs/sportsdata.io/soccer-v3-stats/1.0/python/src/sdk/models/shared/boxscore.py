"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import booking as shared_booking
from ..shared import coach as shared_coach
from ..shared import game as shared_game
from ..shared import goal as shared_goal
from ..shared import lineup as shared_lineup
from ..shared import penaltyshootout as shared_penaltyshootout
from ..shared import playergame as shared_playergame
from ..shared import referee as shared_referee
from ..shared import teamgame as shared_teamgame
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BoxScore:
    
    additional_assistant_referee1: Optional[shared_referee.Referee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalAssistantReferee1'), 'exclude': lambda f: f is None }})  
    additional_assistant_referee2: Optional[shared_referee.Referee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalAssistantReferee2'), 'exclude': lambda f: f is None }})  
    assistant_referee1: Optional[shared_referee.Referee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssistantReferee1'), 'exclude': lambda f: f is None }})  
    assistant_referee2: Optional[shared_referee.Referee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssistantReferee2'), 'exclude': lambda f: f is None }})  
    away_team_coach: Optional[shared_coach.Coach] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamCoach'), 'exclude': lambda f: f is None }})  
    bookings: Optional[list[shared_booking.Booking]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Bookings'), 'exclude': lambda f: f is None }})  
    fourth_referee: Optional[shared_referee.Referee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FourthReferee'), 'exclude': lambda f: f is None }})  
    game: Optional[shared_game.Game] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Game'), 'exclude': lambda f: f is None }})  
    goals: Optional[list[shared_goal.Goal]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Goals'), 'exclude': lambda f: f is None }})  
    home_team_coach: Optional[shared_coach.Coach] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamCoach'), 'exclude': lambda f: f is None }})  
    lineups: Optional[list[shared_lineup.Lineup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Lineups'), 'exclude': lambda f: f is None }})  
    main_referee: Optional[shared_referee.Referee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MainReferee'), 'exclude': lambda f: f is None }})  
    penalty_shootouts: Optional[list[shared_penaltyshootout.PenaltyShootout]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PenaltyShootouts'), 'exclude': lambda f: f is None }})  
    player_games: Optional[list[shared_playergame.PlayerGame]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerGames'), 'exclude': lambda f: f is None }})  
    team_games: Optional[list[shared_teamgame.TeamGame]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamGames'), 'exclude': lambda f: f is None }})  
    video_assistant_referee: Optional[shared_referee.Referee] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VideoAssistantReferee'), 'exclude': lambda f: f is None }})  
    