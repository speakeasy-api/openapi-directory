"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudcontactcenterinsightsv1annotationboundary as shared_googlecloudcontactcenterinsightsv1annotationboundary
from ..shared import googlecloudcontactcenterinsightsv1entitymentiondata as shared_googlecloudcontactcenterinsightsv1entitymentiondata
from ..shared import googlecloudcontactcenterinsightsv1intentmatchdata as shared_googlecloudcontactcenterinsightsv1intentmatchdata
from ..shared import googlecloudcontactcenterinsightsv1issuematchdata as shared_googlecloudcontactcenterinsightsv1issuematchdata
from ..shared import googlecloudcontactcenterinsightsv1phrasematchdata as shared_googlecloudcontactcenterinsightsv1phrasematchdata
from ..shared import googlecloudcontactcenterinsightsv1sentimentdata as shared_googlecloudcontactcenterinsightsv1sentimentdata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudContactcenterinsightsV1CallAnnotation:
    r"""A piece of metadata that applies to a window of a call."""
    
    annotation_end_boundary: Optional[shared_googlecloudcontactcenterinsightsv1annotationboundary.GoogleCloudContactcenterinsightsV1AnnotationBoundary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationEndBoundary'), 'exclude': lambda f: f is None }})
    r"""A point in a conversation that marks the start or the end of an annotation."""  
    annotation_start_boundary: Optional[shared_googlecloudcontactcenterinsightsv1annotationboundary.GoogleCloudContactcenterinsightsV1AnnotationBoundary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationStartBoundary'), 'exclude': lambda f: f is None }})
    r"""A point in a conversation that marks the start or the end of an annotation."""  
    channel_tag: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelTag'), 'exclude': lambda f: f is None }})
    r"""The channel of the audio where the annotation occurs. For single-channel audio, this field is not populated."""  
    entity_mention_data: Optional[shared_googlecloudcontactcenterinsightsv1entitymentiondata.GoogleCloudContactcenterinsightsV1EntityMentionData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityMentionData'), 'exclude': lambda f: f is None }})
    r"""The data for an entity mention annotation. This represents a mention of an `Entity` in the conversation."""  
    hold_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holdData'), 'exclude': lambda f: f is None }})
    r"""The data for a hold annotation."""  
    intent_match_data: Optional[shared_googlecloudcontactcenterinsightsv1intentmatchdata.GoogleCloudContactcenterinsightsV1IntentMatchData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intentMatchData'), 'exclude': lambda f: f is None }})
    r"""The data for an intent match. Represents an intent match for a text segment in the conversation. A text segment can be part of a sentence, a complete sentence, or an utterance with multiple sentences."""  
    interruption_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interruptionData'), 'exclude': lambda f: f is None }})
    r"""The data for an interruption annotation."""  
    issue_match_data: Optional[shared_googlecloudcontactcenterinsightsv1issuematchdata.GoogleCloudContactcenterinsightsV1IssueMatchData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueMatchData'), 'exclude': lambda f: f is None }})
    r"""The data for an issue match annotation."""  
    phrase_match_data: Optional[shared_googlecloudcontactcenterinsightsv1phrasematchdata.GoogleCloudContactcenterinsightsV1PhraseMatchData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phraseMatchData'), 'exclude': lambda f: f is None }})
    r"""The data for a matched phrase matcher. Represents information identifying a phrase matcher for a given match."""  
    sentiment_data: Optional[shared_googlecloudcontactcenterinsightsv1sentimentdata.GoogleCloudContactcenterinsightsV1SentimentData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentimentData'), 'exclude': lambda f: f is None }})
    r"""The data for a sentiment annotation."""  
    silence_data: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('silenceData'), 'exclude': lambda f: f is None }})
    r"""The data for a silence annotation."""  
    