/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetConversationMessagesRequest extends SpeakeasyBase {
  /**
   * The ID of the conversation to return messages from.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=conversation_id",
  })
  conversationId: string;

  /**
   * Client device pixel ratio used to determine thumbnail size (default 1.0).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=device_pixel_ratio",
  })
  devicePixelRatio?: number;

  /**
   * If set to 1, the conversation will be returned along with the messages.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_conversation",
  })
  includeConversation?: number;

  /**
   * The page of messages to return.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of messages to return per page (must be >= 1 and <= 30).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;
}

/**
 * The messages and page data.  The conversation data is optional and is only returned if the include_conversation parameter is set.
 *
 * @remarks
 *
 */
export class GetConversationMessages200ApplicationJSON extends SpeakeasyBase {
  /**
   * A conversation between the current user and another user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "conversation" })
  @Type(() => shared.Conversation)
  conversation?: shared.Conversation;

  @SpeakeasyMetadata({ elemType: shared.Message })
  @Expose({ name: "messages" })
  @Type(() => shared.Message)
  messages?: shared.Message[];

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage?: number;
}

export class GetConversationMessagesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The messages and page data.  The conversation data is optional and is only returned if the include_conversation parameter is set.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  getConversationMessages200ApplicationJSONObject?: GetConversationMessages200ApplicationJSON;
}
