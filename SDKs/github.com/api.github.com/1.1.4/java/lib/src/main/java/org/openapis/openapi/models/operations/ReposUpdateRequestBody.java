/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ReposUpdateRequestBody {
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_auto_merge")
    public Boolean allowAutoMerge;
    public ReposUpdateRequestBody withAllowAutoMerge(Boolean allowAutoMerge) {
        this.allowAutoMerge = allowAutoMerge;
        return this;
    }
    
    /**
     * Either `true` to allow private forks, or `false` to prevent private forks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_forking")
    public Boolean allowForking;
    public ReposUpdateRequestBody withAllowForking(Boolean allowForking) {
        this.allowForking = allowForking;
        return this;
    }
    
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_merge_commit")
    public Boolean allowMergeCommit;
    public ReposUpdateRequestBody withAllowMergeCommit(Boolean allowMergeCommit) {
        this.allowMergeCommit = allowMergeCommit;
        return this;
    }
    
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_rebase_merge")
    public Boolean allowRebaseMerge;
    public ReposUpdateRequestBody withAllowRebaseMerge(Boolean allowRebaseMerge) {
        this.allowRebaseMerge = allowRebaseMerge;
        return this;
    }
    
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_squash_merge")
    public Boolean allowSquashMerge;
    public ReposUpdateRequestBody withAllowSquashMerge(Boolean allowSquashMerge) {
        this.allowSquashMerge = allowSquashMerge;
        return this;
    }
    
    /**
     * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_update_branch")
    public Boolean allowUpdateBranch;
    public ReposUpdateRequestBody withAllowUpdateBranch(Boolean allowUpdateBranch) {
        this.allowUpdateBranch = allowUpdateBranch;
        return this;
    }
    
    /**
     * Whether to archive this repository. `false` will unarchive a previously archived repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    public Boolean archived;
    public ReposUpdateRequestBody withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    /**
     * Updates the default branch for this repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_branch")
    public String defaultBranch;
    public ReposUpdateRequestBody withDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
        return this;
    }
    
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete_branch_on_merge")
    public Boolean deleteBranchOnMerge;
    public ReposUpdateRequestBody withDeleteBranchOnMerge(Boolean deleteBranchOnMerge) {
        this.deleteBranchOnMerge = deleteBranchOnMerge;
        return this;
    }
    
    /**
     * A short description of the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public ReposUpdateRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_issues")
    public Boolean hasIssues;
    public ReposUpdateRequestBody withHasIssues(Boolean hasIssues) {
        this.hasIssues = hasIssues;
        return this;
    }
    
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_projects")
    public Boolean hasProjects;
    public ReposUpdateRequestBody withHasProjects(Boolean hasProjects) {
        this.hasProjects = hasProjects;
        return this;
    }
    
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_wiki")
    public Boolean hasWiki;
    public ReposUpdateRequestBody withHasWiki(Boolean hasWiki) {
        this.hasWiki = hasWiki;
        return this;
    }
    
    /**
     * A URL with more information about the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("homepage")
    public String homepage;
    public ReposUpdateRequestBody withHomepage(String homepage) {
        this.homepage = homepage;
        return this;
    }
    
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_template")
    public Boolean isTemplate;
    public ReposUpdateRequestBody withIsTemplate(Boolean isTemplate) {
        this.isTemplate = isTemplate;
        return this;
    }
    
    /**
     * The default value for a merge commit message.
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merge_commit_message")
    public ReposUpdateRequestBodyMergeCommitMessageEnum mergeCommitMessage;
    public ReposUpdateRequestBody withMergeCommitMessage(ReposUpdateRequestBodyMergeCommitMessageEnum mergeCommitMessage) {
        this.mergeCommitMessage = mergeCommitMessage;
        return this;
    }
    
    /**
     * The default value for a merge commit title.
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merge_commit_title")
    public ReposUpdateRequestBodyMergeCommitTitleEnum mergeCommitTitle;
    public ReposUpdateRequestBody withMergeCommitTitle(ReposUpdateRequestBodyMergeCommitTitleEnum mergeCommitTitle) {
        this.mergeCommitTitle = mergeCommitTitle;
        return this;
    }
    
    /**
     * The name of the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ReposUpdateRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.  
     * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private")
    public Boolean private_;
    public ReposUpdateRequestBody withPrivate(Boolean private_) {
        this.private_ = private_;
        return this;
    }
    
    /**
     * Specify which security and analysis features to enable or disable for the repository.
     * 
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     * 
     * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
     * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
     * 
     * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security_and_analysis")
    public ReposUpdateRequestBodySecurityAndAnalysis securityAndAnalysis;
    public ReposUpdateRequestBody withSecurityAndAnalysis(ReposUpdateRequestBodySecurityAndAnalysis securityAndAnalysis) {
        this.securityAndAnalysis = securityAndAnalysis;
        return this;
    }
    
    /**
     * The default value for a squash merge commit message:
     * 
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("squash_merge_commit_message")
    public ReposUpdateRequestBodySquashMergeCommitMessageEnum squashMergeCommitMessage;
    public ReposUpdateRequestBody withSquashMergeCommitMessage(ReposUpdateRequestBodySquashMergeCommitMessageEnum squashMergeCommitMessage) {
        this.squashMergeCommitMessage = squashMergeCommitMessage;
        return this;
    }
    
    /**
     * The default value for a squash merge commit title:
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("squash_merge_commit_title")
    public ReposUpdateRequestBodySquashMergeCommitTitleEnum squashMergeCommitTitle;
    public ReposUpdateRequestBody withSquashMergeCommitTitle(ReposUpdateRequestBodySquashMergeCommitTitleEnum squashMergeCommitTitle) {
        this.squashMergeCommitTitle = squashMergeCommitTitle;
        return this;
    }
    
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_squash_pr_title_as_default")
    public Boolean useSquashPrTitleAsDefault;
    public ReposUpdateRequestBody withUseSquashPrTitleAsDefault(Boolean useSquashPrTitleAsDefault) {
        this.useSquashPrTitleAsDefault = useSquashPrTitleAsDefault;
        return this;
    }
    
    /**
     * The visibility of the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public ReposUpdateRequestBodyVisibilityEnum visibility;
    public ReposUpdateRequestBody withVisibility(ReposUpdateRequestBodyVisibilityEnum visibility) {
        this.visibility = visibility;
        return this;
    }
    
    /**
     * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("web_commit_signoff_required")
    public Boolean webCommitSignoffRequired;
    public ReposUpdateRequestBody withWebCommitSignoffRequired(Boolean webCommitSignoffRequired) {
        this.webCommitSignoffRequired = webCommitSignoffRequired;
        return this;
    }
    
}
