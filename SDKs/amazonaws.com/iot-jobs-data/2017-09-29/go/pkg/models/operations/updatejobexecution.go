// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateJobExecutionRequestBodyStatusEnum - The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
type UpdateJobExecutionRequestBodyStatusEnum string

const (
	UpdateJobExecutionRequestBodyStatusEnumQueued     UpdateJobExecutionRequestBodyStatusEnum = "QUEUED"
	UpdateJobExecutionRequestBodyStatusEnumInProgress UpdateJobExecutionRequestBodyStatusEnum = "IN_PROGRESS"
	UpdateJobExecutionRequestBodyStatusEnumSucceeded  UpdateJobExecutionRequestBodyStatusEnum = "SUCCEEDED"
	UpdateJobExecutionRequestBodyStatusEnumFailed     UpdateJobExecutionRequestBodyStatusEnum = "FAILED"
	UpdateJobExecutionRequestBodyStatusEnumTimedOut   UpdateJobExecutionRequestBodyStatusEnum = "TIMED_OUT"
	UpdateJobExecutionRequestBodyStatusEnumRejected   UpdateJobExecutionRequestBodyStatusEnum = "REJECTED"
	UpdateJobExecutionRequestBodyStatusEnumRemoved    UpdateJobExecutionRequestBodyStatusEnum = "REMOVED"
	UpdateJobExecutionRequestBodyStatusEnumCanceled   UpdateJobExecutionRequestBodyStatusEnum = "CANCELED"
)

func (e *UpdateJobExecutionRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "QUEUED":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "TIMED_OUT":
		fallthrough
	case "REJECTED":
		fallthrough
	case "REMOVED":
		fallthrough
	case "CANCELED":
		*e = UpdateJobExecutionRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateJobExecutionRequestBodyStatusEnum: %s", s)
	}
}

type UpdateJobExecutionRequestBody struct {
	// Optional. A number that identifies a particular job execution on a particular device.
	ExecutionNumber *int64 `json:"executionNumber,omitempty"`
	// Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
	ExpectedVersion *int64 `json:"expectedVersion,omitempty"`
	// Optional. When set to true, the response contains the job document. The default is false.
	IncludeJobDocument *bool `json:"includeJobDocument,omitempty"`
	// Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.
	IncludeJobExecutionState *bool `json:"includeJobExecutionState,omitempty"`
	// The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.
	Status UpdateJobExecutionRequestBodyStatusEnum `json:"status"`
	//  Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.
	StatusDetails map[string]string `json:"statusDetails,omitempty"`
	// Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).
	StepTimeoutInMinutes *int64 `json:"stepTimeoutInMinutes,omitempty"`
}

type UpdateJobExecutionRequest struct {
	RequestBody       UpdateJobExecutionRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The unique identifier assigned to this job when it was created.
	JobID string `pathParam:"style=simple,explode=false,name=jobId"`
	// The name of the thing associated with the device.
	ThingName string `pathParam:"style=simple,explode=false,name=thingName"`
}

type UpdateJobExecutionResponse struct {
	// CertificateValidationException
	CertificateValidationException interface{}
	ContentType                    string
	// InvalidRequestException
	InvalidRequestException interface{}
	// InvalidStateTransitionException
	InvalidStateTransitionException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateJobExecutionResponse *shared.UpdateJobExecutionResponse
}
