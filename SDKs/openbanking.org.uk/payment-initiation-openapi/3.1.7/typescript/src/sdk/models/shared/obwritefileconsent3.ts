/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { OBSCASupportData1 } from "./obscasupportdata1";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Type of authorisation flow requested.
 */
export enum OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum {
  Any = "Any",
  Single = "Single",
}

/**
 * The authorisation type request from the TPP.
 */
export class OBWriteFileConsent3DataAuthorisation extends SpeakeasyBase {
  /**
   * Type of authorisation flow requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AuthorisationType" })
  authorisationType: OBWriteFileConsent3DataAuthorisationAuthorisationTypeEnum;

  /**
   * Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   *
   * @remarks
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CompletionDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  completionDateTime?: Date;
}

/**
 * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
 */
export class OBWriteFileConsent3DataInitiationDebtorAccount extends SpeakeasyBase {
  /**
   * Identification assigned by an institution to identify an account. This identification is known by the account owner.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Identification" })
  identification: string;

  /**
   * The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
   *
   * @remarks
   * Note, the account name is not the product name or the nickname of the account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name?: string;

  /**
   * Name of the identification scheme, in a coded form as published in an external list.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SchemeName" })
  schemeName: string;

  /**
   * This is secondary identification of the account, as assigned by the account servicing institution.
   *
   * @remarks
   * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SecondaryIdentification" })
  secondaryIdentification?: string;
}

/**
 * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
 */
export class OBWriteFileConsent3DataInitiationRemittanceInformation extends SpeakeasyBase {
  /**
   * Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
   *
   * @remarks
   * Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
   * If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
   * OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Reference" })
  reference?: string;

  /**
   * Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Unstructured" })
  unstructured?: string;
}

/**
 * The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
 */
export class OBWriteFileConsent3DataInitiation extends SpeakeasyBase {
  /**
   * Total of all individual amounts included in the group, irrespective of currencies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ControlSum" })
  controlSum?: number;

  /**
   * Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DebtorAccount" })
  @Type(() => OBWriteFileConsent3DataInitiationDebtorAccount)
  debtorAccount?: OBWriteFileConsent3DataInitiationDebtorAccount;

  /**
   * A base64 encoding of a SHA256 hash of the file to be uploaded.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FileHash" })
  fileHash: string;

  /**
   * Reference for the file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FileReference" })
  fileReference?: string;

  /**
   * Specifies the payment file type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FileType" })
  fileType: string;

  /**
   * User community specific instrument.
   *
   * @remarks
   * Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LocalInstrument" })
  localInstrument?: string;

  /**
   * Number of individual transactions contained in the payment information group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfTransactions" })
  numberOfTransactions?: string;

  /**
   * Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RemittanceInformation" })
  @Type(() => OBWriteFileConsent3DataInitiationRemittanceInformation)
  remittanceInformation?: OBWriteFileConsent3DataInitiationRemittanceInformation;

  /**
   * Date at which the initiating party requests the clearing agent to process the payment.
   *
   * @remarks
   * Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format.
   * All date-time fields in responses must include the timezone. An example is below:
   * 2017-04-05T10:43:07+00:00
   */
  @SpeakeasyMetadata()
  @Expose({ name: "RequestedExecutionDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedExecutionDateTime?: Date;

  /**
   * Additional information that can not be captured in the structured fields and/or any other specific block.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SupplementaryData" })
  supplementaryData?: Record<string, any>;
}

export class OBWriteFileConsent3Data extends SpeakeasyBase {
  /**
   * The authorisation type request from the TPP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Authorisation" })
  @Type(() => OBWriteFileConsent3DataAuthorisation)
  authorisation?: OBWriteFileConsent3DataAuthorisation;

  /**
   * The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Initiation" })
  @Type(() => OBWriteFileConsent3DataInitiation)
  initiation: OBWriteFileConsent3DataInitiation;

  /**
   * Supporting Data provided by TPP, when requesting SCA Exemption.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SCASupportData" })
  @Type(() => OBSCASupportData1)
  scaSupportData?: OBSCASupportData1;
}

export class OBWriteFileConsent3 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Data" })
  @Type(() => OBWriteFileConsent3Data)
  data: OBWriteFileConsent3Data;
}
