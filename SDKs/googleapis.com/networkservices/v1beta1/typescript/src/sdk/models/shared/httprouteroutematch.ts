/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { HttpRouteHeaderMatch } from "./httprouteheadermatch";
import { HttpRouteQueryParameterMatch } from "./httproutequeryparametermatch";
import { Expose, Type } from "class-transformer";

/**
 * RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.
 */
export class HttpRouteRouteMatch extends SpeakeasyBase {
  /**
   * The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fullPathMatch" })
  fullPathMatch?: string;

  /**
   * Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.
   */
  @SpeakeasyMetadata({ elemType: HttpRouteHeaderMatch })
  @Expose({ name: "headers" })
  @Type(() => HttpRouteHeaderMatch)
  headers?: HttpRouteHeaderMatch[];

  /**
   * Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreCase" })
  ignoreCase?: boolean;

  /**
   * The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prefixMatch" })
  prefixMatch?: string;

  /**
   * Specifies a list of query parameters to match against. ALL of the query parameters must be matched.
   */
  @SpeakeasyMetadata({ elemType: HttpRouteQueryParameterMatch })
  @Expose({ name: "queryParameters" })
  @Type(() => HttpRouteQueryParameterMatch)
  queryParameters?: HttpRouteQueryParameterMatch[];

  /**
   * The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "regexMatch" })
  regexMatch?: string;
}
