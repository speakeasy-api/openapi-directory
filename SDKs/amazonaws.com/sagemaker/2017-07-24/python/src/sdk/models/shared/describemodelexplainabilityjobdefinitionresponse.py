"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import modelexplainabilityappspecification as shared_modelexplainabilityappspecification
from ..shared import modelexplainabilitybaselineconfig as shared_modelexplainabilitybaselineconfig
from ..shared import modelexplainabilityjobinput as shared_modelexplainabilityjobinput
from ..shared import monitoringnetworkconfig as shared_monitoringnetworkconfig
from ..shared import monitoringoutputconfig as shared_monitoringoutputconfig
from ..shared import monitoringresources as shared_monitoringresources
from ..shared import monitoringstoppingcondition as shared_monitoringstoppingcondition
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribeModelExplainabilityJobDefinitionResponse:
    r"""Success"""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    job_definition_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobDefinitionArn') }})  
    job_definition_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobDefinitionName') }})  
    job_resources: shared_monitoringresources.MonitoringResources = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobResources') }})
    r"""Identifies the resources to deploy for a monitoring job."""  
    model_explainability_app_specification: shared_modelexplainabilityappspecification.ModelExplainabilityAppSpecification = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelExplainabilityAppSpecification') }})  
    model_explainability_job_input: shared_modelexplainabilityjobinput.ModelExplainabilityJobInput = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelExplainabilityJobInput') }})  
    model_explainability_job_output_config: shared_monitoringoutputconfig.MonitoringOutputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelExplainabilityJobOutputConfig') }})
    r"""The output configuration for monitoring jobs."""  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    model_explainability_baseline_config: Optional[shared_modelexplainabilitybaselineconfig.ModelExplainabilityBaselineConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelExplainabilityBaselineConfig'), 'exclude': lambda f: f is None }})  
    network_config: Optional[shared_monitoringnetworkconfig.MonitoringNetworkConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConfig'), 'exclude': lambda f: f is None }})  
    stopping_condition: Optional[shared_monitoringstoppingcondition.MonitoringStoppingCondition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StoppingCondition'), 'exclude': lambda f: f is None }})
    r"""A time limit for how long the monitoring job is allowed to run before stopping."""  
    