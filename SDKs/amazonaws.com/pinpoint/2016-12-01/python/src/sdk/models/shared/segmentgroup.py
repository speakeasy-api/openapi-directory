"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import segmentdimensions as shared_segmentdimensions
from ..shared import segmentreference as shared_segmentreference
from ..shared import sourcetype_enum as shared_sourcetype_enum
from ..shared import type_enum as shared_type_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SegmentGroup:
    r"""Specifies the base segments and dimensions for a segment, and the relationships between these base segments and dimensions."""
    
    dimensions: Optional[list[shared_segmentdimensions.SegmentDimensions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Dimensions'), 'exclude': lambda f: f is None }})  
    source_segments: Optional[list[shared_segmentreference.SegmentReference]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceSegments'), 'exclude': lambda f: f is None }})  
    source_type: Optional[shared_sourcetype_enum.SourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceType'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_type_enum.TypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    