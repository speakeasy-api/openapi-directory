// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProcessingErrorCodeEnum - Error code indicating the nature of the error.
type ProcessingErrorCodeEnum string

const (
	ProcessingErrorCodeEnumProcessingErrorCodeUnspecified ProcessingErrorCodeEnum = "PROCESSING_ERROR_CODE_UNSPECIFIED"
	ProcessingErrorCodeEnumMalformedRequest               ProcessingErrorCodeEnum = "MALFORMED_REQUEST"
	ProcessingErrorCodeEnumUnsupportedContentFormat       ProcessingErrorCodeEnum = "UNSUPPORTED_CONTENT_FORMAT"
	ProcessingErrorCodeEnumIndirectBrokenACL              ProcessingErrorCodeEnum = "INDIRECT_BROKEN_ACL"
	ProcessingErrorCodeEnumACLCycle                       ProcessingErrorCodeEnum = "ACL_CYCLE"
)

func (e *ProcessingErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROCESSING_ERROR_CODE_UNSPECIFIED":
		fallthrough
	case "MALFORMED_REQUEST":
		fallthrough
	case "UNSUPPORTED_CONTENT_FORMAT":
		fallthrough
	case "INDIRECT_BROKEN_ACL":
		fallthrough
	case "ACL_CYCLE":
		*e = ProcessingErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ProcessingErrorCodeEnum: %s", s)
	}
}

type ProcessingError struct {
	// Error code indicating the nature of the error.
	Code *ProcessingErrorCodeEnum `json:"code,omitempty"`
	// The description of the error.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// In case the item fields are invalid, this field contains the details about the validation errors.
	FieldViolations []FieldViolation `json:"fieldViolations,omitempty"`
}
