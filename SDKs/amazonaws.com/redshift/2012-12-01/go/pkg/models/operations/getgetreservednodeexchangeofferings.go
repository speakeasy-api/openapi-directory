// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETGETReservedNodeExchangeOfferingsActionEnum
type GETGETReservedNodeExchangeOfferingsActionEnum string

const (
	GETGETReservedNodeExchangeOfferingsActionEnumGetReservedNodeExchangeOfferings GETGETReservedNodeExchangeOfferingsActionEnum = "GetReservedNodeExchangeOfferings"
)

func (e *GETGETReservedNodeExchangeOfferingsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GetReservedNodeExchangeOfferings":
		*e = GETGETReservedNodeExchangeOfferingsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETReservedNodeExchangeOfferingsActionEnum: %s", s)
	}
}

// GETGETReservedNodeExchangeOfferingsVersionEnum
type GETGETReservedNodeExchangeOfferingsVersionEnum string

const (
	GETGETReservedNodeExchangeOfferingsVersionEnumTwoThousandAndTwelve1201 GETGETReservedNodeExchangeOfferingsVersionEnum = "2012-12-01"
)

func (e *GETGETReservedNodeExchangeOfferingsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETGETReservedNodeExchangeOfferingsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETGETReservedNodeExchangeOfferingsVersionEnum: %s", s)
	}
}

type GETGETReservedNodeExchangeOfferingsRequest struct {
	Action GETGETReservedNodeExchangeOfferingsActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// A value that indicates the starting point for the next set of ReservedNodeOfferings.
	Marker *string `queryParam:"style=form,explode=true,name=Marker"`
	// An integer setting the maximum number of ReservedNodeOfferings to retrieve.
	MaxRecords *int64 `queryParam:"style=form,explode=true,name=MaxRecords"`
	// A string representing the node identifier for the DC1 Reserved Node to be exchanged.
	ReservedNodeID    string                                         `queryParam:"style=form,explode=true,name=ReservedNodeId"`
	Version           GETGETReservedNodeExchangeOfferingsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETGETReservedNodeExchangeOfferingsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
