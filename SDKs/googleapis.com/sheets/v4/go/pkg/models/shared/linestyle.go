// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LineStyleTypeEnum - The dash type of the line.
type LineStyleTypeEnum string

const (
	LineStyleTypeEnumLineDashTypeUnspecified LineStyleTypeEnum = "LINE_DASH_TYPE_UNSPECIFIED"
	LineStyleTypeEnumInvisible               LineStyleTypeEnum = "INVISIBLE"
	LineStyleTypeEnumCustom                  LineStyleTypeEnum = "CUSTOM"
	LineStyleTypeEnumSolid                   LineStyleTypeEnum = "SOLID"
	LineStyleTypeEnumDotted                  LineStyleTypeEnum = "DOTTED"
	LineStyleTypeEnumMediumDashed            LineStyleTypeEnum = "MEDIUM_DASHED"
	LineStyleTypeEnumMediumDashedDotted      LineStyleTypeEnum = "MEDIUM_DASHED_DOTTED"
	LineStyleTypeEnumLongDashed              LineStyleTypeEnum = "LONG_DASHED"
	LineStyleTypeEnumLongDashedDotted        LineStyleTypeEnum = "LONG_DASHED_DOTTED"
)

func (e LineStyleTypeEnum) ToPointer() *LineStyleTypeEnum {
	return &e
}

func (e *LineStyleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LINE_DASH_TYPE_UNSPECIFIED":
		fallthrough
	case "INVISIBLE":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "SOLID":
		fallthrough
	case "DOTTED":
		fallthrough
	case "MEDIUM_DASHED":
		fallthrough
	case "MEDIUM_DASHED_DOTTED":
		fallthrough
	case "LONG_DASHED":
		fallthrough
	case "LONG_DASHED_DOTTED":
		*e = LineStyleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LineStyleTypeEnum: %v", v)
	}
}

// LineStyle - Properties that describe the style of a line.
type LineStyle struct {
	// The dash type of the line.
	Type *LineStyleTypeEnum `json:"type,omitempty"`
	// The thickness of the line, in px.
	Width *int `json:"width,omitempty"`
}
