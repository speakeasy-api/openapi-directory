// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PatchSpacesSpaceIDFoldersIDCollectiveDecisionPathParams struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum - for space type 'company' enums allowed are  'EGM','CGM','OGM','ConstituentAssembly','SolePartner','OtherEvent','Office','ExecutiveCommittee','Consulting','Board','PartnersMeeting' and for space type 'association' enums allowed are 'EGM','CGM','OGM','Other','Office','ExecutiveCommittee'
type PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum string

const (
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumEgm                 PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "EGM"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumCgm                 PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "CGM"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumOgm                 PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "OGM"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumConstituentAssembly PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "ConstituentAssembly"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumSolePartner         PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "SolePartner"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumOtherEvent          PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "OtherEvent"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumOther               PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "Other"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumOffice              PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "Office"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumExecutiveCommittee  PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "ExecutiveCommittee"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumConsulting          PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "Consulting"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumBoard               PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "Board"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnumPartnersMeeting     PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum = "PartnersMeeting"
)

func (e *PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EGM":
		fallthrough
	case "CGM":
		fallthrough
	case "OGM":
		fallthrough
	case "ConstituentAssembly":
		fallthrough
	case "SolePartner":
		fallthrough
	case "OtherEvent":
		fallthrough
	case "Other":
		fallthrough
	case "Office":
		fallthrough
	case "ExecutiveCommittee":
		fallthrough
	case "Consulting":
		fallthrough
	case "Board":
		fallthrough
	case "PartnersMeeting":
		*e = PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum: %s", s)
	}
}

type PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum string

const (
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnumConfidential PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum = "confidential"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnumRegular      PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum = "regular"
	PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnumPublic       PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum = "public"
)

func (e *PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum: %s", s)
	}
}

// PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBody - Collective decision to modify (except name, class and archivaldate)
type PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBody struct {
	About                     *string  `json:"About,omitempty"`
	Comment                   *string  `json:"Comment,omitempty"`
	Date                      *string  `json:"Date,omitempty"`
	DividendDistributions     *float64 `json:"DividendDistributions,omitempty"`
	DividendDistributionsDate *string  `json:"DividendDistributionsDate,omitempty"`
	// for space type 'company' enums allowed are  'EGM','CGM','OGM','ConstituentAssembly','SolePartner','OtherEvent','Office','ExecutiveCommittee','Consulting','Board','PartnersMeeting' and for space type 'association' enums allowed are 'EGM','CGM','OGM','Other','Office','ExecutiveCommittee'
	Event    *PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyEventEnum `json:"Event,omitempty"`
	Home     *bool                                                              `json:"Home,omitempty"`
	Keywords []string                                                           `json:"Keywords,omitempty"`
	Level    *PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBodyLevelEnum `json:"Level,omitempty"`
}

type PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequest struct {
	PathParams PatchSpacesSpaceIDFoldersIDCollectiveDecisionPathParams
	// Collective decision to modify (except name, class and archivaldate)
	Request PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequestBody `request:"mediaType=application/json"`
}

type PatchSpacesSpaceIDFoldersIDCollectiveDecisionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
