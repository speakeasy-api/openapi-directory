"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MarketplacesOrdersV3Batches:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def change_order_list_v2(self, request: operations.ChangeOrderListV2Request) -> operations.ChangeOrderListV2Response:
        r"""Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
        The purpose of this operation is to reduce the amount of request to the API. 
        Max 100 items per call.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeOrderListV2Request, base_url, '/orders/v3/batches/changeOrders/{changeOrderType}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "change_order_list_request_v2", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ChangeOrderListV2Request, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeOrderListV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchOrderOperationResponse])
                res.batch_order_operation_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseMessage])
                res.error_response_message = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def change_order_list_v3(self, request: operations.ChangeOrderListV3Request) -> operations.ChangeOrderListV3Response:
        r"""Send a batch of operations to change your marketplace Order information: accept, ship, etc.  (max 100 items per call)
        The purpose of this operation is to reduce the amount of request to the API. 
        Max 100 items per call.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orders/v3/batches/changeOrders'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "change_order_list_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ChangeOrderListV3Request, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeOrderListV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchOrderOperationResponse])
                res.batch_order_operation_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseMessage])
                res.error_response_message = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def clear_merchant_order_info_list_v3(self, request: operations.ClearMerchantOrderInfoListV3Request) -> operations.ClearMerchantOrderInfoListV3Response:
        r"""Send a batch of operations to clear an Order's merchant information (max 100 items per call)
        The purpose of this operation is to reduce the amount of request to the API.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orders/v3/batches/clearMerchantOrderInfos'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "clear_merchant_order_info_list_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ClearMerchantOrderInfoListV3Request, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClearMerchantOrderInfoListV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchOrderOperationResponse])
                res.batch_order_operation_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseMessage])
                res.error_response_message = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def set_merchant_order_info_list_v3(self, request: operations.SetMerchantOrderInfoListV3Request) -> operations.SetMerchantOrderInfoListV3Response:
        r"""Send a batch of operations to set an Order's merchant information  (max 100 items per call)
        The purpose of this operation is to reduce the amount of request to the API.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/orders/v3/batches/setMerchantOrderInfos'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_merchant_order_info_list_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SetMerchantOrderInfoListV3Request, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetMerchantOrderInfoListV3Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchOrderOperationResponse])
                res.batch_order_operation_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponseMessage])
                res.error_response_message = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    