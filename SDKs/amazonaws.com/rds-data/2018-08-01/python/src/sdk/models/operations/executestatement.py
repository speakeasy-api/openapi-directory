"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import decimalreturntype_enum as shared_decimalreturntype_enum
from ..shared import executestatementresponse as shared_executestatementresponse
from ..shared import longreturntype_enum as shared_longreturntype_enum
from ..shared import sqlparameter as shared_sqlparameter
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ExecuteStatementRequestBodyFormatRecordsAsEnum(str, Enum):
    r"""<p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href=\\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\\">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>"""
    NONE = 'NONE'
    JSON = 'JSON'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteStatementRequestBodyResultSetOptions:
    r"""Options that control how the result set is returned."""
    
    decimal_return_type: Optional[shared_decimalreturntype_enum.DecimalReturnTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('decimalReturnType'), 'exclude': lambda f: f is None }})  
    long_return_type: Optional[shared_longreturntype_enum.LongReturnTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longReturnType'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExecuteStatementRequestBody:
    
    resource_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceArn') }})
    r"""The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster."""  
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretArn') }})
    r"""<p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href=\\"https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html\\">Create a database secret</a>.</p>"""  
    sql: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sql') }})
    r"""The SQL statement to run."""  
    continue_after_timeout: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continueAfterTimeout'), 'exclude': lambda f: f is None }})
    r"""<p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <note> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </note>"""  
    database: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('database'), 'exclude': lambda f: f is None }})
    r"""The name of the database."""  
    format_records_as: Optional[ExecuteStatementRequestBodyFormatRecordsAsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formatRecordsAs'), 'exclude': lambda f: f is None }})
    r"""<p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href=\\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html\\">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>"""  
    include_result_metadata: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includeResultMetadata'), 'exclude': lambda f: f is None }})
    r"""A value that indicates whether to include metadata in the results."""  
    parameters: Optional[list[shared_sqlparameter.SQLParameter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""<p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>"""  
    result_set_options: Optional[ExecuteStatementRequestBodyResultSetOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultSetOptions'), 'exclude': lambda f: f is None }})
    r"""Options that control how the result set is returned."""  
    schema: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schema'), 'exclude': lambda f: f is None }})
    r"""<p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>"""  
    transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionId'), 'exclude': lambda f: f is None }})
    r"""<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>"""  
    

@dataclasses.dataclass
class ExecuteStatementRequest:
    
    request_body: ExecuteStatementRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ExecuteStatementResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    execute_statement_response: Optional[shared_executestatementresponse.ExecuteStatementResponse] = dataclasses.field(default=None)
    r"""Success"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_unavailable_error: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableError"""  
    statement_timeout_exception: Optional[Any] = dataclasses.field(default=None)
    r"""StatementTimeoutException"""  
    