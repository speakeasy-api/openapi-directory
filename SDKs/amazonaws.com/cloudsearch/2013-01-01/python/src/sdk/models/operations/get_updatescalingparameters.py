"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import partitioninstancetype_enum as shared_partitioninstancetype_enum
from enum import Enum
from typing import Optional

class GETUpdateScalingParametersActionEnum(str, Enum):
    UPDATE_SCALING_PARAMETERS = 'UpdateScalingParameters'


@dataclasses.dataclass
class GETUpdateScalingParametersScalingParameters:
    r"""The desired instance type and desired number of replicas of each index partition."""
    
    desired_instance_type: Optional[shared_partitioninstancetype_enum.PartitionInstanceTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DesiredInstanceType' }})  
    desired_partition_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DesiredPartitionCount' }})  
    desired_replication_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DesiredReplicationCount' }})  
    
class GETUpdateScalingParametersVersionEnum(str, Enum):
    TWO_THOUSAND_AND_THIRTEEN_01_01 = '2013-01-01'


@dataclasses.dataclass
class GETUpdateScalingParametersRequest:
    
    action: GETUpdateScalingParametersActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    domain_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DomainName', 'style': 'form', 'explode': True }})  
    scaling_parameters: GETUpdateScalingParametersScalingParameters = dataclasses.field(metadata={'query_param': { 'field_name': 'ScalingParameters', 'style': 'form', 'explode': True }})
    r"""The desired instance type and desired number of replicas of each index partition."""  
    version: GETUpdateScalingParametersVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETUpdateScalingParametersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    