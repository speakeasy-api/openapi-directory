// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VoiceSsmlGenderEnum - The gender of this voice.
type VoiceSsmlGenderEnum string

const (
	VoiceSsmlGenderEnumSsmlVoiceGenderUnspecified VoiceSsmlGenderEnum = "SSML_VOICE_GENDER_UNSPECIFIED"
	VoiceSsmlGenderEnumMale                       VoiceSsmlGenderEnum = "MALE"
	VoiceSsmlGenderEnumFemale                     VoiceSsmlGenderEnum = "FEMALE"
	VoiceSsmlGenderEnumNeutral                    VoiceSsmlGenderEnum = "NEUTRAL"
)

func (e VoiceSsmlGenderEnum) ToPointer() *VoiceSsmlGenderEnum {
	return &e
}

func (e *VoiceSsmlGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SSML_VOICE_GENDER_UNSPECIFIED":
		fallthrough
	case "MALE":
		fallthrough
	case "FEMALE":
		fallthrough
	case "NEUTRAL":
		*e = VoiceSsmlGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VoiceSsmlGenderEnum: %v", v)
	}
}

// Voice - Description of a voice supported by the TTS service.
type Voice struct {
	// The languages that this voice supports, expressed as [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g. "en-US", "es-419", "cmn-tw").
	LanguageCodes []string `json:"languageCodes,omitempty"`
	// The name of this voice. Each distinct voice has a unique name.
	Name *string `json:"name,omitempty"`
	// The natural sample rate (in hertz) for this voice.
	NaturalSampleRateHertz *int `json:"naturalSampleRateHertz,omitempty"`
	// The gender of this voice.
	SsmlGender *VoiceSsmlGenderEnum `json:"ssmlGender,omitempty"`
}
