/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac`, `party`, `pac-party`,                 `house-senate`, or `ie-only`
 */
export enum GetTotalsEntityTypeEntityTypeEnum {
  Presidential = "presidential",
  Pac = "pac",
  Party = "party",
  PacParty = "pac-party",
  HouseSenate = "house-senate",
  IeOnly = "ie-only",
}

export enum GetTotalsEntityTypeFilingFrequencyEnum {
  Unknown = "",
  A = "A",
  M = "M",
  N = "N",
  Q = "Q",
  T = "T",
  W = "W",
  MinusA = "-A",
  MinusT = "-T",
}

export enum GetTotalsEntityTypeOrganizationTypeEnum {
  Unknown = "",
  C = "C",
  L = "L",
  M = "M",
  T = "T",
  V = "V",
  W = "W",
}

export class GetTotalsEntityTypeRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   * The one-letter designation code of the organization:
   *
   * @remarks
   *          - A authorized by a candidate
   *          - J joint fundraising committee
   *          - P principal campaign committee of a candidate
   *          - U unauthorized
   *          - B lobbyist/registrant PAC
   *          - D leadership PAC
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=committee_designation",
  })
  committeeDesignation?: string[];

  /**
   *
   * @remarks
   * A unique identifier assigned to each committee or filer registered with the FEC. In general committee id's begin with the letter C which is followed by eight digits.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=committee_id",
  })
  committeeId?: string[];

  /**
   * US state or territory
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=committee_state",
  })
  committeeState?: string[];

  /**
   * The one-letter type code of the organization:
   *
   * @remarks
   *         - C communication cost
   *         - D delegate
   *         - E electioneering communication
   *         - H House
   *         - I independent expenditure filer (not a committee)
   *         - N PAC - nonqualified
   *         - O independent expenditure-only (super PACs)
   *         - P presidential
   *         - Q PAC - qualified
   *         - S Senate
   *         - U single candidate independent expenditure
   *         - V PAC with non-contribution account, nonqualified
   *         - W PAC with non-contribution account, qualified
   *         - X party, nonqualified
   *         - Y party, qualified
   *         - Z national party non-federal account
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=committee_type",
  })
  committeeType?: string[];

  /**
   *
   * @remarks
   * Filter records to only those that were applicable to a given
   * two-year period.The cycle begins with an odd year and is named
   * for its ending, even year.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cycle" })
  cycle?: number[];

  /**
   * Committee groupings based on FEC filing form.                 Choose one of: `presidential`, `pac`, `party`, `pac-party`,                 `house-senate`, or `ie-only`
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=entity_type",
  })
  entityType: GetTotalsEntityTypeEntityTypeEnum;

  /**
   * The one-letter
   *
   * @remarks
   *     code of the filing frequency:
   *          - A Administratively terminated
   *          - D Debt
   *          - M Monthly filer
   *          - Q Quarterly filer
   *          - T Terminated
   *          - W Waived
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filing_frequency",
  })
  filingFrequency?: GetTotalsEntityTypeFilingFrequencyEnum[];

  /**
   *
   * @remarks
   * Filter for all amounts less than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_disbursements",
  })
  maxDisbursements?: string;

  /**
   * Filter for committees whose first Form 1 was received on or before this date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_first_f1_date;dateTimeFormat=YYYY-MM-DD",
  })
  maxFirstF1Date?: Date;

  /**
   *
   * @remarks
   * Filter for all amounts less than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_last_cash_on_hand_end_period",
  })
  maxLastCashOnHandEndPeriod?: string;

  /**
   *
   * @remarks
   * Filter for all amounts less than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_last_debts_owed_by_committee",
  })
  maxLastDebtsOwedByCommittee?: string;

  /**
   *
   * @remarks
   * Filter for all amounts less than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_receipts",
  })
  maxReceipts?: string;

  /**
   *
   * @remarks
   * Filter for all amounts greater than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_disbursements",
  })
  minDisbursements?: string;

  /**
   * Filter for committees whose first Form 1 was received on or after this date.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_first_f1_date;dateTimeFormat=YYYY-MM-DD",
  })
  minFirstF1Date?: Date;

  /**
   *
   * @remarks
   * Filter for all amounts greater than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_last_cash_on_hand_end_period",
  })
  minLastCashOnHandEndPeriod?: string;

  /**
   *
   * @remarks
   * Filter for all amounts greater than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_last_debts_owed_by_committee",
  })
  minLastDebtsOwedByCommittee?: string;

  /**
   *
   * @remarks
   * Filter for all amounts greater than a value.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_receipts",
  })
  minReceipts?: string;

  /**
   * The one-letter code for the kind for organization:
   *
   * @remarks
   *         - C corporation
   *         - L labor organization
   *         - M membership organization
   *         - T trade association
   *         - V cooperative
   *         - W corporation without capital stock
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=organization_type",
  })
  organizationType?: GetTotalsEntityTypeOrganizationTypeEnum[];

  /**
   * For paginating through results, starting at page 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results returned per page. Defaults to 20.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Provide a field to sort by. Use `-` for descending order.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Hide null values on sorted column(s).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_hide_null",
  })
  sortHideNull?: boolean;

  /**
   * Toggle that filters out all rows having sort column that is non-null
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_null_only",
  })
  sortNullOnly?: boolean;

  /**
   * Toggle that sorts null values last
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_nulls_last",
  })
  sortNullsLast?: boolean;

  /**
   *
   * @remarks
   * A unique identifier assigned to each candidate registered with the FEC.
   * If a person runs for several offices, that person will have separate candidate IDs for each office. This is a filter for Leadership PAC sponsor.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sponsor_candidate_id",
  })
  sponsorCandidateId?: string[];

  /**
   * Name of the Committee's treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=treasurer_name",
  })
  treasurerName?: string[];
}

export class GetTotalsEntityTypeResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  committeeTotalsPage?: shared.CommitteeTotalsPage;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
