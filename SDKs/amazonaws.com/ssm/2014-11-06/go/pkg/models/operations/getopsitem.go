// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetOpsItemXAmzTargetEnum
type GetOpsItemXAmzTargetEnum string

const (
	GetOpsItemXAmzTargetEnumAmazonSsmGetOpsItem GetOpsItemXAmzTargetEnum = "AmazonSSM.GetOpsItem"
)

func (e *GetOpsItemXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.GetOpsItem":
		*e = GetOpsItemXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOpsItemXAmzTargetEnum: %s", s)
	}
}

type GetOpsItemHeaders struct {
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetOpsItemXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetOpsItemRequest struct {
	Headers GetOpsItemHeaders
	Request shared.GetOpsItemRequest `request:"mediaType=application/json"`
}

type GetOpsItemResponse struct {
	ContentType string
	// Success
	GetOpsItemResponse *shared.GetOpsItemResponse
	// InternalServerError
	InternalServerError interface{}
	// OpsItemAccessDeniedException
	OpsItemAccessDeniedException interface{}
	// OpsItemNotFoundException
	OpsItemNotFoundException interface{}
	StatusCode               int
	RawResponse              *http.Response
}
