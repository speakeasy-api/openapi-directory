"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import embeddedobjectbordersuggestionstate as shared_embeddedobjectbordersuggestionstate
from ..shared import imagepropertiessuggestionstate as shared_imagepropertiessuggestionstate
from ..shared import linkedcontentreferencesuggestionstate as shared_linkedcontentreferencesuggestionstate
from ..shared import sizesuggestionstate as shared_sizesuggestionstate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmbeddedObjectSuggestionState:
    r"""A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there's a new suggested value."""
    
    description_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('descriptionSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to description."""  
    embedded_drawing_properties_suggestion_state: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddedDrawingPropertiesSuggestionState'), 'exclude': lambda f: f is None }})
    r"""A mask that indicates which of the fields on the base EmbeddedDrawingProperties have been changed in this suggestion. For any field set to true, there's a new suggested value."""  
    embedded_object_border_suggestion_state: Optional[shared_embeddedobjectbordersuggestionstate.EmbeddedObjectBorderSuggestionState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddedObjectBorderSuggestionState'), 'exclude': lambda f: f is None }})
    r"""A mask that indicates which of the fields on the base EmbeddedObjectBorder have been changed in this suggestion. For any field set to true, there's a new suggested value."""  
    image_properties_suggestion_state: Optional[shared_imagepropertiessuggestionstate.ImagePropertiesSuggestionState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imagePropertiesSuggestionState'), 'exclude': lambda f: f is None }})
    r"""A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there's a new suggested value."""  
    linked_content_reference_suggestion_state: Optional[shared_linkedcontentreferencesuggestionstate.LinkedContentReferenceSuggestionState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkedContentReferenceSuggestionState'), 'exclude': lambda f: f is None }})
    r"""A mask that indicates which of the fields on the base LinkedContentReference have been changed in this suggestion. For any field set to true, there's a new suggested value."""  
    margin_bottom_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginBottomSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to margin_bottom."""  
    margin_left_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginLeftSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to margin_left."""  
    margin_right_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginRightSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to margin_right."""  
    margin_top_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marginTopSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to margin_top."""  
    size_suggestion_state: Optional[shared_sizesuggestionstate.SizeSuggestionState] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sizeSuggestionState'), 'exclude': lambda f: f is None }})
    r"""A mask that indicates which of the fields on the base Size have been changed in this suggestion. For any field set to true, the Size has a new suggested value."""  
    title_suggested: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('titleSuggested'), 'exclude': lambda f: f is None }})
    r"""Indicates if there was a suggested change to title."""  
    