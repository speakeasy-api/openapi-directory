"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class WritableCableLengthUnitEnum(str, Enum):
    M = 'm'
    CM = 'cm'
    FT = 'ft'
    IN = 'in'

class WritableCableStatusEnum(str, Enum):
    CONNECTED = 'connected'
    PLANNED = 'planned'
    DECOMMISSIONING = 'decommissioning'

class WritableCableTypeEnum(str, Enum):
    CAT3 = 'cat3'
    CAT5 = 'cat5'
    CAT5E = 'cat5e'
    CAT6 = 'cat6'
    CAT6A = 'cat6a'
    CAT7 = 'cat7'
    DAC_ACTIVE = 'dac-active'
    DAC_PASSIVE = 'dac-passive'
    MRJ21_TRUNK = 'mrj21-trunk'
    COAXIAL = 'coaxial'
    MMF = 'mmf'
    MMF_OM1 = 'mmf-om1'
    MMF_OM2 = 'mmf-om2'
    MMF_OM3 = 'mmf-om3'
    MMF_OM4 = 'mmf-om4'
    SMF = 'smf'
    SMF_OS1 = 'smf-os1'
    SMF_OS2 = 'smf-os2'
    AOC = 'aoc'
    POWER = 'power'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritableCableInput:
    
    termination_a_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_a_id') }})  
    termination_a_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_a_type') }})  
    termination_b_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_b_id') }})  
    termination_b_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termination_b_type') }})  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})  
    length_unit: Optional[WritableCableLengthUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length_unit'), 'exclude': lambda f: f is None }})  
    status: Optional[WritableCableStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    type: Optional[WritableCableTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    