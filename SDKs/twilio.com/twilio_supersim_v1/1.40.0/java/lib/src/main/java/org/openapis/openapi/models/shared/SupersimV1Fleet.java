/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SupersimV1Fleet - Created
 */
public class SupersimV1Fleet {
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Fleet resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;
    public SupersimV1Fleet withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_enabled")
    public Boolean dataEnabled;
    public SupersimV1Fleet withDataEnabled(Boolean dataEnabled) {
        this.dataEnabled = dataEnabled;
        return this;
    }
    
    /**
     * The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_limit")
    public Long dataLimit;
    public SupersimV1Fleet withDataLimit(Long dataLimit) {
        this.dataLimit = dataLimit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_metering")
    public FleetEnumDataMeteringEnum dataMetering;
    public SupersimV1Fleet withDataMetering(FleetEnumDataMeteringEnum dataMetering) {
        this.dataMetering = dataMetering;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;
    public SupersimV1Fleet withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;
    public SupersimV1Fleet withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * A string representing the HTTP method to use when making a request to `ip_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_commands_method")
    public SupersimV1FleetIpCommandsMethodEnum ipCommandsMethod;
    public SupersimV1Fleet withIpCommandsMethod(SupersimV1FleetIpCommandsMethodEnum ipCommandsMethod) {
        this.ipCommandsMethod = ipCommandsMethod;
        return this;
    }
    
    /**
     * The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_commands_url")
    public String ipCommandsUrl;
    public SupersimV1Fleet withIpCommandsUrl(String ipCommandsUrl) {
        this.ipCommandsUrl = ipCommandsUrl;
        return this;
    }
    
    /**
     * The SID of the Network Access Profile that controls which cellular networks the Fleet's SIMs can connect to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network_access_profile_sid")
    public String networkAccessProfileSid;
    public SupersimV1Fleet withNetworkAccessProfileSid(String networkAccessProfileSid) {
        this.networkAccessProfileSid = networkAccessProfileSid;
        return this;
    }
    
    /**
     * The unique string that we created to identify the Fleet resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;
    public SupersimV1Fleet withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sms_commands_enabled")
    public Boolean smsCommandsEnabled;
    public SupersimV1Fleet withSmsCommandsEnabled(Boolean smsCommandsEnabled) {
        this.smsCommandsEnabled = smsCommandsEnabled;
        return this;
    }
    
    /**
     * A string representing the HTTP method to use when making a request to `sms_commands_url`. Can be one of `POST` or `GET`. Defaults to `POST`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sms_commands_method")
    public SupersimV1FleetSmsCommandsMethodEnum smsCommandsMethod;
    public SupersimV1Fleet withSmsCommandsMethod(SupersimV1FleetSmsCommandsMethodEnum smsCommandsMethod) {
        this.smsCommandsMethod = smsCommandsMethod;
        return this;
    }
    
    /**
     * The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sms_commands_url")
    public String smsCommandsUrl;
    public SupersimV1Fleet withSmsCommandsUrl(String smsCommandsUrl) {
        this.smsCommandsUrl = smsCommandsUrl;
        return this;
    }
    
    /**
     * An application-defined string that uniquely identifies the resource. It can be used in place of the resource's `sid` in the URL to address the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_name")
    public String uniqueName;
    public SupersimV1Fleet withUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
        return this;
    }
    
    /**
     * The absolute URL of the Fleet resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public SupersimV1Fleet withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
