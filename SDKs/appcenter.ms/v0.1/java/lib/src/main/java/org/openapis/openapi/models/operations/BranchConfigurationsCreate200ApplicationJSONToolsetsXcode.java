/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BranchConfigurationsCreate200ApplicationJSONToolsetsXcode - Build configuration when Xcode is part of the build steps
 */
public class BranchConfigurationsCreate200ApplicationJSONToolsetsXcode {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appExtensionProvisioningProfileFiles")
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles[] appExtensionProvisioningProfileFiles;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withAppExtensionProvisioningProfileFiles(BranchConfigurationsCreate200ApplicationJSONToolsetsXcodeAppExtensionProvisioningProfileFiles[] appExtensionProvisioningProfileFiles) {
        this.appExtensionProvisioningProfileFiles = appExtensionProvisioningProfileFiles;
        return this;
    }
    
    /**
     * The build configuration of the target to archive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archiveConfiguration")
    public String archiveConfiguration;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withArchiveConfiguration(String archiveConfiguration) {
        this.archiveConfiguration = archiveConfiguration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("automaticSigning")
    public Boolean automaticSigning;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withAutomaticSigning(Boolean automaticSigning) {
        this.automaticSigning = automaticSigning;
        return this;
    }
    
    /**
     * Path to Carthage file, if present
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cartfilePath")
    public String cartfilePath;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withCartfilePath(String cartfilePath) {
        this.cartfilePath = cartfilePath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateEncoded")
    public String certificateEncoded;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withCertificateEncoded(String certificateEncoded) {
        this.certificateEncoded = certificateEncoded;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateFileId")
    public String certificateFileId;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withCertificateFileId(String certificateFileId) {
        this.certificateFileId = certificateFileId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateFilename")
    public String certificateFilename;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withCertificateFilename(String certificateFilename) {
        this.certificateFilename = certificateFilename;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificatePassword")
    public String certificatePassword;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withCertificatePassword(String certificatePassword) {
        this.certificatePassword = certificatePassword;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateUploadId")
    public String certificateUploadId;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withCertificateUploadId(String certificateUploadId) {
        this.certificateUploadId = certificateUploadId;
        return this;
    }
    
    /**
     * Setting this to true forces the build to use Xcode legacy build system. Otherwise, the setting from workspace settings is used.
     * By default new build system is used if workspace setting is not committed to the repository. Only used for iOS React Native app, with Xcode 10.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forceLegacyBuildSystem")
    public Boolean forceLegacyBuildSystem;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withForceLegacyBuildSystem(Boolean forceLegacyBuildSystem) {
        this.forceLegacyBuildSystem = forceLegacyBuildSystem;
        return this;
    }
    
    /**
     * Path to CococaPods file, if present
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("podfilePath")
    public String podfilePath;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withPodfilePath(String podfilePath) {
        this.podfilePath = podfilePath;
        return this;
    }
    
    /**
     * Xcode project/workspace path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("projectOrWorkspacePath")
    public String projectOrWorkspacePath;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withProjectOrWorkspacePath(String projectOrWorkspacePath) {
        this.projectOrWorkspacePath = projectOrWorkspacePath;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisioningProfileEncoded")
    public String provisioningProfileEncoded;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withProvisioningProfileEncoded(String provisioningProfileEncoded) {
        this.provisioningProfileEncoded = provisioningProfileEncoded;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisioningProfileFileId")
    public String provisioningProfileFileId;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withProvisioningProfileFileId(String provisioningProfileFileId) {
        this.provisioningProfileFileId = provisioningProfileFileId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisioningProfileFilename")
    public String provisioningProfileFilename;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withProvisioningProfileFilename(String provisioningProfileFilename) {
        this.provisioningProfileFilename = provisioningProfileFilename;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provisioningProfileUploadId")
    public String provisioningProfileUploadId;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withProvisioningProfileUploadId(String provisioningProfileUploadId) {
        this.provisioningProfileUploadId = provisioningProfileUploadId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheme")
    public String scheme;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withScheme(String scheme) {
        this.scheme = scheme;
        return this;
    }
    
    /**
     * The target id of the selected scheme to archive
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targetToArchive")
    public String targetToArchive;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withTargetToArchive(String targetToArchive) {
        this.targetToArchive = targetToArchive;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("teamId")
    public String teamId;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withTeamId(String teamId) {
        this.teamId = teamId;
        return this;
    }
    
    /**
     * The selected pbxproject hash to the repositroy
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xcodeProjectSha")
    public String xcodeProjectSha;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withXcodeProjectSha(String xcodeProjectSha) {
        this.xcodeProjectSha = xcodeProjectSha;
        return this;
    }
    
    /**
     * Xcode version used to build. Available versions can be found in "/xcode_versions" API. Default is latest stable version, at the time when the configuration is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xcodeVersion")
    public String xcodeVersion;
    public BranchConfigurationsCreate200ApplicationJSONToolsetsXcode withXcodeVersion(String xcodeVersion) {
        this.xcodeVersion = xcodeVersion;
        return this;
    }
    
}
