/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AppPermissions - The permissions granted to the user-to-server access token.
 */
public class AppPermissions {
    /**
     * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actions")
    public AppPermissionsActionsEnum actions;

    public AppPermissions withActions(AppPermissionsActionsEnum actions) {
        this.actions = actions;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("administration")
    public AppPermissionsAdministrationEnum administration;

    public AppPermissions withAdministration(AppPermissionsAdministrationEnum administration) {
        this.administration = administration;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for checks on code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checks")
    public AppPermissionsChecksEnum checks;

    public AppPermissions withChecks(AppPermissionsChecksEnum checks) {
        this.checks = checks;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for notification of content references and creation content attachments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_references")
    public AppPermissionsContentReferencesEnum contentReferences;

    public AppPermissions withContentReferences(AppPermissionsContentReferencesEnum contentReferences) {
        this.contentReferences = contentReferences;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contents")
    public AppPermissionsContentsEnum contents;

    public AppPermissions withContents(AppPermissionsContentsEnum contents) {
        this.contents = contents;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for deployments and deployment statuses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deployments")
    public AppPermissionsDeploymentsEnum deployments;

    public AppPermissions withDeployments(AppPermissionsDeploymentsEnum deployments) {
        this.deployments = deployments;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for managing repository environments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environments")
    public AppPermissionsEnvironmentsEnum environments;

    public AppPermissions withEnvironments(AppPermissionsEnvironmentsEnum environments) {
        this.environments = environments;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issues")
    public AppPermissionsIssuesEnum issues;

    public AppPermissions withIssues(AppPermissionsIssuesEnum issues) {
        this.issues = issues;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for organization teams and members.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("members")
    public AppPermissionsMembersEnum members;

    public AppPermissions withMembers(AppPermissionsMembersEnum members) {
        this.members = members;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public AppPermissionsMetadataEnum metadata;

    public AppPermissions withMetadata(AppPermissionsMetadataEnum metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage access to an organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_administration")
    public AppPermissionsOrganizationAdministrationEnum organizationAdministration;

    public AppPermissions withOrganizationAdministration(AppPermissionsOrganizationAdministrationEnum organizationAdministration) {
        this.organizationAdministration = organizationAdministration;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage the post-receive hooks for an organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_hooks")
    public AppPermissionsOrganizationHooksEnum organizationHooks;

    public AppPermissions withOrganizationHooks(AppPermissionsOrganizationHooksEnum organizationHooks) {
        this.organizationHooks = organizationHooks;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for organization packages published to GitHub Packages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_packages")
    public AppPermissionsOrganizationPackagesEnum organizationPackages;

    public AppPermissions withOrganizationPackages(AppPermissionsOrganizationPackagesEnum organizationPackages) {
        this.organizationPackages = organizationPackages;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for viewing an organization's plan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_plan")
    public AppPermissionsOrganizationPlanEnum organizationPlan;

    public AppPermissions withOrganizationPlan(AppPermissionsOrganizationPlanEnum organizationPlan) {
        this.organizationPlan = organizationPlan;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage organization projects and projects beta (where available).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_projects")
    public AppPermissionsOrganizationProjectsEnum organizationProjects;

    public AppPermissions withOrganizationProjects(AppPermissionsOrganizationProjectsEnum organizationProjects) {
        this.organizationProjects = organizationProjects;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage organization secrets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_secrets")
    public AppPermissionsOrganizationSecretsEnum organizationSecrets;

    public AppPermissions withOrganizationSecrets(AppPermissionsOrganizationSecretsEnum organizationSecrets) {
        this.organizationSecrets = organizationSecrets;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_self_hosted_runners")
    public AppPermissionsOrganizationSelfHostedRunnersEnum organizationSelfHostedRunners;

    public AppPermissions withOrganizationSelfHostedRunners(AppPermissionsOrganizationSelfHostedRunnersEnum organizationSelfHostedRunners) {
        this.organizationSelfHostedRunners = organizationSelfHostedRunners;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to view and manage users blocked by the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_user_blocking")
    public AppPermissionsOrganizationUserBlockingEnum organizationUserBlocking;

    public AppPermissions withOrganizationUserBlocking(AppPermissionsOrganizationUserBlockingEnum organizationUserBlocking) {
        this.organizationUserBlocking = organizationUserBlocking;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for packages published to GitHub Packages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("packages")
    public AppPermissionsPackagesEnum packages;

    public AppPermissions withPackages(AppPermissionsPackagesEnum packages) {
        this.packages = packages;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pages")
    public AppPermissionsPagesEnum pages;

    public AppPermissions withPages(AppPermissionsPagesEnum pages) {
        this.pages = pages;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pull_requests")
    public AppPermissionsPullRequestsEnum pullRequests;

    public AppPermissions withPullRequests(AppPermissionsPullRequestsEnum pullRequests) {
        this.pullRequests = pullRequests;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage the post-receive hooks for a repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repository_hooks")
    public AppPermissionsRepositoryHooksEnum repositoryHooks;

    public AppPermissions withRepositoryHooks(AppPermissionsRepositoryHooksEnum repositoryHooks) {
        this.repositoryHooks = repositoryHooks;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage repository projects, columns, and cards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repository_projects")
    public AppPermissionsRepositoryProjectsEnum repositoryProjects;

    public AppPermissions withRepositoryProjects(AppPermissionsRepositoryProjectsEnum repositoryProjects) {
        this.repositoryProjects = repositoryProjects;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to view and manage secret scanning alerts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret_scanning_alerts")
    public AppPermissionsSecretScanningAlertsEnum secretScanningAlerts;

    public AppPermissions withSecretScanningAlerts(AppPermissionsSecretScanningAlertsEnum secretScanningAlerts) {
        this.secretScanningAlerts = secretScanningAlerts;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage repository secrets.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secrets")
    public AppPermissionsSecretsEnum secrets;

    public AppPermissions withSecrets(AppPermissionsSecretsEnum secrets) {
        this.secrets = secrets;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to view and manage security events like code scanning alerts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("security_events")
    public AppPermissionsSecurityEventsEnum securityEvents;

    public AppPermissions withSecurityEvents(AppPermissionsSecurityEventsEnum securityEvents) {
        this.securityEvents = securityEvents;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage just a single file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("single_file")
    public AppPermissionsSingleFileEnum singleFile;

    public AppPermissions withSingleFile(AppPermissionsSingleFileEnum singleFile) {
        this.singleFile = singleFile;
        return this;
    }
    
    /**
     * The level of permission to grant the access token for commit statuses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statuses")
    public AppPermissionsStatusesEnum statuses;

    public AppPermissions withStatuses(AppPermissionsStatusesEnum statuses) {
        this.statuses = statuses;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage team discussions and related comments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team_discussions")
    public AppPermissionsTeamDiscussionsEnum teamDiscussions;

    public AppPermissions withTeamDiscussions(AppPermissionsTeamDiscussionsEnum teamDiscussions) {
        this.teamDiscussions = teamDiscussions;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to manage Dependabot alerts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vulnerability_alerts")
    public AppPermissionsVulnerabilityAlertsEnum vulnerabilityAlerts;

    public AppPermissions withVulnerabilityAlerts(AppPermissionsVulnerabilityAlertsEnum vulnerabilityAlerts) {
        this.vulnerabilityAlerts = vulnerabilityAlerts;
        return this;
    }
    
    /**
     * The level of permission to grant the access token to update GitHub Actions workflow files.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workflows")
    public AppPermissionsWorkflowsEnum workflows;

    public AppPermissions withWorkflows(AppPermissionsWorkflowsEnum workflows) {
        this.workflows = workflows;
        return this;
    }
    
    public AppPermissions(){}
}
