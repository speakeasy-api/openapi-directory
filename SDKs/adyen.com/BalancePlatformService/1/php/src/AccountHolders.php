<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AccountHolders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get an account holder
     * 
     * Returns an account holder.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdResponse
     */
	public function getAccountHoldersId(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accountHolders/{id}', \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountHolder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountHolder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all balance accounts of an account holder
     * 
     * Returns a paginated list of the balance accounts associated with an account holder. To fetch multiple pages, use the query parameters. 
     * 
     * For example, to limit the page to 5 balance accounts and skip the first 10, use `/accountHolders/{id}/balanceAccounts?limit=5&offset=10`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsResponse
     */
	public function getAccountHoldersIdBalanceAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accountHolders/{id}/balanceAccounts', \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAccountHoldersIdBalanceAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedBalanceAccountsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedBalanceAccountsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an account holder
     * 
     * Updates an account holder. When updating an account holder resource, if a parameter is not provided in the request, it is left unchanged.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdResponse
     */
	public function patchAccountHoldersId(
        \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accountHolders/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "accountHolderInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchAccountHoldersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountHolder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountHolder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an account holder
     * 
     * Creates an account holder linked to a [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities).
     * 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AccountHolderInfoInput $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAccountHoldersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAccountHoldersResponse
     */
	public function postAccountHolders(
        \OpenAPI\OpenAPI\Models\Shared\AccountHolderInfoInput $request,
        \OpenAPI\OpenAPI\Models\Operations\PostAccountHoldersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAccountHoldersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/accountHolders');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAccountHoldersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accountHolder = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccountHolder', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}