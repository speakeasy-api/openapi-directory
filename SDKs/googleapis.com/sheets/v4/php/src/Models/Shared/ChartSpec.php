<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ChartSpec - The specifications of a chart.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ChartSpec
{
    /**
     * The alternative text that describes the chart. This is often used for accessibility.
     * 
     * @var ?string $altText
     */
	#[\JMS\Serializer\Annotation\SerializedName('altText')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $altText = null;
    
    /**
     * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Color $backgroundColor
     */
	#[\JMS\Serializer\Annotation\SerializedName('backgroundColor')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Color')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Color $backgroundColor = null;
    
    /**
     * A color value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ColorStyle $backgroundColorStyle
     */
	#[\JMS\Serializer\Annotation\SerializedName('backgroundColorStyle')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ColorStyle')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ColorStyle $backgroundColorStyle = null;
    
    /**
     * The specification for a basic chart. See BasicChartType for the list of charts this supports.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BasicChartSpec $basicChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('basicChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BasicChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BasicChartSpec $basicChart = null;
    
    /**
     * A bubble chart.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BubbleChartSpec $bubbleChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('bubbleChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BubbleChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BubbleChartSpec $bubbleChart = null;
    
    /**
     * A candlestick chart.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\CandlestickChartSpec $candlestickChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('candlestickChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CandlestickChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CandlestickChartSpec $candlestickChart = null;
    
    /**
     * Properties of a data source chart.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DataSourceChartProperties $dataSourceChartProperties
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataSourceChartProperties')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DataSourceChartProperties')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DataSourceChartProperties $dataSourceChartProperties = null;
    
    /**
     * The filters applied to the source data of the chart. Only supported for data source charts.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\FilterSpec> $filterSpecs
     */
	#[\JMS\Serializer\Annotation\SerializedName('filterSpecs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\FilterSpec>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filterSpecs = null;
    
    /**
     * The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.
     * 
     * @var ?string $fontName
     */
	#[\JMS\Serializer\Annotation\SerializedName('fontName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $fontName = null;
    
    /**
     * Determines how the charts will use hidden rows or columns.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChartSpecHiddenDimensionStrategyEnum $hiddenDimensionStrategy
     */
	#[\JMS\Serializer\Annotation\SerializedName('hiddenDimensionStrategy')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ChartSpecHiddenDimensionStrategyEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChartSpecHiddenDimensionStrategyEnum $hiddenDimensionStrategy = null;
    
    /**
     * A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HistogramChartSpec $histogramChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('histogramChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\HistogramChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HistogramChartSpec $histogramChart = null;
    
    /**
     * True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)
     * 
     * @var ?bool $maximized
     */
	#[\JMS\Serializer\Annotation\SerializedName('maximized')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $maximized = null;
    
    /**
     * An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain "Alice", "Bob", "Cathy", parent_labels contain "", "Alice", "Alice" and tooltips contain "CEO", "President", "VP Sales".
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\OrgChartSpec $orgChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('orgChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\OrgChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?OrgChartSpec $orgChart = null;
    
    /**
     * A pie chart.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\PieChartSpec $pieChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('pieChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\PieChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PieChartSpec $pieChart = null;
    
    /**
     * A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ScorecardChartSpec $scorecardChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('scorecardChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ScorecardChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ScorecardChartSpec $scorecardChart = null;
    
    /**
     * The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SortSpec> $sortSpecs
     */
	#[\JMS\Serializer\Annotation\SerializedName('sortSpecs')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SortSpec>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $sortSpecs = null;
    
    /**
     * The subtitle of the chart.
     * 
     * @var ?string $subtitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('subtitle')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subtitle = null;
    
    /**
     * The format of a run of text in a cell. Absent values indicate that the field isn't specified.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TextFormat $subtitleTextFormat
     */
	#[\JMS\Serializer\Annotation\SerializedName('subtitleTextFormat')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TextFormat')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TextFormat $subtitleTextFormat = null;
    
    /**
     * Position settings for text.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TextPosition $subtitleTextPosition
     */
	#[\JMS\Serializer\Annotation\SerializedName('subtitleTextPosition')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TextPosition')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TextPosition $subtitleTextPosition = null;
    
    /**
     * The title of the chart.
     * 
     * @var ?string $title
     */
	#[\JMS\Serializer\Annotation\SerializedName('title')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $title = null;
    
    /**
     * The format of a run of text in a cell. Absent values indicate that the field isn't specified.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TextFormat $titleTextFormat
     */
	#[\JMS\Serializer\Annotation\SerializedName('titleTextFormat')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TextFormat')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TextFormat $titleTextFormat = null;
    
    /**
     * Position settings for text.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TextPosition $titleTextPosition
     */
	#[\JMS\Serializer\Annotation\SerializedName('titleTextPosition')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TextPosition')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TextPosition $titleTextPosition = null;
    
    /**
     * A Treemap chart.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TreemapChartSpec $treemapChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('treemapChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TreemapChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TreemapChartSpec $treemapChart = null;
    
    /**
     * A waterfall chart.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\WaterfallChartSpec $waterfallChart
     */
	#[\JMS\Serializer\Annotation\SerializedName('waterfallChart')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\WaterfallChartSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?WaterfallChartSpec $waterfallChart = null;
    
	public function __construct()
	{
		$this->altText = null;
		$this->backgroundColor = null;
		$this->backgroundColorStyle = null;
		$this->basicChart = null;
		$this->bubbleChart = null;
		$this->candlestickChart = null;
		$this->dataSourceChartProperties = null;
		$this->filterSpecs = null;
		$this->fontName = null;
		$this->hiddenDimensionStrategy = null;
		$this->histogramChart = null;
		$this->maximized = null;
		$this->orgChart = null;
		$this->pieChart = null;
		$this->scorecardChart = null;
		$this->sortSpecs = null;
		$this->subtitle = null;
		$this->subtitleTextFormat = null;
		$this->subtitleTextPosition = null;
		$this->title = null;
		$this->titleTextFormat = null;
		$this->titleTextPosition = null;
		$this->treemapChart = null;
		$this->waterfallChart = null;
	}
}
