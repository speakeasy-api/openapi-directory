// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetCommitsXAmzTargetEnum
type BatchGetCommitsXAmzTargetEnum string

const (
	BatchGetCommitsXAmzTargetEnumCodeCommit20150413BatchGetCommits BatchGetCommitsXAmzTargetEnum = "CodeCommit_20150413.BatchGetCommits"
)

func (e BatchGetCommitsXAmzTargetEnum) ToPointer() *BatchGetCommitsXAmzTargetEnum {
	return &e
}

func (e *BatchGetCommitsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.BatchGetCommits":
		*e = BatchGetCommitsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetCommitsXAmzTargetEnum: %v", v)
	}
}

type BatchGetCommitsRequest struct {
	BatchGetCommitsInput shared.BatchGetCommitsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           BatchGetCommitsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetCommitsResponse struct {
	// Success
	BatchGetCommitsOutput *shared.BatchGetCommitsOutput
	// CommitIdsLimitExceededException
	CommitIdsLimitExceededException interface{}
	// CommitIdsListRequiredException
	CommitIdsListRequiredException interface{}
	ContentType                    string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
}
