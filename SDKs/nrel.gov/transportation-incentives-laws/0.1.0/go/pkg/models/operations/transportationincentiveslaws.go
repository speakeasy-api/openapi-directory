// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// TransportationIncentivesLawsOutputFormatEnum - Response format
type TransportationIncentivesLawsOutputFormatEnum string

const (
	TransportationIncentivesLawsOutputFormatEnumJSON TransportationIncentivesLawsOutputFormatEnum = "json"
	TransportationIncentivesLawsOutputFormatEnumXML  TransportationIncentivesLawsOutputFormatEnum = "xml"
	TransportationIncentivesLawsOutputFormatEnumCsv  TransportationIncentivesLawsOutputFormatEnum = "csv"
)

func (e *TransportationIncentivesLawsOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "csv":
		*e = TransportationIncentivesLawsOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TransportationIncentivesLawsOutputFormatEnum: %s", s)
	}
}

type TransportationIncentivesLawsPathParams struct {
	// Response format
	OutputFormat TransportationIncentivesLawsOutputFormatEnum `pathParam:"style=simple,explode=false,name=output_format"`
}

type TransportationIncentivesLawsQueryParams struct {
	// API Key
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// The 'true' value returns only expired, repealed, or archived laws and incentives. The default 'false' value returns only current laws and incentives.
	Expired *bool `queryParam:"style=form,explode=true,name=expired"`
	// Search by the incentive type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'GNT' for Grants, 'TAX' for Tax Incentives, 'LOANS' for Loans and Leases, 'RBATE' for Rebates, 'EXEM' for Exemptions, and 'OTHER' for Other.
	IncentiveType *string `queryParam:"style=form,explode=true,name=incentive_type"`
	// Return laws for the given Jurisdiction. Jurisdiction must be given as a two character state code (eg, 'CO' for Colorado). A single jurisdiction, or a comma-separate list of multiple jurisdiction, may be given.  Use the code 'US' for federal laws and the code 'DC' for Washington D.C.
	Jurisdiction *string `queryParam:"style=form,explode=true,name=jurisdiction"`
	// Search laws by keyword in title or text.
	Keyword *string `queryParam:"style=form,explode=true,name=keyword"`
	// Search by the law type. A single type, or a comma-separate list of multiple types, may be given. Values are as follows: 'STATEINC' for State Incentives, 'UPINC ' for Utility/Private Incentives, 'LAWREG' for Laws and Regulations, 'INC' for Incentives, 'PROG' for Programs, 'LUP' for Last Updated, 'OVIEW' for Overview, and 'HILITE' for Highlights
	LawType *string `queryParam:"style=form,explode=true,name=law_type"`
	// Limit the number of laws returned
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Show only local examples of laws and incentives.
	Local *bool `queryParam:"style=form,explode=true,name=local"`
	// Include points of contacts in the return value.
	Poc *bool `queryParam:"style=form,explode=true,name=poc"`
	// Return only recently added or updated laws and incentives
	Recent *bool `queryParam:"style=form,explode=true,name=recent"`
	// Search by the regulation type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'REGIS' for Registration / Licensing, 'STD' for Fuel Production / Quality, 'DREST' for Driving / Idling, 'REQ' for Acquisition / Fuel Use, 'FUEL' for Fuel Taxes, 'RFS' for Renewable Fuel Standard / Mandate, 'OTHER' for Other, 'AIRQEMISSIONS' for Air Quality / Emissions, and 'CCEINIT' for Climate Change / Energy Initiatives
	RegulationType *string `queryParam:"style=form,explode=true,name=regulation_type"`
	// Search by the technology type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'BIOD' for Biodiesel, 'ETH' for Ethanol, 'NG' for Natural Gas, 'LPG' for Propane (LPG), 'HY' for Hydrogen Fuel Cells, 'EFFEC' for Fuel Economy / Efficiency, 'IR' for Idle Reduction, 'ELEC' for EVs, 'HEV' for HEVs, 'PHEV' for PHEVs, 'OTHER' for Other, 'AFTMKTCONV' for Aftermarket Conversions, and 'NEVS' for NEVs
	Technology *string `queryParam:"style=form,explode=true,name=technology"`
	// Search by the user type. A single type, or a comma-separate list of multiple types, may be given. Values and what they stand for are as follows: 'FLEET' for Private Business, 'GOV' for Government Entity, 'IND' for Personal Vehicle Owner or Driver, 'STATION' for Alternative Fuel Infrastructure Operator, 'AFP' for Alternative Fuel Producer, 'PURCH' for Alternative Fuel Purchaser, 'MAN' for Alternative Fuel Vehicle (AFV) Manufacturer or Retrofitter, and 'OTHER' for Other
	UserType *string `queryParam:"style=form,explode=true,name=user_type"`
}

type TransportationIncentivesLawsRequest struct {
	PathParams  TransportationIncentivesLawsPathParams
	QueryParams TransportationIncentivesLawsQueryParams
}

type TransportationIncentivesLawsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
