// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRepositoriesWorkspaceSecurity struct {
	APIKey *string             `security:"scheme,type=apiKey,subtype=header,name=Authorization"`
	Basic  *shared.SchemeBasic `security:"scheme,type=http,subtype=basic"`
	Oauth2 *string             `security:"scheme,type=oauth2,name=Authorization"`
}

// GetRepositoriesWorkspaceRoleEnum -
// Filters the result based on the authenticated user's role on each repository.
//
// * **member**: returns repositories to which the user has explicit read access
// * **contributor**: returns repositories to which the user has explicit write access
// * **admin**: returns repositories to which the user has explicit administrator access
// * **owner**: returns all repositories owned by the current user
type GetRepositoriesWorkspaceRoleEnum string

const (
	GetRepositoriesWorkspaceRoleEnumAdmin       GetRepositoriesWorkspaceRoleEnum = "admin"
	GetRepositoriesWorkspaceRoleEnumContributor GetRepositoriesWorkspaceRoleEnum = "contributor"
	GetRepositoriesWorkspaceRoleEnumMember      GetRepositoriesWorkspaceRoleEnum = "member"
	GetRepositoriesWorkspaceRoleEnumOwner       GetRepositoriesWorkspaceRoleEnum = "owner"
)

func (e *GetRepositoriesWorkspaceRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "admin":
		fallthrough
	case "contributor":
		fallthrough
	case "member":
		fallthrough
	case "owner":
		*e = GetRepositoriesWorkspaceRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRepositoriesWorkspaceRoleEnum: %s", s)
	}
}

type GetRepositoriesWorkspaceRequest struct {
	// Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	//
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// Filters the result based on the authenticated user's role on each repository.
	//
	// * **member**: returns repositories to which the user has explicit read access
	// * **contributor**: returns repositories to which the user has explicit write access
	// * **admin**: returns repositories to which the user has explicit administrator access
	// * **owner**: returns all repositories owned by the current user
	//
	Role *GetRepositoriesWorkspaceRoleEnum `queryParam:"style=form,explode=true,name=role"`
	// Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// This can either be the workspace ID (slug) or the workspace UUID
	// surrounded by curly-braces, for example: `{workspace UUID}`.
	//
	Workspace string `pathParam:"style=simple,explode=false,name=workspace"`
}

type GetRepositoriesWorkspaceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// If the specified account does not exist.
	Error map[string]interface{}
	// The repositories owned by the specified account.
	PaginatedRepositories *shared.PaginatedRepositories
}
