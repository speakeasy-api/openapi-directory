/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * All official records and reports filed by or delivered to the FEC.
 *
 * @remarks
 *
 *  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.
 */
export class Filings {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   *
   * All official records and reports filed by or delivered to the FEC.
   *
   * Note: because the filings data includes many records, counts for large
   * result sets are approximate; you will want to page through the records until no records are returned.
   *
   */
  getCandidateCandidateIdFilings(
    req: operations.GetCandidateCandidateIdFilingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCandidateCandidateIdFilingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCandidateCandidateIdFilingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/candidate/{candidate_id}/filings/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCandidateCandidateIdFilingsResponse =
        new operations.GetCandidateCandidateIdFilingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filingsPage = utils.objectToClass(
              httpRes?.data,
              shared.FilingsPage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *
   * All official records and reports filed by or delivered to the FEC.
   *
   * Note: because the filings data includes many records, counts for large
   * result sets are approximate; you will want to page through the records until no records are returned.
   *
   */
  getCommitteeCommitteeIdFilings(
    req: operations.GetCommitteeCommitteeIdFilingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCommitteeCommitteeIdFilingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCommitteeCommitteeIdFilingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/committee/{committee_id}/filings/",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCommitteeCommitteeIdFilingsResponse =
        new operations.GetCommitteeCommitteeIdFilingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filingsPage = utils.objectToClass(
              httpRes?.data,
              shared.FilingsPage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *
   * All official records and reports filed by or delivered to the FEC.
   *
   * Note: because the filings data includes many records, counts for large
   * result sets are approximate; you will want to page through the records until no records are returned.
   *
   */
  getFilings(
    req: operations.GetFilingsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFilingsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetFilingsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/filings/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetFilingsResponse =
        new operations.GetFilingsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.filingsPage = utils.objectToClass(
              httpRes?.data,
              shared.FilingsPage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *
   * The Operations log contains details of each report loaded into the database. It is primarily
   * used as status check to determine when all of the data processes, from initial entry through
   * review are complete.
   *
   */
  getOperationsLog(
    req: operations.GetOperationsLogRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOperationsLogResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOperationsLogRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/operations-log/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOperationsLogResponse =
        new operations.GetOperationsLogResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operationsLogPage = utils.objectToClass(
              httpRes?.data,
              shared.OperationsLogPage
            );
          }
          break;
      }

      return res;
    });
  }
}
