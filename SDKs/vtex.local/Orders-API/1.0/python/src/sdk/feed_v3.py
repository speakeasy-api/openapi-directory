"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FeedV3:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def commititemfeedorderstatus(self, request: operations.CommititemfeedorderstatusRequest) -> operations.CommititemfeedorderstatusResponse:
        r"""Commit feed items
        Commit items in the [feed](https://developers.vtex.com/docs/guides/orders-feed) queue.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/feed'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "commititemfeedorderstatus_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CommititemfeedorderstatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.commititemfeedorderstatus_200_text_plain_object = http_res.content

        return res

    def feed_configuration(self, request: operations.FeedConfigurationRequest) -> operations.FeedConfigurationResponse:
        r"""Create or update feed configuration
        The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration)
        
        
        There are two types of filtering that can be used. The `FromWorkflow` type filters orders by status, whereas the `FromOrders` type uses JSONata expressions to filter orders according to any property in the orders JSON document. This enables stores to filter delivered orders and orders in which products have been added or removed, for example. To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [Test JSONata expression](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata) endpoint.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/feed/config'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "feed_configuration_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FeedConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def feed_configuration_delete(self, request: operations.FeedConfigurationDeleteRequest) -> operations.FeedConfigurationDeleteResponse:
        r"""Delete feed configuration
        Deletes the configuration set up in [Feed v3](https://developers.vtex.com/docs/guides/orders-feed).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/feed/config'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FeedConfigurationDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_feed_configuration(self, request: operations.GetFeedConfigurationRequest) -> operations.GetFeedConfigurationResponse:
        r"""Get feed configuration
        The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration).
        
        > ðŸ“˜ Onboarding guide 
        >
        > Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/feed/config'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFeedConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFeedConfiguration200ApplicationJSON])
                res.get_feed_configuration_200_application_json_object = out

        return res

    def getfeedorderstatus1(self, request: operations.Getfeedorderstatus1Request) -> operations.Getfeedorderstatus1Response:
        r"""Retrieve feed items
        Retrieve items from [feed](https://developers.vtex.com/docs/guides/orders-feed) queue. 
        
        The event will be removed if the message `send retry` is equal to, or greater than the maximum retention period.
        
        > This API will return `404 Not Found` if there is no [Feed Configuration](https://developers.vtex.com/docs/guides/orders-feed) available for the given X-VTEX-API-AppKey.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/feed'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.Getfeedorderstatus1Request, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Getfeedorderstatus1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Getfeedorderstatus]])
                res.getfeedorderstatuses = out

        return res

    def test_jso_nata_expression(self, request: operations.TestJSONataExpressionRequest) -> operations.TestJSONataExpressionResponse:
        r"""Test JSONata expression
        This endpoint allows you to test a JSON document with a JSONata expression, returning `true` if the document meets the criteria posed in the expression, or `false` if it does not.
        
        
        Since JSONata expressions can be used to filter order updates in the [Orders API feed and hook](https://developers.vtex.com/docs/guides/orders-feed), this endpoint can be used to test an expression's results before configuring the [feed or hook](https://developers.vtex.com/docs/guides/orders-feed).
        
        
        Learn more about how to use JSONata expressions, in the [JSONata documentation](https://docs.jsonata.org/overview.html).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/orders/expressions/jsonata'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "test_jso_nata_expression", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TestJSONataExpressionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    