/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class GetTokenHoldersResponseHolders extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount?: number;
}

/**
 * An object containing all of the addresses holding a token
 */
export class GetTokenHoldersResponse extends SpeakeasyBase {
  /**
   * Whether the tokesn are aggregatable
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aggregationPolicy" })
  aggregationPolicy?: string;

  /**
   * How many decimal points the token is divisble to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "divibility" })
  divibility?: number;

  @SpeakeasyMetadata({ elemType: GetTokenHoldersResponseHolders })
  @Expose({ name: "holders" })
  @Type(() => GetTokenHoldersResponseHolders)
  holders?: GetTokenHoldersResponseHolders[];

  /**
   * Whether new issuances of this token are locked
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lockStatus" })
  lockStatus?: boolean;

  /**
   * A UTXO of this token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "someUtxo" })
  someUtxo?: string;

  /**
   * TokenId of the token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenId" })
  tokenId?: string;
}
