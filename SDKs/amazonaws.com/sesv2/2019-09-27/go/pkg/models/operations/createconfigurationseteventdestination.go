// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateConfigurationSetEventDestinationRequestBodyEventDestination - An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
type CreateConfigurationSetEventDestinationRequestBodyEventDestination struct {
	CloudWatchDestination      *shared.CloudWatchDestination      `json:"CloudWatchDestination,omitempty"`
	Enabled                    *bool                              `json:"Enabled,omitempty"`
	KinesisFirehoseDestination *shared.KinesisFirehoseDestination `json:"KinesisFirehoseDestination,omitempty"`
	MatchingEventTypes         []shared.EventTypeEnum             `json:"MatchingEventTypes,omitempty"`
	PinpointDestination        *shared.PinpointDestination        `json:"PinpointDestination,omitempty"`
	SnsDestination             *shared.SnsDestination             `json:"SnsDestination,omitempty"`
}

type CreateConfigurationSetEventDestinationRequestBody struct {
	// An object that defines the event destination. Specifically, it defines which services receive events from emails sent using the configuration set that the event destination is associated with. Also defines the types of events that are sent to the event destination.
	EventDestination CreateConfigurationSetEventDestinationRequestBodyEventDestination `json:"EventDestination"`
	// <p>The name of an event destination.</p> <p> <i>Events</i> include message sends, deliveries, opens, clicks, bounces, and complaints. <i>Event destinations</i> are places that you can send information about these events to. For example, you can send event data to Amazon SNS to receive notifications when you receive bounces or complaints, or you can use Amazon Kinesis Data Firehose to stream data to Amazon S3 for long-term storage.</p>
	EventDestinationName string `json:"EventDestinationName"`
}

type CreateConfigurationSetEventDestinationRequest struct {
	// The name of the configuration set .
	ConfigurationSetName string                                            `pathParam:"style=simple,explode=false,name=ConfigurationSetName"`
	RequestBody          CreateConfigurationSetEventDestinationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type CreateConfigurationSetEventDestinationResponse struct {
	// AlreadyExistsException
	AlreadyExistsException interface{}
	// BadRequestException
	BadRequestException interface{}
	ContentType         string
	// Success
	CreateConfigurationSetEventDestinationResponse map[string]interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
