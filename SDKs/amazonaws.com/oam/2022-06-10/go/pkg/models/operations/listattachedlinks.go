// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type ListAttachedLinksQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

type ListAttachedLinksHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListAttachedLinksRequestBody struct {
	// Limits the number of returned links to the specified number.
	MaxResults *int64 `json:"MaxResults,omitempty"`
	// The token for the next set of items to return. You received this token from a previous call.
	NextToken *string `json:"NextToken,omitempty"`
	// The ARN of the sink that you want to retrieve links for.
	SinkIdentifier string `json:"SinkIdentifier"`
}

type ListAttachedLinksRequest struct {
	QueryParams ListAttachedLinksQueryParams
	Headers     ListAttachedLinksHeaders
	Request     ListAttachedLinksRequestBody `request:"mediaType=application/json"`
}

type ListAttachedLinksResponse struct {
	ContentType string
	// InternalServiceFault
	InternalServiceFault interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// Success
	ListAttachedLinksOutput *shared.ListAttachedLinksOutput
	// MissingRequiredParameterException
	MissingRequiredParameterException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
