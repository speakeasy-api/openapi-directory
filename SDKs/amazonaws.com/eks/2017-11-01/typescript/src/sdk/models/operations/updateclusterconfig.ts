/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * An object representing the logging configuration for resources in your cluster.
 */
export class UpdateClusterConfigRequestBodyLogging extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.LogSetup })
  @Expose({ name: "clusterLogging" })
  @Type(() => shared.LogSetup)
  clusterLogging?: shared.LogSetup[];
}

/**
 * An object representing the VPC configuration to use for an Amazon EKS cluster.
 */
export class UpdateClusterConfigRequestBodyResourcesVpcConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "endpointPrivateAccess" })
  endpointPrivateAccess?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "endpointPublicAccess" })
  endpointPublicAccess?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "publicAccessCidrs" })
  publicAccessCidrs?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "securityGroupIds" })
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "subnetIds" })
  subnetIds?: string[];
}

export class UpdateClusterConfigRequestBody extends SpeakeasyBase {
  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientRequestToken" })
  clientRequestToken?: string;

  /**
   * An object representing the logging configuration for resources in your cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logging" })
  @Type(() => UpdateClusterConfigRequestBodyLogging)
  logging?: UpdateClusterConfigRequestBodyLogging;

  /**
   * An object representing the VPC configuration to use for an Amazon EKS cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resourcesVpcConfig" })
  @Type(() => UpdateClusterConfigRequestBodyResourcesVpcConfig)
  resourcesVpcConfig?: UpdateClusterConfigRequestBodyResourcesVpcConfig;
}

export class UpdateClusterConfigRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateClusterConfigRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the Amazon EKS cluster to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=name",
  })
  name: string;
}

export class UpdateClusterConfigResponse extends SpeakeasyBase {
  /**
   * ClientException
   */
  @SpeakeasyMetadata()
  clientException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * ResourceInUseException
   */
  @SpeakeasyMetadata()
  resourceInUseException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServerException
   */
  @SpeakeasyMetadata()
  serverException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateClusterConfigResponse?: shared.UpdateClusterConfigResponse;
}
