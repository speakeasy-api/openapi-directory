"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrganizationFullPlan:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    private_repos: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private_repos') }})  
    space: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('space') }})  
    filled_seats: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filled_seats'), 'exclude': lambda f: f is None }})  
    seats: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seats'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrganizationFull:
    r"""Organization Full"""
    
    avatar_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avatar_url') }})  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    followers: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers') }})  
    following: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following') }})  
    has_organization_projects: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_organization_projects') }})  
    has_repository_projects: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_repository_projects') }})  
    hooks_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hooks_url') }})  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    issues_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues_url') }})  
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})  
    members_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_url') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    public_gists: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_gists') }})  
    public_members_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_members_url') }})  
    public_repos: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_repos') }})  
    repos_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repos_url') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    advanced_security_enabled_for_new_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advanced_security_enabled_for_new_repositories'), 'exclude': lambda f: f is None }})
    r"""Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
    
    This field is only visible to organization owners or members of a team with the security manager role.
    """  
    billing_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_email'), 'exclude': lambda f: f is None }})  
    blog: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blog'), 'exclude': lambda f: f is None }})  
    collaborators: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborators'), 'exclude': lambda f: f is None }})  
    company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})  
    default_repository_permission: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_repository_permission'), 'exclude': lambda f: f is None }})  
    dependabot_alerts_enabled_for_new_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependabot_alerts_enabled_for_new_repositories'), 'exclude': lambda f: f is None }})
    r"""Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
    this organization.
    
    This field is only visible to organization owners or members of a team with the security manager role.
    """  
    dependabot_security_updates_enabled_for_new_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependabot_security_updates_enabled_for_new_repositories'), 'exclude': lambda f: f is None }})
    r"""Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
    to this organization.
    
    This field is only visible to organization owners or members of a team with the security manager role.
    """  
    dependency_graph_enabled_for_new_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependency_graph_enabled_for_new_repositories'), 'exclude': lambda f: f is None }})
    r"""Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
    organization.
    
    This field is only visible to organization owners or members of a team with the security manager role.
    """  
    disk_usage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disk_usage'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    is_verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_verified'), 'exclude': lambda f: f is None }})  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})  
    members_allowed_repository_creation_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_allowed_repository_creation_type'), 'exclude': lambda f: f is None }})  
    members_can_create_internal_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_create_internal_repositories'), 'exclude': lambda f: f is None }})  
    members_can_create_pages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_create_pages'), 'exclude': lambda f: f is None }})  
    members_can_create_private_pages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_create_private_pages'), 'exclude': lambda f: f is None }})  
    members_can_create_private_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_create_private_repositories'), 'exclude': lambda f: f is None }})  
    members_can_create_public_pages: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_create_public_pages'), 'exclude': lambda f: f is None }})  
    members_can_create_public_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_create_public_repositories'), 'exclude': lambda f: f is None }})  
    members_can_create_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_create_repositories'), 'exclude': lambda f: f is None }})  
    members_can_fork_private_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members_can_fork_private_repositories'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    owned_private_repos: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owned_private_repos'), 'exclude': lambda f: f is None }})  
    plan: Optional[OrganizationFullPlan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plan'), 'exclude': lambda f: f is None }})  
    private_gists: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private_gists'), 'exclude': lambda f: f is None }})  
    secret_scanning_enabled_for_new_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_scanning_enabled_for_new_repositories'), 'exclude': lambda f: f is None }})
    r"""Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
    organization.
    
    This field is only visible to organization owners or members of a team with the security manager role.
    """  
    secret_scanning_push_protection_custom_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_scanning_push_protection_custom_link'), 'exclude': lambda f: f is None }})
    r"""An optional URL string to display to contributors who are blocked from pushing a secret."""  
    secret_scanning_push_protection_custom_link_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_scanning_push_protection_custom_link_enabled'), 'exclude': lambda f: f is None }})
    r"""Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection."""  
    secret_scanning_push_protection_enabled_for_new_repositories: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret_scanning_push_protection_enabled_for_new_repositories'), 'exclude': lambda f: f is None }})
    r"""Whether secret scanning push protection is automatically enabled for new repositories and repositories
    transferred to this organization.
    
    This field is only visible to organization owners or members of a team with the security manager role.
    """  
    total_private_repos: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_private_repos'), 'exclude': lambda f: f is None }})  
    twitter_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twitter_username'), 'exclude': lambda f: f is None }})  
    two_factor_requirement_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('two_factor_requirement_enabled'), 'exclude': lambda f: f is None }})  
    web_commit_signoff_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('web_commit_signoff_required'), 'exclude': lambda f: f is None }})  
    