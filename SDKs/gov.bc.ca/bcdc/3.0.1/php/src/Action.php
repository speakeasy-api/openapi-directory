<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Action 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get the activity stream of an organization
     * 
     * Return an organization's activity stream
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListResponse
     */
	public function getActionOrganizationActivityList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_activity_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the activity stream of an organization, HTML format
     * 
     * Return an organization's activity stream as HTML
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListHtmlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListHtmlResponse
     */
	public function getActionOrganizationActivityListHtml(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListHtmlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListHtmlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_activity_list_html');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListHtmlRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationActivityListHtmlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get names of organizations that match a query string
     * 
     * Return a list of organization names that contain a string
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationAutocompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationAutocompleteResponse
     */
	public function getActionOrganizationAutocomplete(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationAutocompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationAutocompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_autocomplete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationAutocompleteRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationAutocompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get number of followers of an organization
     * 
     * Return the number of followers of an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerCountResponse
     */
	public function getActionOrganizationFollowerCount(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_follower_count');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerCountRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get users following an organization
     * 
     * Return a list of users that are following a given organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerListResponse
     */
	public function getActionOrganizationFollowerList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_follower_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationFollowerListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get names of all organizations
     * 
     * Returns the names of all indexed organizations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListResponse
     */
	public function getActionOrganizationList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get organizations that a user has a given permission for
     * 
     * Return the organizations that the user has a given permission for
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListForUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListForUserResponse
     */
	public function getActionOrganizationListForUser(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListForUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListForUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_list_for_user');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListForUserRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationListForUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get organization revisions
     * 
     * Return an organization's revisions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationRevisionListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationRevisionListResponse
     */
	public function getActionOrganizationRevisionList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationRevisionListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationRevisionListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_revision_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationRevisionListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationRevisionListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get details of a specific organization
     * 
     * Return the details of an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationShowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationShowResponse
     */
	public function getActionOrganizationShow(
        \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationShowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationShowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/organization_show');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationShowRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionOrganizationShowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the activity stream of a package (dataset)
     * 
     * Returns a package's activity stream
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListResponse
     */
	public function getActionPackageActivityList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_activity_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the activity stream of a package (dataset), HTML format
     * 
     * The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn't have any header or footer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListHtmlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListHtmlResponse
     */
	public function getActionPackageActivityListHtml(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListHtmlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListHtmlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_activity_list_html');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListHtmlRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageActivityListHtmlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find packages (datasets) matching a query
     * 
     * Return a list of datasets that match a string
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageAutocompleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageAutocompleteResponse
     */
	public function getActionPackageAutocomplete(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageAutocompleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageAutocompleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_autocomplete');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageAutocompleteRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageAutocompleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a list of all packages (datasets)
     * 
     * Returns the names of all indexed packages (datasets)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageListResponse
     */
	public function getActionPackageList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get package (dataset) relationships
     * 
     * Return a dataset's relationships
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRelationshipsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRelationshipsListResponse
     */
	public function getActionPackageRelationshipsList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRelationshipsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRelationshipsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_relationships_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageRelationshipsListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRelationshipsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get list of revisions for a package (dataset)
     * 
     * Return a dataset's revision as a list of dictionaries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRevisionListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRevisionListResponse
     */
	public function getActionPackageRevisionList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRevisionListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRevisionListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_revision_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageRevisionListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageRevisionListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find packages (datasets) matching query terms
     * 
     * Searches for packages (datasets) matching the specified query terms
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageSearchResponse
     */
	public function getActionPackageSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageSearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get metadata about one specific package (dataset)
     * 
     * Returns metadata about the package (dataset) corresponding to the specified unique name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionPackageShowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionPackageShowResponse
     */
	public function getActionPackageShow(
        \OpenAPI\OpenAPI\Models\Operations\GetActionPackageShowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionPackageShowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/package_show');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionPackageShowRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionPackageShowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets items related to a package (dataset)
     * 
     * Returns a dataset's related items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionRelatedListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionRelatedListResponse
     */
	public function getActionRelatedList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionRelatedListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionRelatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/related_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionRelatedListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionRelatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Find resources
     * 
     * Returns a dictionary with two fields ``count`` and ``results``.             The ``count`` field contains the total number of Resources                found without the limit or query parameters having an effect.             The ``results`` field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form ``{field}:{term}`` or a list of strings, each of the             same form. Within each string, ``{field}`` is a field or extra             field on the Resource domain object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionResourceSearchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionResourceSearchResponse
     */
	public function getActionResourceSearch(
        \OpenAPI\OpenAPI\Models\Operations\GetActionResourceSearchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionResourceSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/resource_search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionResourceSearchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionResourceSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get metadata for a specific resource
     * 
     * Return the metadata of a resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionResourceShowRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionResourceShowResponse
     */
	public function getActionResourceShow(
        \OpenAPI\OpenAPI\Models\Operations\GetActionResourceShowRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionResourceShowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/resource_show');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionResourceShowRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionResourceShowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get the site status
     * 
     * Returns the site status
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionStatusShowResponse
     */
	public function getActionStatusShow(
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionStatusShowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/status_show');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionStatusShowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a list of tags
     * 
     * Returns the names of all indexed tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetActionTagListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetActionTagListResponse
     */
	public function getActionTagList(
        \OpenAPI\OpenAPI\Models\Operations\GetActionTagListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetActionTagListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/action/tag_list');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetActionTagListRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetActionTagListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}