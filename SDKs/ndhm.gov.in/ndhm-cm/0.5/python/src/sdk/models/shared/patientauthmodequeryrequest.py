"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import patientauthpurpose_enum as shared_patientauthpurpose_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils

class PatientAuthModeQueryRequestQueryRequesterTypeEnum(str, Enum):
    HIP = 'HIP'
    HIU = 'HIU'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientAuthModeQueryRequestQueryRequester:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    type: PatientAuthModeQueryRequestQueryRequesterTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientAuthModeQueryRequestQuery:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    purpose: shared_patientauthpurpose_enum.PatientAuthPurposeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose') }})
    r"""what is the purpose of user auth"""  
    requester: PatientAuthModeQueryRequestQueryRequester = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requester') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientAuthModeQueryRequest:
    
    query: PatientAuthModeQueryRequestQuery = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query') }})  
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})
    r"""a nonce, unique for each HTTP request"""  
    timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ"""  
    