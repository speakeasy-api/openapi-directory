"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import loadbalancerbackend as shared_loadbalancerbackend
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LoadBalancerInfoBackendTypeEnum(str, Enum):
    r"""Type of load balancer's backend configuration."""
    BACKEND_TYPE_UNSPECIFIED = 'BACKEND_TYPE_UNSPECIFIED'
    BACKEND_SERVICE = 'BACKEND_SERVICE'
    TARGET_POOL = 'TARGET_POOL'
    TARGET_INSTANCE = 'TARGET_INSTANCE'

class LoadBalancerInfoLoadBalancerTypeEnum(str, Enum):
    r"""Type of the load balancer."""
    LOAD_BALANCER_TYPE_UNSPECIFIED = 'LOAD_BALANCER_TYPE_UNSPECIFIED'
    INTERNAL_TCP_UDP = 'INTERNAL_TCP_UDP'
    NETWORK_TCP_UDP = 'NETWORK_TCP_UDP'
    HTTP_PROXY = 'HTTP_PROXY'
    TCP_PROXY = 'TCP_PROXY'
    SSL_PROXY = 'SSL_PROXY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoadBalancerInfo:
    r"""For display only. Metadata associated with a load balancer."""
    
    backends: Optional[list[shared_loadbalancerbackend.LoadBalancerBackend]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backends'), 'exclude': lambda f: f is None }})
    r"""Information for the loadbalancer backends."""  
    backend_type: Optional[LoadBalancerInfoBackendTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendType'), 'exclude': lambda f: f is None }})
    r"""Type of load balancer's backend configuration."""  
    backend_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backendUri'), 'exclude': lambda f: f is None }})
    r"""Backend configuration URI."""  
    health_check_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('healthCheckUri'), 'exclude': lambda f: f is None }})
    r"""URI of the health check for the load balancer."""  
    load_balancer_type: Optional[LoadBalancerInfoLoadBalancerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loadBalancerType'), 'exclude': lambda f: f is None }})
    r"""Type of the load balancer."""  
    