/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Metadata } from "./metadata";
import { Source } from "./source";
import { Expose, Type } from "class-transformer";

/**
 * `Ruleset` is an immutable copy of `Source` with a globally unique identifier and a creation time.
 */
export class Ruleset extends SpeakeasyBase {
  /**
   * Output only. Time the `Ruleset` was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * Metadata for a Ruleset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => Metadata)
  metadata?: Metadata;

  /**
   * Output only. Name of the `Ruleset`. The ruleset_id is auto generated by the service. Format: `projects/{project_id}/rulesets/{ruleset_id}`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * `Source` is one or more `File` messages comprising a logical set of rules.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => Source)
  source?: Source;
}

/**
 * `Ruleset` is an immutable copy of `Source` with a globally unique identifier and a creation time.
 */
export class RulesetInput extends SpeakeasyBase {
  /**
   * Metadata for a Ruleset.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => Metadata)
  metadata?: Metadata;

  /**
   * `Source` is one or more `File` messages comprising a logical set of rules.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => Source)
  source?: Source;
}
