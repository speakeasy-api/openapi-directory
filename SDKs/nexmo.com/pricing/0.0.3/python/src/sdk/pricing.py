"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Pricing:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def retrieve_prefix_pricing(self, request: operations.RetrievePrefixPricingRequest) -> operations.RetrievePrefixPricingResponse:
        r"""Retrieve outbound pricing for a specific dialing prefix.
        Retrieves the pricing information based on the dialing prefix.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrievePrefixPricingRequest, base_url, '/get-prefix-pricing/outbound/{type}', request)
        
        query_params = utils.get_query_params(operations.RetrievePrefixPricingRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrievePrefixPricingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricingCountriesResponse])
                res.pricing_countries_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrievePrefixPricing400ApplicationJSON])
                res.retrieve_prefix_pricing_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrievePrefixPricing401ApplicationJSON])
                res.retrieve_prefix_pricing_401_application_json_object = out
        elif http_res.status_code in [404, 429]:
            pass

        return res

    def retrieve_pricing_all_countries(self, request: operations.RetrievePricingAllCountriesRequest) -> operations.RetrievePricingAllCountriesResponse:
        r"""Retrieve outbound pricing for all countries.
        Retrieves the pricing information for all countries.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrievePricingAllCountriesRequest, base_url, '/get-full-pricing/outbound/{type}', request)
        
        query_params = utils.get_query_params(operations.RetrievePricingAllCountriesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrievePricingAllCountriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricingCountriesResponse])
                res.pricing_countries_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrievePricingAllCountries400ApplicationJSON])
                res.retrieve_pricing_all_countries_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrievePricingAllCountries401ApplicationJSON])
                res.retrieve_pricing_all_countries_401_application_json_object = out
        elif http_res.status_code in [404, 429]:
            pass

        return res

    def retrieve_pricing_country(self, request: operations.RetrievePricingCountryRequest) -> operations.RetrievePricingCountryResponse:
        r"""Retrieve outbound pricing for a specific country.
        Retrieves the pricing information based on the specified country.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrievePricingCountryRequest, base_url, '/get-pricing/outbound/{type}', request)
        
        query_params = utils.get_query_params(operations.RetrievePricingCountryRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrievePricingCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricingCountryResponse])
                res.pricing_country_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrievePricingCountry400ApplicationJSON])
                res.retrieve_pricing_country_400_application_json_object = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrievePricingCountry401ApplicationJSON])
                res.retrieve_pricing_country_401_application_json_object = out
        elif http_res.status_code in [404, 429]:
            pass

        return res

    