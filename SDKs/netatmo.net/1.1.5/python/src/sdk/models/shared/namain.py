"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nadashboarddata as shared_nadashboarddata
from ..shared import naplace as shared_naplace
from ..shared import nastationmodule as shared_nastationmodule
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAMain:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_id'), 'exclude': lambda f: f is None }})  
    cipher_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cipher_id'), 'exclude': lambda f: f is None }})  
    co2_calibrating: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('co2_calibrating'), 'exclude': lambda f: f is None }})  
    dashboard_data: Optional[shared_nadashboarddata.NADashboardData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dashboard_data'), 'exclude': lambda f: f is None }})  
    data_type: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_type'), 'exclude': lambda f: f is None }})  
    date_setup: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_setup'), 'exclude': lambda f: f is None }})  
    favorite: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('favorite'), 'exclude': lambda f: f is None }})
    r"""true when the device is a user favorite and not owned by them"""  
    firmware: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})  
    last_setup: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_setup'), 'exclude': lambda f: f is None }})  
    last_status_store: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_status_store'), 'exclude': lambda f: f is None }})  
    last_upgrade: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_upgrade'), 'exclude': lambda f: f is None }})  
    module_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('module_name'), 'exclude': lambda f: f is None }})  
    modules: Optional[list[shared_nastationmodule.NAStationModule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modules'), 'exclude': lambda f: f is None }})  
    place: Optional[shared_naplace.NAPlace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('place'), 'exclude': lambda f: f is None }})  
    reachable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reachable'), 'exclude': lambda f: f is None }})
    r"""true when the station was seen by the Netatmo cloud within the last 4 hours"""  
    read_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('read_only'), 'exclude': lambda f: f is None }})
    r"""true when the user was invited to (or has favorited) a station, false when the user owns it"""  
    station_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('station_name'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Included in every device or module. It defines the type of the device/module. Its values are among :
    NAMain : for the base station
    NAModule1 : for the outdoor module
    NAModule4 : for the additionnal indoor module
    NAModule3 : for the rain gauge module
    NAPlug : for the thermostat relay/plug
    NATherm1 : for the thermostat module
    """  
    wifi_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifi_status'), 'exclude': lambda f: f is None }})
    r"""It contains the current wifi status. The different thresholds to take into account are
    RSSI_THRESHOLD_0 = 86 bad signal
    RSSI_THRESHOLD_1 = 71 middle quality signal
    RSSI_THRESHOLD_2 = 56 good signal
    """  
    