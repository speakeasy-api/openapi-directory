"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var classification_1 = require("./classification");
var classificationinclusion_1 = require("./classificationinclusion");
var credit_1 = require("./credit");
var episode_1 = require("./episode");
var image_1 = require("./image");
var mediaasset_1 = require("./mediaasset");
var shared = __importStar(require("./models/shared"));
var network_1 = require("./network");
var person_1 = require("./person");
var season_1 = require("./season");
var series_1 = require("./series");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://art19.com"];
/**
 * The ART19 Content API conforms to the [JSON:API specification](http://jsonapi.org).
 *
 * @remarks
 *
 * API requests **MUST** use the HTTP Accept header:
 *
 * `Accept: application/vnd.api+json`
 *
 * API requests **MUST** be authenticated using the HTTP Authorization header:
 *
 * `Authorization: Token token="your-token", credential="your-credential"`
 *
 * ## General Notes
 *
 * Some query parameters use unencoded [ and ] characters simply for readability. Defaults, examples, and
 * possible values are additionally rendered in double quotes for readability. In practice, query parameters should
 * not have quotes around the values (e.g., `foo=bar` is valid, not `foo="bar"`), and both query parameter keys
 * and values must be percent-encoded, per the requirements in [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
 *
 * ## Rate Limiting
 *
 * In order to provide a fair distribution of available resources, all API calls are subject to rate limits.
 * If you exceed the number of API calls per minute granted to your credential, a `429 Too Many Requests`
 * error response will be returned.
 *
 * In that case, a `Retry-After` header MAY be included in the response, describing the number of seconds
 * after which a request can be retried.
 *
 * If you run into a high number of 429 errors, please reach out to ART19 Support to adjust your rate limit.
 *
 * ### Example
 *
 * In the following example the request can be retried after waiting for 21 seconds:
 *
 *     HTTP/1.1 429 Too Many Requests
 *     Content-Type: text/html
 *     Retry-After: 21
 *
 * ## Pagination
 *
 * Requests to collection endpoints **SHOULD** provide pagination parameters.
 * Some endpoints **REQUIRE** pagination parameters to be provided.
 * Whenever pagination is provided, it **MUST** be valid.
 * Failing to provide pagination when it is required or providing wrong or incomplete pagination
 * always results in a `400 Bad Request` error response.
 *
 * The page numbering starts with `1` and the maximum page size (if not otherwise documented
 * on an endpoint) is `100`. Pagination **MUST NOT** be specified if requesting a list of IDs (using an `ids[]` parameter).
 *
 * Providing invalid values for page number or page size, as well as providing only a page number or only a page size,
 * is considered an error. Pagination is provided like this:
 *
 * `page[number]=1&page[size]=25`
 *
 * Responses conform to the [JSON:API specification's pagination section](https://jsonapi.org/format/#fetching-pagination)
 * by including pagination links. Your requested page size will be carried into the pagination links.
 *
 * ## Sorting
 *
 * Requests to collection endpoints usually accept a `sort` parameter. Please refer to the
 * [JSON:API Specification's sorting section](https://jsonapi.org/format/#fetching-sorting) for further details.
 *
 * ## Relationship Linking
 *
 * Currently, resources return all of their relationships, in no particular order, pursuant to how relationships
 * should be returned [according to the JSON:API specification](https://jsonapi.org/format/#document-resource-object-relationships). Consumers of this API
 * **MUST NOT** make assumptions about the order of these collections. Even though this data is not currently paginated, consumers **MUST** support
 * paginating relationships per the JSON:API specification if this data is important for their application.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.classification = new classification_1.Classification(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.classificationInclusion = new classificationinclusion_1.ClassificationInclusion(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.credit = new credit_1.Credit(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.episode = new episode_1.Episode(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.image = new image_1.Image(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mediaAsset = new mediaasset_1.MediaAsset(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.network = new network_1.Network(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.person = new person_1.Person(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.season = new season_1.Season(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.series = new series_1.Series(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
