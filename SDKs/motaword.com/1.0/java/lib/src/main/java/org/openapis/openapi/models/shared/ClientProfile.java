/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ClientProfile - Client profile
 */
public class ClientProfile {
    /**
     * the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("account_creation_date")
    public OffsetDateTime accountCreationDate;
    public ClientProfile withAccountCreationDate(OffsetDateTime accountCreationDate) {
        this.accountCreationDate = accountCreationDate;
        return this;
    }
    
    /**
     * total project count that this client sent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_project_count")
    public Double clientProjectCount;
    public ClientProfile withClientProjectCount(Double clientProjectCount) {
        this.clientProjectCount = clientProjectCount;
        return this;
    }
    
    /**
     * corporate name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corporate")
    public String corporate;
    public ClientProfile withCorporate(String corporate) {
        this.corporate = corporate;
        return this;
    }
    
    /**
     * corporate id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corporate_id")
    public Double corporateId;
    public ClientProfile withCorporateId(Double corporateId) {
        this.corporateId = corporateId;
        return this;
    }
    
    /**
     * total user count in a corporation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("corporate_user_count")
    public Double corporateUserCount;
    public ClientProfile withCorporateUserCount(Double corporateUserCount) {
        this.corporateUserCount = corporateUserCount;
        return this;
    }
    
    /**
     * the file extension for the files that usually this client sent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequent_file_extension")
    public String frequentFileExtension;
    public ClientProfile withFrequentFileExtension(String frequentFileExtension) {
        this.frequentFileExtension = frequentFileExtension;
        return this;
    }
    
    /**
     * frequent language pairs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequent_language_pairs")
    public String[] frequentLanguagePairs;
    public ClientProfile withFrequentLanguagePairs(String[] frequentLanguagePairs) {
        this.frequentLanguagePairs = frequentLanguagePairs;
        return this;
    }
    
    /**
     * full name of the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_name")
    public String fullName;
    public ClientProfile withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }
    
    /**
     * The answer for the question "Is there any growth for this corporate's spending". The values can be true, false or null if the corporate is oour client for less than 6 months
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("growth")
    public Boolean growth;
    public ClientProfile withGrowth(Boolean growth) {
        this.growth = growth;
        return this;
    }
    
    /**
     * the answer for the question "Is this client usually sent complex projects?"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_complex")
    public Boolean isComplex;
    public ClientProfile withIsComplex(Boolean isComplex) {
        this.isComplex = isComplex;
        return this;
    }
    
    /**
     * corporate's spending in twelve months
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_12_months_spending")
    public Float last12MonthsSpending;
    public ClientProfile withLast12MonthsSpending(Float last12MonthsSpending) {
        this.last12MonthsSpending = last12MonthsSpending;
        return this;
    }
    
    /**
     * the quote number for the last project of this client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_project")
    public Double lastProject;
    public ClientProfile withLastProject(Double lastProject) {
        this.lastProject = lastProject;
        return this;
    }
    
    /**
     * the creation date of the last project that is sent by this client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("last_project_time")
    public OffsetDateTime lastProjectTime;
    public ClientProfile withLastProjectTime(OffsetDateTime lastProjectTime) {
        this.lastProjectTime = lastProjectTime;
        return this;
    }
    
    /**
     * list of prooofreaders for the target languages of last project
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_proofreaders")
    public ProofreaderWithLanguage[] lastProofreaders;
    public ClientProfile withLastProofreaders(ProofreaderWithLanguage[] lastProofreaders) {
        this.lastProofreaders = lastProofreaders;
        return this;
    }
    
    /**
     * notes that is submited for this client and/or with her projects
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String[] notes;
    public ClientProfile withNotes(String[] notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * net promoter score info for this client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nps")
    public ClientProfileNps nps;
    public ClientProfile withNps(ClientProfileNps nps) {
        this.nps = nps;
        return this;
    }
    
    /**
     * rank of the user in all corporate users for project count. If the user is the most active user foor sending projects her rank is 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_rank_in_project_count")
    public Double userRankInProjectCount;
    public ClientProfile withUserRankInProjectCount(Double userRankInProjectCount) {
        this.userRankInProjectCount = userRankInProjectCount;
        return this;
    }
    
    /**
     * rank of the user in all corporate users for total spending. If the user is the most active user for spending her rank is 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_rank_in_spending")
    public Double userRankInSpending;
    public ClientProfile withUserRankInSpending(Double userRankInSpending) {
        this.userRankInSpending = userRankInSpending;
        return this;
    }
    
}
