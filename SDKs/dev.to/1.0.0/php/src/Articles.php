<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Articles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Publish article
     * 
     * This endpoint allows the client to create a new article.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Article $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateArticleResponse
     */
	public function createArticle(
        \OpenAPI\OpenAPI\Models\Shared\Article $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateArticleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateArticleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Published article by id
     * 
     * This endpoint allows the client to retrieve a single published article given its `id`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArticleByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArticleByIdResponse
     */
	public function getArticleById(
        \OpenAPI\OpenAPI\Models\Operations\GetArticleByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArticleByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/{id}', \OpenAPI\OpenAPI\Models\Operations\GetArticleByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArticleByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getArticleById200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Published article by path
     * 
     * This endpoint allows the client to retrieve a single published article given its `path`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArticleByPathRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArticleByPathResponse
     */
	public function getArticleByPath(
        \OpenAPI\OpenAPI\Models\Operations\GetArticleByPathRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArticleByPathResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/{username}/{slug}', \OpenAPI\OpenAPI\Models\Operations\GetArticleByPathRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArticleByPathResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getArticleByPath200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Published articles
     * 
     * This endpoint allows the client to retrieve a list of articles.
     * 
     * "Articles" are all the posts that users create on DEV that typically
     * show up in the feed. They can be a blog post, a discussion question,
     * a help thread etc. but is referred to as article within the code.
     * 
     * By default it will return featured, published articles ordered
     * by descending popularity.
     * 
     * It supports pagination, each page will contain `30` articles by default.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetArticlesResponse
     */
	public function getArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Published articles sorted by published date
     * 
     * This endpoint allows the client to retrieve a list of articles. ordered by descending publish date.
     * 
     * It supports pagination, each page will contain 30 articles by default.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLatestArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLatestArticlesResponse
     */
	public function getLatestArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetLatestArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLatestArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/latest');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLatestArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLatestArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Organization's Articles
     * 
     * This endpoint allows the client to retrieve a list of Articles belonging to the organization
     * 
     * It supports pagination, each page will contain `30` users by default.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrgArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrgArticlesResponse
     */
	public function getOrgArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrgArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrgArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/organizations/{username}/articles', \OpenAPI\OpenAPI\Models\Operations\GetOrgArticlesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrgArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrgArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * User's all articles
     * 
     * This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * It will return both published and unpublished articles with pagination.
     * 
     * Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.
     * 
     * By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesResponse
     */
	public function getUserAllArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me/all');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserAllArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * User's articles
     * 
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * Published articles will be in reverse chronological publication order.
     * 
     * It will return published articles with pagination. By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesResponse
     */
	public function getUserArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * User's published articles
     * 
     * This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * Published articles will be in reverse chronological publication order.
     * 
     * It will return published articles with pagination. By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesResponse
     */
	public function getUserPublishedArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me/published');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserPublishedArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * User's unpublished articles
     * 
     * This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * Unpublished articles will be in reverse chronological creation order.
     * 
     * It will return unpublished articles with pagination. By default a page will contain 30 articles.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesResponse
     */
	public function getUserUnpublishedArticles(
        \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/me/unpublished');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserUnpublishedArticlesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->articleIndices = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArticleIndex>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Unpublish an article
     * 
     * This endpoint allows the client to unpublish an article.
     * 
     * The user associated with the API key must have any 'admin' or 'moderator' role.
     * 
     * The article will be unpublished and will no longer be visible to the public. It will remain
     * in the database and will set back to draft status on the author's posts dashboard. Any
     * notifications associated with the article will be deleted. Any comments on the article
     * will remain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnpublishArticleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnpublishArticleResponse
     */
	public function unpublishArticle(
        \OpenAPI\OpenAPI\Models\Operations\UnpublishArticleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnpublishArticleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/{id}/unpublish', \OpenAPI\OpenAPI\Models\Operations\UnpublishArticleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UnpublishArticleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnpublishArticleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update an article by id
     * 
     * This endpoint allows the client to update an existing article.
     * 
     * "Articles" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArticleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArticleResponse
     */
	public function updateArticle(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArticleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArticleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/articles/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateArticleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "article", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArticleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
	
    /**
     * Articles with a video
     * 
     * This endpoint allows the client to retrieve a list of articles that are uploaded with a video.
     * 
     * It will only return published video articles ordered by descending popularity.
     * 
     * It supports pagination, each page will contain 24 articles by default.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VideosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VideosResponse
     */
	public function videos(
        \OpenAPI\OpenAPI\Models\Operations\VideosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/videos');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\VideosRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videoArticles = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\VideoArticle>', 'json');
            }
        }

        return $response;
    }
}