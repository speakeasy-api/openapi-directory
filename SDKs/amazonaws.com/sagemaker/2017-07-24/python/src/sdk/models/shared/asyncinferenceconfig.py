"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import asyncinferenceclientconfig as shared_asyncinferenceclientconfig
from ..shared import asyncinferenceoutputconfig as shared_asyncinferenceoutputconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AsyncInferenceConfig:
    r"""Specifies configuration for how an endpoint performs asynchronous inference."""
    
    output_config: shared_asyncinferenceoutputconfig.AsyncInferenceOutputConfig = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputConfig') }})  
    client_config: Optional[shared_asyncinferenceclientconfig.AsyncInferenceClientConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientConfig'), 'exclude': lambda f: f is None }})  
    