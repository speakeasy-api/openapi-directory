/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LanguageEnum } from "./languageenum";
import { Expose, Transform } from "class-transformer";

export enum SearchImageImageTypeEnum {
  Photo = "photo",
  Illustration = "illustration",
  Vector = "vector",
}

export enum SearchImageLicenseEnum {
  Commercial = "commercial",
  Editorial = "editorial",
  Enhanced = "enhanced",
}

/**
 * Show image results with horizontal or vertical orientation
 */
export enum SearchImageOrientationEnum {
  Horizontal = "horizontal",
  Vertical = "vertical",
}

/**
 * Show images that feature people of the specified age category
 */
export enum SearchImagePeopleAgeEnum {
  Infants = "infants",
  Children = "children",
  Teenagers = "teenagers",
  Twentys = "20s",
  Thirtys = "30s",
  Fortys = "40s",
  Fiftys = "50s",
  Sixtys = "60s",
  Older = "older",
}

export enum SearchImagePeopleEthnicityEnum {
  African = "african",
  AfricanAmerican = "african_american",
  Black = "black",
  Brazilian = "brazilian",
  Chinese = "chinese",
  Caucasian = "caucasian",
  EastAsian = "east_asian",
  Hispanic = "hispanic",
  Japanese = "japanese",
  MiddleEastern = "middle_eastern",
  NativeAmerican = "native_american",
  PacificIslander = "pacific_islander",
  SouthAsian = "south_asian",
  SoutheastAsian = "southeast_asian",
  Other = "other",
  NOTAfrican = "NOT african",
  NOTAfricanAmerican = "NOT african_american",
  NOTBlack = "NOT black",
  NOTBrazilian = "NOT brazilian",
  NOTChinese = "NOT chinese",
  NOTCaucasian = "NOT caucasian",
  NOTEastAsian = "NOT east_asian",
  NOTHispanic = "NOT hispanic",
  NOTJapanese = "NOT japanese",
  NOTMiddleEastern = "NOT middle_eastern",
  NOTNativeAmerican = "NOT native_american",
  NOTPacificIslander = "NOT pacific_islander",
  NOTSouthAsian = "NOT south_asian",
  NOTSoutheastAsian = "NOT southeast_asian",
  NOTOther = "NOT other",
}

/**
 * Show images with people of the specified gender
 */
export enum SearchImagePeopleGenderEnum {
  Male = "male",
  Female = "female",
  Both = "both",
}

/**
 * Sort by
 */
export enum SearchImageSortEnum {
  Newest = "newest",
  Popular = "popular",
  Relevance = "relevance",
  Random = "random",
}

/**
 * Amount of detail to render in the response
 */
export enum SearchImageViewEnum {
  Minimal = "minimal",
  Full = "full",
}

/**
 * Data required to search for an image
 */
export class SearchImage extends SpeakeasyBase {
  /**
   * Show images added on the specified date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  addedDate?: Date;

  /**
   * Show images added before the specified date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_date_end" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  addedDateEnd?: Date;

  /**
   * Show images added on or after the specified date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "added_date_start" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  addedDateStart?: Date;

  /**
   * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aspect_ratio" })
  aspectRatio?: number;

  /**
   * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aspect_ratio_max" })
  aspectRatioMax?: number;

  /**
   * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aspect_ratio_min" })
  aspectRatioMin?: number;

  /**
   * Show only authentic images
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentic" })
  authentic?: boolean;

  /**
   * Show images with the specified Shutterstock-defined category; specify a category name or ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  /**
   * Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color?: string;

  /**
   * Show images with the specified contributor names or IDs, allows multiple
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contributor" })
  contributor?: string[];

  /**
   * Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contributor_country" })
  contributorCountry?: any;

  /**
   * Fields to display in the response; see the documentation for the fields parameter in the overview section
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fields" })
  fields?: string;

  /**
   * (Deprecated; use height_from and height_to instead) Show images with the specified height
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  /**
   * Show images with the specified height or larger, in pixels
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height_from" })
  heightFrom?: number;

  /**
   * Show images with the specified height or smaller, in pixels
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height_to" })
  heightTo?: number;

  /**
   * Show images of the specified type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image_type" })
  imageType?: SearchImageImageTypeEnum[];

  /**
   * Hide results with potentially unsafe keywords
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keyword_safe_search" })
  keywordSafeSearch?: boolean;

  /**
   * Language code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: LanguageEnum;

  /**
   * Show only images with the specified license
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license" })
  license?: SearchImageLicenseEnum[];

  /**
   * Show image results with the specified model IDs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "model" })
  model?: string[];

  /**
   * Show image results with horizontal or vertical orientation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orientation" })
  orientation?: SearchImageOrientationEnum;

  /**
   * Page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  /**
   * Show images that feature people of the specified age category
   */
  @SpeakeasyMetadata()
  @Expose({ name: "people_age" })
  peopleAge?: SearchImagePeopleAgeEnum;

  /**
   * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
   */
  @SpeakeasyMetadata()
  @Expose({ name: "people_ethnicity" })
  peopleEthnicity?: SearchImagePeopleEthnicityEnum[];

  /**
   * Show images with people of the specified gender
   */
  @SpeakeasyMetadata()
  @Expose({ name: "people_gender" })
  peopleGender?: SearchImagePeopleGenderEnum;

  /**
   * Show images of people with a signed model release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "people_model_released" })
  peopleModelReleased?: boolean;

  /**
   * Show images with the specified number of people
   */
  @SpeakeasyMetadata()
  @Expose({ name: "people_number" })
  peopleNumber?: number;

  /**
   * Number of results per page
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage?: number;

  /**
   * One or more search terms separated by spaces; you can use NOT to filter out images that match a term
   */
  @SpeakeasyMetadata()
  @Expose({ name: "query" })
  query?: string;

  /**
   * Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "region" })
  region?: any;

  /**
   * Enable or disable safe search
   */
  @SpeakeasyMetadata()
  @Expose({ name: "safe" })
  safe?: boolean;

  /**
   * Sort by
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sort" })
  sort?: SearchImageSortEnum;

  /**
   * Spellcheck the search query and return results on suggested spellings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "spellcheck_query" })
  spellcheckQuery?: boolean;

  /**
   * Amount of detail to render in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "view" })
  view?: SearchImageViewEnum;

  /**
   * (Deprecated; use width_from and width_to instead) Show images with the specified width
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;

  /**
   * Show images with the specified width or larger, in pixels
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width_from" })
  widthFrom?: number;

  /**
   * Show images with the specified width or smaller, in pixels
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width_to" })
  widthTo?: number;
}
