"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FindMatchesParameters:
    r"""The parameters to configure the find matches transform."""
    
    accuracy_cost_tradeoff: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccuracyCostTradeoff'), 'exclude': lambda f: f is None }})  
    enforce_provided_labels: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnforceProvidedLabels'), 'exclude': lambda f: f is None }})  
    precision_recall_tradeoff: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrecisionRecallTradeoff'), 'exclude': lambda f: f is None }})  
    primary_key_column_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PrimaryKeyColumnName'), 'exclude': lambda f: f is None }})  
    