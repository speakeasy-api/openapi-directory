"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import sourceposition as shared_sourceposition
from ..shared import valuecount as shared_valuecount
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExpressionReport:
    r"""Describes where in a file an expression is found and what it was evaluated to over the course of its use."""
    
    children: Optional[list[ExpressionReport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children'), 'exclude': lambda f: f is None }})
    r"""Subexpressions"""  
    source_position: Optional[shared_sourceposition.SourcePosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourcePosition'), 'exclude': lambda f: f is None }})
    r"""Position in the `Source` content including its line, column number, and an index of the `File` in the `Source` message. Used for debug purposes."""  
    values: Optional[list[shared_valuecount.ValueCount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})
    r"""Values that this expression evaluated to when encountered."""  
    