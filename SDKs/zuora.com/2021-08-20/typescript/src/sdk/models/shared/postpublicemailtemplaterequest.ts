/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * Email CC type:
 *
 * @remarks
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 */
export enum POSTPublicEmailTemplateRequestCcEmailTypeEnum {
  BillToContact = "BillToContact",
  SoldToContact = "SoldToContact",
  SpecificEmails = "SpecificEmails",
  TenantAdmin = "TenantAdmin",
  BillToAndSoldToContacts = "BillToAndSoldToContacts",
  RunOwner = "RunOwner",
  AllContacts = "AllContacts",
  InvoiceOwnerBillToContact = "InvoiceOwnerBillToContact",
  InvoiceOwnerSoldToContact = "InvoiceOwnerSoldToContact",
  InvoiceOwnerBillToAndSoldToContacts = "InvoiceOwnerBillToAndSoldToContacts",
  InvoiceOwnerAllContacts = "InvoiceOwnerAllContacts",
}

/**
 * The endcode type of the email body.
 */
export enum POSTPublicEmailTemplateRequestEncodingTypeEnum {
  Utf8 = "UTF8",
  ShiftJIS = "Shift_JIS",
  Iso2022Jp = "ISO_2022_JP",
  EucJp = "EUC_JP",
  XSjis0213 = "X_SJIS_0213",
}

/**
 * The type of the email.
 */
export enum POSTPublicEmailTemplateRequestFromEmailTypeEnum {
  TenantEmail = "TenantEmail",
  SpecificEmail = "SpecificEmail",
}

/**
 * Type of the replyTo email.
 */
export enum POSTPublicEmailTemplateRequestReplyToEmailTypeEnum {
  TenantEmail = "TenantEmail",
  SpecificEmail = "SpecificEmail",
}

/**
 * Email receive type.
 *
 * @remarks
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
 */
export enum POSTPublicEmailTemplateRequestToEmailTypeEnum {
  BillToContact = "BillToContact",
  SoldToContact = "SoldToContact",
  SpecificEmails = "SpecificEmails",
  TenantAdmin = "TenantAdmin",
  BillToAndSoldToContacts = "BillToAndSoldToContacts",
  RunOwner = "RunOwner",
  AllContacts = "AllContacts",
  InvoiceOwnerBillToContact = "InvoiceOwnerBillToContact",
  InvoiceOwnerSoldToContact = "InvoiceOwnerSoldToContact",
  InvoiceOwnerBillToAndSoldToContacts = "InvoiceOwnerBillToAndSoldToContacts",
  InvoiceOwnerAllContacts = "InvoiceOwnerAllContacts",
}

/**
 * The request body to create an email template.
 */
export class POSTPublicEmailTemplateRequest extends SpeakeasyBase {
  /**
   * The status of the email template. The default value is true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * The email bcc address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bccEmailAddress" })
  bccEmailAddress?: string;

  /**
   * The email CC address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ccEmailAddress" })
  ccEmailAddress?: string;

  /**
   * Email CC type:
   *
   * @remarks
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, ccEmailType can be ALL values in enum.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, ccEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ccEmailType" })
  ccEmailType?: POSTPublicEmailTemplateRequestCcEmailTypeEnum;

  /**
   * The description of the email template.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The email body. You can add merge fields in the email object using angle brackets.
   *
   * @remarks
   * You can also embed HTML tags if 'isHtml' is true.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailBody" })
  emailBody: string;

  /**
   * The email subject. Users can add merge fields in the email subject using angle brackets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emailSubject" })
  emailSubject: string;

  /**
   * The endcode type of the email body.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encodingType" })
  encodingType?: POSTPublicEmailTemplateRequestEncodingTypeEnum;

  /**
   * The name of the event type.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTypeName" })
  eventTypeName: string;

  /**
   * The namespace of the `eventTypeName` field. The `eventTypeName` has the `user.notification` namespace by default.
   *
   * @remarks
   *
   * Note that if the `eventTypeName` is a standard event type, you must specify the `com.zuora.notification` namespace; otherwise, you will get an error.
   *
   * For example, if you want to create an email template on the `OrderActionProcessed` event, you must specify `com.zuora.notification` for this field.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventTypeNamespace" })
  eventTypeNamespace?: string;

  /**
   * If fromEmailType is SpecificEmail, this field is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromEmailAddress" })
  fromEmailAddress?: string;

  /**
   * The type of the email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromEmailType" })
  fromEmailType: POSTPublicEmailTemplateRequestFromEmailTypeEnum;

  /**
   * The name of the email sender.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fromName" })
  fromName?: string;

  /**
   * Specifies whether the style of email body is HTML. The default value is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isHtml" })
  isHtml?: boolean;

  /**
   * The name of the email template, a unique name in a tenant.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * If replyToEmailType is SpecificEmail, this field is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyToEmailAddress" })
  replyToEmailAddress?: string;

  /**
   * Type of the replyTo email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "replyToEmailType" })
  replyToEmailType?: POSTPublicEmailTemplateRequestReplyToEmailTypeEnum;

  /**
   * If toEmailType is SpecificEmail, this field is required.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toEmailAddress" })
  toEmailAddress?: string;

  /**
   * Email receive type.
   *
   * @remarks
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is associated to Account, toEmailType can be ALL values in enum.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is not associated to Account, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   * * When EventType is CDC/External and 'ReferenceObjectType' in EventType is EMPTY, toEmailType MUST be TenantAdmin, RunOwner or SpecificEmail.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "toEmailType" })
  toEmailType: POSTPublicEmailTemplateRequestToEmailTypeEnum;
}
