/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ListUsersRequest extends SpeakeasyBase {
  /**
   * Email to search for. Ignored if `username` is provided. Supports wildcard searches
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=email" })
  email?: string;

  /**
   * Access token required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-access-token",
  })
  evAccessToken: string;

  /**
   * API key required to make the API call.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=ev-api-key",
  })
  evApiKey: string;

  /**
   * Resource identifier for user's home directory. Does not support wildcard searches.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=homeResource",
  })
  homeResource?: string;

  /**
   * Comma separated list of relationships to include in response. Valid options are **homeResource** and **ownerAccount**.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include",
  })
  include?: string;

  /**
   * Number of users to return. Can be used for pagination.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Nickname to search for. Ignored if `username` is provided. Supports wildcard searches.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nickname",
  })
  nickname?: string;

  /**
   * Starting user record in the result set. Can be used for pagination.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Types of users to include the list. Ignored if `username` is provided. Valid options are **admin**, **master** and **user**
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=role" })
  role?: string;

  /**
   * Searches the nickname, email, role and homeDir fields for the provided value. Ignored if `username` is provided. Supports wildcard searches.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search",
  })
  search?: string;

  /**
   * Sort order or matching users. You can sort by multiple columns by separating sort options with a comma; the sort will be applied in the order specified. The sort order for each sort field is ascending unless it is prefixed with a minus (“-“), in which case it will be descending.
   *
   * @remarks
   *
   * Valid sort fields are: **nickname**, **username**, **email**, **homeDir** and **modified**
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Whether a user is locked. Ignored if `username` is provided. **0** means user is locked, **1** means user is not locked.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=status",
  })
  status?: number;

  /**
   * The username of the user you are looking for. Only entries with the same username as this will be in the list of results. Does not support wildcard searches.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=username",
  })
  username?: string;
}

export class ListUsersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful Operation
   */
  @SpeakeasyMetadata()
  userCollectionResponse?: shared.UserCollectionResponse;
}
