/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios from "axios";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://media.twilio.com"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * This is the public Twilio REST API.
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  createMediaProcessor(
    req: operations.CreateMediaProcessorCreateMediaProcessorRequest,
    security: operations.CreateMediaProcessorSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateMediaProcessorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateMediaProcessorCreateMediaProcessorRequest(req);
    }

    let baseURL: string = operations.CreateMediaProcessorServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/MediaProcessors";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateMediaProcessorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateMediaProcessorResponse =
        new operations.CreateMediaProcessorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1MediaProcessor = utils.objectToClass(
              httpRes?.data,
              shared.MediaV1MediaProcessor
            );
          }
          break;
      }

      return res;
    });
  }

  createPlayerStreamer(
    req: operations.CreatePlayerStreamerCreatePlayerStreamerRequest,
    security: operations.CreatePlayerStreamerSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePlayerStreamerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePlayerStreamerCreatePlayerStreamerRequest(req);
    }

    let baseURL: string = operations.CreatePlayerStreamerServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/PlayerStreamers";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreatePlayerStreamerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePlayerStreamerResponse =
        new operations.CreatePlayerStreamerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1PlayerStreamer = utils.objectToClass(
              httpRes?.data,
              shared.MediaV1PlayerStreamer
            );
          }
          break;
      }

      return res;
    });
  }

  createPlayerStreamerPlaybackGrant(
    req: operations.CreatePlayerStreamerPlaybackGrantRequest,
    security: operations.CreatePlayerStreamerPlaybackGrantSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePlayerStreamerPlaybackGrantResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePlayerStreamerPlaybackGrantRequest(req);
    }

    let baseURL: string =
      operations.CreatePlayerStreamerPlaybackGrantServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/PlayerStreamers/{Sid}/PlaybackGrant",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreatePlayerStreamerPlaybackGrantSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreatePlayerStreamerPlaybackGrantResponse =
        new operations.CreatePlayerStreamerPlaybackGrantResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1PlayerStreamerPlayerStreamerPlaybackGrant =
              utils.objectToClass(
                httpRes?.data,
                shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a MediaRecording resource identified by a SID.
   */
  deleteMediaRecording(
    req: operations.DeleteMediaRecordingRequest,
    security: operations.DeleteMediaRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteMediaRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteMediaRecordingRequest(req);
    }

    let baseURL: string = operations.DeleteMediaRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/MediaRecordings/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteMediaRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteMediaRecordingResponse =
        new operations.DeleteMediaRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single MediaProcessor resource identified by a SID.
   */
  fetchMediaProcessor(
    req: operations.FetchMediaProcessorRequest,
    security: operations.FetchMediaProcessorSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchMediaProcessorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchMediaProcessorRequest(req);
    }

    let baseURL: string = operations.FetchMediaProcessorServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/MediaProcessors/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchMediaProcessorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchMediaProcessorResponse =
        new operations.FetchMediaProcessorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1MediaProcessor = utils.objectToClass(
              httpRes?.data,
              shared.MediaV1MediaProcessor
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single MediaRecording resource identified by a SID.
   */
  fetchMediaRecording(
    req: operations.FetchMediaRecordingRequest,
    security: operations.FetchMediaRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchMediaRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchMediaRecordingRequest(req);
    }

    let baseURL: string = operations.FetchMediaRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/MediaRecordings/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchMediaRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchMediaRecordingResponse =
        new operations.FetchMediaRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1MediaRecording = utils.objectToClass(
              httpRes?.data,
              shared.MediaV1MediaRecording
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a single PlayerStreamer resource identified by a SID.
   */
  fetchPlayerStreamer(
    req: operations.FetchPlayerStreamerRequest,
    security: operations.FetchPlayerStreamerSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchPlayerStreamerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchPlayerStreamerRequest(req);
    }

    let baseURL: string = operations.FetchPlayerStreamerServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/PlayerStreamers/{Sid}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchPlayerStreamerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchPlayerStreamerResponse =
        new operations.FetchPlayerStreamerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1PlayerStreamer = utils.objectToClass(
              httpRes?.data,
              shared.MediaV1PlayerStreamer
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * **This method is not enabled.** Returns a single PlaybackGrant resource identified by a SID.
   */
  fetchPlayerStreamerPlaybackGrant(
    req: operations.FetchPlayerStreamerPlaybackGrantRequest,
    security: operations.FetchPlayerStreamerPlaybackGrantSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.FetchPlayerStreamerPlaybackGrantResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.FetchPlayerStreamerPlaybackGrantRequest(req);
    }

    let baseURL: string =
      operations.FetchPlayerStreamerPlaybackGrantServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/PlayerStreamers/{Sid}/PlaybackGrant",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.FetchPlayerStreamerPlaybackGrantSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.FetchPlayerStreamerPlaybackGrantResponse =
        new operations.FetchPlayerStreamerPlaybackGrantResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1PlayerStreamerPlayerStreamerPlaybackGrant =
              utils.objectToClass(
                httpRes?.data,
                shared.MediaV1PlayerStreamerPlayerStreamerPlaybackGrant
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of MediaProcessors.
   */
  listMediaProcessor(
    req: operations.ListMediaProcessorRequest,
    security: operations.ListMediaProcessorSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListMediaProcessorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListMediaProcessorRequest(req);
    }

    let baseURL: string = operations.ListMediaProcessorServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/MediaProcessors";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListMediaProcessorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListMediaProcessorResponse =
        new operations.ListMediaProcessorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMediaProcessorResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListMediaProcessorListMediaProcessorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of MediaRecordings.
   */
  listMediaRecording(
    req: operations.ListMediaRecordingRequest,
    security: operations.ListMediaRecordingSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListMediaRecordingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListMediaRecordingRequest(req);
    }

    let baseURL: string = operations.ListMediaRecordingServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/MediaRecordings";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListMediaRecordingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListMediaRecordingResponse =
        new operations.ListMediaRecordingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listMediaRecordingResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListMediaRecordingListMediaRecordingResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of PlayerStreamers.
   */
  listPlayerStreamer(
    req: operations.ListPlayerStreamerRequest,
    security: operations.ListPlayerStreamerSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPlayerStreamerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPlayerStreamerRequest(req);
    }

    let baseURL: string = operations.ListPlayerStreamerServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/v1/PlayerStreamers";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ListPlayerStreamerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPlayerStreamerResponse =
        new operations.ListPlayerStreamerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listPlayerStreamerResponse = utils.objectToClass(
              httpRes?.data,
              operations.ListPlayerStreamerListPlayerStreamerResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a MediaProcessor resource identified by a SID.
   */
  updateMediaProcessor(
    req: operations.UpdateMediaProcessorRequest,
    security: operations.UpdateMediaProcessorSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateMediaProcessorResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateMediaProcessorRequest(req);
    }

    let baseURL: string = operations.UpdateMediaProcessorServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/MediaProcessors/{Sid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateMediaProcessorSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateMediaProcessorResponse =
        new operations.UpdateMediaProcessorResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1MediaProcessor = utils.objectToClass(
              httpRes?.data,
              shared.MediaV1MediaProcessor
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a PlayerStreamer resource identified by a SID.
   */
  updatePlayerStreamer(
    req: operations.UpdatePlayerStreamerRequest,
    security: operations.UpdatePlayerStreamerSecurity,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePlayerStreamerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdatePlayerStreamerRequest(req);
    }

    let baseURL: string = operations.UpdatePlayerStreamerServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/v1/PlayerStreamers/{Sid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdatePlayerStreamerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdatePlayerStreamerResponse =
        new operations.UpdatePlayerStreamerResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.mediaV1PlayerStreamer = utils.objectToClass(
              httpRes?.data,
              shared.MediaV1PlayerStreamer
            );
          }
          break;
      }

      return res;
    });
  }
}
