"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import googlecloudwebriskv1computethreatlistdiffresponse as shared_googlecloudwebriskv1computethreatlistdiffresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class WebriskThreatListsComputeDiffSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class WebriskThreatListsComputeDiffConstraintsSupportedCompressionsEnum(str, Enum):
    COMPRESSION_TYPE_UNSPECIFIED = 'COMPRESSION_TYPE_UNSPECIFIED'
    RAW = 'RAW'
    RICE = 'RICE'

class WebriskThreatListsComputeDiffThreatTypeEnum(str, Enum):
    r"""Required. The threat list to update. Only a single ThreatType should be specified per request. If you want to handle multiple ThreatTypes, you must make one request per ThreatType."""
    THREAT_TYPE_UNSPECIFIED = 'THREAT_TYPE_UNSPECIFIED'
    MALWARE = 'MALWARE'
    SOCIAL_ENGINEERING = 'SOCIAL_ENGINEERING'
    UNWANTED_SOFTWARE = 'UNWANTED_SOFTWARE'
    SOCIAL_ENGINEERING_EXTENDED_COVERAGE = 'SOCIAL_ENGINEERING_EXTENDED_COVERAGE'


@dataclasses.dataclass
class WebriskThreatListsComputeDiffRequest:
    
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    constraints_max_database_entries: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'constraints.maxDatabaseEntries', 'style': 'form', 'explode': True }})
    r"""Sets the maximum number of entries that the client is willing to have in the local database. This should be a power of 2 between 2**10 and 2**20. If zero, no database size limit is set."""  
    constraints_max_diff_entries: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'constraints.maxDiffEntries', 'style': 'form', 'explode': True }})
    r"""The maximum size in number of entries. The diff will not contain more entries than this value. This should be a power of 2 between 2**10 and 2**20. If zero, no diff size limit is set."""  
    constraints_supported_compressions: Optional[list[WebriskThreatListsComputeDiffConstraintsSupportedCompressionsEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'constraints.supportedCompressions', 'style': 'form', 'explode': True }})
    r"""The compression types supported by the client."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    threat_type: Optional[WebriskThreatListsComputeDiffThreatTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'threatType', 'style': 'form', 'explode': True }})
    r"""Required. The threat list to update. Only a single ThreatType should be specified per request. If you want to handle multiple ThreatTypes, you must make one request per ThreatType."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    version_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'versionToken', 'style': 'form', 'explode': True }})
    r"""The current version token of the client for the requested list (the client version that was received from the last successful diff). If the client does not have a version token (this is the first time calling ComputeThreatListDiff), this may be left empty and a full database snapshot will be returned."""  
    

@dataclasses.dataclass
class WebriskThreatListsComputeDiffResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    google_cloud_webrisk_v1_compute_threat_list_diff_response: Optional[shared_googlecloudwebriskv1computethreatlistdiffresponse.GoogleCloudWebriskV1ComputeThreatListDiffResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    