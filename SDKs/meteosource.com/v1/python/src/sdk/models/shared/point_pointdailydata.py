"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import point_pointdailyafternoondata as shared_point_pointdailyafternoondata
from ..shared import point_pointdailyalldaydata as shared_point_pointdailyalldaydata
from ..shared import point_pointdailyastrodata as shared_point_pointdailyastrodata
from ..shared import point_pointdailyeveningdata as shared_point_pointdailyeveningdata
from ..shared import point_pointdailymorningdata as shared_point_pointdailymorningdata
from ..shared import point_pointdailystatsdata as shared_point_pointdailystatsdata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PointPointDailyData:
    
    all_day: shared_point_pointdailyalldaydata.PointPointDailyAllDayData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all_day') }})  
    astro: shared_point_pointdailyastrodata.PointPointDailyAstroData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('astro') }})  
    statistics: shared_point_pointdailystatsdata.PointPointDailyStatsData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics') }})  
    afternoon: Optional[shared_point_pointdailyafternoondata.PointPointDailyAfternoonData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('afternoon'), 'exclude': lambda f: f is None }})  
    day: Optional[bytes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('day'), 'exclude': lambda f: f is None }})
    r"""Datetime in YYYY-MM-DDTHH:MM:SS format."""  
    evening: Optional[shared_point_pointdailyeveningdata.PointPointDailyEveningData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('evening'), 'exclude': lambda f: f is None }})  
    icon: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icon'), 'exclude': lambda f: f is None }})
    r"""Numeric identifier of the weather icon. The following values can appear:
    
    * 1 - Not available
    * 2 - Sunny
    * 3 - Mostly sunny
    * 4 - Partly sunny
    * 5 - Mostly cloudy
    * 6 - Cloudy
    * 7 - Overcast
    * 8 - Overcast with low clouds
    * 9 - Fog
    * 10 - Light rain
    * 11 - Rain
    * 12 - Possible rain
    * 13 - Rain shower
    * 14 - Thunderstorm
    * 15 - Local thunderstorms
    * 16 - Light snow
    * 17 - Snow
    * 18 - Possible snow
    * 19 - Snow shower
    * 20 - Rain and snow
    * 21 - Possible rain and snow
    * 22 - Rain and snow
    * 23 - Freezing rain
    * 24 - Possible freezing rain
    * 25 - Hail
    * 26 - Clear (night)
    * 27 - Mostly clear (night)
    * 28 - Partly clear (night)
    * 29 - Mostly cloudy (night)
    * 30 - Cloudy (night)
    * 31 - Overcast with low clouds (night)
    * 32 - Rain shower (night)
    * 33 - Local thunderstorms (night)
    * 34 - Snow shower (night)
    * 35 - Rain and snow (night)
    * 36 - Possible freezing rain (night)
    
    Unit: icon
    """  
    morning: Optional[shared_point_pointdailymorningdata.PointPointDailyMorningData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('morning'), 'exclude': lambda f: f is None }})  
    predictability: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('predictability'), 'exclude': lambda f: f is None }})
    r"""Weather predictability. Values from 1 (very high predictability) to 5 (very low predictability).
    Unit: 1-5
    """  
    summary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary'), 'exclude': lambda f: f is None }})
    r"""Short text summary of the weather, e.g. `Light rain`."""  
    weather: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weather'), 'exclude': lambda f: f is None }})
    r"""All day string identifier of the weather icon, e.g. `light_rain`."""  
    