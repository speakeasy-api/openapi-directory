/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { GeographicDivision } from "./geographicdivision";
import { Office } from "./office";
import { Official } from "./official";
import { SimpleAddressType } from "./simpleaddresstype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The result of a representative info lookup query.
 */
export class RepresentativeInfoResponse extends SpeakeasyBase {
  /**
   * A map of political geographic divisions that contain the requested address, keyed by the unique Open Civic Data identifier for this division.
   */
  @SpeakeasyMetadata({ elemType: GeographicDivision })
  @Expose({ name: "divisions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GeographicDivision> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], GeographicDivision);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  divisions?: Record<string, GeographicDivision>;

  /**
   * Identifies what kind of resource this is. Value: the fixed string "civicinfo#representativeInfoResponse".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * A simple representation of an address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "normalizedInput" })
  @Type(() => SimpleAddressType)
  normalizedInput?: SimpleAddressType;

  /**
   * Elected offices referenced by the divisions listed above. Will only be present if includeOffices was true in the request.
   */
  @SpeakeasyMetadata({ elemType: Office })
  @Expose({ name: "offices" })
  @Type(() => Office)
  offices?: Office[];

  /**
   * Officials holding the offices listed above. Will only be present if includeOffices was true in the request.
   */
  @SpeakeasyMetadata({ elemType: Official })
  @Expose({ name: "officials" })
  @Type(() => Official)
  officials?: Official[];
}
