/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes a tag.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The Network Access Scope.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScope extends SpeakeasyBase {
  @SpeakeasyMetadata()
  createdDate?: Date;

  @SpeakeasyMetadata()
  networkInsightsAccessScopeArn?: string;

  @SpeakeasyMetadata()
  networkInsightsAccessScopeId?: string;

  @SpeakeasyMetadata({
    elemType:
      CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeTags,
  })
  tags?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeTags[];

  @SpeakeasyMetadata()
  updatedDate?: Date;
}

export enum CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum {
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * The packet header statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationAddresses?: string[];

  @SpeakeasyMetadata()
  destinationPorts?: string[];

  @SpeakeasyMetadata()
  destinationPrefixLists?: string[];

  @SpeakeasyMetadata()
  protocols?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatementProtocolsEnum[];

  @SpeakeasyMetadata()
  sourceAddresses?: string[];

  @SpeakeasyMetadata()
  sourcePorts?: string[];

  @SpeakeasyMetadata()
  sourcePrefixLists?: string[];
}

/**
 * The resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationResourceStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceTypes?: string[];

  @SpeakeasyMetadata()
  resources?: string[];
}

/**
 * The destination.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  packetHeaderStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationPacketHeaderStatement;

  @SpeakeasyMetadata()
  resourceStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestinationResourceStatement;
}

export enum CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum {
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * The packet header statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationAddresses?: string[];

  @SpeakeasyMetadata()
  destinationPorts?: string[];

  @SpeakeasyMetadata()
  destinationPrefixLists?: string[];

  @SpeakeasyMetadata()
  protocols?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatementProtocolsEnum[];

  @SpeakeasyMetadata()
  sourceAddresses?: string[];

  @SpeakeasyMetadata()
  sourcePorts?: string[];

  @SpeakeasyMetadata()
  sourcePrefixLists?: string[];
}

/**
 * The resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourceResourceStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceTypes?: string[];

  @SpeakeasyMetadata()
  resources?: string[];
}

/**
 * The source.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  packetHeaderStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourcePacketHeaderStatement;

  @SpeakeasyMetadata()
  resourceStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSourceResourceStatement;
}

/**
 * The resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResourcesResourceStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceTypes?: string[];

  @SpeakeasyMetadata()
  resources?: string[];
}

/**
 * Describes a through resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResources extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResourcesResourceStatement;
}

/**
 * Describes a path.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePaths extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destination?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsDestination;

  @SpeakeasyMetadata()
  source?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsSource;

  @SpeakeasyMetadata({
    elemType:
      CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResources,
  })
  throughResources?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePathsThroughResources[];
}

export enum CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum {
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * The packet header statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationAddresses?: string[];

  @SpeakeasyMetadata()
  destinationPorts?: string[];

  @SpeakeasyMetadata()
  destinationPrefixLists?: string[];

  @SpeakeasyMetadata()
  protocols?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatementProtocolsEnum[];

  @SpeakeasyMetadata()
  sourceAddresses?: string[];

  @SpeakeasyMetadata()
  sourcePorts?: string[];

  @SpeakeasyMetadata()
  sourcePrefixLists?: string[];
}

/**
 * The resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationResourceStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceTypes?: string[];

  @SpeakeasyMetadata()
  resources?: string[];
}

/**
 * The destination.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestination extends SpeakeasyBase {
  @SpeakeasyMetadata()
  packetHeaderStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationPacketHeaderStatement;

  @SpeakeasyMetadata()
  resourceStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestinationResourceStatement;
}

export enum CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum {
  Tcp = "tcp",
  Udp = "udp",
}

/**
 * The packet header statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destinationAddresses?: string[];

  @SpeakeasyMetadata()
  destinationPorts?: string[];

  @SpeakeasyMetadata()
  destinationPrefixLists?: string[];

  @SpeakeasyMetadata()
  protocols?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatementProtocolsEnum[];

  @SpeakeasyMetadata()
  sourceAddresses?: string[];

  @SpeakeasyMetadata()
  sourcePorts?: string[];

  @SpeakeasyMetadata()
  sourcePrefixLists?: string[];
}

/**
 * The resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourceResourceStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceTypes?: string[];

  @SpeakeasyMetadata()
  resources?: string[];
}

/**
 * The source.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSource extends SpeakeasyBase {
  @SpeakeasyMetadata()
  packetHeaderStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourcePacketHeaderStatement;

  @SpeakeasyMetadata()
  resourceStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSourceResourceStatement;
}

/**
 * The resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResourcesResourceStatement extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceTypes?: string[];

  @SpeakeasyMetadata()
  resources?: string[];
}

/**
 * Describes a through resource statement.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResources extends SpeakeasyBase {
  @SpeakeasyMetadata()
  resourceStatement?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResourcesResourceStatement;
}

/**
 * Describes a path.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPaths extends SpeakeasyBase {
  @SpeakeasyMetadata()
  destination?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsDestination;

  @SpeakeasyMetadata()
  source?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsSource;

  @SpeakeasyMetadata({
    elemType:
      CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResources,
  })
  throughResources?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPathsThroughResources[];
}

/**
 * The Network Access Scope content.
 */
export class CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContent extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePaths,
  })
  excludePaths?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentExcludePaths[];

  @SpeakeasyMetadata({
    elemType:
      CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPaths,
  })
  matchPaths?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContentMatchPaths[];

  @SpeakeasyMetadata()
  networkInsightsAccessScopeId?: string;
}

/**
 * Success
 */
export class CreateNetworkInsightsAccessScopeResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  networkInsightsAccessScope?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScope;

  @SpeakeasyMetadata()
  networkInsightsAccessScopeContent?: CreateNetworkInsightsAccessScopeResultNetworkInsightsAccessScopeContent;
}
