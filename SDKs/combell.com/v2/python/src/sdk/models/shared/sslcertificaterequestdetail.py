"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import sslcertificaterequestvalidation as shared_sslcertificaterequestvalidation
from ..shared import sslcertificatetype_enum as shared_sslcertificatetype_enum
from ..shared import sslcertificatevalidationlevel_enum as shared_sslcertificatevalidationlevel_enum
from ..shared import sslcertificatevendor_enum as shared_sslcertificatevendor_enum
from ..shared import sslsubjectaltname as shared_sslsubjectaltname
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SslCertificateRequestDetail:
    r"""Success"""
    
    certificate_type: Optional[shared_sslcertificatetype_enum.SslCertificateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificate_type'), 'exclude': lambda f: f is None }})
    r"""The type of the certificate:
    <ul><li>Standard: Certificate for a single domain.</li><li>Multi domain: Certificate for multiple (sub)domains belonging to the same owner.</li><li>Wildcard: Certificate for all the subdomains.</li></ul>
    """  
    common_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('common_name'), 'exclude': lambda f: f is None }})
    r"""The common name of the certificate request."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The id of the certificate request."""  
    order_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_code'), 'exclude': lambda f: f is None }})
    r"""The order code of the certificate request."""  
    subject_alt_names: Optional[list[shared_sslsubjectaltname.SslSubjectAltName]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject_alt_names'), 'exclude': lambda f: f is None }})
    r"""The list of all supported domains in the certificate."""  
    validation_level: Optional[shared_sslcertificatevalidationlevel_enum.SslCertificateValidationLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_level'), 'exclude': lambda f: f is None }})
    r"""The validation level of the certificate:
    <ul><li>Domain validated: Basic check of the identity of the owner of the domain name.</li><li>Organization validated: Company details are verified and integrated in the certificate.</li><li>Extended validated: A thorough verification of your domain name and company details.</li></ul>
    """  
    validations: Optional[list[shared_sslcertificaterequestvalidation.SslCertificateRequestValidation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validations'), 'exclude': lambda f: f is None }})
    r"""The list of dns names to be validated with the information related to domain verification."""  
    vendor: Optional[shared_sslcertificatevendor_enum.SslCertificateVendorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendor'), 'exclude': lambda f: f is None }})
    r"""The vendor of the certificate."""  
    