/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Filter invitations by their invitation source.
 */
export enum OrgsListPendingInvitationsInvitationSourceEnum {
  All = "all",
  Member = "member",
  Scim = "scim",
}

/**
 * Filter invitations by their member role.
 */
export enum OrgsListPendingInvitationsRoleEnum {
  All = "all",
  Admin = "admin",
  DirectMember = "direct_member",
  BillingManager = "billing_manager",
  HiringManager = "hiring_manager",
}

export class OrgsListPendingInvitationsRequest extends SpeakeasyBase {
  /**
   * Filter invitations by their invitation source.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=invitation_source",
  })
  invitationSource?: OrgsListPendingInvitationsInvitationSourceEnum;

  /**
   * The organization name. The name is not case sensitive.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=org" })
  org: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Filter invitations by their member role.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=role" })
  role?: OrgsListPendingInvitationsRoleEnum;
}

export class OrgsListPendingInvitationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.OrganizationInvitation })
  organizationInvitations?: shared.OrganizationInvitation[];
}
