"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configmanagementpolicycontrollermonitoring as shared_configmanagementpolicycontrollermonitoring
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigManagementPolicyController:
    r"""Configuration for Policy Controller"""
    
    audit_interval_seconds: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auditIntervalSeconds'), 'exclude': lambda f: f is None }})
    r"""Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect."""  
    exemptable_namespaces: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exemptableNamespaces'), 'exclude': lambda f: f is None }})
    r"""The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster."""  
    log_denies_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logDeniesEnabled'), 'exclude': lambda f: f is None }})
    r"""Logs all denies and dry run failures."""  
    monitoring: Optional[shared_configmanagementpolicycontrollermonitoring.ConfigManagementPolicyControllerMonitoring] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('monitoring'), 'exclude': lambda f: f is None }})
    r"""PolicyControllerMonitoring specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: [\\"cloudmonitoring\\", \\"prometheus\\"]"""  
    mutation_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mutationEnabled'), 'exclude': lambda f: f is None }})
    r"""Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster."""  
    referential_rules_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('referentialRulesEnabled'), 'exclude': lambda f: f is None }})
    r"""Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated."""  
    template_library_installed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('templateLibraryInstalled'), 'exclude': lambda f: f is None }})
    r"""Installs the default template library along with Policy Controller."""  
    