"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class AssetsPrices:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_assets_prices_adjusted(self, request: operations.PostAssetsPricesAdjustedRequestBody) -> operations.PostAssetsPricesAdjustedResponse:
        r"""Adjusted Prices
        Compute the backward-adjusted prices of one or several asset(s) for one or several date(s) from:
        * Unadjusted prices
        * Capital distributions, like stock dividends
        * Splits, like stock splits
        
        The adjustment base date is chosen to be the last date for which unadjusted prices are available, which implies that:
        * The price on the last date for which unadjusted prices are available is left unadjusted
        * The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the last date for which unadjusted prices are available
        
        References
        * [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/assets/prices/adjusted'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAssetsPricesAdjustedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAssetsPricesAdjusted200ApplicationJSON])
                res.post_assets_prices_adjusted_200_application_json_object = out

        return res

    def post_assets_prices_adjusted_forward(self, request: operations.PostAssetsPricesAdjustedForwardRequestBody) -> operations.PostAssetsPricesAdjustedForwardResponse:
        r"""Forward-Adjusted Prices
        Compute the forward-adjusted prices of one or several asset(s) for one or several date(s) from:
        * Unadjusted prices
        * Capital distributions, like stock dividends
        * Splits, like stock splits
        
        The adjustment base date is chosen to be the first date for which unadjusted prices are available, which implies that:
        * The price on the first date for which unadjusted prices are available is left unadjusted
        * The price on any other date is adjusted based on the capital distributions and the splits which occurred between this date and the first date for which unadjusted prices are available
        
        References
        * [Center for Research in Security Prices](https://www.crsp.org/products/documentation/crsp-calculations)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/assets/prices/adjusted/forward'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAssetsPricesAdjustedForwardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostAssetsPricesAdjustedForward200ApplicationJSON])
                res.post_assets_prices_adjusted_forward_200_application_json_object = out

        return res

    