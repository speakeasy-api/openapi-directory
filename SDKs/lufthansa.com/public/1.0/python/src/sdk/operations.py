"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Operations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get(self, request: operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest, security: operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetSecurity) -> operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse:
        r"""Flight Status at Arrival Airport
        Status of all arrivals at a given airport up to 4 hours from the provided date time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest, base_url, '/operations/flightstatus/arrivals/{airportCode}/{fromDateTime}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OperationsFlightstatusArrivalsByAirportCodeAndFromDateTimeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.operations_flightstatus_arrivals_by_airport_code_and_from_date_time_get_200_application_json_object = out

        return res

    def operations_flightstatus_by_flight_number_and_date_get(self, request: operations.OperationsFlightstatusByFlightNumberAndDateGetRequest, security: operations.OperationsFlightstatusByFlightNumberAndDateGetSecurity) -> operations.OperationsFlightstatusByFlightNumberAndDateGetResponse:
        r"""Flight Status
        Status of a particular flight (boarding, delayed, etc.).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OperationsFlightstatusByFlightNumberAndDateGetRequest, base_url, '/operations/flightstatus/{flightNumber}/{date}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.OperationsFlightstatusByFlightNumberAndDateGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OperationsFlightstatusByFlightNumberAndDateGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.operations_flightstatus_by_flight_number_and_date_get_200_application_json_object = out

        return res

    def operations_flightstatus_departures_by_airport_code_and_from_date_time_get(self, request: operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest, security: operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetSecurity) -> operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse:
        r"""Flight Status at Departure Airport
        Status of all departures from a given airport up to 4 hours from the provided date time.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest, base_url, '/operations/flightstatus/departures/{airportCode}/{fromDateTime}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OperationsFlightstatusDeparturesByAirportCodeAndFromDateTimeGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.operations_flightstatus_departures_by_airport_code_and_from_date_time_get_200_application_json_object = out

        return res

    def operations_flightstatus_route_date_by_origin_and_destination_get(self, request: operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest, security: operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetSecurity) -> operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse:
        r"""Flight Status by Route
        Status of flights between a given origin and destination on a given date.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest, base_url, '/operations/flightstatus/route/{origin}/{destination}/{date}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OperationsFlightstatusRouteDateByOriginAndDestinationGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.operations_flightstatus_route_date_by_origin_and_destination_get_200_application_json_object = out

        return res

    def operations_schedules_from_date_time_by_origin_and_destination_get(self, request: operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest, security: operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetSecurity) -> operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse:
        r"""Flight Schedules
        Scheduled flights between given airports on a given date.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest, base_url, '/operations/schedules/{origin}/{destination}/{fromDateTime}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.OperationsSchedulesFromDateTimeByOriginAndDestinationGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.operations_schedules_from_date_time_by_origin_and_destination_get_200_application_json_object = out

        return res

    