/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Apikeys } from "./apikeys";
import { AuthConfig } from "./authconfig";
import { Certificates } from "./certificates";
import { Configuration } from "./configuration";
import { DataExporterConfigs } from "./dataexporterconfigs";
import { Environments } from "./environments";
import { Groups } from "./groups";
import { Health } from "./health";
import { Import } from "./import";
import { JwtVerifiers } from "./jwtverifiers";
import { Scripts } from "./scripts";
import { Services } from "./services";
import { Snowmonkey } from "./snowmonkey";
import { Stats } from "./stats";
import { Templates } from "./templates";
import { ValidationAuthorities } from "./validationauthorities";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "http://otoroshi-api.oto.tools/",
  "http://maif.local",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * Admin API of the Otoroshi reverse proxy
 *
 * @see {@link https://maif.github.io/otoroshi/} - Find out more about Otoroshi
 */
export class SDK {
  /**
   * Everything about Otoroshi api keys
   */
  public apikeys: Apikeys;
  /**
   * Everything about Otoroshi global auth. module config
   */
  public authConfig: AuthConfig;
  /**
   * Everything about Otoroshi SSL/TLS certificates
   */
  public certificates: Certificates;
  /**
   * Everything about Otoroshi global configuration
   */
  public configuration: Configuration;
  /**
   * Everything about Otoroshi data exporters
   */
  public dataExporterConfigs: DataExporterConfigs;
  /**
   * Everything about Otoroshi Environments
   */
  public environments: Environments;
  /**
   * Everything about Otoroshi service groups
   */
  public groups: Groups;
  /**
   * Everything about Otoroshi health status
   */
  public health: Health;
  /**
   * Everything about Otoroshi import/export
   */
  public import: Import;
  /**
   * Everything about Otoroshi global JWT token verifiers
   */
  public jwtVerifiers: JwtVerifiers;
  /**
   * Everything about Otoroshi request transformer scripts
   */
  public scripts: Scripts;
  /**
   * Everything about Otoroshi service descriptors
   */
  public services: Services;
  /**
   * Everything about Otoroshi Snow Monkey
   */
  public snowmonkey: Snowmonkey;
  /**
   * Everything about Otoroshi stats
   */
  public stats: Stats;
  /**
   * Everything about Otoroshi entities templates
   */
  public templates: Templates;
  /**
   * Everything about Otoroshi validation authorities
   */
  public validationAuthorities: ValidationAuthorities;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.apikeys = new Apikeys(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.authConfig = new AuthConfig(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.certificates = new Certificates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.configuration = new Configuration(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.dataExporterConfigs = new DataExporterConfigs(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.environments = new Environments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.groups = new Groups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.health = new Health(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.import = new Import(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.jwtVerifiers = new JwtVerifiers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.scripts = new Scripts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.services = new Services(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.snowmonkey = new Snowmonkey(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.stats = new Stats(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.templates = new Templates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.validationAuthorities = new ValidationAuthorities(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
