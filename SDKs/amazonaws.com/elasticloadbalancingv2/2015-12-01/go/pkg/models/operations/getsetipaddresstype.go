// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetIPAddressTypeActionEnum
type GETSetIPAddressTypeActionEnum string

const (
	GETSetIPAddressTypeActionEnumSetIPAddressType GETSetIPAddressTypeActionEnum = "SetIpAddressType"
)

func (e GETSetIPAddressTypeActionEnum) ToPointer() *GETSetIPAddressTypeActionEnum {
	return &e
}

func (e *GETSetIPAddressTypeActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SetIpAddressType":
		*e = GETSetIPAddressTypeActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIPAddressTypeActionEnum: %v", v)
	}
}

// GETSetIPAddressTypeIPAddressTypeEnum - The IP address type. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). You can’t specify <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener.
type GETSetIPAddressTypeIPAddressTypeEnum string

const (
	GETSetIPAddressTypeIPAddressTypeEnumIpv4      GETSetIPAddressTypeIPAddressTypeEnum = "ipv4"
	GETSetIPAddressTypeIPAddressTypeEnumDualstack GETSetIPAddressTypeIPAddressTypeEnum = "dualstack"
)

func (e GETSetIPAddressTypeIPAddressTypeEnum) ToPointer() *GETSetIPAddressTypeIPAddressTypeEnum {
	return &e
}

func (e *GETSetIPAddressTypeIPAddressTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipv4":
		fallthrough
	case "dualstack":
		*e = GETSetIPAddressTypeIPAddressTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIPAddressTypeIPAddressTypeEnum: %v", v)
	}
}

// GETSetIPAddressTypeVersionEnum
type GETSetIPAddressTypeVersionEnum string

const (
	GETSetIPAddressTypeVersionEnumTwoThousandAndFifteen1201 GETSetIPAddressTypeVersionEnum = "2015-12-01"
)

func (e GETSetIPAddressTypeVersionEnum) ToPointer() *GETSetIPAddressTypeVersionEnum {
	return &e
}

func (e *GETSetIPAddressTypeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2015-12-01":
		*e = GETSetIPAddressTypeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetIPAddressTypeVersionEnum: %v", v)
	}
}

type GETSetIPAddressTypeRequest struct {
	Action GETSetIPAddressTypeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The IP address type. The possible values are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6 addresses). You can’t specify <code>dualstack</code> for a load balancer with a UDP or TCP_UDP listener.
	IPAddressType GETSetIPAddressTypeIPAddressTypeEnum `queryParam:"style=form,explode=true,name=IpAddressType"`
	// The Amazon Resource Name (ARN) of the load balancer.
	LoadBalancerArn   string                         `queryParam:"style=form,explode=true,name=LoadBalancerArn"`
	Version           GETSetIPAddressTypeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetIPAddressTypeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
