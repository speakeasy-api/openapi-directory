/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Container - Container runnable.
 */
public class Container {
    /**
     * If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blockExternalNetwork")
    public Boolean blockExternalNetwork;

    public Container withBlockExternalNetwork(Boolean blockExternalNetwork) {
        this.blockExternalNetwork = blockExternalNetwork;
        return this;
    }
    
    /**
     * Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commands")
    public String[] commands;

    public Container withCommands(String[] commands) {
        this.commands = commands;
        return this;
    }
    
    /**
     * Overrides the `ENTRYPOINT` specified in the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entrypoint")
    public String entrypoint;

    public Container withEntrypoint(String entrypoint) {
        this.entrypoint = entrypoint;
        return this;
    }
    
    /**
     * The URI to pull the container image from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageUri")
    public String imageUri;

    public Container withImageUri(String imageUri) {
        this.imageUri = imageUri;
        return this;
    }
    
    /**
     * Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public String options;

    public Container withOptions(String options) {
        this.options = options;
        return this;
    }
    
    /**
     * Optional password for logging in to a docker registry. If password matches `projects/* /secrets/* /versions/*` then Batch will read the password from the Secret Manager;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public Container withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Optional username for logging in to a docker registry. If username matches `projects/* /secrets/* /versions/*` then Batch will read the username from the Secret Manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;

    public Container withUsername(String username) {
        this.username = username;
        return this;
    }
    
    /**
     * Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public String[] volumes;

    public Container withVolumes(String[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
    public Container(){}
}
