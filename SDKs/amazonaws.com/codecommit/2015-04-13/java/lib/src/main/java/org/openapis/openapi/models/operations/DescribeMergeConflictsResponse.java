/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class DescribeMergeConflictsResponse {
    /**
     * CommitDoesNotExistException
     */
    
    public Object commitDoesNotExistException;

    public DescribeMergeConflictsResponse withCommitDoesNotExistException(Object commitDoesNotExistException) {
        this.commitDoesNotExistException = commitDoesNotExistException;
        return this;
    }
    
    /**
     * CommitRequiredException
     */
    
    public Object commitRequiredException;

    public DescribeMergeConflictsResponse withCommitRequiredException(Object commitRequiredException) {
        this.commitRequiredException = commitRequiredException;
        return this;
    }
    
    
    public String contentType;

    public DescribeMergeConflictsResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.DescribeMergeConflictsOutput describeMergeConflictsOutput;

    public DescribeMergeConflictsResponse withDescribeMergeConflictsOutput(org.openapis.openapi.models.shared.DescribeMergeConflictsOutput describeMergeConflictsOutput) {
        this.describeMergeConflictsOutput = describeMergeConflictsOutput;
        return this;
    }
    
    /**
     * EncryptionIntegrityChecksFailedException
     */
    
    public Object encryptionIntegrityChecksFailedException;

    public DescribeMergeConflictsResponse withEncryptionIntegrityChecksFailedException(Object encryptionIntegrityChecksFailedException) {
        this.encryptionIntegrityChecksFailedException = encryptionIntegrityChecksFailedException;
        return this;
    }
    
    /**
     * EncryptionKeyAccessDeniedException
     */
    
    public Object encryptionKeyAccessDeniedException;

    public DescribeMergeConflictsResponse withEncryptionKeyAccessDeniedException(Object encryptionKeyAccessDeniedException) {
        this.encryptionKeyAccessDeniedException = encryptionKeyAccessDeniedException;
        return this;
    }
    
    /**
     * EncryptionKeyDisabledException
     */
    
    public Object encryptionKeyDisabledException;

    public DescribeMergeConflictsResponse withEncryptionKeyDisabledException(Object encryptionKeyDisabledException) {
        this.encryptionKeyDisabledException = encryptionKeyDisabledException;
        return this;
    }
    
    /**
     * EncryptionKeyNotFoundException
     */
    
    public Object encryptionKeyNotFoundException;

    public DescribeMergeConflictsResponse withEncryptionKeyNotFoundException(Object encryptionKeyNotFoundException) {
        this.encryptionKeyNotFoundException = encryptionKeyNotFoundException;
        return this;
    }
    
    /**
     * EncryptionKeyUnavailableException
     */
    
    public Object encryptionKeyUnavailableException;

    public DescribeMergeConflictsResponse withEncryptionKeyUnavailableException(Object encryptionKeyUnavailableException) {
        this.encryptionKeyUnavailableException = encryptionKeyUnavailableException;
        return this;
    }
    
    /**
     * FileDoesNotExistException
     */
    
    public Object fileDoesNotExistException;

    public DescribeMergeConflictsResponse withFileDoesNotExistException(Object fileDoesNotExistException) {
        this.fileDoesNotExistException = fileDoesNotExistException;
        return this;
    }
    
    /**
     * InvalidCommitException
     */
    
    public Object invalidCommitException;

    public DescribeMergeConflictsResponse withInvalidCommitException(Object invalidCommitException) {
        this.invalidCommitException = invalidCommitException;
        return this;
    }
    
    /**
     * InvalidConflictDetailLevelException
     */
    
    public Object invalidConflictDetailLevelException;

    public DescribeMergeConflictsResponse withInvalidConflictDetailLevelException(Object invalidConflictDetailLevelException) {
        this.invalidConflictDetailLevelException = invalidConflictDetailLevelException;
        return this;
    }
    
    /**
     * InvalidConflictResolutionStrategyException
     */
    
    public Object invalidConflictResolutionStrategyException;

    public DescribeMergeConflictsResponse withInvalidConflictResolutionStrategyException(Object invalidConflictResolutionStrategyException) {
        this.invalidConflictResolutionStrategyException = invalidConflictResolutionStrategyException;
        return this;
    }
    
    /**
     * InvalidContinuationTokenException
     */
    
    public Object invalidContinuationTokenException;

    public DescribeMergeConflictsResponse withInvalidContinuationTokenException(Object invalidContinuationTokenException) {
        this.invalidContinuationTokenException = invalidContinuationTokenException;
        return this;
    }
    
    /**
     * InvalidMaxMergeHunksException
     */
    
    public Object invalidMaxMergeHunksException;

    public DescribeMergeConflictsResponse withInvalidMaxMergeHunksException(Object invalidMaxMergeHunksException) {
        this.invalidMaxMergeHunksException = invalidMaxMergeHunksException;
        return this;
    }
    
    /**
     * InvalidMergeOptionException
     */
    
    public Object invalidMergeOptionException;

    public DescribeMergeConflictsResponse withInvalidMergeOptionException(Object invalidMergeOptionException) {
        this.invalidMergeOptionException = invalidMergeOptionException;
        return this;
    }
    
    /**
     * InvalidPathException
     */
    
    public Object invalidPathException;

    public DescribeMergeConflictsResponse withInvalidPathException(Object invalidPathException) {
        this.invalidPathException = invalidPathException;
        return this;
    }
    
    /**
     * InvalidRepositoryNameException
     */
    
    public Object invalidRepositoryNameException;

    public DescribeMergeConflictsResponse withInvalidRepositoryNameException(Object invalidRepositoryNameException) {
        this.invalidRepositoryNameException = invalidRepositoryNameException;
        return this;
    }
    
    /**
     * MaximumFileContentToLoadExceededException
     */
    
    public Object maximumFileContentToLoadExceededException;

    public DescribeMergeConflictsResponse withMaximumFileContentToLoadExceededException(Object maximumFileContentToLoadExceededException) {
        this.maximumFileContentToLoadExceededException = maximumFileContentToLoadExceededException;
        return this;
    }
    
    /**
     * MaximumItemsToCompareExceededException
     */
    
    public Object maximumItemsToCompareExceededException;

    public DescribeMergeConflictsResponse withMaximumItemsToCompareExceededException(Object maximumItemsToCompareExceededException) {
        this.maximumItemsToCompareExceededException = maximumItemsToCompareExceededException;
        return this;
    }
    
    /**
     * MergeOptionRequiredException
     */
    
    public Object mergeOptionRequiredException;

    public DescribeMergeConflictsResponse withMergeOptionRequiredException(Object mergeOptionRequiredException) {
        this.mergeOptionRequiredException = mergeOptionRequiredException;
        return this;
    }
    
    /**
     * PathRequiredException
     */
    
    public Object pathRequiredException;

    public DescribeMergeConflictsResponse withPathRequiredException(Object pathRequiredException) {
        this.pathRequiredException = pathRequiredException;
        return this;
    }
    
    /**
     * RepositoryDoesNotExistException
     */
    
    public Object repositoryDoesNotExistException;

    public DescribeMergeConflictsResponse withRepositoryDoesNotExistException(Object repositoryDoesNotExistException) {
        this.repositoryDoesNotExistException = repositoryDoesNotExistException;
        return this;
    }
    
    /**
     * RepositoryNameRequiredException
     */
    
    public Object repositoryNameRequiredException;

    public DescribeMergeConflictsResponse withRepositoryNameRequiredException(Object repositoryNameRequiredException) {
        this.repositoryNameRequiredException = repositoryNameRequiredException;
        return this;
    }
    
    
    public Integer statusCode;

    public DescribeMergeConflictsResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public DescribeMergeConflictsResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * TipsDivergenceExceededException
     */
    
    public Object tipsDivergenceExceededException;

    public DescribeMergeConflictsResponse withTipsDivergenceExceededException(Object tipsDivergenceExceededException) {
        this.tipsDivergenceExceededException = tipsDivergenceExceededException;
        return this;
    }
    
    public DescribeMergeConflictsResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
