"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DNSRecords:
    r"""Manage the dns records for a domain name.<p>The interface allows you to manage following records: A, CNAME, MX, SRV, ALIAS and TXT."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_dns_domain_name_records_record_id_(self, request: operations.DeleteDNSDomainNameRecordsRecordIDRequest) -> operations.DeleteDNSDomainNameRecordsRecordIDResponse:
        r"""Delete a record"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDNSDomainNameRecordsRecordIDRequest, base_url, '/dns/{domainName}/records/{recordId}', request)
        
        query_params = utils.get_query_params(operations.DeleteDNSDomainNameRecordsRecordIDRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDNSDomainNameRecordsRecordIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_dns_domain_name_records(self, request: operations.GetDNSDomainNameRecordsRequest) -> operations.GetDNSDomainNameRecordsResponse:
        r"""Get records"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDNSDomainNameRecordsRequest, base_url, '/dns/{domainName}/records', request)
        
        query_params = utils.get_query_params(operations.GetDNSDomainNameRecordsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDNSDomainNameRecordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.DNSRecord]])
                res.dns_records = out

        return res

    def get_dns_domain_name_records_record_id_(self, request: operations.GetDNSDomainNameRecordsRecordIDRequest) -> operations.GetDNSDomainNameRecordsRecordIDResponse:
        r"""Get specific record"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDNSDomainNameRecordsRecordIDRequest, base_url, '/dns/{domainName}/records/{recordId}', request)
        
        query_params = utils.get_query_params(operations.GetDNSDomainNameRecordsRecordIDRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDNSDomainNameRecordsRecordIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DNSRecord])
                res.dns_record = out

        return res

    def post_dns_domain_name_records(self, request: operations.PostDNSDomainNameRecordsRequest) -> operations.PostDNSDomainNameRecordsResponse:
        r"""Create a record"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostDNSDomainNameRecordsRequest, base_url, '/dns/{domainName}/records', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dns_record", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostDNSDomainNameRecordsRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDNSDomainNameRecordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            

        return res

    def put_dns_domain_name_records_record_id_(self, request: operations.PutDNSDomainNameRecordsRecordIDRequest) -> operations.PutDNSDomainNameRecordsRecordIDResponse:
        r"""Edit a record"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutDNSDomainNameRecordsRecordIDRequest, base_url, '/dns/{domainName}/records/{recordId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "dns_record", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PutDNSDomainNameRecordsRecordIDRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutDNSDomainNameRecordsRecordIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    