"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class PutProxySecurity:
    
    api_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class PutProxyRequest:
    
    x_apideck_app_id: str = dataclasses.field(metadata={'header': { 'field_name': 'x-apideck-app-id', 'style': 'simple', 'explode': False }})
    r"""The ID of your Unify application"""  
    x_apideck_consumer_id: str = dataclasses.field(metadata={'header': { 'field_name': 'x-apideck-consumer-id', 'style': 'simple', 'explode': False }})
    r"""ID of the consumer which you want to get or push data from"""  
    x_apideck_downstream_url: str = dataclasses.field(metadata={'header': { 'field_name': 'x-apideck-downstream-url', 'style': 'simple', 'explode': False }})
    r"""Downstream URL"""  
    x_apideck_service_id: str = dataclasses.field(metadata={'header': { 'field_name': 'x-apideck-service-id', 'style': 'simple', 'explode': False }})
    r"""Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API."""  
    request_body: Optional[bytes] = dataclasses.field(default=None, metadata={'request': { 'media_type': '*/*' }})
    r"""Depending on the verb/method of the request this will contain the request body you want to POST/PATCH/PUT."""  
    x_apideck_downstream_authorization: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'x-apideck-downstream-authorization', 'style': 'simple', 'explode': False }})
    r"""Downstream authorization header. This will skip the Vault token injection."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutProxy401ApplicationJSON:
    r"""Unauthorized"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Contains parameter or domain specific information related to the error and why it occurred."""  
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""A human-readable message providing more details about the error."""  
    ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ref'), 'exclude': lambda f: f is None }})
    r"""Link to documentation of error type"""  
    status_code: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_code'), 'exclude': lambda f: f is None }})
    r"""HTTP status code"""  
    type_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type_name'), 'exclude': lambda f: f is None }})
    r"""The type of error returned"""  
    

@dataclasses.dataclass
class PutProxyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    put_proxy_200_application_json_any: Optional[Any] = dataclasses.field(default=None)
    r"""Ok"""  
    put_proxy_401_application_json_object: Optional[PutProxy401ApplicationJSON] = dataclasses.field(default=None)
    r"""Unauthorized"""  
    put_proxy_default_application_json_any: Optional[Any] = dataclasses.field(default=None)
    r"""Proxy error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    