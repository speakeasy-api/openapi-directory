"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class JobSchedules:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def job_schedule_add(self, request: operations.JobScheduleAddRequest) -> operations.JobScheduleAddResponse:
        r"""Adds a job schedule to the specified account."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/jobschedules'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "job_schedule_add_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.JobScheduleAddRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_delete(self, request: operations.JobScheduleDeleteRequest) -> operations.JobScheduleDeleteResponse:
        r"""Deletes a job schedule from the specified account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobScheduleDeleteRequest, base_url, '/jobschedules/{jobScheduleId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.JobScheduleDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_disable(self, request: operations.JobScheduleDisableRequest) -> operations.JobScheduleDisableResponse:
        r"""Disables a job schedule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobScheduleDisableRequest, base_url, '/jobschedules/{jobScheduleId}/disable', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.JobScheduleDisableRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleDisableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_enable(self, request: operations.JobScheduleEnableRequest) -> operations.JobScheduleEnableResponse:
        r"""Enables a job schedule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobScheduleEnableRequest, base_url, '/jobschedules/{jobScheduleId}/enable', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.JobScheduleEnableRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleEnableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_exists(self, request: operations.JobScheduleExistsRequest) -> operations.JobScheduleExistsResponse:
        r"""Checks the specified job schedule exists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobScheduleExistsRequest, base_url, '/jobschedules/{jobScheduleId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.JobScheduleExistsRequest, request)
        
        client = self._client
        
        http_res = client.request('HEAD', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleExistsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        elif http_res.status_code == 404:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_get(self, request: operations.JobScheduleGetRequest) -> operations.JobScheduleGetResponse:
        r"""Gets information about the specified job schedule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobScheduleGetRequest, base_url, '/jobschedules/{jobScheduleId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.JobScheduleGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CloudJobSchedule])
                res.cloud_job_schedule = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_list(self, request: operations.JobScheduleListRequest) -> operations.JobScheduleListResponse:
        r"""Lists all of the job schedules in the specified account."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/jobschedules'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.JobScheduleListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CloudJobScheduleListResult])
                res.cloud_job_schedule_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_patch(self, request: operations.JobSchedulePatchRequest) -> operations.JobSchedulePatchResponse:
        r"""Updates the properties of the specified job schedule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobSchedulePatchRequest, base_url, '/jobschedules/{jobScheduleId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "job_schedule_patch_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.JobSchedulePatchRequest, request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobSchedulePatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_terminate(self, request: operations.JobScheduleTerminateRequest) -> operations.JobScheduleTerminateResponse:
        r"""Terminates a job schedule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobScheduleTerminateRequest, base_url, '/jobschedules/{jobScheduleId}/terminate', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.JobScheduleTerminateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleTerminateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def job_schedule_update(self, request: operations.JobScheduleUpdateRequest) -> operations.JobScheduleUpdateResponse:
        r"""Updates the properties of the specified job schedule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.JobScheduleUpdateRequest, base_url, '/jobschedules/{jobScheduleId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "job_schedule_update_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.JobScheduleUpdateRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.JobScheduleUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    