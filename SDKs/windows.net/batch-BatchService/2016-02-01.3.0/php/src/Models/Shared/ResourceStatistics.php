<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ResourceStatistics - Statistics related to resource consumption by compute nodes in a pool.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ResourceStatistics
{
    /**
     * The average CPU usage across all nodes in the pool (percentage per node).
     * 
     * @var float $avgCPUPercentage
     */
	#[\JMS\Serializer\Annotation\SerializedName('avgCPUPercentage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $avgCPUPercentage;
    
    /**
     * The average used disk space in GiB across all nodes in the pool.
     * 
     * @var float $avgDiskGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('avgDiskGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $avgDiskGiB;
    
    /**
     * The average memory usage in GiB across all nodes in the pool.
     * 
     * @var float $avgMemoryGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('avgMemoryGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $avgMemoryGiB;
    
    /**
     * The total amount of data in GiB of disk reads across all nodes in the pool.
     * 
     * @var float $diskReadGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('diskReadGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $diskReadGiB;
    
    /**
     * The total number of disk read operations across all nodes in the pool.
     * 
     * @var int $diskReadIOps
     */
	#[\JMS\Serializer\Annotation\SerializedName('diskReadIOps')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $diskReadIOps;
    
    /**
     * The total amount of data in GiB of disk writes across all nodes in the pool.
     * 
     * @var float $diskWriteGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('diskWriteGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $diskWriteGiB;
    
    /**
     * The total number of disk write operations across all nodes in the pool.
     * 
     * @var int $diskWriteIOps
     */
	#[\JMS\Serializer\Annotation\SerializedName('diskWriteIOps')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $diskWriteIOps;
    
    /**
     * The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime.
     * 
     * @var \DateTime $lastUpdateTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('lastUpdateTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $lastUpdateTime;
    
    /**
     * The total amount of data in GiB of network reads across all nodes in the pool.
     * 
     * @var float $networkReadGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('networkReadGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $networkReadGiB;
    
    /**
     * The total amount of data in GiB of network writes across all nodes in the pool.
     * 
     * @var float $networkWriteGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('networkWriteGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $networkWriteGiB;
    
    /**
     * The peak used disk space in GiB across all nodes in the pool.
     * 
     * @var float $peakDiskGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('peakDiskGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $peakDiskGiB;
    
    /**
     * The peak memory usage in GiB across all nodes in the pool.
     * 
     * @var float $peakMemoryGiB
     */
	#[\JMS\Serializer\Annotation\SerializedName('peakMemoryGiB')]
    #[\JMS\Serializer\Annotation\Type('float')]
    public float $peakMemoryGiB;
    
    /**
     * The start time of the time range covered by the statistics.
     * 
     * @var \DateTime $startTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('startTime')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $startTime;
    
	public function __construct()
	{
		$this->avgCPUPercentage = 0;
		$this->avgDiskGiB = 0;
		$this->avgMemoryGiB = 0;
		$this->diskReadGiB = 0;
		$this->diskReadIOps = 0;
		$this->diskWriteGiB = 0;
		$this->diskWriteIOps = 0;
		$this->lastUpdateTime = new \DateTime();
		$this->networkReadGiB = 0;
		$this->networkWriteGiB = 0;
		$this->peakDiskGiB = 0;
		$this->peakMemoryGiB = 0;
		$this->startTime = new \DateTime();
	}
}
