"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeenRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    t0: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 't0', 'style': 'form', 'explode': True }})
    r"""The beginning of the timespan for the data. The maximum lookback period is 31 days from today."""  
    timespan: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timespan', 'style': 'form', 'explode': True }})
    r"""The timespan for which the information will be fetched. If specifying timespan, do not specify parameter t0. The value must be in seconds and be less than or equal to 31 days. The default is 1 day."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONDeviceInterface:
    r"""Interface attributes of the server. Only for configured servers."""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Interface name."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Url link to interface."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONDevice:
    r"""Attributes of the server when it's a device."""
    
    interface: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONDeviceInterface] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interface'), 'exclude': lambda f: f is None }})
    r"""Interface attributes of the server. Only for configured servers."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Device name."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Device serial."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Url link to device."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONIpv4:
    r"""IPv4 attributes of the server."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""IPv4 address of the server."""  
    gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gateway'), 'exclude': lambda f: f is None }})
    r"""IPv4 gateway address of the server."""  
    subnet: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subnet'), 'exclude': lambda f: f is None }})
    r"""Subnet of the server."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastAckIpv4:
    r"""IPv4 attributes of the last ack."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""IPv4 address of the last ack."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastAck:
    r"""Attributes of the server's last ack."""
    
    ipv4: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastAckIpv4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4'), 'exclude': lambda f: f is None }})
    r"""IPv4 attributes of the last ack."""  
    ts: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ts'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last time the server was acked."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketDestinationIpv4:
    r"""Destination ipv4 attributes of the packet."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Destination ipv4 address of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketDestination:
    r"""Destination of the packet."""
    
    ipv4: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketDestinationIpv4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4'), 'exclude': lambda f: f is None }})
    r"""Destination ipv4 attributes of the packet."""  
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""Destination mac address of the packet."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Destination port of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketEthernet:
    r"""Additional ethernet attributes of the packet."""
    
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Ethernet type of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketFieldsOptions:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Option name."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Option value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketFields:
    r"""DHCP-specific fields of the packet."""
    
    chaddr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chaddr'), 'exclude': lambda f: f is None }})
    r"""Client hardware address of the packet."""  
    ciaddr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ciaddr'), 'exclude': lambda f: f is None }})
    r"""Client IP address of the packet."""  
    flags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flags'), 'exclude': lambda f: f is None }})
    r"""Packet flags."""  
    giaddr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('giaddr'), 'exclude': lambda f: f is None }})
    r"""Gateway IP address of the packet."""  
    hlen: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hlen'), 'exclude': lambda f: f is None }})
    r"""Hardware length of the packet."""  
    hops: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hops'), 'exclude': lambda f: f is None }})
    r"""Number of hops the packet took."""  
    htype: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('htype'), 'exclude': lambda f: f is None }})
    r"""Hardware type code of the packet."""  
    magic_cookie: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('magicCookie'), 'exclude': lambda f: f is None }})
    r"""Magic cookie of the packet."""  
    op: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('op'), 'exclude': lambda f: f is None }})
    r"""Operation code of the packet."""  
    options: Optional[list[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketFieldsOptions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Additional DHCP options of the packet."""  
    secs: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secs'), 'exclude': lambda f: f is None }})
    r"""Number of seconds since receiving the packet."""  
    siaddr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siaddr'), 'exclude': lambda f: f is None }})
    r"""Server IP address of the packet."""  
    sname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sname'), 'exclude': lambda f: f is None }})
    r"""Server identifier address of the packet."""  
    xid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xid'), 'exclude': lambda f: f is None }})
    r"""Transaction id of the packet."""  
    yiaddr: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yiaddr'), 'exclude': lambda f: f is None }})
    r"""Assigned IP address of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketIPDscp:
    r"""DSCP attributes of the packet."""
    
    ecn: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecn'), 'exclude': lambda f: f is None }})
    r"""ECN number of the packet."""  
    tag: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }})
    r"""DSCP tag number of the packet."""  
    
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketIPVersionEnum(str, Enum):
    r"""IP version of the packet."""
    FOUR = '4'
    SIX = '6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketIP:
    r"""Additional IP attributes of the packet."""
    
    dscp: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketIPDscp] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dscp'), 'exclude': lambda f: f is None }})
    r"""DSCP attributes of the packet."""  
    header_length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headerLength'), 'exclude': lambda f: f is None }})
    r"""IP header length of the packet."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""IP ID of the packet."""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""IP length of the packet."""  
    protocol: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""IP protocol number of the packet."""  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})
    r"""Time to live of the packet."""  
    version: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketIPVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""IP version of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketSourceIpv4:
    r"""Source ipv4 attributes of the packet."""
    
    address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Source ipv4 address of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketSource:
    r"""Source of the packet."""
    
    ipv4: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketSourceIpv4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4'), 'exclude': lambda f: f is None }})
    r"""Source ipv4 attributes of the packet."""  
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""Source mac address of the packet."""  
    port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Source port of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketUDP:
    r"""UDP attributes of the packet."""
    
    checksum: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checksum'), 'exclude': lambda f: f is None }})
    r"""UDP checksum of the packet."""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""UDP length of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacket:
    r"""Last packet the server received."""
    
    destination: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketDestination] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destination'), 'exclude': lambda f: f is None }})
    r"""Destination of the packet."""  
    ethernet: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketEthernet] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ethernet'), 'exclude': lambda f: f is None }})
    r"""Additional ethernet attributes of the packet."""  
    fields_: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketFields] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})
    r"""DHCP-specific fields of the packet."""  
    ip: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketIP] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip'), 'exclude': lambda f: f is None }})
    r"""Additional IP attributes of the packet."""  
    source: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source of the packet."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Packet type."""  
    udp: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacketUDP] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udp'), 'exclude': lambda f: f is None }})
    r"""UDP attributes of the packet."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONSeenBy:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Device name."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""Device serial."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""Url link to device."""  
    
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONTypeEnum(str, Enum):
    r"""server type. Can be a 'device', 'stack', or 'discovered' (i.e client)."""
    DEVICE = 'device'
    DISCOVERED = 'discovered'
    STACK = 'stack'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON:
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""Client id of the server if available."""  
    device: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONDevice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device'), 'exclude': lambda f: f is None }})
    r"""Attributes of the server when it's a device."""  
    ipv4: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONIpv4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipv4'), 'exclude': lambda f: f is None }})
    r"""IPv4 attributes of the server."""  
    is_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAllowed'), 'exclude': lambda f: f is None }})
    r"""Whether the server is allowed or blocked. Always true for configured servers."""  
    is_configured: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isConfigured'), 'exclude': lambda f: f is None }})
    r"""Whether the server is configured."""  
    last_ack: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastAck] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastAck'), 'exclude': lambda f: f is None }})
    r"""Attributes of the server's last ack."""  
    last_packet: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONLastPacket] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastPacket'), 'exclude': lambda f: f is None }})
    r"""Last packet the server received."""  
    last_seen_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSeenAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Last time the server was seen."""  
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""Mac address of the server."""  
    seen_by: Optional[list[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONSeenBy]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seenBy'), 'exclude': lambda f: f is None }})
    r"""Devices that saw the server."""  
    type: Optional[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSONTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""server type. Can be a 'device', 'stack', or 'discovered' (i.e client)."""  
    vlan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""Vlan id of the server."""  
    

@dataclasses.dataclass
class GetNetworkSwitchDhcpV4ServersSeenResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_switch_dhcp_v4_servers_seen_200_application_json_objects: Optional[list[GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    