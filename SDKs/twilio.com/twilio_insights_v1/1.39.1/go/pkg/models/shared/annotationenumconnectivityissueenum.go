// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AnnotationEnumConnectivityIssueEnum string

const (
	AnnotationEnumConnectivityIssueEnumUnknownConnectivityIssue AnnotationEnumConnectivityIssueEnum = "unknown_connectivity_issue"
	AnnotationEnumConnectivityIssueEnumNoConnectivityIssue      AnnotationEnumConnectivityIssueEnum = "no_connectivity_issue"
	AnnotationEnumConnectivityIssueEnumInvalidNumber            AnnotationEnumConnectivityIssueEnum = "invalid_number"
	AnnotationEnumConnectivityIssueEnumCallerID                 AnnotationEnumConnectivityIssueEnum = "caller_id"
	AnnotationEnumConnectivityIssueEnumDroppedCall              AnnotationEnumConnectivityIssueEnum = "dropped_call"
	AnnotationEnumConnectivityIssueEnumNumberReachability       AnnotationEnumConnectivityIssueEnum = "number_reachability"
)

func (e *AnnotationEnumConnectivityIssueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unknown_connectivity_issue":
		fallthrough
	case "no_connectivity_issue":
		fallthrough
	case "invalid_number":
		fallthrough
	case "caller_id":
		fallthrough
	case "dropped_call":
		fallthrough
	case "number_reachability":
		*e = AnnotationEnumConnectivityIssueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnnotationEnumConnectivityIssueEnum: %s", s)
	}
}
