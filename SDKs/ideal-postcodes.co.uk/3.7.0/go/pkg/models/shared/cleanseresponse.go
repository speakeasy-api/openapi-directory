// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type CleanseResponseCodeEnum string

const (
	CleanseResponseCodeEnumTwoThousand CleanseResponseCodeEnum = "2000"
)

func (e *CleanseResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = CleanseResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CleanseResponseCodeEnum: %s", s)
	}
}

type CleanseResponseMessageEnum string

const (
	CleanseResponseMessageEnumSuccess CleanseResponseMessageEnum = "Success"
)

func (e *CleanseResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = CleanseResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CleanseResponseMessageEnum: %s", s)
	}
}

type CleanseResponseResultType string

const (
	CleanseResponseResultTypeGbrCleanseMatch   CleanseResponseResultType = "GbrCleanseMatch"
	CleanseResponseResultTypeGbrCleanseNoMatch CleanseResponseResultType = "GbrCleanseNoMatch"
)

type CleanseResponseResult struct {
	GbrCleanseMatch   *GbrCleanseMatch
	GbrCleanseNoMatch *GbrCleanseNoMatch

	Type CleanseResponseResultType
}

func CreateCleanseResponseResultGbrCleanseMatch(gbrCleanseMatch GbrCleanseMatch) CleanseResponseResult {
	typ := CleanseResponseResultTypeGbrCleanseMatch

	return CleanseResponseResult{
		GbrCleanseMatch: &gbrCleanseMatch,
		Type:            typ,
	}
}

func CreateCleanseResponseResultGbrCleanseNoMatch(gbrCleanseNoMatch GbrCleanseNoMatch) CleanseResponseResult {
	typ := CleanseResponseResultTypeGbrCleanseNoMatch

	return CleanseResponseResult{
		GbrCleanseNoMatch: &gbrCleanseNoMatch,
		Type:              typ,
	}
}

func (u *CleanseResponseResult) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	gbrCleanseMatch := new(GbrCleanseMatch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&gbrCleanseMatch); err == nil {
		u.GbrCleanseMatch = gbrCleanseMatch
		u.Type = CleanseResponseResultTypeGbrCleanseMatch
		return nil
	}

	gbrCleanseNoMatch := new(GbrCleanseNoMatch)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&gbrCleanseNoMatch); err == nil {
		u.GbrCleanseNoMatch = gbrCleanseNoMatch
		u.Type = CleanseResponseResultTypeGbrCleanseNoMatch
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CleanseResponseResult) MarshalJSON() ([]byte, error) {
	if u.GbrCleanseMatch != nil {
		return json.Marshal(u.GbrCleanseMatch)
	}

	if u.GbrCleanseNoMatch != nil {
		return json.Marshal(u.GbrCleanseNoMatch)
	}

	return nil, nil
}

// CleanseResponse - Success
type CleanseResponse struct {
	Code    CleanseResponseCodeEnum    `json:"code"`
	Message CleanseResponseMessageEnum `json:"message"`
	Result  CleanseResponseResult      `json:"result"`
}
