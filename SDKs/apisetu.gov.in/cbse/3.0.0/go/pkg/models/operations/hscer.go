// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type HscerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type HscerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Roll No
	Rollno string `json:"rollno"`
	// Year
	Year string `json:"year"`
}

// HscerRequestBodyFormatEnum - The format of the certificate in response.
type HscerRequestBodyFormatEnum string

const (
	HscerRequestBodyFormatEnumXML HscerRequestBodyFormatEnum = "xml"
	HscerRequestBodyFormatEnumPdf HscerRequestBodyFormatEnum = "pdf"
)

func (e HscerRequestBodyFormatEnum) ToPointer() *HscerRequestBodyFormatEnum {
	return &e
}

func (e *HscerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "xml":
		fallthrough
	case "pdf":
		*e = HscerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HscerRequestBodyFormatEnum: %v", v)
	}
}

// HscerRequestBody - Request format
type HscerRequestBody struct {
	CertificateParameters *HscerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format HscerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Hscer504ApplicationJSONErrorEnum string

const (
	Hscer504ApplicationJSONErrorEnumGatewayTimeout Hscer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Hscer504ApplicationJSONErrorEnum) ToPointer() *Hscer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Hscer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Hscer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Hscer504ApplicationJSONErrorDescriptionEnum string

const (
	Hscer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Hscer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Hscer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Hscer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Hscer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Hscer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Hscer504ApplicationJSON - Gateway timeout
type Hscer504ApplicationJSON struct {
	Error            *Hscer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hscer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hscer503ApplicationJSONErrorEnum string

const (
	Hscer503ApplicationJSONErrorEnumServiceUnavailable Hscer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Hscer503ApplicationJSONErrorEnum) ToPointer() *Hscer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Hscer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Hscer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Hscer503ApplicationJSONErrorDescriptionEnum string

const (
	Hscer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Hscer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Hscer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Hscer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Hscer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Hscer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Hscer503ApplicationJSON - Service unavailable
type Hscer503ApplicationJSON struct {
	Error            *Hscer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hscer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hscer502ApplicationJSONErrorEnum string

const (
	Hscer502ApplicationJSONErrorEnumBadGatewy Hscer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Hscer502ApplicationJSONErrorEnum) ToPointer() *Hscer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Hscer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Hscer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Hscer502ApplicationJSONErrorDescriptionEnum string

const (
	Hscer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Hscer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Hscer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Hscer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Hscer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Hscer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Hscer502ApplicationJSON - Bad gateway
type Hscer502ApplicationJSON struct {
	Error            *Hscer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hscer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hscer500ApplicationJSONErrorEnum string

const (
	Hscer500ApplicationJSONErrorEnumInternalServerError Hscer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Hscer500ApplicationJSONErrorEnum) ToPointer() *Hscer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Hscer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Hscer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Hscer500ApplicationJSONErrorDescriptionEnum string

const (
	Hscer500ApplicationJSONErrorDescriptionEnumInternalServerError Hscer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Hscer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Hscer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Hscer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Hscer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Hscer500ApplicationJSON - Internal server error
type Hscer500ApplicationJSON struct {
	Error            *Hscer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hscer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hscer404ApplicationJSONErrorEnum string

const (
	Hscer404ApplicationJSONErrorEnumRecordNotFound Hscer404ApplicationJSONErrorEnum = "record_not_found"
	Hscer404ApplicationJSONErrorEnumURLNotFound    Hscer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Hscer404ApplicationJSONErrorEnum) ToPointer() *Hscer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Hscer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Hscer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Hscer404ApplicationJSONErrorDescriptionEnum string

const (
	Hscer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Hscer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Hscer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Hscer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Hscer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Hscer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Hscer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Hscer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Hscer404ApplicationJSON - No record found
type Hscer404ApplicationJSON struct {
	Error            *Hscer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hscer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hscer401ApplicationJSONErrorEnum string

const (
	Hscer401ApplicationJSONErrorEnumInvalidAuthentication Hscer401ApplicationJSONErrorEnum = "invalid_authentication"
	Hscer401ApplicationJSONErrorEnumInvalidAuthorization  Hscer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Hscer401ApplicationJSONErrorEnum) ToPointer() *Hscer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Hscer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Hscer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Hscer401ApplicationJSONErrorDescriptionEnum string

const (
	Hscer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Hscer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Hscer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Hscer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Hscer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Hscer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Hscer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Hscer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Hscer401ApplicationJSON - Unauthorized access
type Hscer401ApplicationJSON struct {
	Error            *Hscer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hscer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Hscer400ApplicationJSONErrorEnum string

const (
	Hscer400ApplicationJSONErrorEnumMissingParameter Hscer400ApplicationJSONErrorEnum = "missing_parameter"
	Hscer400ApplicationJSONErrorEnumInvalidParameter Hscer400ApplicationJSONErrorEnum = "invalid_parameter"
	Hscer400ApplicationJSONErrorEnumInvalidFormat    Hscer400ApplicationJSONErrorEnum = "invalid_format"
	Hscer400ApplicationJSONErrorEnumInvalidTxnid     Hscer400ApplicationJSONErrorEnum = "invalid_txnid"
	Hscer400ApplicationJSONErrorEnumInvalidConsentid Hscer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Hscer400ApplicationJSONErrorEnum) ToPointer() *Hscer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Hscer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Hscer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Hscer400ApplicationJSONErrorDescriptionEnum string

const (
	Hscer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Hscer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Hscer400ApplicationJSONErrorDescriptionEnumBadRequest                              Hscer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Hscer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Hscer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Hscer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Hscer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Hscer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Hscer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Hscer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Hscer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Hscer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Hscer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Hscer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Hscer400ApplicationJSON - Bad request
type Hscer400ApplicationJSON struct {
	Error            *Hscer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Hscer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type HscerResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Hscer400ApplicationJSONObject *Hscer400ApplicationJSON
	// Unauthorized access
	Hscer401ApplicationJSONObject *Hscer401ApplicationJSON
	// No record found
	Hscer404ApplicationJSONObject *Hscer404ApplicationJSON
	// Internal server error
	Hscer500ApplicationJSONObject *Hscer500ApplicationJSON
	// Bad gateway
	Hscer502ApplicationJSONObject *Hscer502ApplicationJSON
	// Service unavailable
	Hscer503ApplicationJSONObject *Hscer503ApplicationJSON
	// Gateway timeout
	Hscer504ApplicationJSONObject *Hscer504ApplicationJSON
}
