// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ClickwrapEntityUseWithBundlesEnum - Use this Clickwrap for Bundles?
type ClickwrapEntityUseWithBundlesEnum string

const (
	ClickwrapEntityUseWithBundlesEnumNone      ClickwrapEntityUseWithBundlesEnum = "none"
	ClickwrapEntityUseWithBundlesEnumAvailable ClickwrapEntityUseWithBundlesEnum = "available"
	ClickwrapEntityUseWithBundlesEnumRequire   ClickwrapEntityUseWithBundlesEnum = "require"
)

func (e ClickwrapEntityUseWithBundlesEnum) ToPointer() *ClickwrapEntityUseWithBundlesEnum {
	return &e
}

func (e *ClickwrapEntityUseWithBundlesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "available":
		fallthrough
	case "require":
		*e = ClickwrapEntityUseWithBundlesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClickwrapEntityUseWithBundlesEnum: %v", v)
	}
}

// ClickwrapEntityUseWithInboxesEnum - Use this Clickwrap for Inboxes?
type ClickwrapEntityUseWithInboxesEnum string

const (
	ClickwrapEntityUseWithInboxesEnumNone      ClickwrapEntityUseWithInboxesEnum = "none"
	ClickwrapEntityUseWithInboxesEnumAvailable ClickwrapEntityUseWithInboxesEnum = "available"
	ClickwrapEntityUseWithInboxesEnumRequire   ClickwrapEntityUseWithInboxesEnum = "require"
)

func (e ClickwrapEntityUseWithInboxesEnum) ToPointer() *ClickwrapEntityUseWithInboxesEnum {
	return &e
}

func (e *ClickwrapEntityUseWithInboxesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "available":
		fallthrough
	case "require":
		*e = ClickwrapEntityUseWithInboxesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClickwrapEntityUseWithInboxesEnum: %v", v)
	}
}

// ClickwrapEntityUseWithUsersEnum - Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.
type ClickwrapEntityUseWithUsersEnum string

const (
	ClickwrapEntityUseWithUsersEnumNone    ClickwrapEntityUseWithUsersEnum = "none"
	ClickwrapEntityUseWithUsersEnumRequire ClickwrapEntityUseWithUsersEnum = "require"
)

func (e ClickwrapEntityUseWithUsersEnum) ToPointer() *ClickwrapEntityUseWithUsersEnum {
	return &e
}

func (e *ClickwrapEntityUseWithUsersEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "require":
		*e = ClickwrapEntityUseWithUsersEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ClickwrapEntityUseWithUsersEnum: %v", v)
	}
}

// ClickwrapEntity - Create Clickwrap
type ClickwrapEntity struct {
	// Body text of Clickwrap (supports Markdown formatting).
	Body *string `json:"body,omitempty"`
	// Clickwrap ID
	ID *int `json:"id,omitempty"`
	// Name of the Clickwrap agreement (used when selecting from multiple Clickwrap agreements.)
	Name *string `json:"name,omitempty"`
	// Use this Clickwrap for Bundles?
	UseWithBundles *ClickwrapEntityUseWithBundlesEnum `json:"use_with_bundles,omitempty"`
	// Use this Clickwrap for Inboxes?
	UseWithInboxes *ClickwrapEntityUseWithInboxesEnum `json:"use_with_inboxes,omitempty"`
	// Use this Clickwrap for User Registrations?  Note: This only applies to User Registrations where the User is invited to your Files.com site using an E-Mail invitation process where they then set their own password.
	UseWithUsers *ClickwrapEntityUseWithUsersEnum `json:"use_with_users,omitempty"`
}
