/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SavedAttachedDisk - DEPRECATED: Please use compute#savedDisk instead. An instance-attached disk resource.
 */
public class SavedAttachedDisk {
    /**
     * Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoDelete")
    public Boolean autoDelete;

    public SavedAttachedDisk withAutoDelete(Boolean autoDelete) {
        this.autoDelete = autoDelete;
        return this;
    }
    
    /**
     * Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boot")
    public Boolean boot;

    public SavedAttachedDisk withBoot(Boolean boot) {
        this.boot = boot;
        return this;
    }
    
    /**
     * Specifies the name of the disk attached to the source instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceName")
    public String deviceName;

    public SavedAttachedDisk withDeviceName(String deviceName) {
        this.deviceName = deviceName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskEncryptionKey")
    public CustomerEncryptionKey diskEncryptionKey;

    public SavedAttachedDisk withDiskEncryptionKey(CustomerEncryptionKey diskEncryptionKey) {
        this.diskEncryptionKey = diskEncryptionKey;
        return this;
    }
    
    /**
     * The size of the disk in base-2 GB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskSizeGb")
    public String diskSizeGb;

    public SavedAttachedDisk withDiskSizeGb(String diskSizeGb) {
        this.diskSizeGb = diskSizeGb;
        return this;
    }
    
    /**
     * [Output Only] URL of the disk type resource. For example: projects/project /zones/zone/diskTypes/pd-standard or pd-ssd
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskType")
    public String diskType;

    public SavedAttachedDisk withDiskType(String diskType) {
        this.diskType = diskType;
        return this;
    }
    
    /**
     * A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestOsFeatures")
    public GuestOsFeature[] guestOsFeatures;

    public SavedAttachedDisk withGuestOsFeatures(GuestOsFeature[] guestOsFeatures) {
        this.guestOsFeatures = guestOsFeatures;
        return this;
    }
    
    /**
     * Specifies zero-based index of the disk that is attached to the source instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    public Integer index;

    public SavedAttachedDisk withIndex(Integer index) {
        this.index = index;
        return this;
    }
    
    /**
     * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interface")
    public SavedAttachedDiskInterfaceEnum interface_;

    public SavedAttachedDisk withInterface(SavedAttachedDiskInterfaceEnum interface_) {
        this.interface_ = interface_;
        return this;
    }
    
    /**
     * [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public SavedAttachedDisk withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * [Output Only] Any valid publicly visible licenses.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licenses")
    public String[] licenses;

    public SavedAttachedDisk withLicenses(String[] licenses) {
        this.licenses = licenses;
        return this;
    }
    
    /**
     * The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mode")
    public SavedAttachedDiskModeEnum mode;

    public SavedAttachedDisk withMode(SavedAttachedDiskModeEnum mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * Specifies a URL of the disk attached to the source instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public String source;

    public SavedAttachedDisk withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * [Output Only] A size of the storage used by the disk's snapshot by this machine image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageBytes")
    public String storageBytes;

    public SavedAttachedDisk withStorageBytes(String storageBytes) {
        this.storageBytes = storageBytes;
        return this;
    }
    
    /**
     * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageBytesStatus")
    public SavedAttachedDiskStorageBytesStatusEnum storageBytesStatus;

    public SavedAttachedDisk withStorageBytesStatus(SavedAttachedDiskStorageBytesStatusEnum storageBytesStatus) {
        this.storageBytesStatus = storageBytesStatus;
        return this;
    }
    
    /**
     * Specifies the type of the attached disk, either SCRATCH or PERSISTENT.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public SavedAttachedDiskTypeEnum type;

    public SavedAttachedDisk withType(SavedAttachedDiskTypeEnum type) {
        this.type = type;
        return this;
    }
    
    public SavedAttachedDisk(){}
}
