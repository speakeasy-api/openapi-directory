/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VideoStatus - Basic details about a video category, such as its localized title. Next Id: 18
 */
public class VideoStatus {
    /**
     * This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embeddable")
    public Boolean embeddable;

    public VideoStatus withEmbeddable(Boolean embeddable) {
        this.embeddable = embeddable;
        return this;
    }
    
    /**
     * This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failureReason")
    public VideoStatusFailureReasonEnum failureReason;

    public VideoStatus withFailureReason(VideoStatusFailureReasonEnum failureReason) {
        this.failureReason = failureReason;
        return this;
    }
    
    /**
     * The video's license. @mutable youtube.videos.insert youtube.videos.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    public VideoStatusLicenseEnum license;

    public VideoStatus withLicense(VideoStatusLicenseEnum license) {
        this.license = license;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("madeForKids")
    public Boolean madeForKids;

    public VideoStatus withMadeForKids(Boolean madeForKids) {
        this.madeForKids = madeForKids;
        return this;
    }
    
    /**
     * The video's privacy status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privacyStatus")
    public VideoStatusPrivacyStatusEnum privacyStatus;

    public VideoStatus withPrivacyStatus(VideoStatusPrivacyStatusEnum privacyStatus) {
        this.privacyStatus = privacyStatus;
        return this;
    }
    
    /**
     * This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicStatsViewable")
    public Boolean publicStatsViewable;

    public VideoStatus withPublicStatsViewable(Boolean publicStatsViewable) {
        this.publicStatsViewable = publicStatsViewable;
        return this;
    }
    
    /**
     * The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("publishAt")
    public OffsetDateTime publishAt;

    public VideoStatus withPublishAt(OffsetDateTime publishAt) {
        this.publishAt = publishAt;
        return this;
    }
    
    /**
     * This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejectionReason")
    public VideoStatusRejectionReasonEnum rejectionReason;

    public VideoStatus withRejectionReason(VideoStatusRejectionReasonEnum rejectionReason) {
        this.rejectionReason = rejectionReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfDeclaredMadeForKids")
    public Boolean selfDeclaredMadeForKids;

    public VideoStatus withSelfDeclaredMadeForKids(Boolean selfDeclaredMadeForKids) {
        this.selfDeclaredMadeForKids = selfDeclaredMadeForKids;
        return this;
    }
    
    /**
     * The status of the uploaded video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uploadStatus")
    public VideoStatusUploadStatusEnum uploadStatus;

    public VideoStatus withUploadStatus(VideoStatusUploadStatusEnum uploadStatus) {
        this.uploadStatus = uploadStatus;
        return this;
    }
    
    public VideoStatus(){}
}
