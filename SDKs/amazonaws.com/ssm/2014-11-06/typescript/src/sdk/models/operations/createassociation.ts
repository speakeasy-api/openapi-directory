/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreateAssociationXAmzTargetEnum {
  AmazonSSMCreateAssociation = "AmazonSSM.CreateAssociation",
}

export class CreateAssociationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createAssociationRequest: shared.CreateAssociationRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreateAssociationXAmzTargetEnum;
}

export class CreateAssociationResponse extends SpeakeasyBase {
  /**
   * AssociationAlreadyExists
   */
  @SpeakeasyMetadata()
  associationAlreadyExists?: any;

  /**
   * AssociationLimitExceeded
   */
  @SpeakeasyMetadata()
  associationLimitExceeded?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createAssociationResult?: shared.CreateAssociationResult;

  /**
   * InternalServerError
   */
  @SpeakeasyMetadata()
  internalServerError?: any;

  /**
   * InvalidDocument
   */
  @SpeakeasyMetadata()
  invalidDocument?: any;

  /**
   * InvalidDocumentVersion
   */
  @SpeakeasyMetadata()
  invalidDocumentVersion?: any;

  /**
   * InvalidInstanceId
   */
  @SpeakeasyMetadata()
  invalidInstanceId?: any;

  /**
   * InvalidOutputLocation
   */
  @SpeakeasyMetadata()
  invalidOutputLocation?: any;

  /**
   * InvalidParameters
   */
  @SpeakeasyMetadata()
  invalidParameters?: any;

  /**
   * InvalidSchedule
   */
  @SpeakeasyMetadata()
  invalidSchedule?: any;

  /**
   * InvalidTag
   */
  @SpeakeasyMetadata()
  invalidTag?: any;

  /**
   * InvalidTarget
   */
  @SpeakeasyMetadata()
  invalidTarget?: any;

  /**
   * InvalidTargetMaps
   */
  @SpeakeasyMetadata()
  invalidTargetMaps?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UnsupportedPlatformType
   */
  @SpeakeasyMetadata()
  unsupportedPlatformType?: any;
}
