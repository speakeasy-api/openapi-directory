// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GetListofCardsCardsCardProviderEnum - card provider
type GetListofCardsCardsCardProviderEnum string

const (
	GetListofCardsCardsCardProviderEnumMastercard GetListofCardsCardsCardProviderEnum = "MASTERCARD"
)

func (e *GetListofCardsCardsCardProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MASTERCARD":
		*e = GetListofCardsCardsCardProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetListofCardsCardsCardProviderEnum: %s", s)
	}
}

// GetListofCardsCardsCardStatusEnum - card status
type GetListofCardsCardsCardStatusEnum string

const (
	GetListofCardsCardsCardStatusEnumLive            GetListofCardsCardsCardStatusEnum = "LIVE"
	GetListofCardsCardsCardStatusEnumCreatedActive   GetListofCardsCardsCardStatusEnum = "CREATED_ACTIVE"
	GetListofCardsCardsCardStatusEnumCreatedInactive GetListofCardsCardsCardStatusEnum = "CREATED_INACTIVE"
	GetListofCardsCardsCardStatusEnumDeactivated     GetListofCardsCardsCardStatusEnum = "DEACTIVATED"
)

func (e *GetListofCardsCardsCardStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LIVE":
		fallthrough
	case "CREATED_ACTIVE":
		fallthrough
	case "CREATED_INACTIVE":
		fallthrough
	case "DEACTIVATED":
		*e = GetListofCardsCardsCardStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetListofCardsCardsCardStatusEnum: %s", s)
	}
}

// GetListofCardsCardsCardStatusReasonEnum - reason for card status
type GetListofCardsCardsCardStatusReasonEnum string

const (
	GetListofCardsCardsCardStatusReasonEnumLostCard      GetListofCardsCardsCardStatusReasonEnum = "LOST_CARD"
	GetListofCardsCardsCardStatusReasonEnumStolenCard    GetListofCardsCardsCardStatusReasonEnum = "STOLEN_CARD"
	GetListofCardsCardsCardStatusReasonEnumCardDestroyed GetListofCardsCardsCardStatusReasonEnum = "CARD_DESTROYED"
)

func (e *GetListofCardsCardsCardStatusReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOST_CARD":
		fallthrough
	case "STOLEN_CARD":
		fallthrough
	case "CARD_DESTROYED":
		*e = GetListofCardsCardsCardStatusReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetListofCardsCardsCardStatusReasonEnum: %s", s)
	}
}

type GetListofCardsCardsCard struct {
	// Whether the card is blocked or not
	Blocked *bool `json:"blocked,omitempty"`
	// card id assigned by fire.com
	CardID *int64 `json:"cardId,omitempty"`
	// The date-time the card was created
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	// card user email address
	EmailAddress *string `json:"emailAddress,omitempty"`
	// identifier for the eur fire.com account (assigned by fire.com)
	EurIcan *int64 `json:"eurIcan,omitempty"`
	// card expiry date
	ExpiryDate *time.Time `json:"expiryDate,omitempty"`
	// card user first name
	FirstName *string `json:"firstName,omitempty"`
	// identifier for the gbp fire.com account (assigned by fire.com)
	GbpIcan *int64 `json:"gbpIcan,omitempty"`
	// card user last name
	LastName *string `json:"lastName,omitempty"`
	// card number (masked)
	MaskedPan *string `json:"maskedPan,omitempty"`
	// card provider
	Provider *GetListofCardsCardsCardProviderEnum `json:"provider,omitempty"`
	// card status
	Status *GetListofCardsCardsCardStatusEnum `json:"status,omitempty"`
	// reason for card status
	StatusReason *GetListofCardsCardsCardStatusReasonEnum `json:"statusReason,omitempty"`
	// card user id assigned by fire.com
	UserID *int64 `json:"userId,omitempty"`
}

// GetListofCardsCards - Successful response
type GetListofCardsCards struct {
	Cards []GetListofCardsCardsCard `json:"cards,omitempty"`
}

type GetListofCardsResponse struct {
	// Successful response
	Cards       *GetListofCardsCards
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
