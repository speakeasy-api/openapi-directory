// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum - Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved
type UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum string

const (
	UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnumBalanced     UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum = "balanced"
	UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnumConnectivity UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum = "connectivity"
	UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnumSecurity     UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum = "security"
)

func (e UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum) ToPointer() *UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum {
	return &e
}

func (e *UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "balanced":
		fallthrough
	case "connectivity":
		fallthrough
	case "security":
		*e = UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum: %v", v)
	}
}

// UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum - Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
type UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum string

const (
	UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnumDetection  UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum = "detection"
	UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnumDisabled   UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum = "disabled"
	UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnumPrevention UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum = "prevention"
)

func (e UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum) ToPointer() *UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum {
	return &e
}

func (e *UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "detection":
		fallthrough
	case "disabled":
		fallthrough
	case "prevention":
		*e = UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum: %v", v)
	}
}

// UpdateNetworkApplianceSecurityIntrusionRequestBodyProtectedNetworks - Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode
type UpdateNetworkApplianceSecurityIntrusionRequestBodyProtectedNetworks struct {
	// list of IP addresses or subnets being excluded from protection (required if 'useDefault' is false)
	ExcludedCidr []string `json:"excludedCidr,omitempty"`
	// list of IP addresses or subnets being protected (required if 'useDefault' is false)
	IncludedCidr []string `json:"includedCidr,omitempty"`
	// true/false whether to use special IPv4 addresses: https://tools.ietf.org/html/rfc5735 (required). Default value is true if none currently saved
	UseDefault *bool `json:"useDefault,omitempty"`
}

type UpdateNetworkApplianceSecurityIntrusionRequestBody struct {
	// Set the detection ruleset 'connectivity'/'balanced'/'security' (optional - omitting will leave current config unchanged). Default value is 'balanced' if none currently saved
	IdsRulesets *UpdateNetworkApplianceSecurityIntrusionRequestBodyIdsRulesetsEnum `json:"idsRulesets,omitempty"`
	// Set mode to 'disabled'/'detection'/'prevention' (optional - omitting will leave current config unchanged)
	Mode *UpdateNetworkApplianceSecurityIntrusionRequestBodyModeEnum `json:"mode,omitempty"`
	// Set the included/excluded networks from the intrusion engine (optional - omitting will leave current config unchanged). This is available only in 'passthrough' mode
	ProtectedNetworks *UpdateNetworkApplianceSecurityIntrusionRequestBodyProtectedNetworks `json:"protectedNetworks,omitempty"`
}

type UpdateNetworkApplianceSecurityIntrusionRequest struct {
	RequestBody *UpdateNetworkApplianceSecurityIntrusionRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                              `pathParam:"style=simple,explode=false,name=networkId"`
}

type UpdateNetworkApplianceSecurityIntrusionResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkApplianceSecurityIntrusion200ApplicationJSONObject map[string]interface{}
}
