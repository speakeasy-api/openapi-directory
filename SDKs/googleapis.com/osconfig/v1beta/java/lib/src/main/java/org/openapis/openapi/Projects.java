/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Create an OS Config guest policy.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesCreateResponse osconfigProjectsGuestPoliciesCreate(org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesCreateRequest request, org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesCreateRequest.class, baseUrl, "/v1beta/{parent}/guestPolicies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "guestPolicyInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesCreateResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesCreateResponse(contentType, httpRes.statusCode()) {{
            guestPolicy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GuestPolicy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GuestPolicy.class);
                res.guestPolicy = out;
            }
        }

        return res;
    }

    /**
     * Get a page of OS Config guest policies.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesListResponse osconfigProjectsGuestPoliciesList(org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesListRequest request, org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesListRequest.class, baseUrl, "/v1beta/{parent}/guestPolicies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesListResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsGuestPoliciesListResponse(contentType, httpRes.statusCode()) {{
            listGuestPoliciesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListGuestPoliciesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListGuestPoliciesResponse.class);
                res.listGuestPoliciesResponse = out;
            }
        }

        return res;
    }

    /**
     * Create an OS Config patch deployment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsCreateResponse osconfigProjectsPatchDeploymentsCreate(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsCreateRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsCreateRequest.class, baseUrl, "/v1beta/{parent}/patchDeployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "patchDeploymentInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsCreateResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsCreateResponse(contentType, httpRes.statusCode()) {{
            patchDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PatchDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PatchDeployment.class);
                res.patchDeployment = out;
            }
        }

        return res;
    }

    /**
     * Delete an OS Config patch deployment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsDeleteResponse osconfigProjectsPatchDeploymentsDelete(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsDeleteRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsDeleteRequest.class, baseUrl, "/v1beta/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsDeleteResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsDeleteResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Get a page of OS Config patch deployments.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsListResponse osconfigProjectsPatchDeploymentsList(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsListRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsListRequest.class, baseUrl, "/v1beta/{parent}/patchDeployments", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsListResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsListResponse(contentType, httpRes.statusCode()) {{
            listPatchDeploymentsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListPatchDeploymentsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListPatchDeploymentsResponse.class);
                res.listPatchDeploymentsResponse = out;
            }
        }

        return res;
    }

    /**
     * Update an OS Config patch deployment.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPatchResponse osconfigProjectsPatchDeploymentsPatch(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPatchRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPatchRequest.class, baseUrl, "/v1beta/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "patchDeploymentInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPatchResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPatchResponse(contentType, httpRes.statusCode()) {{
            patchDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PatchDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PatchDeployment.class);
                res.patchDeployment = out;
            }
        }

        return res;
    }

    /**
     * Change state of patch deployment to "PAUSED". Patch deployment in paused state doesn't generate patch jobs.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPauseResponse osconfigProjectsPatchDeploymentsPause(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPauseRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPauseSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPauseRequest.class, baseUrl, "/v1beta/{name}:pause", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPauseRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPauseResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsPauseResponse(contentType, httpRes.statusCode()) {{
            patchDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PatchDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PatchDeployment.class);
                res.patchDeployment = out;
            }
        }

        return res;
    }

    /**
     * Change state of patch deployment back to "ACTIVE". Patch deployment in active state continues to generate patch jobs.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsResumeResponse osconfigProjectsPatchDeploymentsResume(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsResumeRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsResumeSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsResumeRequest.class, baseUrl, "/v1beta/{name}:resume", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsResumeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsResumeResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchDeploymentsResumeResponse(contentType, httpRes.statusCode()) {{
            patchDeployment = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PatchDeployment out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PatchDeployment.class);
                res.patchDeployment = out;
            }
        }

        return res;
    }

    /**
     * Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsCancelResponse osconfigProjectsPatchJobsCancel(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsCancelRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsCancelSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsCancelRequest.class, baseUrl, "/v1beta/{name}:cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsCancelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsCancelResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsCancelResponse(contentType, httpRes.statusCode()) {{
            patchJob = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PatchJob out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PatchJob.class);
                res.patchJob = out;
            }
        }

        return res;
    }

    /**
     * Patch VM instances by creating and running a patch job.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsExecuteResponse osconfigProjectsPatchJobsExecute(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsExecuteRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsExecuteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsExecuteRequest.class, baseUrl, "/v1beta/{parent}/patchJobs:execute", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "executePatchJobRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsExecuteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsExecuteResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsExecuteResponse(contentType, httpRes.statusCode()) {{
            patchJob = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PatchJob out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PatchJob.class);
                res.patchJob = out;
            }
        }

        return res;
    }

    /**
     * Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsGetResponse osconfigProjectsPatchJobsGet(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsGetRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsGetRequest.class, baseUrl, "/v1beta/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsGetResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsGetResponse(contentType, httpRes.statusCode()) {{
            patchJob = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PatchJob out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PatchJob.class);
                res.patchJob = out;
            }
        }

        return res;
    }

    /**
     * Get a list of instance details for a given patch job.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse osconfigProjectsPatchJobsInstanceDetailsList(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsInstanceDetailsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest.class, baseUrl, "/v1beta/{parent}/instanceDetails", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsInstanceDetailsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsInstanceDetailsListResponse(contentType, httpRes.statusCode()) {{
            listPatchJobInstanceDetailsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListPatchJobInstanceDetailsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListPatchJobInstanceDetailsResponse.class);
                res.listPatchJobInstanceDetailsResponse = out;
            }
        }

        return res;
    }

    /**
     * Get a list of patch jobs.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsListResponse osconfigProjectsPatchJobsList(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsListRequest request, org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsListRequest.class, baseUrl, "/v1beta/{parent}/patchJobs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsListResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsPatchJobsListResponse(contentType, httpRes.statusCode()) {{
            listPatchJobsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListPatchJobsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListPatchJobsResponse.class);
                res.listPatchJobsResponse = out;
            }
        }

        return res;
    }

    /**
     * Lookup the effective guest policy that applies to a VM instance. This lookup merges all policies that are assigned to the instance ancestry.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.OsconfigProjectsZonesInstancesLookupEffectiveGuestPolicyResponse osconfigProjectsZonesInstancesLookupEffectiveGuestPolicy(org.openapis.openapi.models.operations.OsconfigProjectsZonesInstancesLookupEffectiveGuestPolicyRequest request, org.openapis.openapi.models.operations.OsconfigProjectsZonesInstancesLookupEffectiveGuestPolicySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.OsconfigProjectsZonesInstancesLookupEffectiveGuestPolicyRequest.class, baseUrl, "/v1beta/{instance}:lookupEffectiveGuestPolicy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "lookupEffectiveGuestPolicyRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.OsconfigProjectsZonesInstancesLookupEffectiveGuestPolicyRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.OsconfigProjectsZonesInstancesLookupEffectiveGuestPolicyResponse res = new org.openapis.openapi.models.operations.OsconfigProjectsZonesInstancesLookupEffectiveGuestPolicyResponse(contentType, httpRes.statusCode()) {{
            effectiveGuestPolicy = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.EffectiveGuestPolicy out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.EffectiveGuestPolicy.class);
                res.effectiveGuestPolicy = out;
            }
        }

        return res;
    }
}