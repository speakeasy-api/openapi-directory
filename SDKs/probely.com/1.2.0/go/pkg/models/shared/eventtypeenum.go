// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EventTypeEnum - Event type:
// - `user_created` new user added to account
// - `user_deleted` user deleted from account
// - `target_created` new target added to account
// - `target_deleted` target deleted from account
// - `target_verified` target ownership verified
// - `target_verification_failed` target ownership verification failed
// - `scan_started` scan started on target
// - `scan_canceled` scan on target canceled
// - `scan_completed` scan finished with successfuly
// - `scan_failed` scan finished unsuccessfuly
// - `finding_detected` new finding detected (not found before)
// - `finding_fixed` finding was fixed
type EventTypeEnum string

const (
	EventTypeEnumUserCreated              EventTypeEnum = "user_created"
	EventTypeEnumUserDeleted              EventTypeEnum = "user_deleted"
	EventTypeEnumTargetCreated            EventTypeEnum = "target_created"
	EventTypeEnumTargetDeleted            EventTypeEnum = "target_deleted"
	EventTypeEnumTargetVerified           EventTypeEnum = "target_verified"
	EventTypeEnumTargetVerificationFailed EventTypeEnum = "target_verification_failed"
	EventTypeEnumScanStarted              EventTypeEnum = "scan_started"
	EventTypeEnumScanCanceled             EventTypeEnum = "scan_canceled"
	EventTypeEnumScanCompleted            EventTypeEnum = "scan_completed"
	EventTypeEnumScanFailed               EventTypeEnum = "scan_failed"
	EventTypeEnumFindingDetected          EventTypeEnum = "finding_detected"
	EventTypeEnumFindingFixed             EventTypeEnum = "finding_fixed"
)

func (e *EventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "user_created":
		fallthrough
	case "user_deleted":
		fallthrough
	case "target_created":
		fallthrough
	case "target_deleted":
		fallthrough
	case "target_verified":
		fallthrough
	case "target_verification_failed":
		fallthrough
	case "scan_started":
		fallthrough
	case "scan_canceled":
		fallthrough
	case "scan_completed":
		fallthrough
	case "scan_failed":
		fallthrough
	case "finding_detected":
		fallthrough
	case "finding_fixed":
		*e = EventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EventTypeEnum: %s", s)
	}
}
