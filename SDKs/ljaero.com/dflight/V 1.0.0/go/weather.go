// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// weather - #### Hourly forecast values for the following flight-impacting weather elements:
// * Cloud Ceiling (CIG)
// * Dewpoint Temperature (DEWPT)
// * Cloud Cover (SKY)
// * Air Temperature (TEMP)
// * Visibility (VIS)
// * Wind Direction (WINDDIR)
// * Wind Speed (WINDSPEED)
// * Wind Gust Speed (WINDGUST)
type weather struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newWeather(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *weather {
	return &weather{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// WxByDistanceUsV1WxForecastDistanceQueryPost - Retrieve forecast values within given distance of location for all requested weather elements and time periods.
// Retrieve forecast values for selected weather elements and time period. Request body parameters are:
// * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
// * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
// * distance:  distance in meters (max allowed value is 25000)
// * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
// * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
//
// The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
// properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
// * CIG: meters AGL
// * DEWPT: degrees Celsius
// * SKY: % cloud cover
// * TEMP: degrees Celsius
// * VIS: meters
// * WINDDIR: degrees true
// * WINDGUST: meters/sec
// * WINDSPEED: meters/sec
func (s *weather) WxByDistanceUsV1WxForecastDistanceQueryPost(ctx context.Context, request operations.WxByDistanceUsV1WxForecastDistanceQueryPostRequest) (*operations.WxByDistanceUsV1WxForecastDistanceQueryPostResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/us/v1/wx-forecast/distance-query"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "WxByDistance", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.WxByDistanceUsV1WxForecastDistanceQueryPostResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.WxDistanceResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.WxDistanceResponse = out
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.HTTPValidationError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.HTTPValidationError = out
		}
	}

	return res, nil
}

// WxByPolyUsV1WxForecastPolygonQueryPost - Retrieve forecast values within given GeoJSON polygon for all requested weather elements and time periods.
// Retrieve forecast values located within given area for requested weather elements and time period. Request body parameters are:
// * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
// * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
// * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
//
// The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
// properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
// * CIG: meters AGL
// * DEWPT: degrees Celsius
// * SKY: % cloud cover
// * TEMP: degrees Celsius
// * VIS: meters
// * WINDDIR: degrees true
// * WINDGUST: meters/sec
// * WINDSPEED: meters/sec
func (s *weather) WxByPolyUsV1WxForecastPolygonQueryPost(ctx context.Context, request operations.WxByPolyUsV1WxForecastPolygonQueryPostRequest) (*operations.WxByPolyUsV1WxForecastPolygonQueryPostResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/us/v1/wx-forecast/polygon-query"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "WxByPolygon", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.WxByPolyUsV1WxForecastPolygonQueryPostResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.WxPolyResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.WxPolyResponse = out
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.HTTPValidationError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.HTTPValidationError = out
		}
	}

	return res, nil
}

// WxByRouteUsV1WxForecastRouteQueryPost - Retrieve forecast values along a route for all requested weather elements and time periods.
// Retrieve forecast values along route for requested weather elements and time period. Request body parameters are:
// * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
// * wxtypes:  list of one or more weather forecast elements you wish to retrieve. Allowed values are "CIG", "DEWPT", "SKY", "TEMP", "VIS", "WINDDIR", "WINDGUST", "WINDSPEED".
// * hours:  number of hourly forecasts to return (1-24). For current hour only you should enter value of 1. To also retrieve values for each of the next n hours, enter n.
//
// The response will consist of a GeoJSON FeatureCollection with one Feature for each forecast location found within requested area,
// properties of which will include an ordered list of forecast values for each requested weather element, for each requested hour. Units for each element are as follows:
// * CIG: meters AGL
// * DEWPT: degrees Celsius
// * SKY: % cloud cover
// * TEMP: degrees Celsius
// * VIS: meters
// * WINDDIR: degrees true
// * WINDGUST: meters/sec
// * WINDSPEED: meters/sec
func (s *weather) WxByRouteUsV1WxForecastRouteQueryPost(ctx context.Context, request operations.WxByRouteUsV1WxForecastRouteQueryPostRequest) (*operations.WxByRouteUsV1WxForecastRouteQueryPostResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/us/v1/wx-forecast/route-query"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "WxByRoute", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.WxByRouteUsV1WxForecastRouteQueryPostResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.WxRouteResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.WxRouteResponse = out
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.HTTPValidationError
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.HTTPValidationError = out
		}
	}

	return res, nil
}
