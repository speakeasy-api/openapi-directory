"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class CreateStoredCredentialProfileRequestActionEnum(str, Enum):
    r"""Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
    
    * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    
      Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
      
      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    
    
    * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    """
    ACTIVATE = 'Activate'
    PERSIST = 'Persist'

class CreateStoredCredentialProfileRequestConsentAgreementSrcEnum(str, Enum):
    EXTERNAL = 'External'

class CreateStoredCredentialProfileRequestStatusEnum(str, Enum):
    r"""Specifies the status of the stored credential profile.
    
    * `Active` - Use this value if you are creating the stored credential profile after receiving the customer's consent, or if the stored credential profile represents a stored credential profile in an external system.
    
      You can use the `action` field to specify how Zuora activates the stored credential profile.
    
    
    * `Agreed` - Use this value if you are migrating the payment method to the stored credential transaction framework.
    
      In this case, Zuora will not send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile.
    """
    AGREED = 'Agreed'
    ACTIVE = 'Active'

class CreateStoredCredentialProfileRequestTypeEnum(str, Enum):
    RECURRING = 'Recurring'
    UNSCHEDULED = 'Unscheduled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateStoredCredentialProfileRequest:
    
    consent_agreement_src: CreateStoredCredentialProfileRequestConsentAgreementSrcEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentAgreementSrc') }})  
    status: CreateStoredCredentialProfileRequestStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Specifies the status of the stored credential profile.
    
    * `Active` - Use this value if you are creating the stored credential profile after receiving the customer's consent, or if the stored credential profile represents a stored credential profile in an external system.
    
      You can use the `action` field to specify how Zuora activates the stored credential profile.
    
    
    * `Agreed` - Use this value if you are migrating the payment method to the stored credential transaction framework.
    
      In this case, Zuora will not send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile.
    """  
    type: CreateStoredCredentialProfileRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    action: Optional[CreateStoredCredentialProfileRequestActionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action'), 'exclude': lambda f: f is None }})
    r"""Specifies how Zuora activates the stored credential profile. Only applicable if you set the `status` field to `Active`.
    
    * `Activate` (default) - Use this value if you are creating the stored credential profile after receiving the customer's consent.
    
      Zuora will create the stored credential profile then send a cardholder-initiated transaction (CIT) to the payment gateway to validate the stored credential profile. If the CIT succeeds, the status of the stored credential profile will be `Active`. If the CIT does not succeed, Zuora will not create a stored credential profile.
      
      If the payment gateway does not support the stored credential transaction framework, the status of the stored credential profile will be `Agreed`.
    
    
    * `Persist` - Use this value if the stored credential profile represents a stored credential profile in an external system. The status of the payment method's stored credential profile will be `Active`.
    """  
    agreed_on: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agreedOn'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date on which the profile is agreed. The date format is `yyyy-mm-dd`."""  
    auth_gateway: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authGateway'), 'exclude': lambda f: f is None }})
    r"""Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile."""  
    card_security_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardSecurityCode'), 'exclude': lambda f: f is None }})
    r"""The security code of the credit card."""  
    consent_agreement_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consentAgreementRef'), 'exclude': lambda f: f is None }})
    r"""Specifies your reference for the consent agreement that you have established with the customer."""  
    network_transaction_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTransactionId'), 'exclude': lambda f: f is None }})
    r"""The ID of a network transaction."""  
    