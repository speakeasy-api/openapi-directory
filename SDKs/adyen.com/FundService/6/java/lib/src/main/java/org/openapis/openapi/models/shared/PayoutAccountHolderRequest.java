/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PayoutAccountHolderRequest {
    /**
     * The code of the account from which the payout is to be made.
     */
    @JsonProperty("accountCode")
    public String accountCode;
    public PayoutAccountHolderRequest withAccountCode(String accountCode) {
        this.accountCode = accountCode;
        return this;
    }
    
    /**
     * The code of the Account Holder who owns the account from which the payout is to be made.
     * The Account Holder is the party to which the payout will be made.
     */
    @JsonProperty("accountHolderCode")
    public String accountHolderCode;
    public PayoutAccountHolderRequest withAccountHolderCode(String accountHolderCode) {
        this.accountHolderCode = accountHolderCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    public Amount amount;
    public PayoutAccountHolderRequest withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * The unique ID of the Bank Account held by the Account Holder to which the payout is to be made.
     * If left blank, a bank account is automatically selected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bankAccountUUID")
    public String bankAccountUUID;
    public PayoutAccountHolderRequest withBankAccountUUID(String bankAccountUUID) {
        this.bankAccountUUID = bankAccountUUID;
        return this;
    }
    
    /**
     * A description of the payout. Maximum 200 characters.
     * Allowed: **abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/?:().,'+ ";**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public PayoutAccountHolderRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * A value that can be supplied at the discretion of the executing user in order to link multiple transactions to one another.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("merchantReference")
    public String merchantReference;
    public PayoutAccountHolderRequest withMerchantReference(String merchantReference) {
        this.merchantReference = merchantReference;
        return this;
    }
    
    /**
     * The unique ID of the payout method held by the Account Holder to which the payout is to be made.
     * If left blank, a payout instrument is automatically selected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutMethodCode")
    public String payoutMethodCode;
    public PayoutAccountHolderRequest withPayoutMethodCode(String payoutMethodCode) {
        this.payoutMethodCode = payoutMethodCode;
        return this;
    }
    
    /**
     * Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payoutSpeed")
    public PayoutAccountHolderRequestPayoutSpeedEnum payoutSpeed;
    public PayoutAccountHolderRequest withPayoutSpeed(PayoutAccountHolderRequestPayoutSpeedEnum payoutSpeed) {
        this.payoutSpeed = payoutSpeed;
        return this;
    }
    
}
