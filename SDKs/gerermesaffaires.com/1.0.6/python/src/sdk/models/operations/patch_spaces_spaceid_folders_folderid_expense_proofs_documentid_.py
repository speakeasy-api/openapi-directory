"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequestBodyAccountEnum(str, Enum):
    CAB = 'CAB'
    IKM = 'IKM'
    PRK = 'PRK'
    TXI = 'TXI'
    VOY = 'VOY'
    PTT = 'PTT'
    FHR = 'FHR'
    DIV = 'DIV'
    RES = 'RES'

class PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequestBodyStatusEnum(str, Enum):
    R = 'R'
    V = 'V'
    W = 'W'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequestBody:
    r"""An expense proof to modify"""
    
    account: Optional[PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequestBodyAccountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Account'), 'exclude': lambda f: f is None }})  
    archival_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivalDate'), 'exclude': lambda f: f is None }})  
    before_vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BeforeVAT'), 'exclude': lambda f: f is None }})  
    expense_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpenseDate'), 'exclude': lambda f: f is None }})  
    expense_report_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpenseReportId'), 'exclude': lambda f: f is None }})  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Provider'), 'exclude': lambda f: f is None }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reason'), 'exclude': lambda f: f is None }})  
    status: Optional[PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequestBodyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VAT'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequest:
    
    document_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'documentId', 'style': 'simple', 'explode': False }})
    r"""Id of the document"""  
    folder_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'folderId', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    request_body: Optional[PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    r"""An expense proof to modify"""  
    

@dataclasses.dataclass
class PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    