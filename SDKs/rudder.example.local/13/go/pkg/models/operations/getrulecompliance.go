// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetRuleCompliancePathParams struct {
	// Id of the target rule
	RuleID string `pathParam:"style=simple,explode=false,name=ruleId"`
}

type GetRuleComplianceQueryParams struct {
	// Number of depth level of compliance objects to display (1:rules, 2:directives, 3:components, 4:nodes, 5:values, 6:reports)
	Level *int64 `queryParam:"style=form,explode=true,name=level"`
}

type GetRuleComplianceRequest struct {
	PathParams  GetRuleCompliancePathParams
	QueryParams GetRuleComplianceQueryParams
}

// GetRuleCompliance200ApplicationJSONActionEnum - The id of the action
type GetRuleCompliance200ApplicationJSONActionEnum string

const (
	GetRuleCompliance200ApplicationJSONActionEnumGetRuleCompliance GetRuleCompliance200ApplicationJSONActionEnum = "getRuleCompliance"
)

func (e *GetRuleCompliance200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getRuleCompliance":
		*e = GetRuleCompliance200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRuleCompliance200ApplicationJSONActionEnum: %s", s)
	}
}

type GetRuleCompliance200ApplicationJSONDataRulesComplianceDetails struct {
	Error                      *float32 `json:"error,omitempty"`
	NoReport                   *float32 `json:"noReport,omitempty"`
	SuccessAlreadyOK           *float32 `json:"successAlreadyOK,omitempty"`
	SuccessNotApplicable       *float32 `json:"successNotApplicable,omitempty"`
	SuccessRepaired            *float32 `json:"successRepaired,omitempty"`
	UnexpectedMissingComponent *float32 `json:"unexpectedMissingComponent,omitempty"`
	UnexpectedUnknownComponent *float32 `json:"unexpectedUnknownComponent,omitempty"`
}

type GetRuleCompliance200ApplicationJSONDataRulesModeEnum string

const (
	GetRuleCompliance200ApplicationJSONDataRulesModeEnumFullCompliance  GetRuleCompliance200ApplicationJSONDataRulesModeEnum = "full-compliance"
	GetRuleCompliance200ApplicationJSONDataRulesModeEnumChangesOnly     GetRuleCompliance200ApplicationJSONDataRulesModeEnum = "changes-only"
	GetRuleCompliance200ApplicationJSONDataRulesModeEnumReportsDisabled GetRuleCompliance200ApplicationJSONDataRulesModeEnum = "reports-disabled"
)

func (e *GetRuleCompliance200ApplicationJSONDataRulesModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full-compliance":
		fallthrough
	case "changes-only":
		fallthrough
	case "reports-disabled":
		*e = GetRuleCompliance200ApplicationJSONDataRulesModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRuleCompliance200ApplicationJSONDataRulesModeEnum: %s", s)
	}
}

type GetRuleCompliance200ApplicationJSONDataRules struct {
	// Rule compliance level
	Compliance        float32                                                       `json:"compliance"`
	ComplianceDetails GetRuleCompliance200ApplicationJSONDataRulesComplianceDetails `json:"complianceDetails"`
	// id of the rule
	ID   string                                               `json:"id"`
	Mode GetRuleCompliance200ApplicationJSONDataRulesModeEnum `json:"mode"`
}

type GetRuleCompliance200ApplicationJSONData struct {
	Rules []GetRuleCompliance200ApplicationJSONDataRules `json:"rules"`
}

// GetRuleCompliance200ApplicationJSONResultEnum - Result of the request
type GetRuleCompliance200ApplicationJSONResultEnum string

const (
	GetRuleCompliance200ApplicationJSONResultEnumSuccess GetRuleCompliance200ApplicationJSONResultEnum = "success"
	GetRuleCompliance200ApplicationJSONResultEnumError   GetRuleCompliance200ApplicationJSONResultEnum = "error"
)

func (e *GetRuleCompliance200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetRuleCompliance200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRuleCompliance200ApplicationJSONResultEnum: %s", s)
	}
}

// GetRuleCompliance200ApplicationJSON - Success
type GetRuleCompliance200ApplicationJSON struct {
	// The id of the action
	Action GetRuleCompliance200ApplicationJSONActionEnum `json:"action"`
	Data   GetRuleCompliance200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result GetRuleCompliance200ApplicationJSONResultEnum `json:"result"`
}

type GetRuleComplianceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetRuleCompliance200ApplicationJSONObject *GetRuleCompliance200ApplicationJSON
}
