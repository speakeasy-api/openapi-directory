<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * NodePoolAutoscaling - NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class NodePoolAutoscaling
{
    /**
     * Can this node pool be deleted automatically.
     * 
     * @var ?bool $autoprovisioned
     */
	#[\JMS\Serializer\Annotation\SerializedName('autoprovisioned')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoprovisioned = null;
    
    /**
     * Is autoscaling enabled for this node pool.
     * 
     * @var ?bool $enabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enabled = null;
    
    /**
     * Location policy used when scaling up a nodepool.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NodePoolAutoscalingLocationPolicyEnum $locationPolicy
     */
	#[\JMS\Serializer\Annotation\SerializedName('locationPolicy')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\NodePoolAutoscalingLocationPolicyEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NodePoolAutoscalingLocationPolicyEnum $locationPolicy = null;
    
    /**
     * Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.
     * 
     * @var ?int $maxNodeCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxNodeCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxNodeCount = null;
    
    /**
     * Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.
     * 
     * @var ?int $minNodeCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('minNodeCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $minNodeCount = null;
    
    /**
     * Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
     * 
     * @var ?int $totalMaxNodeCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('totalMaxNodeCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $totalMaxNodeCount = null;
    
    /**
     * Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.
     * 
     * @var ?int $totalMinNodeCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('totalMinNodeCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $totalMinNodeCount = null;
    
	public function __construct()
	{
		$this->autoprovisioned = null;
		$this->enabled = null;
		$this->locationPolicy = null;
		$this->maxNodeCount = null;
		$this->minNodeCount = null;
		$this->totalMaxNodeCount = null;
		$this->totalMinNodeCount = null;
	}
}
