"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum(str, Enum):
    r"""Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual."""
    TWO_4GHZ = '2.4ghz'
    FIVEGHZ = '5ghz'
    DUAL = 'dual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkWirelessRfProfileRequestBodyApBandSettings:
    r"""Settings that will be enabled if selectionType is set to 'ap'."""
    
    band_operation_mode: Optional[CreateNetworkWirelessRfProfileRequestBodyApBandSettingsBandOperationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandOperationMode'), 'exclude': lambda f: f is None }})
    r"""Choice between 'dual', '2.4ghz' or '5ghz'. Defaults to dual."""  
    band_steering_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSteeringEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to most open band. Can be either true or false. Defaults to true."""  
    
class CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum(str, Enum):
    r"""Band selection can be set to either 'ssid' or 'ap'. This param is required on creation."""
    AP = 'ap'
    SSID = 'ssid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkWirelessRfProfileRequestBodyFiveGhzSettings:
    r"""Settings related to 5Ghz band"""
    
    channel_width: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelWidth'), 'exclude': lambda f: f is None }})
    r"""Sets channel width (MHz) for 5Ghz band. Can be one of 'auto', '20', '40' or '80'. Defaults to auto."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 30."""  
    min_bitrate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 5Ghz band. Can be one of '6', '9', '12', '18', '24', '36', '48' or '54'. Defaults to 12."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 5Ghz band. Can be integer between 2 and 30. Defaults to 8."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 5Ghz band. Can be one of '36', '40', '44', '48', '52', '56', '60', '64', '100', '104', '108', '112', '116', '120', '124', '128', '132', '136', '140', '144', '149', '153', '157', '161' or '165'.Defaults to [36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 149, 153, 157, 161, 165]."""  
    
class CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum(str, Enum):
    r"""Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band."""
    BAND = 'band'
    SSID = 'ssid'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings:
    r"""Settings related to 2.4Ghz band"""
    
    ax_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('axEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines whether ax radio on 2.4Ghz band is on or off. Can be either true or false. If false, we highly recommend disabling band steering. Defaults to true."""  
    max_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxPower'), 'exclude': lambda f: f is None }})
    r"""Sets max power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 30."""  
    min_bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrate'), 'exclude': lambda f: f is None }})
    r"""Sets min bitrate (Mbps) of 2.4Ghz band. Can be one of '1', '2', '5.5', '6', '9', '11', '12', '18', '24', '36', '48' or '54'. Defaults to 11."""  
    min_power: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minPower'), 'exclude': lambda f: f is None }})
    r"""Sets min power (dBm) of 2.4Ghz band. Can be integer between 2 and 30. Defaults to 5."""  
    rxsop: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rxsop'), 'exclude': lambda f: f is None }})
    r"""The RX-SOP level controls the sensitivity of the radio. It is strongly recommended to use RX-SOP only after consulting a wireless expert. RX-SOP can be configured in the range of -65 to -95 (dBm). A value of null will reset this to the default."""  
    valid_auto_channels: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validAutoChannels'), 'exclude': lambda f: f is None }})
    r"""Sets valid auto channels for 2.4Ghz band. Can be one of '1', '6' or '11'. Defaults to [1, 6, 11]."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateNetworkWirelessRfProfileRequestBody:
    
    band_selection_type: CreateNetworkWirelessRfProfileRequestBodyBandSelectionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bandSelectionType') }})
    r"""Band selection can be set to either 'ssid' or 'ap'. This param is required on creation."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the new profile. Must be unique. This param is required on creation."""  
    ap_band_settings: Optional[CreateNetworkWirelessRfProfileRequestBodyApBandSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apBandSettings'), 'exclude': lambda f: f is None }})
    r"""Settings that will be enabled if selectionType is set to 'ap'."""  
    client_balancing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientBalancingEnabled'), 'exclude': lambda f: f is None }})
    r"""Steers client to best available access point. Can be either true or false. Defaults to true."""  
    five_ghz_settings: Optional[CreateNetworkWirelessRfProfileRequestBodyFiveGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fiveGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 5Ghz band"""  
    min_bitrate_type: Optional[CreateNetworkWirelessRfProfileRequestBodyMinBitrateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minBitrateType'), 'exclude': lambda f: f is None }})
    r"""Minimum bitrate can be set to either 'band' or 'ssid'. Defaults to band."""  
    two_four_ghz_settings: Optional[CreateNetworkWirelessRfProfileRequestBodyTwoFourGhzSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twoFourGhzSettings'), 'exclude': lambda f: f is None }})
    r"""Settings related to 2.4Ghz band"""  
    

@dataclasses.dataclass
class CreateNetworkWirelessRfProfileRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: CreateNetworkWirelessRfProfileRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateNetworkWirelessRfProfileResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_network_wireless_rf_profile_201_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    