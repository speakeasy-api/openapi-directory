// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VoiceCapabilityPaymentsGatewaysModeEnum - determines if the user has completed the integration with the gateway
type VoiceCapabilityPaymentsGatewaysModeEnum string

const (
	VoiceCapabilityPaymentsGatewaysModeEnumTest VoiceCapabilityPaymentsGatewaysModeEnum = "test"
	VoiceCapabilityPaymentsGatewaysModeEnumLive VoiceCapabilityPaymentsGatewaysModeEnum = "live"
)

func (e *VoiceCapabilityPaymentsGatewaysModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "test":
		fallthrough
	case "live":
		*e = VoiceCapabilityPaymentsGatewaysModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VoiceCapabilityPaymentsGatewaysModeEnum: %s", s)
	}
}

type VoiceCapabilityPaymentsGateways struct {
	// used to identify the gateway in the credentials service
	Credential *string `json:"credential,omitempty"`
	// determines if the user has completed the integration with the gateway
	Mode *VoiceCapabilityPaymentsGatewaysModeEnum `json:"mode,omitempty"`
	// payment gateway type (Stripe, Azure)
	Type *string `json:"type,omitempty"`
}

// VoiceCapabilityPayments - encompass all the payment related fields
type VoiceCapabilityPayments struct {
	// payment gateways like Stripe
	Gateways []VoiceCapabilityPaymentsGateways `json:"gateways,omitempty"`
}

// VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum - The HTTP method used to fetch your NCCO from your `answer_url`
type VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum string

const (
	VoiceCapabilityWebhooksAnswerURLHTTPMethodEnumGet  VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum = "GET"
	VoiceCapabilityWebhooksAnswerURLHTTPMethodEnumPost VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum = "POST"
)

func (e *VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GET":
		fallthrough
	case "POST":
		*e = VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum: %s", s)
	}
}

type VoiceCapabilityWebhooksAnswerURL struct {
	// The URL that Vonage requests when a call is placed/received. Must return an NCCO
	Address *string `json:"address,omitempty"`
	// If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds.
	ConnectionTimeout *int64 `json:"connection_timeout,omitempty"`
	// The HTTP method used to fetch your NCCO from your `answer_url`
	HTTPMethod *VoiceCapabilityWebhooksAnswerURLHTTPMethodEnum `json:"http_method,omitempty"`
	// If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds.
	SocketTimeout *int64 `json:"socket_timeout,omitempty"`
}

// VoiceCapabilityWebhooksEventURLHTTPMethodEnum - The HTTP method used to send events to your server
type VoiceCapabilityWebhooksEventURLHTTPMethodEnum string

const (
	VoiceCapabilityWebhooksEventURLHTTPMethodEnumGet  VoiceCapabilityWebhooksEventURLHTTPMethodEnum = "GET"
	VoiceCapabilityWebhooksEventURLHTTPMethodEnumPost VoiceCapabilityWebhooksEventURLHTTPMethodEnum = "POST"
)

func (e *VoiceCapabilityWebhooksEventURLHTTPMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GET":
		fallthrough
	case "POST":
		*e = VoiceCapabilityWebhooksEventURLHTTPMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VoiceCapabilityWebhooksEventURLHTTPMethodEnum: %s", s)
	}
}

// VoiceCapabilityWebhooksEventURL - Vonage will send call events (e.g. `ringing`, `answered`) to this URL
type VoiceCapabilityWebhooksEventURL struct {
	// The URL that Vonage sends events related to your call to
	Address *string `json:"address,omitempty"`
	// If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds.
	ConnectionTimeout *int64 `json:"connection_timeout,omitempty"`
	// The HTTP method used to send events to your server
	HTTPMethod *VoiceCapabilityWebhooksEventURLHTTPMethodEnum `json:"http_method,omitempty"`
	// If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds.
	SocketTimeout *int64 `json:"socket_timeout,omitempty"`
}

// VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum - The HTTP method used to fetch your NCCO from your `answer_url`
type VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum string

const (
	VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnumGet  VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum = "GET"
	VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnumPost VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum = "POST"
)

func (e *VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GET":
		fallthrough
	case "POST":
		*e = VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum: %s", s)
	}
}

type VoiceCapabilityWebhooksFallbackAnswerURL struct {
	// If your `answer_url` is offline or returns a HTTP error code, Vonage will make a request to a
	// `fallback_answer_url` if it is set. This URL must return an NCCO.
	//
	Address *string `json:"address,omitempty"`
	// If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds.
	ConnectionTimeout *int64 `json:"connection_timeout,omitempty"`
	// The HTTP method used to fetch your NCCO from your `answer_url`
	HTTPMethod *VoiceCapabilityWebhooksFallbackAnswerURLHTTPMethodEnum `json:"http_method,omitempty"`
	// If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds.
	SocketTimeout *int64 `json:"socket_timeout,omitempty"`
}

type VoiceCapabilityWebhooks struct {
	AnswerURL *VoiceCapabilityWebhooksAnswerURL `json:"answer_url,omitempty"`
	// Vonage will send call events (e.g. `ringing`, `answered`) to this URL
	EventURL          *VoiceCapabilityWebhooksEventURL          `json:"event_url,omitempty"`
	FallbackAnswerURL *VoiceCapabilityWebhooksFallbackAnswerURL `json:"fallback_answer_url,omitempty"`
}

// VoiceCapability - Voice related configuration
type VoiceCapability struct {
	// ttl used by the NCCO in case youâ€™re using a conversation action (is set in hours and is 48 by default)
	ConversationTTL *int64 `json:"conversation_ttl,omitempty"`
	// encompass all the payment related fields
	Payments *VoiceCapabilityPayments `json:"payments,omitempty"`
	// verify that a request is coming from Vonage servers (a jwt token will be sent on the callback authorization header)
	SignedCallbacks *bool                    `json:"signed_callbacks,omitempty"`
	Webhooks        *VoiceCapabilityWebhooks `json:"webhooks,omitempty"`
}
