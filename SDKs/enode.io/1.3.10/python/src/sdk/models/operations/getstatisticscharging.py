"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetStatisticsChargingSecurity:
    
    user_access_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetStatisticsChargingResolutionEnum(str, Enum):
    r"""The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day."""
    HOUR = 'HOUR'
    DAY = 'DAY'
    WEEK = 'WEEK'
    MONTH = 'MONTH'
    YEAR = 'YEAR'


@dataclasses.dataclass
class GetStatisticsChargingRequest:
    
    start_date: date = dataclasses.field(metadata={'query_param': { 'field_name': 'startDate', 'style': 'form', 'explode': True }})
    r"""Earliest date to include in the response"""  
    charging_location_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'chargingLocationId', 'style': 'form', 'explode': True }})
    r"""Filter statistics to only include this charging location"""  
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endDate', 'style': 'form', 'explode': True }})
    r"""Latest date to include in the response (defaults to current date/time)"""  
    resolution: Optional[GetStatisticsChargingResolutionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resolution', 'style': 'form', 'explode': True }})
    r"""The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day."""  
    vehicle_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'vehicleId', 'style': 'form', 'explode': True }})
    r"""Filter statistics to only include this vehicle"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetStatisticsCharging200ApplicationJSONKw:
    r"""Aggregate statistics for charge rate in kW"""
    
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})  
    mean: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mean') }})  
    min: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetStatisticsCharging200ApplicationJSONPrice:
    r"""Aggregate statistics for power price (<CURRENCY> per kWh)"""
    
    max: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max') }})  
    mean: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mean') }})  
    min: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('min') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetStatisticsCharging200ApplicationJSON:
    
    cost_sum: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('costSum') }})
    r"""Total cost in <CURRENCY>"""  
    date_: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The start date of this sample within the timeseries"""  
    kw: GetStatisticsCharging200ApplicationJSONKw = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kw') }})
    r"""Aggregate statistics for charge rate in kW"""  
    kwh_sum: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kwhSum') }})
    r"""Total power consumption in kWh"""  
    price: GetStatisticsCharging200ApplicationJSONPrice = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""Aggregate statistics for power price (<CURRENCY> per kWh)"""  
    

@dataclasses.dataclass
class GetStatisticsChargingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_statistics_charging_200_application_json_objects: Optional[list[GetStatisticsCharging200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    