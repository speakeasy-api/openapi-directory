// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTPutCompositeAlarmActionEnum
type POSTPutCompositeAlarmActionEnum string

const (
	POSTPutCompositeAlarmActionEnumPutCompositeAlarm POSTPutCompositeAlarmActionEnum = "PutCompositeAlarm"
)

func (e *POSTPutCompositeAlarmActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PutCompositeAlarm":
		*e = POSTPutCompositeAlarmActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPutCompositeAlarmActionEnum: %s", s)
	}
}

// POSTPutCompositeAlarmVersionEnum
type POSTPutCompositeAlarmVersionEnum string

const (
	POSTPutCompositeAlarmVersionEnumTwoThousandAndTen0801 POSTPutCompositeAlarmVersionEnum = "2010-08-01"
)

func (e *POSTPutCompositeAlarmVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-08-01":
		*e = POSTPutCompositeAlarmVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTPutCompositeAlarmVersionEnum: %s", s)
	}
}

type POSTPutCompositeAlarmQueryParams struct {
	Action  POSTPutCompositeAlarmActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTPutCompositeAlarmVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTPutCompositeAlarmHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTPutCompositeAlarmRequest struct {
	QueryParams POSTPutCompositeAlarmQueryParams
	Headers     POSTPutCompositeAlarmHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTPutCompositeAlarmResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
