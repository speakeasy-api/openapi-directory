// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum - Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.
type GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum string

const (
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnumChallengeSecurityPreferenceUnspecified GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum = "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED"
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnumUsability                              GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum = "USABILITY"
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnumBalance                                GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum = "BALANCE"
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnumSecurity                               GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum = "SECURITY"
)

func (e GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum) ToPointer() *GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum {
	return &e
}

func (e *GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CHALLENGE_SECURITY_PREFERENCE_UNSPECIFIED":
		fallthrough
	case "USABILITY":
		fallthrough
	case "BALANCE":
		fallthrough
	case "SECURITY":
		*e = GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum: %v", v)
	}
}

// GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum - Required. Describes how this key is integrated with the website.
type GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum string

const (
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnumIntegrationTypeUnspecified GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum = "INTEGRATION_TYPE_UNSPECIFIED"
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnumScore                      GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum = "SCORE"
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnumCheckbox                   GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum = "CHECKBOX"
	GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnumInvisible                  GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum = "INVISIBLE"
)

func (e GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum) ToPointer() *GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum {
	return &e
}

func (e *GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "INTEGRATION_TYPE_UNSPECIFIED":
		fallthrough
	case "SCORE":
		fallthrough
	case "CHECKBOX":
		fallthrough
	case "INVISIBLE":
		*e = GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum: %v", v)
	}
}

// GoogleCloudRecaptchaenterpriseV1WebKeySettings - Settings specific to keys that can be used by websites.
type GoogleCloudRecaptchaenterpriseV1WebKeySettings struct {
	// If set to true, it means allowed_domains will not be enforced.
	AllowAllDomains *bool `json:"allowAllDomains,omitempty"`
	// If set to true, the key can be used on AMP (Accelerated Mobile Pages) websites. This is supported only for the SCORE integration type.
	AllowAmpTraffic *bool `json:"allowAmpTraffic,omitempty"`
	// Domains or subdomains of websites allowed to use the key. All subdomains of an allowed domain are automatically allowed. A valid domain requires a host and must not include any path, port, query or fragment. Examples: 'example.com' or 'subdomain.example.com'
	AllowedDomains []string `json:"allowedDomains,omitempty"`
	// Settings for the frequency and difficulty at which this key triggers captcha challenges. This should only be specified for IntegrationTypes CHECKBOX and INVISIBLE.
	ChallengeSecurityPreference *GoogleCloudRecaptchaenterpriseV1WebKeySettingsChallengeSecurityPreferenceEnum `json:"challengeSecurityPreference,omitempty"`
	// Required. Describes how this key is integrated with the website.
	IntegrationType *GoogleCloudRecaptchaenterpriseV1WebKeySettingsIntegrationTypeEnum `json:"integrationType,omitempty"`
}
