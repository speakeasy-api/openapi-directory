"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .globalwinescore import GlobalWineScore
from sdk.models import shared

SERVERS = [
    "https://api.globalwinescore.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The GlobalWineScore API is designed as a RESTful API, providing several resources and methods depending on your usage plan.
    
    For further information please refer to <a href=\"https://www.globalwinescore.com/plans\" target=\"_blank\">our plans</a>.
    
    # Authentication
    The API uses token-based authentication.
    In order to authenticate your requests, you need to include a specific header in each of your requests:
    
    ```
    Authorization: Token {YOUR-API-TOKEN}
    ```
    The word <b>Token</b> must be written. Your requests must also use the <b>HTTPS</b> protocol.
    
    If you don't have a token yet, you need to apply for one [here](https://www.globalwinescore.com/api/).
    
    Your personal token can be found under the <a href=\"https://www.globalwinescore.com/account/api/\" target=\"_blank\">My account > API</a> section of the GlobalWineScore website
    
    # Format
    The API provides several rendering formats which you can control using the `Accept` header or `format` query parameter.
    
    - JSON (default): no header or `Accept: application/json`
    - XML: `Accept: application/xml`
    # Rate limiting
    For API requests, the rate limit allows for up to 10 requests per minute.
    
    # Error handling
    
    Whether a request succeeded is indicated by the HTTP status code. A 2xx status code indicates success, whereas a 4xx status code indicates failure.
    
    When a request fails, the response body is still JSON, but always contains a `detail` field with a description of the error, which you can inspect for debugging.
    
    For example, trying to access the API without proper authentication will return code 403 along with the message:
    
    `{\"detail\": \"Authentication credentials were not provided.\"}`
    
    Found a bug ? send us an email at <a href=\"mailto:api@globalwinescore.com\">api@globalwinescore.com</a>
    
    # Ordering
    
    At the moment, GlobalWineScores may be sorted by `date` and `score`. Use \"-\"
    to sort in descending order.
    
    # Continuous synchronization
    
    If you need to synchronize your database with our API, you can query our API using `?ordering=-date` to get the newest scores first, which means you won't have to crawl the whole catalog every time :-)
    
    # Quick search interface
    If you need to search our catalog (e.g. to align it with yours), we're providing you with a handy interface accessible here: <a href=\"https://api.globalwinescore.com/search/\" target=\"_blank\">https://api.globalwinescore.com/search/</a>
    
    You need to be logged in (email/password) to access this page, but other than that you can share it with anyone in your team and start searching right away !
    
    # Resources
    
    The details about available endpoints can be found below.
    You can click on each endpoint to find information about their parameters.
    """
    global_wine_score: GlobalWineScore

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.global_wine_score = GlobalWineScore(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    