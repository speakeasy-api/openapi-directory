/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PreviewOrderChargeOverridePricing - Pricing information about the charge.
 * 
 */
public class PreviewOrderChargeOverridePricing {
    /**
     * Container for charge model configuration data.
     * 
     * **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeModelData")
    public ChargeModelDataOverride chargeModelData;
    public PreviewOrderChargeOverridePricing withChargeModelData(ChargeModelDataOverride chargeModelData) {
        this.chargeModelData = chargeModelData;
        return this;
    }
    
    /**
     * Pricing information about a discount charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount")
    public DiscountPricingOverride discount;
    public PreviewOrderChargeOverridePricing withDiscount(DiscountPricingOverride discount) {
        this.discount = discount;
        return this;
    }
    
    /**
     * Pricing information about a one-time charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oneTimeFlatFee")
    public OneTimeFlatFeePricingOverride oneTimeFlatFee;
    public PreviewOrderChargeOverridePricing withOneTimeFlatFee(OneTimeFlatFeePricingOverride oneTimeFlatFee) {
        this.oneTimeFlatFee = oneTimeFlatFee;
        return this;
    }
    
    /**
     * Pricing information about a one-time charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oneTimePerUnit")
    public OneTimePerUnitPricingOverride oneTimePerUnit;
    public PreviewOrderChargeOverridePricing withOneTimePerUnit(OneTimePerUnitPricingOverride oneTimePerUnit) {
        this.oneTimePerUnit = oneTimePerUnit;
        return this;
    }
    
    /**
     * Pricing information about a one-time charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oneTimeTiered")
    public OneTimeTieredPricingOverride oneTimeTiered;
    public PreviewOrderChargeOverridePricing withOneTimeTiered(OneTimeTieredPricingOverride oneTimeTiered) {
        this.oneTimeTiered = oneTimeTiered;
        return this;
    }
    
    /**
     * Pricing information about a one-time charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oneTimeVolume")
    public OneTimeVolumePricingOverride oneTimeVolume;
    public PreviewOrderChargeOverridePricing withOneTimeVolume(OneTimeVolumePricingOverride oneTimeVolume) {
        this.oneTimeVolume = oneTimeVolume;
        return this;
    }
    
    /**
     * Pricing information about a recurring charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringFlatFee")
    public RecurringFlatFeePricingOverride recurringFlatFee;
    public PreviewOrderChargeOverridePricing withRecurringFlatFee(RecurringFlatFeePricingOverride recurringFlatFee) {
        this.recurringFlatFee = recurringFlatFee;
        return this;
    }
    
    /**
     * Pricing information about a recurring charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit purchased.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringPerUnit")
    public RecurringPerUnitPricingOverride recurringPerUnit;
    public PreviewOrderChargeOverridePricing withRecurringPerUnit(RecurringPerUnitPricingOverride recurringPerUnit) {
        this.recurringPerUnit = recurringPerUnit;
        return this;
    }
    
    /**
     * Pricing information about a recurring charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringTiered")
    public RecurringTieredPricingOverride recurringTiered;
    public PreviewOrderChargeOverridePricing withRecurringTiered(RecurringTieredPricingOverride recurringTiered) {
        this.recurringTiered = recurringTiered;
        return this;
    }
    
    /**
     * Pricing information about a recurring charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurringVolume")
    public RecurringVolumePricingOverride recurringVolume;
    public PreviewOrderChargeOverridePricing withRecurringVolume(RecurringVolumePricingOverride recurringVolume) {
        this.recurringVolume = recurringVolume;
        return this;
    }
    
    /**
     * Pricing information about a usage charge that uses the "flat fee" charge model. In this charge model, the charge has a fixed price.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageFlatFee")
    public UsageFlatFeePricingOverride usageFlatFee;
    public PreviewOrderChargeOverridePricing withUsageFlatFee(UsageFlatFeePricingOverride usageFlatFee) {
        this.usageFlatFee = usageFlatFee;
        return this;
    }
    
    /**
     * Pricing information about a usage charge that uses the "overage" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageOverage")
    public UsageOveragePricingOverride usageOverage;
    public PreviewOrderChargeOverridePricing withUsageOverage(UsageOveragePricingOverride usageOverage) {
        this.usageOverage = usageOverage;
        return this;
    }
    
    /**
     * Pricing information about a usage charge that uses the "per unit" charge model. In this charge model, the charge has a fixed price per unit consumed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usagePerUnit")
    public UsagePerUnitPricingOverride usagePerUnit;
    public PreviewOrderChargeOverridePricing withUsagePerUnit(UsagePerUnitPricingOverride usagePerUnit) {
        this.usagePerUnit = usagePerUnit;
        return this;
    }
    
    /**
     * Pricing information about a usage charge that uses the "tiered pricing" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageTiered")
    public UsageTieredPricingOverride usageTiered;
    public PreviewOrderChargeOverridePricing withUsageTiered(UsageTieredPricingOverride usageTiered) {
        this.usageTiered = usageTiered;
        return this;
    }
    
    /**
     * Pricing information about a usage charge that uses the "tiered with overage" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageTieredWithOverage")
    public UsageTieredWithOveragePricingOverride usageTieredWithOverage;
    public PreviewOrderChargeOverridePricing withUsageTieredWithOverage(UsageTieredWithOveragePricingOverride usageTieredWithOverage) {
        this.usageTieredWithOverage = usageTieredWithOverage;
        return this;
    }
    
    /**
     * Pricing information about a usage charge that uses the "volume pricing" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageVolume")
    public UsageVolumePricingOverride usageVolume;
    public PreviewOrderChargeOverridePricing withUsageVolume(UsageVolumePricingOverride usageVolume) {
        this.usageVolume = usageVolume;
        return this;
    }
    
}
