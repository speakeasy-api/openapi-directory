/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PrivateEnvironmentConfig - The configuration information for configuring a Private IP Cloud Composer environment.
 */
public class PrivateEnvironmentConfig {
    /**
     * Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudComposerConnectionSubnetwork")
    public String cloudComposerConnectionSubnetwork;

    public PrivateEnvironmentConfig withCloudComposerConnectionSubnetwork(String cloudComposerConnectionSubnetwork) {
        this.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
        return this;
    }
    
    /**
     * Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudComposerNetworkIpv4CidrBlock")
    public String cloudComposerNetworkIpv4CidrBlock;

    public PrivateEnvironmentConfig withCloudComposerNetworkIpv4CidrBlock(String cloudComposerNetworkIpv4CidrBlock) {
        this.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
        return this;
    }
    
    /**
     * Output only. The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudComposerNetworkIpv4ReservedRange")
    public String cloudComposerNetworkIpv4ReservedRange;

    public PrivateEnvironmentConfig withCloudComposerNetworkIpv4ReservedRange(String cloudComposerNetworkIpv4ReservedRange) {
        this.cloudComposerNetworkIpv4ReservedRange = cloudComposerNetworkIpv4ReservedRange;
        return this;
    }
    
    /**
     * Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudSqlIpv4CidrBlock")
    public String cloudSqlIpv4CidrBlock;

    public PrivateEnvironmentConfig withCloudSqlIpv4CidrBlock(String cloudSqlIpv4CidrBlock) {
        this.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
        return this;
    }
    
    /**
     * Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enablePrivateEnvironment")
    public Boolean enablePrivateEnvironment;

    public PrivateEnvironmentConfig withEnablePrivateEnvironment(Boolean enablePrivateEnvironment) {
        this.enablePrivateEnvironment = enablePrivateEnvironment;
        return this;
    }
    
    /**
     * Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enablePrivatelyUsedPublicIps")
    public Boolean enablePrivatelyUsedPublicIps;

    public PrivateEnvironmentConfig withEnablePrivatelyUsedPublicIps(Boolean enablePrivatelyUsedPublicIps) {
        this.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
        return this;
    }
    
    /**
     * Configuration options for networking connections in the Composer 2 environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkingConfig")
    public NetworkingConfig networkingConfig;

    public PrivateEnvironmentConfig withNetworkingConfig(NetworkingConfig networkingConfig) {
        this.networkingConfig = networkingConfig;
        return this;
    }
    
    /**
     * Configuration options for the private GKE cluster in a Cloud Composer environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateClusterConfig")
    public PrivateClusterConfig privateClusterConfig;

    public PrivateEnvironmentConfig withPrivateClusterConfig(PrivateClusterConfig privateClusterConfig) {
        this.privateClusterConfig = privateClusterConfig;
        return this;
    }
    
    /**
     * Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webServerIpv4CidrBlock")
    public String webServerIpv4CidrBlock;

    public PrivateEnvironmentConfig withWebServerIpv4CidrBlock(String webServerIpv4CidrBlock) {
        this.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
        return this;
    }
    
    /**
     * Output only. The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webServerIpv4ReservedRange")
    public String webServerIpv4ReservedRange;

    public PrivateEnvironmentConfig withWebServerIpv4ReservedRange(String webServerIpv4ReservedRange) {
        this.webServerIpv4ReservedRange = webServerIpv4ReservedRange;
        return this;
    }
    
    public PrivateEnvironmentConfig(){}
}
