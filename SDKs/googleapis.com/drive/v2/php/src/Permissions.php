<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Permissions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes a permission from a file or shared drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteResponse
     */
	public function drivePermissionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{fileId}/permissions/{permissionId}', \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Gets a permission by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetResponse
     */
	public function drivePermissionsGet(
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{fileId}/permissions/{permissionId}', \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Permission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the permission ID for an email address.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailResponse
     */
	public function drivePermissionsGetIdForEmail(
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/permissionIds/{email}', \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsGetIdForEmailResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionId', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a permission for a file or shared drive.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertResponse
     */
	public function drivePermissionsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{fileId}/permissions', \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "permissionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Permission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists a file's or shared drive's permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListResponse
     */
	public function drivePermissionsList(
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{fileId}/permissions', \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permissionList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PermissionList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a permission using patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchResponse
     */
	public function drivePermissionsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{fileId}/permissions/{permissionId}', \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "permissionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Permission', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a permission.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateResponse
     */
	public function drivePermissionsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/files/{fileId}/permissions/{permissionId}', \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "permissionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DrivePermissionsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->permission = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Permission', 'json');
            }
        }

        return $response;
    }
}