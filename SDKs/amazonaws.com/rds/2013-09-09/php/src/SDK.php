<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK
 * 
 * https://docs.aws.amazon.com/rds/ - Amazon Web Services documentation
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://docs.aws.amazon.com/rds/
 */
class SDK
{
	public const SERVERS = [
        /** The Amazon RDS multi-region endpoint */
		'http://rds.{region}.amazonaws.com',
        /** The Amazon RDS multi-region endpoint */
		'https://rds.{region}.amazonaws.com',
        /** The general Amazon RDS multi-region endpoint */
		'http://rds.amazonaws.com',
        /** The general Amazon RDS multi-region endpoint */
		'https://rds.amazonaws.com',
        /** The Amazon RDS endpoint for China (Beijing) and China (Ningxia) */
		'http://rds.{region}.amazonaws.com.cn',
        /** The Amazon RDS endpoint for China (Beijing) and China (Ningxia) */
		'https://rds.{region}.amazonaws.com.cn',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * getAddSourceIdentifierToSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAddSourceIdentifierToSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAddSourceIdentifierToSubscriptionResponse
     */
	public function getAddSourceIdentifierToSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GETAddSourceIdentifierToSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAddSourceIdentifierToSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=AddSourceIdentifierToSubscription');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETAddSourceIdentifierToSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAddSourceIdentifierToSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getAuthorizeDBSecurityGroupIngress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETAuthorizeDBSecurityGroupIngressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETAuthorizeDBSecurityGroupIngressResponse
     */
	public function getAuthorizeDBSecurityGroupIngress(
        \OpenAPI\OpenAPI\Models\Operations\GETAuthorizeDBSecurityGroupIngressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETAuthorizeDBSecurityGroupIngressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=AuthorizeDBSecurityGroupIngress');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETAuthorizeDBSecurityGroupIngressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETAuthorizeDBSecurityGroupIngressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDeleteDBInstance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBInstanceResponse
     */
	public function getDeleteDBInstance(
        \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBInstance');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDeleteDBInstanceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDeleteDBParameterGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBParameterGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBParameterGroupResponse
     */
	public function getDeleteDBParameterGroup(
        \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBParameterGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBParameterGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBParameterGroup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDeleteDBParameterGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBParameterGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDeleteDBSecurityGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSecurityGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSecurityGroupResponse
     */
	public function getDeleteDBSecurityGroup(
        \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSecurityGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSecurityGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBSecurityGroup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSecurityGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSecurityGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDeleteDBSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSnapshotResponse
     */
	public function getDeleteDBSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBSnapshot');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSnapshotRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDeleteDBSubnetGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSubnetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSubnetGroupResponse
     */
	public function getDeleteDBSubnetGroup(
        \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSubnetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSubnetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBSubnetGroup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSubnetGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDeleteDBSubnetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDeleteEventSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDeleteEventSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDeleteEventSubscriptionResponse
     */
	public function getDeleteEventSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GETDeleteEventSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDeleteEventSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteEventSubscription');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDeleteEventSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDeleteEventSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDeleteOptionGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDeleteOptionGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDeleteOptionGroupResponse
     */
	public function getDeleteOptionGroup(
        \OpenAPI\OpenAPI\Models\Operations\GETDeleteOptionGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDeleteOptionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteOptionGroup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDeleteOptionGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDeleteOptionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getDownloadDBLogFilePortion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETDownloadDBLogFilePortionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETDownloadDBLogFilePortionResponse
     */
	public function getDownloadDBLogFilePortion(
        \OpenAPI\OpenAPI\Models\Operations\GETDownloadDBLogFilePortionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETDownloadDBLogFilePortionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DownloadDBLogFilePortion');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETDownloadDBLogFilePortionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETDownloadDBLogFilePortionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getModifyDBInstance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETModifyDBInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETModifyDBInstanceResponse
     */
	public function getModifyDBInstance(
        \OpenAPI\OpenAPI\Models\Operations\GETModifyDBInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETModifyDBInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyDBInstance');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETModifyDBInstanceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETModifyDBInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getModifyDBSubnetGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETModifyDBSubnetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETModifyDBSubnetGroupResponse
     */
	public function getModifyDBSubnetGroup(
        \OpenAPI\OpenAPI\Models\Operations\GETModifyDBSubnetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETModifyDBSubnetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyDBSubnetGroup');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETModifyDBSubnetGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETModifyDBSubnetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getModifyEventSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETModifyEventSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETModifyEventSubscriptionResponse
     */
	public function getModifyEventSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GETModifyEventSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETModifyEventSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyEventSubscription');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETModifyEventSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETModifyEventSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getPromoteReadReplica
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETPromoteReadReplicaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETPromoteReadReplicaResponse
     */
	public function getPromoteReadReplica(
        \OpenAPI\OpenAPI\Models\Operations\GETPromoteReadReplicaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETPromoteReadReplicaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=PromoteReadReplica');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETPromoteReadReplicaRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETPromoteReadReplicaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getRebootDBInstance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETRebootDBInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETRebootDBInstanceResponse
     */
	public function getRebootDBInstance(
        \OpenAPI\OpenAPI\Models\Operations\GETRebootDBInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETRebootDBInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RebootDBInstance');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETRebootDBInstanceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETRebootDBInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getRemoveSourceIdentifierFromSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETRemoveSourceIdentifierFromSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETRemoveSourceIdentifierFromSubscriptionResponse
     */
	public function getRemoveSourceIdentifierFromSubscription(
        \OpenAPI\OpenAPI\Models\Operations\GETRemoveSourceIdentifierFromSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETRemoveSourceIdentifierFromSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RemoveSourceIdentifierFromSubscription');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETRemoveSourceIdentifierFromSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETRemoveSourceIdentifierFromSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getRemoveTagsFromResource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETRemoveTagsFromResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETRemoveTagsFromResourceResponse
     */
	public function getRemoveTagsFromResource(
        \OpenAPI\OpenAPI\Models\Operations\GETRemoveTagsFromResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETRemoveTagsFromResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RemoveTagsFromResource');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETRemoveTagsFromResourceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETRemoveTagsFromResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * getRevokeDBSecurityGroupIngress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETRevokeDBSecurityGroupIngressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETRevokeDBSecurityGroupIngressResponse
     */
	public function getRevokeDBSecurityGroupIngress(
        \OpenAPI\OpenAPI\Models\Operations\GETRevokeDBSecurityGroupIngressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETRevokeDBSecurityGroupIngressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RevokeDBSecurityGroupIngress');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETRevokeDBSecurityGroupIngressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETRevokeDBSecurityGroupIngressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postAddSourceIdentifierToSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTAddSourceIdentifierToSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTAddSourceIdentifierToSubscriptionResponse
     */
	public function postAddSourceIdentifierToSubscription(
        \OpenAPI\OpenAPI\Models\Operations\POSTAddSourceIdentifierToSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTAddSourceIdentifierToSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=AddSourceIdentifierToSubscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTAddSourceIdentifierToSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTAddSourceIdentifierToSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postAddTagsToResource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTAddTagsToResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTAddTagsToResourceResponse
     */
	public function postAddTagsToResource(
        \OpenAPI\OpenAPI\Models\Operations\POSTAddTagsToResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTAddTagsToResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=AddTagsToResource');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTAddTagsToResourceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTAddTagsToResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postAuthorizeDBSecurityGroupIngress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTAuthorizeDBSecurityGroupIngressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTAuthorizeDBSecurityGroupIngressResponse
     */
	public function postAuthorizeDBSecurityGroupIngress(
        \OpenAPI\OpenAPI\Models\Operations\POSTAuthorizeDBSecurityGroupIngressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTAuthorizeDBSecurityGroupIngressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=AuthorizeDBSecurityGroupIngress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTAuthorizeDBSecurityGroupIngressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTAuthorizeDBSecurityGroupIngressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCopyDBSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCopyDBSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCopyDBSnapshotResponse
     */
	public function postCopyDBSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\POSTCopyDBSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCopyDBSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CopyDBSnapshot');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCopyDBSnapshotRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCopyDBSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateDBInstance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceResponse
     */
	public function postCreateDBInstance(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateDBInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateDBInstanceReadReplica
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceReadReplicaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceReadReplicaResponse
     */
	public function postCreateDBInstanceReadReplica(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceReadReplicaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceReadReplicaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateDBInstanceReadReplica');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceReadReplicaRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBInstanceReadReplicaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493 or $httpResponse->getStatusCode() === 494 or $httpResponse->getStatusCode() === 495) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateDBParameterGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBParameterGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBParameterGroupResponse
     */
	public function postCreateDBParameterGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBParameterGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBParameterGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateDBParameterGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateDBParameterGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBParameterGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateDBSecurityGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSecurityGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSecurityGroupResponse
     */
	public function postCreateDBSecurityGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSecurityGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSecurityGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateDBSecurityGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSecurityGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSecurityGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateDBSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSnapshotResponse
     */
	public function postCreateDBSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateDBSnapshot');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSnapshotRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateDBSubnetGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSubnetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSubnetGroupResponse
     */
	public function postCreateDBSubnetGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSubnetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSubnetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateDBSubnetGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSubnetGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateDBSubnetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateEventSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateEventSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateEventSubscriptionResponse
     */
	public function postCreateEventSubscription(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateEventSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateEventSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateEventSubscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateEventSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateEventSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postCreateOptionGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTCreateOptionGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTCreateOptionGroupResponse
     */
	public function postCreateOptionGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTCreateOptionGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTCreateOptionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=CreateOptionGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTCreateOptionGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTCreateOptionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDeleteDBInstance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBInstanceResponse
     */
	public function postDeleteDBInstance(
        \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBInstanceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDeleteDBParameterGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBParameterGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBParameterGroupResponse
     */
	public function postDeleteDBParameterGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBParameterGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBParameterGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBParameterGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBParameterGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBParameterGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDeleteDBSecurityGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSecurityGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSecurityGroupResponse
     */
	public function postDeleteDBSecurityGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSecurityGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSecurityGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBSecurityGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSecurityGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSecurityGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDeleteDBSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSnapshotResponse
     */
	public function postDeleteDBSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBSnapshot');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSnapshotRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDeleteDBSubnetGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSubnetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSubnetGroupResponse
     */
	public function postDeleteDBSubnetGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSubnetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSubnetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteDBSubnetGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSubnetGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDeleteDBSubnetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDeleteEventSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDeleteEventSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDeleteEventSubscriptionResponse
     */
	public function postDeleteEventSubscription(
        \OpenAPI\OpenAPI\Models\Operations\POSTDeleteEventSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDeleteEventSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteEventSubscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDeleteEventSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDeleteEventSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDeleteOptionGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDeleteOptionGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDeleteOptionGroupResponse
     */
	public function postDeleteOptionGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTDeleteOptionGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDeleteOptionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DeleteOptionGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDeleteOptionGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDeleteOptionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBEngineVersions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBEngineVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBEngineVersionsResponse
     */
	public function postDescribeDBEngineVersions(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBEngineVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBEngineVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBEngineVersions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBEngineVersionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBEngineVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBInstances
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBInstancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBInstancesResponse
     */
	public function postDescribeDBInstances(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBInstancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBInstances');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBInstancesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBLogFiles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBLogFilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBLogFilesResponse
     */
	public function postDescribeDBLogFiles(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBLogFilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBLogFilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBLogFiles');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBLogFilesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBLogFilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBParameterGroups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParameterGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParameterGroupsResponse
     */
	public function postDescribeDBParameterGroups(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParameterGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParameterGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBParameterGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParameterGroupsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParameterGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBParameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParametersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParametersResponse
     */
	public function postDescribeDBParameters(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParametersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParametersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBParameters');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParametersRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBParametersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBSecurityGroups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSecurityGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSecurityGroupsResponse
     */
	public function postDescribeDBSecurityGroups(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSecurityGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSecurityGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBSecurityGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSecurityGroupsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSecurityGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBSnapshots
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSnapshotsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSnapshotsResponse
     */
	public function postDescribeDBSnapshots(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSnapshotsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSnapshotsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBSnapshots');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSnapshotsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSnapshotsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeDBSubnetGroups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSubnetGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSubnetGroupsResponse
     */
	public function postDescribeDBSubnetGroups(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSubnetGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSubnetGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeDBSubnetGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSubnetGroupsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeDBSubnetGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeEngineDefaultParameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEngineDefaultParametersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEngineDefaultParametersResponse
     */
	public function postDescribeEngineDefaultParameters(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEngineDefaultParametersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEngineDefaultParametersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeEngineDefaultParameters');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeEngineDefaultParametersRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEngineDefaultParametersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeEventCategories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventCategoriesResponse
     */
	public function postDescribeEventCategories(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeEventCategories');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventCategoriesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeEventSubscriptions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventSubscriptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventSubscriptionsResponse
     */
	public function postDescribeEventSubscriptions(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventSubscriptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventSubscriptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeEventSubscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventSubscriptionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventSubscriptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeEvents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventsResponse
     */
	public function postDescribeEvents(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeEvents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeOptionGroupOptions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupOptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupOptionsResponse
     */
	public function postDescribeOptionGroupOptions(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupOptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeOptionGroupOptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupOptionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeOptionGroups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupsResponse
     */
	public function postDescribeOptionGroups(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeOptionGroups');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOptionGroupsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeOrderableDBInstanceOptions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOrderableDBInstanceOptionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOrderableDBInstanceOptionsResponse
     */
	public function postDescribeOrderableDBInstanceOptions(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOrderableDBInstanceOptionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOrderableDBInstanceOptionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeOrderableDBInstanceOptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeOrderableDBInstanceOptionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeOrderableDBInstanceOptionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeReservedDBInstances
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesResponse
     */
	public function postDescribeReservedDBInstances(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeReservedDBInstances');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDescribeReservedDBInstancesOfferings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesOfferingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesOfferingsResponse
     */
	public function postDescribeReservedDBInstancesOfferings(
        \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesOfferingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesOfferingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DescribeReservedDBInstancesOfferings');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesOfferingsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDescribeReservedDBInstancesOfferingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postDownloadDBLogFilePortion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTDownloadDBLogFilePortionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTDownloadDBLogFilePortionResponse
     */
	public function postDownloadDBLogFilePortion(
        \OpenAPI\OpenAPI\Models\Operations\POSTDownloadDBLogFilePortionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTDownloadDBLogFilePortionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=DownloadDBLogFilePortion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTDownloadDBLogFilePortionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTDownloadDBLogFilePortionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postListTagsForResource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTListTagsForResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTListTagsForResourceResponse
     */
	public function postListTagsForResource(
        \OpenAPI\OpenAPI\Models\Operations\POSTListTagsForResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTListTagsForResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ListTagsForResource');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTListTagsForResourceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTListTagsForResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postModifyDBInstance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBInstanceResponse
     */
	public function postModifyDBInstance(
        \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyDBInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTModifyDBInstanceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postModifyDBParameterGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBParameterGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBParameterGroupResponse
     */
	public function postModifyDBParameterGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBParameterGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBParameterGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyDBParameterGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTModifyDBParameterGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBParameterGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postModifyDBSubnetGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBSubnetGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBSubnetGroupResponse
     */
	public function postModifyDBSubnetGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBSubnetGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBSubnetGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyDBSubnetGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTModifyDBSubnetGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTModifyDBSubnetGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postModifyEventSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTModifyEventSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTModifyEventSubscriptionResponse
     */
	public function postModifyEventSubscription(
        \OpenAPI\OpenAPI\Models\Operations\POSTModifyEventSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTModifyEventSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyEventSubscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTModifyEventSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTModifyEventSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postModifyOptionGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTModifyOptionGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTModifyOptionGroupResponse
     */
	public function postModifyOptionGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTModifyOptionGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTModifyOptionGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ModifyOptionGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTModifyOptionGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTModifyOptionGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postPromoteReadReplica
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTPromoteReadReplicaRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTPromoteReadReplicaResponse
     */
	public function postPromoteReadReplica(
        \OpenAPI\OpenAPI\Models\Operations\POSTPromoteReadReplicaRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTPromoteReadReplicaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=PromoteReadReplica');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTPromoteReadReplicaRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTPromoteReadReplicaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postPurchaseReservedDBInstancesOffering
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTPurchaseReservedDBInstancesOfferingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTPurchaseReservedDBInstancesOfferingResponse
     */
	public function postPurchaseReservedDBInstancesOffering(
        \OpenAPI\OpenAPI\Models\Operations\POSTPurchaseReservedDBInstancesOfferingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTPurchaseReservedDBInstancesOfferingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=PurchaseReservedDBInstancesOffering');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTPurchaseReservedDBInstancesOfferingRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTPurchaseReservedDBInstancesOfferingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postRebootDBInstance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRebootDBInstanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRebootDBInstanceResponse
     */
	public function postRebootDBInstance(
        \OpenAPI\OpenAPI\Models\Operations\POSTRebootDBInstanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRebootDBInstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RebootDBInstance');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTRebootDBInstanceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRebootDBInstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postRemoveSourceIdentifierFromSubscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRemoveSourceIdentifierFromSubscriptionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRemoveSourceIdentifierFromSubscriptionResponse
     */
	public function postRemoveSourceIdentifierFromSubscription(
        \OpenAPI\OpenAPI\Models\Operations\POSTRemoveSourceIdentifierFromSubscriptionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRemoveSourceIdentifierFromSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RemoveSourceIdentifierFromSubscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTRemoveSourceIdentifierFromSubscriptionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRemoveSourceIdentifierFromSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postRemoveTagsFromResource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRemoveTagsFromResourceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRemoveTagsFromResourceResponse
     */
	public function postRemoveTagsFromResource(
        \OpenAPI\OpenAPI\Models\Operations\POSTRemoveTagsFromResourceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRemoveTagsFromResourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RemoveTagsFromResource');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTRemoveTagsFromResourceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRemoveTagsFromResourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postResetDBParameterGroup
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTResetDBParameterGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTResetDBParameterGroupResponse
     */
	public function postResetDBParameterGroup(
        \OpenAPI\OpenAPI\Models\Operations\POSTResetDBParameterGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTResetDBParameterGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=ResetDBParameterGroup');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTResetDBParameterGroupRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTResetDBParameterGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postRestoreDBInstanceFromDBSnapshot
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceFromDBSnapshotRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceFromDBSnapshotResponse
     */
	public function postRestoreDBInstanceFromDBSnapshot(
        \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceFromDBSnapshotRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceFromDBSnapshotResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RestoreDBInstanceFromDBSnapshot');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceFromDBSnapshotRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceFromDBSnapshotResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postRestoreDBInstanceToPointInTime
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceToPointInTimeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceToPointInTimeResponse
     */
	public function postRestoreDBInstanceToPointInTime(
        \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceToPointInTimeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceToPointInTimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RestoreDBInstanceToPointInTime');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceToPointInTimeRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRestoreDBInstanceToPointInTimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482 or $httpResponse->getStatusCode() === 483 or $httpResponse->getStatusCode() === 484 or $httpResponse->getStatusCode() === 485 or $httpResponse->getStatusCode() === 486 or $httpResponse->getStatusCode() === 487 or $httpResponse->getStatusCode() === 488 or $httpResponse->getStatusCode() === 489 or $httpResponse->getStatusCode() === 490 or $httpResponse->getStatusCode() === 491 or $httpResponse->getStatusCode() === 492 or $httpResponse->getStatusCode() === 493) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * postRevokeDBSecurityGroupIngress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTRevokeDBSecurityGroupIngressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTRevokeDBSecurityGroupIngressResponse
     */
	public function postRevokeDBSecurityGroupIngress(
        \OpenAPI\OpenAPI\Models\Operations\POSTRevokeDBSecurityGroupIngressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTRevokeDBSecurityGroupIngressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/#Action=RevokeDBSecurityGroupIngress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\POSTRevokeDBSecurityGroupIngressRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTRevokeDBSecurityGroupIngressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 480 or $httpResponse->getStatusCode() === 481 or $httpResponse->getStatusCode() === 482) {
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}