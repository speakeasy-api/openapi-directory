"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginated_accounts as shared_paginated_accounts
from ..shared import security as shared_security
from typing import Any, Optional


@dataclasses.dataclass
class GetSnippetsWorkspaceEncodedIDWatchersSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetSnippetsWorkspaceEncodedIDWatchersRequest:
    
    encoded_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'encoded_id', 'style': 'simple', 'explode': False }})
    r"""The snippet id."""  
    workspace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace', 'style': 'simple', 'explode': False }})
    r"""This can either be the workspace ID (slug) or the workspace UUID
    surrounded by curly-braces, for example: `{workspace UUID}`.
    """  
    

@dataclasses.dataclass
class GetSnippetsWorkspaceEncodedIDWatchersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If the snippet does not exist."""  
    paginated_accounts: Optional[shared_paginated_accounts.PaginatedAccounts] = dataclasses.field(default=None)
    r"""The paginated list of users watching this snippet"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    