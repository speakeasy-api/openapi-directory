// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type MemberLinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type MemberLinks struct {
	Self *MemberLinksSelf `json:"self,omitempty"`
}

// MemberChannelTypeEnum - The channel that the member joins with
type MemberChannelTypeEnum string

const (
	MemberChannelTypeEnumApp MemberChannelTypeEnum = "app"
)

func (e *MemberChannelTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "app":
		*e = MemberChannelTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MemberChannelTypeEnum: %s", s)
	}
}

type MemberChannel struct {
	// The channel that the member joins with
	Type *MemberChannelTypeEnum `json:"type,omitempty"`
}

type MemberInitiatorInvited struct {
	IsSystem *bool `json:"is_system,omitempty"`
}

type MemberInitiatorJoined struct {
	IsSystem *bool `json:"is_system,omitempty"`
}

type MemberInitiator struct {
	Invited *MemberInitiatorInvited `json:"invited,omitempty"`
	Joined  *MemberInitiatorJoined  `json:"joined,omitempty"`
}

// MemberMediaAudioSettings - The current audio state for the member
type MemberMediaAudioSettings struct {
	// Can the member hear other participants?
	Earmuffed *bool `json:"earmuffed,omitempty"`
	// Is audio enabled?
	Enabled *bool `json:"enabled,omitempty"`
	// Can the member speak to other participants?
	Muted *bool `json:"muted,omitempty"`
}

// MemberMedia - The current media state for the member
type MemberMedia struct {
	// The current audio state for the member
	AudioSettings *MemberMediaAudioSettings `json:"audio_settings,omitempty"`
}

// MemberStateEnum - The state that the member is in for this conversation
type MemberStateEnum string

const (
	MemberStateEnumInvited MemberStateEnum = "INVITED"
	MemberStateEnumJoined  MemberStateEnum = "JOINED"
)

func (e *MemberStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INVITED":
		fallthrough
	case "JOINED":
		*e = MemberStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MemberStateEnum: %s", s)
	}
}

type MemberTimestamp struct {
	// The time that an invitation was sent
	Invited *string `json:"invited,omitempty"`
	// The time that the conversation was joined
	Joined *string `json:"joined,omitempty"`
	// The time that the member left the conversation
	Left *string `json:"left,omitempty"`
}

type Member struct {
	Links   *MemberLinks   `json:"_links,omitempty"`
	Channel *MemberChannel `json:"channel,omitempty"`
	// The display name of the User
	DisplayName *string `json:"display_name,omitempty"`
	// Member ID
	ID        *string          `json:"id,omitempty"`
	Initiator *MemberInitiator `json:"initiator,omitempty"`
	// The current media state for the member
	Media *MemberMedia `json:"media,omitempty"`
	// The name of the User
	Name *string `json:"name,omitempty"`
	// The state that the member is in for this conversation
	State     *MemberStateEnum `json:"state,omitempty"`
	Timestamp *MemberTimestamp `json:"timestamp,omitempty"`
	// The ID of the User
	UserID *string `json:"user_id,omitempty"`
}
