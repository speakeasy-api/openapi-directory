"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsJSONSecurity:
    
    gma_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum(str, Enum):
    CAB = 'CAB'
    IKM = 'IKM'
    PRK = 'PRK'
    TXI = 'TXI'
    VOY = 'VOY'
    PTT = 'PTT'
    FHR = 'FHR'
    DIV = 'DIV'
    RES = 'RES'

class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum(str, Enum):
    CUSTOMER = 'customer'
    PROVIDER = 'provider'
    BANK = 'bank'
    CASH_WOUCHER = 'cashWoucher'
    FISCAL = 'fiscal'
    INSURANCE = 'insurance'
    SOCIAL = 'social'
    OTHER = 'other'
    PERMANENT = 'permanent'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2Accounting:
    
    accounted_on: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccountedOn'), 'exclude': lambda f: f is None }})  
    workbook: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountingWorkbookEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Workbook'), 'exclude': lambda f: f is None }})  
    year_month: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('YearMonth'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2File:
    
    content64_encoded: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content64Encoded'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    
class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum(str, Enum):
    R = 'R'
    V = 'V'
    W = 'W'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2:
    
    file: PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2File = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('File') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Title') }})  
    account: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2AccountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Account'), 'exclude': lambda f: f is None }})  
    accounting: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2Accounting] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Accounting'), 'exclude': lambda f: f is None }})  
    archival_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivalDate'), 'exclude': lambda f: f is None }})  
    author: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Author'), 'exclude': lambda f: f is None }})  
    before_vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BeforeVAT'), 'exclude': lambda f: f is None }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Date'), 'exclude': lambda f: f is None }})  
    expense_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpenseDate'), 'exclude': lambda f: f is None }})  
    expense_report_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpenseReportId'), 'exclude': lambda f: f is None }})  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Provider'), 'exclude': lambda f: f is None }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reason'), 'exclude': lambda f: f is None }})  
    status: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON2StatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VAT'), 'exclude': lambda f: f is None }})  
    
class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum(str, Enum):
    CAB = 'CAB'
    IKM = 'IKM'
    PRK = 'PRK'
    TXI = 'TXI'
    VOY = 'VOY'
    PTT = 'PTT'
    FHR = 'FHR'
    DIV = 'DIV'
    RES = 'RES'

class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum(str, Enum):
    R = 'R'
    V = 'V'
    W = 'W'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1:
    
    document_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentId') }})  
    account: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1AccountEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Account'), 'exclude': lambda f: f is None }})  
    archival_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchivalDate'), 'exclude': lambda f: f is None }})  
    before_vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BeforeVAT'), 'exclude': lambda f: f is None }})  
    expense_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpenseDate'), 'exclude': lambda f: f is None }})  
    expense_report_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpenseReportId'), 'exclude': lambda f: f is None }})  
    provider: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Provider'), 'exclude': lambda f: f is None }})  
    reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reason'), 'exclude': lambda f: f is None }})  
    status: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsApplicationJSON1StatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    vat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VAT'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsJSONRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    request_body: Any = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsJSON201ApplicationJSON:
    r"""Id of expense proof created"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDFoldersIDExpenseProofsJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    post_spaces_space_id_folders_id_expense_proofs_json_201_application_json_object: Optional[PostSpacesSpaceIDFoldersIDExpenseProofsJSON201ApplicationJSON] = dataclasses.field(default=None)
    r"""Id of expense proof created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    