/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Transaction - OK - the request has succeeded.
 */
public class Transaction {
    /**
     * Unique identifier of the account holder.
     */
    @JsonProperty("accountHolderId")
    public String accountHolderId;

    public Transaction withAccountHolderId(String accountHolderId) {
        this.accountHolderId = accountHolderId;
        return this;
    }
    
    @JsonProperty("amount")
    public Amount amount;

    public Transaction withAmount(Amount amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Unique identifier of the balance account.
     */
    @JsonProperty("balanceAccountId")
    public String balanceAccountId;

    public Transaction withBalanceAccountId(String balanceAccountId) {
        this.balanceAccountId = balanceAccountId;
        return this;
    }
    
    /**
     * Unique identifier of the balance platform.
     */
    @JsonProperty("balancePlatform")
    public String balancePlatform;

    public Transaction withBalancePlatform(String balancePlatform) {
        this.balancePlatform = balancePlatform;
        return this;
    }
    
    /**
     * The date the transaction was booked to the balance account.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("bookingDate")
    public OffsetDateTime bookingDate;

    public Transaction withBookingDate(OffsetDateTime bookingDate) {
        this.bookingDate = bookingDate;
        return this;
    }
    
    /**
     * The category of the transaction indicating the type of activity.
     * 
     *  Possible values:
     * 
     * * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.
     * 
     * * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.
     * 
     * * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.
     * 
     * * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public TransactionCategoryEnum category;

    public Transaction withCategory(TransactionCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    @JsonProperty("counterparty")
    public Counterparty counterparty;

    public Transaction withCounterparty(Counterparty counterparty) {
        this.counterparty = counterparty;
        return this;
    }
    
    /**
     * The date the transaction was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;

    public Transaction withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The `description` from the `/transfers` request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public Transaction withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Unique identifier of the transaction.
     */
    @JsonProperty("id")
    public String id;

    public Transaction withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instructedAmount")
    public Amount instructedAmount;

    public Transaction withInstructedAmount(Amount instructedAmount) {
        this.instructedAmount = instructedAmount;
        return this;
    }
    
    /**
     * Unique identifier of the payment instrument that was used for the transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentInstrumentId")
    public String paymentInstrumentId;

    public Transaction withPaymentInstrumentId(String paymentInstrumentId) {
        this.paymentInstrumentId = paymentInstrumentId;
        return this;
    }
    
    /**
     * The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
     */
    @JsonProperty("reference")
    public String reference;

    public Transaction withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * The reference sent to or received from the counterparty.
     * 
     * * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.
     * 
     *  * For incoming funds, this is the reference from the sender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referenceForBeneficiary")
    public String referenceForBeneficiary;

    public Transaction withReferenceForBeneficiary(String referenceForBeneficiary) {
        this.referenceForBeneficiary = referenceForBeneficiary;
        return this;
    }
    
    /**
     * The status of the transaction.
     * 
     *  Possible values:
     * 
     * * **pending**: The transaction is still pending.
     * 
     * * **booked**: The transaction has been booked to the balance account.
     * 
     * 
     */
    @JsonProperty("status")
    public TransactionStatusEnum status;

    public Transaction withStatus(TransactionStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Unique identifier of the related transfer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transferId")
    public String transferId;

    public Transaction withTransferId(String transferId) {
        this.transferId = transferId;
        return this;
    }
    
    /**
     * The type of the transaction.
     * 
     *  Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public TransactionTypeEnum type;

    public Transaction withType(TransactionTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The date the transfer amount becomes available in the balance account.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("valueDate")
    public OffsetDateTime valueDate;

    public Transaction withValueDate(OffsetDateTime valueDate) {
        this.valueDate = valueDate;
        return this;
    }
    
    public Transaction(@JsonProperty("accountHolderId") String accountHolderId, @JsonProperty("amount") Amount amount, @JsonProperty("balanceAccountId") String balanceAccountId, @JsonProperty("balancePlatform") String balancePlatform, @JsonProperty("bookingDate") OffsetDateTime bookingDate, @JsonProperty("counterparty") Counterparty counterparty, @JsonProperty("createdAt") OffsetDateTime createdAt, @JsonProperty("id") String id, @JsonProperty("reference") String reference, @JsonProperty("status") TransactionStatusEnum status, @JsonProperty("valueDate") OffsetDateTime valueDate) {
        this.accountHolderId = accountHolderId;
        this.amount = amount;
        this.balanceAccountId = balanceAccountId;
        this.balancePlatform = balancePlatform;
        this.bookingDate = bookingDate;
        this.counterparty = counterparty;
        this.createdAt = createdAt;
        this.id = id;
        this.reference = reference;
        this.status = status;
        this.valueDate = valueDate;
  }
}
