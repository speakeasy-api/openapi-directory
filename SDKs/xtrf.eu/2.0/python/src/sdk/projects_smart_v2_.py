"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ProjectsSmartV2:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_external_file_links(self, request: operations.AddExternalFileLinksRequest) -> operations.AddExternalFileLinksResponse:
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddExternalFileLinksRequest, base_url, '/v2/projects/{projectId}/files/addExternalLink', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "external_file_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddExternalFileLinksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def add_file_links_1(self, request: operations.AddFileLinks1Request) -> operations.AddFileLinks1Response:
        r"""Adds file links to the project as added by PM.
        Adds file links to the project as added by PM. The following properties can be specified for each file link:<ul><li>url (required, 400 Bad Request is returned otherwise)</li><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddFileLinks1Request, base_url, '/v2/projects/{projectId}/files/addLink', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_link_categorizations_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddFileLinks1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilesDto])
                res.files_dto = out

        return res

    def add_files_1(self, request: operations.AddFiles1Request) -> operations.AddFiles1Response:
        r"""Adds files to the project as added by PM.
        Adds files to the project as added by PM. The files have to be uploaded beforehand (see \"POST /v2/projects/{projectId}/files/upload\" operation). The following properties can be specified for each file:<ul><li>category (required, 400 Bad Request is returned otherwise)</li><li>languageIds – when the file category depends on a list of languages</li><li>languageCombinationIds – when the file category depends on a list of language combinations</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddFiles1Request, base_url, '/v2/projects/{projectId}/files/add', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_categorizations_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddFiles1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def add_job_to_process(self, request: operations.AddJobToProcessRequest) -> operations.AddJobToProcessResponse:
        r"""Returns process id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddJobToProcessRequest, base_url, '/v2/projects/{projectId}/addJob', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddJobToProcessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CATToolProjectDTO])
                res.cat_tool_project_dto = out

        return res

    def archive(self, request: shared.FilesDto) -> operations.ArchiveResponse:
        r"""Prepares a ZIP archive that contains the specified files.
        Prepares a ZIP archive that contains the specified files.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/projects/files/archive'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArchiveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilesArchiveDto])
                res.files_archive_dto = out

        return res

    def change_status_2(self, request: operations.ChangeStatus2Request) -> operations.ChangeStatus2Response:
        r"""Changes project status if possible (400 Bad Request is returned otherwise).
        Changes project status if possible (400 Bad Request is returned otherwise). The status has to be specified using one of the following keys: <ul><li>CANCELLED – available when the job has one of the following statuses: OPEN, STARTED</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeStatus2Request, base_url, '/v2/projects/{projectId}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "project_status_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeStatus2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_payable_2(self, request: operations.CreatePayable2Request) -> operations.CreatePayable2Response:
        r"""Adds a payable to a project.
        Adds a payable to a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePayable2Request, base_url, '/v2/projects/{projectId}/finance/payables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePayable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def create_receivable_2(self, request: operations.CreateReceivable2Request) -> operations.CreateReceivable2Response:
        r"""Adds a receivable to a project.
        Adds a receivable to a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateReceivable2Request, base_url, '/v2/projects/{projectId}/finance/receivables', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_create_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateReceivable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    def create_6(self, request: shared.ProjectCreateDTO) -> operations.Create6Response:
        r"""Creates a new Smart Project.
        Creates a new Smart Project. If the specified service ID refers to Classic Project, 400 Bad Request is returned instead.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/projects'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.Create6Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDTOv2])
                res.project_dt_ov2 = out

        return res

    def delete_payable_2(self, request: operations.DeletePayable2Request) -> operations.DeletePayable2Response:
        r"""Deletes a payable.
        Deletes a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePayable2Request, base_url, '/v2/projects/{projectId}/finance/payables/{payableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePayable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_receivable_2(self, request: operations.DeleteReceivable2Request) -> operations.DeleteReceivable2Response:
        r"""Deletes a receivable.
        Deletes a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteReceivable2Request, base_url, '/v2/projects/{projectId}/finance/receivables/{receivableId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteReceivable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_by_external_id_1(self, request: operations.GetByExternalID1Request) -> operations.GetByExternalID1Response:
        r"""Returns project details.
        Returns project details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByExternalID1Request, base_url, '/v2/projects/for-external-id/{externalProjectId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByExternalID1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDTOv2])
                res.project_dt_ov2 = out

        return res

    def get_by_id_9(self, request: operations.GetByID9Request) -> operations.GetByID9Response:
        r"""Returns project details.
        Returns project details. If the specified project ID refers to Classic Project, 400 Bad Request is returned instead.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetByID9Request, base_url, '/v2/projects/{projectId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetByID9Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectDTOv2])
                res.project_dt_ov2 = out

        return res

    def get_cat_tool_project_info(self, request: operations.GetCATToolProjectInfoRequest) -> operations.GetCATToolProjectInfoResponse:
        r"""Returns if cat tool project is created or queued."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCATToolProjectInfoRequest, base_url, '/v2/projects/{projectId}/catToolProject', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCATToolProjectInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CATToolProjectDTO])
                res.cat_tool_project_dto = out

        return res

    def get_contacts_2(self, request: operations.GetContacts2Request) -> operations.GetContacts2Response:
        r"""Returns Client Contacts information for a project.
        Returns Client Contacts information for a project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetContacts2Request, base_url, '/v2/projects/{projectId}/clientContacts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetContacts2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SmartContactsDTO])
                res.smart_contacts_dto = out

        return res

    def get_custom_fields_8(self, request: operations.GetCustomFields8Request) -> operations.GetCustomFields8Response:
        r"""Returns a list of custom field keys and values for a project.
        Returns a list of custom field keys and values for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCustomFields8Request, base_url, '/v2/projects/{projectId}/customFields', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCustomFields8Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CustomFieldDTO]])
                res.custom_fields_dto = out

        return res

    def get_deliverable_files(self, request: operations.GetDeliverableFilesRequest) -> operations.GetDeliverableFilesResponse:
        r"""Returns list of files in a project, that are ready to be delivered to client.
        Returns list of files in a project, that are ready to be delivered to client. A file is considered deliverable to client when all of the following criteria are met:<ul><li>the file was added to a job in the last step in the process</li><li>the file is marked as verified (if it was added in a verification step and the file is verifiable, according to its category)</li><li>the job is finished (has Ready status)</li></ul>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeliverableFilesRequest, base_url, '/v2/projects/{projectId}/files/deliverable', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeliverableFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectFileDto]])
                res.project_file_dtos = out

        return res

    def get_file_by_id_2(self, request: operations.GetFileByID2Request) -> operations.GetFileByID2Response:
        r"""Returns details of a file.
        Returns details of a file.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileByID2Request, base_url, '/v2/projects/files/{fileId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileByID2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProjectFileDto])
                res.project_file_dto = out

        return res

    def get_file_content_by_id(self, request: operations.GetFileContentByIDRequest) -> operations.GetFileContentByIDResponse:
        r"""Downloads a file content.
        Downloads a file content.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFileContentByIDRequest, base_url, '/v2/projects/files/{fileId}/download/{fileName}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFileContentByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_files(self, request: operations.GetFilesRequest) -> operations.GetFilesResponse:
        r"""Returns list of files in a project.
        Returns list of files in a project. Only files added to the project (i.e. files that have assigned category and languages) are listed.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFilesRequest, base_url, '/v2/projects/{projectId}/files', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ProjectFileDto]])
                res.project_file_dtos = out

        return res

    def get_finance_2(self, request: operations.GetFinance2Request) -> operations.GetFinance2Response:
        r"""Returns finance information for a project.
        Returns finance information for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFinance2Request, base_url, '/v2/projects/{projectId}/finance', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFinance2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FinanceDTO])
                res.finance_dto = out

        return res

    def get_jobs(self, request: operations.GetJobsRequest) -> operations.GetJobsResponse:
        r"""Returns list of jobs in a project.
        Returns list of jobs in a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJobsRequest, base_url, '/v2/projects/{projectId}/jobs', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJobsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.JobDto]])
                res.job_dtos = out

        return res

    def get_process_id(self, request: operations.GetProcessIDRequest) -> operations.GetProcessIDResponse:
        r"""Returns process id."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProcessIDRequest, base_url, '/v2/projects/{projectId}/process', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProcessIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CATToolProjectDTO])
                res.cat_tool_project_dto = out

        return res

    def update_client_deadline(self, request: operations.UpdateClientDeadlineRequest) -> operations.UpdateClientDeadlineResponse:
        r"""Updates Client Deadline for a project.
        Updates Client Deadline for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientDeadlineRequest, base_url, '/v2/projects/{projectId}/clientDeadline', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "time_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientDeadlineResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_client_notes(self, request: operations.UpdateClientNotesRequest) -> operations.UpdateClientNotesResponse:
        r"""Updates Client Notes for a project.
        Updates Client Notes for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientNotesRequest, base_url, '/v2/projects/{projectId}/clientNotes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientNotesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_client_reference_number(self, request: operations.UpdateClientReferenceNumberRequest) -> operations.UpdateClientReferenceNumberResponse:
        r"""Updates Client Reference Number for a project.
        Updates Client Reference Number for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientReferenceNumberRequest, base_url, '/v2/projects/{projectId}/clientReferenceNumber', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientReferenceNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_contacts_2(self, request: operations.UpdateContacts2Request) -> operations.UpdateContacts2Response:
        r"""Updates Client Contacts for a project.
        Updates Client Contacts for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateContacts2Request, base_url, '/v2/projects/{projectId}/clientContacts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "smart_contacts_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateContacts2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SmartContactsDTO])
                res.smart_contacts_dto = out

        return res

    def update_custom_field_2(self, request: operations.UpdateCustomField2Request) -> operations.UpdateCustomField2Response:
        r"""Updates a custom field with a specified key in a project
        Updates a custom field with a specified key in a project
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCustomField2Request, base_url, '/v2/projects/{projectId}/customFields/{key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "smart_custom_field_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCustomField2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_internal_notes(self, request: operations.UpdateInternalNotesRequest) -> operations.UpdateInternalNotesResponse:
        r"""Updates Internal Notes for a project.
        Updates Internal Notes for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateInternalNotesRequest, base_url, '/v2/projects/{projectId}/internalNotes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateInternalNotesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_ordered_on(self, request: operations.UpdateOrderedOnRequest) -> operations.UpdateOrderedOnResponse:
        r"""Updates Order Date for a project.
        Updates Order Date for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrderedOnRequest, base_url, '/v2/projects/{projectId}/orderDate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "time_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrderedOnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_payable_2(self, request: operations.UpdatePayable2Request) -> operations.UpdatePayable2Response:
        r"""Updates a payable.
        Updates a payable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePayable2Request, base_url, '/v2/projects/{projectId}/finance/payables/{payableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePayable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayableDTO])
                res.payable_dto = out

        return res

    def update_receivable_2(self, request: operations.UpdateReceivable2Request) -> operations.UpdateReceivable2Response:
        r"""Updates a receivable.
        Updates a receivable.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateReceivable2Request, base_url, '/v2/projects/{projectId}/finance/receivables/{receivableId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "receivable_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateReceivable2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReceivableDTO])
                res.receivable_dto = out

        return res

    def update_source_language(self, request: operations.UpdateSourceLanguageRequest) -> operations.UpdateSourceLanguageResponse:
        r"""Updates source language for a project.
        Updates source language for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSourceLanguageRequest, base_url, '/v2/projects/{projectId}/sourceLanguage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "source_language_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSourceLanguageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_specialization(self, request: operations.UpdateSpecializationRequest) -> operations.UpdateSpecializationResponse:
        r"""Updates specialization for a project.
        Updates specialization for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSpecializationRequest, base_url, '/v2/projects/{projectId}/specialization', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "specialization_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSpecializationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_target_languages(self, request: operations.UpdateTargetLanguagesRequest) -> operations.UpdateTargetLanguagesResponse:
        r"""Updates target languages for a project.
        Updates target languages for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTargetLanguagesRequest, base_url, '/v2/projects/{projectId}/targetLanguages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "target_languages_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTargetLanguagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_vendor_instructions(self, request: operations.UpdateVendorInstructionsRequest) -> operations.UpdateVendorInstructionsResponse:
        r"""Updates instructions for all vendors performing the jobs in a project.
        Updates instructions for all vendors performing the jobs in a project. See also \"PUT /jobs/{jobId}/instructions\" for updating instructions for a specific job in a project or quote.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateVendorInstructionsRequest, base_url, '/v2/projects/{projectId}/vendorInstructions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "string_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateVendorInstructionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_volume(self, request: operations.UpdateVolumeRequest) -> operations.UpdateVolumeResponse:
        r"""Updates volume for a project.
        Updates volume for a project.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateVolumeRequest, base_url, '/v2/projects/{projectId}/volume', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "big_decimal_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateVolumeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def upload_file_2(self, request: operations.UploadFile2Request) -> operations.UploadFile2Response:
        r"""Uploads file to the project as a file uploaded by PM.
        Uploads file to the project as a file uploaded by PM. Only one file can be uploaded at once. When the upload is finished the file has to be added by specifying its category and languages (see \"PUT /v2/projects/{projectId}/files/add\" operation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UploadFile2Request, base_url, '/v2/projects/{projectId}/files/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "file_to_upload_dto", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UploadFile2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FileDto1])
                res.file_dto = out

        return res

    