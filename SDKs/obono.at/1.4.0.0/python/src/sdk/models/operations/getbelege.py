"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import belege as shared_belege
from enum import Enum
from typing import Optional

class GetBelegeFormatEnum(str, Enum):
    r"""Determines the format of the `Beleg` collection."""
    EXPORT = 'export'
    BELEG = 'beleg'
    UUIDLIST = 'uuidlist'

class GetBelegeOrderEnum(str, Enum):
    r"""Determines the sorting order."""
    ASC = 'asc'
    DESC = 'desc'


@dataclasses.dataclass
class GetBelegeRequest:
    
    format: GetBelegeFormatEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""Determines the format of the `Beleg` collection."""  
    registrierkasse_uuid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'registrierkasseUuid', 'style': 'simple', 'explode': False }})
    r"""The `_uuid` of the `Registrierkasse` to retrieve the `Beleg` collection."""  
    after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'after', 'style': 'form', 'explode': True }})
    r"""Only return results that where saved after the specified date-time string (i.e., anything that `Date.parse()` can parse)."""  
    before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'before', 'style': 'form', 'explode': True }})
    r"""Only return results that where saved before the specified date-time string (i.e., anything that `Date.parse()` can parse)."""  
    gte: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'gte', 'style': 'form', 'explode': True }})
    r"""Only return results that have at least a particular `Belegnummer`."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limits the number of returned results."""  
    lte: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lte', 'style': 'form', 'explode': True }})
    r"""Only return results that have at most a particular `Belegnummer`."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Skips the specified number of results from the result set."""  
    order: Optional[GetBelegeOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})
    r"""Determines the sorting order."""  
    

@dataclasses.dataclass
class GetBelegeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    belege: Optional[shared_belege.Belege] = dataclasses.field(default=None)
    r"""The `Beleg` collection from the \\"Datenerfassungsprotokoll\\"."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    