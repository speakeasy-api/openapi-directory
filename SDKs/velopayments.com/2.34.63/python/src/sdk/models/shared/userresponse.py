"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import role as shared_role
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class UserResponseMfaStatusEnum(str, Enum):
    r"""The status of the MFA device"""
    REGISTERED = 'REGISTERED'
    UNREGISTERED = 'UNREGISTERED'

class UserResponseMfaTypeEnum(str, Enum):
    r"""The type of the MFA device"""
    SMS = 'SMS'
    YUBIKEY = 'YUBIKEY'
    TOTP = 'TOTP'

class UserResponseStatusEnum(str, Enum):
    r"""The status of the user
    when the user has been invited but not yet enrolled they will have a PENDING status
    """
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    PENDING = 'PENDING'

class UserResponseUserTypeEnum(str, Enum):
    r"""Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE."""
    BACKOFFICE = 'BACKOFFICE'
    PAYOR = 'PAYOR'
    PAYEE = 'PAYEE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserResponse:
    r"""Get User Details"""
    
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('companyName'), 'exclude': lambda f: f is None }})
    r"""The payor or payee company name or null if the user is not a payor or payee user"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""the email address of the user"""  
    entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityId'), 'exclude': lambda f: f is None }})
    r"""The payorId or payeeId or null if the user is not a payor or payee user"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The id of the user"""  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})  
    locked_out: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockedOut'), 'exclude': lambda f: f is None }})
    r"""If true the user is currently locked out and unable to log in"""  
    locked_out_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockedOutTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""A timestamp showing when the user was locked out
    If null then the user is not currently locked out
    """  
    mfa_status: Optional[UserResponseMfaStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfaStatus'), 'exclude': lambda f: f is None }})
    r"""The status of the MFA device"""  
    mfa_type: Optional[UserResponseMfaTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfaType'), 'exclude': lambda f: f is None }})
    r"""The type of the MFA device"""  
    primary_contact_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryContactNumber'), 'exclude': lambda f: f is None }})
    r"""The main contact number for the user"""  
    roles: Optional[list[shared_role.Role]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})
    r"""The role(s) for the user"""  
    secondary_contact_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryContactNumber'), 'exclude': lambda f: f is None }})
    r"""The secondary contact number for the user"""  
    sms_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsNumber'), 'exclude': lambda f: f is None }})
    r"""The phone number of a device that the user can receive sms messages on"""  
    status: Optional[UserResponseStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the user
    when the user has been invited but not yet enrolled they will have a PENDING status
    """  
    user_type: Optional[UserResponseUserTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userType'), 'exclude': lambda f: f is None }})
    r"""Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE."""  
    