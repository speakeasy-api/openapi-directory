/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CorpPassCreate {
    /**
     * The URL the CorpPass system will redirect to in case of a failure to perform identity verfication. Mandatory for flow_type="corppass_flow_redirect"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_redirect_fail_url")public String clientRedirectFailUrl;
    public CorpPassCreate withClientRedirectFailUrl(String clientRedirectFailUrl) {
        this.clientRedirectFailUrl = clientRedirectFailUrl;
        return this;
    }
    
    /**
     * The URL the CorpPass system will redirect to in case of successful identity verfication. Mandatory for flow_type="corppass_flow_redirect"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_redirect_success_url")public String clientRedirectSuccessUrl;
    public CorpPassCreate withClientRedirectSuccessUrl(String clientRedirectSuccessUrl) {
        this.clientRedirectSuccessUrl = clientRedirectSuccessUrl;
        return this;
    }
    
    /**
     * DEPRECATED. Whether or not to enable the CorpPass flow. Must be true if provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")public Boolean enabled;
    public CorpPassCreate withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The CorpPass flow type.
     */
    @JsonProperty("flow_type")public CorpPassCreateFlowTypeEnum flowType;
    public CorpPassCreate withFlowType(CorpPassCreateFlowTypeEnum flowType) {
        this.flowType = flowType;
        return this;
    }
    
    /**
     * The email of the person who is going to perform the CorpPass process. Mandatory for flow_type="corppass_flow_email"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signer_email")public String signerEmail;
    public CorpPassCreate withSignerEmail(String signerEmail) {
        this.signerEmail = signerEmail;
        return this;
    }
    
    /**
     * The name of the person who is going to perform the CorpPass process. Mandatory for flow_type="corppass_flow_email"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signer_name")public String signerName;
    public CorpPassCreate withSignerName(String signerName) {
        this.signerName = signerName;
        return this;
    }
    
    /**
     * Whether or not to simulate CorpPass. Instead of redirecting to a CorpPass URL, you will receive a redirect to a Storecove URL which will show a page with two buttons: success and fail. This makes development without having test CorpPass credentials possible. Note this only works in sandbox, not in the production environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simulate_corppass")public Boolean simulateCorppass;
    public CorpPassCreate withSimulateCorppass(Boolean simulateCorppass) {
        this.simulateCorppass = simulateCorppass;
        return this;
    }
    
}
