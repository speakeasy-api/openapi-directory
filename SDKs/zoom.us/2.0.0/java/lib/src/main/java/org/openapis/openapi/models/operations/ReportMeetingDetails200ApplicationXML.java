/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

/**
 * ReportMeetingDetails200ApplicationXML - **HTTP Status Code:** `200`&lt;br&gt;
 * Meeting details returned.&lt;br&gt;
 * This is only available for paid account.
 */
public class ReportMeetingDetails200ApplicationXML {
    /**
     * Custom keys and values assigned to the meeting.
     */
    
    public ReportMeetingDetails200ApplicationXMLCustomKeys[] customKeys;
    public ReportMeetingDetails200ApplicationXML withCustomKeys(ReportMeetingDetails200ApplicationXMLCustomKeys[] customKeys) {
        this.customKeys = customKeys;
        return this;
    }
    
    /**
     * Department of the host.
     */
    
    public String dept;
    public ReportMeetingDetails200ApplicationXML withDept(String dept) {
        this.dept = dept;
        return this;
    }
    
    /**
     * Meeting duration.
     */
    
    public Long duration;
    public ReportMeetingDetails200ApplicationXML withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Meeting end time.
     */
    
    public OffsetDateTime endTime;
    public ReportMeetingDetails200ApplicationXML withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    
    public Long id;
    public ReportMeetingDetails200ApplicationXML withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Number of meeting participants.
     */
    
    public Long participantsCount;
    public ReportMeetingDetails200ApplicationXML withParticipantsCount(Long participantsCount) {
        this.participantsCount = participantsCount;
        return this;
    }
    
    /**
     * Meeting start time.
     */
    
    public OffsetDateTime startTime;
    public ReportMeetingDetails200ApplicationXML withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Meeting topic.
     */
    
    public String topic;
    public ReportMeetingDetails200ApplicationXML withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Number of meeting minutes. This represents the total amount of meeting minutes attended by each participant including the host, for meetings hosted by the user. For instance if there were one host(named A) and one participant(named B) in a meeting, the value of total_minutes would be calculated as below:
     * 
     * **total_minutes** = Total Meeting Attendance Minutes of A + Total Meeting Attendance Minutes of B
     */
    
    public Long totalMinutes;
    public ReportMeetingDetails200ApplicationXML withTotalMinutes(Long totalMinutes) {
        this.totalMinutes = totalMinutes;
        return this;
    }
    
    /**
     * Tracking fields.
     */
    
    public ReportMeetingDetails200ApplicationXMLTrackingFields[] trackingFields;
    public ReportMeetingDetails200ApplicationXML withTrackingFields(ReportMeetingDetails200ApplicationXMLTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * Meeting type.
     */
    
    public Long type;
    public ReportMeetingDetails200ApplicationXML withType(Long type) {
        this.type = type;
        return this;
    }
    
    /**
     * User email.
     */
    
    public String userEmail;
    public ReportMeetingDetails200ApplicationXML withUserEmail(String userEmail) {
        this.userEmail = userEmail;
        return this;
    }
    
    /**
     * User display name.
     */
    
    public String userName;
    public ReportMeetingDetails200ApplicationXML withUserName(String userName) {
        this.userName = userName;
        return this;
    }
    
    /**
     * Meeting UUID. Each meeting instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated for the next instance of the meeting). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
     */
    
    public String uuid;
    public ReportMeetingDetails200ApplicationXML withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
