/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SignalEvaluateRequest - SignalEvaluateRequest defines the request schema for `/signal/evaluate`
 */
public class SignalEvaluateRequest {
    /**
     * The access token associated with the Item data is being requested for.
     */
    @JsonProperty("access_token")
    public String accessToken;

    public SignalEvaluateRequest withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    /**
     * The Plaid `account_id` of the account that is the funding source for the proposed transaction. The `account_id` is returned in the `/accounts/get` endpoint as well as the [`onSuccess`](/docs/link/ios/#link-ios-onsuccess-linkSuccess-metadata-accounts-id) callback metadata.
     * 
     * This will return an [`INVALID_ACCOUNT_ID`](/docs/errors/invalid-input/#invalid_account_id) error if the account has been removed at the bank or if the `account_id` is no longer valid.
     */
    @JsonProperty("account_id")
    public String accountId;

    public SignalEvaluateRequest withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The transaction amount, in USD (e.g. `102.05`)
     */
    @JsonProperty("amount")
    public Double amount;

    public SignalEvaluateRequest withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;

    public SignalEvaluateRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters.
     */
    @JsonProperty("client_transaction_id")
    public String clientTransactionId;

    public SignalEvaluateRequest withClientTransactionId(String clientTransactionId) {
        this.clientTransactionId = clientTransactionId;
        return this;
    }
    
    /**
     * A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_user_id")
    public String clientUserId;

    public SignalEvaluateRequest withClientUserId(String clientUserId) {
        this.clientUserId = clientUserId;
        return this;
    }
    
    /**
     * The default ACH or non-ACH payment method to complete the transaction.
     * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
     * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
     * `STANDARD_ACH`: standard ACH by NACHA
     * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
     * `DEBIT_CARD`: if the default payment is over debit card networks
     * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
     * Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_payment_method")
    public String defaultPaymentMethod;

    public SignalEvaluateRequest withDefaultPaymentMethod(String defaultPaymentMethod) {
        this.defaultPaymentMethod = defaultPaymentMethod;
        return this;
    }
    
    /**
     * Details about the end user's device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device")
    public SignalDevice device;

    public SignalEvaluateRequest withDevice(SignalDevice device) {
        this.device = device;
        return this;
    }
    
    /**
     * `true` if the ACH transaction is a recurring transaction; `false` otherwise 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_recurring")
    public Boolean isRecurring;

    public SignalEvaluateRequest withIsRecurring(Boolean isRecurring) {
        this.isRecurring = isRecurring;
        return this;
    }
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;

    public SignalEvaluateRequest withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * Details about the end user initiating the transaction (i.e., the account holder).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public SignalUser user;

    public SignalEvaluateRequest withUser(SignalUser user) {
        this.user = user;
        return this;
    }
    
    /**
     * `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_present")
    public Boolean userPresent;

    public SignalEvaluateRequest withUserPresent(Boolean userPresent) {
        this.userPresent = userPresent;
        return this;
    }
    
    public SignalEvaluateRequest(@JsonProperty("access_token") String accessToken, @JsonProperty("account_id") String accountId, @JsonProperty("amount") Double amount, @JsonProperty("client_transaction_id") String clientTransactionId) {
        this.accessToken = accessToken;
        this.accountId = accountId;
        this.amount = amount;
        this.clientTransactionId = clientTransactionId;
  }
}
