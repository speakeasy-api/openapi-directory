"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import spacedetails as shared_spacedetails
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpaceInput:
    r"""A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). For direct messages, this field may be empty. Supports up to 128 characters."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name of the space. Format: spaces/{space}"""  
    single_user_bot_dm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleUserBotDm'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether the space is a DM between a Chat app and a single human."""  
    space_details: Optional[shared_spacedetails.SpaceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceDetails'), 'exclude': lambda f: f is None }})
    r"""Details about the space including description and rules."""  
    
class SpaceSpaceThreadingStateEnum(str, Enum):
    r"""Output only. The threading state in the Chat space."""
    SPACE_THREADING_STATE_UNSPECIFIED = 'SPACE_THREADING_STATE_UNSPECIFIED'
    THREADED_MESSAGES = 'THREADED_MESSAGES'
    GROUPED_MESSAGES = 'GROUPED_MESSAGES'
    UNTHREADED_MESSAGES = 'UNTHREADED_MESSAGES'

class SpaceTypeEnum(str, Enum):
    r"""Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer preview) instead. The type of a space."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    ROOM = 'ROOM'
    DM = 'DM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Space:
    r"""A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app."""
    
    admin_installed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminInstalled'), 'exclude': lambda f: f is None }})
    r"""Output only. Whether the Chat app was installed by a Google Workspace administrator. Administrators can install a Chat app for their domain, organizational unit, or a group of users. Administrators can only install Chat apps for direct messaging between users and the app. To support admin install, your app must feature direct messaging."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The space's display name. Required when [creating a space](https://developers.google.com/chat/api/reference/rest/v1/spaces/create). For direct messages, this field may be empty. Supports up to 128 characters."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name of the space. Format: spaces/{space}"""  
    single_user_bot_dm: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('singleUserBotDm'), 'exclude': lambda f: f is None }})
    r"""Optional. Whether the space is a DM between a Chat app and a single human."""  
    space_details: Optional[shared_spacedetails.SpaceDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceDetails'), 'exclude': lambda f: f is None }})
    r"""Details about the space including description and rules."""  
    space_threading_state: Optional[SpaceSpaceThreadingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spaceThreadingState'), 'exclude': lambda f: f is None }})
    r"""Output only. The threading state in the Chat space."""  
    threaded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threaded'), 'exclude': lambda f: f is None }})
    r"""Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages are threaded in this space."""  
    type: Optional[SpaceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer preview) instead. The type of a space."""  
    