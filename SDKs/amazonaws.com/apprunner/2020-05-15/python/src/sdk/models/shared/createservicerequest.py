"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import encryptionconfiguration as shared_encryptionconfiguration
from ..shared import healthcheckconfiguration as shared_healthcheckconfiguration
from ..shared import instanceconfiguration as shared_instanceconfiguration
from ..shared import networkconfiguration as shared_networkconfiguration
from ..shared import serviceobservabilityconfiguration as shared_serviceobservabilityconfiguration
from ..shared import sourceconfiguration as shared_sourceconfiguration
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateServiceRequest:
    
    service_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName') }})  
    source_configuration: shared_sourceconfiguration.SourceConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceConfiguration') }})  
    auto_scaling_configuration_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoScalingConfigurationArn'), 'exclude': lambda f: f is None }})  
    encryption_configuration: Optional[shared_encryptionconfiguration.EncryptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfiguration'), 'exclude': lambda f: f is None }})  
    health_check_configuration: Optional[shared_healthcheckconfiguration.HealthCheckConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HealthCheckConfiguration'), 'exclude': lambda f: f is None }})  
    instance_configuration: Optional[shared_instanceconfiguration.InstanceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceConfiguration'), 'exclude': lambda f: f is None }})  
    network_configuration: Optional[shared_networkconfiguration.NetworkConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkConfiguration'), 'exclude': lambda f: f is None }})  
    observability_configuration: Optional[shared_serviceobservabilityconfiguration.ServiceObservabilityConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObservabilityConfiguration'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tags'), 'exclude': lambda f: f is None }})  
    