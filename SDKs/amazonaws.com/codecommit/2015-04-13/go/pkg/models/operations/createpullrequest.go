// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePullRequestXAmzTargetEnum
type CreatePullRequestXAmzTargetEnum string

const (
	CreatePullRequestXAmzTargetEnumCodeCommit20150413CreatePullRequest CreatePullRequestXAmzTargetEnum = "CodeCommit_20150413.CreatePullRequest"
)

func (e CreatePullRequestXAmzTargetEnum) ToPointer() *CreatePullRequestXAmzTargetEnum {
	return &e
}

func (e *CreatePullRequestXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeCommit_20150413.CreatePullRequest":
		*e = CreatePullRequestXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePullRequestXAmzTargetEnum: %v", v)
	}
}

type CreatePullRequestRequest struct {
	CreatePullRequestInput shared.CreatePullRequestInput   `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             CreatePullRequestXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePullRequestResponse struct {
	// ClientRequestTokenRequiredException
	ClientRequestTokenRequiredException interface{}
	ContentType                         string
	// Success
	CreatePullRequestOutput *shared.CreatePullRequestOutput
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// IdempotencyParameterMismatchException
	IdempotencyParameterMismatchException interface{}
	// InvalidClientRequestTokenException
	InvalidClientRequestTokenException interface{}
	// InvalidDescriptionException
	InvalidDescriptionException interface{}
	// InvalidReferenceNameException
	InvalidReferenceNameException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// InvalidTargetException
	InvalidTargetException interface{}
	// InvalidTargetsException
	InvalidTargetsException interface{}
	// InvalidTitleException
	InvalidTitleException interface{}
	// MaximumOpenPullRequestsExceededException
	MaximumOpenPullRequestsExceededException interface{}
	// MultipleRepositoriesInPullRequestException
	MultipleRepositoriesInPullRequestException interface{}
	// ReferenceDoesNotExistException
	ReferenceDoesNotExistException interface{}
	// ReferenceNameRequiredException
	ReferenceNameRequiredException interface{}
	// ReferenceTypeNotSupportedException
	ReferenceTypeNotSupportedException interface{}
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	// SourceAndDestinationAreSameException
	SourceAndDestinationAreSameException interface{}
	StatusCode                           int
	RawResponse                          *http.Response
	// TargetRequiredException
	TargetRequiredException interface{}
	// TargetsRequiredException
	TargetsRequiredException interface{}
	// TitleRequiredException
	TitleRequiredException interface{}
}
