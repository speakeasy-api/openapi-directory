// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PatientDrugOrderStatusEnum - One of `""`, `"Ordered"`, `"Administered during visit"`, `"Electronic eRx Sent"`, `"Phoned into Pharmacy"`, `"Faxed to Pharmacy"`, `"Paper Rx"`, `"Prescription Printed"`, `"Discontinued"`, `"Prescribed by other Dr"` or `"Over the Counter"`. If omitted in writing, default to `""`
type PatientDrugOrderStatusEnum string

const (
	PatientDrugOrderStatusEnumUnknown                 PatientDrugOrderStatusEnum = ""
	PatientDrugOrderStatusEnumOrdered                 PatientDrugOrderStatusEnum = "Ordered"
	PatientDrugOrderStatusEnumAdministeredDuringVisit PatientDrugOrderStatusEnum = "Administered during visit"
	PatientDrugOrderStatusEnumElectronicERxSent       PatientDrugOrderStatusEnum = "Electronic eRx Sent"
	PatientDrugOrderStatusEnumPhonedIntoPharmacy      PatientDrugOrderStatusEnum = "Phoned into Pharmacy"
	PatientDrugOrderStatusEnumFaxedToPharmacy         PatientDrugOrderStatusEnum = "Faxed to Pharmacy"
	PatientDrugOrderStatusEnumPaperRx                 PatientDrugOrderStatusEnum = "Paper Rx"
	PatientDrugOrderStatusEnumPrescriptionPrinted     PatientDrugOrderStatusEnum = "Prescription Printed"
	PatientDrugOrderStatusEnumDiscontinued            PatientDrugOrderStatusEnum = "Discontinued"
	PatientDrugOrderStatusEnumPrescribedByOtherDr     PatientDrugOrderStatusEnum = "Prescribed by other Dr"
	PatientDrugOrderStatusEnumOverTheCounter          PatientDrugOrderStatusEnum = "Over the Counter"
)

func (e PatientDrugOrderStatusEnum) ToPointer() *PatientDrugOrderStatusEnum {
	return &e
}

func (e *PatientDrugOrderStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "Ordered":
		fallthrough
	case "Administered during visit":
		fallthrough
	case "Electronic eRx Sent":
		fallthrough
	case "Phoned into Pharmacy":
		fallthrough
	case "Faxed to Pharmacy":
		fallthrough
	case "Paper Rx":
		fallthrough
	case "Prescription Printed":
		fallthrough
	case "Discontinued":
		fallthrough
	case "Prescribed by other Dr":
		fallthrough
	case "Over the Counter":
		*e = PatientDrugOrderStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientDrugOrderStatusEnum: %v", v)
	}
}

// PatientDrugStatusEnum - If present, one of `"active"` or `"inactive"`. If omitted in writing, default to `"active"`
type PatientDrugStatusEnum string

const (
	PatientDrugStatusEnumActive   PatientDrugStatusEnum = "active"
	PatientDrugStatusEnumInactive PatientDrugStatusEnum = "inactive"
)

func (e PatientDrugStatusEnum) ToPointer() *PatientDrugStatusEnum {
	return &e
}

func (e *PatientDrugStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "inactive":
		*e = PatientDrugStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatientDrugStatusEnum: %v", v)
	}
}

// PatientDrug - Created
type PatientDrug struct {
	// Appointment ID corresponding to the initial prescription
	Appointment       *int64  `json:"appointment,omitempty"`
	DatePrescribed    *string `json:"date_prescribed,omitempty"`
	DateStartedTaking *string `json:"date_started_taking,omitempty"`
	DateStoppedTaking *string `json:"date_stopped_taking,omitempty"`
	// If true, the prescription should be dispensed as written and not substituted
	Daw              *bool    `json:"daw,omitempty"`
	DispenseQuantity *float64 `json:"dispense_quantity,omitempty"`
	// Prescribing doctor ID
	Doctor int64 `json:"doctor"`
	// Please note, this used to be an decimal field, you can still pass decimal value to it. Or you can pass in some formatted string if needed.
	DosageQuantity *string `json:"dosage_quantity,omitempty"`
	DosageUnits    *string `json:"dosage_units,omitempty"`
	// Frequency pf administration
	Frequency  *string `json:"frequency,omitempty"`
	ID         *int64  `json:"id,omitempty"`
	Indication *string `json:"indication,omitempty"`
	Name       *string `json:"name,omitempty"`
	Ndc        *string `json:"ndc,omitempty"`
	// Any additional notes from the provider
	Notes         *string `json:"notes,omitempty"`
	NumberRefills *int64  `json:"number_refills,omitempty"`
	// One of `""`, `"Ordered"`, `"Administered during visit"`, `"Electronic eRx Sent"`, `"Phoned into Pharmacy"`, `"Faxed to Pharmacy"`, `"Paper Rx"`, `"Prescription Printed"`, `"Discontinued"`, `"Prescribed by other Dr"` or `"Over the Counter"`. If omitted in writing, default to `""`
	OrderStatus  *PatientDrugOrderStatusEnum `json:"order_status,omitempty"`
	Patient      int64                       `json:"patient"`
	PharmacyNote *string                     `json:"pharmacy_note,omitempty"`
	// If `True`, the medication should be taken when necessary
	Prn *bool `json:"prn,omitempty"`
	// Route of administration
	Route *string `json:"route,omitempty"`
	// RxNorm code for the medication
	Rxnorm        *string `json:"rxnorm,omitempty"`
	SignatureNote *string `json:"signature_note,omitempty"`
	// If present, one of `"active"` or `"inactive"`. If omitted in writing, default to `"active"`
	Status *PatientDrugStatusEnum `json:"status,omitempty"`
}
