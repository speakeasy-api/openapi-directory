// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETSetReceiptRulePositionActionEnum
type GETSetReceiptRulePositionActionEnum string

const (
	GETSetReceiptRulePositionActionEnumSetReceiptRulePosition GETSetReceiptRulePositionActionEnum = "SetReceiptRulePosition"
)

func (e *GETSetReceiptRulePositionActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SetReceiptRulePosition":
		*e = GETSetReceiptRulePositionActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetReceiptRulePositionActionEnum: %s", s)
	}
}

// GETSetReceiptRulePositionVersionEnum
type GETSetReceiptRulePositionVersionEnum string

const (
	GETSetReceiptRulePositionVersionEnumTwoThousandAndTen1201 GETSetReceiptRulePositionVersionEnum = "2010-12-01"
)

func (e *GETSetReceiptRulePositionVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2010-12-01":
		*e = GETSetReceiptRulePositionVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETSetReceiptRulePositionVersionEnum: %s", s)
	}
}

type GETSetReceiptRulePositionQueryParams struct {
	Action GETSetReceiptRulePositionActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The name of the receipt rule after which to place the specified receipt rule.
	After *string `queryParam:"style=form,explode=true,name=After"`
	// The name of the receipt rule to reposition.
	RuleName string `queryParam:"style=form,explode=true,name=RuleName"`
	// The name of the receipt rule set that contains the receipt rule to reposition.
	RuleSetName string                               `queryParam:"style=form,explode=true,name=RuleSetName"`
	Version     GETSetReceiptRulePositionVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETSetReceiptRulePositionHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETSetReceiptRulePositionRequest struct {
	QueryParams GETSetReceiptRulePositionQueryParams
	Headers     GETSetReceiptRulePositionHeaders
}

type GETSetReceiptRulePositionResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
