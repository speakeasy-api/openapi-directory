"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class RecurringPaymentsAPIEmailSubscriptionsFeature:
    r"""Streamline your workflows by sending payments to your customers on a regular basis with NOWPayments.
    This feature involves creating a plan for payments and individual recurring payments for each user.  
    First you need to create a Recurring Payment plan:
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_recurring_payment(self, request: operations.DeleteRecurringPaymentRequest) -> operations.DeleteRecurringPaymentResponse:
        r"""Delete recurring payment
        Completely removes a particular payment from the recurring payment plan.  
        You need to specify the payment plan id in the request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRecurringPaymentRequest, base_url, '/v1/subscriptions/{sub_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteRecurringPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteRecurringPayment200ApplicationJSON])
                res.delete_recurring_payment_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DeleteRecurringPayment404ApplicationJSON])
                res.delete_recurring_payment_404_application_json_object = out

        return res

    def get_many_plans(self, request: operations.GetManyPlansRequest) -> operations.GetManyPlansResponse:
        r"""Get many plans
        This method allows you to obtain information about all the payment plans you’ve created.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/subscriptions/plans'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetManyPlansRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetManyPlansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetManyPlans200ApplicationJSON])
                res.get_many_plans_200_application_json_object = out

        return res

    def get_many_recurring_payments(self, request: operations.GetManyRecurringPaymentsRequest) -> operations.GetManyRecurringPaymentsResponse:
        r"""Get many recurring payments
        The method allows you to view the entire list of recurring payments filtered by payment status and/or payment plan id
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/subscriptions'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.GetManyRecurringPaymentsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetManyRecurringPaymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetManyRecurringPayments200ApplicationJSON])
                res.get_many_recurring_payments_200_application_json_object = out

        return res

    def get_one_plan(self, request: operations.GetOnePlanRequest) -> operations.GetOnePlanResponse:
        r"""Get one plan
        This method allows you to obtain information about your payment plan.  
        (you need to specify your payment plan id in the request).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOnePlanRequest, base_url, '/v1/subscriptions/plans/{plan-id}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOnePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOnePlan200ApplicationJSON])
                res.get_one_plan_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOnePlan404ApplicationJSON])
                res.get_one_plan_404_application_json_object = out

        return res

    def get_one_recurring_payment(self, request: operations.GetOneRecurringPaymentRequest) -> operations.GetOneRecurringPaymentResponse:
        r"""Get one recurring payment
        Get information about a particular recurring payment via its ID.
        
        Here’s the list of available statuses:  
        \- WAITING_PAY  
        \- PAID  
        \- PARTIALLY_PAID  
        \- EXPIRED
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOneRecurringPaymentRequest, base_url, '/v1/subscriptions/{sub_id}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('GET', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOneRecurringPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOneRecurringPayment200ApplicationJSON])
                res.get_one_recurring_payment_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetOneRecurringPayment404ApplicationJSON])
                res.get_one_recurring_payment_404_application_json_object = out

        return res

    def update_plan(self, request: operations.UpdatePlanRequest) -> operations.UpdatePlanResponse:
        r"""Update plan
        This method allows you to add necessary changes to a created plan. They won’t affect users who have already paid; however, the changes will take effect when a new payment is to be made.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePlanRequest, base_url, '/v1/subscriptions/plans/{plan-id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePlanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    