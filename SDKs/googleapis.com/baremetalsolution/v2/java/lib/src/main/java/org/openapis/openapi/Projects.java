/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Get instance provisioning settings for a given project. This is hidden method used by UI only.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse baremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetch(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest.class, baseUrl, "/v2/{location}/instanceProvisioningSettings:fetch", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstanceProvisioningSettingsFetchResponse(contentType, httpRes.statusCode()) {{
            fetchInstanceProvisioningSettingsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FetchInstanceProvisioningSettingsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FetchInstanceProvisioningSettingsResponse.class);
                res.fetchInstanceProvisioningSettingsResponse = out;
            }
        }

        return res;
    }

    /**
     * Create an Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesCreateResponse baremetalsolutionProjectsLocationsInstancesCreate(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesCreateRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesCreateRequest.class, baseUrl, "/v2/{parent}/instances", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "instanceInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesCreateResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesCreateResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * Detach LUN from Instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDetachLunResponse baremetalsolutionProjectsLocationsInstancesDetachLun(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDetachLunRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDetachLunSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDetachLunRequest.class, baseUrl, "/v2/{instance}:detachLun", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "detachLunRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDetachLunRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDetachLunResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDetachLunResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * Disable the interactive serial console feature on an instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse baremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsole(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest.class, baseUrl, "/v2/{name}:disableInteractiveSerialConsole", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * Enable the interactive serial console feature on an instance.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse baremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsole(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest.class, baseUrl, "/v2/{name}:enableInteractiveSerialConsole", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * List servers in a given project and location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesListResponse baremetalsolutionProjectsLocationsInstancesList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesListRequest.class, baseUrl, "/v2/{parent}/instances", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesListResponse(contentType, httpRes.statusCode()) {{
            listInstancesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListInstancesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListInstancesResponse.class);
                res.listInstancesResponse = out;
            }
        }

        return res;
    }

    /**
     * Perform an ungraceful, hard reset on a server. Equivalent to shutting the power off and then turning it back on.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesResetResponse baremetalsolutionProjectsLocationsInstancesReset(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesResetRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesResetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesResetRequest.class, baseUrl, "/v2/{name}:reset", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesResetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesResetResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesResetResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * Starts a server that was shutdown.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStartResponse baremetalsolutionProjectsLocationsInstancesStart(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStartRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStartSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStartRequest.class, baseUrl, "/v2/{name}:start", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStartRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStartResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStartResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * Stop a running server.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStopResponse baremetalsolutionProjectsLocationsInstancesStop(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStopRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStopSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStopRequest.class, baseUrl, "/v2/{name}:stop", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStopRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStopResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsInstancesStopResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * Lists information about the supported locations for this service.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsListResponse baremetalsolutionProjectsLocationsList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsListRequest.class, baseUrl, "/v2/{name}/locations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsListResponse(contentType, httpRes.statusCode()) {{
            listLocationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListLocationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListLocationsResponse.class);
                res.listLocationsResponse = out;
            }
        }

        return res;
    }

    /**
     * List network in a given project and location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListResponse baremetalsolutionProjectsLocationsNetworksList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListRequest.class, baseUrl, "/v2/{parent}/networks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListResponse(contentType, httpRes.statusCode()) {{
            listNetworksResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListNetworksResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListNetworksResponse.class);
                res.listNetworksResponse = out;
            }
        }

        return res;
    }

    /**
     * List all Networks (and used IPs for each Network) in the vendor account associated with the specified project.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse baremetalsolutionProjectsLocationsNetworksListNetworkUsage(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest.class, baseUrl, "/v2/{location}/networks:listNetworkUsage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNetworksListNetworkUsageResponse(contentType, httpRes.statusCode()) {{
            listNetworkUsageResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListNetworkUsageResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListNetworkUsageResponse.class);
                res.listNetworkUsageResponse = out;
            }
        }

        return res;
    }

    /**
     * Create an NFS share.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesCreateResponse baremetalsolutionProjectsLocationsNfsSharesCreate(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesCreateRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesCreateRequest.class, baseUrl, "/v2/{parent}/nfsShares", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "nfsShareInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesCreateResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesCreateResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * List NFS shares.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesListResponse baremetalsolutionProjectsLocationsNfsSharesList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesListRequest.class, baseUrl, "/v2/{parent}/nfsShares", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsNfsSharesListResponse(contentType, httpRes.statusCode()) {{
            listNfsSharesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListNfsSharesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListNfsSharesResponse.class);
                res.listNfsSharesResponse = out;
            }
        }

        return res;
    }

    /**
     * Create new ProvisioningConfig.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse baremetalsolutionProjectsLocationsProvisioningConfigsCreate(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest.class, baseUrl, "/v2/{parent}/provisioningConfigs", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "provisioningConfigInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsCreateResponse(contentType, httpRes.statusCode()) {{
            provisioningConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProvisioningConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProvisioningConfig.class);
                res.provisioningConfig = out;
            }
        }

        return res;
    }

    /**
     * Submit a provisiong configuration for a given project.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse baremetalsolutionProjectsLocationsProvisioningConfigsSubmit(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest.class, baseUrl, "/v2/{parent}/provisioningConfigs:submit", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "submitProvisioningConfigRequestInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningConfigsSubmitResponse(contentType, httpRes.statusCode()) {{
            submitProvisioningConfigResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SubmitProvisioningConfigResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SubmitProvisioningConfigResponse.class);
                res.submitProvisioningConfigResponse = out;
            }
        }

        return res;
    }

    /**
     * List the budget details to provision resources on a given project.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse baremetalsolutionProjectsLocationsProvisioningQuotasList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest.class, baseUrl, "/v2/{parent}/provisioningQuotas", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsProvisioningQuotasListResponse(contentType, httpRes.statusCode()) {{
            listProvisioningQuotasResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListProvisioningQuotasResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListProvisioningQuotasResponse.class);
                res.listProvisioningQuotasResponse = out;
            }
        }

        return res;
    }

    /**
     * Register a public SSH key in the specified project for use with the interactive serial console feature.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysCreateResponse baremetalsolutionProjectsLocationsSshKeysCreate(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysCreateRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysCreateRequest.class, baseUrl, "/v2/{parent}/sshKeys", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "sshKeyInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysCreateResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysCreateResponse(contentType, httpRes.statusCode()) {{
            sshKey = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SSHKey out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SSHKey.class);
                res.sshKey = out;
            }
        }

        return res;
    }

    /**
     * Lists the public SSH keys registered for the specified project. These SSH keys are used only for the interactive serial console feature.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysListResponse baremetalsolutionProjectsLocationsSshKeysList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysListRequest.class, baseUrl, "/v2/{parent}/sshKeys", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsSshKeysListResponse(contentType, httpRes.statusCode()) {{
            listSSHKeysResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListSSHKeysResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListSSHKeysResponse.class);
                res.listSSHKeysResponse = out;
            }
        }

        return res;
    }

    /**
     * List storage volumes in a given project and location.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesListResponse baremetalsolutionProjectsLocationsVolumesList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesListRequest.class, baseUrl, "/v2/{parent}/volumes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesListResponse(contentType, httpRes.statusCode()) {{
            listVolumesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListVolumesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListVolumesResponse.class);
                res.listVolumesResponse = out;
            }
        }

        return res;
    }

    /**
     * Skips lun's cooloff and deletes it now. Lun must be in cooloff state.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse baremetalsolutionProjectsLocationsVolumesLunsEvict(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest.class, baseUrl, "/v2/{name}:evict", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsEvictResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * List storage volume luns for given storage volume.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsListResponse baremetalsolutionProjectsLocationsVolumesLunsList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsListRequest.class, baseUrl, "/v2/{parent}/luns", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesLunsListResponse(contentType, httpRes.statusCode()) {{
            listLunsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListLunsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListLunsResponse.class);
                res.listLunsResponse = out;
            }
        }

        return res;
    }

    /**
     * Update details of a single storage volume.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesPatchResponse baremetalsolutionProjectsLocationsVolumesPatch(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesPatchRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesPatchRequest.class, baseUrl, "/v2/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "volumeInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesPatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesPatchResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesPatchResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * RenameVolume sets a new name for a volume. Use with caution, previous names become immediately invalidated.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesRenameResponse baremetalsolutionProjectsLocationsVolumesRename(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesRenameRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesRenameSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesRenameRequest.class, baseUrl, "/v2/{name}:rename", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "renameVolumeRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesRenameRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesRenameResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesRenameResponse(contentType, httpRes.statusCode()) {{
            volume = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Volume out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Volume.class);
                res.volume = out;
            }
        }

        return res;
    }

    /**
     * Emergency Volume resize.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesResizeResponse baremetalsolutionProjectsLocationsVolumesResize(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesResizeRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesResizeSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesResizeRequest.class, baseUrl, "/v2/{volume}:resize", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "resizeVolumeRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesResizeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesResizeResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesResizeResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }

    /**
     * Takes a snapshot of a boot volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse baremetalsolutionProjectsLocationsVolumesSnapshotsCreate(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest.class, baseUrl, "/v2/{parent}/snapshots", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "volumeSnapshotInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsCreateResponse(contentType, httpRes.statusCode()) {{
            volumeSnapshot = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VolumeSnapshot out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VolumeSnapshot.class);
                res.volumeSnapshot = out;
            }
        }

        return res;
    }

    /**
     * Deletes a volume snapshot. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse baremetalsolutionProjectsLocationsVolumesSnapshotsDelete(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest.class, baseUrl, "/v2/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsDeleteResponse(contentType, httpRes.statusCode()) {{
            empty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.empty = out;
            }
        }

        return res;
    }

    /**
     * Returns the specified snapshot resource. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse baremetalsolutionProjectsLocationsVolumesSnapshotsGet(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest.class, baseUrl, "/v2/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsGetResponse(contentType, httpRes.statusCode()) {{
            volumeSnapshot = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VolumeSnapshot out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VolumeSnapshot.class);
                res.volumeSnapshot = out;
            }
        }

        return res;
    }

    /**
     * Retrieves the list of snapshots for the specified volume. Returns a response with an empty list of snapshots if called for a non-boot volume.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse baremetalsolutionProjectsLocationsVolumesSnapshotsList(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest.class, baseUrl, "/v2/{parent}/snapshots", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsListResponse(contentType, httpRes.statusCode()) {{
            listVolumeSnapshotsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ListVolumeSnapshotsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ListVolumeSnapshotsResponse.class);
                res.listVolumeSnapshotsResponse = out;
            }
        }

        return res;
    }

    /**
     * Uses the specified snapshot to restore its parent volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse baremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshot(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest request, org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest.class, baseUrl, "/v2/{volumeSnapshot}:restoreVolumeSnapshot", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse res = new org.openapis.openapi.models.operations.BaremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotResponse(contentType, httpRes.statusCode()) {{
            operation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Operation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Operation.class);
                res.operation = out;
            }
        }

        return res;
    }
}