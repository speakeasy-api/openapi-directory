/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class ClientCredentials {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Obtain new client secret.
   *
   * @remarks
   * Obtain new client secret for Paylocity-issued client id. See Setup section for details.
   */
  addClientSecret(
    req: shared.AddClientSecret,
    security: operations.AddClientSecretSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AddClientSecretResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.AddClientSecret(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/credentials/secrets";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AddClientSecretSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddClientSecretResponse =
        new operations.AddClientSecretResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clientCredentialsResponses = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.clientCredentialsResponses = utils.objectToClass(
              httpRes?.data,
              shared.ClientCredentialsResponse,
              resFieldDepth
            );
          }
          break;
        case [400, 500].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errors = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.errors = utils.objectToClass(
              httpRes?.data,
              shared.ErrorT,
              resFieldDepth
            );
          }
          break;
        case [401, 403, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
