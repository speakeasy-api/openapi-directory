"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import directoryconnectsettingsdescription as shared_directoryconnectsettingsdescription
from ..shared import directoryedition_enum as shared_directoryedition_enum
from ..shared import directorysize_enum as shared_directorysize_enum
from ..shared import directorystage_enum as shared_directorystage_enum
from ..shared import directorytype_enum as shared_directorytype_enum
from ..shared import directoryvpcsettingsdescription as shared_directoryvpcsettingsdescription
from ..shared import osversion_enum as shared_osversion_enum
from ..shared import ownerdirectorydescription as shared_ownerdirectorydescription
from ..shared import radiussettings as shared_radiussettings
from ..shared import radiusstatus_enum as shared_radiusstatus_enum
from ..shared import regionsinfo as shared_regionsinfo
from ..shared import sharemethod_enum as shared_sharemethod_enum
from ..shared import sharestatus_enum as shared_sharestatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DirectoryDescription:
    r"""Contains information about an Directory Service directory."""
    
    access_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AccessUrl'), 'exclude': lambda f: f is None }})  
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Alias'), 'exclude': lambda f: f is None }})  
    connect_settings: Optional[shared_directoryconnectsettingsdescription.DirectoryConnectSettingsDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConnectSettings'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    desired_number_of_domain_controllers: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DesiredNumberOfDomainControllers'), 'exclude': lambda f: f is None }})  
    directory_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DirectoryId'), 'exclude': lambda f: f is None }})  
    dns_ip_addrs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsIpAddrs'), 'exclude': lambda f: f is None }})  
    edition: Optional[shared_directoryedition_enum.DirectoryEditionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Edition'), 'exclude': lambda f: f is None }})  
    launch_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LaunchTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    os_version: Optional[shared_osversion_enum.OSVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OsVersion'), 'exclude': lambda f: f is None }})  
    owner_directory_description: Optional[shared_ownerdirectorydescription.OwnerDirectoryDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerDirectoryDescription'), 'exclude': lambda f: f is None }})  
    radius_settings: Optional[shared_radiussettings.RadiusSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RadiusSettings'), 'exclude': lambda f: f is None }})  
    radius_status: Optional[shared_radiusstatus_enum.RadiusStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RadiusStatus'), 'exclude': lambda f: f is None }})  
    regions_info: Optional[shared_regionsinfo.RegionsInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RegionsInfo'), 'exclude': lambda f: f is None }})  
    share_method: Optional[shared_sharemethod_enum.ShareMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShareMethod'), 'exclude': lambda f: f is None }})  
    share_notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShareNotes'), 'exclude': lambda f: f is None }})  
    share_status: Optional[shared_sharestatus_enum.ShareStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShareStatus'), 'exclude': lambda f: f is None }})  
    short_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShortName'), 'exclude': lambda f: f is None }})  
    size: Optional[shared_directorysize_enum.DirectorySizeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Size'), 'exclude': lambda f: f is None }})  
    sso_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SsoEnabled'), 'exclude': lambda f: f is None }})  
    stage: Optional[shared_directorystage_enum.DirectoryStageEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Stage'), 'exclude': lambda f: f is None }})  
    stage_last_updated_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StageLastUpdatedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    stage_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StageReason'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_directorytype_enum.DirectoryTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    vpc_settings: Optional[shared_directoryvpcsettingsdescription.DirectoryVpcSettingsDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcSettings'), 'exclude': lambda f: f is None }})  
    