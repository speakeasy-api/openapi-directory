"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import searcheverywhereresult as shared_searcheverywhereresult
from enum import Enum
from typing import Optional

class SearchEverywhereIncludeEnum(str, Enum):
    PROJECTS = 'projects'
    DOCUMENTS = 'documents'
    STRINGS = 'strings'


@dataclasses.dataclass
class SearchEverywhereRequest:
    
    query: str = dataclasses.field(metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""Search query term"""  
    include: Optional[list[SearchEverywhereIncludeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include[]', 'style': 'form', 'explode': True }})
    r"""Search in these entities. Current oprions are projects, documents, strings. Can be multiple. When not provided, we'll search through all entities."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})  
    

@dataclasses.dataclass
class SearchEverywhereResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    search_everywhere_result: Optional[shared_searcheverywhereresult.SearchEverywhereResult] = dataclasses.field(default=None)
    r"""Search result for multiple entities and paging"""  
    