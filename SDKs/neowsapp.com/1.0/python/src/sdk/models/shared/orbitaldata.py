"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import orbitclass as shared_orbitclass
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrbitalData:
    
    aphelion_distance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aphelion_distance'), 'exclude': lambda f: f is None }})  
    ascending_node_longitude: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ascending_node_longitude'), 'exclude': lambda f: f is None }})  
    data_arc_in_days: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data_arc_in_days'), 'exclude': lambda f: f is None }})  
    eccentricity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eccentricity'), 'exclude': lambda f: f is None }})  
    epoch_osculation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('epoch_osculation'), 'exclude': lambda f: f is None }})  
    equinox: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('equinox'), 'exclude': lambda f: f is None }})  
    first_observation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_observation_date'), 'exclude': lambda f: f is None }})  
    inclination: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inclination'), 'exclude': lambda f: f is None }})  
    jupiter_tisserand_invariant: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jupiter_tisserand_invariant'), 'exclude': lambda f: f is None }})  
    last_observation_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_observation_date'), 'exclude': lambda f: f is None }})  
    mean_anomaly: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mean_anomaly'), 'exclude': lambda f: f is None }})  
    mean_motion: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mean_motion'), 'exclude': lambda f: f is None }})  
    minimum_orbit_intersection: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimum_orbit_intersection'), 'exclude': lambda f: f is None }})  
    observations_used: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('observations_used'), 'exclude': lambda f: f is None }})  
    orbit_class: Optional[shared_orbitclass.OrbitClass] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orbit_class'), 'exclude': lambda f: f is None }})  
    orbit_determination_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orbit_determination_date'), 'exclude': lambda f: f is None }})  
    orbit_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orbit_id'), 'exclude': lambda f: f is None }})  
    orbit_uncertainty: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orbit_uncertainty'), 'exclude': lambda f: f is None }})  
    orbital_period: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orbital_period'), 'exclude': lambda f: f is None }})  
    perihelion_argument: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perihelion_argument'), 'exclude': lambda f: f is None }})  
    perihelion_distance: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perihelion_distance'), 'exclude': lambda f: f is None }})  
    perihelion_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perihelion_time'), 'exclude': lambda f: f is None }})  
    semi_major_axis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('semi_major_axis'), 'exclude': lambda f: f is None }})  
    