<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * RunQueryRequest - The request for Firestore.RunQuery.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class RunQueryRequest
{
    /**
     * Options for creating a new transaction.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TransactionOptions $newTransaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('newTransaction')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TransactionOptions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TransactionOptions $newTransaction = null;
    
    /**
     * Reads documents as they were at the given time. This may not be older than 270 seconds.
     * 
     * @var ?string $readTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('readTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $readTime = null;
    
    /**
     * A Firestore query.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\StructuredQuery $structuredQuery
     */
	#[\JMS\Serializer\Annotation\SerializedName('structuredQuery')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\StructuredQuery')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?StructuredQuery $structuredQuery = null;
    
    /**
     * Run the query within an already active transaction. The value here is the opaque transaction ID to execute the query in.
     * 
     * @var ?string $transaction
     */
	#[\JMS\Serializer\Annotation\SerializedName('transaction')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transaction = null;
    
	public function __construct()
	{
		$this->newTransaction = null;
		$this->readTime = null;
		$this->structuredQuery = null;
		$this->transaction = null;
	}
}
