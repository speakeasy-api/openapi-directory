// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PripcSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type PripcRequestBodyCertificateParameters struct {
	// INSCODE
	Inscode string `json:"INSCODE"`
	// POLNO
	Polno string `json:"POLNO"`
	// STARTDT
	Startdt string `json:"STARTDT"`
}

// PripcRequestBodyFormatEnum - The format of the certificate in response.
type PripcRequestBodyFormatEnum string

const (
	PripcRequestBodyFormatEnumPdf PripcRequestBodyFormatEnum = "pdf"
)

func (e *PripcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = PripcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PripcRequestBodyFormatEnum: %s", s)
	}
}

// PripcRequestBody - Request format
type PripcRequestBody struct {
	CertificateParameters *PripcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PripcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type PripcRequest struct {
	// Request format
	Request  *PripcRequestBody `request:"mediaType=application/json"`
	Security PripcSecurity
}

type Pripc504ApplicationJSONErrorEnum string

const (
	Pripc504ApplicationJSONErrorEnumGatewayTimeout Pripc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Pripc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Pripc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Pripc504ApplicationJSONErrorDescriptionEnum string

const (
	Pripc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pripc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Pripc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Pripc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pripc504ApplicationJSON - Gateway timeout
type Pripc504ApplicationJSON struct {
	Error            *Pripc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pripc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pripc503ApplicationJSONErrorEnum string

const (
	Pripc503ApplicationJSONErrorEnumServiceUnavailable Pripc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Pripc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Pripc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Pripc503ApplicationJSONErrorDescriptionEnum string

const (
	Pripc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pripc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Pripc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Pripc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pripc503ApplicationJSON - Service unavailable
type Pripc503ApplicationJSON struct {
	Error            *Pripc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pripc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pripc502ApplicationJSONErrorEnum string

const (
	Pripc502ApplicationJSONErrorEnumBadGatewy Pripc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Pripc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Pripc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Pripc502ApplicationJSONErrorDescriptionEnum string

const (
	Pripc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pripc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Pripc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Pripc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pripc502ApplicationJSON - Bad gateway
type Pripc502ApplicationJSON struct {
	Error            *Pripc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pripc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pripc500ApplicationJSONErrorEnum string

const (
	Pripc500ApplicationJSONErrorEnumInternalServerError Pripc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Pripc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Pripc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Pripc500ApplicationJSONErrorDescriptionEnum string

const (
	Pripc500ApplicationJSONErrorDescriptionEnumInternalServerError Pripc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Pripc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Pripc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pripc500ApplicationJSON - Internal server error
type Pripc500ApplicationJSON struct {
	Error            *Pripc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pripc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pripc404ApplicationJSONErrorEnum string

const (
	Pripc404ApplicationJSONErrorEnumRecordNotFound Pripc404ApplicationJSONErrorEnum = "record_not_found"
	Pripc404ApplicationJSONErrorEnumURLNotFound    Pripc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Pripc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pripc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Pripc404ApplicationJSONErrorDescriptionEnum string

const (
	Pripc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pripc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pripc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pripc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Pripc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pripc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pripc404ApplicationJSON - No record found
type Pripc404ApplicationJSON struct {
	Error            *Pripc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pripc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pripc401ApplicationJSONErrorEnum string

const (
	Pripc401ApplicationJSONErrorEnumInvalidAuthentication Pripc401ApplicationJSONErrorEnum = "invalid_authentication"
	Pripc401ApplicationJSONErrorEnumInvalidAuthorization  Pripc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Pripc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pripc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Pripc401ApplicationJSONErrorDescriptionEnum string

const (
	Pripc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pripc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pripc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pripc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Pripc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pripc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pripc401ApplicationJSON - Unauthorized access
type Pripc401ApplicationJSON struct {
	Error            *Pripc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pripc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pripc400ApplicationJSONErrorEnum string

const (
	Pripc400ApplicationJSONErrorEnumMissingParameter Pripc400ApplicationJSONErrorEnum = "missing_parameter"
	Pripc400ApplicationJSONErrorEnumInvalidParameter Pripc400ApplicationJSONErrorEnum = "invalid_parameter"
	Pripc400ApplicationJSONErrorEnumInvalidFormat    Pripc400ApplicationJSONErrorEnum = "invalid_format"
	Pripc400ApplicationJSONErrorEnumInvalidTxnid     Pripc400ApplicationJSONErrorEnum = "invalid_txnid"
	Pripc400ApplicationJSONErrorEnumInvalidConsentid Pripc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Pripc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pripc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Pripc400ApplicationJSONErrorDescriptionEnum string

const (
	Pripc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pripc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pripc400ApplicationJSONErrorDescriptionEnumBadRequest                              Pripc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pripc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pripc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pripc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pripc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pripc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pripc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Pripc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pripc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pripc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pripc400ApplicationJSON - Bad request
type Pripc400ApplicationJSON struct {
	Error            *Pripc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pripc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PripcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pripc400ApplicationJSONObject *Pripc400ApplicationJSON
	// Unauthorized access
	Pripc401ApplicationJSONObject *Pripc401ApplicationJSON
	// No record found
	Pripc404ApplicationJSONObject *Pripc404ApplicationJSON
	// Internal server error
	Pripc500ApplicationJSONObject *Pripc500ApplicationJSON
	// Bad gateway
	Pripc502ApplicationJSONObject *Pripc502ApplicationJSON
	// Service unavailable
	Pripc503ApplicationJSONObject *Pripc503ApplicationJSON
	// Gateway timeout
	Pripc504ApplicationJSONObject *Pripc504ApplicationJSON
}
