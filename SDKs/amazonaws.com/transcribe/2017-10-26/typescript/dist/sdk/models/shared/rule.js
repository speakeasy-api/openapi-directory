"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rule = void 0;
var utils_1 = require("../../../internal/utils");
var interruptionfilter_1 = require("./interruptionfilter");
var nontalktimefilter_1 = require("./nontalktimefilter");
var sentimentfilter_1 = require("./sentimentfilter");
var transcriptfilter_1 = require("./transcriptfilter");
var class_transformer_1 = require("class-transformer");
/**
 * <p>A rule is a set of criteria that you can specify to flag an attribute in your Call Analytics output. Rules define a Call Analytics category.</p> <p>Rules can include these parameters: , , , and .</p> <p>To learn more about Call Analytics rules and categories, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-batch.html">Creating categories for post-call transcriptions</a> and <a href="https://docs.aws.amazon.com/transcribe/latest/dg/tca-categories-stream.html">Creating categories for real-time transcriptions</a>.</p> <p>To learn more about Call Analytics, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/call-analytics.html">Analyzing call center audio with Call Analytics</a>.</p>
 */
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "InterruptionFilter" }),
        (0, class_transformer_1.Type)(function () { return interruptionfilter_1.InterruptionFilter; }),
        __metadata("design:type", interruptionfilter_1.InterruptionFilter)
    ], Rule.prototype, "interruptionFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "NonTalkTimeFilter" }),
        (0, class_transformer_1.Type)(function () { return nontalktimefilter_1.NonTalkTimeFilter; }),
        __metadata("design:type", nontalktimefilter_1.NonTalkTimeFilter)
    ], Rule.prototype, "nonTalkTimeFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "SentimentFilter" }),
        (0, class_transformer_1.Type)(function () { return sentimentfilter_1.SentimentFilter; }),
        __metadata("design:type", sentimentfilter_1.SentimentFilter)
    ], Rule.prototype, "sentimentFilter", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "TranscriptFilter" }),
        (0, class_transformer_1.Type)(function () { return transcriptfilter_1.TranscriptFilter; }),
        __metadata("design:type", transcriptfilter_1.TranscriptFilter)
    ], Rule.prototype, "transcriptFilter", void 0);
    return Rule;
}(utils_1.SpeakeasyBase));
exports.Rule = Rule;
