/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.
   */
  recaptchaenterpriseProjectsAssessmentsAnnotate(
    req: operations.RecaptchaenterpriseProjectsAssessmentsAnnotateRequest,
    security: operations.RecaptchaenterpriseProjectsAssessmentsAnnotateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsAssessmentsAnnotateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RecaptchaenterpriseProjectsAssessmentsAnnotateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:annotate", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsAssessmentsAnnotateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsAssessmentsAnnotateResponse =
        new operations.RecaptchaenterpriseProjectsAssessmentsAnnotateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates an Assessment of the likelihood an event is legitimate.
   */
  recaptchaenterpriseProjectsAssessmentsCreate(
    req: operations.RecaptchaenterpriseProjectsAssessmentsCreateRequest,
    security: operations.RecaptchaenterpriseProjectsAssessmentsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsAssessmentsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RecaptchaenterpriseProjectsAssessmentsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/assessments",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRecaptchaenterpriseV1AssessmentInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsAssessmentsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsAssessmentsCreateResponse =
        new operations.RecaptchaenterpriseProjectsAssessmentsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1Assessment =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1Assessment
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.
   */
  recaptchaenterpriseProjectsFirewallpoliciesCreate(
    req: operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateRequest,
    security: operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/firewallpolicies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRecaptchaenterpriseV1FirewallPolicy",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse =
        new operations.RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1FirewallPolicy =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1FirewallPolicy
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all firewall policies that belong to a project.
   */
  recaptchaenterpriseProjectsFirewallpoliciesList(
    req: operations.RecaptchaenterpriseProjectsFirewallpoliciesListRequest,
    security: operations.RecaptchaenterpriseProjectsFirewallpoliciesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsFirewallpoliciesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RecaptchaenterpriseProjectsFirewallpoliciesListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/firewallpolicies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsFirewallpoliciesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsFirewallpoliciesListResponse =
        new operations.RecaptchaenterpriseProjectsFirewallpoliciesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new reCAPTCHA Enterprise key.
   */
  recaptchaenterpriseProjectsKeysCreate(
    req: operations.RecaptchaenterpriseProjectsKeysCreateRequest,
    security: operations.RecaptchaenterpriseProjectsKeysCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsKeysCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RecaptchaenterpriseProjectsKeysCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/keys", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRecaptchaenterpriseV1KeyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RecaptchaenterpriseProjectsKeysCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsKeysCreateResponse =
        new operations.RecaptchaenterpriseProjectsKeysCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1Key = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRecaptchaenterpriseV1Key
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified key.
   */
  recaptchaenterpriseProjectsKeysDelete(
    req: operations.RecaptchaenterpriseProjectsKeysDeleteRequest,
    security: operations.RecaptchaenterpriseProjectsKeysDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsKeysDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RecaptchaenterpriseProjectsKeysDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RecaptchaenterpriseProjectsKeysDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsKeysDeleteResponse =
        new operations.RecaptchaenterpriseProjectsKeysDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get some aggregated metrics for a Key. This data can be used to build dashboards.
   */
  recaptchaenterpriseProjectsKeysGetMetrics(
    req: operations.RecaptchaenterpriseProjectsKeysGetMetricsRequest,
    security: operations.RecaptchaenterpriseProjectsKeysGetMetricsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsKeysGetMetricsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RecaptchaenterpriseProjectsKeysGetMetricsRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsKeysGetMetricsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsKeysGetMetricsResponse =
        new operations.RecaptchaenterpriseProjectsKeysGetMetricsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1Metrics = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRecaptchaenterpriseV1Metrics
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the list of all keys that belong to a project.
   */
  recaptchaenterpriseProjectsKeysList(
    req: operations.RecaptchaenterpriseProjectsKeysListRequest,
    security: operations.RecaptchaenterpriseProjectsKeysListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsKeysListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RecaptchaenterpriseProjectsKeysListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/keys", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RecaptchaenterpriseProjectsKeysListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsKeysListResponse =
        new operations.RecaptchaenterpriseProjectsKeysListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1ListKeysResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1ListKeysResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.
   */
  recaptchaenterpriseProjectsKeysMigrate(
    req: operations.RecaptchaenterpriseProjectsKeysMigrateRequest,
    security: operations.RecaptchaenterpriseProjectsKeysMigrateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsKeysMigrateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RecaptchaenterpriseProjectsKeysMigrateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:migrate", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRecaptchaenterpriseV1MigrateKeyRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RecaptchaenterpriseProjectsKeysMigrateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsKeysMigrateResponse =
        new operations.RecaptchaenterpriseProjectsKeysMigrateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1Key = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRecaptchaenterpriseV1Key
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the specified key.
   */
  recaptchaenterpriseProjectsKeysPatch(
    req: operations.RecaptchaenterpriseProjectsKeysPatchRequest,
    security: operations.RecaptchaenterpriseProjectsKeysPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsKeysPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RecaptchaenterpriseProjectsKeysPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRecaptchaenterpriseV1KeyInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RecaptchaenterpriseProjectsKeysPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsKeysPatchResponse =
        new operations.RecaptchaenterpriseProjectsKeysPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1Key = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudRecaptchaenterpriseV1Key
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA.
   */
  recaptchaenterpriseProjectsKeysRetrieveLegacySecretKey(
    req: operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyRequest,
    security: operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{key}:retrieveLegacySecretKey",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeySecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse =
        new operations.RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search group memberships related to a given account.
   */
  recaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearch(
    req: operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchRequest,
    security: operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{project}/relatedaccountgroupmemberships:search",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List groups of related accounts.
   */
  recaptchaenterpriseProjectsRelatedaccountgroupsList(
    req: operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListRequest,
    security: operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/relatedaccountgroups",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get memberships in a group of related accounts.
   */
  recaptchaenterpriseProjectsRelatedaccountgroupsMembershipsList(
    req: operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListRequest,
    security: operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/memberships",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse =
        new operations.RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
