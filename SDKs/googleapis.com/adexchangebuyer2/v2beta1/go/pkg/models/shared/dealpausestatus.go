// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DealPauseStatusFirstPausedByEnum - The role of the person who first paused this deal.
type DealPauseStatusFirstPausedByEnum string

const (
	DealPauseStatusFirstPausedByEnumBuyerSellerRoleUnspecified DealPauseStatusFirstPausedByEnum = "BUYER_SELLER_ROLE_UNSPECIFIED"
	DealPauseStatusFirstPausedByEnumBuyer                      DealPauseStatusFirstPausedByEnum = "BUYER"
	DealPauseStatusFirstPausedByEnumSeller                     DealPauseStatusFirstPausedByEnum = "SELLER"
)

func (e DealPauseStatusFirstPausedByEnum) ToPointer() *DealPauseStatusFirstPausedByEnum {
	return &e
}

func (e *DealPauseStatusFirstPausedByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUYER_SELLER_ROLE_UNSPECIFIED":
		fallthrough
	case "BUYER":
		fallthrough
	case "SELLER":
		*e = DealPauseStatusFirstPausedByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DealPauseStatusFirstPausedByEnum: %v", v)
	}
}

// DealPauseStatus - Tracks which parties (if any) have paused a deal. The deal is considered paused if either hasBuyerPaused or hasSellPaused is true.
type DealPauseStatus struct {
	// The buyer's reason for pausing, if the buyer paused the deal.
	BuyerPauseReason *string `json:"buyerPauseReason,omitempty"`
	// The role of the person who first paused this deal.
	FirstPausedBy *DealPauseStatusFirstPausedByEnum `json:"firstPausedBy,omitempty"`
	// True, if the buyer has paused the deal unilaterally.
	HasBuyerPaused *bool `json:"hasBuyerPaused,omitempty"`
	// True, if the seller has paused the deal unilaterally.
	HasSellerPaused *bool `json:"hasSellerPaused,omitempty"`
	// The seller's reason for pausing, if the seller paused the deal.
	SellerPauseReason *string `json:"sellerPauseReason,omitempty"`
}
