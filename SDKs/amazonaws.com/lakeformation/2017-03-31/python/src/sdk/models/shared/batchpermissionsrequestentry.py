"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datalakeprincipal as shared_datalakeprincipal
from ..shared import permission_enum as shared_permission_enum
from ..shared import resource as shared_resource
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BatchPermissionsRequestEntry:
    r"""A permission to a resource granted by batch operation to the principal."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id') }})  
    permissions: Optional[list[shared_permission_enum.PermissionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Permissions'), 'exclude': lambda f: f is None }})  
    permissions_with_grant_option: Optional[list[shared_permission_enum.PermissionEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PermissionsWithGrantOption'), 'exclude': lambda f: f is None }})  
    principal: Optional[shared_datalakeprincipal.DataLakePrincipal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Principal'), 'exclude': lambda f: f is None }})  
    resource: Optional[shared_resource.Resource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resource'), 'exclude': lambda f: f is None }})  
    