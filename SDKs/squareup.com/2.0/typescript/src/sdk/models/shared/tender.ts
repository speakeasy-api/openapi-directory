/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AdditionalRecipient } from "./additionalrecipient";
import { Money } from "./money";
import { TenderCardDetails } from "./tendercarddetails";
import { TenderCashDetails } from "./tendercashdetails";
import { Expose, Type } from "class-transformer";

/**
 * Represents a tender (i.e., a method of payment) used in a Square transaction.
 */
export class Tender extends SpeakeasyBase {
  /**
   * Additional recipients (other than the merchant) receiving a portion of this tender.
   *
   * @remarks
   * For example, fees assessed on the purchase by a third party integration.
   */
  @SpeakeasyMetadata({ elemType: AdditionalRecipient })
  @Expose({ name: "additional_recipients" })
  @Type(() => AdditionalRecipient)
  additionalRecipients?: AdditionalRecipient[];

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount_money" })
  @Type(() => Money)
  amountMoney?: Money;

  /**
   * Represents additional details of a tender with `type` `CARD` or `SQUARE_GIFT_CARD`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_details" })
  @Type(() => TenderCardDetails)
  cardDetails?: TenderCardDetails;

  /**
   * Represents the details of a tender with `type` `CASH`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cash_details" })
  @Type(() => TenderCashDetails)
  cashDetails?: TenderCashDetails;

  /**
   * The timestamp for when the tender was created, in RFC 3339 format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt?: string;

  /**
   * If the tender is associated with a customer or represents a customer's card on file,
   *
   * @remarks
   * this is the ID of the associated customer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customer_id" })
  customerId?: string;

  /**
   * The tender's unique ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The ID of the transaction's associated location.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location_id" })
  locationId?: string;

  /**
   * An optional note associated with the tender at the time of payment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "note" })
  note?: string;

  /**
   * The ID of the [Payment](https://developer.squareup.com/reference/square_2021-08-18/objects/Payment) that corresponds to this tender.
   *
   * @remarks
   * This value is only present for payments created with the v2 Payments API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "payment_id" })
  paymentId?: string;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "processing_fee_money" })
  @Type(() => Money)
  processingFeeMoney?: Money;

  /**
   * Represents an amount of money. `Money` fields can be signed or unsigned.
   *
   * @remarks
   * Fields that do not explicitly define whether they are signed or unsigned are
   * considered unsigned and can only hold positive amounts. For signed fields, the
   * sign of the value indicates the purpose of the money transfer. See
   * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
   * for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tip_money" })
  @Type(() => Money)
  tipMoney?: Money;

  /**
   * The ID of the tender's associated transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId?: string;

  /**
   * The type of tender, such as `CARD` or `CASH`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}
