"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import creativeslist as shared_creativeslist
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class AdexchangebuyerCreativesListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class AdexchangebuyerCreativesListStatusFilterEnum(str, Enum):
    r"""When specified, only creatives having the given status are returned."""
    APPROVED = 'approved'
    DISAPPROVED = 'disapproved'
    NOT_CHECKED = 'not_checked'


@dataclasses.dataclass
class AdexchangebuyerCreativesListRequest:
    
    account_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'accountId', 'style': 'form', 'explode': True }})
    r"""When specified, only creatives for the given account ids are returned."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    buyer_creative_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'buyerCreativeId', 'style': 'form', 'explode': True }})
    r"""When specified, only creatives for the given buyer creative ids are returned."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of entries returned on one result page. If not set, the default is 100. Optional."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of \\"nextPageToken\\" from the previous response. Optional."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    status_filter: Optional[AdexchangebuyerCreativesListStatusFilterEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'statusFilter', 'style': 'form', 'explode': True }})
    r"""When specified, only creatives having the given status are returned."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    

@dataclasses.dataclass
class AdexchangebuyerCreativesListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    creatives_list: Optional[shared_creativeslist.CreativesList] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    