"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import featureflags_enum as shared_featureflags_enum
from ..shared import itemlist as shared_itemlist
from ..shared import serviceerror as shared_serviceerror
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetContinueWatchingListSecurity:
    
    profile_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetContinueWatchingListIncludeEnum(str, Enum):
    EPISODE = 'episode'
    SEASON = 'season'
    SHOW = 'show'

class GetContinueWatchingListShowItemTypeEnum(str, Enum):
    r"""The item type to be returned for continue watching items belonging to a show.
    
    Multiple episodes under the same show may be watched or in progress, however only a
    single item belonging to a particular show will be included in the returned list.
    
    The next episode to continue watching for a particular show will be the most recent
    incompletely watched episode, or the next episode following the most recently
    completely watched episode. Based on the specified `show_item_type` type, either the next
    episode, the season of the next episode, or the show will be included in the list.
    
    If `episode` is specified, then only the next episode to continue watching for a
    show will be returned.
    
    If `season` is specified, then only the season of the next episode will be returned.
    
    If `show` is specified, then only the show of the next episode will be returned
    
    The recommended value of this parameter should reflect the desitination the
    user will be sent to when they select this item in the list. So if a user will
    be sent to the show detail page then this should be `show` and you can use
    the `include` parameter to get metadata about the episode or season if needed
    """
    EPISODE = 'episode'
    SEASON = 'season'
    SHOW = 'show'


@dataclasses.dataclass
class GetContinueWatchingListRequest:
    
    device: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'device', 'style': 'form', 'explode': True }})
    r"""The type of device the content is targeting."""  
    ff: Optional[list[shared_featureflags_enum.FeatureFlagsEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ff', 'style': 'form', 'explode': False }})
    r"""The set of opt in feature flags which cause breaking changes to responses.
    
    While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses
    may need to evolve over this time.
    
    These feature flags allow clients to select which response formats they expect and avoid breaking
    clients as these formats evolve under the current major version.
    
    ### Flags
    
    - `all` - Enable all flags. Useful for testing. _Don't use in production_.
    - `idp` - Dynamic item detail pages with schedulable rows.
    - `ldp` - Dynamic list detail pages with schedulable rows.
    - `hb` - Hubble formatted image urls.
    - `rpt` - Updated resume point threshold logic.
    - `cas` - \"Custom Asset Search\", inlcude `customAssets` in search results.
    - `lrl` - Do not pre-populate related list if more than `max_list_prefetch` down the page.
    - `cd` - Custom Destination support.
    
    See the `feature-flags.md` for available flag details.
    """  
    include: Optional[list[GetContinueWatchingListIncludeEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include', 'style': 'form', 'explode': False }})
    r"""Include one opr more ancestor/children for items belonging to a show. Extra items
    will be populated in the `listData` property of the list
    
    If no value is specified no dependencies are included.
    
    If `episode` is specified, then the next episode will be added for season/show
    items. Has no effect if `show_item_type` is set to `episode`.
    
    If `season` is specified, then the season of the next episode will be added for
    episode/show items. Has no effect if `show_item_type` is set to `season`.
    
    If `show` is specified, then the show of the next episode will be added for
    episode/season items. Has no effect if `show_item_type` is set to `show`.
    """  
    lang: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lang', 'style': 'form', 'explode': True }})
    r"""Language code for the preferred language to be returned in the response.
    
    Parameter value is case-insensitive and should be
      - a valid 2 letter language code without region such as en, de
      - or with region such as en_us, en_au
    
    If undefined then defaults to 'en', unless the server has been configured
    with a custom default.
    
    See https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
    """  
    max_rating: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_rating', 'style': 'form', 'explode': True }})
    r"""The maximum rating (inclusive) of an item returned, e.g. 'auoflc-pg'."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The page of items to load. Starts from page 1."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of items to return in a page."""  
    segments: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'segments', 'style': 'form', 'explode': False }})
    r"""The list of segments to filter the response by."""  
    show_item_type: Optional[GetContinueWatchingListShowItemTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'show_item_type', 'style': 'form', 'explode': True }})
    r"""The item type to be returned for continue watching items belonging to a show.
    
    Multiple episodes under the same show may be watched or in progress, however only a
    single item belonging to a particular show will be included in the returned list.
    
    The next episode to continue watching for a particular show will be the most recent
    incompletely watched episode, or the next episode following the most recently
    completely watched episode. Based on the specified `show_item_type` type, either the next
    episode, the season of the next episode, or the show will be included in the list.
    
    If `episode` is specified, then only the next episode to continue watching for a
    show will be returned.
    
    If `season` is specified, then only the season of the next episode will be returned.
    
    If `show` is specified, then only the show of the next episode will be returned
    
    The recommended value of this parameter should reflect the desitination the
    user will be sent to when they select this item in the list. So if a user will
    be sent to the show detail page then this should be `show` and you can use
    the `include` parameter to get metadata about the episode or season if needed
    """  
    sub: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sub', 'style': 'form', 'explode': True }})
    r"""The active subscription code."""  
    

@dataclasses.dataclass
class GetContinueWatchingListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    item_list: Optional[shared_itemlist.ItemList] = dataclasses.field(default=None)
    r"""The list of items requested."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    service_error: Optional[shared_serviceerror.ServiceError] = dataclasses.field(default=None)
    r"""Bad request."""  
    