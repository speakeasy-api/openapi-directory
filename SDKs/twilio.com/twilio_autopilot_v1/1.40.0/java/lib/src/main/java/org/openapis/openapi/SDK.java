/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://autopilot.twilio.com",
	};
    /**
	 * CREATE_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ASSISTANT_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FIELD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FIELD_TYPE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_FIELD_VALUE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_MODEL_BUILD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_QUERY_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SAMPLE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_TASK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * CREATE_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_WEBHOOK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ASSISTANT_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FIELD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FIELD_TYPE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_FIELD_VALUE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_MODEL_BUILD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_QUERY_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SAMPLE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_TASK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * DELETE_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_WEBHOOK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ASSISTANT_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_DEFAULTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEFAULTS_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_DIALOGUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DIALOGUE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FIELD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FIELD_TYPE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_FIELD_VALUE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_MODEL_BUILD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_QUERY_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SAMPLE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_STYLE_SHEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_STYLE_SHEET_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_TASK_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_ACTIONS_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_TASK_STATISTICS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_TASK_STATISTICS_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * FETCH_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_WEBHOOK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ASSISTANT_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_FIELD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FIELD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FIELD_TYPE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_FIELD_VALUE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_FIELD_VALUE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_MODEL_BUILD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_QUERY_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SAMPLE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_TASK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * LIST_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_WEBHOOK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_ASSISTANT_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_DEFAULTS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DEFAULTS_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_FIELD_TYPE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_FIELD_TYPE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_MODEL_BUILD_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_MODEL_BUILD_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_QUERY_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_QUERY_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_RESTORE_ASSISTANT_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_RESTORE_ASSISTANT_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_SAMPLE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SAMPLE_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_STYLE_SHEET_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_STYLE_SHEET_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_TASK_ACTIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_TASK_ACTIONS_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
    /**
	 * UPDATE_WEBHOOK_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_WEBHOOK_SERVERS = {
        "https://autopilot.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    public org.openapis.openapi.models.operations.CreateAssistantResponse createAssistant(org.openapis.openapi.models.operations.CreateAssistantCreateAssistantRequest request, org.openapis.openapi.models.operations.CreateAssistantSecurity security) throws Exception {
        return this.createAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateAssistantResponse createAssistant(org.openapis.openapi.models.operations.CreateAssistantCreateAssistantRequest request, org.openapis.openapi.models.operations.CreateAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Assistants");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateAssistantResponse res = new org.openapis.openapi.models.operations.CreateAssistantResponse() {{
            autopilotV1Assistant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1Assistant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1Assistant.class);
                res.autopilotV1Assistant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateFieldResponse createField(org.openapis.openapi.models.operations.CreateFieldRequest request, org.openapis.openapi.models.operations.CreateFieldSecurity security) throws Exception {
        return this.createField(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateFieldResponse createField(org.openapis.openapi.models.operations.CreateFieldRequest request, org.openapis.openapi.models.operations.CreateFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateFieldRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFieldResponse res = new org.openapis.openapi.models.operations.CreateFieldResponse() {{
            autopilotV1AssistantTaskField = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskField out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskField.class);
                res.autopilotV1AssistantTaskField = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateFieldTypeResponse createFieldType(org.openapis.openapi.models.operations.CreateFieldTypeRequest request, org.openapis.openapi.models.operations.CreateFieldTypeSecurity security) throws Exception {
        return this.createFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateFieldTypeResponse createFieldType(org.openapis.openapi.models.operations.CreateFieldTypeRequest request, org.openapis.openapi.models.operations.CreateFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateFieldTypeRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFieldTypeResponse res = new org.openapis.openapi.models.operations.CreateFieldTypeResponse() {{
            autopilotV1AssistantFieldType = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantFieldType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantFieldType.class);
                res.autopilotV1AssistantFieldType = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateFieldValueResponse createFieldValue(org.openapis.openapi.models.operations.CreateFieldValueRequest request, org.openapis.openapi.models.operations.CreateFieldValueSecurity security) throws Exception {
        return this.createFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateFieldValueResponse createFieldValue(org.openapis.openapi.models.operations.CreateFieldValueRequest request, org.openapis.openapi.models.operations.CreateFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateFieldValueRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateFieldValueResponse res = new org.openapis.openapi.models.operations.CreateFieldValueResponse() {{
            autopilotV1AssistantFieldTypeFieldValue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantFieldTypeFieldValue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantFieldTypeFieldValue.class);
                res.autopilotV1AssistantFieldTypeFieldValue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateModelBuildResponse createModelBuild(org.openapis.openapi.models.operations.CreateModelBuildRequest request, org.openapis.openapi.models.operations.CreateModelBuildSecurity security) throws Exception {
        return this.createModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateModelBuildResponse createModelBuild(org.openapis.openapi.models.operations.CreateModelBuildRequest request, org.openapis.openapi.models.operations.CreateModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateModelBuildRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/ModelBuilds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateModelBuildResponse res = new org.openapis.openapi.models.operations.CreateModelBuildResponse() {{
            autopilotV1AssistantModelBuild = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantModelBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantModelBuild.class);
                res.autopilotV1AssistantModelBuild = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateQueryResponse createQuery(org.openapis.openapi.models.operations.CreateQueryRequest request, org.openapis.openapi.models.operations.CreateQuerySecurity security) throws Exception {
        return this.createQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateQueryResponse createQuery(org.openapis.openapi.models.operations.CreateQueryRequest request, org.openapis.openapi.models.operations.CreateQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateQueryRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Queries", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateQueryResponse res = new org.openapis.openapi.models.operations.CreateQueryResponse() {{
            autopilotV1AssistantQuery = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantQuery out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantQuery.class);
                res.autopilotV1AssistantQuery = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateSampleResponse createSample(org.openapis.openapi.models.operations.CreateSampleRequest request, org.openapis.openapi.models.operations.CreateSampleSecurity security) throws Exception {
        return this.createSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateSampleResponse createSample(org.openapis.openapi.models.operations.CreateSampleRequest request, org.openapis.openapi.models.operations.CreateSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateSampleRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateSampleResponse res = new org.openapis.openapi.models.operations.CreateSampleResponse() {{
            autopilotV1AssistantTaskSample = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskSample out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskSample.class);
                res.autopilotV1AssistantTaskSample = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateTaskResponse createTask(org.openapis.openapi.models.operations.CreateTaskRequest request, org.openapis.openapi.models.operations.CreateTaskSecurity security) throws Exception {
        return this.createTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateTaskResponse createTask(org.openapis.openapi.models.operations.CreateTaskRequest request, org.openapis.openapi.models.operations.CreateTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTaskRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateTaskResponse res = new org.openapis.openapi.models.operations.CreateTaskResponse() {{
            autopilotV1AssistantTask = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTask.class);
                res.autopilotV1AssistantTask = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateWebhookResponse createWebhook(org.openapis.openapi.models.operations.CreateWebhookRequest request, org.openapis.openapi.models.operations.CreateWebhookSecurity security) throws Exception {
        return this.createWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateWebhookResponse createWebhook(org.openapis.openapi.models.operations.CreateWebhookRequest request, org.openapis.openapi.models.operations.CreateWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateWebhookRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateWebhookResponse res = new org.openapis.openapi.models.operations.CreateWebhookResponse() {{
            autopilotV1AssistantWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantWebhook.class);
                res.autopilotV1AssistantWebhook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteAssistantResponse deleteAssistant(org.openapis.openapi.models.operations.DeleteAssistantRequest request, org.openapis.openapi.models.operations.DeleteAssistantSecurity security) throws Exception {
        return this.deleteAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteAssistantResponse deleteAssistant(org.openapis.openapi.models.operations.DeleteAssistantRequest request, org.openapis.openapi.models.operations.DeleteAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteAssistantRequest.class, baseUrl, "/v1/Assistants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteAssistantResponse res = new org.openapis.openapi.models.operations.DeleteAssistantResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteFieldResponse deleteField(org.openapis.openapi.models.operations.DeleteFieldRequest request, org.openapis.openapi.models.operations.DeleteFieldSecurity security) throws Exception {
        return this.deleteField(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteFieldResponse deleteField(org.openapis.openapi.models.operations.DeleteFieldRequest request, org.openapis.openapi.models.operations.DeleteFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFieldRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFieldResponse res = new org.openapis.openapi.models.operations.DeleteFieldResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteFieldTypeResponse deleteFieldType(org.openapis.openapi.models.operations.DeleteFieldTypeRequest request, org.openapis.openapi.models.operations.DeleteFieldTypeSecurity security) throws Exception {
        return this.deleteFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteFieldTypeResponse deleteFieldType(org.openapis.openapi.models.operations.DeleteFieldTypeRequest request, org.openapis.openapi.models.operations.DeleteFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFieldTypeRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFieldTypeResponse res = new org.openapis.openapi.models.operations.DeleteFieldTypeResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteFieldValueResponse deleteFieldValue(org.openapis.openapi.models.operations.DeleteFieldValueRequest request, org.openapis.openapi.models.operations.DeleteFieldValueSecurity security) throws Exception {
        return this.deleteFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteFieldValueResponse deleteFieldValue(org.openapis.openapi.models.operations.DeleteFieldValueRequest request, org.openapis.openapi.models.operations.DeleteFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteFieldValueRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteFieldValueResponse res = new org.openapis.openapi.models.operations.DeleteFieldValueResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteModelBuildResponse deleteModelBuild(org.openapis.openapi.models.operations.DeleteModelBuildRequest request, org.openapis.openapi.models.operations.DeleteModelBuildSecurity security) throws Exception {
        return this.deleteModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteModelBuildResponse deleteModelBuild(org.openapis.openapi.models.operations.DeleteModelBuildRequest request, org.openapis.openapi.models.operations.DeleteModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteModelBuildRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteModelBuildResponse res = new org.openapis.openapi.models.operations.DeleteModelBuildResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteQueryResponse deleteQuery(org.openapis.openapi.models.operations.DeleteQueryRequest request, org.openapis.openapi.models.operations.DeleteQuerySecurity security) throws Exception {
        return this.deleteQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteQueryResponse deleteQuery(org.openapis.openapi.models.operations.DeleteQueryRequest request, org.openapis.openapi.models.operations.DeleteQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteQueryRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Queries/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteQueryResponse res = new org.openapis.openapi.models.operations.DeleteQueryResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteSampleResponse deleteSample(org.openapis.openapi.models.operations.DeleteSampleRequest request, org.openapis.openapi.models.operations.DeleteSampleSecurity security) throws Exception {
        return this.deleteSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteSampleResponse deleteSample(org.openapis.openapi.models.operations.DeleteSampleRequest request, org.openapis.openapi.models.operations.DeleteSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSampleRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSampleResponse res = new org.openapis.openapi.models.operations.DeleteSampleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteTaskResponse deleteTask(org.openapis.openapi.models.operations.DeleteTaskRequest request, org.openapis.openapi.models.operations.DeleteTaskSecurity security) throws Exception {
        return this.deleteTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteTaskResponse deleteTask(org.openapis.openapi.models.operations.DeleteTaskRequest request, org.openapis.openapi.models.operations.DeleteTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteTaskRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteTaskResponse res = new org.openapis.openapi.models.operations.DeleteTaskResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteWebhookResponse deleteWebhook(org.openapis.openapi.models.operations.DeleteWebhookRequest request, org.openapis.openapi.models.operations.DeleteWebhookSecurity security) throws Exception {
        return this.deleteWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteWebhookResponse deleteWebhook(org.openapis.openapi.models.operations.DeleteWebhookRequest request, org.openapis.openapi.models.operations.DeleteWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteWebhookRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteWebhookResponse res = new org.openapis.openapi.models.operations.DeleteWebhookResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchAssistantResponse fetchAssistant(org.openapis.openapi.models.operations.FetchAssistantRequest request, org.openapis.openapi.models.operations.FetchAssistantSecurity security) throws Exception {
        return this.fetchAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchAssistantResponse fetchAssistant(org.openapis.openapi.models.operations.FetchAssistantRequest request, org.openapis.openapi.models.operations.FetchAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchAssistantRequest.class, baseUrl, "/v1/Assistants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchAssistantResponse res = new org.openapis.openapi.models.operations.FetchAssistantResponse() {{
            autopilotV1Assistant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1Assistant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1Assistant.class);
                res.autopilotV1Assistant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchDefaultsResponse fetchDefaults(org.openapis.openapi.models.operations.FetchDefaultsRequest request, org.openapis.openapi.models.operations.FetchDefaultsSecurity security) throws Exception {
        return this.fetchDefaults(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchDefaultsResponse fetchDefaults(org.openapis.openapi.models.operations.FetchDefaultsRequest request, org.openapis.openapi.models.operations.FetchDefaultsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DEFAULTS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDefaultsRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Defaults", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDefaultsResponse res = new org.openapis.openapi.models.operations.FetchDefaultsResponse() {{
            autopilotV1AssistantDefaults = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantDefaults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantDefaults.class);
                res.autopilotV1AssistantDefaults = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchDialogueResponse fetchDialogue(org.openapis.openapi.models.operations.FetchDialogueRequest request, org.openapis.openapi.models.operations.FetchDialogueSecurity security) throws Exception {
        return this.fetchDialogue(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchDialogueResponse fetchDialogue(org.openapis.openapi.models.operations.FetchDialogueRequest request, org.openapis.openapi.models.operations.FetchDialogueSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_DIALOGUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchDialogueRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Dialogues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchDialogueResponse res = new org.openapis.openapi.models.operations.FetchDialogueResponse() {{
            autopilotV1AssistantDialogue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantDialogue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantDialogue.class);
                res.autopilotV1AssistantDialogue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchFieldResponse fetchField(org.openapis.openapi.models.operations.FetchFieldRequest request, org.openapis.openapi.models.operations.FetchFieldSecurity security) throws Exception {
        return this.fetchField(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchFieldResponse fetchField(org.openapis.openapi.models.operations.FetchFieldRequest request, org.openapis.openapi.models.operations.FetchFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFieldRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFieldResponse res = new org.openapis.openapi.models.operations.FetchFieldResponse() {{
            autopilotV1AssistantTaskField = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskField out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskField.class);
                res.autopilotV1AssistantTaskField = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchFieldTypeResponse fetchFieldType(org.openapis.openapi.models.operations.FetchFieldTypeRequest request, org.openapis.openapi.models.operations.FetchFieldTypeSecurity security) throws Exception {
        return this.fetchFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchFieldTypeResponse fetchFieldType(org.openapis.openapi.models.operations.FetchFieldTypeRequest request, org.openapis.openapi.models.operations.FetchFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFieldTypeRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFieldTypeResponse res = new org.openapis.openapi.models.operations.FetchFieldTypeResponse() {{
            autopilotV1AssistantFieldType = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantFieldType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantFieldType.class);
                res.autopilotV1AssistantFieldType = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchFieldValueResponse fetchFieldValue(org.openapis.openapi.models.operations.FetchFieldValueRequest request, org.openapis.openapi.models.operations.FetchFieldValueSecurity security) throws Exception {
        return this.fetchFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchFieldValueResponse fetchFieldValue(org.openapis.openapi.models.operations.FetchFieldValueRequest request, org.openapis.openapi.models.operations.FetchFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchFieldValueRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchFieldValueResponse res = new org.openapis.openapi.models.operations.FetchFieldValueResponse() {{
            autopilotV1AssistantFieldTypeFieldValue = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantFieldTypeFieldValue out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantFieldTypeFieldValue.class);
                res.autopilotV1AssistantFieldTypeFieldValue = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchModelBuildResponse fetchModelBuild(org.openapis.openapi.models.operations.FetchModelBuildRequest request, org.openapis.openapi.models.operations.FetchModelBuildSecurity security) throws Exception {
        return this.fetchModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchModelBuildResponse fetchModelBuild(org.openapis.openapi.models.operations.FetchModelBuildRequest request, org.openapis.openapi.models.operations.FetchModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchModelBuildRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchModelBuildResponse res = new org.openapis.openapi.models.operations.FetchModelBuildResponse() {{
            autopilotV1AssistantModelBuild = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantModelBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantModelBuild.class);
                res.autopilotV1AssistantModelBuild = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchQueryResponse fetchQuery(org.openapis.openapi.models.operations.FetchQueryRequest request, org.openapis.openapi.models.operations.FetchQuerySecurity security) throws Exception {
        return this.fetchQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchQueryResponse fetchQuery(org.openapis.openapi.models.operations.FetchQueryRequest request, org.openapis.openapi.models.operations.FetchQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchQueryRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Queries/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchQueryResponse res = new org.openapis.openapi.models.operations.FetchQueryResponse() {{
            autopilotV1AssistantQuery = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantQuery out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantQuery.class);
                res.autopilotV1AssistantQuery = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchSampleResponse fetchSample(org.openapis.openapi.models.operations.FetchSampleRequest request, org.openapis.openapi.models.operations.FetchSampleSecurity security) throws Exception {
        return this.fetchSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchSampleResponse fetchSample(org.openapis.openapi.models.operations.FetchSampleRequest request, org.openapis.openapi.models.operations.FetchSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchSampleRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchSampleResponse res = new org.openapis.openapi.models.operations.FetchSampleResponse() {{
            autopilotV1AssistantTaskSample = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskSample out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskSample.class);
                res.autopilotV1AssistantTaskSample = out;
            }
        }

        return res;
    }

    /**
     * Returns Style sheet JSON object for the Assistant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchStyleSheetResponse fetchStyleSheet(org.openapis.openapi.models.operations.FetchStyleSheetRequest request, org.openapis.openapi.models.operations.FetchStyleSheetSecurity security) throws Exception {
        return this.fetchStyleSheet(request, security, null);
    }

    /**
     * Returns Style sheet JSON object for the Assistant
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchStyleSheetResponse fetchStyleSheet(org.openapis.openapi.models.operations.FetchStyleSheetRequest request, org.openapis.openapi.models.operations.FetchStyleSheetSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_STYLE_SHEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchStyleSheetRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/StyleSheet", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchStyleSheetResponse res = new org.openapis.openapi.models.operations.FetchStyleSheetResponse() {{
            autopilotV1AssistantStyleSheet = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantStyleSheet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantStyleSheet.class);
                res.autopilotV1AssistantStyleSheet = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskResponse fetchTask(org.openapis.openapi.models.operations.FetchTaskRequest request, org.openapis.openapi.models.operations.FetchTaskSecurity security) throws Exception {
        return this.fetchTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskResponse fetchTask(org.openapis.openapi.models.operations.FetchTaskRequest request, org.openapis.openapi.models.operations.FetchTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskResponse res = new org.openapis.openapi.models.operations.FetchTaskResponse() {{
            autopilotV1AssistantTask = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTask.class);
                res.autopilotV1AssistantTask = out;
            }
        }

        return res;
    }

    /**
     * Returns JSON actions for the Task.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchTaskActionsResponse fetchTaskActions(org.openapis.openapi.models.operations.FetchTaskActionsRequest request, org.openapis.openapi.models.operations.FetchTaskActionsSecurity security) throws Exception {
        return this.fetchTaskActions(request, security, null);
    }

    /**
     * Returns JSON actions for the Task.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FetchTaskActionsResponse fetchTaskActions(org.openapis.openapi.models.operations.FetchTaskActionsRequest request, org.openapis.openapi.models.operations.FetchTaskActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskActionsRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskActionsResponse res = new org.openapis.openapi.models.operations.FetchTaskActionsResponse() {{
            autopilotV1AssistantTaskTaskActions = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskTaskActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskTaskActions.class);
                res.autopilotV1AssistantTaskTaskActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchTaskStatisticsResponse fetchTaskStatistics(org.openapis.openapi.models.operations.FetchTaskStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskStatisticsSecurity security) throws Exception {
        return this.fetchTaskStatistics(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchTaskStatisticsResponse fetchTaskStatistics(org.openapis.openapi.models.operations.FetchTaskStatisticsRequest request, org.openapis.openapi.models.operations.FetchTaskStatisticsSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_TASK_STATISTICS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchTaskStatisticsRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchTaskStatisticsResponse res = new org.openapis.openapi.models.operations.FetchTaskStatisticsResponse() {{
            autopilotV1AssistantTaskTaskStatistics = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskTaskStatistics out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskTaskStatistics.class);
                res.autopilotV1AssistantTaskTaskStatistics = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchWebhookResponse fetchWebhook(org.openapis.openapi.models.operations.FetchWebhookRequest request, org.openapis.openapi.models.operations.FetchWebhookSecurity security) throws Exception {
        return this.fetchWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchWebhookResponse fetchWebhook(org.openapis.openapi.models.operations.FetchWebhookRequest request, org.openapis.openapi.models.operations.FetchWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchWebhookRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchWebhookResponse res = new org.openapis.openapi.models.operations.FetchWebhookResponse() {{
            autopilotV1AssistantWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantWebhook.class);
                res.autopilotV1AssistantWebhook = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListAssistantResponse listAssistant(org.openapis.openapi.models.operations.ListAssistantRequest request, org.openapis.openapi.models.operations.ListAssistantSecurity security) throws Exception {
        return this.listAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListAssistantResponse listAssistant(org.openapis.openapi.models.operations.ListAssistantRequest request, org.openapis.openapi.models.operations.ListAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Assistants");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListAssistantRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListAssistantResponse res = new org.openapis.openapi.models.operations.ListAssistantResponse() {{
            listAssistantResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListAssistantListAssistantResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListAssistantListAssistantResponse.class);
                res.listAssistantResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListFieldResponse listField(org.openapis.openapi.models.operations.ListFieldRequest request, org.openapis.openapi.models.operations.ListFieldSecurity security) throws Exception {
        return this.listField(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListFieldResponse listField(org.openapis.openapi.models.operations.ListFieldRequest request, org.openapis.openapi.models.operations.ListFieldSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FIELD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFieldRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFieldRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFieldResponse res = new org.openapis.openapi.models.operations.ListFieldResponse() {{
            listFieldResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFieldListFieldResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFieldListFieldResponse.class);
                res.listFieldResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListFieldTypeResponse listFieldType(org.openapis.openapi.models.operations.ListFieldTypeRequest request, org.openapis.openapi.models.operations.ListFieldTypeSecurity security) throws Exception {
        return this.listFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListFieldTypeResponse listFieldType(org.openapis.openapi.models.operations.ListFieldTypeRequest request, org.openapis.openapi.models.operations.ListFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFieldTypeRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFieldTypeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFieldTypeResponse res = new org.openapis.openapi.models.operations.ListFieldTypeResponse() {{
            listFieldTypeResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFieldTypeListFieldTypeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFieldTypeListFieldTypeResponse.class);
                res.listFieldTypeResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListFieldValueResponse listFieldValue(org.openapis.openapi.models.operations.ListFieldValueRequest request, org.openapis.openapi.models.operations.ListFieldValueSecurity security) throws Exception {
        return this.listFieldValue(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListFieldValueResponse listFieldValue(org.openapis.openapi.models.operations.ListFieldValueRequest request, org.openapis.openapi.models.operations.ListFieldValueSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_FIELD_VALUE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListFieldValueRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListFieldValueRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListFieldValueResponse res = new org.openapis.openapi.models.operations.ListFieldValueResponse() {{
            listFieldValueResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListFieldValueListFieldValueResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListFieldValueListFieldValueResponse.class);
                res.listFieldValueResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListModelBuildResponse listModelBuild(org.openapis.openapi.models.operations.ListModelBuildRequest request, org.openapis.openapi.models.operations.ListModelBuildSecurity security) throws Exception {
        return this.listModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListModelBuildResponse listModelBuild(org.openapis.openapi.models.operations.ListModelBuildRequest request, org.openapis.openapi.models.operations.ListModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListModelBuildRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/ModelBuilds", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListModelBuildRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListModelBuildResponse res = new org.openapis.openapi.models.operations.ListModelBuildResponse() {{
            listModelBuildResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListModelBuildListModelBuildResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListModelBuildListModelBuildResponse.class);
                res.listModelBuildResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListQueryResponse listQuery(org.openapis.openapi.models.operations.ListQueryRequest request, org.openapis.openapi.models.operations.ListQuerySecurity security) throws Exception {
        return this.listQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListQueryResponse listQuery(org.openapis.openapi.models.operations.ListQueryRequest request, org.openapis.openapi.models.operations.ListQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListQueryRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Queries", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListQueryRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListQueryResponse res = new org.openapis.openapi.models.operations.ListQueryResponse() {{
            listQueryResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListQueryListQueryResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListQueryListQueryResponse.class);
                res.listQueryResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListSampleResponse listSample(org.openapis.openapi.models.operations.ListSampleRequest request, org.openapis.openapi.models.operations.ListSampleSecurity security) throws Exception {
        return this.listSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListSampleResponse listSample(org.openapis.openapi.models.operations.ListSampleRequest request, org.openapis.openapi.models.operations.ListSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListSampleRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListSampleRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListSampleResponse res = new org.openapis.openapi.models.operations.ListSampleResponse() {{
            listSampleResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListSampleListSampleResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListSampleListSampleResponse.class);
                res.listSampleResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListTaskResponse listTask(org.openapis.openapi.models.operations.ListTaskRequest request, org.openapis.openapi.models.operations.ListTaskSecurity security) throws Exception {
        return this.listTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListTaskResponse listTask(org.openapis.openapi.models.operations.ListTaskRequest request, org.openapis.openapi.models.operations.ListTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListTaskRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListTaskRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListTaskResponse res = new org.openapis.openapi.models.operations.ListTaskResponse() {{
            listTaskResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListTaskListTaskResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListTaskListTaskResponse.class);
                res.listTaskResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListWebhookResponse listWebhook(org.openapis.openapi.models.operations.ListWebhookRequest request, org.openapis.openapi.models.operations.ListWebhookSecurity security) throws Exception {
        return this.listWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListWebhookResponse listWebhook(org.openapis.openapi.models.operations.ListWebhookRequest request, org.openapis.openapi.models.operations.ListWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListWebhookRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Webhooks", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListWebhookRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListWebhookResponse res = new org.openapis.openapi.models.operations.ListWebhookResponse() {{
            listWebhookResponse = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListWebhookListWebhookResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListWebhookListWebhookResponse.class);
                res.listWebhookResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateAssistantResponse updateAssistant(org.openapis.openapi.models.operations.UpdateAssistantRequest request, org.openapis.openapi.models.operations.UpdateAssistantSecurity security) throws Exception {
        return this.updateAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateAssistantResponse updateAssistant(org.openapis.openapi.models.operations.UpdateAssistantRequest request, org.openapis.openapi.models.operations.UpdateAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateAssistantRequest.class, baseUrl, "/v1/Assistants/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateAssistantResponse res = new org.openapis.openapi.models.operations.UpdateAssistantResponse() {{
            autopilotV1Assistant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1Assistant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1Assistant.class);
                res.autopilotV1Assistant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateDefaultsResponse updateDefaults(org.openapis.openapi.models.operations.UpdateDefaultsRequest request, org.openapis.openapi.models.operations.UpdateDefaultsSecurity security) throws Exception {
        return this.updateDefaults(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateDefaultsResponse updateDefaults(org.openapis.openapi.models.operations.UpdateDefaultsRequest request, org.openapis.openapi.models.operations.UpdateDefaultsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_DEFAULTS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateDefaultsRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Defaults", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateDefaultsResponse res = new org.openapis.openapi.models.operations.UpdateDefaultsResponse() {{
            autopilotV1AssistantDefaults = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantDefaults out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantDefaults.class);
                res.autopilotV1AssistantDefaults = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateFieldTypeResponse updateFieldType(org.openapis.openapi.models.operations.UpdateFieldTypeRequest request, org.openapis.openapi.models.operations.UpdateFieldTypeSecurity security) throws Exception {
        return this.updateFieldType(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateFieldTypeResponse updateFieldType(org.openapis.openapi.models.operations.UpdateFieldTypeRequest request, org.openapis.openapi.models.operations.UpdateFieldTypeSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_FIELD_TYPE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateFieldTypeRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateFieldTypeResponse res = new org.openapis.openapi.models.operations.UpdateFieldTypeResponse() {{
            autopilotV1AssistantFieldType = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantFieldType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantFieldType.class);
                res.autopilotV1AssistantFieldType = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateModelBuildResponse updateModelBuild(org.openapis.openapi.models.operations.UpdateModelBuildRequest request, org.openapis.openapi.models.operations.UpdateModelBuildSecurity security) throws Exception {
        return this.updateModelBuild(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateModelBuildResponse updateModelBuild(org.openapis.openapi.models.operations.UpdateModelBuildRequest request, org.openapis.openapi.models.operations.UpdateModelBuildSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_MODEL_BUILD_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateModelBuildRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateModelBuildResponse res = new org.openapis.openapi.models.operations.UpdateModelBuildResponse() {{
            autopilotV1AssistantModelBuild = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantModelBuild out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantModelBuild.class);
                res.autopilotV1AssistantModelBuild = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateQueryResponse updateQuery(org.openapis.openapi.models.operations.UpdateQueryRequest request, org.openapis.openapi.models.operations.UpdateQuerySecurity security) throws Exception {
        return this.updateQuery(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateQueryResponse updateQuery(org.openapis.openapi.models.operations.UpdateQueryRequest request, org.openapis.openapi.models.operations.UpdateQuerySecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_QUERY_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateQueryRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Queries/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateQueryResponse res = new org.openapis.openapi.models.operations.UpdateQueryResponse() {{
            autopilotV1AssistantQuery = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantQuery out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantQuery.class);
                res.autopilotV1AssistantQuery = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateRestoreAssistantResponse updateRestoreAssistant(org.openapis.openapi.models.operations.UpdateRestoreAssistantUpdateRestoreAssistantRequest request, org.openapis.openapi.models.operations.UpdateRestoreAssistantSecurity security) throws Exception {
        return this.updateRestoreAssistant(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateRestoreAssistantResponse updateRestoreAssistant(org.openapis.openapi.models.operations.UpdateRestoreAssistantUpdateRestoreAssistantRequest request, org.openapis.openapi.models.operations.UpdateRestoreAssistantSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_RESTORE_ASSISTANT_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Assistants/Restore");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateRestoreAssistantResponse res = new org.openapis.openapi.models.operations.UpdateRestoreAssistantResponse() {{
            autopilotV1RestoreAssistant = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1RestoreAssistant out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1RestoreAssistant.class);
                res.autopilotV1RestoreAssistant = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateSampleResponse updateSample(org.openapis.openapi.models.operations.UpdateSampleRequest request, org.openapis.openapi.models.operations.UpdateSampleSecurity security) throws Exception {
        return this.updateSample(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateSampleResponse updateSample(org.openapis.openapi.models.operations.UpdateSampleRequest request, org.openapis.openapi.models.operations.UpdateSampleSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SAMPLE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateSampleRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateSampleResponse res = new org.openapis.openapi.models.operations.UpdateSampleResponse() {{
            autopilotV1AssistantTaskSample = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskSample out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskSample.class);
                res.autopilotV1AssistantTaskSample = out;
            }
        }

        return res;
    }

    /**
     * Updates the style sheet for an Assistant identified by `assistant_sid`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateStyleSheetResponse updateStyleSheet(org.openapis.openapi.models.operations.UpdateStyleSheetRequest request, org.openapis.openapi.models.operations.UpdateStyleSheetSecurity security) throws Exception {
        return this.updateStyleSheet(request, security, null);
    }

    /**
     * Updates the style sheet for an Assistant identified by `assistant_sid`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateStyleSheetResponse updateStyleSheet(org.openapis.openapi.models.operations.UpdateStyleSheetRequest request, org.openapis.openapi.models.operations.UpdateStyleSheetSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_STYLE_SHEET_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateStyleSheetRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/StyleSheet", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateStyleSheetResponse res = new org.openapis.openapi.models.operations.UpdateStyleSheetResponse() {{
            autopilotV1AssistantStyleSheet = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantStyleSheet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantStyleSheet.class);
                res.autopilotV1AssistantStyleSheet = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateTaskResponse updateTask(org.openapis.openapi.models.operations.UpdateTaskRequest request, org.openapis.openapi.models.operations.UpdateTaskSecurity security) throws Exception {
        return this.updateTask(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateTaskResponse updateTask(org.openapis.openapi.models.operations.UpdateTaskRequest request, org.openapis.openapi.models.operations.UpdateTaskSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_TASK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskResponse res = new org.openapis.openapi.models.operations.UpdateTaskResponse() {{
            autopilotV1AssistantTask = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTask out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTask.class);
                res.autopilotV1AssistantTask = out;
            }
        }

        return res;
    }

    /**
     * Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateTaskActionsResponse updateTaskActions(org.openapis.openapi.models.operations.UpdateTaskActionsRequest request, org.openapis.openapi.models.operations.UpdateTaskActionsSecurity security) throws Exception {
        return this.updateTaskActions(request, security, null);
    }

    /**
     * Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateTaskActionsResponse updateTaskActions(org.openapis.openapi.models.operations.UpdateTaskActionsRequest request, org.openapis.openapi.models.operations.UpdateTaskActionsSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_TASK_ACTIONS_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateTaskActionsRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateTaskActionsResponse res = new org.openapis.openapi.models.operations.UpdateTaskActionsResponse() {{
            autopilotV1AssistantTaskTaskActions = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantTaskTaskActions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantTaskTaskActions.class);
                res.autopilotV1AssistantTaskTaskActions = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateWebhookResponse updateWebhook(org.openapis.openapi.models.operations.UpdateWebhookRequest request, org.openapis.openapi.models.operations.UpdateWebhookSecurity security) throws Exception {
        return this.updateWebhook(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateWebhookResponse updateWebhook(org.openapis.openapi.models.operations.UpdateWebhookRequest request, org.openapis.openapi.models.operations.UpdateWebhookSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_WEBHOOK_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateWebhookRequest.class, baseUrl, "/v1/Assistants/{AssistantSid}/Webhooks/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateWebhookResponse res = new org.openapis.openapi.models.operations.UpdateWebhookResponse() {{
            autopilotV1AssistantWebhook = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.AutopilotV1AssistantWebhook out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.AutopilotV1AssistantWebhook.class);
                res.autopilotV1AssistantWebhook = out;
            }
        }

        return res;
    }
}