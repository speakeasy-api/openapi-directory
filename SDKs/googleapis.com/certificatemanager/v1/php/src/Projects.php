<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new CertificateIssuanceConfig in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateResponse
     */
	public function certificatemanagerProjectsLocationsCertificateIssuanceConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateIssuanceConfigs', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateIssuanceConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CertificateIssuanceConfigs in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListResponse
     */
	public function certificatemanagerProjectsLocationsCertificateIssuanceConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateIssuanceConfigs', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateIssuanceConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificateIssuanceConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificateIssuanceConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new CertificateMapEntry in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateResponse
     */
	public function certificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateMapEntries', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateMapEntryInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CertificateMapEntries in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListResponse
     */
	public function certificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesList(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateMapEntries', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCertificateMapEntriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificateMapEntriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificateMapEntriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new CertificateMap in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateResponse
     */
	public function certificatemanagerProjectsLocationsCertificateMapsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateMaps', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateMapInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists CertificateMaps in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListResponse
     */
	public function certificatemanagerProjectsLocationsCertificateMapsList(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificateMaps', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificateMapsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificateMapsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificateMapsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Certificate in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateResponse
     */
	public function certificatemanagerProjectsLocationsCertificatesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificates', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificateInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Certificates in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListResponse
     */
	public function certificatemanagerProjectsLocationsCertificatesList(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/certificates', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsCertificatesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCertificatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCertificatesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new DnsAuthorization in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateResponse
     */
	public function certificatemanagerProjectsLocationsDnsAuthorizationsCreate(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dnsAuthorizations', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dnsAuthorizationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists DnsAuthorizations in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListResponse
     */
	public function certificatemanagerProjectsLocationsDnsAuthorizationsList(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/dnsAuthorizations', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDnsAuthorizationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDnsAuthorizationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a DnsAuthorization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchResponse
     */
	public function certificatemanagerProjectsLocationsDnsAuthorizationsPatch(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "dnsAuthorizationInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsDnsAuthorizationsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListResponse
     */
	public function certificatemanagerProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelResponse
     */
	public function certificatemanagerProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteResponse
     */
	public function certificatemanagerProjectsLocationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetResponse
     */
	public function certificatemanagerProjectsLocationsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListResponse
     */
	public function certificatemanagerProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CertificatemanagerProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}