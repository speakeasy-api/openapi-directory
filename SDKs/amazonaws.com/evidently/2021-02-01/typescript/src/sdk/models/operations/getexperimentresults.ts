/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

/**
 * The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.
 */
export enum GetExperimentResultsRequestBodyBaseStatEnum {
  Mean = "Mean",
}

export class GetExperimentResultsRequestBody extends SpeakeasyBase {
  /**
   * The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "baseStat" })
  baseStat?: GetExperimentResultsRequestBodyBaseStatEnum;

  /**
   * The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  /**
   * The names of the experiment metrics that you want to see the results of.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metricNames" })
  metricNames: string[];

  /**
   * In seconds, the amount of time to aggregate results together.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "period" })
  period?: number;

  /**
   * The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reportNames" })
  reportNames?: shared.ExperimentReportNameEnum[];

  /**
   * <p>The statistics that you want to see in the returned results.</p> <ul> <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li> <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li> <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li> <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resultStats" })
  resultStats?: shared.ExperimentResultRequestTypeEnum[];

  /**
   * The date and time that the experiment started.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * The names of the experiment treatments that you want to see the results for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "treatmentNames" })
  treatmentNames: string[];
}

export class GetExperimentResultsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: GetExperimentResultsRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The name of the experiment to retrieve the results of.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=experiment",
  })
  experiment: string;

  /**
   * The name or ARN of the project that contains the experiment that you want to see the results of.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=project",
  })
  project: string;
}

export class GetExperimentResultsResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getExperimentResultsResponse?: shared.GetExperimentResultsResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
