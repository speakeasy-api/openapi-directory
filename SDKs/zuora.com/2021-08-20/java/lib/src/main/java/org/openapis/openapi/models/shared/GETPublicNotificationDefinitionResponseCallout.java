/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class GETPublicNotificationDefinitionResponseCallout {
    /**
     * The status of the callout. The default is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    public Boolean active;
    public GETPublicNotificationDefinitionResponseCallout withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    /**
     * If requiredAuth is true, this object is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calloutAuth")
    public CalloutAuth calloutAuth;
    public GETPublicNotificationDefinitionResponseCallout withCalloutAuth(CalloutAuth calloutAuth) {
        this.calloutAuth = calloutAuth;
        return this;
    }
    
    /**
     * The callout URL. It must start with 'https://'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calloutBaseurl")
    public String calloutBaseurl;
    public GETPublicNotificationDefinitionResponseCallout withCalloutBaseurl(String calloutBaseurl) {
        this.calloutBaseurl = calloutBaseurl;
        return this;
    }
    
    /**
     * A key-value map of merge fields of this callout.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calloutParams")
    public java.util.Map<String, String> calloutParams;
    public GETPublicNotificationDefinitionResponseCallout withCalloutParams(java.util.Map<String, String> calloutParams) {
        this.calloutParams = calloutParams;
        return this;
    }
    
    /**
     * Specified whether to retry the callout when the callout fails. The default is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calloutRetry")
    public Boolean calloutRetry;
    public GETPublicNotificationDefinitionResponseCallout withCalloutRetry(Boolean calloutRetry) {
        this.calloutRetry = calloutRetry;
        return this;
    }
    
    /**
     * Description for the callout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public GETPublicNotificationDefinitionResponseCallout withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The name of the event type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventTypeName")
    public String eventTypeName;
    public GETPublicNotificationDefinitionResponseCallout withEventTypeName(String eventTypeName) {
        this.eventTypeName = eventTypeName;
        return this;
    }
    
    /**
     * The HTTP method of the callout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpMethod")
    public GETPublicNotificationDefinitionResponseCalloutHttpMethodEnum httpMethod;
    public GETPublicNotificationDefinitionResponseCallout withHttpMethod(GETPublicNotificationDefinitionResponseCalloutHttpMethodEnum httpMethod) {
        this.httpMethod = httpMethod;
        return this;
    }
    
    /**
     * The ID of the callout. If `calloutActive` is true, a callout is required. The eventTypeName of the callout MUST be the same as the eventTypeName.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETPublicNotificationDefinitionResponseCallout withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The name of the created callout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GETPublicNotificationDefinitionResponseCallout withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Specifies whether the callout requires auth.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requiredAuth")
    public Boolean requiredAuth;
    public GETPublicNotificationDefinitionResponseCallout withRequiredAuth(Boolean requiredAuth) {
        this.requiredAuth = requiredAuth;
        return this;
    }
    
}
