"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Organizations:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def claim_into_organization(self, request: operations.ClaimIntoOrganizationRequest) -> operations.ClaimIntoOrganizationResponse:
        r"""Claim a list of devices, licenses, and/or orders into an organization
        Claim a list of devices, licenses, and/or orders into an organization. When claiming by order, all devices and licenses in the order will be claimed; licenses will be added to the organization and devices will be placed in the organization's inventory.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClaimIntoOrganizationRequest, base_url, '/organizations/{organizationId}/claim', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClaimIntoOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.claim_into_organization_200_application_json_object = out

        return res

    def clone_organization(self, request: operations.CloneOrganizationRequest) -> operations.CloneOrganizationResponse:
        r"""Create a new organization by cloning the addressed organization
        Create a new organization by cloning the addressed organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloneOrganizationRequest, base_url, '/organizations/{organizationId}/clone', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloneOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.clone_organization_201_application_json_object = out

        return res

    def get_organization(self, request: operations.GetOrganizationRequest) -> operations.GetOrganizationResponse:
        r"""Return an organization
        Return an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationRequest, base_url, '/organizations/{organizationId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_organization_200_application_json_object = out

        return res

    def get_organization_device_statuses(self, request: operations.GetOrganizationDeviceStatusesRequest) -> operations.GetOrganizationDeviceStatusesResponse:
        r"""List the status of every Meraki device in the organization
        List the status of every Meraki device in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDeviceStatusesRequest, base_url, '/organizations/{organizationId}/deviceStatuses', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDeviceStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_device_statuses_200_application_json_objects = out

        return res

    def get_organization_inventory(self, request: operations.GetOrganizationInventoryRequest) -> operations.GetOrganizationInventoryResponse:
        r"""Return the inventory for an organization
        Return the inventory for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationInventoryRequest, base_url, '/organizations/{organizationId}/inventory', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationInventoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationInventoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_inventory_200_application_json_objects = out

        return res

    def get_organization_third_party_vpn_peers(self, request: operations.GetOrganizationThirdPartyVPNPeersRequest) -> operations.GetOrganizationThirdPartyVPNPeersResponse:
        r"""Return the third party VPN peers for an organization
        Return the third party VPN peers for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationThirdPartyVPNPeersRequest, base_url, '/organizations/{organizationId}/thirdPartyVPNPeers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationThirdPartyVPNPeersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_third_party_vpn_peers_200_application_json_objects = out

        return res

    def get_organization_uplinks_loss_and_latency(self, request: operations.GetOrganizationUplinksLossAndLatencyRequest) -> operations.GetOrganizationUplinksLossAndLatencyResponse:
        r"""Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
        Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationUplinksLossAndLatencyRequest, base_url, '/organizations/{organizationId}/uplinksLossAndLatency', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationUplinksLossAndLatencyRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationUplinksLossAndLatencyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_uplinks_loss_and_latency_200_application_json_objects = out

        return res

    def get_organizations(self) -> operations.GetOrganizationsResponse:
        r"""List the organizations that the user has privileges on
        List the organizations that the user has privileges on
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/organizations'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organizations_200_application_json_objects = out

        return res

    def update_organization_third_party_vpn_peers(self, request: operations.UpdateOrganizationThirdPartyVPNPeersRequest) -> operations.UpdateOrganizationThirdPartyVPNPeersResponse:
        r"""Update the third party VPN peers for an organization
        Update the third party VPN peers for an organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrganizationThirdPartyVPNPeersRequest, base_url, '/organizations/{organizationId}/thirdPartyVPNPeers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrganizationThirdPartyVPNPeersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.update_organization_third_party_vpn_peers_200_application_json_objects = out

        return res

    