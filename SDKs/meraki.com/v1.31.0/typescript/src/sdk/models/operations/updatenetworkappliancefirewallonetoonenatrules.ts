/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Either of the following: 'tcp', 'udp', 'icmp-ping' or 'any'
 */
export enum UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesAllowedInboundProtocolEnum {
  Any = "any",
  IcmpPing = "icmp-ping",
  Tcp = "tcp",
  Udp = "udp",
}

export class UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesAllowedInbound extends SpeakeasyBase {
  /**
   * An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges, or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowedIps" })
  allowedIps?: string[];

  /**
   * An array of ports or port ranges that will be forwarded to the host on the LAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationPorts" })
  destinationPorts?: string[];

  /**
   * Either of the following: 'tcp', 'udp', 'icmp-ping' or 'any'
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesAllowedInboundProtocolEnum;
}

/**
 * The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
 */
export enum UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesUplinkEnum {
  Internet1 = "internet1",
  Internet2 = "internet2",
}

export class UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRules extends SpeakeasyBase {
  /**
   * The ports this mapping will provide access on, and the remote IPs that will be allowed access to the resource
   */
  @SpeakeasyMetadata({
    elemType:
      UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesAllowedInbound,
  })
  @Expose({ name: "allowedInbound" })
  @Type(
    () =>
      UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesAllowedInbound
  )
  allowedInbound?: UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesAllowedInbound[];

  /**
   * The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lanIp" })
  lanIp: string;

  /**
   * A descriptive name for the rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The IP address that will be used to access the internal resource from the WAN
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publicIp" })
  publicIp?: string;

  /**
   * The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2')
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uplink" })
  uplink?: UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRulesUplinkEnum;
}

export class UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBody extends SpeakeasyBase {
  /**
   * An array of 1:1 nat rules
   */
  @SpeakeasyMetadata({
    elemType: UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRules,
  })
  @Expose({ name: "rules" })
  @Type(() => UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRules)
  rules: UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBodyRules[];
}

export class UpdateNetworkApplianceFirewallOneToOneNatRulesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateNetworkApplianceFirewallOneToOneNatRulesRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkApplianceFirewallOneToOneNatRulesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkApplianceFirewallOneToOneNatRules200ApplicationJSONObject?: Record<
    string,
    any
  >;
}
