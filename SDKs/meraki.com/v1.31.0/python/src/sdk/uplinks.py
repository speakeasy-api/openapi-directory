"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Uplinks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_device_appliance_uplinks_settings(self, request: operations.GetDeviceApplianceUplinksSettingsRequest) -> operations.GetDeviceApplianceUplinksSettingsResponse:
        r"""Return the uplink settings for an MX appliance
        Return the uplink settings for an MX appliance
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceApplianceUplinksSettingsRequest, base_url, '/devices/{serial}/appliance/uplinks/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceApplianceUplinksSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDeviceApplianceUplinksSettings200ApplicationJSON])
                res.get_device_appliance_uplinks_settings_200_application_json_object = out

        return res

    def get_device_loss_and_latency_history(self, request: operations.GetDeviceLossAndLatencyHistoryRequest) -> operations.GetDeviceLossAndLatencyHistoryResponse:
        r"""Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
        Get the uplink loss percentage and latency in milliseconds, and goodput in kilobits per second for a wired network device.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDeviceLossAndLatencyHistoryRequest, base_url, '/devices/{serial}/lossAndLatencyHistory', request)
        
        query_params = utils.get_query_params(operations.GetDeviceLossAndLatencyHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDeviceLossAndLatencyHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_device_loss_and_latency_history_200_application_json_objects = out

        return res

    def get_network_appliance_uplinks_usage_history(self, request: operations.GetNetworkApplianceUplinksUsageHistoryRequest) -> operations.GetNetworkApplianceUplinksUsageHistoryResponse:
        r"""Get the sent and received bytes for each uplink of a network.
        Get the sent and received bytes for each uplink of a network.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkApplianceUplinksUsageHistoryRequest, base_url, '/networks/{networkId}/appliance/uplinks/usageHistory', request)
        
        query_params = utils.get_query_params(operations.GetNetworkApplianceUplinksUsageHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkApplianceUplinksUsageHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_appliance_uplinks_usage_history_200_application_json_objects = out

        return res

    def get_organization_appliance_uplink_statuses(self, request: operations.GetOrganizationApplianceUplinkStatusesRequest) -> operations.GetOrganizationApplianceUplinkStatusesResponse:
        r"""List the uplink status of every Meraki MX and Z series appliances in the organization
        List the uplink status of every Meraki MX and Z series appliances in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationApplianceUplinkStatusesRequest, base_url, '/organizations/{organizationId}/appliance/uplink/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationApplianceUplinkStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationApplianceUplinkStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_organization_appliance_uplink_statuses_200_application_json_objects = out

        return res

    def get_organization_devices_uplinks_addresses_by_device(self, request: operations.GetOrganizationDevicesUplinksAddressesByDeviceRequest) -> operations.GetOrganizationDevicesUplinksAddressesByDeviceResponse:
        r"""List the current uplink addresses for devices in an organization.
        List the current uplink addresses for devices in an organization.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDevicesUplinksAddressesByDeviceRequest, base_url, '/organizations/{organizationId}/devices/uplinks/addresses/byDevice', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationDevicesUplinksAddressesByDeviceRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDevicesUplinksAddressesByDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationDevicesUplinksAddressesByDevice200ApplicationJSON]])
                res.get_organization_devices_uplinks_addresses_by_device_200_application_json_objects = out

        return res

    def get_organization_devices_uplinks_loss_and_latency(self, request: operations.GetOrganizationDevicesUplinksLossAndLatencyRequest) -> operations.GetOrganizationDevicesUplinksLossAndLatencyResponse:
        r"""Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
        Return the uplink loss and latency for every MX in the organization from at latest 2 minutes ago
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationDevicesUplinksLossAndLatencyRequest, base_url, '/organizations/{organizationId}/devices/uplinksLossAndLatency', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationDevicesUplinksLossAndLatencyRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationDevicesUplinksLossAndLatencyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationDevicesUplinksLossAndLatency200ApplicationJSON]])
                res.get_organization_devices_uplinks_loss_and_latency_200_application_json_objects = out

        return res

    def get_organization_uplinks_statuses(self, request: operations.GetOrganizationUplinksStatusesRequest) -> operations.GetOrganizationUplinksStatusesResponse:
        r"""List the uplink status of every Meraki MX, MG and Z series devices in the organization
        List the uplink status of every Meraki MX, MG and Z series devices in the organization
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationUplinksStatusesRequest, base_url, '/organizations/{organizationId}/uplinks/statuses', request)
        
        query_params = utils.get_query_params(operations.GetOrganizationUplinksStatusesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationUplinksStatusesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetOrganizationUplinksStatuses200ApplicationJSON]])
                res.get_organization_uplinks_statuses_200_application_json_objects = out

        return res

    def update_device_appliance_uplinks_settings(self, request: operations.UpdateDeviceApplianceUplinksSettingsRequest) -> operations.UpdateDeviceApplianceUplinksSettingsResponse:
        r"""Update the uplink settings for an MX appliance
        Update the uplink settings for an MX appliance
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateDeviceApplianceUplinksSettingsRequest, base_url, '/devices/{serial}/appliance/uplinks/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceApplianceUplinksSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.UpdateDeviceApplianceUplinksSettings200ApplicationJSON])
                res.update_device_appliance_uplinks_settings_200_application_json_object = out

        return res

    