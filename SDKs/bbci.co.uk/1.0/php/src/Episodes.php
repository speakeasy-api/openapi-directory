<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Episodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get Clips
     * 
     * Get Clips
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetClipsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetClipsResponse
     */
	public function getClips(
        \OpenAPI\OpenAPI\Models\Operations\GetClipsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetClipsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/clips/{pid}', \OpenAPI\OpenAPI\Models\Operations\GetClipsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetClipsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetClipsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the episodes for a category.
     * 
     * Get the list of all the episodes for a given category in TV & iPlayer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByCategoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByCategoryResponse
     */
	public function getEpisodesByCategory(
        \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByCategoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByCategoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/categories/{category}/episodes', \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEpisodesByCategoryRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get episodes by group, brand or series
     * 
     * Get episodes by group, brand or series
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByGroupResponse
     */
	public function getEpisodesByGroup(
        \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{pid}/episodes', \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEpisodesByGroupRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Child episodes for a given programme pid.
     * 
     * Get the child episodes belonging to a given programme identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByParentPIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByParentPIDResponse
     */
	public function getEpisodesByParentPID(
        \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByParentPIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByParentPIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/programmes/{pid}/episodes', \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByParentPIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEpisodesByParentPIDRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEpisodesByParentPIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Onward Journey
     * 
     * Get Onward Journey (next programme)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOnwardJourneyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOnwardJourneyResponse
     */
	public function getOnwardJourney(
        \OpenAPI\OpenAPI\Models\Operations\GetOnwardJourneyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOnwardJourneyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/episodes/{pid}/next', \OpenAPI\OpenAPI\Models\Operations\GetOnwardJourneyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOnwardJourneyRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOnwardJourneyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Episode for a given pid.
     * 
     * Get the episode for a given episode identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProgrammeByPIDRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProgrammeByPIDResponse
     */
	public function getProgrammeByPID(
        \OpenAPI\OpenAPI\Models\Operations\GetProgrammeByPIDRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProgrammeByPIDResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/episodes/{pid}', \OpenAPI\OpenAPI\Models\Operations\GetProgrammeByPIDRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProgrammeByPIDRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProgrammeByPIDResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get programme recommendations
     * 
     * Get programme recommendations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProgrammeRecommendationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProgrammeRecommendationsResponse
     */
	public function getProgrammeRecommendations(
        \OpenAPI\OpenAPI\Models\Operations\GetProgrammeRecommendationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProgrammeRecommendationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/episodes/{pid}/recommendations', \OpenAPI\OpenAPI\Models\Operations\GetProgrammeRecommendationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProgrammeRecommendationsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProgrammeRecommendationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get programmes popular
     * 
     * Get programmes popular
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetProgrammesPopularRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetProgrammesPopularResponse
     */
	public function getProgrammesPopular(
        \OpenAPI\OpenAPI\Models\Operations\GetProgrammesPopularRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetProgrammesPopularResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/popular/episodes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetProgrammesPopularRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetProgrammesPopularResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Trailers (pre-rolls)
     * 
     * Get Trailers (pre-rolls)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrailersPreRollsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrailersPreRollsResponse
     */
	public function getTrailersPreRolls(
        \OpenAPI\OpenAPI\Models\Operations\GetTrailersPreRollsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrailersPreRollsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/episodes/{pid}/prerolls', \OpenAPI\OpenAPI\Models\Operations\GetTrailersPreRollsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTrailersPreRollsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrailersPreRollsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Follow-ups (post-rolls)
     * 
     * Get Follow-ups (post-rolls)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPostRollsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPostRollsResponse
     */
	public function getPostRolls(
        \OpenAPI\OpenAPI\Models\Operations\GetPostRollsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPostRollsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/episodes/{pid}/postrolls', \OpenAPI\OpenAPI\Models\Operations\GetPostRollsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPostRollsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPostRollsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ibl = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }

        return $response;
    }
}