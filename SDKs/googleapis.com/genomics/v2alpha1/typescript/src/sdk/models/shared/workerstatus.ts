/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { DiskStatus } from "./diskstatus";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The status of the worker VM.
 */
export class WorkerStatus extends SpeakeasyBase {
  /**
   * Status of attached disks.
   */
  @SpeakeasyMetadata({ elemType: DiskStatus })
  @Expose({ name: "attachedDisks" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, DiskStatus> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], DiskStatus);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  attachedDisks?: Record<string, DiskStatus>;

  /**
   * The status of a disk on a VM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootDisk" })
  @Type(() => DiskStatus)
  bootDisk?: DiskStatus;

  /**
   * Free RAM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "freeRamBytes" })
  freeRamBytes?: string;

  /**
   * Total RAM.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalRamBytes" })
  totalRamBytes?: string;

  /**
   * System uptime.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uptimeSeconds" })
  uptimeSeconds?: string;
}
