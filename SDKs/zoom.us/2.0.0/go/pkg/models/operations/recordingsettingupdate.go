// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type RecordingSettingUpdateSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type RecordingSettingUpdateRequest struct {
	// To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
	//
	// To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875=="), you must **double encode** the UUID before making an API request.
	MeetingID string `pathParam:"style=simple,explode=false,name=meetingId"`
}

// RecordingSettingUpdateRecordingSettingsApprovalTypeEnum - Approval type for the registration.<br>
// `0`- Automatically approve the registration when a user registers.<br>
// `1` - Manually approve or deny the registration of a user.<br>
// `2` - No registration required to view the recording.
type RecordingSettingUpdateRecordingSettingsApprovalTypeEnum string

const (
	RecordingSettingUpdateRecordingSettingsApprovalTypeEnumZero RecordingSettingUpdateRecordingSettingsApprovalTypeEnum = "0"
	RecordingSettingUpdateRecordingSettingsApprovalTypeEnumOne  RecordingSettingUpdateRecordingSettingsApprovalTypeEnum = "1"
	RecordingSettingUpdateRecordingSettingsApprovalTypeEnumTwo  RecordingSettingUpdateRecordingSettingsApprovalTypeEnum = "2"
)

func (e *RecordingSettingUpdateRecordingSettingsApprovalTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = RecordingSettingUpdateRecordingSettingsApprovalTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingSettingUpdateRecordingSettingsApprovalTypeEnum: %s", s)
	}
}

// RecordingSettingUpdateRecordingSettingsShareRecordingEnum - Determine how the meeting recording is shared.
type RecordingSettingUpdateRecordingSettingsShareRecordingEnum string

const (
	RecordingSettingUpdateRecordingSettingsShareRecordingEnumPublicly   RecordingSettingUpdateRecordingSettingsShareRecordingEnum = "publicly"
	RecordingSettingUpdateRecordingSettingsShareRecordingEnumInternally RecordingSettingUpdateRecordingSettingsShareRecordingEnum = "internally"
	RecordingSettingUpdateRecordingSettingsShareRecordingEnumNone       RecordingSettingUpdateRecordingSettingsShareRecordingEnum = "none"
)

func (e *RecordingSettingUpdateRecordingSettingsShareRecordingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "publicly":
		fallthrough
	case "internally":
		fallthrough
	case "none":
		*e = RecordingSettingUpdateRecordingSettingsShareRecordingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordingSettingUpdateRecordingSettingsShareRecordingEnum: %s", s)
	}
}

// RecordingSettingUpdateRecordingSettings - **HTTP Status Code:** `200` <br>
// Meeting recording settings returned
type RecordingSettingUpdateRecordingSettings struct {
	// Approval type for the registration.<br>
	// `0`- Automatically approve the registration when a user registers.<br>
	// `1` - Manually approve or deny the registration of a user.<br>
	// `2` - No registration required to view the recording.
	ApprovalType *RecordingSettingUpdateRecordingSettingsApprovalTypeEnum `json:"approval_type,omitempty"`
	// Authentication domains.
	AuthenticationDomains *string `json:"authentication_domains,omitempty"`
	// Authentication Options.
	AuthenticationOption *string `json:"authentication_option,omitempty"`
	// Determine whether registration  isrequired to view the recording.
	OnDemand *bool `json:"on_demand,omitempty"`
	// Enable password protection for the recording by setting a password. The password must have a minimum of **eight** characters with a mix of numbers, letters and special characters.<br><br>
	// **Note:** If the account owner or the admin has set minimum password strength requirements for recordings via Account Settings, the password value provided here must meet those requirements. <br><br>If the requirements are enabled, you can view those requirements by calling either the [Get User Settings API](https://marketplace.zoom.us/docs/api-reference/zoom-api/users/usersettings) or the [Get Account Settings](https://marketplace.zoom.us/docs/api-reference/zoom-api/accounts/accountsettings) API.
	Password *string `json:"password,omitempty"`
	// Only authenticated users can view.
	RecordingAuthentication *bool `json:"recording_authentication,omitempty"`
	// Send an email to host when someone registers to view the recording. This applies for On-demand recordings only.
	SendEmailToHost *bool `json:"send_email_to_host,omitempty"`
	// Determine how the meeting recording is shared.
	ShareRecording *RecordingSettingUpdateRecordingSettingsShareRecordingEnum `json:"share_recording,omitempty"`
	// Show social share buttons on registration page. This applies for On-demand recordings only.
	ShowSocialShareButtons *bool `json:"show_social_share_buttons,omitempty"`
	// Name of the recording.
	Topic *string `json:"topic,omitempty"`
	// Determine whether a viewer can download the recording file or not.
	ViewerDownload *bool `json:"viewer_download,omitempty"`
}

type RecordingSettingUpdateResponse struct {
	Body        []byte
	ContentType string
	// **HTTP Status Code:** `200` <br>
	// Meeting recording settings returned
	RecordingSettings *RecordingSettingUpdateRecordingSettings
	StatusCode        int
	RawResponse       *http.Response
}
