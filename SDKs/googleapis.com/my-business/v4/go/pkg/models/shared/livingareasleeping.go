// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LivingAreaSleepingBedsCountExceptionEnum - Beds count exception.
type LivingAreaSleepingBedsCountExceptionEnum string

const (
	LivingAreaSleepingBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingBunkBedsCountExceptionEnum - Bunk beds count exception.
type LivingAreaSleepingBunkBedsCountExceptionEnum string

const (
	LivingAreaSleepingBunkBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingBunkBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingBunkBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingBunkBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingBunkBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingBunkBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingBunkBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingBunkBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingBunkBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingBunkBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingBunkBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingCribsCountExceptionEnum - Cribs count exception.
type LivingAreaSleepingCribsCountExceptionEnum string

const (
	LivingAreaSleepingCribsCountExceptionEnumExceptionUnspecified LivingAreaSleepingCribsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingCribsCountExceptionEnumUnderConstruction    LivingAreaSleepingCribsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingCribsCountExceptionEnumDependentOnSeason    LivingAreaSleepingCribsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingCribsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingCribsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingCribsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingCribsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingCribsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingDoubleBedsCountExceptionEnum - Double beds count exception.
type LivingAreaSleepingDoubleBedsCountExceptionEnum string

const (
	LivingAreaSleepingDoubleBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingDoubleBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingDoubleBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingDoubleBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingDoubleBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingDoubleBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingDoubleBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingDoubleBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingDoubleBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingDoubleBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingDoubleBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingFeatherPillowsExceptionEnum - Feather pillows exception.
type LivingAreaSleepingFeatherPillowsExceptionEnum string

const (
	LivingAreaSleepingFeatherPillowsExceptionEnumExceptionUnspecified LivingAreaSleepingFeatherPillowsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingFeatherPillowsExceptionEnumUnderConstruction    LivingAreaSleepingFeatherPillowsExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingFeatherPillowsExceptionEnumDependentOnSeason    LivingAreaSleepingFeatherPillowsExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingFeatherPillowsExceptionEnumDependentOnDayOfWeek LivingAreaSleepingFeatherPillowsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingFeatherPillowsExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingFeatherPillowsExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingFeatherPillowsExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingHypoallergenicBeddingExceptionEnum - Hypoallergenic bedding exception.
type LivingAreaSleepingHypoallergenicBeddingExceptionEnum string

const (
	LivingAreaSleepingHypoallergenicBeddingExceptionEnumExceptionUnspecified LivingAreaSleepingHypoallergenicBeddingExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingHypoallergenicBeddingExceptionEnumUnderConstruction    LivingAreaSleepingHypoallergenicBeddingExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingHypoallergenicBeddingExceptionEnumDependentOnSeason    LivingAreaSleepingHypoallergenicBeddingExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingHypoallergenicBeddingExceptionEnumDependentOnDayOfWeek LivingAreaSleepingHypoallergenicBeddingExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingHypoallergenicBeddingExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingHypoallergenicBeddingExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingHypoallergenicBeddingExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingKingBedsCountExceptionEnum - King beds count exception.
type LivingAreaSleepingKingBedsCountExceptionEnum string

const (
	LivingAreaSleepingKingBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingKingBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingKingBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingKingBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingKingBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingKingBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingKingBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingKingBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingKingBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingKingBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingKingBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingMemoryFoamPillowsExceptionEnum - Memory foam pillows exception.
type LivingAreaSleepingMemoryFoamPillowsExceptionEnum string

const (
	LivingAreaSleepingMemoryFoamPillowsExceptionEnumExceptionUnspecified LivingAreaSleepingMemoryFoamPillowsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingMemoryFoamPillowsExceptionEnumUnderConstruction    LivingAreaSleepingMemoryFoamPillowsExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingMemoryFoamPillowsExceptionEnumDependentOnSeason    LivingAreaSleepingMemoryFoamPillowsExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingMemoryFoamPillowsExceptionEnumDependentOnDayOfWeek LivingAreaSleepingMemoryFoamPillowsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingMemoryFoamPillowsExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingMemoryFoamPillowsExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingMemoryFoamPillowsExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingOtherBedsCountExceptionEnum - Other beds count exception.
type LivingAreaSleepingOtherBedsCountExceptionEnum string

const (
	LivingAreaSleepingOtherBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingOtherBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingOtherBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingOtherBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingOtherBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingOtherBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingOtherBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingOtherBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingOtherBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingOtherBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingOtherBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingQueenBedsCountExceptionEnum - Queen beds count exception.
type LivingAreaSleepingQueenBedsCountExceptionEnum string

const (
	LivingAreaSleepingQueenBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingQueenBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingQueenBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingQueenBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingQueenBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingQueenBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingQueenBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingQueenBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingQueenBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingQueenBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingQueenBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingRollAwayBedsCountExceptionEnum - Roll away beds count exception.
type LivingAreaSleepingRollAwayBedsCountExceptionEnum string

const (
	LivingAreaSleepingRollAwayBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingRollAwayBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingRollAwayBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingRollAwayBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingRollAwayBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingRollAwayBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingRollAwayBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingRollAwayBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingRollAwayBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingRollAwayBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingRollAwayBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum - Single or twin beds count exception.
type LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum string

const (
	LivingAreaSleepingSingleOrTwinBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingSingleOrTwinBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingSingleOrTwinBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingSingleOrTwinBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingSofaBedsCountExceptionEnum - Sofa beds count exception.
type LivingAreaSleepingSofaBedsCountExceptionEnum string

const (
	LivingAreaSleepingSofaBedsCountExceptionEnumExceptionUnspecified LivingAreaSleepingSofaBedsCountExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingSofaBedsCountExceptionEnumUnderConstruction    LivingAreaSleepingSofaBedsCountExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingSofaBedsCountExceptionEnumDependentOnSeason    LivingAreaSleepingSofaBedsCountExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingSofaBedsCountExceptionEnumDependentOnDayOfWeek LivingAreaSleepingSofaBedsCountExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingSofaBedsCountExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingSofaBedsCountExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingSofaBedsCountExceptionEnum: %s", s)
	}
}

// LivingAreaSleepingSyntheticPillowsExceptionEnum - Synthetic pillows exception.
type LivingAreaSleepingSyntheticPillowsExceptionEnum string

const (
	LivingAreaSleepingSyntheticPillowsExceptionEnumExceptionUnspecified LivingAreaSleepingSyntheticPillowsExceptionEnum = "EXCEPTION_UNSPECIFIED"
	LivingAreaSleepingSyntheticPillowsExceptionEnumUnderConstruction    LivingAreaSleepingSyntheticPillowsExceptionEnum = "UNDER_CONSTRUCTION"
	LivingAreaSleepingSyntheticPillowsExceptionEnumDependentOnSeason    LivingAreaSleepingSyntheticPillowsExceptionEnum = "DEPENDENT_ON_SEASON"
	LivingAreaSleepingSyntheticPillowsExceptionEnumDependentOnDayOfWeek LivingAreaSleepingSyntheticPillowsExceptionEnum = "DEPENDENT_ON_DAY_OF_WEEK"
)

func (e *LivingAreaSleepingSyntheticPillowsExceptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCEPTION_UNSPECIFIED":
		fallthrough
	case "UNDER_CONSTRUCTION":
		fallthrough
	case "DEPENDENT_ON_SEASON":
		fallthrough
	case "DEPENDENT_ON_DAY_OF_WEEK":
		*e = LivingAreaSleepingSyntheticPillowsExceptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LivingAreaSleepingSyntheticPillowsExceptionEnum: %s", s)
	}
}

// LivingAreaSleeping - Information about sleeping features in the living area.
type LivingAreaSleeping struct {
	// Beds count. The number of permanent beds present in a guestroom. Does not include rollaway beds, cribs or sofabeds.
	BedsCount *int `json:"bedsCount,omitempty"`
	// Beds count exception.
	BedsCountException *LivingAreaSleepingBedsCountExceptionEnum `json:"bedsCountException,omitempty"`
	// Bunk beds count. The number of furniture pieces in which one framed mattress is fixed directly above another by means of a physical frame. This allows one person(s) to sleep in the bottom bunk and one person(s) to sleep in the top bunk. Also known as double decker bed.
	BunkBedsCount *int `json:"bunkBedsCount,omitempty"`
	// Bunk beds count exception.
	BunkBedsCountException *LivingAreaSleepingBunkBedsCountExceptionEnum `json:"bunkBedsCountException,omitempty"`
	// Cribs count. The number of small beds for an infant or toddler that the guestroom can obtain. The bed is surrounded by a high railing to prevent the child from falling or climbing out of the bed
	CribsCount *int `json:"cribsCount,omitempty"`
	// Cribs count exception.
	CribsCountException *LivingAreaSleepingCribsCountExceptionEnum `json:"cribsCountException,omitempty"`
	// Double beds count. The number of medium beds measuring 53"W x 75"L (135cm x 191cm). Also known as full size bed.
	DoubleBedsCount *int `json:"doubleBedsCount,omitempty"`
	// Double beds count exception.
	DoubleBedsCountException *LivingAreaSleepingDoubleBedsCountExceptionEnum `json:"doubleBedsCountException,omitempty"`
	// Feather pillows. The option for guests to obtain bed pillows that are stuffed with the feathers and down of ducks or geese.
	FeatherPillows *bool `json:"featherPillows,omitempty"`
	// Feather pillows exception.
	FeatherPillowsException *LivingAreaSleepingFeatherPillowsExceptionEnum `json:"featherPillowsException,omitempty"`
	// Hypoallergenic bedding. Bedding such as linens, pillows, mattress covers and/or mattresses that are made of materials known to be resistant to allergens such as mold, dust and dander.
	HypoallergenicBedding *bool `json:"hypoallergenicBedding,omitempty"`
	// Hypoallergenic bedding exception.
	HypoallergenicBeddingException *LivingAreaSleepingHypoallergenicBeddingExceptionEnum `json:"hypoallergenicBeddingException,omitempty"`
	// King beds count. The number of large beds measuring 76"W x 80"L (193cm x 102cm). Most often meant to accompany two people. Includes California king and super king.
	KingBedsCount *int `json:"kingBedsCount,omitempty"`
	// King beds count exception.
	KingBedsCountException *LivingAreaSleepingKingBedsCountExceptionEnum `json:"kingBedsCountException,omitempty"`
	// Memory foam pillows. The option for guests to obtain bed pillows that are stuffed with a man-made foam that responds to body heat by conforming to the body closely, and then recovers its shape when the pillow cools down.
	MemoryFoamPillows *bool `json:"memoryFoamPillows,omitempty"`
	// Memory foam pillows exception.
	MemoryFoamPillowsException *LivingAreaSleepingMemoryFoamPillowsExceptionEnum `json:"memoryFoamPillowsException,omitempty"`
	// Other beds count. The number of beds that are not standard mattress and boxspring setups such as Japanese tatami mats, trundle beds, air mattresses and cots.
	OtherBedsCount *int `json:"otherBedsCount,omitempty"`
	// Other beds count exception.
	OtherBedsCountException *LivingAreaSleepingOtherBedsCountExceptionEnum `json:"otherBedsCountException,omitempty"`
	// Queen beds count. The number of medium-large beds measuring 60"W x 80"L (152cm x 102cm).
	QueenBedsCount *int `json:"queenBedsCount,omitempty"`
	// Queen beds count exception.
	QueenBedsCountException *LivingAreaSleepingQueenBedsCountExceptionEnum `json:"queenBedsCountException,omitempty"`
	// Roll away beds count. The number of mattresses on wheeled frames that can be folded in half and rolled away for easy storage that the guestroom can obtain upon request.
	RollAwayBedsCount *int `json:"rollAwayBedsCount,omitempty"`
	// Roll away beds count exception.
	RollAwayBedsCountException *LivingAreaSleepingRollAwayBedsCountExceptionEnum `json:"rollAwayBedsCountException,omitempty"`
	// Single or twin count beds. The number of smaller beds measuring 38"W x 75"L (97cm x 191cm) that can accommodate one adult.
	SingleOrTwinBedsCount *int `json:"singleOrTwinBedsCount,omitempty"`
	// Single or twin beds count exception.
	SingleOrTwinBedsCountException *LivingAreaSleepingSingleOrTwinBedsCountExceptionEnum `json:"singleOrTwinBedsCountException,omitempty"`
	// Sofa beds count. The number of specially designed sofas that can be made to serve as a bed by lowering its hinged upholstered back to horizontal position or by pulling out a concealed mattress.
	SofaBedsCount *int `json:"sofaBedsCount,omitempty"`
	// Sofa beds count exception.
	SofaBedsCountException *LivingAreaSleepingSofaBedsCountExceptionEnum `json:"sofaBedsCountException,omitempty"`
	// Synthetic pillows. The option for guests to obtain bed pillows stuffed with polyester material crafted to reproduce the feel of a pillow stuffed with down and feathers.
	SyntheticPillows *bool `json:"syntheticPillows,omitempty"`
	// Synthetic pillows exception.
	SyntheticPillowsException *LivingAreaSleepingSyntheticPillowsExceptionEnum `json:"syntheticPillowsException,omitempty"`
}
