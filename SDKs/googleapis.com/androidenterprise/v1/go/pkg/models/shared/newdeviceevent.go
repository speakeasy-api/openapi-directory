// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NewDeviceEventManagementTypeEnum - Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations. Possible values include: - "managedDevice", a device where the DPC is set as device owner, - "managedProfile", a device where the DPC is set as profile owner.
type NewDeviceEventManagementTypeEnum string

const (
	NewDeviceEventManagementTypeEnumManagedDevice  NewDeviceEventManagementTypeEnum = "managedDevice"
	NewDeviceEventManagementTypeEnumManagedProfile NewDeviceEventManagementTypeEnum = "managedProfile"
)

func (e *NewDeviceEventManagementTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "managedDevice":
		fallthrough
	case "managedProfile":
		*e = NewDeviceEventManagementTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NewDeviceEventManagementTypeEnum: %s", s)
	}
}

// NewDeviceEvent - An event generated when a new device is ready to be managed.
type NewDeviceEvent struct {
	// The Android ID of the device. This field will always be present.
	DeviceID *string `json:"deviceId,omitempty"`
	// Policy app on the device.
	DpcPackageName *string `json:"dpcPackageName,omitempty"`
	// Identifies the extent to which the device is controlled by an Android EMM in various deployment configurations. Possible values include: - "managedDevice", a device where the DPC is set as device owner, - "managedProfile", a device where the DPC is set as profile owner.
	ManagementType *NewDeviceEventManagementTypeEnum `json:"managementType,omitempty"`
	// The ID of the user. This field will always be present.
	UserID *string `json:"userId,omitempty"`
}
