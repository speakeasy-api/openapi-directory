/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Data supporting fec.gov's presidential map.
 *
 * @remarks
 *
 *  For more information about the presidential map data available to download from fec.gov, please visit: https://www.fec.gov/campaign-finance-data/presidential-map-data/
 */
export class Presidential {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   *
   * Net receipts per candidate.
   *
   * Filter with `contributor_state='US'` for national totals
   *
   */
  getPresidentialContributionsByCandidate(
    req: operations.GetPresidentialContributionsByCandidateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPresidentialContributionsByCandidateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPresidentialContributionsByCandidateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/presidential/contributions/by_candidate/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPresidentialContributionsByCandidateResponse =
        new operations.GetPresidentialContributionsByCandidateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.presidentialByCandidatePage = utils.objectToClass(
              httpRes?.data,
              shared.PresidentialByCandidatePage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *
   * Contribution receipts by size per candidate.
   *
   * Filter by candidate_id, election_year and/or size
   *
   */
  getPresidentialContributionsBySize(
    req: operations.GetPresidentialContributionsBySizeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPresidentialContributionsBySizeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPresidentialContributionsBySizeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/presidential/contributions/by_size/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPresidentialContributionsBySizeResponse =
        new operations.GetPresidentialContributionsBySizeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.presidentialBySizePage = utils.objectToClass(
              httpRes?.data,
              shared.PresidentialBySizePage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *
   * Contribution receipts by state per candidate.
   *
   * Filter by candidate_id and/or election_year
   *
   */
  getPresidentialContributionsByState(
    req: operations.GetPresidentialContributionsByStateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPresidentialContributionsByStateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPresidentialContributionsByStateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/presidential/contributions/by_state/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPresidentialContributionsByStateResponse =
        new operations.GetPresidentialContributionsByStateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.presidentialByStatePage = utils.objectToClass(
              httpRes?.data,
              shared.PresidentialByStatePage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *
   * Coverage end date per candidate.
   *
   * Filter by candidate_id and/or election_year
   *
   */
  getPresidentialCoverageEndDate(
    req: operations.GetPresidentialCoverageEndDateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPresidentialCoverageEndDateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPresidentialCoverageEndDateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/presidential/coverage_end_date/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPresidentialCoverageEndDateResponse =
        new operations.GetPresidentialCoverageEndDateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.presidentialCoveragePage = utils.objectToClass(
              httpRes?.data,
              shared.PresidentialCoveragePage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   *
   * Financial summary per candidate.
   *
   * Filter by candidate_id and/or election_year
   *
   */
  getPresidentialFinancialSummary(
    req: operations.GetPresidentialFinancialSummaryRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPresidentialFinancialSummaryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPresidentialFinancialSummaryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/presidential/financial_summary/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPresidentialFinancialSummaryResponse =
        new operations.GetPresidentialFinancialSummaryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.presidentialSummaryPage = utils.objectToClass(
              httpRes?.data,
              shared.PresidentialSummaryPage
            );
          }
          break;
      }

      return res;
    });
  }
}
