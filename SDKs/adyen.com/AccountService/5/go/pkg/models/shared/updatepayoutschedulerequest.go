// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdatePayoutScheduleRequestActionEnum - Direction on how to handle any payouts that have already been scheduled.
// Permitted values:
// * `CLOSE` will close the existing batch of payouts.
// * `UPDATE` will reschedule the existing batch to the new schedule.
// * `NOTHING` (**default**) will allow the payout to proceed.
type UpdatePayoutScheduleRequestActionEnum string

const (
	UpdatePayoutScheduleRequestActionEnumClose   UpdatePayoutScheduleRequestActionEnum = "CLOSE"
	UpdatePayoutScheduleRequestActionEnumNothing UpdatePayoutScheduleRequestActionEnum = "NOTHING"
	UpdatePayoutScheduleRequestActionEnumUpdate  UpdatePayoutScheduleRequestActionEnum = "UPDATE"
)

func (e UpdatePayoutScheduleRequestActionEnum) ToPointer() *UpdatePayoutScheduleRequestActionEnum {
	return &e
}

func (e *UpdatePayoutScheduleRequestActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CLOSE":
		fallthrough
	case "NOTHING":
		fallthrough
	case "UPDATE":
		*e = UpdatePayoutScheduleRequestActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePayoutScheduleRequestActionEnum: %v", v)
	}
}

// UpdatePayoutScheduleRequestScheduleEnum - The payout schedule to which the account is to be updated.
// Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`.
// `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
type UpdatePayoutScheduleRequestScheduleEnum string

const (
	UpdatePayoutScheduleRequestScheduleEnumBiweeklyOn1StAnd15ThAtMidnight UpdatePayoutScheduleRequestScheduleEnum = "BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT"
	UpdatePayoutScheduleRequestScheduleEnumDaily                          UpdatePayoutScheduleRequestScheduleEnum = "DAILY"
	UpdatePayoutScheduleRequestScheduleEnumDailyAu                        UpdatePayoutScheduleRequestScheduleEnum = "DAILY_AU"
	UpdatePayoutScheduleRequestScheduleEnumDailyEu                        UpdatePayoutScheduleRequestScheduleEnum = "DAILY_EU"
	UpdatePayoutScheduleRequestScheduleEnumDailySg                        UpdatePayoutScheduleRequestScheduleEnum = "DAILY_SG"
	UpdatePayoutScheduleRequestScheduleEnumDailyUs                        UpdatePayoutScheduleRequestScheduleEnum = "DAILY_US"
	UpdatePayoutScheduleRequestScheduleEnumHold                           UpdatePayoutScheduleRequestScheduleEnum = "HOLD"
	UpdatePayoutScheduleRequestScheduleEnumMonthly                        UpdatePayoutScheduleRequestScheduleEnum = "MONTHLY"
	UpdatePayoutScheduleRequestScheduleEnumWeekly                         UpdatePayoutScheduleRequestScheduleEnum = "WEEKLY"
	UpdatePayoutScheduleRequestScheduleEnumWeeklyMonToFriAu               UpdatePayoutScheduleRequestScheduleEnum = "WEEKLY_MON_TO_FRI_AU"
	UpdatePayoutScheduleRequestScheduleEnumWeeklyMonToFriEu               UpdatePayoutScheduleRequestScheduleEnum = "WEEKLY_MON_TO_FRI_EU"
	UpdatePayoutScheduleRequestScheduleEnumWeeklyMonToFriUs               UpdatePayoutScheduleRequestScheduleEnum = "WEEKLY_MON_TO_FRI_US"
	UpdatePayoutScheduleRequestScheduleEnumWeeklyOnTueFriMidnight         UpdatePayoutScheduleRequestScheduleEnum = "WEEKLY_ON_TUE_FRI_MIDNIGHT"
	UpdatePayoutScheduleRequestScheduleEnumWeeklySunToThuAu               UpdatePayoutScheduleRequestScheduleEnum = "WEEKLY_SUN_TO_THU_AU"
	UpdatePayoutScheduleRequestScheduleEnumWeeklySunToThuUs               UpdatePayoutScheduleRequestScheduleEnum = "WEEKLY_SUN_TO_THU_US"
)

func (e UpdatePayoutScheduleRequestScheduleEnum) ToPointer() *UpdatePayoutScheduleRequestScheduleEnum {
	return &e
}

func (e *UpdatePayoutScheduleRequestScheduleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT":
		fallthrough
	case "DAILY":
		fallthrough
	case "DAILY_AU":
		fallthrough
	case "DAILY_EU":
		fallthrough
	case "DAILY_SG":
		fallthrough
	case "DAILY_US":
		fallthrough
	case "HOLD":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "WEEKLY_MON_TO_FRI_AU":
		fallthrough
	case "WEEKLY_MON_TO_FRI_EU":
		fallthrough
	case "WEEKLY_MON_TO_FRI_US":
		fallthrough
	case "WEEKLY_ON_TUE_FRI_MIDNIGHT":
		fallthrough
	case "WEEKLY_SUN_TO_THU_AU":
		fallthrough
	case "WEEKLY_SUN_TO_THU_US":
		*e = UpdatePayoutScheduleRequestScheduleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatePayoutScheduleRequestScheduleEnum: %v", v)
	}
}

type UpdatePayoutScheduleRequest struct {
	// Direction on how to handle any payouts that have already been scheduled.
	// Permitted values:
	// * `CLOSE` will close the existing batch of payouts.
	// * `UPDATE` will reschedule the existing batch to the new schedule.
	// * `NOTHING` (**default**) will allow the payout to proceed.
	Action *UpdatePayoutScheduleRequestActionEnum `json:"action,omitempty"`
	// The reason for the payout schedule update.
	// > This field is required when the `schedule` parameter is set to `HOLD`.
	Reason *string `json:"reason,omitempty"`
	// The payout schedule to which the account is to be updated.
	// Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`.
	// `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
	Schedule UpdatePayoutScheduleRequestScheduleEnum `json:"schedule"`
}
