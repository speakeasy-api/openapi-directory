"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import properties as shared_properties
from ..shared import statistics as shared_statistics
from ..shared import user_information as shared_user_information
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class PostEntitiesRequestBodyDocumentTypeEnum(str, Enum):
    r"""Tipo de documento, requerido según la entidad. Si es requerido o no, está indicado en el listado de entidades. Ver definición."""
    NIF = 'NIF'
    PASAPORTE = 'Pasaporte'
    TARJETA_DE_RESIDENCIA = 'Tarjeta de residencia'


@dataclasses.dataclass
class PostEntitiesRequestBody:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'api_key' }})
    r"""Identifica al cliente en el servicio"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'code' }})
    r"""Nombre de la entidad. El listado completo está disponible con GET"""  
    contract_code: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'contract_code' }})
    r"""Solo necesario cuando el usuario puede acceder a más de un contrato. El listado de contratos disponibles se obtiene al realizar una conexión con un usuario con opción a trabajar con varios contratos en su entidad (que al hacer login en su banca online ve como primera opción una pantalla de selección de contratos) y cuya llamada a la API no se le ha especificado un valor a contract_code"""  
    document_type: Optional[PostEntitiesRequestBodyDocumentTypeEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'document_type' }})
    r"""Tipo de documento, requerido según la entidad. Si es requerido o no, está indicado en el listado de entidades. Ver definición."""  
    otp: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'OTP' }})
    r"""Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación, si el tipo de desafío es OTP. Requiere la clave que la entidad le ha enviado al usario final"""  
    password: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'password' }})
    r"""Contraseña"""  
    second_password: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'second_password' }})
    r"""Segunda contraseña, requerida según la entidad."""  
    session: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SESSION' }})
    r"""Solo necesario cuando se esté completando la seguda petición de un login con 2 factores de autenticación. Requiere el valor de SESSION obtenido en la primera petición"""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'token' }})
    r"""Valor para credenciales custodiadas, tokenizadas previamente mediante una llamada a este método con el valor de tokenize=true. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login"""  
    tokenize: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'tokenize' }})
    r"""Indica si Wealth Reader debe custodiar los credenciales, de tal manera que incluído en el body de respuesta estará un token que permite conectar con la entidad sin necesidad de conocer los credenciales: document_type, user, password, second_password, contract_code"""  
    user: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'user' }})
    r"""Usuario. Están disponibles los siguientes usuarios Mock: MOCKDATA, respuesta OK; MOCKOTP, respuesta con desafío OTP; MOCKLOGINKO, respuesta con error de login"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON4Payload:
    
    accounts: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})
    r"""Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2"""  
    cards: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cards'), 'exclude': lambda f: f is None }})
    r"""Tarjetas de crédito, débito y prepago"""  
    portfolios: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios'), 'exclude': lambda f: f is None }})
    r"""Carteras de acciones, fondos y planes de pensiones"""  
    properties: Optional[shared_properties.Properties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Activos inmobiliarios"""  
    user_information: Optional[shared_user_information.UserInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_information'), 'exclude': lambda f: f is None }})
    r"""Información relativa a la persona que hace login"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON4:
    
    statistics: shared_statistics.Statistics = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics') }})  
    success: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success') }})  
    payload: Optional[PostEntities200ApplicationJSON4Payload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})  
    properties: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON3Payload:
    
    accounts: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})
    r"""Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2"""  
    cards: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cards'), 'exclude': lambda f: f is None }})
    r"""Tarjetas de crédito, débito y prepago"""  
    portfolios: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios'), 'exclude': lambda f: f is None }})
    r"""Carteras de acciones, fondos y planes de pensiones"""  
    properties: Optional[shared_properties.Properties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Activos inmobiliarios"""  
    user_information: Optional[shared_user_information.UserInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_information'), 'exclude': lambda f: f is None }})
    r"""Información relativa a la persona que hace login"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON3:
    
    statistics: shared_statistics.Statistics = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics') }})  
    success: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success') }})  
    cards: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cards'), 'exclude': lambda f: f is None }})  
    payload: Optional[PostEntities200ApplicationJSON3Payload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON2Payload:
    
    accounts: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})
    r"""Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2"""  
    cards: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cards'), 'exclude': lambda f: f is None }})
    r"""Tarjetas de crédito, débito y prepago"""  
    portfolios: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios'), 'exclude': lambda f: f is None }})
    r"""Carteras de acciones, fondos y planes de pensiones"""  
    properties: Optional[shared_properties.Properties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Activos inmobiliarios"""  
    user_information: Optional[shared_user_information.UserInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_information'), 'exclude': lambda f: f is None }})
    r"""Información relativa a la persona que hace login"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON2:
    
    statistics: shared_statistics.Statistics = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics') }})  
    success: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success') }})  
    accounts: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})  
    payload: Optional[PostEntities200ApplicationJSON2Payload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON1Payload:
    
    accounts: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})
    r"""Cuentas bancarias. En cuentas europeas, solamente activado cuando el cliente de Wealth Reader cuenta con licencia PSD2"""  
    cards: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cards'), 'exclude': lambda f: f is None }})
    r"""Tarjetas de crédito, débito y prepago"""  
    portfolios: Optional[list[dict[str, Any]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios'), 'exclude': lambda f: f is None }})
    r"""Carteras de acciones, fondos y planes de pensiones"""  
    properties: Optional[shared_properties.Properties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Activos inmobiliarios"""  
    user_information: Optional[shared_user_information.UserInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_information'), 'exclude': lambda f: f is None }})
    r"""Información relativa a la persona que hace login"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostEntities200ApplicationJSON1:
    
    statistics: shared_statistics.Statistics = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statistics') }})  
    success: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success') }})  
    payload: Optional[PostEntities200ApplicationJSON1Payload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payload'), 'exclude': lambda f: f is None }})  
    portfolios: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostEntitiesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    entity_data: Optional[list[Any]] = dataclasses.field(default=None)
    r"""datos obtenidos de la entidad"""  
    errors: Optional[list[shared_error.Error]] = dataclasses.field(default=None)
    r"""error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    