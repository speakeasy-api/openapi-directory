<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Currencies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get historical prices for requested currency pairs
     * 
     * Historical OHLC data for the specified period and interval size
     * 
     * The combination of the interval parameter and start and end dates can result in results
     * being truncated to conform to result size limits. See comments on interval parameter for details on valid interval values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrenciesHistoryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrenciesHistoryGETResponse
     */
	public function currenciesHistoryGET(
        \OpenAPI\OpenAPI\Models\Operations\CurrenciesHistoryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrenciesHistoryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Currencies/history');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CurrenciesHistoryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrenciesHistoryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->intervalCollectionResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\IntervalCollectionResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get latest mid rate for requested currency pairs
     * 
     * Current Mid Rate
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrenciesRateGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrenciesRateGETResponse
     */
	public function currenciesRateGET(
        \OpenAPI\OpenAPI\Models\Operations\CurrenciesRateGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrenciesRateGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Currencies/rate');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CurrenciesRateGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrenciesRateGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->rateResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RateResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get latest Summary for requested currency pairs
     * 
     * Current and daily summary information combined into a single quote
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrenciesSummaryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrenciesSummaryGETResponse
     */
	public function currenciesSummaryGET(
        \OpenAPI\OpenAPI\Models\Operations\CurrenciesSummaryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrenciesSummaryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Currencies/summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CurrenciesSummaryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrenciesSummaryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->summaryResponses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\SummaryResponse>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get list of currency pairs supported by the history endpoint
     * 
     * Only the currency pairs in the direction noted can be used with the history endpoint.
     * For example: USD/CAD is not the same as CAD/USD
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesHistoryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesHistoryGETResponse
     */
	public function currenciesSupportedCurrenciesHistoryGET(
        \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesHistoryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesHistoryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Currencies/history/supported');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesHistoryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesHistoryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->currenciesSupportedCurrenciesHistoryGET200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get list of currencies supported by the rate endpoint
     * 
     * Any of the currencies in this list can be paired with any other currency in this list when supplied to the Rate endpoint.
     * For example: USD/CAD,CAD/USD,USD/EUR,EUR/CAD
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesRateGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesRateGETResponse
     */
	public function currenciesSupportedCurrenciesRateGET(
        \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesRateGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesRateGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Currencies/rate/supported');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesRateGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesRateGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->currenciesSupportedCurrenciesRateGET200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Get list of currency pairs supported by the Summary endpoint
     * 
     * Only the currency pairs in the direction noted can be used with the Summary endpoint.
     * For example: USD/CAD is not the same as CAD/USD
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesSummaryGETRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesSummaryGETResponse
     */
	public function currenciesSupportedCurrenciesSummaryGET(
        \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesSummaryGETRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesSummaryGETResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/Currencies/summary/supported');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesSummaryGETRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CurrenciesSupportedCurrenciesSummaryGETResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->currenciesSupportedCurrenciesSummaryGET200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}