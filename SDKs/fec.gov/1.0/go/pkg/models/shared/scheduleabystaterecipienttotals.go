// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

type ScheduleAByStateRecipientTotals struct {
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType *string `json:"committee_type,omitempty"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeTypeFull *string `json:"committee_type_full,omitempty"`
	// Number of records making up the total.
	Count *int `json:"count,omitempty"`
	// Filter records to only those that are applicable to a given two-year
	// period. This cycle follows the traditional House election cycle and
	// subdivides the presidential and Senate elections into comparable
	// two-year blocks. The cycle begins with an odd year and is named for its
	// ending, even year.
	//
	Cycle *int `json:"cycle,omitempty"`
	// US state or territory
	State *string `json:"state,omitempty"`
	// US state or territory
	StateFull *string `json:"state_full,omitempty"`
	// The calculated total.
	Total *float64 `json:"total,omitempty"`
}
