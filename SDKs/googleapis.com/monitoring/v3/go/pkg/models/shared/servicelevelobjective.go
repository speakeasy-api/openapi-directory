// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServiceLevelObjectiveCalendarPeriodEnum - A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
type ServiceLevelObjectiveCalendarPeriodEnum string

const (
	ServiceLevelObjectiveCalendarPeriodEnumCalendarPeriodUnspecified ServiceLevelObjectiveCalendarPeriodEnum = "CALENDAR_PERIOD_UNSPECIFIED"
	ServiceLevelObjectiveCalendarPeriodEnumDay                       ServiceLevelObjectiveCalendarPeriodEnum = "DAY"
	ServiceLevelObjectiveCalendarPeriodEnumWeek                      ServiceLevelObjectiveCalendarPeriodEnum = "WEEK"
	ServiceLevelObjectiveCalendarPeriodEnumFortnight                 ServiceLevelObjectiveCalendarPeriodEnum = "FORTNIGHT"
	ServiceLevelObjectiveCalendarPeriodEnumMonth                     ServiceLevelObjectiveCalendarPeriodEnum = "MONTH"
	ServiceLevelObjectiveCalendarPeriodEnumQuarter                   ServiceLevelObjectiveCalendarPeriodEnum = "QUARTER"
	ServiceLevelObjectiveCalendarPeriodEnumHalf                      ServiceLevelObjectiveCalendarPeriodEnum = "HALF"
	ServiceLevelObjectiveCalendarPeriodEnumYear                      ServiceLevelObjectiveCalendarPeriodEnum = "YEAR"
)

func (e *ServiceLevelObjectiveCalendarPeriodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CALENDAR_PERIOD_UNSPECIFIED":
		fallthrough
	case "DAY":
		fallthrough
	case "WEEK":
		fallthrough
	case "FORTNIGHT":
		fallthrough
	case "MONTH":
		fallthrough
	case "QUARTER":
		fallthrough
	case "HALF":
		fallthrough
	case "YEAR":
		*e = ServiceLevelObjectiveCalendarPeriodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ServiceLevelObjectiveCalendarPeriodEnum: %s", s)
	}
}

// ServiceLevelObjective - A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include "99% of requests in each rolling week have latency below 200 milliseconds" or "99.5% of requests in each calendar month return successfully."
type ServiceLevelObjective struct {
	// A calendar period, semantically "since the start of the current ". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.
	CalendarPeriod *ServiceLevelObjectiveCalendarPeriodEnum `json:"calendarPeriod,omitempty"`
	// Name used for UI elements listing this SLO.
	DisplayName *string `json:"displayName,omitempty"`
	// The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.
	Goal *float64 `json:"goal,omitempty"`
	// Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
	Name *string `json:"name,omitempty"`
	// A rolling time period, semantically "in the past ". Must be an integer multiple of 1 day no larger than 30 days.
	RollingPeriod *string `json:"rollingPeriod,omitempty"`
	// A Service-Level Indicator (SLI) describes the "performance" of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a "custom" SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 <= performance <= 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
	ServiceLevelIndicator *ServiceLevelIndicator `json:"serviceLevelIndicator,omitempty"`
	// Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.
	UserLabels map[string]string `json:"userLabels,omitempty"`
}
