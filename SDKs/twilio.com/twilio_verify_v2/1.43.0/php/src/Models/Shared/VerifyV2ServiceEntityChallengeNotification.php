<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VerifyV2ServiceEntityChallengeNotification - Created
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VerifyV2ServiceEntityChallengeNotification
{
    /**
     * The unique SID identifier of the Account.
     * 
     * @var ?string $accountSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('account_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountSid = null;
    
    /**
     * The unique SID identifier of the Challenge.
     * 
     * @var ?string $challengeSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('challenge_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $challengeSid = null;
    
    /**
     * The date that this Notification was created, given in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     * 
     * @var ?\DateTime $dateCreated
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_created')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $dateCreated = null;
    
    /**
     * The unique SID identifier of the Entity.
     * 
     * @var ?string $entitySid
     */
	#[\JMS\Serializer\Annotation\SerializedName('entity_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $entitySid = null;
    
    /**
     * Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
     * 
     * @var ?string $identity
     */
	#[\JMS\Serializer\Annotation\SerializedName('identity')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $identity = null;
    
    /**
     * The priority of the notification. For `push` Challenges it's always `high` which sends the notification immediately, and can wake up a sleeping device.
     * 
     * @var ?string $priority
     */
	#[\JMS\Serializer\Annotation\SerializedName('priority')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $priority = null;
    
    /**
     * The unique SID identifier of the Service.
     * 
     * @var ?string $serviceSid
     */
	#[\JMS\Serializer\Annotation\SerializedName('service_sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $serviceSid = null;
    
    /**
     * A 34 character string that uniquely identifies this Notification.
     * 
     * @var ?string $sid
     */
	#[\JMS\Serializer\Annotation\SerializedName('sid')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $sid = null;
    
    /**
     * How long, in seconds, the notification is valid. Max: 5 minutes
     * 
     * @var ?int $ttl
     */
	#[\JMS\Serializer\Annotation\SerializedName('ttl')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $ttl = null;
    
	public function __construct()
	{
		$this->accountSid = null;
		$this->challengeSid = null;
		$this->dateCreated = null;
		$this->entitySid = null;
		$this->identity = null;
		$this->priority = null;
		$this->serviceSid = null;
		$this->sid = null;
		$this->ttl = null;
	}
}
