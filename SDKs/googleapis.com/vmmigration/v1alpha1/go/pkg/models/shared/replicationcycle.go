// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReplicationCycleStateEnum - State of the ReplicationCycle.
type ReplicationCycleStateEnum string

const (
	ReplicationCycleStateEnumStateUnspecified ReplicationCycleStateEnum = "STATE_UNSPECIFIED"
	ReplicationCycleStateEnumRunning          ReplicationCycleStateEnum = "RUNNING"
	ReplicationCycleStateEnumPaused           ReplicationCycleStateEnum = "PAUSED"
	ReplicationCycleStateEnumFailed           ReplicationCycleStateEnum = "FAILED"
	ReplicationCycleStateEnumSucceeded        ReplicationCycleStateEnum = "SUCCEEDED"
)

func (e ReplicationCycleStateEnum) ToPointer() *ReplicationCycleStateEnum {
	return &e
}

func (e *ReplicationCycleStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "PAUSED":
		fallthrough
	case "FAILED":
		fallthrough
	case "SUCCEEDED":
		*e = ReplicationCycleStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReplicationCycleStateEnum: %v", v)
	}
}

// ReplicationCycle - ReplicationCycle contains information about the current replication cycle status.
type ReplicationCycle struct {
	// The cycle's ordinal number.
	CycleNumber *int `json:"cycleNumber,omitempty"`
	// The time the replication cycle has ended.
	EndTime *string `json:"endTime,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// The identifier of the ReplicationCycle.
	Name *string `json:"name,omitempty"`
	// The current progress in percentage of this cycle.
	Progress *int `json:"progress,omitempty"`
	// The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.
	ProgressPercent *int `json:"progressPercent,omitempty"`
	// The time the replication cycle has started.
	StartTime *string `json:"startTime,omitempty"`
	// State of the ReplicationCycle.
	State *ReplicationCycleStateEnum `json:"state,omitempty"`
	// The cycle's steps list representing its progress.
	Steps []CycleStep `json:"steps,omitempty"`
	// The accumulated duration the replication cycle was paused.
	TotalPauseDuration *string `json:"totalPauseDuration,omitempty"`
	// Output only. Warnings that occurred during the cycle.
	Warnings []MigrationWarning `json:"warnings,omitempty"`
}

// ReplicationCycleInput - ReplicationCycle contains information about the current replication cycle status.
type ReplicationCycleInput struct {
	// The cycle's ordinal number.
	CycleNumber *int `json:"cycleNumber,omitempty"`
	// The time the replication cycle has ended.
	EndTime *string `json:"endTime,omitempty"`
	// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	Error *Status `json:"error,omitempty"`
	// The identifier of the ReplicationCycle.
	Name *string `json:"name,omitempty"`
	// The current progress in percentage of this cycle.
	Progress *int `json:"progress,omitempty"`
	// The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.
	ProgressPercent *int `json:"progressPercent,omitempty"`
	// The time the replication cycle has started.
	StartTime *string `json:"startTime,omitempty"`
	// State of the ReplicationCycle.
	State *ReplicationCycleStateEnum `json:"state,omitempty"`
	// The cycle's steps list representing its progress.
	Steps []CycleStep `json:"steps,omitempty"`
	// The accumulated duration the replication cycle was paused.
	TotalPauseDuration *string `json:"totalPauseDuration,omitempty"`
}
