<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Management 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists all accounts to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListResponse
     */
	public function analyticsManagementAccountsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementAccountsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Lists goals to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListResponse
     */
	public function analyticsManagementGoalsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementGoalsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Lists views (profiles) to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListResponse
     */
	public function analyticsManagementProfilesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementProfilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Lists advanced segments to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListResponse
     */
	public function analyticsManagementSegmentsList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/segments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementSegmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Lists web properties to which the user has access.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListResponse
     */
	public function analyticsManagementWebpropertiesList(
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/management/accounts/{accountId}/webproperties', \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AnalyticsManagementWebpropertiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}