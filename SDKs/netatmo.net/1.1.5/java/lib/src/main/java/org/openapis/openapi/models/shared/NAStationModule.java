/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class NAStationModule {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("_id")
    public String id;

    public NAStationModule withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * It contains the current battery level in percentage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("battery_percent")
    public Integer batteryPercent;

    public NAStationModule withBatteryPercent(Integer batteryPercent) {
        this.batteryPercent = batteryPercent;
        return this;
    }
    
    /**
     * It contains the current battery status. The threshold depends on the kind of module, below is the list of the different threshold to take into account according the module type.
     * "Indoor module Battery range: 6000 ... 4200" |
     * INDOOR_BATTERY_LEVEL_FULL = 5640
     * INDOOR_BATTERY_LEVEL_HIGH = 5280
     * INDOOR_BATTERY_LEVEL_MEDIUM = 4920
     * INDOOR_BATTERY_LEVEL_LOW = 4560
     * "Below 4560: very low" |
     *     
     * "Raingauge and outdoor module Battery range: 6000 ... 3600" |
     * BATTERY_LEVEL_FULL = 5500
     * BATTERY_LEVEL_HIGH = 5000
     * BATTERY_LEVEL_MEDIUM = 4500
     * BATTERY_LEVEL_LOW = 4000
     * "Below 4000: very low" |
     *     
     * "Thermostat Battery range: 4500 ... 3000" |
     * THERMOSTAT_BATTERY_LEVEL_FULL = 4100
     * THERMOSTAT_BATTERY_LEVEL_HIGH = 3600
     * THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300
     * THERMOSTAT_BATTERY_LEVEL_LOW = 3000
     * "Below 3000: very low"
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("battery_vp")
    public Integer batteryVp;

    public NAStationModule withBatteryVp(Integer batteryVp) {
        this.batteryVp = batteryVp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dashboard_data")
    public NADashboardData dashboardData;

    public NAStationModule withDashboardData(NADashboardData dashboardData) {
        this.dashboardData = dashboardData;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_type")
    public String[] dataType;

    public NAStationModule withDataType(String[] dataType) {
        this.dataType = dataType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("firmware")
    public Integer firmware;

    public NAStationModule withFirmware(Integer firmware) {
        this.firmware = firmware;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_message")
    public Integer lastMessage;

    public NAStationModule withLastMessage(Integer lastMessage) {
        this.lastMessage = lastMessage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_seen")
    public Integer lastSeen;

    public NAStationModule withLastSeen(Integer lastSeen) {
        this.lastSeen = lastSeen;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_setup")
    public Integer lastSetup;

    public NAStationModule withLastSetup(Integer lastSetup) {
        this.lastSetup = lastSetup;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("module_name")
    public String moduleName;

    public NAStationModule withModuleName(String moduleName) {
        this.moduleName = moduleName;
        return this;
    }
    
    /**
     * true when the station was seen by the Netatmo cloud within the last 4 hours
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reachable")
    public Boolean reachable;

    public NAStationModule withReachable(Boolean reachable) {
        this.reachable = reachable;
        return this;
    }
    
    /**
     * "It contains the current radio status. The different thresholds to take into account are :" |
     * RADIO_THRESHOLD_SIGNAL_LOW = 90 
     * RADIO_THRESHOLD_SIGNAL_MEDIUM = 80
     * RADIO_THRESHOLD_SIGNAL_HIGH = 70
     * RADIO_THRESHOLD_SIGNAL_FULL = 60
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rf_status")
    public Integer rfStatus;

    public NAStationModule withRfStatus(Integer rfStatus) {
        this.rfStatus = rfStatus;
        return this;
    }
    
    /**
     * Included in every device or module. It defines the type of the device/module. Its values are among :
     * NAMain : for the base station
     * NAModule1 : for the outdoor module
     * NAModule4 : for the additionnal indoor module
     * NAModule3 : for the rain gauge module
     * NAPlug : for the thermostat relay/plug
     * NATherm1 : for the thermostat module
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public NAStationModule withType(String type) {
        this.type = type;
        return this;
    }
    
    public NAStationModule(){}
}
