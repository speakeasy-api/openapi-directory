/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class FlightOffer {
    /**
     * BOOK step ONLY - If true, allows to book a PNR without pricing. Only for the source "GDS"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disablePricing")
    public Boolean disablePricing;
    public FlightOffer withDisablePricing(Boolean disablePricing) {
        this.disablePricing = disablePricing;
        return this;
    }
    
    /**
     * Id of the flight offer
     */
    @JsonProperty("id")
    public String id;
    public FlightOffer withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * If true, inform that a ticketing will be required at booking step.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instantTicketingRequired")
    public Boolean instantTicketingRequired;
    public FlightOffer withInstantTicketingRequired(Boolean instantTicketingRequired) {
        this.instantTicketingRequired = instantTicketingRequired;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itineraries")
    public FlightOfferItineraries[] itineraries;
    public FlightOffer withItineraries(FlightOfferItineraries[] itineraries) {
        this.itineraries = itineraries;
        return this;
    }
    
    /**
     * If booked on the same day as the search (with respect to timezone), this flight offer is guaranteed to be thereafter valid for ticketing until this date (included). Unspecified when it does not make sense for this flight offer (e.g. no control over ticketing once booked). YYYY-MM-DD format, e.g. 2019-06-07
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastTicketingDate")
    public String lastTicketingDate;
    public FlightOffer withLastTicketingDate(String lastTicketingDate) {
        this.lastTicketingDate = lastTicketingDate;
        return this;
    }
    
    /**
     * If true, upon completion of the booking, this pricing solution is expected to yield multiple records (a record contains booking information confirmed and stored, typically a Passenger Name Record (PNR), in the provider GDS or system)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nonHomogeneous")
    public Boolean nonHomogeneous;
    public FlightOffer withNonHomogeneous(Boolean nonHomogeneous) {
        this.nonHomogeneous = nonHomogeneous;
        return this;
    }
    
    /**
     * Number of seats bookable in a single request. Can not be higher than 9.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfBookableSeats")
    public Double numberOfBookableSeats;
    public FlightOffer withNumberOfBookableSeats(Double numberOfBookableSeats) {
        this.numberOfBookableSeats = numberOfBookableSeats;
        return this;
    }
    
    /**
     * If true, the flight offer fulfills only one originDestination and has to be combined with other oneWays to complete the whole journey.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oneWay")
    public Boolean oneWay;
    public FlightOffer withOneWay(Boolean oneWay) {
        this.oneWay = oneWay;
        return this;
    }
    
    /**
     * If true, a payment card is mandatory to book this flight offer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentCardRequired")
    public Boolean paymentCardRequired;
    public FlightOffer withPaymentCardRequired(Boolean paymentCardRequired) {
        this.paymentCardRequired = paymentCardRequired;
        return this;
    }
    
    /**
     * price information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public ExtendedPrice price;
    public FlightOffer withPrice(ExtendedPrice price) {
        this.price = price;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricingOptions")
    public FlightOfferPricingOptions pricingOptions;
    public FlightOffer withPricingOptions(FlightOfferPricingOptions pricingOptions) {
        this.pricingOptions = pricingOptions;
        return this;
    }
    
    /**
     * source of the flight offer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public FlightOfferSourceEnum source;
    public FlightOffer withSource(FlightOfferSourceEnum source) {
        this.source = source;
        return this;
    }
    
    /**
     * Fare information for each traveler/segment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("travelerPricings")
    public FlightOfferTravelerPricing[] travelerPricings;
    public FlightOffer withTravelerPricings(FlightOfferTravelerPricing[] travelerPricings) {
        this.travelerPricings = travelerPricings;
        return this;
    }
    
    /**
     * the resource name
     */
    @JsonProperty("type")
    public String type;
    public FlightOffer withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * This option ensures that the system will only consider these airlines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("validatingAirlineCodes")
    public String[] validatingAirlineCodes;
    public FlightOffer withValidatingAirlineCodes(String[] validatingAirlineCodes) {
        this.validatingAirlineCodes = validatingAirlineCodes;
        return this;
    }
    
}
