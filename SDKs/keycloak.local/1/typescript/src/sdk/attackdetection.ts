/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class AttackDetection {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Clear any user login failures for all users   This can release temporary disabled users
   */
  deleteRealmAttackDetectionBruteForceUsers(
    req: operations.DeleteRealmAttackDetectionBruteForceUsersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmAttackDetectionBruteForceUsersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteRealmAttackDetectionBruteForceUsersRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/attack-detection/brute-force/users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmAttackDetectionBruteForceUsersResponse =
        new operations.DeleteRealmAttackDetectionBruteForceUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Clear any user login failures for the user   This can release temporary disabled user
   */
  deleteRealmAttackDetectionBruteForceUsersUserId(
    req: operations.DeleteRealmAttackDetectionBruteForceUsersUserIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteRealmAttackDetectionBruteForceUsersUserIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteRealmAttackDetectionBruteForceUsersUserIdRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/attack-detection/brute-force/users/{userId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteRealmAttackDetectionBruteForceUsersUserIdResponse =
        new operations.DeleteRealmAttackDetectionBruteForceUsersUserIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          break;
      }

      return res;
    });
  }

  /**
   * Get status of a username in brute force detection
   */
  getRealmAttackDetectionBruteForceUsersUserId(
    req: operations.GetRealmAttackDetectionBruteForceUsersUserIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRealmAttackDetectionBruteForceUsersUserIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRealmAttackDetectionBruteForceUsersUserIdRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{realm}/attack-detection/brute-force/users/{userId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRealmAttackDetectionBruteForceUsersUserIdResponse =
        new operations.GetRealmAttackDetectionBruteForceUsersUserIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status >= 200 && httpRes?.status < 300:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getRealmAttackDetectionBruteForceUsersUserId2XXApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }
}
