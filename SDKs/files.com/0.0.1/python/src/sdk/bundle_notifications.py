"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BundleNotifications:
    r"""Operations about bundle_notifications"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_bundle_notifications_id(self, request: operations.DeleteBundleNotificationsIDRequest) -> operations.DeleteBundleNotificationsIDResponse:
        r"""Delete Bundle Notification
        Delete Bundle Notification
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBundleNotificationsIDRequest, base_url, '/bundle_notifications/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBundleNotificationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_bundle_notifications(self, request: operations.GetBundleNotificationsRequest) -> operations.GetBundleNotificationsResponse:
        r"""List Bundle Notifications
        List Bundle Notifications
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bundle_notifications'
        
        query_params = utils.get_query_params(operations.GetBundleNotificationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBundleNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BundleNotificationEntity]])
                res.bundle_notification_entities = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def get_bundle_notifications_id(self, request: operations.GetBundleNotificationsIDRequest) -> operations.GetBundleNotificationsIDResponse:
        r"""Show Bundle Notification
        Show Bundle Notification
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBundleNotificationsIDRequest, base_url, '/bundle_notifications/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBundleNotificationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BundleNotificationEntity])
                res.bundle_notification_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def patch_bundle_notifications_id(self, request: operations.PatchBundleNotificationsIDRequest) -> operations.PatchBundleNotificationsIDResponse:
        r"""Update Bundle Notification
        Update Bundle Notification
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchBundleNotificationsIDRequest, base_url, '/bundle_notifications/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchBundleNotificationsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BundleNotificationEntity])
                res.bundle_notification_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    def post_bundle_notifications(self, request: operations.PostBundleNotificationsRequestBody) -> operations.PostBundleNotificationsResponse:
        r"""Create Bundle Notification
        Create Bundle Notification
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bundle_notifications'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBundleNotificationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BundleNotificationEntity])
                res.bundle_notification_entity = out
        elif http_res.status_code in [400, 401, 403, 404, 405, 409, 412, 422, 423, 429]:
            pass

        return res

    