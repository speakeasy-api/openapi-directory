/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * FileEntity - List Folders by path
 */
public class FileEntity {
    /**
     * File CRC32 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crc32")
    public String crc32;

    public FileEntity withCrc32(String crc32) {
        this.crc32 = crc32;
        return this;
    }
    
    /**
     * File created date/time
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public FileEntity withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * File/Folder display name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display_name")
    public String displayName;

    public FileEntity withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Link to download file. Provided only in response to a download request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_uri")
    public String downloadUri;

    public FileEntity withDownloadUri(String downloadUri) {
        this.downloadUri = downloadUri;
        return this;
    }
    
    /**
     * Is this folder locked and unable to be modified?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_locked")
    public Boolean isLocked;

    public FileEntity withIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
        return this;
    }
    
    /**
     * File MD5 checksum. This is sometimes delayed, so if you get a blank response, wait and try again.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("md5")
    public String md5;

    public FileEntity withMd5(String md5) {
        this.md5 = md5;
        return this;
    }
    
    /**
     * MIME Type.  This is determined by the filename extension and is not stored separately internally.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mime_type")
    public String mimeType;

    public FileEntity withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * File last modified date/time, according to the server.  This is the timestamp of the last Files.com operation of the file, regardless of what modified timestamp was sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("mtime")
    public OffsetDateTime mtime;

    public FileEntity withMtime(OffsetDateTime mtime) {
        this.mtime = mtime;
        return this;
    }
    
    /**
     * File/Folder path
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public FileEntity withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * A short string representing the current user's permissions.  Can be `r`,`w`,`d`, `l` or any combination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public String permissions;

    public FileEntity withPermissions(String permissions) {
        this.permissions = permissions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preview")
    public PreviewEntity preview;

    public FileEntity withPreview(PreviewEntity preview) {
        this.preview = preview;
        return this;
    }
    
    /**
     * File preview ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preview_id")
    public Integer previewId;

    public FileEntity withPreviewId(Integer previewId) {
        this.previewId = previewId;
        return this;
    }
    
    /**
     * Bookmark/priority color of file/folder
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority_color")
    public String priorityColor;

    public FileEntity withPriorityColor(String priorityColor) {
        this.priorityColor = priorityColor;
        return this;
    }
    
    /**
     * File last modified date/time, according to the client who set it.  Files.com allows desktop, FTP, SFTP, and WebDAV clients to set modified at times.  This allows Desktop&lt;-&gt;Cloud syncing to preserve modified at times.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("provided_mtime")
    public OffsetDateTime providedMtime;

    public FileEntity withProvidedMtime(OffsetDateTime providedMtime) {
        this.providedMtime = providedMtime;
        return this;
    }
    
    /**
     * Region location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;

    public FileEntity withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * File/Folder size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Integer size;

    public FileEntity withSize(Integer size) {
        this.size = size;
        return this;
    }
    
    /**
     * Are subfolders locked and unable to be modified?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subfolders_locked?")
    public Boolean subfoldersLocked;

    public FileEntity withSubfoldersLocked(Boolean subfoldersLocked) {
        this.subfoldersLocked = subfoldersLocked;
        return this;
    }
    
    /**
     * Type: `directory` or `file`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;

    public FileEntity withType(String type) {
        this.type = type;
        return this;
    }
    
    public FileEntity(){}
}
