<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DiaryController 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Submit appointment feedback
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackFormResponse
     */
	public function diaryControllerAddFeedbackForm(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment/feedback', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feedbackSubmissionModel", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerAddFeedbackForm200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerAddFeedbackForm200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerAddFeedbackForm200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerAddFeedbackForm200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Submit appointment feedback
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackJsonResponse
     */
	public function diaryControllerAddFeedbackJson(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment/feedback', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "feedbackSubmissionModel", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerAddFeedbackJSON200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerAddFeedbackJson200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerAddFeedbackJSON200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerAddFeedbackJson200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Submit appointment feedback
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackRawResponse
     */
	public function diaryControllerAddFeedbackRaw(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment/feedback', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerAddFeedbackRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerAddFeedbackRaw200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerAddFeedbackRaw200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerAddFeedbackRaw200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerAddFeedbackRaw200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Cancel an existing appointment using its unique identifier
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerCancelAppointmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerCancelAppointmentResponse
     */
	public function diaryControllerCancelAppointment(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerCancelAppointmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerCancelAppointmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment/{appointmentID}/cancel', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerCancelAppointmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerCancelAppointmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerCancelAppointment200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerCancelAppointment200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerCancelAppointment200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerCancelAppointment200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing appointment using its unique identifier
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerDeleteAppointmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerDeleteAppointmentResponse
     */
	public function diaryControllerDeleteAppointment(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerDeleteAppointmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerDeleteAppointmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerDeleteAppointmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerDeleteAppointmentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerDeleteAppointmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerDeleteAppointment200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerDeleteAppointment200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerDeleteAppointment200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerDeleteAppointment200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get a list of all available allocations for a date + 7 days for a specified appointment type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAllocationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAllocationsResponse
     */
	public function diaryControllerGetAllocations(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAllocationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAllocationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/allocations', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAllocationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAllocationsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAllocationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryBookingModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DiaryBookingModel>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryBookingModels = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DiaryBookingModel>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get an appointment by ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentResponse
     */
	public function diaryControllerGetAppointment(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A collection of all diary appointment types
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentTypesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentTypesResponse
     */
	public function diaryControllerGetAppointmentTypes(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentTypesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentTypesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointmenttypes', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentTypesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentTypesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentTypesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentTypeModelResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentTypeModelResults', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentTypeModelResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentTypeModelResults', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * A collection of diary appointments linked to a company filtered between specific dates and by appointment type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentsBetweenDatesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentsBetweenDatesResponse
     */
	public function diaryControllerGetAppointmentsBetweenDates(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentsBetweenDatesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentsBetweenDatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointmentsbetweendates', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentsBetweenDatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentsBetweenDatesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetAppointmentsBetweenDatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentModelResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentModelResults', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentModelResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentModelResults', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieves all recurring appointments:-
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetRecurringAppointmentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetRecurringAppointmentsResponse
     */
	public function diaryControllerGetRecurringAppointments(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetRecurringAppointmentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetRecurringAppointmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/recurringappointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetRecurringAppointmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetRecurringAppointmentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerGetRecurringAppointmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentModelResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentModelResults', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diaryAppointmentModelResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiaryAppointmentModelResults', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Post an appointment into a valid diary allocation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentFormResponse
     */
	public function diaryControllerPostAppointmentForm(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "diaryAppointmentDetails", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentFormRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerPostAppointmentForm200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerPostAppointmentForm200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerPostAppointmentForm200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerPostAppointmentForm200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Post an appointment into a valid diary allocation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentJsonResponse
     */
	public function diaryControllerPostAppointmentJson(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "diaryAppointmentDetails", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerPostAppointmentJSON200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerPostAppointmentJson200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerPostAppointmentJSON200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerPostAppointmentJson200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Post an appointment into a valid diary allocation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentRawResponse
     */
	public function diaryControllerPostAppointmentRaw(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentRawRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPostAppointmentRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerPostAppointmentRaw200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerPostAppointmentRaw200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerPostAppointmentRaw200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerPostAppointmentRaw200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an existing appointment using its unique identifier
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentFormResponse
     */
	public function diaryControllerPutAppointmentForm(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "diaryAppointmentDetails", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentFormRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerPutAppointmentForm200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerPutAppointmentForm200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerPutAppointmentForm200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerPutAppointmentForm200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an existing appointment using its unique identifier
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentJsonResponse
     */
	public function diaryControllerPutAppointmentJson(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "diaryAppointmentDetails", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerPutAppointmentJSON200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerPutAppointmentJson200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerPutAppointmentJSON200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerPutAppointmentJson200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an existing appointment using its unique identifier
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentRawResponse
     */
	public function diaryControllerPutAppointmentRaw(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortName}/appointment', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentRawRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerPutAppointmentRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->diaryControllerPutAppointmentRaw200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->diaryControllerPutAppointmentRaw200ApplicationXMLString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->diaryControllerPutAppointmentRaw200TextJSONString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->diaryControllerPutAppointmentRaw200TextXMLString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Match Guest Parameters with existing applicants
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiaryControllerSearchGuestRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DiaryControllerSearchGuestResponse
     */
	public function diaryControllerSearchGuest(
        \OpenAPI\OpenAPI\Models\Operations\DiaryControllerSearchGuestRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DiaryControllerSearchGuestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3/diary/{shortname}/{branchID}/guest/search', \OpenAPI\OpenAPI\Models\Operations\DiaryControllerSearchGuestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DiaryControllerSearchGuestRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiaryControllerSearchGuestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->guestDiaryParametersResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GuestDiaryParametersResultsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->guestDiaryParametersResultsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GuestDiaryParametersResultsModel', 'json');
            }
        }

        return $response;
    }
}