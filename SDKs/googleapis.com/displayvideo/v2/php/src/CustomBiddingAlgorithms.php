<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomBiddingAlgorithms 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new custom bidding algorithm. Returns the newly created custom bidding algorithm if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateResponse
     */
	public function displayvideoCustomBiddingAlgorithmsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customBiddingAlgorithmInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customBiddingAlgorithm = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomBiddingAlgorithm', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a custom bidding algorithm.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetResponse
     */
	public function displayvideoCustomBiddingAlgorithmsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customBiddingAlgorithm = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomBiddingAlgorithm', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists custom bidding algorithms that are accessible to the current user and can be used in bidding stratgies. The order is defined by the order_by parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListResponse
     */
	public function displayvideoCustomBiddingAlgorithmsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomBiddingAlgorithmsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomBiddingAlgorithmsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing custom bidding algorithm. Returns the updated custom bidding algorithm if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchResponse
     */
	public function displayvideoCustomBiddingAlgorithmsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customBiddingAlgorithmInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customBiddingAlgorithm = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomBiddingAlgorithm', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new custom bidding script. Returns the newly created script if successful.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse
     */
	public function displayvideoCustomBiddingAlgorithmsScriptsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customBiddingScriptInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customBiddingScript = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomBiddingScript', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a custom bidding script.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse
     */
	public function displayvideoCustomBiddingAlgorithmsScriptsGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts/{customBiddingScriptId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customBiddingScript = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomBiddingScript', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists custom bidding scripts that belong to the given algorithm. The order is defined by the order_by parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListResponse
     */
	public function displayvideoCustomBiddingAlgorithmsScriptsList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsScriptsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCustomBiddingScriptsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCustomBiddingScriptsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a custom bidding script reference object for a script file. The resulting reference object provides a resource path to which the script file should be uploaded. This reference object should be included in when creating a new custom bidding script object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse
     */
	public function displayvideoCustomBiddingAlgorithmsUploadScript(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/customBiddingAlgorithms/{customBiddingAlgorithmId}:uploadScript', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoCustomBiddingAlgorithmsUploadScriptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customBiddingScriptRef = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomBiddingScriptRef', 'json');
            }
        }

        return $response;
    }
}