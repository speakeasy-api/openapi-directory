"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RRSetRoutingPolicyLoadBalancerTargetIPProtocolEnum(str, Enum):
    UNDEFINED = 'UNDEFINED'
    TCP = 'TCP'
    UDP = 'UDP'

class RRSetRoutingPolicyLoadBalancerTargetLoadBalancerTypeEnum(str, Enum):
    NONE = 'NONE'
    REGIONAL_L4_ILB = 'REGIONAL_L4ILB'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RRSetRoutingPolicyLoadBalancerTarget:
    
    ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipAddress'), 'exclude': lambda f: f is None }})
    r"""The frontend IP address of the"""  
    ip_protocol: Optional[RRSetRoutingPolicyLoadBalancerTargetIPProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipProtocol'), 'exclude': lambda f: f is None }})  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})  
    load_balancer_type: Optional[RRSetRoutingPolicyLoadBalancerTargetLoadBalancerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loadBalancerType'), 'exclude': lambda f: f is None }})  
    network_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkUrl'), 'exclude': lambda f: f is None }})
    r"""The fully qualified url of the network on which the ILB is"""  
    port: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('port'), 'exclude': lambda f: f is None }})
    r"""Load Balancer to health check. The configured port of the Load Balancer."""  
    project: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('project'), 'exclude': lambda f: f is None }})
    r"""present. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} The project ID in which the ILB exists."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region'), 'exclude': lambda f: f is None }})
    r"""The region for regional ILBs."""  
    