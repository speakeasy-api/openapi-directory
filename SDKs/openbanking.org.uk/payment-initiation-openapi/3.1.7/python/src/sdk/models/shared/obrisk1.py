"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBRisk1DeliveryAddress:
    r"""Information that locates and identifies a specific address, as defined by postal services or in free format text."""
    
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Country') }})
    r"""Nation with its own government, occupying a particular territory."""  
    town_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TownName') }})
    r"""Name of a built-up area, with defined boundaries, and a local government."""  
    address_line: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddressLine'), 'exclude': lambda f: f is None }})  
    building_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BuildingNumber'), 'exclude': lambda f: f is None }})
    r"""Number that identifies the position of a building on a street."""  
    country_sub_division: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CountrySubDivision'), 'exclude': lambda f: f is None }})
    r"""Identifies a subdivision of a country such as state, region, county."""  
    post_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostCode'), 'exclude': lambda f: f is None }})
    r"""Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail."""  
    street_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StreetName'), 'exclude': lambda f: f is None }})
    r"""Name of a street or thoroughfare."""  
    
class OBRisk1PaymentContextCodeEnum(str, Enum):
    r"""Specifies the payment context"""
    BILL_PAYMENT = 'BillPayment'
    ECOMMERCE_GOODS = 'EcommerceGoods'
    ECOMMERCE_SERVICES = 'EcommerceServices'
    OTHER = 'Other'
    PARTY_TO_PARTY = 'PartyToParty'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OBRisk1:
    r"""The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments."""
    
    delivery_address: Optional[OBRisk1DeliveryAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeliveryAddress'), 'exclude': lambda f: f is None }})
    r"""Information that locates and identifies a specific address, as defined by postal services or in free format text."""  
    merchant_category_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MerchantCategoryCode'), 'exclude': lambda f: f is None }})
    r"""Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction."""  
    merchant_customer_identification: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MerchantCustomerIdentification'), 'exclude': lambda f: f is None }})
    r"""The unique customer identifier of the PSU with the merchant."""  
    payment_context_code: Optional[OBRisk1PaymentContextCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentContextCode'), 'exclude': lambda f: f is None }})
    r"""Specifies the payment context"""  
    