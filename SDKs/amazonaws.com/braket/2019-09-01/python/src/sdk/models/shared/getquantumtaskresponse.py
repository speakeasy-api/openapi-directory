"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import quantumtaskstatus_enum as shared_quantumtaskstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetQuantumTaskResponse:
    r"""Success"""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    device_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceArn') }})  
    device_parameters: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deviceParameters') }})  
    output_s3_bucket: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputS3Bucket') }})  
    output_s3_directory: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputS3Directory') }})  
    quantum_task_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantumTaskArn') }})  
    shots: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shots') }})  
    status: shared_quantumtaskstatus_enum.QuantumTaskStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    ended_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    failure_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureReason'), 'exclude': lambda f: f is None }})  
    job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobArn'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    