// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETReplaceVpnTunnelActionEnum
type GETReplaceVpnTunnelActionEnum string

const (
	GETReplaceVpnTunnelActionEnumReplaceVpnTunnel GETReplaceVpnTunnelActionEnum = "ReplaceVpnTunnel"
)

func (e GETReplaceVpnTunnelActionEnum) ToPointer() *GETReplaceVpnTunnelActionEnum {
	return &e
}

func (e *GETReplaceVpnTunnelActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ReplaceVpnTunnel":
		*e = GETReplaceVpnTunnelActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceVpnTunnelActionEnum: %v", v)
	}
}

// GETReplaceVpnTunnelVersionEnum
type GETReplaceVpnTunnelVersionEnum string

const (
	GETReplaceVpnTunnelVersionEnumTwoThousandAndSixteen1115 GETReplaceVpnTunnelVersionEnum = "2016-11-15"
)

func (e GETReplaceVpnTunnelVersionEnum) ToPointer() *GETReplaceVpnTunnelVersionEnum {
	return &e
}

func (e *GETReplaceVpnTunnelVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETReplaceVpnTunnelVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceVpnTunnelVersionEnum: %v", v)
	}
}

type GETReplaceVpnTunnelRequest struct {
	Action GETReplaceVpnTunnelActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Trigger pending tunnel endpoint maintenance.
	ApplyPendingMaintenance *bool `queryParam:"style=form,explode=true,name=ApplyPendingMaintenance"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun  *bool                          `queryParam:"style=form,explode=true,name=DryRun"`
	Version GETReplaceVpnTunnelVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of the Site-to-Site VPN connection.
	VpnConnectionID string `queryParam:"style=form,explode=true,name=VpnConnectionId"`
	// The external IP address of the VPN tunnel.
	VpnTunnelOutsideIPAddress string  `queryParam:"style=form,explode=true,name=VpnTunnelOutsideIpAddress"`
	XAmzAlgorithm             *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETReplaceVpnTunnelResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
