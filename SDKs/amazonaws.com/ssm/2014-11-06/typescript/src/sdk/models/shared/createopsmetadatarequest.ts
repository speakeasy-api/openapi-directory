/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { MetadataValue } from "./metadatavalue";
import { Tag } from "./tag";
import { Expose, Transform, Type } from "class-transformer";

export class CreateOpsMetadataRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: MetadataValue })
  @Expose({ name: "Metadata" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, MetadataValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], MetadataValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  metadata?: Record<string, MetadataValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "ResourceId" })
  resourceId: string;

  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];
}
