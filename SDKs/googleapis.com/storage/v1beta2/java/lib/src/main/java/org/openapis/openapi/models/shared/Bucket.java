/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Bucket - A bucket.
 */
public class Bucket {
    /**
     * Access controls on the bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acl")
    public BucketAccessControl[] acl;
    public Bucket withAcl(BucketAccessControl[] acl) {
        this.acl = acl;
        return this;
    }
    
    /**
     * The bucket's Cross-Origin Resource Sharing (CORS) configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cors")
    public BucketCors[] cors;
    public Bucket withCors(BucketCors[] cors) {
        this.cors = cors;
        return this;
    }
    
    /**
     * Default access controls to apply to new objects when no ACL is provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultObjectAcl")
    public ObjectAccessControl[] defaultObjectAcl;
    public Bucket withDefaultObjectAcl(ObjectAccessControl[] defaultObjectAcl) {
        this.defaultObjectAcl = defaultObjectAcl;
        return this;
    }
    
    /**
     * HTTP 1.1 Entity tag for the bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public Bucket withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The ID of the bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Bucket withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The kind of item this is. For buckets, this is always storage#bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Bucket withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The bucket's lifecycle configuration. See object lifecycle management for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifecycle")
    public BucketLifecycle lifecycle;
    public Bucket withLifecycle(BucketLifecycle lifecycle) {
        this.lifecycle = lifecycle;
        return this;
    }
    
    /**
     * The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Typical values are US and EU. Defaults to US. See the developer's guide for the authoritative list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public Bucket withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logging")
    public BucketLogging logging;
    public Bucket withLogging(BucketLogging logging) {
        this.logging = logging;
        return this;
    }
    
    /**
     * The metadata generation of this bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metageneration")
    public String metageneration;
    public Bucket withMetageneration(String metageneration) {
        this.metageneration = metageneration;
        return this;
    }
    
    /**
     * The name of the bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Bucket withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The owner of the bucket. This is always the project team's owner group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public BucketOwner owner;
    public Bucket withOwner(BucketOwner owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * The URI of this bucket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Bucket withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The bucket's storage class. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Typical values are STANDARD and DURABLE_REDUCED_AVAILABILITY. Defaults to STANDARD. See the developer's guide for the authoritative list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageClass")
    public String storageClass;
    public Bucket withStorageClass(String storageClass) {
        this.storageClass = storageClass;
        return this;
    }
    
    /**
     * Creation time of the bucket in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeCreated")
    public OffsetDateTime timeCreated;
    public Bucket withTimeCreated(OffsetDateTime timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }
    
    /**
     * The bucket's versioning configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versioning")
    public BucketVersioning versioning;
    public Bucket withVersioning(BucketVersioning versioning) {
        this.versioning = versioning;
        return this;
    }
    
    /**
     * The bucket's website configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public BucketWebsite website;
    public Bucket withWebsite(BucketWebsite website) {
        this.website = website;
        return this;
    }
    
}
