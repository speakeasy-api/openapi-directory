"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import paymentoptions as shared_paymentoptions
from ..shared import timeofday as shared_timeofday
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PoliciesAllInclusiveAvailableExceptionEnum(str, Enum):
    r"""All inclusive available exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PoliciesAllInclusiveOnlyExceptionEnum(str, Enum):
    r"""All inclusive only exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PoliciesCheckinTimeExceptionEnum(str, Enum):
    r"""Check-in time exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PoliciesCheckoutTimeExceptionEnum(str, Enum):
    r"""Check-out time exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PoliciesKidsStayFreeExceptionEnum(str, Enum):
    r"""Kids stay free exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PoliciesMaxChildAgeExceptionEnum(str, Enum):
    r"""Max child age exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PoliciesMaxKidsStayFreeCountExceptionEnum(str, Enum):
    r"""Max kids stay free count exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class PoliciesSmokeFreePropertyExceptionEnum(str, Enum):
    r"""Smoke free property exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Policies:
    r"""Property rules that impact guests."""
    
    all_inclusive_available: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allInclusiveAvailable'), 'exclude': lambda f: f is None }})
    r"""All inclusive available. The hotel offers a rate option that includes the cost of the room, meals, activities, and other amenities that might otherwise be charged separately."""  
    all_inclusive_available_exception: Optional[PoliciesAllInclusiveAvailableExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allInclusiveAvailableException'), 'exclude': lambda f: f is None }})
    r"""All inclusive available exception."""  
    all_inclusive_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allInclusiveOnly'), 'exclude': lambda f: f is None }})
    r"""All inclusive only. The only rate option offered by the hotel is a rate that includes the cost of the room, meals, activities and other amenities that might otherwise be charged separately."""  
    all_inclusive_only_exception: Optional[PoliciesAllInclusiveOnlyExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allInclusiveOnlyException'), 'exclude': lambda f: f is None }})
    r"""All inclusive only exception."""  
    checkin_time: Optional[shared_timeofday.TimeOfDay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkinTime'), 'exclude': lambda f: f is None }})
    r"""Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`."""  
    checkin_time_exception: Optional[PoliciesCheckinTimeExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkinTimeException'), 'exclude': lambda f: f is None }})
    r"""Check-in time exception."""  
    checkout_time: Optional[shared_timeofday.TimeOfDay] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkoutTime'), 'exclude': lambda f: f is None }})
    r"""Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`."""  
    checkout_time_exception: Optional[PoliciesCheckoutTimeExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkoutTimeException'), 'exclude': lambda f: f is None }})
    r"""Check-out time exception."""  
    kids_stay_free: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kidsStayFree'), 'exclude': lambda f: f is None }})
    r"""Kids stay free. The children of guests are allowed to stay in the room/suite of a parent or adult without an additional fee. The policy may or may not stipulate a limit of the child's age or the overall number of children allowed."""  
    kids_stay_free_exception: Optional[PoliciesKidsStayFreeExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kidsStayFreeException'), 'exclude': lambda f: f is None }})
    r"""Kids stay free exception."""  
    max_child_age: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxChildAge'), 'exclude': lambda f: f is None }})
    r"""Max child age. The hotel allows children up to a certain age to stay in the room/suite of a parent or adult without an additional fee."""  
    max_child_age_exception: Optional[PoliciesMaxChildAgeExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxChildAgeException'), 'exclude': lambda f: f is None }})
    r"""Max child age exception."""  
    max_kids_stay_free_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxKidsStayFreeCount'), 'exclude': lambda f: f is None }})
    r"""Max kids stay free count. The hotel allows a specific, defined number of children to stay in the room/suite of a parent or adult without an additional fee."""  
    max_kids_stay_free_count_exception: Optional[PoliciesMaxKidsStayFreeCountExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxKidsStayFreeCountException'), 'exclude': lambda f: f is None }})
    r"""Max kids stay free count exception."""  
    payment_options: Optional[shared_paymentoptions.PaymentOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentOptions'), 'exclude': lambda f: f is None }})
    r"""Forms of payment accepted at the property."""  
    smoke_free_property: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smokeFreeProperty'), 'exclude': lambda f: f is None }})
    r"""Smoke free property. Smoking is not allowed inside the building, on balconies, or in outside spaces. Hotels that offer a designated area for guests to smoke are not considered smoke-free properties."""  
    smoke_free_property_exception: Optional[PoliciesSmokeFreePropertyExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smokeFreePropertyException'), 'exclude': lambda f: f is None }})
    r"""Smoke free property exception."""  
    