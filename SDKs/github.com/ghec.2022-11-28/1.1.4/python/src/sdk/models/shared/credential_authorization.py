"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CredentialAuthorization:
    r"""Credential Authorization"""
    
    authorized_credential_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorized_credential_id') }})  
    credential_accessed_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential_accessed_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date when the credential was last accessed. May be null if it was never accessed"""  
    credential_authorized_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential_authorized_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date when the credential was authorized for use."""  
    credential_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential_id') }})
    r"""Unique identifier for the credential."""  
    credential_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credential_type') }})
    r"""Human-readable description of the credential type."""  
    login: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login') }})
    r"""User login that owns the underlying credential."""  
    authorized_credential_expires_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorized_credential_expires_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The expiry for the token. This will only be present when the credential is a token."""  
    authorized_credential_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorized_credential_note'), 'exclude': lambda f: f is None }})
    r"""The note given to the token. This will only be present when the credential is a token."""  
    authorized_credential_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorized_credential_title'), 'exclude': lambda f: f is None }})
    r"""The title given to the ssh key. This will only be present when the credential is an ssh key."""  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key."""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""List of oauth scopes the token has been granted."""  
    token_last_eight: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_last_eight'), 'exclude': lambda f: f is None }})
    r"""Last eight characters of the credential. Only included in responses with credential_type of personal access token."""  
    