"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ideconfiguration as shared_ideconfiguration
from ..shared import updatedevenvironmentresponse as shared_updatedevenvironmentresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateDevEnvironmentRequestBodyInstanceTypeEnum(str, Enum):
    r"""<p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note> <p>Changing this value will cause a restart of the Dev Environment if it is running.</p> </note>"""
    DEV_STANDARD1_SMALL = 'dev.standard1.small'
    DEV_STANDARD1_MEDIUM = 'dev.standard1.medium'
    DEV_STANDARD1_LARGE = 'dev.standard1.large'
    DEV_STANDARD1_XLARGE = 'dev.standard1.xlarge'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateDevEnvironmentRequestBody:
    
    alias: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alias'), 'exclude': lambda f: f is None }})
    r"""The user-specified alias for the Dev Environment. Changing this value will not cause a restart."""  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken'), 'exclude': lambda f: f is None }})
    r"""A user-specified idempotency token. Idempotency ensures that an API request completes only once. With an idempotent request, if the original request completes successfully, the subsequent retries return the result from the original successful request and have no additional effect."""  
    ides: Optional[list[shared_ideconfiguration.IdeConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ides'), 'exclude': lambda f: f is None }})
    r"""Information about the integrated development environment (IDE) configured for a Dev Environment."""  
    inactivity_timeout_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inactivityTimeoutMinutes'), 'exclude': lambda f: f is None }})
    r"""<p>The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.</p> <note> <p>Changing this value will cause a restart of the Dev Environment if it is running.</p> </note>"""  
    instance_type: Optional[UpdateDevEnvironmentRequestBodyInstanceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})
    r"""<p>The Amazon EC2 instace type to use for the Dev Environment. </p> <note> <p>Changing this value will cause a restart of the Dev Environment if it is running.</p> </note>"""  
    

@dataclasses.dataclass
class UpdateDevEnvironmentRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The system-generated unique ID of the Dev Environment."""  
    project_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'projectName', 'style': 'simple', 'explode': False }})
    r"""The name of the project in the space."""  
    request_body: UpdateDevEnvironmentRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    space_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceName', 'style': 'simple', 'explode': False }})
    r"""The name of the space."""  
    

@dataclasses.dataclass
class UpdateDevEnvironmentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ConflictException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_dev_environment_response: Optional[shared_updatedevenvironmentresponse.UpdateDevEnvironmentResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    