<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Errors 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List of app builds
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListResponse
     */
	public function errorsAppBuildsList(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds', \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsAppBuildsList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsList200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsAppBuildsListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsAppBuildsListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all available versions in the time range.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsResponse
     */
	public function errorsAvailableVersions(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/available_versions', \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsAvailableVersions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersions200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsAvailableVersionsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsAvailableVersionsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayResponse
     */
	public function errorsCountsPerDay(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay', \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsCountsPerDay200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDay200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsCountsPerDayDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsCountsPerDayDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorResponse
     */
	public function errorsDeleteError(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}', \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsDeleteError200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteError200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsDeleteErrorDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsDeleteErrorDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Error attachment location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationResponse
     */
	public function errorsErrorAttachmentLocation(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorAttachmentLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocation200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorAttachmentLocationDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentLocationDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Error attachment text.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextResponse
     */
	public function errorsErrorAttachmentText(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorAttachmentText200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentText200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorAttachmentTextDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentTextDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List error attachments.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsResponse
     */
	public function errorsErrorAttachments(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorAttachments200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachments200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorAttachmentsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorAttachmentsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Download details for a specific error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadResponse
     */
	public function errorsErrorDownload(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorDownload200ApplicationJSONFileObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorDownloadDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorDownloadDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Percentage of error-free devices by day in the time range based on the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror. API will return -1 if crash devices is greater than active devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesResponse
     */
	public function errorsErrorFreeDevicePercentages(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorfreeDevicePercentages', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorFreeDevicePercentages200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentages200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorFreeDevicePercentagesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorFreeDevicePercentagesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Error groups list based on search parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchResponse
     */
	public function errorsErrorGroupsSearch(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorGroupsSearch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearch200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorGroupsSearchDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorGroupsSearchDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Error location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationResponse
     */
	public function errorsErrorLocation(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorLocation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocation200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorLocationDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorLocationDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Errors list based on search parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchResponse
     */
	public function errorsErrorSearch(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/search', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorSearch200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearch200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorSearchDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorSearchDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Error Stacktrace details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceResponse
     */
	public function errorsErrorStackTrace(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace', \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diagnosticsStackTrace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiagnosticsStackTrace', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsErrorStackTraceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsErrorStackTraceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Error details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsResponse
     */
	public function errorsGetErrorDetails(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}', \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGetErrorDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetails200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGetErrorDetailsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGetErrorDetailsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Count of errors by day in the time range of the selected error group with selected version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDaySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayResponse
     */
	public function errorsGroupCountsPerDay(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDaySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay', \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupCountsPerDay200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDay200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupCountsPerDayDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupCountsPerDayDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Error group details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsResponse
     */
	public function errorsGroupDetails(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}', \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetails200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupDetailsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupDetailsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesResponse
     */
	public function errorsGroupErrorFreeDevicePercentages(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages', \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupErrorFreeDevicePercentages200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentages200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupErrorFreeDevicePercentagesDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorFreeDevicePercentagesDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the stack trace for the error group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceResponse
     */
	public function errorsGroupErrorStackTrace(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace', \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->diagnosticsStackTrace = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DiagnosticsStackTrace', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupErrorStackTraceDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupErrorStackTraceDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List of error groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListResponse
     */
	public function errorsGroupList(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups', \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupList200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Top models of the selected error group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsResponse
     */
	public function errorsGroupModelCounts(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models', \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupModelCounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCounts200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupModelCountsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupModelCountsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Top OSes of the selected error group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsResponse
     */
	public function errorsGroupOperatingSystemCounts(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems', \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupOperatingSystemCounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCounts200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGroupOperatingSystemCountsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGroupOperatingSystemCountsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Latest error details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsResponse
     */
	public function errorsLatestErrorDetails(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest', \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsLatestErrorDetails200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetails200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsLatestErrorDetailsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsLatestErrorDetailsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all errors for group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupResponse
     */
	public function errorsListForGroup(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors', \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsListForGroup200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroup200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsListForGroupDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsListForGroupDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get session logs by error ID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsResponse
     */
	public function errorsListSessionLogs(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs', \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsListSessionLogs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogs200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsListSessionLogsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsListSessionLogsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update error group state
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateResponse
     */
	public function errorsUpdateState(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}', \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsUpdateState200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateState200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsUpdateStateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsUpdateStateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * gets the retention settings in days
     * 
     * gets the retention settings in days
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsResponse
     */
	public function errorsGetRetentionSettings(
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings', \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGetRetentionSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettings200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorsGetRetentionSettingsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ErrorsGetRetentionSettingsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}