"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import message as shared_message
from ..shared import messagetag as shared_messagetag
from ..shared import rawmessage as shared_rawmessage
from ..shared import sendemailresponse as shared_sendemailresponse
from ..shared import template as shared_template
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendEmailRequestBodyContent:
    r"""An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers."""
    
    raw: Optional[shared_rawmessage.RawMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Raw'), 'exclude': lambda f: f is None }})  
    simple: Optional[shared_message.Message] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Simple'), 'exclude': lambda f: f is None }})  
    template: Optional[shared_template.Template] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Template'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendEmailRequestBodyDestination:
    r"""An object that describes the recipients for an email."""
    
    bcc_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BccAddresses'), 'exclude': lambda f: f is None }})  
    cc_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CcAddresses'), 'exclude': lambda f: f is None }})  
    to_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ToAddresses'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SendEmailRequestBody:
    
    content: SendEmailRequestBodyContent = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Content') }})
    r"""An object that defines the entire content of the email, including the message headers and the body content. You can create a simple email message, in which you specify the subject and the text and HTML versions of the message body. You can also create raw messages, in which you specify a complete MIME-formatted message. Raw messages can include attachments and custom headers."""  
    destination: SendEmailRequestBodyDestination = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Destination') }})
    r"""An object that describes the recipients for an email."""  
    configuration_set_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConfigurationSetName'), 'exclude': lambda f: f is None }})
    r"""<p>The name of a configuration set.</p> <p>In Amazon Pinpoint, <i>configuration sets</i> are groups of rules that you can apply to the emails you send. You apply a configuration set to an email by including a reference to the configuration set in the headers of the email. When you apply a configuration set to an email, all of the rules in that configuration set are applied to the email.</p>"""  
    email_tags: Optional[list[shared_messagetag.MessageTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmailTags'), 'exclude': lambda f: f is None }})
    r"""A list of message tags."""  
    feedback_forwarding_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FeedbackForwardingEmailAddress'), 'exclude': lambda f: f is None }})
    r"""The address that Amazon Pinpoint should send bounce and complaint notifications to."""  
    from_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FromEmailAddress'), 'exclude': lambda f: f is None }})
    r"""The email address that you want to use as the \\"From\\" address for the email. The address that you specify has to be verified."""  
    reply_to_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplyToAddresses'), 'exclude': lambda f: f is None }})
    r"""The \\"Reply-to\\" email addresses for the message. When the recipient replies to the message, each Reply-to address receives the reply."""  
    

@dataclasses.dataclass
class SendEmailRequest:
    
    request_body: SendEmailRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class SendEmailResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_suspended_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccountSuspendedException"""  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    mail_from_domain_not_verified_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MailFromDomainNotVerifiedException"""  
    message_rejected: Optional[Any] = dataclasses.field(default=None)
    r"""MessageRejected"""  
    not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""NotFoundException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    send_email_response: Optional[shared_sendemailresponse.SendEmailResponse] = dataclasses.field(default=None)
    r"""Success"""  
    sending_paused_exception: Optional[Any] = dataclasses.field(default=None)
    r"""SendingPausedException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    