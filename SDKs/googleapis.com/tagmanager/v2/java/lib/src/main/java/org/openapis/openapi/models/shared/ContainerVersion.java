/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContainerVersion - Represents a Google Tag Manager Container Version.
 */
public class ContainerVersion {
    /**
     * GTM Account ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;

    public ContainerVersion withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The built-in variables in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("builtInVariable")
    public BuiltInVariable[] builtInVariable;

    public ContainerVersion withBuiltInVariable(BuiltInVariable[] builtInVariable) {
        this.builtInVariable = builtInVariable;
        return this;
    }
    
    /**
     * The clients in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client")
    public Client[] client;

    public ContainerVersion withClient(Client[] client) {
        this.client = client;
        return this;
    }
    
    /**
     * Represents a Google Tag Manager Container, which specifies the platform tags will run on, manages workspaces, and retains container versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container")
    public Container container;

    public ContainerVersion withContainer(Container container) {
        this.container = container;
        return this;
    }
    
    /**
     * GTM Container ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerId")
    public String containerId;

    public ContainerVersion withContainerId(String containerId) {
        this.containerId = containerId;
        return this;
    }
    
    /**
     * The Container Version ID uniquely identifies the GTM Container Version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerVersionId")
    public String containerVersionId;

    public ContainerVersion withContainerVersionId(String containerVersionId) {
        this.containerVersionId = containerVersionId;
        return this;
    }
    
    /**
     * The custom templates in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customTemplate")
    public CustomTemplate[] customTemplate;

    public ContainerVersion withCustomTemplate(CustomTemplate[] customTemplate) {
        this.customTemplate = customTemplate;
        return this;
    }
    
    /**
     * A value of true indicates this container version has been deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;

    public ContainerVersion withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * Container version description. @mutable tagmanager.accounts.containers.versions.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public ContainerVersion withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fingerprint")
    public String fingerprint;

    public ContainerVersion withFingerprint(String fingerprint) {
        this.fingerprint = fingerprint;
        return this;
    }
    
    /**
     * The folders in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("folder")
    public Folder[] folder;

    public ContainerVersion withFolder(Folder[] folder) {
        this.folder = folder;
        return this;
    }
    
    /**
     * The Google tag configs in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gtagConfig")
    public GtagConfig[] gtagConfig;

    public ContainerVersion withGtagConfig(GtagConfig[] gtagConfig) {
        this.gtagConfig = gtagConfig;
        return this;
    }
    
    /**
     * Container version display name. @mutable tagmanager.accounts.containers.versions.update
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ContainerVersion withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * GTM Container Version's API relative path.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public ContainerVersion withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * The tags in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag")
    public Tag[] tag;

    public ContainerVersion withTag(Tag[] tag) {
        this.tag = tag;
        return this;
    }
    
    /**
     * Auto generated link to the tag manager UI
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagManagerUrl")
    public String tagManagerUrl;

    public ContainerVersion withTagManagerUrl(String tagManagerUrl) {
        this.tagManagerUrl = tagManagerUrl;
        return this;
    }
    
    /**
     * The triggers in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trigger")
    public Trigger[] trigger;

    public ContainerVersion withTrigger(Trigger[] trigger) {
        this.trigger = trigger;
        return this;
    }
    
    /**
     * The variables in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variable")
    public Variable[] variable;

    public ContainerVersion withVariable(Variable[] variable) {
        this.variable = variable;
        return this;
    }
    
    /**
     * The zones in the container that this version was taken from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zone")
    public Zone[] zone;

    public ContainerVersion withZone(Zone[] zone) {
        this.zone = zone;
        return this;
    }
    
    public ContainerVersion(){}
}
