/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum PostCommentForPullRequestXAmzTargetEnum {
  CodeCommit20150413PostCommentForPullRequest = "CodeCommit_20150413.PostCommentForPullRequest",
}

export class PostCommentForPullRequestRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  postCommentForPullRequestInput: shared.PostCommentForPullRequestInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: PostCommentForPullRequestXAmzTargetEnum;
}

export class PostCommentForPullRequestResponse extends SpeakeasyBase {
  /**
   * BeforeCommitIdAndAfterCommitIdAreSameException
   */
  @SpeakeasyMetadata()
  beforeCommitIdAndAfterCommitIdAreSameException?: any;

  /**
   * ClientRequestTokenRequiredException
   */
  @SpeakeasyMetadata()
  clientRequestTokenRequiredException?: any;

  /**
   * CommentContentRequiredException
   */
  @SpeakeasyMetadata()
  commentContentRequiredException?: any;

  /**
   * CommentContentSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  commentContentSizeLimitExceededException?: any;

  /**
   * CommitDoesNotExistException
   */
  @SpeakeasyMetadata()
  commitDoesNotExistException?: any;

  /**
   * CommitIdRequiredException
   */
  @SpeakeasyMetadata()
  commitIdRequiredException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * IdempotencyParameterMismatchException
   */
  @SpeakeasyMetadata()
  idempotencyParameterMismatchException?: any;

  /**
   * InvalidClientRequestTokenException
   */
  @SpeakeasyMetadata()
  invalidClientRequestTokenException?: any;

  /**
   * InvalidCommitIdException
   */
  @SpeakeasyMetadata()
  invalidCommitIdException?: any;

  /**
   * InvalidFileLocationException
   */
  @SpeakeasyMetadata()
  invalidFileLocationException?: any;

  /**
   * InvalidFilePositionException
   */
  @SpeakeasyMetadata()
  invalidFilePositionException?: any;

  /**
   * InvalidPathException
   */
  @SpeakeasyMetadata()
  invalidPathException?: any;

  /**
   * InvalidPullRequestIdException
   */
  @SpeakeasyMetadata()
  invalidPullRequestIdException?: any;

  /**
   * InvalidRelativeFileVersionEnumException
   */
  @SpeakeasyMetadata()
  invalidRelativeFileVersionEnumException?: any;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * PathDoesNotExistException
   */
  @SpeakeasyMetadata()
  pathDoesNotExistException?: any;

  /**
   * PathRequiredException
   */
  @SpeakeasyMetadata()
  pathRequiredException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  postCommentForPullRequestOutput?: shared.PostCommentForPullRequestOutput;

  /**
   * PullRequestDoesNotExistException
   */
  @SpeakeasyMetadata()
  pullRequestDoesNotExistException?: any;

  /**
   * PullRequestIdRequiredException
   */
  @SpeakeasyMetadata()
  pullRequestIdRequiredException?: any;

  /**
   * RepositoryDoesNotExistException
   */
  @SpeakeasyMetadata()
  repositoryDoesNotExistException?: any;

  /**
   * RepositoryNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryNameRequiredException?: any;

  /**
   * RepositoryNotAssociatedWithPullRequestException
   */
  @SpeakeasyMetadata()
  repositoryNotAssociatedWithPullRequestException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
