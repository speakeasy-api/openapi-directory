"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import appliancemodesupportvalue_enum as shared_appliancemodesupportvalue_enum
from ..shared import dnssupportvalue_enum as shared_dnssupportvalue_enum
from ..shared import ipv6supportvalue_enum as shared_ipv6supportvalue_enum
from enum import Enum
from typing import Optional

class GETModifyTransitGatewayVpcAttachmentActionEnum(str, Enum):
    MODIFY_TRANSIT_GATEWAY_VPC_ATTACHMENT = 'ModifyTransitGatewayVpcAttachment'


@dataclasses.dataclass
class GETModifyTransitGatewayVpcAttachmentOptions:
    r"""Describes the options for a VPC attachment."""
    
    appliance_mode_support: Optional[shared_appliancemodesupportvalue_enum.ApplianceModeSupportValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ApplianceModeSupport' }})  
    dns_support: Optional[shared_dnssupportvalue_enum.DNSSupportValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DnsSupport' }})  
    ipv6_support: Optional[shared_ipv6supportvalue_enum.Ipv6SupportValueEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Ipv6Support' }})  
    
class GETModifyTransitGatewayVpcAttachmentVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyTransitGatewayVpcAttachmentRequest:
    
    action: GETModifyTransitGatewayVpcAttachmentActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    transit_gateway_attachment_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'TransitGatewayAttachmentId', 'style': 'form', 'explode': True }})
    r"""The ID of the attachment."""  
    version: GETModifyTransitGatewayVpcAttachmentVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    add_subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AddSubnetIds', 'style': 'form', 'explode': True }})
    r"""The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    options: Optional[GETModifyTransitGatewayVpcAttachmentOptions] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Options', 'style': 'form', 'explode': True }})
    r"""The new VPC attachment options."""  
    remove_subnet_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RemoveSubnetIds', 'style': 'form', 'explode': True }})
    r"""The IDs of one or more subnets to remove."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyTransitGatewayVpcAttachmentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    