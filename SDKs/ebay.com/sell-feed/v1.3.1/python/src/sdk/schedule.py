"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Schedule:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_schedule(self, request: shared.CreateUserScheduleRequest, security: operations.CreateScheduleSecurity) -> operations.CreateScheduleResponse:
        r"""This method creates a schedule, which is a subscription to the specified schedule template. A schedule periodically generates a report for the <strong>feedType</strong> specified by the template. Specify the same <strong>feedType</strong> as the <strong>feedType</strong> of the associated schedule template. When creating the schedule, if available from the template, you can specify a preferred trigger hour, day of the week, or day of the month. These and other fields are conditionally available as specified by the template.<p> <span class=\\"tablenote\\"><strong>Note:</strong> Make sure to include all fields required by the schedule template (<strong>scheduleTemplateId</strong>). Call the <strong>getScheduleTemplate</strong> method (or the <strong>getScheduleTemplates</strong> method), to find out which fields are required or optional. If a field is optional and a default value is provided by the template, the default value will be used if omitted from the payload.</span></p>A successful call returns the location response header containing the <strong>getSchedule</strong> call URI to retrieve the schedule you just created. The URL includes the eBay-assigned schedule ID, which you can use to reference the schedule task. <br /><br />To retrieve the details of the create schedule task, use the <strong>getSchedule</strong> method for a single schedule ID or the <strong>getSchedules</strong> method to retrieve all schedule details for the specified <strong>feed_type</strong>. The number of schedules for each feedType is limited. Error code 160031 is returned when you have reached this maximum.<p> <span class=\\"tablenote\\"><strong>Note:</strong> Except for schedules with a HALF-HOUR frequency, all schedules will ideally run at the start of each hour ('00' minutes). Actual start time may vary time may vary due to load and other factors.</span></p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/schedule'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_schedule_201_application_json_object = out
        elif http_res.status_code in [400, 403, 409, 500]:
            pass

        return res

    def delete_schedule(self, request: operations.DeleteScheduleRequest, security: operations.DeleteScheduleSecurity) -> operations.DeleteScheduleResponse:
        r"""This method deletes an existing schedule. Specify the schedule to delete using the <strong>schedule_id</strong> path parameter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteScheduleRequest, base_url, '/schedule/{schedule_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_latest_result_file(self, request: operations.GetLatestResultFileRequest, security: operations.GetLatestResultFileSecurity) -> operations.GetLatestResultFileResponse:
        r"""This method downloads the latest result file generated by the schedule. The response of this call is a compressed or uncompressed CSV, XML, or JSON file, with the applicable file extension (for example: csv.gz). Specify the <strong>schedule_id</strong> path parameter to download its last generated file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLatestResultFileRequest, base_url, '/schedule/{schedule_id}/download_result_file', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLatestResultFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/octet-stream'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def get_schedule(self, request: operations.GetScheduleRequest, security: operations.GetScheduleSecurity) -> operations.GetScheduleResponse:
        r"""This method retrieves schedule details and status of the specified schedule. Specify the schedule to retrieve using the <strong>schedule_id</strong>. Use the <strong>getSchedules</strong> method to find a schedule if you do not know the <strong>schedule_id</strong>."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScheduleRequest, base_url, '/schedule/{schedule_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserScheduleResponse])
                res.user_schedule_response = out
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def get_schedule_template(self, request: operations.GetScheduleTemplateRequest, security: operations.GetScheduleTemplateSecurity) -> operations.GetScheduleTemplateResponse:
        r"""This method retrieves the details of the specified template. Specify the template to retrieve using the <strong>schedule_template_id</strong> path parameter. Use the <strong>getScheduleTemplates</strong> method to find a schedule template if you do not know the <strong>schedule_template_id</strong>."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScheduleTemplateRequest, base_url, '/schedule_template/{schedule_template_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScheduleTemplateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleTemplateResponse])
                res.schedule_template_response = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    def get_schedule_templates(self, request: operations.GetScheduleTemplatesRequest, security: operations.GetScheduleTemplatesSecurity) -> operations.GetScheduleTemplatesResponse:
        r"""This method retrieves an array containing the details and status of all schedule templates based on the specified <strong>feed_type</strong>. Use this method to find a schedule template if you do not know the <strong>schedule_template_id</strong>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/schedule_template'
        
        query_params = utils.get_query_params(operations.GetScheduleTemplatesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScheduleTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ScheduleTemplateCollection])
                res.schedule_template_collection = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_schedules(self, request: operations.GetSchedulesRequest, security: operations.GetSchedulesSecurity) -> operations.GetSchedulesResponse:
        r"""This method retrieves an array containing the details and status of all schedules based on the specified <strong>feed_type</strong>. Use this method to find a schedule if you do not know the <strong>schedule_id</strong>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/schedule'
        
        query_params = utils.get_query_params(operations.GetSchedulesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSchedulesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserScheduleCollection])
                res.user_schedule_collection = out
        elif http_res.status_code in [400, 403, 500]:
            pass

        return res

    def update_schedule(self, request: operations.UpdateScheduleRequest, security: operations.UpdateScheduleSecurity) -> operations.UpdateScheduleResponse:
        r"""This method updates an existing schedule. Specify the schedule to update using the <strong>schedule_id</strong> path parameter. If the schedule template has changed after the schedule was created or updated, the input will be validated using the changed template.<p> <span class=\\"tablenote\\"><strong>Note:</strong> Make sure to include all fields required by the schedule template (<strong>scheduleTemplateId</strong>). Call the <strong>getScheduleTemplate</strong> method (or the <strong>getScheduleTemplates</strong> method), to find out which fields are required or optional. If you do not know the <strong>scheduleTemplateId</strong>, call the <strong>getSchedule</strong> method to find out.</span></p>"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateScheduleRequest, base_url, '/schedule/{schedule_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_user_schedule_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateScheduleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    