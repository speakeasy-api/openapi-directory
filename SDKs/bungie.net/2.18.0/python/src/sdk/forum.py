"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Forum:
    r"""forum"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def forum_get_core_topics_paged(self, request: operations.ForumGetCoreTopicsPagedRequest) -> operations.ForumGetCoreTopicsPagedResponse:
        r"""Gets a listing of all topics marked as part of the core group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetCoreTopicsPagedRequest, base_url, '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/', request)
        
        query_params = utils.get_query_params(operations.ForumGetCoreTopicsPagedRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetCoreTopicsPagedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_forum_tag_suggestions(self, request: operations.ForumGetForumTagSuggestionsRequest) -> operations.ForumGetForumTagSuggestionsResponse:
        r"""Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Forum/GetForumTagSuggestions/'
        
        query_params = utils.get_query_params(operations.ForumGetForumTagSuggestionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetForumTagSuggestionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_poll(self, request: operations.ForumGetPollRequest) -> operations.ForumGetPollResponse:
        r"""Gets the specified forum poll."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetPollRequest, base_url, '/Forum/Poll/{topicId}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetPollResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_post_and_parent(self, request: operations.ForumGetPostAndParentRequest) -> operations.ForumGetPostAndParentResponse:
        r"""Returns the post specified and its immediate parent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetPostAndParentRequest, base_url, '/Forum/GetPostAndParent/{childPostId}/', request)
        
        query_params = utils.get_query_params(operations.ForumGetPostAndParentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetPostAndParentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_post_and_parent_awaiting_approval(self, request: operations.ForumGetPostAndParentAwaitingApprovalRequest) -> operations.ForumGetPostAndParentAwaitingApprovalResponse:
        r"""Returns the post specified and its immediate parent of posts that are awaiting approval."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetPostAndParentAwaitingApprovalRequest, base_url, '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/', request)
        
        query_params = utils.get_query_params(operations.ForumGetPostAndParentAwaitingApprovalRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetPostAndParentAwaitingApprovalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_posts_threaded_paged(self, request: operations.ForumGetPostsThreadedPagedRequest) -> operations.ForumGetPostsThreadedPagedResponse:
        r"""Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetPostsThreadedPagedRequest, base_url, '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/', request)
        
        query_params = utils.get_query_params(operations.ForumGetPostsThreadedPagedRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetPostsThreadedPagedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_posts_threaded_paged_from_child(self, request: operations.ForumGetPostsThreadedPagedFromChildRequest) -> operations.ForumGetPostsThreadedPagedFromChildResponse:
        r"""Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetPostsThreadedPagedFromChildRequest, base_url, '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/', request)
        
        query_params = utils.get_query_params(operations.ForumGetPostsThreadedPagedFromChildRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetPostsThreadedPagedFromChildResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_recruitment_thread_summaries(self) -> operations.ForumGetRecruitmentThreadSummariesResponse:
        r"""Allows the caller to get a list of to 25 recruitment thread summary information objects."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/Forum/Recruit/Summaries/'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetRecruitmentThreadSummariesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_topic_for_content(self, request: operations.ForumGetTopicForContentRequest) -> operations.ForumGetTopicForContentResponse:
        r"""Gets the post Id for the given content item's comments, if it exists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetTopicForContentRequest, base_url, '/Forum/GetTopicForContent/{contentId}/', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetTopicForContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def forum_get_topics_paged(self, request: operations.ForumGetTopicsPagedRequest) -> operations.ForumGetTopicsPagedResponse:
        r"""Get topics from any forum."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ForumGetTopicsPagedRequest, base_url, '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/', request)
        
        query_params = utils.get_query_params(operations.ForumGetTopicsPagedRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ForumGetTopicsPagedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    