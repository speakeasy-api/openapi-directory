"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IdentityServiceOidcConfig:
    r"""Configuration for OIDC Auth flow."""
    
    certificate_authority_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateAuthorityData'), 'exclude': lambda f: f is None }})
    r"""PEM-encoded CA for OIDC provider."""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""ID for OIDC client application."""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret'), 'exclude': lambda f: f is None }})
    r"""Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH."""  
    deploy_cloud_console_proxy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployCloudConsoleProxy'), 'exclude': lambda f: f is None }})
    r"""Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console."""  
    enable_access_token: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAccessToken'), 'exclude': lambda f: f is None }})
    r"""Enable access token."""  
    encrypted_client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptedClientSecret'), 'exclude': lambda f: f is None }})
    r"""Output only. Encrypted OIDC Client secret"""  
    extra_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraParams'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of key-value pairs."""  
    group_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPrefix'), 'exclude': lambda f: f is None }})
    r"""Prefix to prepend to group name."""  
    groups_claim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupsClaim'), 'exclude': lambda f: f is None }})
    r"""Claim in OIDC ID token that holds group information."""  
    issuer_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuerUri'), 'exclude': lambda f: f is None }})
    r"""URI for the OIDC provider. This should point to the level below .well-known/openid-configuration."""  
    kubectl_redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubectlRedirectUri'), 'exclude': lambda f: f is None }})
    r"""Registered redirect uri to redirect users going through OAuth flow using kubectl plugin."""  
    scopes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of identifiers."""  
    user_claim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userClaim'), 'exclude': lambda f: f is None }})
    r"""Claim in OIDC ID token that holds username."""  
    user_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userPrefix'), 'exclude': lambda f: f is None }})
    r"""Prefix to prepend to user name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IdentityServiceOidcConfigInput:
    r"""Configuration for OIDC Auth flow."""
    
    certificate_authority_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('certificateAuthorityData'), 'exclude': lambda f: f is None }})
    r"""PEM-encoded CA for OIDC provider."""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""ID for OIDC client application."""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret'), 'exclude': lambda f: f is None }})
    r"""Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH."""  
    deploy_cloud_console_proxy: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deployCloudConsoleProxy'), 'exclude': lambda f: f is None }})
    r"""Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console."""  
    enable_access_token: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableAccessToken'), 'exclude': lambda f: f is None }})
    r"""Enable access token."""  
    extra_params: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraParams'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of key-value pairs."""  
    group_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupPrefix'), 'exclude': lambda f: f is None }})
    r"""Prefix to prepend to group name."""  
    groups_claim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groupsClaim'), 'exclude': lambda f: f is None }})
    r"""Claim in OIDC ID token that holds group information."""  
    issuer_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuerUri'), 'exclude': lambda f: f is None }})
    r"""URI for the OIDC provider. This should point to the level below .well-known/openid-configuration."""  
    kubectl_redirect_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kubectlRedirectUri'), 'exclude': lambda f: f is None }})
    r"""Registered redirect uri to redirect users going through OAuth flow using kubectl plugin."""  
    scopes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of identifiers."""  
    user_claim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userClaim'), 'exclude': lambda f: f is None }})
    r"""Claim in OIDC ID token that holds username."""  
    user_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userPrefix'), 'exclude': lambda f: f is None }})
    r"""Prefix to prepend to user name."""  
    