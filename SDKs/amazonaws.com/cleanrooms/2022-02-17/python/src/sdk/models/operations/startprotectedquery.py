"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import protectedqueryoutputconfiguration as shared_protectedqueryoutputconfiguration
from ..shared import startprotectedqueryoutput as shared_startprotectedqueryoutput
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartProtectedQueryRequestBodyResultConfiguration:
    r"""Contains configurations for protected query results."""
    
    output_configuration: Optional[shared_protectedqueryoutputconfiguration.ProtectedQueryOutputConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputConfiguration'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartProtectedQueryRequestBodySQLParameters:
    r"""The parameters for the SQL type Protected Query."""
    
    query_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queryString'), 'exclude': lambda f: f is None }})  
    
class StartProtectedQueryRequestBodyTypeEnum(str, Enum):
    r"""The type of the protected query to be started."""
    SQL = 'SQL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StartProtectedQueryRequestBody:
    
    result_configuration: StartProtectedQueryRequestBodyResultConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultConfiguration') }})
    r"""Contains configurations for protected query results."""  
    sql_parameters: StartProtectedQueryRequestBodySQLParameters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sqlParameters') }})
    r"""The parameters for the SQL type Protected Query."""  
    type: StartProtectedQueryRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of the protected query to be started."""  
    

@dataclasses.dataclass
class StartProtectedQueryRequest:
    
    membership_identifier: str = dataclasses.field(metadata={'path_param': { 'field_name': 'membershipIdentifier', 'style': 'simple', 'explode': False }})
    r"""A unique identifier for the membership to run this query against. Currently accepts a membership ID."""  
    request_body: StartProtectedQueryRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class StartProtectedQueryResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    start_protected_query_output: Optional[shared_startprotectedqueryoutput.StartProtectedQueryOutput] = dataclasses.field(default=None)
    r"""Success"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    