/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AdvancedShipmentOptions } from "./advancedshipmentoptions";
import { CustomsItemInput } from "./customsitem";
import { LabelChargeEventEnum } from "./labelchargeeventenum";
import { OrderSourceNameEnum } from "./ordersourcenameenum";
import { PackageInput } from "./package";
import { ShipmentItem } from "./shipmentitem";
import { ShippingAddress } from "./shippingaddress";
import { TaxIdentifier } from "./taxidentifier";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The display format that the label should be shown in.
 */
export enum CreateLabelRequestBodyDisplaySchemeEnum {
  Label = "label",
  QrCode = "qr_code",
  LabelAndQrCode = "label_and_qr_code",
}

/**
 * There are two different ways to [download a label](https://www.shipengine.com/docs/labels/downloading/):
 *
 * @remarks
 *
 * |Label Download Type | Description
 * |--------------------|------------------------------
 * |`url`               |You will receive a URL, which you can use to download the label in a separate request. The URL will remain valid for 90 days.<br><br>This is the default if `label_download_type` is unspecified.
 * |`inline`            |You will receive the Base64-encoded label as part of the response. No need for a second request to download the label.
 *
 */
export enum CreateLabelRequestBodyLabelDownloadTypeEnum {
  Url = "url",
  Inline = "inline",
}

/**
 * The possible file formats in which shipping labels can be downloaded.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
 *
 * @remarks
 *
 * |Label Format  | Supported Carriers
 * |--------------|-----------------------------------
 * |`pdf`         | All carriers
 * |`png`         | `fedex` <br> `stamps_com` <br> `ups` <br> `usps`
 * |`zpl`         | `access_worldwide` <br> `apc` <br> `asendia` <br> `dhl_global_mail` <br> `dhl_express` <br> `dhl_express_australia` <br> `dhl_express_canada` <br> `dhl_express_worldwide` <br> `dhl_express_uk` <br> `dpd` <br> `endicia` <br> `fedex` <br> `fedex_uk` <br> `firstmile` <br> `imex` <br> `newgistics` <br> `ontrac` <br> `rr_donnelley` <br> `stamps_com` <br> `ups` <br> `usps`
 *
 */
export enum CreateLabelRequestBodyLabelFormatEnum {
  Pdf = "pdf",
  Png = "png",
  Zpl = "zpl",
}

/**
 * The available layouts (sizes) in which shipping labels can be downloaded.  The label format determines which sizes are supported.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
 *
 * @remarks
 *
 */
export enum CreateLabelRequestBodyLabelLayoutEnum {
  Fourx6 = "4x6",
  Letter = "letter",
}

/**
 * The possible delivery confirmation values
 */
export enum CreateLabelRequestBodyPartialShipmentDeliveryConfirmationEnum {
  None = "none",
  Delivery = "delivery",
  Signature = "signature",
  AdultSignature = "adult_signature",
  DirectSignature = "direct_signature",
  DeliveryMailed = "delivery_mailed",
  VerbalConfirmation = "verbal_confirmation",
}

/**
 * The possible package contents values
 */
export enum CreateLabelRequestBodyPartialShipmentInternationalShipmentOptionsPackageContentsEnum {
  Merchandise = "merchandise",
  Documents = "documents",
  Gift = "gift",
  ReturnedGoods = "returned_goods",
  Sample = "sample",
}

/**
 * The possible non delivery values
 */
export enum CreateLabelRequestBodyPartialShipmentInternationalShipmentOptionsNonDeliveryEnum {
  ReturnToSender = "return_to_sender",
  TreatAsAbandoned = "treat_as_abandoned",
}

/**
 * Options for international shipments, such as customs declarations.
 */
export class CreateLabelRequestBodyPartialShipmentInternationalShipmentOptionsInput extends SpeakeasyBase {
  /**
   * The type of contents in this shipment.  This may impact import duties or customs treatment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contents" })
  contents: CreateLabelRequestBodyPartialShipmentInternationalShipmentOptionsPackageContentsEnum;

  /**
   * Customs declarations for each item in the shipment.
   */
  @SpeakeasyMetadata({ elemType: CustomsItemInput })
  @Expose({ name: "customs_items" })
  @Type(() => CustomsItemInput)
  customsItems?: CustomsItemInput[];

  /**
   * Indicates what to do if a package is unable to be delivered.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "non_delivery" })
  nonDelivery: CreateLabelRequestBodyPartialShipmentInternationalShipmentOptionsNonDeliveryEnum;
}

/**
 * The possible insurance provider values
 */
export enum CreateLabelRequestBodyPartialShipmentInsuranceProviderEnum {
  None = "none",
  Shipsurance = "shipsurance",
  Carrier = "carrier",
  ThirdParty = "third_party",
}

/**
 * Indicates if the package will be picked up or dropped off by the carrier
 */
export enum CreateLabelRequestBodyPartialShipmentOriginTypeEnum {
  Pickup = "pickup",
  DropOff = "drop_off",
}

/**
 * The information necessary to ship a package, such as the origin, the destination, the carrier service, and the package dimensions and weight.
 *
 * @remarks
 *
 */
export class CreateLabelRequestBodyPartialShipmentInput extends SpeakeasyBase {
  /**
   * Advanced shipment options.  These are entirely optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "advanced_options" })
  @Type(() => AdvancedShipmentOptions)
  advancedOptions: AdvancedShipmentOptions;

  /**
   * The carrier account that is billed for the shipping charges
   */
  @SpeakeasyMetadata()
  @Expose({ name: "carrier_id" })
  carrierId: string;

  /**
   * The type of delivery confirmation that is required for this shipment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmation" })
  confirmation: CreateLabelRequestBodyPartialShipmentDeliveryConfirmationEnum;

  /**
   * Customs information.  This is usually only needed for international shipments.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customs" })
  @Type(
    () => CreateLabelRequestBodyPartialShipmentInternationalShipmentOptionsInput
  )
  customs: CreateLabelRequestBodyPartialShipmentInternationalShipmentOptionsInput;

  /**
   * ID that the Order Source assigned
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_order_id" })
  externalOrderId?: string;

  /**
   * A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.
   *
   * @remarks
   *
   * > **Warning:** The `external_shipment_id` is limited to 50 characters. Any additional characters will be truncated.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_shipment_id" })
  externalShipmentId?: string;

  /**
   * The insurance provider to use for any insured packages in the shipment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "insurance_provider" })
  insuranceProvider: CreateLabelRequestBodyPartialShipmentInsuranceProviderEnum;

  /**
   * Describe the packages included in this shipment as related to potential metadata that was imported from
   *
   * @remarks
   * external order sources
   *
   */
  @SpeakeasyMetadata({ elemType: ShipmentItem })
  @Expose({ name: "items" })
  @Type(() => ShipmentItem)
  items?: ShipmentItem[];

  @SpeakeasyMetadata()
  @Expose({ name: "order_source_code" })
  orderSourceCode?: OrderSourceNameEnum;

  /**
   * Indicates if the package will be picked up or dropped off by the carrier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin_type" })
  originType?: CreateLabelRequestBodyPartialShipmentOriginTypeEnum;

  /**
   * The packages in the shipment.
   *
   * @remarks
   *
   * > **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn't allow it, an error will be returned.
   *
   */
  @SpeakeasyMetadata({ elemType: PackageInput })
  @Expose({ name: "packages" })
  @Type(() => PackageInput)
  packages: PackageInput[];

  /**
   * The return address for this shipment.  Defaults to the `ship_from` address.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_to" })
  @Type(() => ShippingAddress)
  returnTo: ShippingAddress;

  /**
   * The [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) used to ship the package, such as `fedex_ground`, `usps_first_class_mail`, `flat_rate_envelope`, etc.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "service_code" })
  serviceCode: string;

  /**
   * The date that the shipment was (or will be) shippped.  ShipEngine will take the day of week into consideration. For example, if the carrier does not operate on Sundays, then a package that would have shipped on Sunday will ship on Monday instead.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  shipDate: Date;

  /**
   * The shipment's origin address. If you frequently ship from the same location, consider [creating a warehouse](https://www.shipengine.com/docs/reference/create-warehouse/).  Then you can simply specify the `warehouse_id` rather than the complete address each time.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_from" })
  @Type(() => ShippingAddress)
  shipFrom: ShippingAddress;

  /**
   * The recipient's mailing address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_to" })
  @Type(() => ShippingAddress)
  shipTo: ShippingAddress;

  /**
   * A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.
   *
   * @remarks
   *
   * > **Warning:** The `shipment_number` is limited to 50 characters. Any additional characters will be truncated.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shipment_number" })
  shipmentNumber?: string;

  @SpeakeasyMetadata({ elemType: TaxIdentifier })
  @Expose({ name: "tax_identifiers" })
  @Type(() => TaxIdentifier)
  taxIdentifiers?: TaxIdentifier[];

  /**
   * The [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) that the shipment is being shipped from.  Either `warehouse_id` or `ship_from` must be specified.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "warehouse_id" })
  warehouseId: string;
}

/**
 * The possible validate address values
 */
export enum CreateLabelRequestBodyValidateAddressEnum {
  NoValidation = "no_validation",
  ValidateOnly = "validate_only",
  ValidateAndClean = "validate_and_clean",
}

/**
 * A label represents the physical sticker that you affix to a package to ship it.  ShipEngine makes it easy for you to [create labels](https://www.shipengine.com/docs/labels/create-a-label/) and then download them in PDF, PNG, or ZPL format so you can print them.
 *
 * @remarks
 *
 */
export class CreateLabelRequestBodyInput extends SpeakeasyBase {
  /**
   * The label charge event.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "charge_event" })
  chargeEvent?: LabelChargeEventEnum;

  /**
   * The display format that the label should be shown in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_scheme" })
  displayScheme?: CreateLabelRequestBodyDisplaySchemeEnum;

  /**
   * Indicates whether this is a return label.  You may also want to set the `rma_number` so you know what is being returned.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_return_label" })
  isReturnLabel?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "label_download_type" })
  labelDownloadType?: CreateLabelRequestBodyLabelDownloadTypeEnum;

  /**
   * The file format that you want the label to be in.  We recommend `pdf` format because it is supported by all carriers, whereas some carriers do not support the `png` or `zpl` formats.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_format" })
  labelFormat?: CreateLabelRequestBodyLabelFormatEnum;

  /**
   * The label image resource that was used to create a custom label image.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_image_id" })
  labelImageId?: string;

  /**
   * The layout (size) that you want the label to be in.  The `label_format` determines which sizes are allowed.  `4x6` is supported for all label formats, whereas `letter` (8.5" x 11") is only supported for `pdf` format.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_layout" })
  labelLayout?: CreateLabelRequestBodyLabelLayoutEnum;

  /**
   * The `label_id` of the original (outgoing) label that the return label is for. This associates the two labels together, which is
   *
   * @remarks
   * required by some carriers.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outbound_label_id" })
  outboundLabelId?: string;

  /**
   * An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rma_number" })
  rmaNumber?: string;

  /**
   * A unique identifier for a carrier drop off point where a merchant plans to deliver packages. This will take precedence over a shipment's ship from address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_from_service_point_id" })
  shipFromServicePointId?: string;

  /**
   * A unique identifier for a carrier service point where the shipment will be delivered by the carrier. This will take precedence over a shipment's ship to address.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ship_to_service_point_id" })
  shipToServicePointId?: string;

  /**
   * The shipment information used to generate the label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shipment" })
  @Type(() => CreateLabelRequestBodyPartialShipmentInput)
  shipment: CreateLabelRequestBodyPartialShipmentInput;

  /**
   * Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "test_label" })
  testLabel?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "validate_address" })
  validateAddress?: CreateLabelRequestBodyValidateAddressEnum;
}
