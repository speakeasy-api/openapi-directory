<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class ReposCreateInOrgRequestBody
{
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     * 
     * @var ?bool $allowAutoMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_auto_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowAutoMerge = null;
    
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     * 
     * @var ?bool $allowMergeCommit
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_merge_commit')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowMergeCommit = null;
    
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     * 
     * @var ?bool $allowRebaseMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_rebase_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowRebaseMerge = null;
    
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     * 
     * @var ?bool $allowSquashMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_squash_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowSquashMerge = null;
    
    /**
     * Pass `true` to create an initial commit with empty README.
     * 
     * @var ?bool $autoInit
     */
	#[\JMS\Serializer\Annotation\SerializedName('auto_init')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $autoInit = null;
    
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
     * 
     * @var ?bool $deleteBranchOnMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('delete_branch_on_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $deleteBranchOnMerge = null;
    
    /**
     * A short description of the repository.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
     * 
     * @var ?string $gitignoreTemplate
     */
	#[\JMS\Serializer\Annotation\SerializedName('gitignore_template')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $gitignoreTemplate = null;
    
    /**
     * Whether downloads are enabled.
     * 
     * @var ?bool $hasDownloads
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_downloads')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasDownloads = null;
    
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     * 
     * @var ?bool $hasIssues
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_issues')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasIssues = null;
    
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     * 
     * @var ?bool $hasProjects
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_projects')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasProjects = null;
    
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     * 
     * @var ?bool $hasWiki
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_wiki')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasWiki = null;
    
    /**
     * A URL with more information about the repository.
     * 
     * @var ?string $homepage
     */
	#[\JMS\Serializer\Annotation\SerializedName('homepage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $homepage = null;
    
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     * 
     * @var ?bool $isTemplate
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_template')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isTemplate = null;
    
    /**
     * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/enterprise-cloud@latest//articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
     * 
     * @var ?string $licenseTemplate
     */
	#[\JMS\Serializer\Annotation\SerializedName('license_template')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $licenseTemplate = null;
    
    /**
     * The default value for a merge commit message.
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodyMergeCommitMessageEnum $mergeCommitMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('merge_commit_message')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodyMergeCommitMessageEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateInOrgRequestBodyMergeCommitMessageEnum $mergeCommitMessage = null;
    
    /**
     * The default value for a merge commit title.
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodyMergeCommitTitleEnum $mergeCommitTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('merge_commit_title')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodyMergeCommitTitleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateInOrgRequestBodyMergeCommitTitleEnum $mergeCommitTitle = null;
    
    /**
     * The name of the repository.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Whether the repository is private.
     * 
     * @var ?bool $private
     */
	#[\JMS\Serializer\Annotation\SerializedName('private')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $private = null;
    
    /**
     * The default value for a squash merge commit message:
     * 
     * 
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum $squashMergeCommitMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('squash_merge_commit_message')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateInOrgRequestBodySquashMergeCommitMessageEnum $squashMergeCommitMessage = null;
    
    /**
     * The default value for a squash merge commit title:
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum $squashMergeCommitTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('squash_merge_commit_title')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateInOrgRequestBodySquashMergeCommitTitleEnum $squashMergeCommitTitle = null;
    
    /**
     * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
     * 
     * @var ?int $teamId
     */
	#[\JMS\Serializer\Annotation\SerializedName('team_id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $teamId = null;
    
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * 
     * @var ?bool $useSquashPrTitleAsDefault
     */
	#[\JMS\Serializer\Annotation\SerializedName('use_squash_pr_title_as_default')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useSquashPrTitleAsDefault = null;
    
    /**
     * The visibility of the repository.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodyVisibilityEnum $visibility
     */
	#[\JMS\Serializer\Annotation\SerializedName('visibility')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\ReposCreateInOrgRequestBodyVisibilityEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ReposCreateInOrgRequestBodyVisibilityEnum $visibility = null;
    
	public function __construct()
	{
		$this->allowAutoMerge = null;
		$this->allowMergeCommit = null;
		$this->allowRebaseMerge = null;
		$this->allowSquashMerge = null;
		$this->autoInit = null;
		$this->deleteBranchOnMerge = null;
		$this->description = null;
		$this->gitignoreTemplate = null;
		$this->hasDownloads = null;
		$this->hasIssues = null;
		$this->hasProjects = null;
		$this->hasWiki = null;
		$this->homepage = null;
		$this->isTemplate = null;
		$this->licenseTemplate = null;
		$this->mergeCommitMessage = null;
		$this->mergeCommitTitle = null;
		$this->name = "";
		$this->private = null;
		$this->squashMergeCommitMessage = null;
		$this->squashMergeCommitTitle = null;
		$this->teamId = null;
		$this->useSquashPrTitleAsDefault = null;
		$this->visibility = null;
	}
}
