/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The destination port range assigned to the Traffic Mirror rule.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesDestinationPortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * The action assigned to the Traffic Mirror rule.
 */
export enum ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesRuleActionEnum {
  Accept = "accept",
  Reject = "reject",
}

/**
 * The source port range assigned to the Traffic Mirror rule.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesSourcePortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * The traffic direction assigned to the Traffic Mirror rule.
 */
export enum ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesTrafficDirectionEnum {
  Ingress = "ingress",
  Egress = "egress",
}

/**
 * Describes the Traffic Mirror rule.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRules extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  destinationCidrBlock?: string;

  @SpeakeasyMetadata()
  destinationPortRange?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesDestinationPortRange;

  @SpeakeasyMetadata()
  protocol?: number;

  @SpeakeasyMetadata()
  ruleAction?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesRuleActionEnum;

  @SpeakeasyMetadata()
  ruleNumber?: number;

  @SpeakeasyMetadata()
  sourceCidrBlock?: string;

  @SpeakeasyMetadata()
  sourcePortRange?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesSourcePortRange;

  @SpeakeasyMetadata()
  trafficDirection?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRulesTrafficDirectionEnum;

  @SpeakeasyMetadata()
  trafficMirrorFilterId?: string;

  @SpeakeasyMetadata()
  trafficMirrorFilterRuleId?: string;
}

/**
 * The destination port range assigned to the Traffic Mirror rule.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesDestinationPortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * The action assigned to the Traffic Mirror rule.
 */
export enum ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesRuleActionEnum {
  Accept = "accept",
  Reject = "reject",
}

/**
 * The source port range assigned to the Traffic Mirror rule.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesSourcePortRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  fromPort?: number;

  @SpeakeasyMetadata()
  toPort?: number;
}

/**
 * The traffic direction assigned to the Traffic Mirror rule.
 */
export enum ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesTrafficDirectionEnum {
  Ingress = "ingress",
  Egress = "egress",
}

/**
 * Describes the Traffic Mirror rule.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRules extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata()
  destinationCidrBlock?: string;

  @SpeakeasyMetadata()
  destinationPortRange?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesDestinationPortRange;

  @SpeakeasyMetadata()
  protocol?: number;

  @SpeakeasyMetadata()
  ruleAction?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesRuleActionEnum;

  @SpeakeasyMetadata()
  ruleNumber?: number;

  @SpeakeasyMetadata()
  sourceCidrBlock?: string;

  @SpeakeasyMetadata()
  sourcePortRange?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesSourcePortRange;

  @SpeakeasyMetadata()
  trafficDirection?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRulesTrafficDirectionEnum;

  @SpeakeasyMetadata()
  trafficMirrorFilterId?: string;

  @SpeakeasyMetadata()
  trafficMirrorFilterRuleId?: string;
}

export enum ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterNetworkServicesEnum {
  AmazonDns = "amazon-dns",
}

/**
 * Describes a tag.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * The Traffic Mirror filter that the network service is associated with.
 */
export class ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilter extends SpeakeasyBase {
  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata({
    elemType:
      ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRules,
  })
  egressFilterRules?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterEgressFilterRules[];

  @SpeakeasyMetadata({
    elemType:
      ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRules,
  })
  ingressFilterRules?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterIngressFilterRules[];

  @SpeakeasyMetadata()
  networkServices?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterNetworkServicesEnum[];

  @SpeakeasyMetadata({
    elemType:
      ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterTags,
  })
  tags?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilterTags[];

  @SpeakeasyMetadata()
  trafficMirrorFilterId?: string;
}

/**
 * Success
 */
export class ModifyTrafficMirrorFilterNetworkServicesResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  trafficMirrorFilter?: ModifyTrafficMirrorFilterNetworkServicesResultTrafficMirrorFilter;
}
