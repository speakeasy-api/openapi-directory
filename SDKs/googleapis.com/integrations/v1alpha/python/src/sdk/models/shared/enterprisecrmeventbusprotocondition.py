"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprotovaluetype as shared_enterprisecrmeventbusprotovaluetype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmEventbusProtoConditionOperatorEnum(str, Enum):
    r"""Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair."""
    UNSET = 'UNSET'
    EQUALS = 'EQUALS'
    CONTAINS = 'CONTAINS'
    LESS_THAN = 'LESS_THAN'
    GREATER_THAN = 'GREATER_THAN'
    EXISTS = 'EXISTS'
    DOES_NOT_EXIST = 'DOES_NOT_EXIST'
    IS_EMPTY = 'IS_EMPTY'
    IS_NOT_EMPTY = 'IS_NOT_EMPTY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusProtoCondition:
    r"""Condition that uses `operator` to evaluate the key against the value."""
    
    event_property_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventPropertyKey'), 'exclude': lambda f: f is None }})
    r"""Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown."""  
    operator: Optional[EnterpriseCrmEventbusProtoConditionOperatorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operator'), 'exclude': lambda f: f is None }})
    r"""Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair."""  
    value: Optional[shared_enterprisecrmeventbusprotovaluetype.EnterpriseCrmEventbusProtoValueType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Used for define type for values. Currently supported value types include int, string, double, array, and any proto message."""  
    