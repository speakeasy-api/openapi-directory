// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AlsblSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type AlsblRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token ID
	TokenNo string `json:"TokenNo"`
}

// AlsblRequestBodyFormatEnum - The format of the certificate in response.
type AlsblRequestBodyFormatEnum string

const (
	AlsblRequestBodyFormatEnumPdf AlsblRequestBodyFormatEnum = "pdf"
)

func (e *AlsblRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = AlsblRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AlsblRequestBodyFormatEnum: %s", s)
	}
}

// AlsblRequestBody - Request format
type AlsblRequestBody struct {
	CertificateParameters *AlsblRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format AlsblRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Alsbl504ApplicationJSONErrorEnum string

const (
	Alsbl504ApplicationJSONErrorEnumGatewayTimeout Alsbl504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Alsbl504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Alsbl504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl504ApplicationJSONErrorEnum: %s", s)
	}
}

type Alsbl504ApplicationJSONErrorDescriptionEnum string

const (
	Alsbl504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Alsbl504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Alsbl504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Alsbl504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alsbl504ApplicationJSON - Gateway timeout
type Alsbl504ApplicationJSON struct {
	Error            *Alsbl504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsbl504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsbl503ApplicationJSONErrorEnum string

const (
	Alsbl503ApplicationJSONErrorEnumServiceUnavailable Alsbl503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Alsbl503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Alsbl503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl503ApplicationJSONErrorEnum: %s", s)
	}
}

type Alsbl503ApplicationJSONErrorDescriptionEnum string

const (
	Alsbl503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Alsbl503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Alsbl503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Alsbl503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alsbl503ApplicationJSON - Service unavailable
type Alsbl503ApplicationJSON struct {
	Error            *Alsbl503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsbl503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsbl502ApplicationJSONErrorEnum string

const (
	Alsbl502ApplicationJSONErrorEnumBadGatewy Alsbl502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Alsbl502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Alsbl502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl502ApplicationJSONErrorEnum: %s", s)
	}
}

type Alsbl502ApplicationJSONErrorDescriptionEnum string

const (
	Alsbl502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Alsbl502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Alsbl502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Alsbl502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alsbl502ApplicationJSON - Bad gateway
type Alsbl502ApplicationJSON struct {
	Error            *Alsbl502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsbl502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsbl500ApplicationJSONErrorEnum string

const (
	Alsbl500ApplicationJSONErrorEnumInternalServerError Alsbl500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Alsbl500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Alsbl500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl500ApplicationJSONErrorEnum: %s", s)
	}
}

type Alsbl500ApplicationJSONErrorDescriptionEnum string

const (
	Alsbl500ApplicationJSONErrorDescriptionEnumInternalServerError Alsbl500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Alsbl500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Alsbl500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alsbl500ApplicationJSON - Internal server error
type Alsbl500ApplicationJSON struct {
	Error            *Alsbl500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsbl500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsbl404ApplicationJSONErrorEnum string

const (
	Alsbl404ApplicationJSONErrorEnumRecordNotFound Alsbl404ApplicationJSONErrorEnum = "record_not_found"
	Alsbl404ApplicationJSONErrorEnumURLNotFound    Alsbl404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Alsbl404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Alsbl404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl404ApplicationJSONErrorEnum: %s", s)
	}
}

type Alsbl404ApplicationJSONErrorDescriptionEnum string

const (
	Alsbl404ApplicationJSONErrorDescriptionEnumNoRecordFound               Alsbl404ApplicationJSONErrorDescriptionEnum = "No record found"
	Alsbl404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Alsbl404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Alsbl404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Alsbl404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alsbl404ApplicationJSON - No record found
type Alsbl404ApplicationJSON struct {
	Error            *Alsbl404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsbl404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsbl401ApplicationJSONErrorEnum string

const (
	Alsbl401ApplicationJSONErrorEnumInvalidAuthentication Alsbl401ApplicationJSONErrorEnum = "invalid_authentication"
	Alsbl401ApplicationJSONErrorEnumInvalidAuthorization  Alsbl401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Alsbl401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Alsbl401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl401ApplicationJSONErrorEnum: %s", s)
	}
}

type Alsbl401ApplicationJSONErrorDescriptionEnum string

const (
	Alsbl401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Alsbl401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Alsbl401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Alsbl401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Alsbl401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Alsbl401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alsbl401ApplicationJSON - Unauthorized access
type Alsbl401ApplicationJSON struct {
	Error            *Alsbl401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsbl401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Alsbl400ApplicationJSONErrorEnum string

const (
	Alsbl400ApplicationJSONErrorEnumMissingParameter Alsbl400ApplicationJSONErrorEnum = "missing_parameter"
	Alsbl400ApplicationJSONErrorEnumInvalidParameter Alsbl400ApplicationJSONErrorEnum = "invalid_parameter"
	Alsbl400ApplicationJSONErrorEnumInvalidFormat    Alsbl400ApplicationJSONErrorEnum = "invalid_format"
	Alsbl400ApplicationJSONErrorEnumInvalidTxnid     Alsbl400ApplicationJSONErrorEnum = "invalid_txnid"
	Alsbl400ApplicationJSONErrorEnumInvalidConsentid Alsbl400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Alsbl400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Alsbl400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl400ApplicationJSONErrorEnum: %s", s)
	}
}

type Alsbl400ApplicationJSONErrorDescriptionEnum string

const (
	Alsbl400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Alsbl400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Alsbl400ApplicationJSONErrorDescriptionEnumBadRequest                              Alsbl400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Alsbl400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Alsbl400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Alsbl400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Alsbl400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Alsbl400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Alsbl400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Alsbl400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Alsbl400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Alsbl400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Alsbl400ApplicationJSON - Bad request
type Alsbl400ApplicationJSON struct {
	Error            *Alsbl400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Alsbl400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type AlsblResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Alsbl400ApplicationJSONObject *Alsbl400ApplicationJSON
	// Unauthorized access
	Alsbl401ApplicationJSONObject *Alsbl401ApplicationJSON
	// No record found
	Alsbl404ApplicationJSONObject *Alsbl404ApplicationJSON
	// Internal server error
	Alsbl500ApplicationJSONObject *Alsbl500ApplicationJSON
	// Bad gateway
	Alsbl502ApplicationJSONObject *Alsbl502ApplicationJSON
	// Service unavailable
	Alsbl503ApplicationJSONObject *Alsbl503ApplicationJSON
	// Gateway timeout
	Alsbl504ApplicationJSONObject *Alsbl504ApplicationJSON
}
