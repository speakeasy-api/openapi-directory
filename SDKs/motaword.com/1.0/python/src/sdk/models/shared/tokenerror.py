"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TokenErrorAccountStatusEnum(str, Enum):
    REGISTERED = 'registered'
    EMAIL_CONFIRMED = 'email_confirmed'
    DELETED = 'deleted'
    SUSPENDED = 'suspended'
    REJECTED = 'rejected'
    APPROVED = 'approved'
    RESUME = 'resume'
    WEBINAR = 'webinar'
    COURSE = 'course'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TokenError:
    r"""Authentication error - for vendor auth, it will also fail if their account is not approved yet. In that case, the error response will include \\"account_status\\" key."""
    
    account_status: Optional[TokenErrorAccountStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_status'), 'exclude': lambda f: f is None }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    help: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('help'), 'exclude': lambda f: f is None }})  
    http_code: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_code'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    