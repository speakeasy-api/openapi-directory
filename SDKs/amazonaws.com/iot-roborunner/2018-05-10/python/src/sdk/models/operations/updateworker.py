"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import cartesiancoordinates as shared_cartesiancoordinates
from ..shared import updateworkerresponse as shared_updateworkerresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkerRequestBodyOrientation:
    r"""Worker orientation measured in units clockwise from north."""
    
    degrees: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('degrees'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkerRequestBodyPosition:
    r"""Supported coordinates for worker position."""
    
    cartesian_coordinates: Optional[shared_cartesiancoordinates.CartesianCoordinates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cartesianCoordinates'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkerRequestBodyVendorProperties:
    r"""Properties of the worker that are provided by the vendor FMS."""
    
    vendor_additional_fixed_properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorAdditionalFixedProperties'), 'exclude': lambda f: f is None }})
    r"""JSON blob containing unstructured vendor properties that are fixed and won't change during regular operation."""  
    vendor_additional_transient_properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorAdditionalTransientProperties'), 'exclude': lambda f: f is None }})
    r"""JSON blob containing unstructured vendor properties that are transient and may change during regular operation."""  
    vendor_worker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorWorkerId'), 'exclude': lambda f: f is None }})
    r"""The worker ID defined by the vendor FMS."""  
    vendor_worker_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorWorkerIpAddress'), 'exclude': lambda f: f is None }})
    r"""The worker IP address defined by the vendor FMS."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateWorkerRequestBody:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Full ARN of the worker."""  
    additional_fixed_properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalFixedProperties'), 'exclude': lambda f: f is None }})
    r"""JSON blob containing unstructured worker properties that are fixed and won't change during regular operation."""  
    additional_transient_properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalTransientProperties'), 'exclude': lambda f: f is None }})
    r"""JSON blob containing unstructured worker properties that are transient and may change during regular operation."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Human friendly name of the resource."""  
    orientation: Optional[UpdateWorkerRequestBodyOrientation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orientation'), 'exclude': lambda f: f is None }})
    r"""Worker orientation measured in units clockwise from north."""  
    position: Optional[UpdateWorkerRequestBodyPosition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""Supported coordinates for worker position."""  
    vendor_properties: Optional[UpdateWorkerRequestBodyVendorProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vendorProperties'), 'exclude': lambda f: f is None }})
    r"""Properties of the worker that are provided by the vendor FMS."""  
    

@dataclasses.dataclass
class UpdateWorkerRequest:
    
    request_body: UpdateWorkerRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateWorkerResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_worker_response: Optional[shared_updateworkerresponse.UpdateWorkerResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    