// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesGetPublicGroupsForReleaseByHashPathParams struct {
	// The secret of the target application
	AppSecret string `pathParam:"style=simple,explode=false,name=app_secret"`
	// The hash of the release
	ReleaseHash string `pathParam:"style=simple,explode=false,name=release_hash"`
}

type ReleasesGetPublicGroupsForReleaseByHashRequest struct {
	PathParams ReleasesGetPublicGroupsForReleaseByHashPathParams
}

type ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum string

const (
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnumBadRequest          ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum = "BadRequest"
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnumConflict            ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum = "Conflict"
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnumNotAcceptable       ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum = "NotAcceptable"
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnumNotFound            ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum = "NotFound"
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnumInternalServerError ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum = "InternalServerError"
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnumUnauthorized        ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum = "Unauthorized"
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnumTooManyRequests     ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum: %s", s)
	}
}

// ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSON - Error Codes:
// - `not_found` - The app doesn't exist
type ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSON struct {
	Code    ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONCodeEnum `json:"code"`
	Message string                                                            `json:"message"`
}

type ReleasesGetPublicGroupsForReleaseByHash200ApplicationJSON struct {
	// The id of the distribution group
	ID string `json:"id"`
}

type ReleasesGetPublicGroupsForReleaseByHashResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The public distribution groups that the release has been distributed to
	ReleasesGetPublicGroupsForReleaseByHash200ApplicationJSONObjects []ReleasesGetPublicGroupsForReleaseByHash200ApplicationJSON
	// Error Codes:
	// - `not_found` - The app doesn't exist
	//
	ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSONObject *ReleasesGetPublicGroupsForReleaseByHash404ApplicationJSON
}
