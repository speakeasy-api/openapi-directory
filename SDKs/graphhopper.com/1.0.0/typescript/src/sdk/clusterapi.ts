/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 *
 * @remarks
 * ### Introduction
 *
 * ![Cluster Example](./img/cluster-solution.jpg)
 *
 * It solves the “capacity clustering problem” by assigning a set of customers to a given number of distinct groups (called clusters).
 * The API “clusters” by minimizing the total distance from each individual customer to its designated group median.
 * It can also consider minimum and maximum capacity restrictions for each group.
 *
 * Clustering can be used in many practical applications.
 * For example, it can help to plan territories, i.e. territory optimization for field teams with large territories for field workers,
 * or to solve large vehicle routing problems (VRP).
 *
 */
export class ClusterAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Batch Cluster Endpoint
   *
   * @remarks
   *
   * Prefer the [synchronous endpoint](#operation/solveClusteringProblem) and use this Batch Cluster endpoint for
   * long running problems only. The work flow is asynchronous:
   *
   * - send a POST request towards `https://graphhopper.com/api/1/cluster/calculate?key=<your_key>` and fetch the job_id.
   * - poll the solution every 500ms until it gives `status=finished`. Do this with a GET request
   *   towards `https://graphhopper.com/api/1/cluster/solution/<job_id>?key=<your_key>`.
   *
   */
  asyncClusteringProblem(
    req: shared.ClusterRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AsyncClusteringProblemResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ClusterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/cluster/calculate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AsyncClusteringProblemResponse =
        new operations.AsyncClusteringProblemResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.jobId = utils.objectToClass(httpRes?.data, shared.JobId);
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequest = utils.objectToClass(
              httpRes?.data,
              shared.BadRequest
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalErrorMessage = utils.objectToClass(
              httpRes?.data,
              shared.InternalErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * GET Batch Solution Endpoint
   *
   * @remarks
   * This endpoint returns the solution of the clustering problems submitted to the [Batch Cluster endpoint](#operation/asyncClusteringProblem).
   * You can fetch it with the job_id, you have been sent.
   *
   */
  getClusterSolution(
    req: operations.GetClusterSolutionRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetClusterSolutionResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetClusterSolutionRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/cluster/solution/{jobId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetClusterSolutionResponse =
        new operations.GetClusterSolutionResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clusterResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClusterResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequest = utils.objectToClass(
              httpRes?.data,
              shared.BadRequest
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getClusterSolution404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetClusterSolution404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * POST Cluster Endpoint
   *
   * @remarks
   *
   * The Cluster endpoint is used with a POST request towards
   * `https://graphhopper.com/api/1/cluster?key=<your_key>`. The solution will be provided in the JSON response.
   * Please note that for problems that take longer than 10 seconds a bad request error is returned.
   * In this case please use the asynchronous [Batch Cluster Endpoint](#operation/asyncClusteringProblem) instead.
   *
   */
  solveClusteringProblem(
    req: shared.ClusterRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SolveClusteringProblemResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ClusterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/cluster";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SolveClusteringProblemResponse =
        new operations.SolveClusteringProblemResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.clusterResponse = utils.objectToClass(
              httpRes?.data,
              shared.ClusterResponse
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.badRequest = utils.objectToClass(
              httpRes?.data,
              shared.BadRequest
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.internalErrorMessage = utils.objectToClass(
              httpRes?.data,
              shared.InternalErrorMessage
            );
          }
          break;
      }

      return res;
    });
  }
}
