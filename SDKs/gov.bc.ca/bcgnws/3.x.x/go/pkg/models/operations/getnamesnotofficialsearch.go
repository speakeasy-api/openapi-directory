// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesNotOfficialSearchEmbedEnum - A flag to indicate whether to embed the corresponding 'feature' into each matching name
type GetNamesNotOfficialSearchEmbedEnum string

const (
	GetNamesNotOfficialSearchEmbedEnumZero GetNamesNotOfficialSearchEmbedEnum = "0"
	GetNamesNotOfficialSearchEmbedEnumOne  GetNamesNotOfficialSearchEmbedEnum = "1"
)

func (e *GetNamesNotOfficialSearchEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = GetNamesNotOfficialSearchEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNotOfficialSearchEmbedEnum: %s", s)
	}
}

// GetNamesNotOfficialSearchExactSpellingEnum - If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
type GetNamesNotOfficialSearchExactSpellingEnum string

const (
	GetNamesNotOfficialSearchExactSpellingEnumZero GetNamesNotOfficialSearchExactSpellingEnum = "0"
	GetNamesNotOfficialSearchExactSpellingEnumOne  GetNamesNotOfficialSearchExactSpellingEnum = "1"
)

func (e *GetNamesNotOfficialSearchExactSpellingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = GetNamesNotOfficialSearchExactSpellingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNotOfficialSearchExactSpellingEnum: %s", s)
	}
}

// GetNamesNotOfficialSearchOutputFormatEnum - The format of the output.
type GetNamesNotOfficialSearchOutputFormatEnum string

const (
	GetNamesNotOfficialSearchOutputFormatEnumJSON GetNamesNotOfficialSearchOutputFormatEnum = "json"
	GetNamesNotOfficialSearchOutputFormatEnumXML  GetNamesNotOfficialSearchOutputFormatEnum = "xml"
	GetNamesNotOfficialSearchOutputFormatEnumKml  GetNamesNotOfficialSearchOutputFormatEnum = "kml"
	GetNamesNotOfficialSearchOutputFormatEnumCsv  GetNamesNotOfficialSearchOutputFormatEnum = "csv"
)

func (e *GetNamesNotOfficialSearchOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		*e = GetNamesNotOfficialSearchOutputFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNotOfficialSearchOutputFormatEnum: %s", s)
	}
}

// GetNamesNotOfficialSearchOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries.
type GetNamesNotOfficialSearchOutputSrsEnum string

const (
	GetNamesNotOfficialSearchOutputSrsEnumFourThousandThreeHundredAndTwentySix   GetNamesNotOfficialSearchOutputSrsEnum = "4326"
	GetNamesNotOfficialSearchOutputSrsEnumFourThousandTwoHundredAndSixtyNine     GetNamesNotOfficialSearchOutputSrsEnum = "4269"
	GetNamesNotOfficialSearchOutputSrsEnumThreeThousandAndFive                   GetNamesNotOfficialSearchOutputSrsEnum = "3005"
	GetNamesNotOfficialSearchOutputSrsEnumThreeThousandEightHundredAndFiftySeven GetNamesNotOfficialSearchOutputSrsEnum = "3857"
	GetNamesNotOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndSeven   GetNamesNotOfficialSearchOutputSrsEnum = "26907"
	GetNamesNotOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndEight   GetNamesNotOfficialSearchOutputSrsEnum = "26908"
	GetNamesNotOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndNine    GetNamesNotOfficialSearchOutputSrsEnum = "26909"
	GetNamesNotOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndTen     GetNamesNotOfficialSearchOutputSrsEnum = "26910"
	GetNamesNotOfficialSearchOutputSrsEnumTwentySixThousandNineHundredAndEleven  GetNamesNotOfficialSearchOutputSrsEnum = "26911"
)

func (e *GetNamesNotOfficialSearchOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4326":
		fallthrough
	case "4269":
		fallthrough
	case "3005":
		fallthrough
	case "3857":
		fallthrough
	case "26907":
		fallthrough
	case "26908":
		fallthrough
	case "26909":
		fallthrough
	case "26910":
		fallthrough
	case "26911":
		*e = GetNamesNotOfficialSearchOutputSrsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNotOfficialSearchOutputSrsEnum: %s", s)
	}
}

// GetNamesNotOfficialSearchOutputStyleEnum - A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
type GetNamesNotOfficialSearchOutputStyleEnum string

const (
	GetNamesNotOfficialSearchOutputStyleEnumSummary GetNamesNotOfficialSearchOutputStyleEnum = "summary"
	GetNamesNotOfficialSearchOutputStyleEnumDetail  GetNamesNotOfficialSearchOutputStyleEnum = "detail"
)

func (e *GetNamesNotOfficialSearchOutputStyleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "summary":
		fallthrough
	case "detail":
		*e = GetNamesNotOfficialSearchOutputStyleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNotOfficialSearchOutputStyleEnum: %s", s)
	}
}

// GetNamesNotOfficialSearchSortByEnum - The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
type GetNamesNotOfficialSearchSortByEnum string

const (
	GetNamesNotOfficialSearchSortByEnumRelevance    GetNamesNotOfficialSearchSortByEnum = "relevance"
	GetNamesNotOfficialSearchSortByEnumName         GetNamesNotOfficialSearchSortByEnum = "name"
	GetNamesNotOfficialSearchSortByEnumFeatureType  GetNamesNotOfficialSearchSortByEnum = "featureType"
	GetNamesNotOfficialSearchSortByEnumDecisionDate GetNamesNotOfficialSearchSortByEnum = "decisionDate"
)

func (e *GetNamesNotOfficialSearchSortByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "relevance":
		fallthrough
	case "name":
		fallthrough
	case "featureType":
		fallthrough
	case "decisionDate":
		*e = GetNamesNotOfficialSearchSortByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesNotOfficialSearchSortByEnum: %s", s)
	}
}

type GetNamesNotOfficialSearchQueryParams struct {
	// A flag to indicate whether to embed the corresponding 'feature' into each matching name
	Embed *GetNamesNotOfficialSearchEmbedEnum `queryParam:"style=form,explode=true,name=embed"`
	// If the 'name' parameter is specified, 'exactSpelling' specifies whether to include only names that exactly match the search text (exactSpelling=1), or whether to also include names with similar spellings (exactSpelling=0)
	ExactSpelling *GetNamesNotOfficialSearchExactSpellingEnum `queryParam:"style=form,explode=true,name=exactSpelling"`
	// A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
	FeatureCategory *string `queryParam:"style=form,explode=true,name=featureCategory"`
	// A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
	FeatureClass *string `queryParam:"style=form,explode=true,name=featureClass"`
	// A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
	FeatureType *string `queryParam:"style=form,explode=true,name=featureType"`
	// The number of search results to return (1-200)
	ItemsPerPage *int64 `queryParam:"style=form,explode=true,name=itemsPerPage"`
	// A filter to search based on the the text of the name itself.  Use the asterisk (*) as a wildcard character.  For example 'vancouv*'
	Name string `queryParam:"style=form,explode=true,name=name"`
	// The format of the output.
	OutputFormat GetNamesNotOfficialSearchOutputFormatEnum `queryParam:"style=form,explode=true,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries.
	OutputSRS *GetNamesNotOfficialSearchOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
	OutputStyle *GetNamesNotOfficialSearchOutputStyleEnum `queryParam:"style=form,explode=true,name=outputStyle"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SortBy *GetNamesNotOfficialSearchSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// The index of the first record to be returned (>= 1)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
}

type GetNamesNotOfficialSearchRequest struct {
	QueryParams GetNamesNotOfficialSearchQueryParams
}

type GetNamesNotOfficialSearchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
