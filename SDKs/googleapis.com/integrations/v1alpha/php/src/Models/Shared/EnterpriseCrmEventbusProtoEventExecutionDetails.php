<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * EnterpriseCrmEventbusProtoEventExecutionDetails - Contains the details of the execution info of this event: this includes the tasks execution details plus the event execution statistics. Next available id: 10
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class EnterpriseCrmEventbusProtoEventExecutionDetails
{
    /**
     * $eventAttemptStats
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats> $eventAttemptStats
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventAttemptStats')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $eventAttemptStats = null;
    
    /**
     * $eventExecutionSnapshot
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EnterpriseCrmEventbusProtoEventExecutionSnapshot> $eventExecutionSnapshot
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventExecutionSnapshot')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EnterpriseCrmEventbusProtoEventExecutionSnapshot>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $eventExecutionSnapshot = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('eventExecutionState')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?EnterpriseCrmEventbusProtoEventExecutionDetailsEventExecutionStateEnum $eventExecutionState = null;
    
    /**
     * Indicates the number of times the execution has restarted from the beginning.
     * 
     * @var ?int $eventRetriesFromBeginningCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('eventRetriesFromBeginningCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $eventRetriesFromBeginningCount = null;
    
    /**
     * The log file path (aka. cns address) for this event.
     * 
     * @var ?string $logFilePath
     */
	#[\JMS\Serializer\Annotation\SerializedName('logFilePath')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $logFilePath = null;
    
    /**
     * The network address (aka. bns address) that indicates where the event executor is running.
     * 
     * @var ?string $networkAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('networkAddress')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $networkAddress = null;
    
    /**
     * Next scheduled execution time in case the execution status was RETRY_ON_HOLD.
     * 
     * @var ?string $nextExecutionTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('nextExecutionTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $nextExecutionTime = null;
    
    /**
     * Used internally and shouldn't be exposed to users. A counter for the cron job to record how many times this event is in in_process state but don't have a lock consecutively/
     * 
     * @var ?int $ryeLockUnheldCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('ryeLockUnheldCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $ryeLockUnheldCount = null;
    
	public function __construct()
	{
		$this->eventAttemptStats = null;
		$this->eventExecutionSnapshot = null;
		$this->eventExecutionState = null;
		$this->eventRetriesFromBeginningCount = null;
		$this->logFilePath = null;
		$this->networkAddress = null;
		$this->nextExecutionTime = null;
		$this->ryeLockUnheldCount = null;
	}
}
