/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PaymentConfiguration } from "./paymentconfiguration";
import { Expose, Type } from "class-transformer";

export class UpdateorderFormconfigurationRequestApps extends SpeakeasyBase {
  /**
   * Array of fields available to the app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fields" })
  fields?: string[];

  /**
   * App ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * App major version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "major" })
  major?: number;
}

/**
 * External tax service configuration.
 */
export class UpdateorderFormconfigurationRequestTaxConfiguration extends SpeakeasyBase {
  /**
   * Custom data ID sent to the tax system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "appId" })
  appId?: string;

  /**
   * Authorization header.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizationHeader" })
  authorizationHeader?: string;

  /**
   * Endpoint URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class UpdateorderFormconfigurationRequest extends SpeakeasyBase {
  /**
   * Allows the editing of SKU prices right in the cart.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowManualPrice" })
  allowManualPrice: boolean;

  /**
   * On the same purchase, allows the selection of items from multiple delivery channels.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowMultipleDeliveries" })
  allowMultipleDeliveries: boolean;

  /**
   * Array of objects containing Apps configuration information.
   */
  @SpeakeasyMetadata({ elemType: UpdateorderFormconfigurationRequestApps })
  @Expose({ name: "apps" })
  @Type(() => UpdateorderFormconfigurationRequestApps)
  apps: UpdateorderFormconfigurationRequestApps[];

  /**
   * Number of price digits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "decimalDigitsPrecision" })
  decimalDigitsPrecision: number;

  /**
   * Allows, on a first purchase, masking client's data. It could be useful when a shared cart is used and the client doesn't want to share its data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maskFirstPurchaseData" })
  maskFirstPurchaseData?: boolean;

  /**
   * Allows the input of a limit of white label sellers involved on the cart.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxNumberOfWhiteLabelSellers" })
  maxNumberOfWhiteLabelSellers?: number;

  /**
   * Minimum SKU quantity by cart.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumQuantityAccumulatedForItems" })
  minimumQuantityAccumulatedForItems: number;

  /**
   * Minimum cart value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minimumValueAccumulated" })
  minimumValueAccumulated: number;

  /**
   * Payment Configuration object
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentConfiguration" })
  @Type(() => PaymentConfiguration)
  paymentConfiguration: PaymentConfiguration;

  /**
   * If you want to apply a first installment discount to a particular payment system, set this field to that payment system's ID. Learn more: [Configuring a discount for orders prepaid in full](https://help.vtex.com/en/tutorial/configurar-desconto-de-preco-a-vista--7Lfcj9Wb5dpYfA2gKkACIt).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentSystemToCheckFirstInstallment" })
  paymentSystemToCheckFirstInstallment?: string;

  /**
   * Configures reCAPTCHA validation for the account, defining in which situations the shopper will be prompted to validate a purchase with reCAPTCHA. Learn more about [reCAPTCHA validation for VTEX stores](https://help.vtex.com/tutorial/recaptcha-no-checkout--18Te3oDd7f4qcjKu9jhNzP)
   * 
   * @remarks
   * 
   * 
Possible values are:
   * 
- `"never"`: no purchases are validated with reCAPTCHA.
   * 
- `"always"`: every purchase is validated with reCAPTCHA.
   * 
- `"vtexCriteria"`: only some purchases are validated with reCAPTCHA in order to minimize friction and improve shopping experience. VTEXâ€™s algorithm determines which sessions are trustworthy and which should be validated with reCAPTCHA. This is the recommended option.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recaptchaValidation" })
  recaptchaValidation?: string;

  /**
   * External tax service configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taxConfiguration" })
  @Type(() => UpdateorderFormconfigurationRequestTaxConfiguration)
  taxConfiguration: UpdateorderFormconfigurationRequestTaxConfiguration;
}
