// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type GetOrganizationLicensingCotermLicensesPathParams struct {
	OrganizationID string `pathParam:"style=simple,explode=false,name=organizationId"`
}

type GetOrganizationLicensingCotermLicensesQueryParams struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Filter for licenses that are expired
	Expired *bool `queryParam:"style=form,explode=true,name=expired"`
	// Filter for licenses that are invalidated
	Invalidated *bool `queryParam:"style=form,explode=true,name=invalidated"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
}

type GetOrganizationLicensingCotermLicensesRequest struct {
	PathParams  GetOrganizationLicensingCotermLicensesPathParams
	QueryParams GetOrganizationLicensingCotermLicensesQueryParams
}

type GetOrganizationLicensingCotermLicenses200ApplicationJSONCounts struct {
	// The number of counts the license contains of this model
	Count *int64 `json:"count,omitempty"`
	// The license model type
	Model *string `json:"model,omitempty"`
}

type GetOrganizationLicensingCotermLicenses200ApplicationJSONEditions struct {
	// The name of the license edition
	Edition *string `json:"edition,omitempty"`
	// The product type of the license edition
	ProductType *string `json:"productType,omitempty"`
}

// GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum - The operation mode of the license when it was claimed
type GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum string

const (
	GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnumAddDevices GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum = "addDevices"
	GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnumRenew      GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum = "renew"
)

func (e *GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "addDevices":
		fallthrough
	case "renew":
		*e = GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum: %s", s)
	}
}

type GetOrganizationLicensingCotermLicenses200ApplicationJSON struct {
	// When the license was claimed into the organization
	ClaimedAt *time.Time `json:"claimedAt,omitempty"`
	// The counts of the license by model type
	Counts []GetOrganizationLicensingCotermLicenses200ApplicationJSONCounts `json:"counts,omitempty"`
	// The duration (term length) of the license, measured in days
	Duration *int64 `json:"duration,omitempty"`
	// The editions of the license for each relevant product type
	Editions []GetOrganizationLicensingCotermLicenses200ApplicationJSONEditions `json:"editions,omitempty"`
	// Flag to indicate if the license is expired
	Expired *bool `json:"expired,omitempty"`
	// Flag to indicated that the license is invalidated
	Invalidated *bool `json:"invalidated,omitempty"`
	// When the license was invalidated. Will be null for active licenses
	InvalidatedAt *time.Time `json:"invalidatedAt,omitempty"`
	// The key of the license
	Key *string `json:"key,omitempty"`
	// The operation mode of the license when it was claimed
	Mode *GetOrganizationLicensingCotermLicenses200ApplicationJSONModeEnum `json:"mode,omitempty"`
	// The ID of the organization that the license is claimed in
	OrganizationID *string `json:"organizationId,omitempty"`
	// When the license's term began (approximately the date when the license was created)
	StartedAt *time.Time `json:"startedAt,omitempty"`
}

type GetOrganizationLicensingCotermLicensesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationLicensingCotermLicenses200ApplicationJSONObjects []GetOrganizationLicensingCotermLicenses200ApplicationJSON
}
