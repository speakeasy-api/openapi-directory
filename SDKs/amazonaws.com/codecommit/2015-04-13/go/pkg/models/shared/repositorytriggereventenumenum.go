// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type RepositoryTriggerEventEnumEnum string

const (
	RepositoryTriggerEventEnumEnumAll             RepositoryTriggerEventEnumEnum = "all"
	RepositoryTriggerEventEnumEnumUpdateReference RepositoryTriggerEventEnumEnum = "updateReference"
	RepositoryTriggerEventEnumEnumCreateReference RepositoryTriggerEventEnumEnum = "createReference"
	RepositoryTriggerEventEnumEnumDeleteReference RepositoryTriggerEventEnumEnum = "deleteReference"
)

func (e RepositoryTriggerEventEnumEnum) ToPointer() *RepositoryTriggerEventEnumEnum {
	return &e
}

func (e *RepositoryTriggerEventEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "updateReference":
		fallthrough
	case "createReference":
		fallthrough
	case "deleteReference":
		*e = RepositoryTriggerEventEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RepositoryTriggerEventEnumEnum: %v", v)
	}
}
