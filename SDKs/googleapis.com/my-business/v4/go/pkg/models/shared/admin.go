// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AdminRoleEnum - Specifies the AdminRole that this admin uses with the specified Account or Location resource.
type AdminRoleEnum string

const (
	AdminRoleEnumAdminRoleUnspecified AdminRoleEnum = "ADMIN_ROLE_UNSPECIFIED"
	AdminRoleEnumOwner                AdminRoleEnum = "OWNER"
	AdminRoleEnumCoOwner              AdminRoleEnum = "CO_OWNER"
	AdminRoleEnumManager              AdminRoleEnum = "MANAGER"
	AdminRoleEnumCommunityManager     AdminRoleEnum = "COMMUNITY_MANAGER"
)

func (e *AdminRoleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ADMIN_ROLE_UNSPECIFIED":
		fallthrough
	case "OWNER":
		fallthrough
	case "CO_OWNER":
		fallthrough
	case "MANAGER":
		fallthrough
	case "COMMUNITY_MANAGER":
		*e = AdminRoleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AdminRoleEnum: %s", s)
	}
}

// Admin - An administrator of an Account or a Location.
type Admin struct {
	// The name of the admin. When making the initial invitation, this is the invitee's email address. On `GET` calls, the user's email address is returned if the invitation is still pending. Otherwise, it contains the user's first and last names.
	AdminName *string `json:"adminName,omitempty"`
	// The resource name. For account admins, this is in the form: `accounts/{account_id}/admins/{admin_id}` For location admins, this is in the form: `accounts/{account_id}/locations/{location_id}/admins/{admin_id}`
	Name *string `json:"name,omitempty"`
	// Output only. Indicates whether this admin has a pending invitation for the specified resource.
	PendingInvitation *bool `json:"pendingInvitation,omitempty"`
	// Specifies the AdminRole that this admin uses with the specified Account or Location resource.
	Role *AdminRoleEnum `json:"role,omitempty"`
}
