"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ConsentFlow:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_v0_5_consent_requests_on_init_json(self, request: operations.PostV05ConsentRequestsOnInitJSONRequest, server_url: Optional[str] = None) -> operations.PostV05ConsentRequestsOnInitJSONResponse:
        r"""Response to consent request
        Result of consent request creation for a patient. **id** represents the consentrequest id created by CM. The result must contain either **id** or the **error** caused. <br/>
          Reasons for error may be
          * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission
        """
        base_url = operations.POST_V0_5_CONSENT_REQUESTS_ON_INIT_JSON_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/on-init'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "consent_request_init_response", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsOnInitJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consent_requests_on_init_raw(self, request: operations.PostV05ConsentRequestsOnInitRawRequest, server_url: Optional[str] = None) -> operations.PostV05ConsentRequestsOnInitRawResponse:
        r"""Response to consent request
        Result of consent request creation for a patient. **id** represents the consentrequest id created by CM. The result must contain either **id** or the **error** caused. <br/>
          Reasons for error may be
          * Invalid references (e.g patient id, hiu id), purpose, hiTypes, ranges, persmission
        """
        base_url = operations.POST_V0_5_CONSENT_REQUESTS_ON_INIT_RAW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/on-init'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsOnInitRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consent_requests_on_status_json(self, request: operations.PostV05ConsentRequestsOnStatusJSONRequest, server_url: Optional[str] = None) -> operations.PostV05ConsentRequestsOnStatusJSONResponse:
        r"""Result of consent request status
        Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then
        """
        base_url = operations.POST_V0_5_CONSENT_REQUESTS_ON_STATUS_JSON_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/on-status'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hiu_consent_request_status", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsOnStatusJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consent_requests_on_status_raw(self, request: operations.PostV05ConsentRequestsOnStatusRawRequest, server_url: Optional[str] = None) -> operations.PostV05ConsentRequestsOnStatusRawResponse:
        r"""Result of consent request status
        Result of consent request done previously. Status of request can be GRANTED,  DENIED, EXPIRED. If the request was GRANTED, then
        """
        base_url = operations.POST_V0_5_CONSENT_REQUESTS_ON_STATUS_RAW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consent-requests/on-status'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentRequestsOnStatusRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consents_hiu_notify(self, request: operations.PostV05ConsentsHiuNotifyRequest, server_url: Optional[str] = None) -> operations.PostV05ConsentsHiuNotifyResponse:
        r"""Consent notification
        Health information user will get notified about the consent request granted or denied, consent revoked, consent expired. 
        1. For consent request grant, status=GRANTED, consentRequestId=<consent-request-id>, and consentArtefacts is an array of generated consent artefact Ids.
        2. For consent request expiry, status=EXPIRED, consentRequestId=<consent-request-id>
        3. For consent request denied, status=DENIED, consentRequestId=<consent-request-id>
        4. For consent revocation, status=REVOKED, consentArtefacts is an array of revoked consent artefact ids
        """
        base_url = operations.POST_V0_5_CONSENTS_HIU_NOTIFY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consents/hiu/notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hiu_consent_notification_event", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentsHiuNotifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consents_on_fetch_json(self, request: operations.PostV05ConsentsOnFetchJSONRequest, server_url: Optional[str] = None) -> operations.PostV05ConsentsOnFetchJSONResponse:
        r"""Result of fetch request for a consent artefact
        Must contain either consent or error. Possible reason of errors are 
        1. consentId passed through /fetch is invalid
        """
        base_url = operations.POST_V0_5_CONSENTS_ON_FETCH_JSON_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consents/on-fetch'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "consent_artefact_response", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentsOnFetchJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_consents_on_fetch_raw(self, request: operations.PostV05ConsentsOnFetchRawRequest, server_url: Optional[str] = None) -> operations.PostV05ConsentsOnFetchRawResponse:
        r"""Result of fetch request for a consent artefact
        Must contain either consent or error. Possible reason of errors are 
        1. consentId passed through /fetch is invalid
        """
        base_url = operations.POST_V0_5_CONSENTS_ON_FETCH_RAW_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v0.5/consents/on-fetch'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05ConsentsOnFetchRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    