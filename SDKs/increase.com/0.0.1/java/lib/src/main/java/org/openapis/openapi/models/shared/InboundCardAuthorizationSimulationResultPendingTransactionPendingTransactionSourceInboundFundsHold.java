/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold - A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.
 */
public class InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold {
    /**
     * The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.
     */
    @JsonProperty("amount")
    public Long amount;
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * When the hold will be released automatically. Certain conditions may cause it to be released before this time.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("automatically_releases_at")
    public OffsetDateTime automaticallyReleasesAt;
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold withAutomaticallyReleasesAt(OffsetDateTime automaticallyReleasesAt) {
        this.automaticallyReleasesAt = automaticallyReleasesAt;
        return this;
    }
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.
     */
    @JsonProperty("currency")
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum currency;
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold withCurrency(InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldCurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The ID of the Transaction for which funds were held.
     */
    @JsonProperty("held_transaction_id")
    public String heldTransactionId;
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold withHeldTransactionId(String heldTransactionId) {
        this.heldTransactionId = heldTransactionId;
        return this;
    }
    
    /**
     * When the hold was released (if it has been released).
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("released_at")
    public OffsetDateTime releasedAt;
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold withReleasedAt(OffsetDateTime releasedAt) {
        this.releasedAt = releasedAt;
        return this;
    }
    
    /**
     * The status of the hold.
     */
    @JsonProperty("status")
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum status;
    public InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHold withStatus(InboundCardAuthorizationSimulationResultPendingTransactionPendingTransactionSourceInboundFundsHoldStatusEnum status) {
        this.status = status;
        return this;
    }
    
}
