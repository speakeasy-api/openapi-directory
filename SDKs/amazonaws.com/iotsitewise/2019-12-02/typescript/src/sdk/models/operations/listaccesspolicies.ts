/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The type of identity (IAM Identity Center user, IAM Identity Center group, or IAM user). This parameter is required if you specify <code>identityId</code>.
 */
export enum ListAccessPoliciesIdentityTypeEnum {
  User = "USER",
  Group = "GROUP",
  Iam = "IAM",
}

/**
 * The type of resource (portal or project). This parameter is required if you specify <code>resourceId</code>.
 */
export enum ListAccessPoliciesResourceTypeEnum {
  Portal = "PORTAL",
  Project = "PROJECT",
}

export class ListAccessPoliciesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ARN of the IAM user. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM ARNs</a> in the <i>IAM User Guide</i>. This parameter is required if you specify <code>IAM</code> for <code>identityType</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=iamArn",
  })
  iamArn?: string;

  /**
   * The ID of the identity. This parameter is required if you specify <code>USER</code> or <code>GROUP</code> for <code>identityType</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=identityId",
  })
  identityId?: string;

  /**
   * The type of identity (IAM Identity Center user, IAM Identity Center group, or IAM user). This parameter is required if you specify <code>identityId</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=identityType",
  })
  identityType?: ListAccessPoliciesIdentityTypeEnum;

  /**
   * <p>The maximum number of results to return for each paginated request.</p> <p>Default: 50</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * The token to be used for the next set of paginated results.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;

  /**
   * The ID of the resource. This parameter is required if you specify <code>resourceType</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resourceId",
  })
  resourceId?: string;

  /**
   * The type of resource (portal or project). This parameter is required if you specify <code>resourceId</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=resourceType",
  })
  resourceType?: ListAccessPoliciesResourceTypeEnum;
}

export class ListAccessPoliciesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listAccessPoliciesResponse?: shared.ListAccessPoliciesResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
