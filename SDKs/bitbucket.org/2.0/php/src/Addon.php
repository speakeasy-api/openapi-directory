<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Addon 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an app
     * 
     * Deletes the application for the user.
     * 
     * This endpoint is intended to be used by Bitbucket Connect apps
     * and only supports JWT authentication -- that is how Bitbucket
     * identifies the particular installation of the app. Developers
     * with applications registered in the "Develop Apps" section
     * of Bitbucket Marketplace need not use this endpoint as
     * updates for those applications can be sent out via the
     * UI of that section.
     * 
     * ```
     * $ curl -X DELETE https://api.bitbucket.org/2.0/addon \
     *   -H "Authorization: JWT <JWT Token>"
     * ```
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAddonResponse
     */
	public function deleteAddon(
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAddonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAddonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete all linker values
     * 
     * Delete all [linker](/cloud/bitbucket/modules/linker/) values for the
     * specified linker of the authenticated application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesResponse
     */
	public function deleteAddonLinkersLinkerKeyValues(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers/{linker_key}/values', \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a linker value
     * 
     * Delete a single [linker](/cloud/bitbucket/modules/linker/) value
     * of the authenticated application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdResponse
     */
	public function deleteAddonLinkersLinkerKeyValuesValueId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers/{linker_key}/values/{value_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAddonLinkersLinkerKeyValuesValueIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List linkers for an app
     * 
     * Gets a list of all [linkers](/cloud/bitbucket/modules/linker/)
     * for the authenticated application.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersResponse
     */
	public function getAddonLinkers(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a linker for an app
     * 
     * Gets a [linker](/cloud/bitbucket/modules/linker/) specified by `linker_key`
     * for the authenticated application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyResponse
     */
	public function getAddonLinkersLinkerKey(
        \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers/{linker_key}', \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List linker values for a linker
     * 
     * Gets a list of all [linker](/cloud/bitbucket/modules/linker/) values for the
     * specified linker of the authenticated application.
     * 
     * A linker value lets applications supply values to modify its regular expression.
     * 
     * The base regular expression must use a Bitbucket-specific match group `(?K)`
     * which will be translated to `([\w\-]+)`. A value must match this pattern.
     * 
     * [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesResponse
     */
	public function getAddonLinkersLinkerKeyValues(
        \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers/{linker_key}/values', \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a linker value
     * 
     * Get a single [linker](/cloud/bitbucket/modules/linker/) value
     * of the authenticated application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdResponse
     */
	public function getAddonLinkersLinkerKeyValuesValueId(
        \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers/{linker_key}/values/{value_id}', \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddonLinkersLinkerKeyValuesValueIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a linker value
     * 
     * Creates a [linker](/cloud/bitbucket/modules/linker/) value for the specified
     * linker of authenticated application.
     * 
     * A linker value lets applications supply values to modify its regular expression.
     * 
     * The base regular expression must use a Bitbucket-specific match group `(?K)`
     * which will be translated to `([\w\-]+)`. A value must match this pattern.
     * 
     * [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesResponse
     */
	public function postAddonLinkersLinkerKeyValues(
        \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers/{linker_key}/values', \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAddonLinkersLinkerKeyValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an installed app
     * 
     * Updates the application installation for the user.
     * 
     * This endpoint is intended to be used by Bitbucket Connect apps
     * and only supports JWT authentication -- that is how Bitbucket
     * identifies the particular installation of the app. Developers
     * with applications registered in the "Develop Apps" section
     * of Bitbucket need not use this endpoint as updates for those
     * applications can be sent out via the UI of that section.
     * 
     * Passing an empty body will update the installation using the
     * existing descriptor URL.
     * 
     * ```
     * $ curl -X PUT https://api.bitbucket.org/2.0/addon \
     *   -H "Authorization: JWT <JWT Token>" \
     *   --header "Content-Type: application/json" \
     *   --data '{}'
     * ```
     * 
     * The new `descriptor` for the installation can be also provided
     * in the body directly.
     * 
     * ```
     * $ curl -X PUT https://api.bitbucket.org/2.0/addon \
     *   -H "Authorization: JWT <JWT Token>" \
     *   --header "Content-Type: application/json" \
     *   --data '{"descriptor": $NEW_DESCRIPTOR}'
     * ```
     * 
     * In both these modes the URL of the descriptor cannot be changed. To
     * change the descriptor location and upgrade an installation
     * the request must be made exclusively with a `descriptor_url`.
     * 
     *  ```
     * $ curl -X PUT https://api.bitbucket.org/2.0/addon \
     *   -H "Authorization: JWT <JWT Token>" \
     *   --header "Content-Type: application/json" \
     *   --data '{"descriptor_url": $NEW_URL}'
     * ```
     * 
     * The `descriptor_url` must exactly match the marketplace registration
     * that Atlassian has for the application. Contact your Atlassian
     * developer advocate to update this registration. Once the registration
     * has been updated you may call this resource for each installation.
     * 
     * Note that the scopes of the application cannot be increased
     * in the new descriptor nor reduced to none.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PutAddonResponse
     */
	public function putAddon(
    ): \OpenAPI\OpenAPI\Models\Operations\PutAddonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutAddonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a linker value
     * 
     * Bulk update [linker](/cloud/bitbucket/modules/linker/) values for the specified
     * linker of the authenticated application.
     * 
     * A linker value lets applications supply values to modify its regular expression.
     * 
     * The base regular expression must use a Bitbucket-specific match group `(?K)`
     * which will be translated to `([\w\-]+)`. A value must match this pattern.
     * 
     * [Read more about linker values](/cloud/bitbucket/modules/linker/#usingthebitbucketapitosupplyvalues)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesResponse
     */
	public function putAddonLinkersLinkerKeyValues(
        \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/addon/linkers/{linker_key}/values', \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutAddonLinkersLinkerKeyValuesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}