/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IPAllocationPolicyInput - Configuration for controlling how IPs are allocated in the cluster.
 */
public class IPAllocationPolicyInput {
    /**
     * AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalPodRangesConfig")
    public AdditionalPodRangesConfig additionalPodRangesConfig;

    public IPAllocationPolicyInput withAdditionalPodRangesConfig(AdditionalPodRangesConfig additionalPodRangesConfig) {
        this.additionalPodRangesConfig = additionalPodRangesConfig;
        return this;
    }
    
    /**
     * If true, allow allocation of cluster CIDR ranges that overlap with certain kinds of network routes. By default we do not allow cluster CIDR ranges to intersect with any user declared routes. With allow_route_overlap == true, we allow overlapping with CIDR ranges that are larger than the cluster CIDR range. If this field is set to true, then cluster and services CIDRs must be fully-specified (e.g. `10.96.0.0/14`, but not `/14`), which means: 1) When `use_ip_aliases` is true, `cluster_ipv4_cidr_block` and `services_ipv4_cidr_block` must be fully-specified. 2) When `use_ip_aliases` is false, `cluster.cluster_ipv4_cidr` muse be fully-specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowRouteOverlap")
    public Boolean allowRouteOverlap;

    public IPAllocationPolicyInput withAllowRouteOverlap(Boolean allowRouteOverlap) {
        this.allowRouteOverlap = allowRouteOverlap;
        return this;
    }
    
    /**
     * This field is deprecated, use cluster_ipv4_cidr_block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterIpv4Cidr")
    public String clusterIpv4Cidr;

    public IPAllocationPolicyInput withClusterIpv4Cidr(String clusterIpv4Cidr) {
        this.clusterIpv4Cidr = clusterIpv4Cidr;
        return this;
    }
    
    /**
     * The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterIpv4CidrBlock")
    public String clusterIpv4CidrBlock;

    public IPAllocationPolicyInput withClusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
        this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
        return this;
    }
    
    /**
     * The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterSecondaryRangeName")
    public String clusterSecondaryRangeName;

    public IPAllocationPolicyInput withClusterSecondaryRangeName(String clusterSecondaryRangeName) {
        this.clusterSecondaryRangeName = clusterSecondaryRangeName;
        return this;
    }
    
    /**
     * Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createSubnetwork")
    public Boolean createSubnetwork;

    public IPAllocationPolicyInput withCreateSubnetwork(Boolean createSubnetwork) {
        this.createSubnetwork = createSubnetwork;
        return this;
    }
    
    /**
     * The ipv6 access type (internal or external) when create_subnetwork is true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipv6AccessType")
    public IPAllocationPolicyIpv6AccessTypeEnum ipv6AccessType;

    public IPAllocationPolicyInput withIpv6AccessType(IPAllocationPolicyIpv6AccessTypeEnum ipv6AccessType) {
        this.ipv6AccessType = ipv6AccessType;
        return this;
    }
    
    /**
     * This field is deprecated, use node_ipv4_cidr_block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeIpv4Cidr")
    public String nodeIpv4Cidr;

    public IPAllocationPolicyInput withNodeIpv4Cidr(String nodeIpv4Cidr) {
        this.nodeIpv4Cidr = nodeIpv4Cidr;
        return this;
    }
    
    /**
     * The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeIpv4CidrBlock")
    public String nodeIpv4CidrBlock;

    public IPAllocationPolicyInput withNodeIpv4CidrBlock(String nodeIpv4CidrBlock) {
        this.nodeIpv4CidrBlock = nodeIpv4CidrBlock;
        return this;
    }
    
    /**
     * [PRIVATE FIELD] Config for pod CIDR size overprovisioning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("podCidrOverprovisionConfig")
    public PodCIDROverprovisionConfig podCidrOverprovisionConfig;

    public IPAllocationPolicyInput withPodCidrOverprovisionConfig(PodCIDROverprovisionConfig podCidrOverprovisionConfig) {
        this.podCidrOverprovisionConfig = podCidrOverprovisionConfig;
        return this;
    }
    
    /**
     * This field is deprecated, use services_ipv4_cidr_block.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicesIpv4Cidr")
    public String servicesIpv4Cidr;

    public IPAllocationPolicyInput withServicesIpv4Cidr(String servicesIpv4Cidr) {
        this.servicesIpv4Cidr = servicesIpv4Cidr;
        return this;
    }
    
    /**
     * The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicesIpv4CidrBlock")
    public String servicesIpv4CidrBlock;

    public IPAllocationPolicyInput withServicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
        this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
        return this;
    }
    
    /**
     * The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases and create_subnetwork is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("servicesSecondaryRangeName")
    public String servicesSecondaryRangeName;

    public IPAllocationPolicyInput withServicesSecondaryRangeName(String servicesSecondaryRangeName) {
        this.servicesSecondaryRangeName = servicesSecondaryRangeName;
        return this;
    }
    
    /**
     * IP stack type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stackType")
    public IPAllocationPolicyStackTypeEnum stackType;

    public IPAllocationPolicyInput withStackType(IPAllocationPolicyStackTypeEnum stackType) {
        this.stackType = stackType;
        return this;
    }
    
    /**
     * A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subnetworkName")
    public String subnetworkName;

    public IPAllocationPolicyInput withSubnetworkName(String subnetworkName) {
        this.subnetworkName = subnetworkName;
        return this;
    }
    
    /**
     * The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. This field is deprecated, use cluster.tpu_config.ipv4_cidr_block instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tpuIpv4CidrBlock")
    public String tpuIpv4CidrBlock;

    public IPAllocationPolicyInput withTpuIpv4CidrBlock(String tpuIpv4CidrBlock) {
        this.tpuIpv4CidrBlock = tpuIpv4CidrBlock;
        return this;
    }
    
    /**
     * Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useIpAliases")
    public Boolean useIpAliases;

    public IPAllocationPolicyInput withUseIpAliases(Boolean useIpAliases) {
        this.useIpAliases = useIpAliases;
        return this;
    }
    
    /**
     * Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("useRoutes")
    public Boolean useRoutes;

    public IPAllocationPolicyInput withUseRoutes(Boolean useRoutes) {
        this.useRoutes = useRoutes;
        return this;
    }
    
    public IPAllocationPolicyInput(){}
}
