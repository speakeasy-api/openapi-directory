"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Connector:
    r"""Successful GET on Connector resource"""
    
    beta: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beta') }})
    r"""If true, this connector is perhaps unstable :)"""  
    charged: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('charged') }})
    r"""Usage of this connector is charged"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the connector"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the bank or provider"""  
    restricted: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restricted') }})
    r"""If true, new connections cannot be added with this connector"""  
    uuid: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid') }})
    r"""Unique connector identifier"""  
    auth_mechanism: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth_mechanism'), 'exclude': lambda f: f is None }})
    r"""Authentication mechanism to use"""  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""Bank code"""  
    color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('color'), 'exclude': lambda f: f is None }})
    r"""Main color of the bank or provider"""  
    hidden: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hidden'), 'exclude': lambda f: f is None }})
    r"""This connector is hidden from your users"""  
    months_to_fetch: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('months_to_fetch'), 'exclude': lambda f: f is None }})
    r"""How many months of history to fetch"""  
    siret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('siret'), 'exclude': lambda f: f is None }})
    r"""SIRET code for Bill modules"""  
    slug: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug'), 'exclude': lambda f: f is None }})  
    sync_frequency: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sync_frequency'), 'exclude': lambda f: f is None }})
    r"""How many days to wait between syncs"""  
    