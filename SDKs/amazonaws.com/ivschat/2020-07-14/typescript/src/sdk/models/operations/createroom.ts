/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Configuration information for optional message review.
 */
export class CreateRoomRequestBodyMessageReviewHandler extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "fallbackResult" })
  fallbackResult?: shared.FallbackResultEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

export class CreateRoomRequestBody extends SpeakeasyBase {
  /**
   * Array of logging-configuration identifiers attached to the room.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "loggingConfigurationIdentifiers" })
  loggingConfigurationIdentifiers?: string[];

  /**
   * Maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumMessageLength" })
  maximumMessageLength?: number;

  /**
   * Maximum number of messages per second that can be sent to the room (by all clients). Default: 10.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maximumMessageRatePerSecond" })
  maximumMessageRatePerSecond?: number;

  /**
   * Configuration information for optional message review.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messageReviewHandler" })
  @Type(() => CreateRoomRequestBodyMessageReviewHandler)
  messageReviewHandler?: CreateRoomRequestBodyMessageReviewHandler;

  /**
   * Room name. The value does not need to be unique.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Tags to attach to the resource. Array of maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging AWS Resources</a> for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS Chat has no constraints beyond what is documented there.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateRoomRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateRoomRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateRoomResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createRoomResponse?: shared.CreateRoomResponse;

  /**
   * PendingVerification
   */
  @SpeakeasyMetadata()
  pendingVerification?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
