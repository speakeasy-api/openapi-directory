"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chargetier as shared_chargetier
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RecurringVolumePricingUpdatePriceChangeOptionEnum(str, Enum):
    r"""Specifies how Zuora changes the price of the charge each time the subscription renews.
    
    If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
    """
    NO_CHANGE = 'NoChange'
    SPECIFIC_PERCENTAGE_VALUE = 'SpecificPercentageValue'
    USE_LATEST_PRODUCT_CATALOG_PRICING = 'UseLatestProductCatalogPricing'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecurringVolumePricingUpdate:
    
    price_change_option: Optional[RecurringVolumePricingUpdatePriceChangeOptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceChangeOption'), 'exclude': lambda f: f is None }})
    r"""Specifies how Zuora changes the price of the charge each time the subscription renews.
    
    If the value of this field is `SpecificPercentageValue`, use the `priceIncreasePercentage` field to specify how much the price of the charge should change.
    """  
    price_increase_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceIncreasePercentage'), 'exclude': lambda f: f is None }})
    r"""Specifies the percentage by which the price of the charge should change each time the subscription renews. Only applicable if the value of the `priceChangeOption` field is `SpecificPercentageValue`."""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})  
    tiers: Optional[list[shared_chargetier.ChargeTier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tiers'), 'exclude': lambda f: f is None }})  
    