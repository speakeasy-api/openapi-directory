"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetIosPostInstallAttributionResponseAttributionConfidenceEnum(str, Enum):
    r"""The confidence of the returned attribution."""
    UNKNOWN_ATTRIBUTION_CONFIDENCE = 'UNKNOWN_ATTRIBUTION_CONFIDENCE'
    WEAK = 'WEAK'
    DEFAULT = 'DEFAULT'
    UNIQUE = 'UNIQUE'

class GetIosPostInstallAttributionResponseRequestIPVersionEnum(str, Enum):
    r"""Which IP version the request was made from."""
    UNKNOWN_IP_VERSION = 'UNKNOWN_IP_VERSION'
    IP_V4 = 'IP_V4'
    IP_V6 = 'IP_V6'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetIosPostInstallAttributionResponse:
    r"""Response for iSDK to execute strong match flow for post-install attribution."""
    
    app_minimum_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appMinimumVersion'), 'exclude': lambda f: f is None }})
    r"""The minimum version for app, specified by dev through ?imv= parameter. Return to iSDK to allow app to evaluate if current version meets this."""  
    attribution_confidence: Optional[GetIosPostInstallAttributionResponseAttributionConfidenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributionConfidence'), 'exclude': lambda f: f is None }})
    r"""The confidence of the returned attribution."""  
    deep_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deepLink'), 'exclude': lambda f: f is None }})
    r"""The deep-link attributed post-install via one of several techniques (fingerprint, copy unique)."""  
    external_browser_destination_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalBrowserDestinationLink'), 'exclude': lambda f: f is None }})
    r"""User-agent specific custom-scheme URIs for iSDK to open. This will be set according to the user-agent tha the click was originally made in. There is no Safari-equivalent custom-scheme open URLs. ie: googlechrome://www.example.com ie: firefox://open-url?url=http://www.example.com ie: opera-http://example.com"""  
    fallback_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fallbackLink'), 'exclude': lambda f: f is None }})
    r"""The link to navigate to update the app if min version is not met. This is either (in order): 1) fallback link (from ?ifl= parameter, if specified by developer) or 2) AppStore URL (from ?isi= parameter, if specified), or 3) the payload link (from required link= parameter)."""  
    invitation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invitationId'), 'exclude': lambda f: f is None }})
    r"""Invitation ID attributed post-install via one of several techniques (fingerprint, copy unique)."""  
    is_strong_match_executable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isStrongMatchExecutable'), 'exclude': lambda f: f is None }})
    r"""Instruction for iSDK to attemmpt to perform strong match. For instance, if browser does not support/allow cookie or outside of support browsers, this will be false."""  
    match_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchMessage'), 'exclude': lambda f: f is None }})
    r"""Describes why match failed, ie: \\"discarded due to low confidence\\". This message will be publicly visible."""  
    requested_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedLink'), 'exclude': lambda f: f is None }})
    r"""Entire FDL (short or long) attributed post-install via one of several techniques (fingerprint, copy unique)."""  
    request_ip_version: Optional[GetIosPostInstallAttributionResponseRequestIPVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestIpVersion'), 'exclude': lambda f: f is None }})
    r"""Which IP version the request was made from."""  
    resolved_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolvedLink'), 'exclude': lambda f: f is None }})
    r"""The entire FDL, expanded from a short link. It is the same as the requested_link, if it is long. Parameters from this should not be used directly (ie: server can default utm_[campaign|medium|source] to a value when requested_link lack them, server determine the best fallback_link when requested_link specifies >1 fallback links)."""  
    utm_campaign: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmCampaign'), 'exclude': lambda f: f is None }})
    r"""Scion campaign value to be propagated by iSDK to Scion at post-install."""  
    utm_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmContent'), 'exclude': lambda f: f is None }})
    r"""Scion content value to be propagated by iSDK to Scion at app-reopen."""  
    utm_medium: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmMedium'), 'exclude': lambda f: f is None }})
    r"""Scion medium value to be propagated by iSDK to Scion at post-install."""  
    utm_source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmSource'), 'exclude': lambda f: f is None }})
    r"""Scion source value to be propagated by iSDK to Scion at post-install."""  
    utm_term: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('utmTerm'), 'exclude': lambda f: f is None }})
    r"""Scion term value to be propagated by iSDK to Scion at app-reopen."""  
    