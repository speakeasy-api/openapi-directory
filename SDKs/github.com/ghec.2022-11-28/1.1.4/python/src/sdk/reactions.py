"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Reactions:
    r"""Interact with reactions to various GitHub entities."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def reactions_create_for_commit_comment(self, request: operations.ReactionsCreateForCommitCommentRequest) -> operations.ReactionsCreateForCommitCommentResponse:
        r"""Create reaction for a commit comment
        Create a reaction to a [commit comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-a-commit-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForCommitCommentRequest, base_url, '/repos/{owner}/{repo}/comments/{comment_id}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForCommitCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def reactions_create_for_issue(self, request: operations.ReactionsCreateForIssueRequest) -> operations.ReactionsCreateForIssueResponse:
        r"""Create reaction for an issue
        Create a reaction to an [issue](https://docs.github.com/enterprise-cloud@latest//rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-an-issue - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForIssueRequest, base_url, '/repos/{owner}/{repo}/issues/{issue_number}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForIssueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def reactions_create_for_issue_comment(self, request: operations.ReactionsCreateForIssueCommentRequest) -> operations.ReactionsCreateForIssueCommentResponse:
        r"""Create reaction for an issue comment
        Create a reaction to an [issue comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-an-issue-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForIssueCommentRequest, base_url, '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForIssueCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def reactions_create_for_pull_request_review_comment(self, request: operations.ReactionsCreateForPullRequestReviewCommentRequest) -> operations.ReactionsCreateForPullRequestReviewCommentResponse:
        r"""Create reaction for a pull request review comment
        Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-a-pull-request-review-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForPullRequestReviewCommentRequest, base_url, '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForPullRequestReviewCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def reactions_create_for_release(self, request: operations.ReactionsCreateForReleaseRequest) -> operations.ReactionsCreateForReleaseResponse:
        r"""Create reaction for a release
        Create a reaction to a [release](https://docs.github.com/enterprise-cloud@latest//rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions/#create-reaction-for-a-release - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForReleaseRequest, base_url, '/repos/{owner}/{repo}/releases/{release_id}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForReleaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationError])
                res.validation_error = out

        return res

    def reactions_create_for_team_discussion_comment_in_org(self, request: operations.ReactionsCreateForTeamDiscussionCommentInOrgRequest) -> operations.ReactionsCreateForTeamDiscussionCommentInOrgResponse:
        r"""Create reaction for a team discussion comment
        Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
        
        **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-a-team-discussion-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForTeamDiscussionCommentInOrgRequest, base_url, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForTeamDiscussionCommentInOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out

        return res

    def reactions_create_for_team_discussion_comment_legacy(self, request: operations.ReactionsCreateForTeamDiscussionCommentLegacyRequest) -> operations.ReactionsCreateForTeamDiscussionCommentLegacyResponse:
        r"""Create reaction for a team discussion comment (Legacy)
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"[Create reaction for a team discussion comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-a-team-discussion-comment)\" endpoint.
        
        Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForTeamDiscussionCommentLegacyRequest, base_url, '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForTeamDiscussionCommentLegacyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out

        return res

    def reactions_create_for_team_discussion_in_org(self, request: operations.ReactionsCreateForTeamDiscussionInOrgRequest) -> operations.ReactionsCreateForTeamDiscussionInOrgResponse:
        r"""Create reaction for a team discussion
        Create a reaction to a [team discussion](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
        
        **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-a-team-discussion - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForTeamDiscussionInOrgRequest, base_url, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForTeamDiscussionInOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 201]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out

        return res

    def reactions_create_for_team_discussion_legacy(self, request: operations.ReactionsCreateForTeamDiscussionLegacyRequest) -> operations.ReactionsCreateForTeamDiscussionLegacyResponse:
        r"""Create reaction for a team discussion (Legacy)
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
        
        Create a reaction to a [team discussion](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsCreateForTeamDiscussionLegacyRequest, base_url, '/teams/{team_id}/discussions/{discussion_number}/reactions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsCreateForTeamDiscussionLegacyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Reaction])
                res.reaction = out

        return res

    def reactions_delete_for_commit_comment(self, request: operations.ReactionsDeleteForCommitCommentRequest) -> operations.ReactionsDeleteForCommitCommentResponse:
        r"""Delete a commit comment reaction
        **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
        
        Delete a reaction to a [commit comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/repos#comments).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#delete-a-commit-comment-reaction - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsDeleteForCommitCommentRequest, base_url, '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsDeleteForCommitCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reactions_delete_for_issue(self, request: operations.ReactionsDeleteForIssueRequest) -> operations.ReactionsDeleteForIssueResponse:
        r"""Delete an issue reaction
        **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
        
        Delete a reaction to an [issue](https://docs.github.com/enterprise-cloud@latest//rest/reference/issues/).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#delete-an-issue-reaction - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsDeleteForIssueRequest, base_url, '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsDeleteForIssueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reactions_delete_for_issue_comment(self, request: operations.ReactionsDeleteForIssueCommentRequest) -> operations.ReactionsDeleteForIssueCommentResponse:
        r"""Delete an issue comment reaction
        **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
        
        Delete a reaction to an [issue comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/issues#comments).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#delete-an-issue-comment-reaction - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsDeleteForIssueCommentRequest, base_url, '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsDeleteForIssueCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reactions_delete_for_pull_request_comment(self, request: operations.ReactionsDeleteForPullRequestCommentRequest) -> operations.ReactionsDeleteForPullRequestCommentResponse:
        r"""Delete a pull request comment reaction
        **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
        
        Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/pulls#review-comments).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#delete-a-pull-request-comment-reaction - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsDeleteForPullRequestCommentRequest, base_url, '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsDeleteForPullRequestCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reactions_delete_for_release(self, request: operations.ReactionsDeleteForReleaseRequest) -> operations.ReactionsDeleteForReleaseResponse:
        r"""Delete a release reaction
        **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
        
        Delete a reaction to a [release](https://docs.github.com/enterprise-cloud@latest//rest/reference/repos#releases).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions/#delete-a-release-reaction - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsDeleteForReleaseRequest, base_url, '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsDeleteForReleaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reactions_delete_for_team_discussion(self, request: operations.ReactionsDeleteForTeamDiscussionRequest) -> operations.ReactionsDeleteForTeamDiscussionResponse:
        r"""Delete team discussion reaction
        **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
        
        Delete a reaction to a [team discussion](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#delete-team-discussion-reaction - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsDeleteForTeamDiscussionRequest, base_url, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsDeleteForTeamDiscussionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reactions_delete_for_team_discussion_comment(self, request: operations.ReactionsDeleteForTeamDiscussionCommentRequest) -> operations.ReactionsDeleteForTeamDiscussionCommentResponse:
        r"""Delete team discussion comment reaction
        **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
        
        Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#delete-team-discussion-comment-reaction - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsDeleteForTeamDiscussionCommentRequest, base_url, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsDeleteForTeamDiscussionCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def reactions_list_for_commit_comment(self, request: operations.ReactionsListForCommitCommentRequest) -> operations.ReactionsListForCommitCommentResponse:
        r"""List reactions for a commit comment
        List the reactions to a [commit comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/repos#comments).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-a-commit-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForCommitCommentRequest, base_url, '/repos/{owner}/{repo}/comments/{comment_id}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForCommitCommentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForCommitCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def reactions_list_for_issue(self, request: operations.ReactionsListForIssueRequest) -> operations.ReactionsListForIssueResponse:
        r"""List reactions for an issue
        List the reactions to an [issue](https://docs.github.com/enterprise-cloud@latest//rest/reference/issues).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-an-issue - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForIssueRequest, base_url, '/repos/{owner}/{repo}/issues/{issue_number}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForIssueRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForIssueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out
        elif http_res.status_code in [404, 410]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def reactions_list_for_issue_comment(self, request: operations.ReactionsListForIssueCommentRequest) -> operations.ReactionsListForIssueCommentResponse:
        r"""List reactions for an issue comment
        List the reactions to an [issue comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/issues#comments).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-an-issue-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForIssueCommentRequest, base_url, '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForIssueCommentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForIssueCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def reactions_list_for_pull_request_review_comment(self, request: operations.ReactionsListForPullRequestReviewCommentRequest) -> operations.ReactionsListForPullRequestReviewCommentResponse:
        r"""List reactions for a pull request review comment
        List the reactions to a [pull request review comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/pulls#review-comments).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-a-pull-request-review-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForPullRequestReviewCommentRequest, base_url, '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForPullRequestReviewCommentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForPullRequestReviewCommentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def reactions_list_for_release(self, request: operations.ReactionsListForReleaseRequest) -> operations.ReactionsListForReleaseResponse:
        r"""List reactions for a release
        List the reactions to a [release](https://docs.github.com/enterprise-cloud@latest//rest/reference/repos#releases).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions/#list-reactions-for-a-release - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForReleaseRequest, base_url, '/repos/{owner}/{repo}/releases/{release_id}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForReleaseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForReleaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def reactions_list_for_team_discussion_comment_in_org(self, request: operations.ReactionsListForTeamDiscussionCommentInOrgRequest) -> operations.ReactionsListForTeamDiscussionCommentInOrgResponse:
        r"""List reactions for a team discussion comment
        List the reactions to a [team discussion comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-a-team-discussion-comment - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForTeamDiscussionCommentInOrgRequest, base_url, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForTeamDiscussionCommentInOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForTeamDiscussionCommentInOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out

        return res

    def reactions_list_for_team_discussion_comment_legacy(self, request: operations.ReactionsListForTeamDiscussionCommentLegacyRequest) -> operations.ReactionsListForTeamDiscussionCommentLegacyResponse:
        r"""List reactions for a team discussion comment (Legacy)
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
        
        List the reactions to a [team discussion comment](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForTeamDiscussionCommentLegacyRequest, base_url, '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForTeamDiscussionCommentLegacyRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForTeamDiscussionCommentLegacyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out

        return res

    def reactions_list_for_team_discussion_in_org(self, request: operations.ReactionsListForTeamDiscussionInOrgRequest) -> operations.ReactionsListForTeamDiscussionInOrgResponse:
        r"""List reactions for a team discussion
        List the reactions to a [team discussion](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        
        **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-a-team-discussion - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForTeamDiscussionInOrgRequest, base_url, '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForTeamDiscussionInOrgRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForTeamDiscussionInOrgResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out

        return res

    def reactions_list_for_team_discussion_legacy(self, request: operations.ReactionsListForTeamDiscussionLegacyRequest) -> operations.ReactionsListForTeamDiscussionLegacyResponse:
        r"""List reactions for a team discussion (Legacy)
        **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
        
        List the reactions to a [team discussion](https://docs.github.com/enterprise-cloud@latest//rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-cloud@latest//apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
        https://docs.github.com/enterprise-cloud@latest//rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReactionsListForTeamDiscussionLegacyRequest, base_url, '/teams/{team_id}/discussions/{discussion_number}/reactions', request)
        
        query_params = utils.get_query_params(operations.ReactionsListForTeamDiscussionLegacyRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReactionsListForTeamDiscussionLegacyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Reaction]])
                res.reactions = out

        return res

    