/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class ScriptProcessesListScriptProcessesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export enum ScriptProcessesListScriptProcessesScriptProcessFilterStatusesEnum {
  ProcessStatusUnspecified = "PROCESS_STATUS_UNSPECIFIED",
  Running = "RUNNING",
  Paused = "PAUSED",
  Completed = "COMPLETED",
  Canceled = "CANCELED",
  Failed = "FAILED",
  TimedOut = "TIMED_OUT",
  Unknown = "UNKNOWN",
  Delayed = "DELAYED",
}

export enum ScriptProcessesListScriptProcessesScriptProcessFilterTypesEnum {
  ProcessTypeUnspecified = "PROCESS_TYPE_UNSPECIFIED",
  AddOn = "ADD_ON",
  ExecutionApi = "EXECUTION_API",
  TimeDriven = "TIME_DRIVEN",
  Trigger = "TRIGGER",
  Webapp = "WEBAPP",
  Editor = "EDITOR",
  SimpleTrigger = "SIMPLE_TRIGGER",
  Menu = "MENU",
  BatchTask = "BATCH_TASK",
}

export enum ScriptProcessesListScriptProcessesScriptProcessFilterUserAccessLevelsEnum {
  UserAccessLevelUnspecified = "USER_ACCESS_LEVEL_UNSPECIFIED",
  None = "NONE",
  Read = "READ",
  Write = "WRITE",
  Owner = "OWNER",
}

export class ScriptProcessesListScriptProcessesRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * The maximum number of returned processes per page of results. Defaults to 50.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageSize",
  })
  pageSize?: number;

  /**
   * The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * The script ID of the project whose processes are listed.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptId",
  })
  scriptId?: string;

  /**
   * Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptProcessFilter.deploymentId",
  })
  scriptProcessFilterDeploymentId?: string;

  /**
   * Optional field used to limit returned processes to those that completed on or before the given timestamp.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptProcessFilter.endTime",
  })
  scriptProcessFilterEndTime?: string;

  /**
   * Optional field used to limit returned processes to those originating from a script function with the given function name.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptProcessFilter.functionName",
  })
  scriptProcessFilterFunctionName?: string;

  /**
   * Optional field used to limit returned processes to those that were started on or after the given timestamp.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptProcessFilter.startTime",
  })
  scriptProcessFilterStartTime?: string;

  /**
   * Optional field used to limit returned processes to those having one of the specified process statuses.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptProcessFilter.statuses",
  })
  scriptProcessFilterStatuses?: ScriptProcessesListScriptProcessesScriptProcessFilterStatusesEnum[];

  /**
   * Optional field used to limit returned processes to those having one of the specified process types.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptProcessFilter.types",
  })
  scriptProcessFilterTypes?: ScriptProcessesListScriptProcessesScriptProcessFilterTypesEnum[];

  /**
   * Optional field used to limit returned processes to those having one of the specified user access levels.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=scriptProcessFilter.userAccessLevels",
  })
  scriptProcessFilterUserAccessLevels?: ScriptProcessesListScriptProcessesScriptProcessFilterUserAccessLevelsEnum[];

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class ScriptProcessesListScriptProcessesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  listScriptProcessesResponse?: shared.ListScriptProcessesResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
