/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class ReportWebinarPollsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class ReportWebinarPollsRequest extends SpeakeasyBase {
  /**
   * The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
   *
   * @remarks
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=webinarId",
  })
  webinarId: string;
}

export class ReportWebinarPolls200ApplicationXMLQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Given answer.
   */
  @SpeakeasyMetadata()
  answer?: string;

  /**
   * Date and time at which the answer to the poll was submitted.
   */
  @SpeakeasyMetadata()
  dateTime?: Date;

  /**
   * Unique identifier of the poll.
   */
  @SpeakeasyMetadata()
  pollingId?: string;

  /**
   * Asked question.
   */
  @SpeakeasyMetadata()
  question?: string;
}

export class ReportWebinarPolls200ApplicationXMLQuestions extends SpeakeasyBase {
  /**
   * Participant email.
   */
  @SpeakeasyMetadata()
  email?: string;

  /**
   * Participant display name.<br><br> If the poll was created as an anonymous poll, participant's information will remain anonymous and the value of the `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Array of questions from user.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarPolls200ApplicationXMLQuestionsQuestionDetails,
  })
  questionDetails?: ReportWebinarPolls200ApplicationXMLQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Webinar polls report returned.<br>
 * Missing webinar subscription plan.<br>
 * This is only available for paid account:{accountId}.
 */
export class ReportWebinarPolls200ApplicationXML extends SpeakeasyBase {
  /**
   * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
   */
  @SpeakeasyMetadata()
  id?: number;

  /**
   * Array of webinar question objects.
   */
  @SpeakeasyMetadata({ elemType: ReportWebinarPolls200ApplicationXMLQuestions })
  questions?: ReportWebinarPolls200ApplicationXMLQuestions[];

  /**
   * Webinar start time.
   */
  @SpeakeasyMetadata()
  startTime?: Date;

  /**
   * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  uuid?: string;
}

export class ReportWebinarPolls200ApplicationJSONQuestionsQuestionDetails extends SpeakeasyBase {
  /**
   * Given answer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answer" })
  answer?: string;

  /**
   * Date and time at which the answer to the poll was submitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dateTime?: Date;

  /**
   * Unique identifier of the poll.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "polling_id" })
  pollingId?: string;

  /**
   * Asked question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "question" })
  question?: string;
}

export class ReportWebinarPolls200ApplicationJSONQuestions extends SpeakeasyBase {
  /**
   * Participant email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Participant display name.<br><br> If the poll was created as an anonymous poll, participant's information will remain anonymous and the value of the `name` field will be "Anonymous Attendee".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Array of questions from user.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarPolls200ApplicationJSONQuestionsQuestionDetails,
  })
  @Expose({ name: "question_details" })
  @Type(() => ReportWebinarPolls200ApplicationJSONQuestionsQuestionDetails)
  questionDetails?: ReportWebinarPolls200ApplicationJSONQuestionsQuestionDetails[];
}

/**
 * **HTTP Status Code:** `200`<br>
 *
 * @remarks
 * Webinar polls report returned.<br>
 * Missing webinar subscription plan.<br>
 * This is only available for paid account:{accountId}.
 */
export class ReportWebinarPolls200ApplicationJSON extends SpeakeasyBase {
  /**
   * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * Array of webinar question objects.
   */
  @SpeakeasyMetadata({
    elemType: ReportWebinarPolls200ApplicationJSONQuestions,
  })
  @Expose({ name: "questions" })
  @Type(() => ReportWebinarPolls200ApplicationJSONQuestions)
  questions?: ReportWebinarPolls200ApplicationJSONQuestions[];

  /**
   * Webinar start time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  /**
   * Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid?: string;
}

export class ReportWebinarPollsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Webinar polls report returned.<br>
   * Missing webinar subscription plan.<br>
   * This is only available for paid account:{accountId}.
   */
  @SpeakeasyMetadata()
  reportWebinarPolls200ApplicationJSONObject?: ReportWebinarPolls200ApplicationJSON;
}
