"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://pricing.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def fetch_messaging_country(self, request: operations.FetchMessagingCountryRequest, security: operations.FetchMessagingCountrySecurity, server_url: Optional[str] = None) -> operations.FetchMessagingCountryResponse:
        base_url = operations.FETCH_MESSAGING_COUNTRY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchMessagingCountryRequest, base_url, '/v1/Messaging/Countries/{IsoCountry}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchMessagingCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricingV1MessagingMessagingCountryInstance])
                res.pricing_v1_messaging_messaging_country_instance = out

        return res

    def fetch_phone_number_country(self, request: operations.FetchPhoneNumberCountryRequest, security: operations.FetchPhoneNumberCountrySecurity, server_url: Optional[str] = None) -> operations.FetchPhoneNumberCountryResponse:
        base_url = operations.FETCH_PHONE_NUMBER_COUNTRY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchPhoneNumberCountryRequest, base_url, '/v1/PhoneNumbers/Countries/{IsoCountry}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchPhoneNumberCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricingV1PhoneNumberPhoneNumberCountryInstance])
                res.pricing_v1_phone_number_phone_number_country_instance = out

        return res

    def fetch_voice_country(self, request: operations.FetchVoiceCountryRequest, security: operations.FetchVoiceCountrySecurity, server_url: Optional[str] = None) -> operations.FetchVoiceCountryResponse:
        base_url = operations.FETCH_VOICE_COUNTRY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchVoiceCountryRequest, base_url, '/v1/Voice/Countries/{IsoCountry}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchVoiceCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricingV1VoiceVoiceCountryInstance])
                res.pricing_v1_voice_voice_country_instance = out

        return res

    def fetch_voice_number(self, request: operations.FetchVoiceNumberRequest, security: operations.FetchVoiceNumberSecurity, server_url: Optional[str] = None) -> operations.FetchVoiceNumberResponse:
        base_url = operations.FETCH_VOICE_NUMBER_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchVoiceNumberRequest, base_url, '/v1/Voice/Numbers/{Number}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchVoiceNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PricingV1VoiceVoiceNumber])
                res.pricing_v1_voice_voice_number = out

        return res

    def list_messaging_country(self, request: operations.ListMessagingCountryRequest, security: operations.ListMessagingCountrySecurity, server_url: Optional[str] = None) -> operations.ListMessagingCountryResponse:
        base_url = operations.LIST_MESSAGING_COUNTRY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Messaging/Countries'
        
        query_params = utils.get_query_params(operations.ListMessagingCountryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListMessagingCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListMessagingCountryListMessagingCountryResponse])
                res.list_messaging_country_response = out

        return res

    def list_phone_number_country(self, request: operations.ListPhoneNumberCountryRequest, security: operations.ListPhoneNumberCountrySecurity, server_url: Optional[str] = None) -> operations.ListPhoneNumberCountryResponse:
        base_url = operations.LIST_PHONE_NUMBER_COUNTRY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/PhoneNumbers/Countries'
        
        query_params = utils.get_query_params(operations.ListPhoneNumberCountryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPhoneNumberCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListPhoneNumberCountryListPhoneNumberCountryResponse])
                res.list_phone_number_country_response = out

        return res

    def list_voice_country(self, request: operations.ListVoiceCountryRequest, security: operations.ListVoiceCountrySecurity, server_url: Optional[str] = None) -> operations.ListVoiceCountryResponse:
        base_url = operations.LIST_VOICE_COUNTRY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Voice/Countries'
        
        query_params = utils.get_query_params(operations.ListVoiceCountryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListVoiceCountryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListVoiceCountryListVoiceCountryResponse])
                res.list_voice_country_response = out

        return res

    