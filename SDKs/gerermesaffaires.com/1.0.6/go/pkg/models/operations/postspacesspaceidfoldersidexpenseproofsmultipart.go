// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartSecurity struct {
	GmaAuth shared.SchemeGmaAuth `security:"scheme,type=oauth2"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartPathParams struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumCab PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "CAB"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumIkm PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "IKM"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumPrk PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "PRK"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumTxi PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "TXI"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumVoy PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "VOY"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumPtt PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "PTT"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumFhr PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "FHR"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumDiv PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "DIV"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnumRes PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum = "RES"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CAB":
		fallthrough
	case "IKM":
		fallthrough
	case "PRK":
		fallthrough
	case "TXI":
		fallthrough
	case "VOY":
		fallthrough
	case "PTT":
		fallthrough
	case "FHR":
		fallthrough
	case "DIV":
		fallthrough
	case "RES":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum: %s", s)
	}
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                         `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                         `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum string

const (
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnumR PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum = "R"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnumV PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum = "V"
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnumW PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum = "W"
)

func (e *PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "R":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum: %s", s)
	}
}

// PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormData1 - Expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)
type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormData1 struct {
	Account         *PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccountEnum `multipartForm:"name=Account"`
	Accounting      *PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataAccounting  `multipartForm:"name=Accounting,json"`
	ArchivalDate    *string                                                              `multipartForm:"name=ArchivalDate"`
	Author          *string                                                              `multipartForm:"name=Author"`
	BeforeVAT       *float64                                                             `multipartForm:"name=BeforeVAT"`
	Code            *string                                                              `multipartForm:"name=Code"`
	Comment         *string                                                              `multipartForm:"name=Comment"`
	Date            *string                                                              `multipartForm:"name=Date"`
	ExpenseDate     *string                                                              `multipartForm:"name=ExpenseDate"`
	ExpenseReportID *string                                                              `multipartForm:"name=ExpenseReportId"`
	File            PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataFile         `multipartForm:"file"`
	Provider        *string                                                              `multipartForm:"name=Provider"`
	Reason          *string                                                              `multipartForm:"name=Reason"`
	Status          *PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormDataStatusEnum  `multipartForm:"name=Status"`
	Title           string                                                               `multipartForm:"name=Title"`
	Vat             *float64                                                             `multipartForm:"name=VAT"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartRequest struct {
	PathParams PostSpacesSpaceIDFoldersIDExpenseProofsMultipartPathParams
	// Expense proof to add (either DocumentId, ExpenseDate either (File,Name,Content64Encoded,Title,ExpenseDate) is mandatory)
	Request  PostSpacesSpaceIDFoldersIDExpenseProofsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	Security PostSpacesSpaceIDFoldersIDExpenseProofsMultipartSecurity
}

// PostSpacesSpaceIDFoldersIDExpenseProofsMultipart201ApplicationJSON - Id of expense proof created
type PostSpacesSpaceIDFoldersIDExpenseProofsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDExpenseProofsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of expense proof created
	PostSpacesSpaceIDFoldersIDExpenseProofsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDExpenseProofsMultipart201ApplicationJSON
}
