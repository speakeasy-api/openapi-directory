/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Session {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * creates a new session. validUntil is an unix timestamp in seconds
   */
  createSessionUsingGET(
    req: operations.CreateSessionUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSessionUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateSessionUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createSession";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSessionUsingGETResponse =
        new operations.CreateSessionUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * creates a new session. validUntil is an unix timestamp in seconds
   */
  createSessionUsingPOST(
    req: operations.CreateSessionUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateSessionUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateSessionUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/createSession";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateSessionUsingPOSTResponse =
        new operations.CreateSessionUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createSessionUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateSessionUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes a session
   */
  deleteSessionUsingGET(
    req: operations.DeleteSessionUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSessionUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteSessionUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/deleteSession";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSessionUsingGETResponse =
        new operations.DeleteSessionUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * deletes a session
   */
  deleteSessionUsingPOST(
    req: operations.DeleteSessionUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSessionUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteSessionUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/deleteSession";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSessionUsingPOSTResponse =
        new operations.DeleteSessionUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.deleteSessionUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.DeleteSessionUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns informations about a session
   */
  getSessionInfoUsingGET(
    req: operations.GETSessionInfoUsingGETRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETSessionInfoUsingGETResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETSessionInfoUsingGETRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getSessionInfo";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETSessionInfoUsingGETResponse =
        new operations.GETSessionInfoUsingGETResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingGET200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSessionInfoUsingGet200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingGET400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSessionInfoUsingGet400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingGET401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSessionInfoUsingGet401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingGET500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GETSessionInfoUsingGet500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * returns informations about a session
   */
  getSessionInfoUsingPOST(
    req: operations.GetSessionInfoUsingPOSTRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSessionInfoUsingPOSTResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSessionInfoUsingPOSTRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/getSessionInfo";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSessionInfoUsingPOSTResponse =
        new operations.GetSessionInfoUsingPOSTResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingPOST200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSessionInfoUsingPost200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingPOST400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSessionInfoUsingPost400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingPOST401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSessionInfoUsingPost401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getSessionInfoUsingPOST500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetSessionInfoUsingPost500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
