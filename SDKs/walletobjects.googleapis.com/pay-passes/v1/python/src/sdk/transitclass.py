"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Transitclass:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_transitclass_addmessage(self, request: operations.WalletobjectsTransitclassAddmessageRequest, security: operations.WalletobjectsTransitclassAddmessageSecurity) -> operations.WalletobjectsTransitclassAddmessageResponse:
        r"""Adds a message to the transit class referenced by the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsTransitclassAddmessageRequest, base_url, '/walletobjects/v1/transitClass/{resourceId}/addMessage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_message_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsTransitclassAddmessageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsTransitclassAddmessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransitClassAddMessageResponse])
                res.transit_class_add_message_response = out

        return res

    def walletobjects_transitclass_get(self, request: operations.WalletobjectsTransitclassGetRequest, security: operations.WalletobjectsTransitclassGetSecurity) -> operations.WalletobjectsTransitclassGetResponse:
        r"""Returns the transit class with the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsTransitclassGetRequest, base_url, '/walletobjects/v1/transitClass/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsTransitclassGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsTransitclassGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransitClass])
                res.transit_class = out

        return res

    def walletobjects_transitclass_insert(self, request: operations.WalletobjectsTransitclassInsertRequest, security: operations.WalletobjectsTransitclassInsertSecurity) -> operations.WalletobjectsTransitclassInsertResponse:
        r"""Inserts a transit class with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/transitClass'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "transit_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsTransitclassInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsTransitclassInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransitClass])
                res.transit_class = out

        return res

    def walletobjects_transitclass_list(self, request: operations.WalletobjectsTransitclassListRequest, security: operations.WalletobjectsTransitclassListSecurity) -> operations.WalletobjectsTransitclassListResponse:
        r"""Returns a list of all transit classes for a given issuer ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/transitClass'
        
        query_params = utils.get_query_params(operations.WalletobjectsTransitclassListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsTransitclassListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransitClassListResponse])
                res.transit_class_list_response = out

        return res

    def walletobjects_transitclass_patch(self, request: operations.WalletobjectsTransitclassPatchRequest, security: operations.WalletobjectsTransitclassPatchSecurity) -> operations.WalletobjectsTransitclassPatchResponse:
        r"""Updates the transit class referenced by the given class ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsTransitclassPatchRequest, base_url, '/walletobjects/v1/transitClass/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "transit_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsTransitclassPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsTransitclassPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransitClass])
                res.transit_class = out

        return res

    def walletobjects_transitclass_update(self, request: operations.WalletobjectsTransitclassUpdateRequest, security: operations.WalletobjectsTransitclassUpdateSecurity) -> operations.WalletobjectsTransitclassUpdateResponse:
        r"""Updates the transit class referenced by the given class ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsTransitclassUpdateRequest, base_url, '/walletobjects/v1/transitClass/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "transit_class", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsTransitclassUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsTransitclassUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransitClass])
                res.transit_class = out

        return res

    