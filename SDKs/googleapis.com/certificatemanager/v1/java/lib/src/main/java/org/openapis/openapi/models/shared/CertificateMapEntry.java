/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CertificateMapEntry - Defines a certificate map entry.
 */
public class CertificateMapEntry {
    /**
     * A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/* /locations/* /certificates/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificates")
    public String[] certificates;

    public CertificateMapEntry withCertificates(String[] certificates) {
        this.certificates = certificates;
        return this;
    }
    
    /**
     * Output only. The creation timestamp of a Certificate Map Entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public CertificateMapEntry withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * One or more paragraphs of text description of a certificate map entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public CertificateMapEntry withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hostname")
    public String hostname;

    public CertificateMapEntry withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * Set of labels associated with a Certificate Map Entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public CertificateMapEntry withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * A predefined matcher for particular cases, other than SNI selection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("matcher")
    public CertificateMapEntryMatcherEnum matcher;

    public CertificateMapEntry withMatcher(CertificateMapEntryMatcherEnum matcher) {
        this.matcher = matcher;
        return this;
    }
    
    /**
     * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/* /locations/* /certificateMaps/* /certificateMapEntries/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public CertificateMapEntry withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. A serving state of this Certificate Map Entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CertificateMapEntryStateEnum state;

    public CertificateMapEntry withState(CertificateMapEntryStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. The update timestamp of a Certificate Map Entry.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public CertificateMapEntry withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    public CertificateMapEntry(){}
}
