// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkSwitchAccessControlListsPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum - IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'.
type UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum string

const (
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnumAny  UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum = "any"
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnumIpv4 UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum = "ipv4"
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnumIpv6 UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum = "ipv6"
)

func (e *UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum: %s", s)
	}
}

// UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum - 'allow' or 'deny' traffic specified by this rule.
type UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum string

const (
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnumAllow UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum = "allow"
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnumDeny  UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum = "deny"
)

func (e *UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "deny":
		*e = UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum: %s", s)
	}
}

// UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum - The type of protocol (must be 'tcp', 'udp', or 'any').
type UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum string

const (
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnumAny UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum = "any"
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnumTCP UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum = "tcp"
	UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnumUDP UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum = "udp"
)

func (e *UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum: %s", s)
	}
}

type UpdateNetworkSwitchAccessControlListsRequestBodyRules struct {
	// Description of the rule (optional).
	Comment *string `json:"comment,omitempty"`
	// Destination IP address (in IP or CIDR notation) or 'any'.
	DstCidr string `json:"dstCidr"`
	// Destination port. Must be in the range of 1-65535 or 'any'. Default is 'any'.
	DstPort *string `json:"dstPort,omitempty"`
	// IP address version (must be 'any', 'ipv4' or 'ipv6'). Applicable only if network supports IPv6. Default value is 'ipv4'.
	IPVersion *UpdateNetworkSwitchAccessControlListsRequestBodyRulesIPVersionEnum `json:"ipVersion,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule.
	Policy UpdateNetworkSwitchAccessControlListsRequestBodyRulesPolicyEnum `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', or 'any').
	Protocol UpdateNetworkSwitchAccessControlListsRequestBodyRulesProtocolEnum `json:"protocol"`
	// Source IP address (in IP or CIDR notation) or 'any'.
	SrcCidr string `json:"srcCidr"`
	// Source port. Must be in the range  of 1-65535 or 'any'. Default is 'any'.
	SrcPort *string `json:"srcPort,omitempty"`
	// Incoming traffic VLAN. Must be in the range of 1-4095 or 'any'. Default is 'any'.
	Vlan *string `json:"vlan,omitempty"`
}

type UpdateNetworkSwitchAccessControlListsRequestBody struct {
	// An ordered array of the access control list rules (not including the default rule). An empty array will clear the rules.
	Rules []UpdateNetworkSwitchAccessControlListsRequestBodyRules `json:"rules"`
}

type UpdateNetworkSwitchAccessControlListsRequest struct {
	PathParams UpdateNetworkSwitchAccessControlListsPathParams
	Request    UpdateNetworkSwitchAccessControlListsRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkSwitchAccessControlListsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSwitchAccessControlLists200ApplicationJSONObject map[string]interface{}
}
