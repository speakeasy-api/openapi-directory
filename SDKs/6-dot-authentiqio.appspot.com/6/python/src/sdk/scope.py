"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Scope:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def sign_confirm(self, request: operations.SignConfirmRequest) -> operations.SignConfirmResponse:
        r"""this is a scope confirmation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SignConfirmRequest, base_url, '/scope/{job}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SignConfirmResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SignConfirm202ApplicationJSON])
                res.sign_confirm_202_application_json_object = out
        elif http_res.status_code in [401, 404, 405]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def sign_delete(self, request: operations.SignDeleteRequest) -> operations.SignDeleteResponse:
        r"""delete a verification job"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SignDeleteRequest, base_url, '/scope/{job}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SignDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SignDelete200ApplicationJSON])
                res.sign_delete_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def sign_request(self, request: operations.SignRequestRequest) -> operations.SignRequestResponse:
        r"""scope verification request
        See: https://github.com/skion/authentiq/wiki/JWT-Examples
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/scope'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.SignRequestRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SignRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SignRequest201ApplicationJSON])
                res.sign_request_201_application_json_object = out
        elif http_res.status_code == 429:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def sign_retrieve(self, request: operations.SignRetrieveRequest) -> operations.SignRetrieveResponse:
        r"""get the status / current content of a verification job"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SignRetrieveRequest, base_url, '/scope/{job}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SignRetrieveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SignRetrieveJWT])
                res.jwt = out
            if utils.match_content_type(content_type, 'application/jwt'):
                res.body = http_res.content
        elif http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/jwt'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def sign_retrieve_head(self, request: operations.SignRetrieveHeadRequest) -> operations.SignRetrieveHeadResponse:
        r"""HEAD to get the status of a verification job"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SignRetrieveHeadRequest, base_url, '/scope/{job}', request)
        
        
        client = self._client
        
        http_res = client.request('HEAD', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SignRetrieveHeadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 204]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def sign_update(self, request: operations.SignUpdateRequest) -> operations.SignUpdateResponse:
        r"""authority updates a JWT with its signature
        See: https://github.com/skion/authentiq/wiki/JWT-Examples
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SignUpdateRequest, base_url, '/scope/{job}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SignUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 404, 409]:
            if utils.match_content_type(content_type, 'application/jwt'):
                res.body = http_res.content
        else:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    