"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountHolderTransactionListRequest = exports.AccountHolderTransactionListRequestTransactionStatusesEnum = void 0;
var utils_1 = require("../../../internal/utils");
var transactionlistforaccount_1 = require("./transactionlistforaccount");
var class_transformer_1 = require("class-transformer");
var AccountHolderTransactionListRequestTransactionStatusesEnum;
(function (AccountHolderTransactionListRequestTransactionStatusesEnum) {
    AccountHolderTransactionListRequestTransactionStatusesEnum["BalanceNotPaidOutTransfer"] = "BalanceNotPaidOutTransfer";
    AccountHolderTransactionListRequestTransactionStatusesEnum["BalancePlatformSweep"] = "BalancePlatformSweep";
    AccountHolderTransactionListRequestTransactionStatusesEnum["BalancePlatformSweepReturned"] = "BalancePlatformSweepReturned";
    AccountHolderTransactionListRequestTransactionStatusesEnum["Chargeback"] = "Chargeback";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ChargebackCorrection"] = "ChargebackCorrection";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ChargebackCorrectionReceived"] = "ChargebackCorrectionReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ChargebackReceived"] = "ChargebackReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ChargebackReversed"] = "ChargebackReversed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ChargebackReversedCorrection"] = "ChargebackReversedCorrection";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ChargebackReversedCorrectionReceived"] = "ChargebackReversedCorrectionReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ChargebackReversedReceived"] = "ChargebackReversedReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["Converted"] = "Converted";
    AccountHolderTransactionListRequestTransactionStatusesEnum["CreditClosed"] = "CreditClosed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["CreditFailed"] = "CreditFailed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["CreditReversed"] = "CreditReversed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["CreditReversedReceived"] = "CreditReversedReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["CreditSuspended"] = "CreditSuspended";
    AccountHolderTransactionListRequestTransactionStatusesEnum["Credited"] = "Credited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["DebitFailed"] = "DebitFailed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["DebitReversedReceived"] = "DebitReversedReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["Debited"] = "Debited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["DebitedReversed"] = "DebitedReversed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["DepositCorrectionCredited"] = "DepositCorrectionCredited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["DepositCorrectionDebited"] = "DepositCorrectionDebited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["Fee"] = "Fee";
    AccountHolderTransactionListRequestTransactionStatusesEnum["FundTransfer"] = "FundTransfer";
    AccountHolderTransactionListRequestTransactionStatusesEnum["FundTransferReversed"] = "FundTransferReversed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["InvoiceDeductionCredited"] = "InvoiceDeductionCredited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["InvoiceDeductionDebited"] = "InvoiceDeductionDebited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ManualCorrected"] = "ManualCorrected";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ManualCorrectionCredited"] = "ManualCorrectionCredited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ManualCorrectionDebited"] = "ManualCorrectionDebited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["MerchantPayin"] = "MerchantPayin";
    AccountHolderTransactionListRequestTransactionStatusesEnum["MerchantPayinReversed"] = "MerchantPayinReversed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["Payout"] = "Payout";
    AccountHolderTransactionListRequestTransactionStatusesEnum["PayoutReversed"] = "PayoutReversed";
    AccountHolderTransactionListRequestTransactionStatusesEnum["PendingCredit"] = "PendingCredit";
    AccountHolderTransactionListRequestTransactionStatusesEnum["PendingDebit"] = "PendingDebit";
    AccountHolderTransactionListRequestTransactionStatusesEnum["PendingFundTransfer"] = "PendingFundTransfer";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ReCredited"] = "ReCredited";
    AccountHolderTransactionListRequestTransactionStatusesEnum["ReCreditedReceived"] = "ReCreditedReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["SecondChargeback"] = "SecondChargeback";
    AccountHolderTransactionListRequestTransactionStatusesEnum["SecondChargebackCorrection"] = "SecondChargebackCorrection";
    AccountHolderTransactionListRequestTransactionStatusesEnum["SecondChargebackCorrectionReceived"] = "SecondChargebackCorrectionReceived";
    AccountHolderTransactionListRequestTransactionStatusesEnum["SecondChargebackReceived"] = "SecondChargebackReceived";
})(AccountHolderTransactionListRequestTransactionStatusesEnum = exports.AccountHolderTransactionListRequestTransactionStatusesEnum || (exports.AccountHolderTransactionListRequestTransactionStatusesEnum = {}));
var AccountHolderTransactionListRequest = /** @class */ (function (_super) {
    __extends(AccountHolderTransactionListRequest, _super);
    function AccountHolderTransactionListRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "accountHolderCode" }),
        __metadata("design:type", String)
    ], AccountHolderTransactionListRequest.prototype, "accountHolderCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: transactionlistforaccount_1.TransactionListForAccount }),
        (0, class_transformer_1.Expose)({ name: "transactionListsPerAccount" }),
        (0, class_transformer_1.Type)(function () { return transactionlistforaccount_1.TransactionListForAccount; }),
        __metadata("design:type", Array)
    ], AccountHolderTransactionListRequest.prototype, "transactionListsPerAccount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transactionStatuses" }),
        __metadata("design:type", Array)
    ], AccountHolderTransactionListRequest.prototype, "transactionStatuses", void 0);
    return AccountHolderTransactionListRequest;
}(utils_1.SpeakeasyBase));
exports.AccountHolderTransactionListRequest = AccountHolderTransactionListRequest;
