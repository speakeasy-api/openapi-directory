// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostServersIDActionsResetPasswordRequest struct {
	// ID of the Server
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostServersIDActionsResetPassword201ApplicationJSONActionError - Error message for the Action if error occurred, otherwise null
type PostServersIDActionsResetPassword201ApplicationJSONActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostServersIDActionsResetPassword201ApplicationJSONActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum - Status of the Action
type PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum string

const (
	PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnumSuccess PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum = "success"
	PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnumRunning PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum = "running"
	PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnumError   PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum = "error"
)

func (e PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum) ToPointer() *PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum {
	return &e
}

func (e *PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum: %v", v)
	}
}

type PostServersIDActionsResetPassword201ApplicationJSONAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostServersIDActionsResetPassword201ApplicationJSONActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostServersIDActionsResetPassword201ApplicationJSONActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostServersIDActionsResetPassword201ApplicationJSONActionStatusEnum `json:"status"`
}

// PostServersIDActionsResetPassword201ApplicationJSON - The `root_password` key in the reply contains the new root password that will be active if the Action succeeds.
//
// The `action` key in the reply contains an Action object with this structure:
type PostServersIDActionsResetPassword201ApplicationJSON struct {
	Action *PostServersIDActionsResetPassword201ApplicationJSONAction `json:"action,omitempty"`
	// Password that will be set for this Server once the Action succeeds
	RootPassword *string `json:"root_password,omitempty"`
}

type PostServersIDActionsResetPasswordResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `root_password` key in the reply contains the new root password that will be active if the Action succeeds.
	//
	// The `action` key in the reply contains an Action object with this structure:
	//
	PostServersIDActionsResetPassword201ApplicationJSONObject *PostServersIDActionsResetPassword201ApplicationJSON
}
