/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateRoomRequestBody {
    /**
     * Array of logging-configuration identifiers attached to the room.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loggingConfigurationIdentifiers")
    public String[] loggingConfigurationIdentifiers;

    public CreateRoomRequestBody withLoggingConfigurationIdentifiers(String[] loggingConfigurationIdentifiers) {
        this.loggingConfigurationIdentifiers = loggingConfigurationIdentifiers;
        return this;
    }
    
    /**
     * Maximum number of characters in a single message. Messages are expected to be UTF-8 encoded and this limit applies specifically to rune/code-point count, not number of bytes. Default: 500.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumMessageLength")
    public Long maximumMessageLength;

    public CreateRoomRequestBody withMaximumMessageLength(Long maximumMessageLength) {
        this.maximumMessageLength = maximumMessageLength;
        return this;
    }
    
    /**
     * Maximum number of messages per second that can be sent to the room (by all clients). Default: 10. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximumMessageRatePerSecond")
    public Long maximumMessageRatePerSecond;

    public CreateRoomRequestBody withMaximumMessageRatePerSecond(Long maximumMessageRatePerSecond) {
        this.maximumMessageRatePerSecond = maximumMessageRatePerSecond;
        return this;
    }
    
    /**
     * Configuration information for optional message review.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messageReviewHandler")
    public CreateRoomRequestBodyMessageReviewHandler messageReviewHandler;

    public CreateRoomRequestBody withMessageReviewHandler(CreateRoomRequestBodyMessageReviewHandler messageReviewHandler) {
        this.messageReviewHandler = messageReviewHandler;
        return this;
    }
    
    /**
     * Room name. The value does not need to be unique.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public CreateRoomRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Tags to attach to the resource. Array of maps, each of the form &lt;code&gt;string:string (key:value)&lt;/code&gt;. See &lt;a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html"&gt;Tagging AWS Resources&lt;/a&gt; for details, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS Chat has no constraints beyond what is documented there.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public java.util.Map<String, String> tags;

    public CreateRoomRequestBody withTags(java.util.Map<String, String> tags) {
        this.tags = tags;
        return this;
    }
    
    public CreateRoomRequestBody(){}
}
