<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class V1Pepsanction 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves a list of monitor entries
     * 
     * Retrieve a list of all active Pep Sanction Report monitors for this account
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PepMonitorListResponse
     */
	public function pepMonitorList(
    ): \OpenAPI\OpenAPI\Models\Operations\PepMonitorListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/pepsanction/monitor/list');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PepMonitorListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepMonitorList200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\PepMonitorList200ApplicationJSON>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepMonitorListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepMonitorListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deactive a pep sanction monitor
     * 
     * Unregister a previously created Pep Sanction Report Monitor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterResponse
     */
	public function pepMonitorUnregister(
        \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/pepsanction/monitor/unregister/{id}', \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepMonitorUnregister200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregister200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepMonitorUnregisterDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepMonitorUnregisterDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update details of active Pep Sanction monitor
     * 
     * Update the webhook URL of an active Pep Sanction Report Monitor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateResponse
     */
	public function pepMonitorUpdate(
        \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/pepsanction/monitor/update/{id}', \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepMonitorUpdate200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdate200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepMonitorUpdateDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepMonitorUpdateDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Orders a new Pep Sanction Check Report
     * 
     * Order a new Pep Sanction Check by providing either a business or person name with some additional optional parameters.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PepOrderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PepOrderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PepOrderResponse
     */
	public function pepOrder(
        \OpenAPI\OpenAPI\Models\Operations\PepOrderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PepOrderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PepOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/pepsanction/order/{type}/{search}', \OpenAPI\OpenAPI\Models\Operations\PepOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PepOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepOrder200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepOrderDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepOrderDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a json or pdf report
     * 
     * Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PepRetrieveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PepRetrieveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PepRetrieveResponse
     */
	public function pepRetrieve(
        \OpenAPI\OpenAPI\Models\Operations\PepRetrieveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PepRetrieveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PepRetrieveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/pepsanction/retrieve/{id}', \OpenAPI\OpenAPI\Models\Operations\PepRetrieveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PepRetrieveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepRetrieve200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepRetrieve200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pepRetrieveDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PepRetrieveDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}