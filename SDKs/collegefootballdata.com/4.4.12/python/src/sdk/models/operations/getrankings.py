"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import rankingweek as shared_rankingweek
from typing import Optional


@dataclasses.dataclass
class GetRankingsRequest:
    
    year: int = dataclasses.field(metadata={'query_param': { 'field_name': 'year', 'style': 'form', 'explode': True }})
    r"""Year/season filter for games"""  
    season_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'seasonType', 'style': 'form', 'explode': True }})
    r"""Season type filter (regular or postseason)"""  
    week: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'week', 'style': 'form', 'explode': True }})
    r"""Week filter"""  
    

@dataclasses.dataclass
class GetRankingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    ranking_weeks: Optional[list[shared_rankingweek.RankingWeek]] = dataclasses.field(default=None)
    r"""successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    