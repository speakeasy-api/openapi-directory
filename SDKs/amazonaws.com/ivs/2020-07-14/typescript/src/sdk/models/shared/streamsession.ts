/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Channel } from "./channel";
import { IngestConfiguration } from "./ingestconfiguration";
import { RecordingConfiguration } from "./recordingconfiguration";
import { StreamEvent } from "./streamevent";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Object that captures the Amazon IVS configuration that the customer provisioned, the ingest configurations that the broadcaster used, and the most recent Amazon IVS stream events it encountered.
 */
export class StreamSession extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => Channel)
  channel?: Channel;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ingestConfiguration" })
  @Type(() => IngestConfiguration)
  ingestConfiguration?: IngestConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "recordingConfiguration" })
  @Type(() => RecordingConfiguration)
  recordingConfiguration?: RecordingConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "streamId" })
  streamId?: string;

  @SpeakeasyMetadata({ elemType: StreamEvent })
  @Expose({ name: "truncatedEvents" })
  @Type(() => StreamEvent)
  truncatedEvents?: StreamEvent[];
}
