"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class CreateChannelSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateChannelApplicationJSONMembers:
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""Member's email address."""  
    
class CreateChannelApplicationJSONTypeEnum(str, Enum):
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
    `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: Public channel. Anyone can search for this channel and join the channel.<br>
    `4`: New chat. This is an instant channel which can be created by adding members to a new chat.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateChannelApplicationJSON:
    
    members: Optional[list[CreateChannelApplicationJSONMembers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('members'), 'exclude': lambda f: f is None }})
    r"""Member(s) to include in the channel. A max of 5 members can be added to the channel at once with this API."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the channel."""  
    type: Optional[CreateChannelApplicationJSONTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of the channel. The value can be one of the following:<br>
    `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
    `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
    `3`: Public channel. Anyone can search for this channel and join the channel.<br>
    `4`: New chat. This is an instant channel which can be created by adding members to a new chat.
    """  
    

@dataclasses.dataclass
class CreateChannelRequest:
    
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'userId', 'style': 'simple', 'explode': False }})
    r"""Unique identifier of the user."""  
    request_body: Optional[CreateChannelApplicationJSON] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CreateChannel201ApplicationXML:
    r"""**Status Code**: `201` <br>
    Channel created.
    """
    
    id: Optional[str] = dataclasses.field(default=None)
    r"""Channel ID: Unique Identifier of the Channel."""  
    jid: Optional[str] = dataclasses.field(default=None)
    r"""Channel JID."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""Channel name."""  
    type: Optional[int] = dataclasses.field(default=None)
    r"""Channel type."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateChannel201ApplicationJSON:
    r"""**Status Code**: `201` <br>
    Channel created.
    """
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Channel ID: Unique Identifier of the Channel."""  
    jid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jid'), 'exclude': lambda f: f is None }})
    r"""Channel JID."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Channel name."""  
    type: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Channel type."""  
    

@dataclasses.dataclass
class CreateChannelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    create_channel_201_application_json_object: Optional[CreateChannel201ApplicationJSON] = dataclasses.field(default=None)
    r"""**Status Code**: `201` <br>
    Channel created.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    