// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StopPointRouteServiceTypesEnum string

const (
	StopPointRouteServiceTypesEnumRegular StopPointRouteServiceTypesEnum = "Regular"
	StopPointRouteServiceTypesEnumNight   StopPointRouteServiceTypesEnum = "Night"
)

func (e StopPointRouteServiceTypesEnum) ToPointer() *StopPointRouteServiceTypesEnum {
	return &e
}

func (e *StopPointRouteServiceTypesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Regular":
		fallthrough
	case "Night":
		*e = StopPointRouteServiceTypesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StopPointRouteServiceTypesEnum: %v", v)
	}
}

type StopPointRouteRequest struct {
	// A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified
	ServiceTypes []StopPointRouteServiceTypesEnum `queryParam:"style=form,explode=true,name=serviceTypes"`
}

type StopPointRouteResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	TflAPIPresentationEntitiesStopPointRouteSections []shared.TflAPIPresentationEntitiesStopPointRouteSection
}
