/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NHFurniture - A JSON object describing the furniture.
 */
public class NHFurniture {
    /**
     * Where the furniture may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availability")
    public NHFurnitureAvailability[] availability;

    public NHFurniture withAvailability(NHFurnitureAvailability[] availability) {
        this.availability = availability;
        return this;
    }
    
    /**
     * An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buy")
    public NHFurnitureBuy[] buy;

    public NHFurniture withBuy(NHFurnitureBuy[] buy) {
        this.buy = buy;
        return this;
    }
    
    /**
     * The category of item as shown in the player's inventory.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    public NHFurnitureCategoryEnum category;

    public NHFurniture withCategory(NHFurnitureCategoryEnum category) {
        this.category = category;
        return this;
    }
    
    /**
     * If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_body_part")
    public String customBodyPart;

    public NHFurniture withCustomBodyPart(String customBodyPart) {
        this.customBodyPart = customBodyPart;
        return this;
    }
    
    /**
     * The item that needs to be consumed to customize this item. The vast majority are "Customization Kit", but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_kit_type")
    public String customKitType;

    public NHFurniture withCustomKitType(String customKitType) {
        this.customKitType = customKitType;
        return this;
    }
    
    /**
     * The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_kits")
    public Long customKits;

    public NHFurniture withCustomKits(Long customKits) {
        this.customKits = customKits;
        return this;
    }
    
    /**
     * If the item's pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is "Cushion" as the cushion on the chair may have a pattern applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_pattern_part")
    public String customPatternPart;

    public NHFurniture withCustomPatternPart(String customPatternPart) {
        this.customPatternPart = customPatternPart;
        return this;
    }
    
    /**
     * Whether or not the item is customizable via a crafting table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customizable")
    public Boolean customizable;

    public NHFurniture withCustomizable(Boolean customizable) {
        this.customizable = customizable;
        return this;
    }
    
    /**
     * Whether this item may be placed on the exterior door of the player's house.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("door_decor")
    public Boolean doorDecor;

    public NHFurniture withDoorDecor(Boolean doorDecor) {
        this.doorDecor = doorDecor;
        return this;
    }
    
    /**
     * A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have "Table" as a function..
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("functions")
    public NHFurnitureFunctionsEnum[] functions;

    public NHFurniture withFunctions(NHFurnitureFunctionsEnum[] functions) {
        this.functions = functions;
        return this;
    }
    
    /**
     * The number of lengthwise grid spaces this item takes up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grid_length")
    public Float gridLength;

    public NHFurniture withGridLength(Float gridLength) {
        this.gridLength = gridLength;
        return this;
    }
    
    /**
     * The number of widthwise grid spaces this item takes up.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grid_width")
    public Float gridWidth;

    public NHFurniture withGridWidth(Float gridWidth) {
        this.gridWidth = gridWidth;
        return this;
    }
    
    /**
     * The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Float height;

    public NHFurniture withHeight(Float height) {
        this.height = height;
        return this;
    }
    
    /**
     * The base value that the item provides to a player's Happy Home Academy score when placed in their home.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hha_base")
    public Long hhaBase;

    public NHFurniture withHhaBase(Long hhaBase) {
        this.hhaBase = hhaBase;
        return this;
    }
    
    /**
     * The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hha_category")
    public String hhaCategory;

    public NHFurniture withHhaCategory(String hhaCategory) {
        this.hhaCategory = hhaCategory;
        return this;
    }
    
    /**
     * The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_series")
    public String itemSeries;

    public NHFurniture withItemSeries(String itemSeries) {
        this.itemSeries = itemSeries;
        return this;
    }
    
    /**
     * The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_set")
    public String itemSet;

    public NHFurniture withItemSet(String itemSet) {
        this.itemSet = itemSet;
        return this;
    }
    
    /**
     * Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the `lucky_season` field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lucky")
    public Boolean lucky;

    public NHFurniture withLucky(Boolean lucky) {
        this.lucky = lucky;
        return this;
    }
    
    /**
     * The season in which the item is lucky (or "All year" if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lucky_season")
    public NHFurnitureLuckySeasonEnum luckySeason;

    public NHFurniture withLuckySeason(NHFurnitureLuckySeasonEnum luckySeason) {
        this.luckySeason = luckySeason;
        return this;
    }
    
    /**
     * The name of the furniture.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public NHFurniture withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Any additional miscellaneous information about the item, such as a name change from a past update.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;

    public NHFurniture withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pattern_total")
    public NHFurniturePatternTotalEnum patternTotal;

    public NHFurniture withPatternTotal(NHFurniturePatternTotalEnum patternTotal) {
        this.patternTotal = patternTotal;
        return this;
    }
    
    /**
     * The number of Bells the item can be sold to Nook's store for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sell")
    public Long sell;

    public NHFurniture withSell(Long sell) {
        this.sell = sell;
        return this;
    }
    
    /**
     * The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag")
    public String tag;

    public NHFurniture withTag(String tag) {
        this.tag = tag;
        return this;
    }
    
    /**
     * A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("themes")
    public String[] themes;

    public NHFurniture withThemes(String[] themes) {
        this.themes = themes;
        return this;
    }
    
    /**
     * Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unlocked")
    public Boolean unlocked;

    public NHFurniture withUnlocked(Boolean unlocked) {
        this.unlocked = unlocked;
        return this;
    }
    
    /**
     * Link to the respective Nookipedia article.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public NHFurniture withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The number of variations, between 0 and 8.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variation_total")
    public NHFurnitureVariationTotalEnum variationTotal;

    public NHFurniture withVariationTotal(NHFurnitureVariationTotalEnum variationTotal) {
        this.variationTotal = variationTotal;
        return this;
    }
    
    /**
     * An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` or `pattern` fields will be empty strings. Furniture with multiple variations will have the `variation` and/or `pattern` fields defined depending on whether the furniture varies by body variety, pattern, or both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variations")
    public NHFurnitureVariations[] variations;

    public NHFurniture withVariations(NHFurnitureVariations[] variations) {
        this.variations = variations;
        return this;
    }
    
    /**
     * The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version_added")
    public String versionAdded;

    public NHFurniture withVersionAdded(String versionAdded) {
        this.versionAdded = versionAdded;
        return this;
    }
    
    public NHFurniture(){}
}
