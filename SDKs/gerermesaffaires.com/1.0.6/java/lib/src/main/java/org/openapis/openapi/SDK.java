/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * S\u00e9curisez vos donn\u00e9es en interfa\u00e7ant votre logiciel m\u00e9tier avec le service en ligne GererMesAffaires
 * https://api.gerermesaffaires.com/ - Documentation fonctionnelle des API GererMesAffaires
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        /**
         * Sandbox server for integrators
         */
        "https://sandbox.gerermesaffaires.com/api/v1/",
	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
	}

    /**
     * Remove a customer space from partner
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteBusinessGroupsIdSpacesSpaceIdResponse deleteBusinessGroupsIdSpacesSpaceId(org.openapis.openapi.models.operations.DeleteBusinessGroupsIdSpacesSpaceIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBusinessGroupsIdSpacesSpaceIdPathParams.class, baseUrl, "/business-groups/{id}/spaces/{spaceId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBusinessGroupsIdSpacesSpaceIdResponse res = new org.openapis.openapi.models.operations.DeleteBusinessGroupsIdSpacesSpaceIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Space (only space not delivered to customer)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdResponse deleteSpacesId(org.openapis.openapi.models.operations.DeleteSpacesIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdPathParams.class, baseUrl, "/spaces/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a contact detail for a company entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationResponse deleteSpacesIdCompanyEntitiesPersonIdDetailsDesignation(org.openapis.openapi.models.operations.DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationPathParams.class, baseUrl, "/spaces/{id}/company-entities/{personId}/details/{designation}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdCompanyEntitiesPersonIdDetailsDesignationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete access to a folder for a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdFoldersFolderIdResponse deleteSpacesIdGroupsGroupIdFoldersFolderId(org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdFoldersFolderIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdFoldersFolderIdPathParams.class, baseUrl, "/spaces/{id}/groups/{groupId}/folders/{folderId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdFoldersFolderIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdFoldersFolderIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a person of a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdPersonsMemberIdResponse deleteSpacesIdGroupsGroupIdPersonsMemberId(org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdPersonsMemberIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdPersonsMemberIdPathParams.class, baseUrl, "/spaces/{id}/groups/{groupId}/persons/{memberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdPersonsMemberIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdGroupsGroupIdPersonsMemberIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdResponse deleteSpacesIdPersonsPersonId(org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a contact detail for a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdDetailsDesignationResponse deleteSpacesIdPersonsPersonIdDetailsDesignation(org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdDetailsDesignationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdDetailsDesignationPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}/details/{designation}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdDetailsDesignationResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdPersonsPersonIdDetailsDesignationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a status of the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdStatusCodeResponse deleteSpacesIdStatusCode(org.openapis.openapi.models.operations.DeleteSpacesIdStatusCodeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdStatusCodePathParams.class, baseUrl, "/spaces/{id}/status/{code}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdStatusCodeResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdStatusCodeResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Deletes a trigger for the space id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesIdTriggersNameResponse deleteSpacesIdTriggersName(org.openapis.openapi.models.operations.DeleteSpacesIdTriggersNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesIdTriggersNamePathParams.class, baseUrl, "/spaces/{id}/triggers/{name}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesIdTriggersNameResponse res = new org.openapis.openapi.models.operations.DeleteSpacesIdTriggersNameResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a common folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdCommonFoldersIdResponse deleteSpacesSpaceIdCommonFoldersId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdCommonFoldersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdCommonFoldersIdPathParams.class, baseUrl, "/spaces/{spaceId}/common-folders/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdCommonFoldersIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdCommonFoldersIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a bank statement
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/bank-statements/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a contractual document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/contractual-documents/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a corporate tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/corporate-tax-declarations/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete an expense proof
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/expense-proofs/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete an expense report
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/expense-reports/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete an invoice document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/invoices/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/other-taxes/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a payroll
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a payslip
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/payslips/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a social contract
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/social-contracts/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a social declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/social-declarations/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a VAT declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse deleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/vat-declarations/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete an AccountingYear
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdAccountingYearResponse deleteSpacesSpaceIdFoldersIdAccountingYear(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdAccountingYearRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdAccountingYearPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/accounting-year", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdAccountingYearResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdAccountingYearResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Bank data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdBankResponse deleteSpacesSpaceIdFoldersIdBank(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdBankRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdBankPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/bank", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdBankResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdBankResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a customer
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdCustomerResponse deleteSpacesSpaceIdFoldersIdCustomer(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdCustomerRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdCustomerPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/customer", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdCustomerResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdCustomerResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Employee data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdEmployeeResponse deleteSpacesSpaceIdFoldersIdEmployee(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdEmployeeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdEmployeePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/employee", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdEmployeeResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdEmployeeResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Insurance data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdInsuranceResponse deleteSpacesSpaceIdFoldersIdInsurance(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdInsuranceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdInsurancePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/insurance", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdInsuranceResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdInsuranceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Loan data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdLoanResponse deleteSpacesSpaceIdFoldersIdLoan(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdLoanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdLoanPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/loan", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdLoanResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdLoanResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a password
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse deleteSpacesSpaceIdFoldersIdPasswordsPasswordId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/passwords/{passwordId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a nominative social declaration in a folder social
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationResponse deleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclaration(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a secondary portfolio of a customer contract
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdResponse deleteSpacesSpaceIdFoldersIdPortfolioPortfolioId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/portfolio/{portfolioId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdPortfolioPortfolioIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a Professional Vehicle
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProfessionalVehicleResponse deleteSpacesSpaceIdFoldersIdProfessionalVehicle(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProfessionalVehicleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProfessionalVehiclePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/professional-vehicle", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProfessionalVehicleResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProfessionalVehicleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a provider
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProviderResponse deleteSpacesSpaceIdFoldersIdProvider(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProviderRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProviderPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/provider", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProviderResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdProviderResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a document from a required document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdResponse deleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentId(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}/documents/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidDocumentsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a social regime
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdSocialRegimesResponse deleteSpacesSpaceIdFoldersIdSocialRegimes(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdSocialRegimesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdSocialRegimesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-regimes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdSocialRegimesResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdSocialRegimesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and tax contract data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdTaxContractResponse deleteSpacesSpaceIdFoldersIdTaxContract(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdTaxContractRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdTaxContractPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/tax-contract", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdTaxContractResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdTaxContractResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete a class document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdDocumentClassResponse deleteSpacesSpaceIdFoldersIdDocumentClass(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdDocumentClassRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdDocumentClassPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/{documentClass}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdDocumentClassResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdFoldersIdDocumentClassResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete the invitation of a person in a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdGuestInSpaceResponse deleteSpacesSpaceIdPersonsIdGuestInSpace(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdGuestInSpaceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdGuestInSpacePathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/guest-in-space", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdGuestInSpaceResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdGuestInSpaceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * delete the invitation of a person in a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdInvitationResponse deleteSpacesSpaceIdPersonsIdInvitation(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdInvitationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdInvitationPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/invitation", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdInvitationResponse res = new org.openapis.openapi.models.operations.DeleteSpacesSpaceIdPersonsIdInvitationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Returns predefined folders and workbooks of the Box for all the spaces
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBoxMenusResponse getBoxMenus(org.openapis.openapi.models.operations.GetBoxMenusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/box/menus");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBoxMenusResponse res = new org.openapis.openapi.models.operations.GetBoxMenusResponse() {{
            getBoxMenus200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBoxMenus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBoxMenus200ApplicationJSON.class);
                res.getBoxMenus200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of groups custom ordered by name
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBusinessGroupsResponse getBusinessGroups(org.openapis.openapi.models.operations.GetBusinessGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/business-groups");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBusinessGroupsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBusinessGroupsResponse res = new org.openapis.openapi.models.operations.GetBusinessGroupsResponse() {{
            getBusinessGroups200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BusinessGroup[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BusinessGroup[].class);
                res.getBusinessGroups200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of groups custom for managers
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBusinessGroupsAllResponse getBusinessGroupsAll(org.openapis.openapi.models.operations.GetBusinessGroupsAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/business-groups/all");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBusinessGroupsAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBusinessGroupsAllResponse res = new org.openapis.openapi.models.operations.GetBusinessGroupsAllResponse() {{
            getBusinessGroupsAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BusinessGroup[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BusinessGroup[].class);
                res.getBusinessGroupsAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBusinessGroupsIdResponse getBusinessGroupsId(org.openapis.openapi.models.operations.GetBusinessGroupsIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBusinessGroupsIdPathParams.class, baseUrl, "/business-groups/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBusinessGroupsIdResponse res = new org.openapis.openapi.models.operations.GetBusinessGroupsIdResponse() {{
            getBusinessGroupsId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBusinessGroupsId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBusinessGroupsId200ApplicationJSON.class);
                res.getBusinessGroupsId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns spaces of the business group with id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetBusinessGroupsIdSpacesResponse getBusinessGroupsIdSpaces(org.openapis.openapi.models.operations.GetBusinessGroupsIdSpacesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetBusinessGroupsIdSpacesPathParams.class, baseUrl, "/business-groups/{id}/spaces", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetBusinessGroupsIdSpacesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetBusinessGroupsIdSpacesResponse res = new org.openapis.openapi.models.operations.GetBusinessGroupsIdSpacesResponse() {{
            getBusinessGroupsIdSpaces200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetBusinessGroupsIdSpaces200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetBusinessGroupsIdSpaces200ApplicationJSON[].class);
                res.getBusinessGroupsIdSpaces200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns predefined folders and workbooks of the Hub for all the spaces of the business group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetHubBusinessGroupsIdMenusResponse getHubBusinessGroupsIdMenus(org.openapis.openapi.models.operations.GetHubBusinessGroupsIdMenusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetHubBusinessGroupsIdMenusPathParams.class, baseUrl, "/hub/business-groups/{Id}/menus", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHubBusinessGroupsIdMenusResponse res = new org.openapis.openapi.models.operations.GetHubBusinessGroupsIdMenusResponse() {{
            getHubBusinessGroupsIdMenus200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetHubBusinessGroupsIdMenus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetHubBusinessGroupsIdMenus200ApplicationJSON.class);
                res.getHubBusinessGroupsIdMenus200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns predefined folders and workbooks of the Hub for all the spaces
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetHubMenusResponse getHubMenus(org.openapis.openapi.models.operations.GetHubMenusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hub/menus");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHubMenusResponse res = new org.openapis.openapi.models.operations.GetHubMenusResponse() {{
            getHubMenus200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetHubMenus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetHubMenus200ApplicationJSON.class);
                res.getHubMenus200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns predefined folders and workbooks of the Hub for all the spaces and customer spaces
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetHubMenusAllResponse getHubMenusAll(org.openapis.openapi.models.operations.GetHubMenusAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hub/menus/all");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHubMenusAllResponse res = new org.openapis.openapi.models.operations.GetHubMenusAllResponse() {{
            getHubMenusAll200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetHubMenusAll200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetHubMenusAll200ApplicationJSON.class);
                res.getHubMenusAll200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns predefined folders and workbooks of the Hub for the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetHubSpacesSpaceIdMenusResponse getHubSpacesSpaceIdMenus(org.openapis.openapi.models.operations.GetHubSpacesSpaceIdMenusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetHubSpacesSpaceIdMenusPathParams.class, baseUrl, "/hub/spaces/{spaceId}/menus", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetHubSpacesSpaceIdMenusResponse res = new org.openapis.openapi.models.operations.GetHubSpacesSpaceIdMenusResponse() {{
            getHubSpacesSpaceIdMenus200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetHubSpacesSpaceIdMenus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetHubSpacesSpaceIdMenus200ApplicationJSON.class);
                res.getHubSpacesSpaceIdMenus200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns predefined entries
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetMenusResponse getMenus() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/menus");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetMenusResponse res = new org.openapis.openapi.models.operations.GetMenusResponse() {{
            getMenus200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetMenus200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetMenus200ApplicationJSON.class);
                res.getMenus200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns status of member
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProfileResponse getProfile(org.openapis.openapi.models.operations.GetProfileRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProfileQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProfileResponse res = new org.openapis.openapi.models.operations.GetProfileResponse() {{
            getProfile200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetProfile200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetProfile200ApplicationJSON.class);
                res.getProfile200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns status of member
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetProfileIdFileResponse getProfileIdFile(org.openapis.openapi.models.operations.GetProfileIdFileRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile/id-file");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetProfileIdFileQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetProfileIdFileResponse res = new org.openapis.openapi.models.operations.GetProfileIdFileResponse() {{
            getProfileIdFile200ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetProfileIdFile200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetProfileIdFile200ApplicationJSON.class);
                res.getProfileIdFile200ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "multipart/form-data")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Returns the method to get the validation code or the link to register after invitation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRegistrationResponse getRegistration(org.openapis.openapi.models.operations.GetRegistrationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/registration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetRegistrationQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRegistrationResponse res = new org.openapis.openapi.models.operations.GetRegistrationResponse() {{
            getRegistration200ApplicationJSONOneOf = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Object out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Object.class);
                res.getRegistration200ApplicationJSONOneOf = out;
            }
        }

        return res;
    }

    /**
     * Returns member id of user logged
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSessionResponse getSession(org.openapis.openapi.models.operations.GetSessionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/session");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSessionResponse res = new org.openapis.openapi.models.operations.GetSessionResponse() {{
            session = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Session out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Session.class);
                res.session = out;
            }
        }

        return res;
    }

    /**
     * Returns spaces of my group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesResponse getSpaces(org.openapis.openapi.models.operations.GetSpacesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/spaces");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesResponse res = new org.openapis.openapi.models.operations.GetSpacesResponse() {{
            getSpaces200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpaces200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpaces200ApplicationJSON[].class);
                res.getSpaces200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns all spaces
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesAllResponse getSpacesAll(org.openapis.openapi.models.operations.GetSpacesAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/spaces/all");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesAllResponse res = new org.openapis.openapi.models.operations.GetSpacesAllResponse() {{
            getSpacesAll200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesAll200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesAll200ApplicationJSON[].class);
                res.getSpacesAll200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdResponse getSpacesId(org.openapis.openapi.models.operations.GetSpacesIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPathParams.class, baseUrl, "/spaces/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdResponse res = new org.openapis.openapi.models.operations.GetSpacesIdResponse() {{
            getSpacesId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesId200ApplicationJSON.class);
                res.getSpacesId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns list of accounting years for the space {id}
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdAccountingYearResponse getSpacesIdAccountingYear(org.openapis.openapi.models.operations.GetSpacesIdAccountingYearRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdAccountingYearPathParams.class, baseUrl, "/spaces/{id}/accounting-year", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdAccountingYearQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdAccountingYearResponse res = new org.openapis.openapi.models.operations.GetSpacesIdAccountingYearResponse() {{
            getSpacesIdAccountingYear200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdAccountingYear200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdAccountingYear200ApplicationJSON[].class);
                res.getSpacesIdAccountingYear200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns list of collective decisions for the space {id}
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecisionResponse getSpacesIdCollectiveDecision(org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecisionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecisionPathParams.class, baseUrl, "/spaces/{id}/collective-decision", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecisionQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecisionResponse res = new org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecisionResponse() {{
            getSpacesIdCollectiveDecision200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecision200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdCollectiveDecision200ApplicationJSON[].class);
                res.getSpacesIdCollectiveDecision200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns list of company entities
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesResponse getSpacesIdCompanyEntities(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPathParams.class, baseUrl, "/spaces/{id}/company-entities", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesResponse res = new org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesResponse() {{
            getSpacesIdCompanyEntities200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CompanyEntity[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CompanyEntity[].class);
                res.getSpacesIdCompanyEntities200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of company entities even company entities archived
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesAllResponse getSpacesIdCompanyEntitiesAll(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesAllPathParams.class, baseUrl, "/spaces/{id}/company-entities/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesAllResponse res = new org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesAllResponse() {{
            getSpacesIdCompanyEntitiesAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CompanyEntity[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CompanyEntity[].class);
                res.getSpacesIdCompanyEntitiesAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns a compay entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesCompanyIdResponse getSpacesIdCompanyEntitiesCompanyId(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesCompanyIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesCompanyIdPathParams.class, baseUrl, "/spaces/{id}/company-entities/{companyId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesCompanyIdResponse res = new org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesCompanyIdResponse() {{
            companyEntity = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CompanyEntity out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CompanyEntity.class);
                res.companyEntity = out;
            }
        }

        return res;
    }

    /**
     * Returns all details of a company entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPersonIdDetailsResponse getSpacesIdCompanyEntitiesPersonIdDetails(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPersonIdDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPersonIdDetailsPathParams.class, baseUrl, "/spaces/{id}/company-entities/{personId}/details", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPersonIdDetailsResponse res = new org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPersonIdDetailsResponse() {{
            getSpacesIdCompanyEntitiesPersonIdDetails200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPersonIdDetails200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdCompanyEntitiesPersonIdDetails200ApplicationJSON[].class);
                res.getSpacesIdCompanyEntitiesPersonIdDetails200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * return the access of a person in a customer contract
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdFoldersFolderIdPersonsMemberIdResponse getSpacesIdFoldersFolderIdPersonsMemberId(org.openapis.openapi.models.operations.GetSpacesIdFoldersFolderIdPersonsMemberIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdFoldersFolderIdPersonsMemberIdPathParams.class, baseUrl, "/spaces/{id}/folders/{folderId}/persons/{memberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdFoldersFolderIdPersonsMemberIdResponse res = new org.openapis.openapi.models.operations.GetSpacesIdFoldersFolderIdPersonsMemberIdResponse() {{
            getSpacesIdFoldersFolderIdPersonsMemberId200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdFoldersFolderIdPersonsMemberId200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdFoldersFolderIdPersonsMemberId200ApplicationJSON[].class);
                res.getSpacesIdFoldersFolderIdPersonsMemberId200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns list of groups
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdGroupsResponse getSpacesIdGroups(org.openapis.openapi.models.operations.GetSpacesIdGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdGroupsPathParams.class, baseUrl, "/spaces/{id}/groups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdGroupsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdGroupsResponse res = new org.openapis.openapi.models.operations.GetSpacesIdGroupsResponse() {{
            getSpacesIdGroups200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group[].class);
                res.getSpacesIdGroups200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of groups even archived of the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdGroupsAllResponse getSpacesIdGroupsAll(org.openapis.openapi.models.operations.GetSpacesIdGroupsAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdGroupsAllPathParams.class, baseUrl, "/spaces/{id}/groups/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdGroupsAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdGroupsAllResponse res = new org.openapis.openapi.models.operations.GetSpacesIdGroupsAllResponse() {{
            getSpacesIdGroupsAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group[].class);
                res.getSpacesIdGroupsAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdGroupsGroupIdResponse getSpacesIdGroupsGroupId(org.openapis.openapi.models.operations.GetSpacesIdGroupsGroupIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdGroupsGroupIdPathParams.class, baseUrl, "/spaces/{id}/groups/{groupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdGroupsGroupIdResponse res = new org.openapis.openapi.models.operations.GetSpacesIdGroupsGroupIdResponse() {{
            getSpacesIdGroupsGroupId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdGroupsGroupId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdGroupsGroupId200ApplicationJSON.class);
                res.getSpacesIdGroupsGroupId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns legal information of a space (except private)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdLegalResponse getSpacesIdLegal(org.openapis.openapi.models.operations.GetSpacesIdLegalRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdLegalPathParams.class, baseUrl, "/spaces/{id}/legal", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdLegalResponse res = new org.openapis.openapi.models.operations.GetSpacesIdLegalResponse() {{
            legal = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Legal out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Legal.class);
                res.legal = out;
            }
        }

        return res;
    }

    /**
     * Returns a space with the logo
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdLogoResponse getSpacesIdLogo(org.openapis.openapi.models.operations.GetSpacesIdLogoRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdLogoPathParams.class, baseUrl, "/spaces/{id}/logo", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdLogoResponse res = new org.openapis.openapi.models.operations.GetSpacesIdLogoResponse() {{
            space = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Space out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Space.class);
                res.space = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "multipart/form-data")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Returns list of persons
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdPersonsResponse getSpacesIdPersons(org.openapis.openapi.models.operations.GetSpacesIdPersonsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPersonsPathParams.class, baseUrl, "/spaces/{id}/persons", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdPersonsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdPersonsResponse res = new org.openapis.openapi.models.operations.GetSpacesIdPersonsResponse() {{
            getSpacesIdPersons200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Person[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Person[].class);
                res.getSpacesIdPersons200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of persons even persons archived
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdPersonsAllResponse getSpacesIdPersonsAll(org.openapis.openapi.models.operations.GetSpacesIdPersonsAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPersonsAllPathParams.class, baseUrl, "/spaces/{id}/persons/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdPersonsAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdPersonsAllResponse res = new org.openapis.openapi.models.operations.GetSpacesIdPersonsAllResponse() {{
            getSpacesIdPersonsAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Person[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Person[].class);
                res.getSpacesIdPersonsAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdResponse getSpacesIdPersonsPersonId(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdResponse res = new org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdResponse() {{
            getSpacesIdPersonsPersonId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonId200ApplicationJSON.class);
                res.getSpacesIdPersonsPersonId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns all details of a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdDetailsResponse getSpacesIdPersonsPersonIdDetails(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdDetailsPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}/details", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdDetailsResponse res = new org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdDetailsResponse() {{
            getSpacesIdPersonsPersonIdDetails200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdDetails200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdDetails200ApplicationJSON[].class);
                res.getSpacesIdPersonsPersonIdDetails200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of folders with exceptionnal access of the person personId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdFoldersResponse getSpacesIdPersonsPersonIdFolders(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdFoldersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdFoldersPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}/folders", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdFoldersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdFoldersResponse res = new org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdFoldersResponse() {{
            getSpacesIdPersonsPersonIdFolders200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Folder[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Folder[].class);
                res.getSpacesIdPersonsPersonIdFolders200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of groups of the person personId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdGroupsResponse getSpacesIdPersonsPersonIdGroups(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdGroupsPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}/groups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdGroupsResponse res = new org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdGroupsResponse() {{
            getSpacesIdPersonsPersonIdGroups200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Group[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Group[].class);
                res.getSpacesIdPersonsPersonIdGroups200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of portfolios of the person personId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPortfoliosResponse getSpacesIdPersonsPersonIdPortfolios(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPortfoliosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPortfoliosPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}/portfolios", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPortfoliosResponse res = new org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPortfoliosResponse() {{
            getSpacesIdPersonsPersonIdPortfolios200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPortfolios200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdPersonsPersonIdPortfolios200ApplicationJSON[].class);
                res.getSpacesIdPersonsPersonIdPortfolios200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns list of professionalvehicles for the space {id}
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehiclesResponse getSpacesIdProfessionalVehicles(org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehiclesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehiclesPathParams.class, baseUrl, "/spaces/{id}/professional-vehicles", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehiclesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehiclesResponse res = new org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehiclesResponse() {{
            getSpacesIdProfessionalVehicles200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehicles200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdProfessionalVehicles200ApplicationJSON[].class);
                res.getSpacesIdProfessionalVehicles200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns state of activation of logs
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdSettingsNf203LogsResponse getSpacesIdSettingsNf203Logs(org.openapis.openapi.models.operations.GetSpacesIdSettingsNf203LogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdSettingsNf203LogsPathParams.class, baseUrl, "/spaces/{id}/settings/nf203/logs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdSettingsNf203LogsResponse res = new org.openapis.openapi.models.operations.GetSpacesIdSettingsNf203LogsResponse() {{
            getSpacesIdSettingsNf203Logs200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdSettingsNf203Logs200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdSettingsNf203Logs200ApplicationJSON.class);
                res.getSpacesIdSettingsNf203Logs200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns all status of the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdStatusResponse getSpacesIdStatus(org.openapis.openapi.models.operations.GetSpacesIdStatusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdStatusPathParams.class, baseUrl, "/spaces/{id}/status", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdStatusResponse res = new org.openapis.openapi.models.operations.GetSpacesIdStatusResponse() {{
            getSpacesIdStatus200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdStatus200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdStatus200ApplicationJSON[].class);
                res.getSpacesIdStatus200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of tax contracts for the space {id}
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdTaxContractsResponse getSpacesIdTaxContracts(org.openapis.openapi.models.operations.GetSpacesIdTaxContractsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdTaxContractsPathParams.class, baseUrl, "/spaces/{id}/tax-contracts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdTaxContractsResponse res = new org.openapis.openapi.models.operations.GetSpacesIdTaxContractsResponse() {{
            getSpacesIdTaxContracts200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesIdTaxContracts200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesIdTaxContracts200ApplicationJSON[].class);
                res.getSpacesIdTaxContracts200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns list of triggers for the space {id}
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesIdTriggersResponse getSpacesIdTriggers(org.openapis.openapi.models.operations.GetSpacesIdTriggersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesIdTriggersPathParams.class, baseUrl, "/spaces/{id}/triggers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesIdTriggersResponse res = new org.openapis.openapi.models.operations.GetSpacesIdTriggersResponse() {{
            getSpacesIdTriggers200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Trigger[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Trigger[].class);
                res.getSpacesIdTriggers200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the company entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdCompanyEntitiesIdFollowUpsResponse getSpacesSpaceIdCompanyEntitiesIdFollowUps(org.openapis.openapi.models.operations.GetSpacesSpaceIdCompanyEntitiesIdFollowUpsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdCompanyEntitiesIdFollowUpsPathParams.class, baseUrl, "/spaces/{spaceId}/company-entities/{id}/follow-ups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdCompanyEntitiesIdFollowUpsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdCompanyEntitiesIdFollowUpsResponse() {{
            getSpacesSpaceIdCompanyEntitiesIdFollowUps200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Folder[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Folder[].class);
                res.getSpacesSpaceIdCompanyEntitiesIdFollowUps200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and customer data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersResponse getSpacesSpaceIdCustomers(org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersPathParams.class, baseUrl, "/spaces/{spaceId}/customers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersResponse() {{
            getSpacesSpaceIdCustomers200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Customer[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Customer[].class);
                res.getSpacesSpaceIdCustomers200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and customer data (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersAllResponse getSpacesSpaceIdCustomersAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersAllPathParams.class, baseUrl, "/spaces/{spaceId}/customers/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdCustomersAllResponse() {{
            getSpacesSpaceIdCustomersAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Customer[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Customer[].class);
                res.getSpacesSpaceIdCustomersAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns documents of the folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsResponse getSpacesSpaceIdDocuments(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsPathParams.class, baseUrl, "/spaces/{spaceId}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsResponse() {{
            getSpacesSpaceIdDocuments200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocuments200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocuments200ApplicationJSON[].class);
                res.getSpacesSpaceIdDocuments200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * read the data of a document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdExtendResponse getSpacesSpaceIdDocumentsDocumentIdExtend(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdExtendRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdExtendPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/extend", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdExtendResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdExtendResponse() {{
            getSpacesSpaceIdDocumentsDocumentIdExtend200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdExtend200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdExtend200ApplicationJSON[].class);
                res.getSpacesSpaceIdDocumentsDocumentIdExtend200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns versions of the document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdFoldersResponse getSpacesSpaceIdDocumentsDocumentIdFolders(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdFoldersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdFoldersPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/folders", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdFoldersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdFoldersResponse() {{
            getSpacesSpaceIdDocumentsDocumentIdFolders200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdFolders200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdFolders200ApplicationJSON.class);
                res.getSpacesSpaceIdDocumentsDocumentIdFolders200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * returns the number of pages and the price of the pdf to send by mail
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdMailingpriceResponse getSpacesSpaceIdDocumentsDocumentIdMailingprice(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdMailingpriceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdMailingpricePathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/mailingprice", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdMailingpriceResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdMailingpriceResponse() {{
            getSpacesSpaceIdDocumentsDocumentIdMailingprice200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdMailingprice200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdMailingprice200ApplicationJSON.class);
                res.getSpacesSpaceIdDocumentsDocumentIdMailingprice200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns versions of the document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsResponse getSpacesSpaceIdDocumentsDocumentIdVersions(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/versions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsResponse() {{
            getSpacesSpaceIdDocumentsDocumentIdVersions200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Document[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Document[].class);
                res.getSpacesSpaceIdDocumentsDocumentIdVersions200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns current version of the document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentResponse getSpacesSpaceIdDocumentsDocumentIdVersionsCurrent(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/versions/current", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrentResponse() {{
            getSpacesSpaceIdDocumentsDocumentIdVersionsCurrent200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrent200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsDocumentIdVersionsCurrent200ApplicationJSON.class);
                res.getSpacesSpaceIdDocumentsDocumentIdVersionsCurrent200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns accesses of one document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccessResponse getSpacesSpaceIdDocumentsIdAccess(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccessRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccessPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{id}/access", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccessResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccessResponse() {{
            getSpacesSpaceIdDocumentsIdAccess200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccess200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccess200ApplicationJSON.class);
                res.getSpacesSpaceIdDocumentsIdAccess200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns the document with the accounting property
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccountingResponse getSpacesSpaceIdDocumentsIdAccounting(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccountingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccountingPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{id}/accounting", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccountingResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccountingResponse() {{
            getSpacesSpaceIdDocumentsIdAccounting200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccounting200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdAccounting200ApplicationJSON.class);
                res.getSpacesSpaceIdDocumentsIdAccounting200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns content of one document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdDownloadResponse getSpacesSpaceIdDocumentsIdDownload(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdDownloadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdDownloadPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{id}/download", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdDownloadResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdDownloadResponse() {{
            body = null;
            body = null;
            getSpacesSpaceIdDocumentsIdDownload200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "multipart/form-data")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdDownload200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdDocumentsIdDownload200ApplicationJSON.class);
                res.getSpacesSpaceIdDocumentsIdDownload200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns folders with Id and employee data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesResponse getSpacesSpaceIdEmployees(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesPathParams.class, baseUrl, "/spaces/{spaceId}/employees", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesResponse() {{
            getSpacesSpaceIdEmployees200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Employee[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Employee[].class);
                res.getSpacesSpaceIdEmployees200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folders with Id and employee data (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesAllResponse getSpacesSpaceIdEmployeesAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesAllPathParams.class, baseUrl, "/spaces/{spaceId}/employees/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployeesAllResponse() {{
            getSpacesSpaceIdEmployeesAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Employee[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Employee[].class);
                res.getSpacesSpaceIdEmployeesAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folders with Id and employer data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersResponse getSpacesSpaceIdEmployers(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersPathParams.class, baseUrl, "/spaces/{spaceId}/employers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersResponse() {{
            getSpacesSpaceIdEmployers200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Employee[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Employee[].class);
                res.getSpacesSpaceIdEmployers200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folders with Id and employer data (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersAllResponse getSpacesSpaceIdEmployersAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersAllPathParams.class, baseUrl, "/spaces/{spaceId}/employers/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdEmployersAllResponse() {{
            getSpacesSpaceIdEmployersAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Employee[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Employee[].class);
                res.getSpacesSpaceIdEmployersAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * read the data of a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdExtendResponse getSpacesSpaceIdExtend(org.openapis.openapi.models.operations.GetSpacesSpaceIdExtendRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdExtendPathParams.class, baseUrl, "/spaces/{spaceId}/extend", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdExtendResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdExtendResponse() {{
            getSpacesSpaceIdExtend200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdExtend200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdExtend200ApplicationJSON.class);
                res.getSpacesSpaceIdExtend200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns folders of the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersResponse getSpacesSpaceIdFolders(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersPathParams.class, baseUrl, "/spaces/{spaceId}/folders", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersResponse() {{
            getSpacesSpaceIdFolders200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Folder[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Folder[].class);
                res.getSpacesSpaceIdFolders200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folders of the space (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersAllResponse getSpacesSpaceIdFoldersAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersAllPathParams.class, baseUrl, "/spaces/{spaceId}/folders/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersAllResponse() {{
            getSpacesSpaceIdFoldersAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Folder[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Folder[].class);
                res.getSpacesSpaceIdFoldersAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * get a nominative social declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdResponse getSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/nominative-social-declarations/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentIdResponse() {{
            getSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId200ApplicationJSON.class);
                res.getSpacesSpaceIdFoldersFolderIdNominativeSocialDeclarationsDocumentId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdResponse getSpacesSpaceIdFoldersId(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdResponse() {{
            getSpacesSpaceIdFoldersId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersId200ApplicationJSON.class);
                res.getSpacesSpaceIdFoldersId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns accountings documents of the folder (results and taxation or accountingyear)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsResponse getSpacesSpaceIdFoldersIdAccountings(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/accountings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsResponse() {{
            getSpacesSpaceIdFoldersIdAccountings200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Accounting[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Accounting[].class);
                res.getSpacesSpaceIdFoldersIdAccountings200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * journal of accountings document delivered to a customer
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournalResponse getSpacesSpaceIdFoldersIdAccountingsJournal(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournalRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournalPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/accountings-journal", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournalQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournalResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournalResponse() {{
            getSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdAccountingsJournal200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and bank data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankResponse getSpacesSpaceIdFoldersIdBank(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/bank", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankResponse() {{
            bank = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Bank out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Bank.class);
                res.bank = out;
            }
        }

        return res;
    }

    /**
     * Returns bank statements of the folder bank
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankStatementsResponse getSpacesSpaceIdFoldersIdBankStatements(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankStatementsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankStatementsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/bank-statements", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankStatementsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankStatementsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdBankStatementsResponse() {{
            getSpacesSpaceIdFoldersIdBankStatements200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.BankStatement[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.BankStatement[].class);
                res.getSpacesSpaceIdFoldersIdBankStatements200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns common folders of a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersResponse getSpacesSpaceIdFoldersIdCommonFolders(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/common-folders", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersResponse() {{
            getSpacesSpaceIdFoldersIdCommonFolders200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Folder[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Folder[].class);
                res.getSpacesSpaceIdFoldersIdCommonFolders200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns common folders (even archived) of a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersAllResponse getSpacesSpaceIdFoldersIdCommonFoldersAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersAllPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/common-folders/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCommonFoldersAllResponse() {{
            getSpacesSpaceIdFoldersIdCommonFoldersAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Folder[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Folder[].class);
                res.getSpacesSpaceIdFoldersIdCommonFoldersAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns all contracting partners of a contract
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerResponse getSpacesSpaceIdFoldersIdContractingPartner(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/contracting-partner", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerResponse() {{
            getSpacesSpaceIdFoldersIdContractingPartner200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartner200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartner200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdContractingPartner200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns collector space of a contract
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerSpaceResponse getSpacesSpaceIdFoldersIdContractingPartnerSpace(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerSpaceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerSpacePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/contracting-partner/space", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerSpaceResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerSpaceResponse() {{
            getSpacesSpaceIdFoldersIdContractingPartnerSpace200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerSpace200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractingPartnerSpace200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdContractingPartnerSpace200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns documents of the folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualDocumentsResponse getSpacesSpaceIdFoldersIdContractualDocuments(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualDocumentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualDocumentsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/contractual-documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualDocumentsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualDocumentsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualDocumentsResponse() {{
            getSpacesSpaceIdFoldersIdContractualDocuments200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ContractualDocument[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ContractualDocument[].class);
                res.getSpacesSpaceIdFoldersIdContractualDocuments200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and contractual-relationship data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualRelationshipResponse getSpacesSpaceIdFoldersIdContractualRelationship(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualRelationshipRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualRelationshipPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/contractual-relationship", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualRelationshipResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdContractualRelationshipResponse() {{
            contractualRelationship = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ContractualRelationship out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ContractualRelationship.class);
                res.contractualRelationship = out;
            }
        }

        return res;
    }

    /**
     * Returns corporate tax declarations
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsResponse getSpacesSpaceIdFoldersIdCoporateTaxDeclarations(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/coporate-tax-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCoporateTaxDeclarationsResponse() {{
            getSpacesSpaceIdFoldersIdCoporateTaxDeclarations200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.CorporateTaxDeclaration[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.CorporateTaxDeclaration[].class);
                res.getSpacesSpaceIdFoldersIdCoporateTaxDeclarations200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and customer data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCustomerResponse getSpacesSpaceIdFoldersIdCustomer(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCustomerRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCustomerPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/customer", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCustomerResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCustomerResponse() {{
            getSpacesSpaceIdFoldersIdCustomer200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCustomer200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdCustomer200ApplicationJSON.class);
                res.getSpacesSpaceIdFoldersIdCustomer200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * journal of documents delivered to a customer
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournalResponse getSpacesSpaceIdFoldersIdDeliveriesJournal(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournalRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournalPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/deliveries-journal", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournalQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournalResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournalResponse() {{
            getSpacesSpaceIdFoldersIdDeliveriesJournal200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournal200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDeliveriesJournal200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdDeliveriesJournal200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns documents of the folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentsResponse getSpacesSpaceIdFoldersIdDocuments(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentsResponse() {{
            getSpacesSpaceIdFoldersIdDocuments200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Document[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Document[].class);
                res.getSpacesSpaceIdFoldersIdDocuments200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and employee data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdEmployeeResponse getSpacesSpaceIdFoldersIdEmployee(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdEmployeeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdEmployeePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/employee", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdEmployeeResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdEmployeeResponse() {{
            employee = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Employee out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Employee.class);
                res.employee = out;
            }
        }

        return res;
    }

    /**
     * Returns expense proofs of the folder (social, followup or exchange)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseProofsResponse getSpacesSpaceIdFoldersIdExpenseProofs(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseProofsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseProofsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/expense-proofs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseProofsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseProofsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseProofsResponse() {{
            getSpacesSpaceIdFoldersIdExpenseProofs200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ExpenseProof[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ExpenseProof[].class);
                res.getSpacesSpaceIdFoldersIdExpenseProofs200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns expense reports of the folder (social or followup)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsResponse getSpacesSpaceIdFoldersIdExpenseReports(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/expense-reports", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsResponse() {{
            getSpacesSpaceIdFoldersIdExpenseReports200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ExpenseReport[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ExpenseReport[].class);
                res.getSpacesSpaceIdFoldersIdExpenseReports200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns expense proofs linked to the expenseReportId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsResponse getSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofs(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/expense-reports/{expenseReportId}/expense-proofs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofsResponse() {{
            getSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofs200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ExpenseProof[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ExpenseProof[].class);
                res.getSpacesSpaceIdFoldersIdExpenseReportsExpenseReportIdExpenseProofs200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and insurance data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInsuranceResponse getSpacesSpaceIdFoldersIdInsurance(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInsuranceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInsurancePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/insurance", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInsuranceResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInsuranceResponse() {{
            insurance = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Insurance out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Insurance.class);
                res.insurance = out;
            }
        }

        return res;
    }

    /**
     * Returns invoices of the folder (customer, provider, accountingyear or root folders customers or providers)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInvoicesResponse getSpacesSpaceIdFoldersIdInvoices(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInvoicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInvoicesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/invoices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInvoicesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInvoicesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdInvoicesResponse() {{
            getSpacesSpaceIdFoldersIdInvoices200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Invoice[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Invoice[].class);
                res.getSpacesSpaceIdFoldersIdInvoices200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns legal entity of a follow up folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLegalEntityResponse getSpacesSpaceIdFoldersIdLegalEntity(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLegalEntityRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLegalEntityPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/legal-entity", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLegalEntityResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLegalEntityResponse() {{
            getSpacesSpaceIdFoldersIdLegalEntity200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLegalEntity200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLegalEntity200ApplicationJSON.class);
                res.getSpacesSpaceIdFoldersIdLegalEntity200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and loan data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLoanResponse getSpacesSpaceIdFoldersIdLoan(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLoanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLoanPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/loan", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLoanResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdLoanResponse() {{
            loan = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Loan out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Loan.class);
                res.loan = out;
            }
        }

        return res;
    }

    /**
     * Returns messages of the folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesResponse getSpacesSpaceIdFoldersIdMessages(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/messages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesResponse() {{
            getSpacesSpaceIdFoldersIdMessages200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Message[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Message[].class);
                res.getSpacesSpaceIdFoldersIdMessages200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns message with Id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesMessageIdResponse getSpacesSpaceIdFoldersIdMessagesMessageId(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesMessageIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesMessageIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/messages/{messageId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesMessageIdResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesMessageIdResponse() {{
            getSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSON.class);
                res.getSpacesSpaceIdFoldersIdMessagesMessageId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns nominative social declarations of the folder social
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsResponse getSpacesSpaceIdFoldersIdNominativeSocialDeclarations(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/nominative-social-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarationsResponse() {{
            getSpacesSpaceIdFoldersIdNominativeSocialDeclarations200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarations200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdNominativeSocialDeclarations200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdNominativeSocialDeclarations200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns other taxes declarations
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdOtherTaxesResponse getSpacesSpaceIdFoldersIdOtherTaxes(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdOtherTaxesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdOtherTaxesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/other-taxes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdOtherTaxesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdOtherTaxesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdOtherTaxesResponse() {{
            getSpacesSpaceIdFoldersIdOtherTaxes200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.OtherTax[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.OtherTax[].class);
                res.getSpacesSpaceIdFoldersIdOtherTaxes200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns identifiers/passwords of the folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsResponse getSpacesSpaceIdFoldersIdPasswords(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/passwords", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsResponse() {{
            getSpacesSpaceIdFoldersIdPasswords200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswords200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswords200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdPasswords200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns password with Id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse getSpacesSpaceIdFoldersIdPasswordsPasswordId(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPasswordIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/passwords/{passwordId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse() {{
            getSpacesSpaceIdFoldersIdPasswordsPasswordId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPasswordId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPasswordsPasswordId200ApplicationJSON.class);
                res.getSpacesSpaceIdFoldersIdPasswordsPasswordId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns payrolls of the folder social
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayrollsResponse getSpacesSpaceIdFoldersIdPayrolls(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayrollsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayrollsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payrolls", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayrollsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayrollsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayrollsResponse() {{
            getSpacesSpaceIdFoldersIdPayrolls200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Payroll[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Payroll[].class);
                res.getSpacesSpaceIdFoldersIdPayrolls200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns payslips of the folder employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayslipsResponse getSpacesSpaceIdFoldersIdPayslips(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayslipsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayslipsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payslips", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayslipsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayslipsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdPayslipsResponse() {{
            getSpacesSpaceIdFoldersIdPayslips200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.PaySlip[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.PaySlip[].class);
                res.getSpacesSpaceIdFoldersIdPayslips200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and provider data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdProviderResponse getSpacesSpaceIdFoldersIdProvider(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdProviderRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdProviderPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/provider", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdProviderResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdProviderResponse() {{
            provider = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Provider out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Provider.class);
                res.provider = out;
            }
        }

        return res;
    }

    /**
     * list of the required documents for a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequiredDocumentsResponse getSpacesSpaceIdFoldersIdRequiredDocuments(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequiredDocumentsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequiredDocumentsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/required-documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequiredDocumentsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequiredDocumentsResponse() {{
            getSpacesSpaceIdFoldersIdRequiredDocuments200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequiredDocuments200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdRequiredDocuments200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdRequiredDocuments200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Returns sections of the folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSectionsResponse getSpacesSpaceIdFoldersIdSections(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSectionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSectionsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/sections", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSectionsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSectionsResponse() {{
            getSpacesSpaceIdFoldersIdSections200ApplicationJSONAnies = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSections200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSections200ApplicationJSON[].class);
                res.getSpacesSpaceIdFoldersIdSections200ApplicationJSONAnies = out;
            }
        }

        return res;
    }

    /**
     * Returns social contracts of the folder employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialContractsResponse getSpacesSpaceIdFoldersIdSocialContracts(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialContractsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialContractsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-contracts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialContractsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialContractsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialContractsResponse() {{
            getSpacesSpaceIdFoldersIdSocialContracts200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SocialContract[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SocialContract[].class);
                res.getSpacesSpaceIdFoldersIdSocialContracts200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns social declarations
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialDeclarationsResponse getSpacesSpaceIdFoldersIdSocialDeclarations(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialDeclarationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialDeclarationsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialDeclarationsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialDeclarationsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialDeclarationsResponse() {{
            getSpacesSpaceIdFoldersIdSocialDeclarations200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SocialDeclaration[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SocialDeclaration[].class);
                res.getSpacesSpaceIdFoldersIdSocialDeclarations200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and social regime data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialRegimesResponse getSpacesSpaceIdFoldersIdSocialRegimes(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialRegimesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialRegimesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-regimes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialRegimesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSocialRegimesResponse() {{
            socialRegime = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SocialRegime out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SocialRegime.class);
                res.socialRegime = out;
            }
        }

        return res;
    }

    /**
     * Returns sum of invoices of the folder (customer, provider, accountingyear or root folders customers or providers)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoicesResponse getSpacesSpaceIdFoldersIdSumInvoices(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoicesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoicesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/sum-invoices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoicesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoicesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoicesResponse() {{
            getSpacesSpaceIdFoldersIdSumInvoices200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoices200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdSumInvoices200ApplicationJSON.class);
                res.getSpacesSpaceIdFoldersIdSumInvoices200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns vat declarations
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdVatDeclarationsResponse getSpacesSpaceIdFoldersIdVatDeclarations(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdVatDeclarationsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdVatDeclarationsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/vat-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdVatDeclarationsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdVatDeclarationsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdVatDeclarationsResponse() {{
            getSpacesSpaceIdFoldersIdVatDeclarations200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.VATDeclaration[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.VATDeclaration[].class);
                res.getSpacesSpaceIdFoldersIdVatDeclarations200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns document of documentClass (without specific data) of the folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentClassResponse getSpacesSpaceIdFoldersIdDocumentClass(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentClassRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentClassPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/{documentClass}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentClassResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdFoldersIdDocumentClassResponse() {{
            getSpacesSpaceIdFoldersIdDocumentClass200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Document[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Document[].class);
                res.getSpacesSpaceIdFoldersIdDocumentClass200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of bank folders for a legal-entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksResponse getSpacesSpaceIdLegalEntitiesIdBanks(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/banks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksResponse() {{
            getSpacesSpaceIdLegalEntitiesIdBanks200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Bank[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Bank[].class);
                res.getSpacesSpaceIdLegalEntitiesIdBanks200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the banks even archived
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksAllResponse getSpacesSpaceIdLegalEntitiesIdBanksAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksAllPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/banks/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdBanksAllResponse() {{
            getSpacesSpaceIdLegalEntitiesIdBanksAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Bank[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Bank[].class);
                res.getSpacesSpaceIdLegalEntitiesIdBanksAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns all contract folders of the legal entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractsResponse getSpacesSpaceIdLegalEntitiesIdContracts(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractsPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/contracts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractsResponse() {{
            getSpacesSpaceIdLegalEntitiesIdContracts200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Contract[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Contract[].class);
                res.getSpacesSpaceIdLegalEntitiesIdContracts200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the others contract with legal entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsResponse getSpacesSpaceIdLegalEntitiesIdContractualRelationships(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/contractual-relationships", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsResponse() {{
            getSpacesSpaceIdLegalEntitiesIdContractualRelationships200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ContractualRelationship[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ContractualRelationship[].class);
                res.getSpacesSpaceIdLegalEntitiesIdContractualRelationships200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the others contract with legal entity (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllResponse getSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/contractual-relationships/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAllResponse() {{
            getSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ContractualRelationship[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ContractualRelationship[].class);
                res.getSpacesSpaceIdLegalEntitiesIdContractualRelationshipsAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the customer
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersResponse getSpacesSpaceIdLegalEntitiesIdCustomers(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/customers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersResponse() {{
            getSpacesSpaceIdLegalEntitiesIdCustomers200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Customer[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Customer[].class);
                res.getSpacesSpaceIdLegalEntitiesIdCustomers200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the customers (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersAllResponse getSpacesSpaceIdLegalEntitiesIdCustomersAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersAllPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/customers/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdCustomersAllResponse() {{
            getSpacesSpaceIdLegalEntitiesIdCustomersAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Customer[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Customer[].class);
                res.getSpacesSpaceIdLegalEntitiesIdCustomersAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of insurance folders for a legal-entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesResponse getSpacesSpaceIdLegalEntitiesIdInsurances(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/insurances", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesResponse() {{
            getSpacesSpaceIdLegalEntitiesIdInsurances200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Insurance[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Insurance[].class);
                res.getSpacesSpaceIdLegalEntitiesIdInsurances200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the insurances even archived
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesAllResponse getSpacesSpaceIdLegalEntitiesIdInsurancesAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesAllPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/insurances/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdInsurancesAllResponse() {{
            getSpacesSpaceIdLegalEntitiesIdInsurancesAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Insurance[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Insurance[].class);
                res.getSpacesSpaceIdLegalEntitiesIdInsurancesAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the loan
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansResponse getSpacesSpaceIdLegalEntitiesIdLoans(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/loans", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansResponse() {{
            getSpacesSpaceIdLegalEntitiesIdLoans200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Loan[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Loan[].class);
                res.getSpacesSpaceIdLegalEntitiesIdLoans200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the loans even archived
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansAllResponse getSpacesSpaceIdLegalEntitiesIdLoansAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansAllPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/loans/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdLoansAllResponse() {{
            getSpacesSpaceIdLegalEntitiesIdLoansAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Loan[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Loan[].class);
                res.getSpacesSpaceIdLegalEntitiesIdLoansAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of providers folders for a legal-entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersResponse getSpacesSpaceIdLegalEntitiesIdProviders(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/providers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersResponse() {{
            getSpacesSpaceIdLegalEntitiesIdProviders200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Provider[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Provider[].class);
                res.getSpacesSpaceIdLegalEntitiesIdProviders200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the providers even archived
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersAllResponse getSpacesSpaceIdLegalEntitiesIdProvidersAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersAllPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/providers/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdProvidersAllResponse() {{
            getSpacesSpaceIdLegalEntitiesIdProvidersAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Provider[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Provider[].class);
                res.getSpacesSpaceIdLegalEntitiesIdProvidersAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of social regimes folders for a legal-entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse getSpacesSpaceIdLegalEntitiesIdSocialRegimes(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/social-regimes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse() {{
            getSpacesSpaceIdLegalEntitiesIdSocialRegimes200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SocialRegime[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SocialRegime[].class);
                res.getSpacesSpaceIdLegalEntitiesIdSocialRegimes200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the social regimes even archived
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllResponse getSpacesSpaceIdLegalEntitiesIdSocialRegimesAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/social-regimes/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLegalEntitiesIdSocialRegimesAllResponse() {{
            getSpacesSpaceIdLegalEntitiesIdSocialRegimesAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SocialRegime[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SocialRegime[].class);
                res.getSpacesSpaceIdLegalEntitiesIdSocialRegimesAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of all loan folders of the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansResponse getSpacesSpaceIdLoans(org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansPathParams.class, baseUrl, "/spaces/{spaceId}/loans", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansResponse() {{
            getSpacesSpaceIdLoans200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Loan[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Loan[].class);
                res.getSpacesSpaceIdLoans200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns list of all loan folders even archived of the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansAllResponse getSpacesSpaceIdLoansAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansAllPathParams.class, baseUrl, "/spaces/{spaceId}/loans/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdLoansAllResponse() {{
            getSpacesSpaceIdLoansAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Loan[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Loan[].class);
                res.getSpacesSpaceIdLoansAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesResponse getSpacesSpaceIdPersonsIdEmployees(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/employees", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesResponse() {{
            getSpacesSpaceIdPersonsIdEmployees200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Employee[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Employee[].class);
                res.getSpacesSpaceIdPersonsIdEmployees200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of all employees (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesAllResponse getSpacesSpaceIdPersonsIdEmployeesAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesAllPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/employees/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdEmployeesAllResponse() {{
            getSpacesSpaceIdPersonsIdEmployeesAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Employee[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Employee[].class);
                res.getSpacesSpaceIdPersonsIdEmployeesAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder exchange of the person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdExchangeResponse getSpacesSpaceIdPersonsIdExchange(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdExchangeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdExchangePathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/exchange", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdExchangeResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdExchangeResponse() {{
            getSpacesSpaceIdPersonsIdExchange200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdExchange200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdExchange200ApplicationJSON.class);
                res.getSpacesSpaceIdPersonsIdExchange200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns folder of the person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdFollowUpsResponse getSpacesSpaceIdPersonsIdFollowUps(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdFollowUpsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdFollowUpsPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/follow-ups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdFollowUpsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdFollowUpsResponse() {{
            followUp = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.FollowUp out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.FollowUp.class);
                res.followUp = out;
            }
        }

        return res;
    }

    /**
     * Returns invitation of a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdInvitationResponse getSpacesSpaceIdPersonsIdInvitation(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdInvitationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdInvitationPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/invitation", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdInvitationResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsIdInvitationResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Returns folderId with the access of the person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsMemberIdFoldersIdResponse getSpacesSpaceIdPersonsMemberIdFoldersId(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsMemberIdFoldersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsMemberIdFoldersIdPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{memberId}/folders/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsMemberIdFoldersIdResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsMemberIdFoldersIdResponse() {{
            getSpacesSpaceIdPersonsMemberIdFoldersId200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsMemberIdFoldersId200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetSpacesSpaceIdPersonsMemberIdFoldersId200ApplicationJSON.class);
                res.getSpacesSpaceIdPersonsMemberIdFoldersId200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and provider data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersResponse getSpacesSpaceIdProviders(org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersPathParams.class, baseUrl, "/spaces/{spaceId}/providers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersResponse() {{
            getSpacesSpaceIdProviders200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Provider[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Provider[].class);
                res.getSpacesSpaceIdProviders200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and provider data (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersAllResponse getSpacesSpaceIdProvidersAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersAllPathParams.class, baseUrl, "/spaces/{spaceId}/providers/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdProvidersAllResponse() {{
            getSpacesSpaceIdProvidersAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Provider[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Provider[].class);
                res.getSpacesSpaceIdProvidersAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and social regime data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesResponse getSpacesSpaceIdSocialRegimes(org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesPathParams.class, baseUrl, "/spaces/{spaceId}/social-regimes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesResponse() {{
            getSpacesSpaceIdSocialRegimes200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SocialRegime[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SocialRegime[].class);
                res.getSpacesSpaceIdSocialRegimes200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns folder with Id and social regime data (even archived)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesAllResponse getSpacesSpaceIdSocialRegimesAll(org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesAllRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesAllPathParams.class, baseUrl, "/spaces/{spaceId}/social-regimes/all", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesAllQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesAllResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdSocialRegimesAllResponse() {{
            getSpacesSpaceIdSocialRegimesAll200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SocialRegime[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SocialRegime[].class);
                res.getSpacesSpaceIdSocialRegimesAll200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Returns CSV Invoicings of the spaces for the account of the spaceId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSpacesSpaceIdSpacesInvoicingsResponse getSpacesSpaceIdSpacesInvoicings(org.openapis.openapi.models.operations.GetSpacesSpaceIdSpacesInvoicingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSpacesSpaceIdSpacesInvoicingsPathParams.class, baseUrl, "/spaces/{spaceId}/spaces-invoicings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetSpacesSpaceIdSpacesInvoicingsQueryParams.class, request.queryParams, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSpacesSpaceIdSpacesInvoicingsResponse res = new org.openapis.openapi.models.operations.GetSpacesSpaceIdSpacesInvoicingsResponse() {{
            getSpacesSpaceIdSpacesInvoicings200ApplicationJSONAllOfs = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.SpacesInvoicing[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.SpacesInvoicing[].class);
                res.getSpacesSpaceIdSpacesInvoicings200ApplicationJSONAllOfs = out;
            }
        }

        return res;
    }

    /**
     * Modifies an object
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchBusinessGroupsResponse patchBusinessGroups(org.openapis.openapi.models.operations.PatchBusinessGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/business-groups");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchBusinessGroupsResponse res = new org.openapis.openapi.models.operations.PatchBusinessGroupsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify email of profile
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchProfileEmailResponse patchProfileEmail(org.openapis.openapi.models.operations.PatchProfileEmailRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile/email");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchProfileEmailResponse res = new org.openapis.openapi.models.operations.PatchProfileEmailResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify mobile of profile
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchProfileMobileResponse patchProfileMobile(org.openapis.openapi.models.operations.PatchProfileMobileRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile/mobile");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchProfileMobileResponse res = new org.openapis.openapi.models.operations.PatchProfileMobileResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify infos of profile
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchProfileJsonResponse patchProfileJson(org.openapis.openapi.models.operations.PatchProfileJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchProfileJsonResponse res = new org.openapis.openapi.models.operations.PatchProfileJsonResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify infos of profile
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchProfileMultipartResponse patchProfileMultipart(org.openapis.openapi.models.operations.PatchProfileMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchProfileMultipartResponse res = new org.openapis.openapi.models.operations.PatchProfileMultipartResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Space (except private)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdResponse patchSpacesId(org.openapis.openapi.models.operations.PatchSpacesIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdPathParams.class, baseUrl, "/spaces/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a company entity
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdCompanyEntitiesCompanyIdResponse patchSpacesIdCompanyEntitiesCompanyId(org.openapis.openapi.models.operations.PatchSpacesIdCompanyEntitiesCompanyIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdCompanyEntitiesCompanyIdPathParams.class, baseUrl, "/spaces/{id}/company-entities/{companyId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdCompanyEntitiesCompanyIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdCompanyEntitiesCompanyIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Add/Modify/Delete a person in a customer contract (except manager)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdResponse patchSpacesIdFoldersFolderIdPersonsMemberId(org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdPathParams.class, baseUrl, "/spaces/{id}/folders/{folderId}/persons/{memberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * open an access
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessResponse patchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccess(org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessPathParams.class, baseUrl, "/spaces/{id}/folders/{folderId}/persons/{memberId}/activeaccess", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdActiveaccessResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * close an access
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessResponse patchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccess(org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessPathParams.class, baseUrl, "/spaces/{id}/folders/{folderId}/persons/{memberId}/unactiveaccess", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdFoldersFolderIdPersonsMemberIdUnactiveaccessResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdResponse patchSpacesIdGroupsGroupId(org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdPathParams.class, baseUrl, "/spaces/{id}/groups/{groupId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Add access to a folder for a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdFoldersFolderIdResponse patchSpacesIdGroupsGroupIdFoldersFolderId(org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdFoldersFolderIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdFoldersFolderIdPathParams.class, baseUrl, "/spaces/{id}/groups/{groupId}/folders/{folderId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdFoldersFolderIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdFoldersFolderIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Add a person to a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdPersonsMemberIdResponse patchSpacesIdGroupsGroupIdPersonsMemberId(org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdPersonsMemberIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdPersonsMemberIdPathParams.class, baseUrl, "/spaces/{id}/groups/{groupId}/persons/{memberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdPersonsMemberIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdGroupsGroupIdPersonsMemberIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify legal information of a Space (except private)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdLegalResponse patchSpacesIdLegal(org.openapis.openapi.models.operations.PatchSpacesIdLegalRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdLegalPathParams.class, baseUrl, "/spaces/{id}/legal", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdLegalResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdLegalResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify the role of a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdPersonsMemberIdPlayerResponse patchSpacesIdPersonsMemberIdPlayer(org.openapis.openapi.models.operations.PatchSpacesIdPersonsMemberIdPlayerRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdPersonsMemberIdPlayerPathParams.class, baseUrl, "/spaces/{id}/persons/{memberId}/player", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdPersonsMemberIdPlayerResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdPersonsMemberIdPlayerResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdPersonsPersonIdResponse patchSpacesIdPersonsPersonId(org.openapis.openapi.models.operations.PatchSpacesIdPersonsPersonIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdPersonsPersonIdPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdPersonsPersonIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdPersonsPersonIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Add/Modify/Delete a person in a portfolio (except manager)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdResponse patchSpacesIdPortfoliosPortfolioIdPersonsMemberId(org.openapis.openapi.models.operations.PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdPathParams.class, baseUrl, "/spaces/{id}/portfolios/{portfolioId}/persons/{memberId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesIdPortfoliosPortfolioIdPersonsMemberIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a common folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdCommonFoldersIdResponse patchSpacesSpaceIdCommonFoldersId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdCommonFoldersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdCommonFoldersIdPathParams.class, baseUrl, "/spaces/{spaceId}/common-folders/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdCommonFoldersIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdCommonFoldersIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a doc
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdDocumentsDocumentIdResponse patchSpacesSpaceIdDocumentsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdDocumentsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdDocumentsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdDocumentsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdDocumentsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a bank statement
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/bank-statements/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdBankStatementsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a contractual document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/contractual-documents/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdContractualDocumentsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a coporate tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/corporate-tax-declarations/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdCorporateTaxDeclarationsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify an expense report
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/expense-proofs/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseProofsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify an expense report
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/expense-reports/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdExpenseReportsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a invoice
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdInvoicesDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/invoices/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdInvoicesDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify an other tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/other-taxes/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdOtherTaxesDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a payroll
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdPayrollsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a payslip
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdPayslipsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/payslips/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdPayslipsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a social contract
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/social-contracts/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialContractsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a social declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/social-declarations/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdSocialDeclarationsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify a vat declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse patchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/vat-declarations/{documentId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersFolderIdVatDeclarationsDocumentIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdResponse patchSpacesSpaceIdFoldersId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and AccountingYear data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdAccountingYearResponse patchSpacesSpaceIdFoldersIdAccountingYear(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdAccountingYearRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdAccountingYearPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/accounting-year", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdAccountingYearResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdAccountingYearResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Bank data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdBankResponse patchSpacesSpaceIdFoldersIdBank(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdBankRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdBankPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/bank", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdBankResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdBankResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Collective Decision data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCollectiveDecisionResponse patchSpacesSpaceIdFoldersIdCollectiveDecision(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCollectiveDecisionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCollectiveDecisionPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/collective-decision", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCollectiveDecisionResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCollectiveDecisionResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Customer data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCustomerResponse patchSpacesSpaceIdFoldersIdCustomer(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCustomerRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCustomerPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/customer", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCustomerResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdCustomerResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Detach a doc of a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachResponse patchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetach(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/documents/{documentId}/detach", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdDocumentsDocumentIdDetachResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Employee data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdEmployeeResponse patchSpacesSpaceIdFoldersIdEmployee(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdEmployeeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdEmployeePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/employee", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdEmployeeResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdEmployeeResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Insurance data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdInsuranceResponse patchSpacesSpaceIdFoldersIdInsurance(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdInsuranceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdInsurancePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/insurance", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdInsuranceResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdInsuranceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Loan data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdLoanResponse patchSpacesSpaceIdFoldersIdLoan(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdLoanRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdLoanPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/loan", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdLoanResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdLoanResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Message
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdMessagesMessageIdResponse patchSpacesSpaceIdFoldersIdMessagesMessageId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdMessagesMessageIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdMessagesMessageIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/messages/{messageId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdMessagesMessageIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdMessagesMessageIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Password
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse patchSpacesSpaceIdFoldersIdPasswordsPasswordId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/passwords/{passwordId}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdPasswordsPasswordIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Professional Vehicle data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProfessionalVehicleResponse patchSpacesSpaceIdFoldersIdProfessionalVehicle(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProfessionalVehicleRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProfessionalVehiclePathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/professional-vehicle", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProfessionalVehicleResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProfessionalVehicleResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Provider data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProviderResponse patchSpacesSpaceIdFoldersIdProvider(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProviderRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProviderPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/provider", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProviderResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdProviderResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify the status of a requireddocument
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidResponse patchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentid(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Social Regime data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdSocialRegimesResponse patchSpacesSpaceIdFoldersIdSocialRegimes(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdSocialRegimesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdSocialRegimesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-regimes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdSocialRegimesResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdSocialRegimesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Tax Contract data
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdTaxContractResponse patchSpacesSpaceIdFoldersIdTaxContract(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdTaxContractRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdTaxContractPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/tax-contract", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdTaxContractResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdFoldersIdTaxContractResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify the invitation of a person to collect documents
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdCallForDocumentResponse patchSpacesSpaceIdPersonsIdCallForDocument(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdCallForDocumentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdCallForDocumentPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/call-for-document", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdCallForDocumentResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdCallForDocumentResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * invite a person in a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdGuestInSpaceResponse patchSpacesSpaceIdPersonsIdGuestInSpace(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdGuestInSpaceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdGuestInSpacePathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/guest-in-space", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdGuestInSpaceResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdGuestInSpaceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * modify an invitation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdInvitationResponse patchSpacesSpaceIdPersonsIdInvitation(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdInvitationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdInvitationPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/invitation", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdInvitationResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsIdInvitationResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Modify an access
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsMemberIdFoldersIdResponse patchSpacesSpaceIdPersonsMemberIdFoldersId(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsMemberIdFoldersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsMemberIdFoldersIdPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{memberId}/folders/{id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsMemberIdFoldersIdResponse res = new org.openapis.openapi.models.operations.PatchSpacesSpaceIdPersonsMemberIdFoldersIdResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Adds a group (only for managers and ADN collaborators)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostBusinessGroupsResponse postBusinessGroups(org.openapis.openapi.models.operations.PostBusinessGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/business-groups");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostBusinessGroupsResponse res = new org.openapis.openapi.models.operations.PostBusinessGroupsResponse() {{
            postBusinessGroups201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBusinessGroups201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBusinessGroups201ApplicationJSON.class);
                res.postBusinessGroups201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * send an invitation to manager the private space of personId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceResponse postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace(org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpacePathParams.class, baseUrl, "/business-groups/{id}/spaces/{spaceId}/legal-entities/{personId}/customers/{folderId}/guest-in-space", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceResponse res = new org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpaceResponse() {{
            postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace201ApplicationJSON.class);
                res.postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdGuestInSpace201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a Space in a group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesResponse postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces(org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesPathParams.class, baseUrl, "/business-groups/{id}/spaces/{spaceId}/legal-entities/{personId}/customers/{folderId}/spaces", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesResponse res = new org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpacesResponse() {{
            postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces201ApplicationJSON.class);
                res.postBusinessGroupsIdSpacesSpaceIdLegalEntitiesPersonIdCustomersFolderIdSpaces201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document (this document is analyzed to be saved in the correct folder and correct space)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubDocumentsJsonResponse postHubDocumentsJson(org.openapis.openapi.models.operations.PostHubDocumentsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hub/documents");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubDocumentsJsonResponse res = new org.openapis.openapi.models.operations.PostHubDocumentsJsonResponse() {{
            postHubDocumentsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubDocumentsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubDocumentsJSON201ApplicationJSON.class);
                res.postHubDocumentsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document (this document is analyzed to be saved in the correct folder and correct space)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubDocumentsMultipartResponse postHubDocumentsMultipart(org.openapis.openapi.models.operations.PostHubDocumentsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hub/documents");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubDocumentsMultipartResponse res = new org.openapis.openapi.models.operations.PostHubDocumentsMultipartResponse() {{
            postHubDocumentsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubDocumentsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubDocumentsMultipart201ApplicationJSON.class);
                res.postHubDocumentsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payslip (this document is analyzed to be saved in the correct folder and correct space)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubPayslipsJsonResponse postHubPayslipsJson(org.openapis.openapi.models.operations.PostHubPayslipsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hub/payslips");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubPayslipsJsonResponse res = new org.openapis.openapi.models.operations.PostHubPayslipsJsonResponse() {{
            postHubPayslipsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubPayslipsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubPayslipsJSON201ApplicationJSON.class);
                res.postHubPayslipsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payslip (this document is analyzed to be saved in the correct folder and correct space)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubPayslipsMultipartResponse postHubPayslipsMultipart(org.openapis.openapi.models.operations.PostHubPayslipsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/hub/payslips");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubPayslipsMultipartResponse res = new org.openapis.openapi.models.operations.PostHubPayslipsMultipartResponse() {{
            postHubPayslipsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubPayslipsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubPayslipsMultipart201ApplicationJSON.class);
                res.postHubPayslipsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a space (this document is analyzed to be saved in the correct folder)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsJsonResponse postHubSpacesSpaceIdDocumentsJson(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsJsonPathParams.class, baseUrl, "/hub/spaces/{spaceId}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsJsonResponse res = new org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsJsonResponse() {{
            postHubSpacesSpaceIdDocumentsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsJSON201ApplicationJSON.class);
                res.postHubSpacesSpaceIdDocumentsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a space (this document is analyzed to be saved in the correct folder)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsMultipartResponse postHubSpacesSpaceIdDocumentsMultipart(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsMultipartPathParams.class, baseUrl, "/hub/spaces/{spaceId}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsMultipartResponse res = new org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsMultipartResponse() {{
            postHubSpacesSpaceIdDocumentsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubSpacesSpaceIdDocumentsMultipart201ApplicationJSON.class);
                res.postHubSpacesSpaceIdDocumentsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payslip in a space (this document is analyzed to be saved in the correct folder)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsJsonResponse postHubSpacesSpaceIdPayslipsJson(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsJsonPathParams.class, baseUrl, "/hub/spaces/{spaceId}/payslips", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsJsonResponse res = new org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsJsonResponse() {{
            postHubSpacesSpaceIdPayslipsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsJSON201ApplicationJSON.class);
                res.postHubSpacesSpaceIdPayslipsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payslip in a space (this document is analyzed to be saved in the correct folder)
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsMultipartResponse postHubSpacesSpaceIdPayslipsMultipart(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsMultipartPathParams.class, baseUrl, "/hub/spaces/{spaceId}/payslips", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsMultipartResponse res = new org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsMultipartResponse() {{
            postHubSpacesSpaceIdPayslipsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostHubSpacesSpaceIdPayslipsMultipart201ApplicationJSON.class);
                res.postHubSpacesSpaceIdPayslipsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * add a document to the target menuId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsJsonResponse postMenusMenuIdDocumentsJson(org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsJsonPathParams.class, baseUrl, "/menus/{menuId}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsJsonResponse res = new org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsJsonResponse() {{
            postMenusMenuIdDocumentsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsJSON201ApplicationJSON.class);
                res.postMenusMenuIdDocumentsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * add a document to the target menuId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsMultipartResponse postMenusMenuIdDocumentsMultipart(org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsMultipartPathParams.class, baseUrl, "/menus/{menuId}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsMultipartResponse res = new org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsMultipartResponse() {{
            postMenusMenuIdDocumentsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostMenusMenuIdDocumentsMultipart201ApplicationJSON.class);
                res.postMenusMenuIdDocumentsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * create infos of profile
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostProfileJsonResponse postProfileJson(org.openapis.openapi.models.operations.PostProfileJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostProfileJsonResponse res = new org.openapis.openapi.models.operations.PostProfileJsonResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * create infos of profile
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostProfileMultipartResponse postProfileMultipart(org.openapis.openapi.models.operations.PostProfileMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/profile");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostProfileMultipartResponse res = new org.openapis.openapi.models.operations.PostProfileMultipartResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * complete the invitation
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRegistrationResponse postRegistration(org.openapis.openapi.models.operations.PostRegistrationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/registration");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRegistrationResponse res = new org.openapis.openapi.models.operations.PostRegistrationResponse() {{
            postRegistration201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostRegistration201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostRegistration201ApplicationJSON.class);
                res.postRegistration201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a Space in my group
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesResponse postSpaces(org.openapis.openapi.models.operations.PostSpacesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/spaces");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesResponse res = new org.openapis.openapi.models.operations.PostSpacesResponse() {{
            postSpaces201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpaces201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpaces201ApplicationJSON.class);
                res.postSpaces201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create a accounting year for the space id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdAccountingYearResponse postSpacesIdAccountingYear(org.openapis.openapi.models.operations.PostSpacesIdAccountingYearRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdAccountingYearPathParams.class, baseUrl, "/spaces/{id}/accounting-year", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdAccountingYearResponse res = new org.openapis.openapi.models.operations.PostSpacesIdAccountingYearResponse() {{
            postSpacesIdAccountingYear201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdAccountingYear201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdAccountingYear201ApplicationJSON.class);
                res.postSpacesIdAccountingYear201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create a colletive decision for the space id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdCollectiveDecisionResponse postSpacesIdCollectiveDecision(org.openapis.openapi.models.operations.PostSpacesIdCollectiveDecisionRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdCollectiveDecisionPathParams.class, baseUrl, "/spaces/{id}/collective-decision", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdCollectiveDecisionResponse res = new org.openapis.openapi.models.operations.PostSpacesIdCollectiveDecisionResponse() {{
            postSpacesIdCollectiveDecision201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdCollectiveDecision201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdCollectiveDecision201ApplicationJSON.class);
                res.postSpacesIdCollectiveDecision201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a Company Entity in a Space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesResponse postSpacesIdCompanyEntities(org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesPathParams.class, baseUrl, "/spaces/{id}/company-entities", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesResponse res = new org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesResponse() {{
            postSpacesIdCompanyEntities201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdCompanyEntities201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdCompanyEntities201ApplicationJSON.class);
                res.postSpacesIdCompanyEntities201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Replace or Add a contact detail for a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesPersonIdDetailsResponse postSpacesIdCompanyEntitiesPersonIdDetails(org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesPersonIdDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesPersonIdDetailsPathParams.class, baseUrl, "/spaces/{id}/company-entities/{personId}/details", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesPersonIdDetailsResponse res = new org.openapis.openapi.models.operations.PostSpacesIdCompanyEntitiesPersonIdDetailsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * create an archive with documents
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdDocumentsDownloadResponse postSpacesIdDocumentsDownload(org.openapis.openapi.models.operations.PostSpacesIdDocumentsDownloadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdDocumentsDownloadPathParams.class, baseUrl, "/spaces/{id}/documents/download", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdDocumentsDownloadResponse res = new org.openapis.openapi.models.operations.PostSpacesIdDocumentsDownloadResponse() {{
            postSpacesIdDocumentsDownload201ApplicationJSONObject = null;
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdDocumentsDownload201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdDocumentsDownload201ApplicationJSON.class);
                res.postSpacesIdDocumentsDownload201ApplicationJSONObject = out;
            }
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "multipart/form-data")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * invite a owner in a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceResponse postSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpace(org.openapis.openapi.models.operations.PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpacePathParams.class, baseUrl, "/spaces/{id}/folders/{folderId}/persons/{personId}/guest-in-space", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceResponse res = new org.openapis.openapi.models.operations.PostSpacesIdFoldersFolderIdPersonsPersonIdGuestInSpaceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Add a group in a Space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdGroupsResponse postSpacesIdGroups(org.openapis.openapi.models.operations.PostSpacesIdGroupsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdGroupsPathParams.class, baseUrl, "/spaces/{id}/groups", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdGroupsResponse res = new org.openapis.openapi.models.operations.PostSpacesIdGroupsResponse() {{
            postSpacesIdGroups201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdGroups201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdGroups201ApplicationJSON.class);
                res.postSpacesIdGroups201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a Person in a Space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdPersonsResponse postSpacesIdPersons(org.openapis.openapi.models.operations.PostSpacesIdPersonsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdPersonsPathParams.class, baseUrl, "/spaces/{id}/persons", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdPersonsResponse res = new org.openapis.openapi.models.operations.PostSpacesIdPersonsResponse() {{
            postSpacesIdPersons201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdPersons201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdPersons201ApplicationJSON.class);
                res.postSpacesIdPersons201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Replace or Add a contact detail for a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdDetailsResponse postSpacesIdPersonsPersonIdDetails(org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdDetailsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdDetailsPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}/details", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdDetailsResponse res = new org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdDetailsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Create a portfolio for the person personId
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdPortfoliosResponse postSpacesIdPersonsPersonIdPortfolios(org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdPortfoliosRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdPortfoliosPathParams.class, baseUrl, "/spaces/{id}/persons/{personId}/portfolios", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdPortfoliosResponse res = new org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdPortfoliosResponse() {{
            postSpacesIdPersonsPersonIdPortfolios201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdPortfolios201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdPersonsPersonIdPortfolios201ApplicationJSON.class);
                res.postSpacesIdPersonsPersonIdPortfolios201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Create a professional vehicle for the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdProfessionalVehiclesResponse postSpacesIdProfessionalVehicles(org.openapis.openapi.models.operations.PostSpacesIdProfessionalVehiclesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdProfessionalVehiclesPathParams.class, baseUrl, "/spaces/{id}/professional-vehicles", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdProfessionalVehiclesResponse res = new org.openapis.openapi.models.operations.PostSpacesIdProfessionalVehiclesResponse() {{
            postSpacesIdProfessionalVehicles201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdProfessionalVehicles201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdProfessionalVehicles201ApplicationJSON.class);
                res.postSpacesIdProfessionalVehicles201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Enable/Disable logs
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdSettingsNf203LogsResponse postSpacesIdSettingsNf203Logs(org.openapis.openapi.models.operations.PostSpacesIdSettingsNf203LogsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdSettingsNf203LogsPathParams.class, baseUrl, "/spaces/{id}/settings/nf203/logs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdSettingsNf203LogsResponse res = new org.openapis.openapi.models.operations.PostSpacesIdSettingsNf203LogsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Replace or Add a status
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdStatusResponse postSpacesIdStatus(org.openapis.openapi.models.operations.PostSpacesIdStatusRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdStatusPathParams.class, baseUrl, "/spaces/{id}/status", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdStatusResponse res = new org.openapis.openapi.models.operations.PostSpacesIdStatusResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Create a tax contract for the space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdTaxContractsResponse postSpacesIdTaxContracts(org.openapis.openapi.models.operations.PostSpacesIdTaxContractsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdTaxContractsPathParams.class, baseUrl, "/spaces/{id}/tax-contracts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdTaxContractsResponse res = new org.openapis.openapi.models.operations.PostSpacesIdTaxContractsResponse() {{
            postSpacesIdTaxContracts201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesIdTaxContracts201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesIdTaxContracts201ApplicationJSON.class);
                res.postSpacesIdTaxContracts201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Creates a trigger for the space id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesIdTriggersNameResponse postSpacesIdTriggersName(org.openapis.openapi.models.operations.PostSpacesIdTriggersNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesIdTriggersNamePathParams.class, baseUrl, "/spaces/{id}/triggers/{name}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesIdTriggersNameResponse res = new org.openapis.openapi.models.operations.PostSpacesIdTriggersNameResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
        }

        return res;
    }

    /**
     * Add a data to a document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdExtendResponse postSpacesSpaceIdDocumentsDocumentIdExtend(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdExtendRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdExtendPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/extend", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdExtendResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdExtendResponse() {{
            postSpacesSpaceIdDocumentsDocumentIdExtend201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdExtend201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdExtend201ApplicationJSON.class);
                res.postSpacesSpaceIdDocumentsDocumentIdExtend201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * send by mail a document
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdMailingResponse postSpacesSpaceIdDocumentsDocumentIdMailing(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdMailingRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdMailingPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/mailing", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdMailingResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdMailingResponse() {{
            postSpacesSpaceIdDocumentsDocumentIdMailing200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdMailing200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdMailing200ApplicationJSON.class);
                res.postSpacesSpaceIdDocumentsDocumentIdMailing200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a version to a document and set it as current
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonResponse postSpacesSpaceIdDocumentsDocumentIdVersionsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/versions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsJsonResponse() {{
            postSpacesSpaceIdDocumentsDocumentIdVersionsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdDocumentsDocumentIdVersionsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a version to a document and set it as current
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartResponse postSpacesSpaceIdDocumentsDocumentIdVersionsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/documents/{documentId}/versions", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipartResponse() {{
            postSpacesSpaceIdDocumentsDocumentIdVersionsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdDocumentsDocumentIdVersionsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdDocumentsDocumentIdVersionsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a data to a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdExtendResponse postSpacesSpaceIdExtend(org.openapis.openapi.models.operations.PostSpacesSpaceIdExtendRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdExtendPathParams.class, baseUrl, "/spaces/{spaceId}/extend", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdExtendResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdExtendResponse() {{
            postSpacesSpaceIdExtend201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdExtend201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdExtend201ApplicationJSON.class);
                res.postSpacesSpaceIdExtend201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * recalculate a payroll
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshResponse postSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}/refresh", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefreshResponse() {{
            postSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersFolderIdPayrollsDocumentIdRefresh201ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * Add a bank statement in a folder bank
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsJsonResponse postSpacesSpaceIdFoldersIdBankStatementsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/bank-statements", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsJsonResponse() {{
            postSpacesSpaceIdFoldersIdBankStatementsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdBankStatementsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a bank statement in a folder bank
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsMultipartResponse postSpacesSpaceIdFoldersIdBankStatementsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/bank-statements", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdBankStatementsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdBankStatementsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdBankStatementsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a common folder in another folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCommonFoldersResponse postSpacesSpaceIdFoldersIdCommonFolders(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCommonFoldersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCommonFoldersPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/common-folders", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCommonFoldersResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCommonFoldersResponse() {{
            postSpacesSpaceIdFoldersIdCommonFolders201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCommonFolders201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCommonFolders201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdCommonFolders201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsJsonResponse postSpacesSpaceIdFoldersIdContractualDocumentsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/contractual-documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsJsonResponse() {{
            postSpacesSpaceIdFoldersIdContractualDocumentsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdContractualDocumentsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartResponse postSpacesSpaceIdFoldersIdContractualDocumentsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/contractual-documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdContractualDocumentsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdContractualDocumentsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdContractualDocumentsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a corporate tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonResponse postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/coporate-tax-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJsonResponse() {{
            postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a corporate tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartResponse postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/coporate-tax-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdCoporateTaxDeclarationsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsJsonResponse postSpacesSpaceIdFoldersIdDocumentsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsJsonResponse() {{
            postSpacesSpaceIdFoldersIdDocumentsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdDocumentsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsMultipartResponse postSpacesSpaceIdFoldersIdDocumentsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/documents", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdDocumentsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdDocumentsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a expense proof in a folder followup or exchange
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsJsonResponse postSpacesSpaceIdFoldersIdExpenseProofsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/expense-proofs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsJsonResponse() {{
            postSpacesSpaceIdFoldersIdExpenseProofsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdExpenseProofsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a expense proof in a folder followup or exchange
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsMultipartResponse postSpacesSpaceIdFoldersIdExpenseProofsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/expense-proofs", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdExpenseProofsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseProofsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdExpenseProofsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a expense report in a folder followup
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsJsonResponse postSpacesSpaceIdFoldersIdExpenseReportsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/expense-reports", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsJsonResponse() {{
            postSpacesSpaceIdFoldersIdExpenseReportsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdExpenseReportsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a expense report in a folder followup
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsMultipartResponse postSpacesSpaceIdFoldersIdExpenseReportsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/expense-reports", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdExpenseReportsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdExpenseReportsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdExpenseReportsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a invoice in a folder of a customer or a provider
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesJsonResponse postSpacesSpaceIdFoldersIdInvoicesJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/invoices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesJsonResponse() {{
            postSpacesSpaceIdFoldersIdInvoicesJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdInvoicesJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a invoice in a folder of a customer or a provider
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesMultipartResponse postSpacesSpaceIdFoldersIdInvoicesMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/invoices", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesMultipartResponse() {{
            postSpacesSpaceIdFoldersIdInvoicesMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdInvoicesMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdInvoicesMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Write a message in the journal of a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdMessagesResponse postSpacesSpaceIdFoldersIdMessages(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdMessagesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdMessagesPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/messages", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdMessagesResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdMessagesResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Add a tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesJsonResponse postSpacesSpaceIdFoldersIdOtherTaxesJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/other-taxes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesJsonResponse() {{
            postSpacesSpaceIdFoldersIdOtherTaxesJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdOtherTaxesJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a tax declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesMultipartResponse postSpacesSpaceIdFoldersIdOtherTaxesMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/other-taxes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesMultipartResponse() {{
            postSpacesSpaceIdFoldersIdOtherTaxesMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdOtherTaxesMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdOtherTaxesMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Write a identifier/password in aa folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPasswordsResponse postSpacesSpaceIdFoldersIdPasswords(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPasswordsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPasswordsPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/passwords", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPasswordsResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPasswordsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
        }

        return res;
    }

    /**
     * Add a nominative social declaration in a folder social
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonResponse postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJsonResponse() {{
            postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a nominative social declaration in a folder social
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartResponse postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipartResponse() {{
            postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdPayrollsPayrollIdNominativeSocialDeclarationMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payroll in a folder social
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsJsonResponse postSpacesSpaceIdFoldersIdPayrollsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payrolls", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsJsonResponse() {{
            postSpacesSpaceIdFoldersIdPayrollsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdPayrollsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payroll in a folder social
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsMultipartResponse postSpacesSpaceIdFoldersIdPayrollsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payrolls", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdPayrollsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayrollsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdPayrollsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payslip in a folder employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsJsonResponse postSpacesSpaceIdFoldersIdPayslipsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payslips", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsJsonResponse() {{
            postSpacesSpaceIdFoldersIdPayslipsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdPayslipsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a payslip in a folder employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsMultipartResponse postSpacesSpaceIdFoldersIdPayslipsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/payslips", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdPayslipsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdPayslipsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdPayslipsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a required document to a line
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonResponse postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJsonResponse() {{
            postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a required document to a line
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartResponse postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipartResponse() {{
            postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdRequiredDocumentsRequireddocumentidMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a social contract in a folder employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsJsonResponse postSpacesSpaceIdFoldersIdSocialContractsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-contracts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsJsonResponse() {{
            postSpacesSpaceIdFoldersIdSocialContractsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdSocialContractsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a social contract in a folder employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsMultipartResponse postSpacesSpaceIdFoldersIdSocialContractsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-contracts", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdSocialContractsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialContractsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdSocialContractsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a social declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonResponse postSpacesSpaceIdFoldersIdSocialDeclarationsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsJsonResponse() {{
            postSpacesSpaceIdFoldersIdSocialDeclarationsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdSocialDeclarationsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a social declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartResponse postSpacesSpaceIdFoldersIdSocialDeclarationsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/social-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdSocialDeclarationsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdSocialDeclarationsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdSocialDeclarationsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a vat declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsJsonResponse postSpacesSpaceIdFoldersIdVatDeclarationsJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/vat-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsJsonResponse() {{
            postSpacesSpaceIdFoldersIdVatDeclarationsJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdVatDeclarationsJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a vat declaration
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartResponse postSpacesSpaceIdFoldersIdVatDeclarationsMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/vat-declarations", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsMultipartResponse() {{
            postSpacesSpaceIdFoldersIdVatDeclarationsMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdVatDeclarationsMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdVatDeclarationsMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassJsonResponse postSpacesSpaceIdFoldersIdDocumentClassJson(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassJsonRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassJsonPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/{documentClass}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassJsonResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassJsonResponse() {{
            postSpacesSpaceIdFoldersIdDocumentClassJSON201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassJSON201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassJSON201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdDocumentClassJSON201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a document in a folder
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassMultipartResponse postSpacesSpaceIdFoldersIdDocumentClassMultipart(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassMultipartRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassMultipartPathParams.class, baseUrl, "/spaces/{spaceId}/folders/{id}/{documentClass}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "multipart");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassMultipartResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassMultipartResponse() {{
            postSpacesSpaceIdFoldersIdDocumentClassMultipart201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassMultipart201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdFoldersIdDocumentClassMultipart201ApplicationJSON.class);
                res.postSpacesSpaceIdFoldersIdDocumentClassMultipart201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a folder for a bank
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdBanksResponse postSpacesSpaceIdLegalEntitiesIdBanks(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdBanksRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdBanksPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/banks", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdBanksResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdBanksResponse() {{
            postSpacesSpaceIdLegalEntitiesIdBanks201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdBanks201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdBanks201ApplicationJSON.class);
                res.postSpacesSpaceIdLegalEntitiesIdBanks201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a folder for a customer
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdCustomersResponse postSpacesSpaceIdLegalEntitiesIdCustomers(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdCustomersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdCustomersPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/customers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdCustomersResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdCustomersResponse() {{
            postSpacesSpaceIdLegalEntitiesIdCustomers201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdCustomers201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdCustomers201ApplicationJSON.class);
                res.postSpacesSpaceIdLegalEntitiesIdCustomers201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a folder for a insurance
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdInsurancesResponse postSpacesSpaceIdLegalEntitiesIdInsurances(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdInsurancesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdInsurancesPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/insurances", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdInsurancesResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdInsurancesResponse() {{
            postSpacesSpaceIdLegalEntitiesIdInsurances201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdInsurances201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdInsurances201ApplicationJSON.class);
                res.postSpacesSpaceIdLegalEntitiesIdInsurances201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a folder for a loan
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdLoansResponse postSpacesSpaceIdLegalEntitiesIdLoans(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdLoansRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdLoansPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/loans", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdLoansResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdLoansResponse() {{
            postSpacesSpaceIdLegalEntitiesIdLoans201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdLoans201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdLoans201ApplicationJSON.class);
                res.postSpacesSpaceIdLegalEntitiesIdLoans201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a folder for a provider
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdProvidersResponse postSpacesSpaceIdLegalEntitiesIdProviders(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdProvidersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdProvidersPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/providers", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdProvidersResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdProvidersResponse() {{
            postSpacesSpaceIdLegalEntitiesIdProviders201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdProviders201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdProviders201ApplicationJSON.class);
                res.postSpacesSpaceIdLegalEntitiesIdProviders201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a folder for a social regime
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse postSpacesSpaceIdLegalEntitiesIdSocialRegimes(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdSocialRegimesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdSocialRegimesPathParams.class, baseUrl, "/spaces/{spaceId}/legal-entities/{id}/social-regimes", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdSocialRegimesResponse() {{
            postSpacesSpaceIdLegalEntitiesIdSocialRegimes201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdSocialRegimes201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdLegalEntitiesIdSocialRegimes201ApplicationJSON.class);
                res.postSpacesSpaceIdLegalEntitiesIdSocialRegimes201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * invite a person to collect documents
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdCallForDocumentResponse postSpacesSpaceIdPersonsIdCallForDocument(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdCallForDocumentRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdCallForDocumentPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/call-for-document", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdCallForDocumentResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdCallForDocumentResponse() {{
            postSpacesSpaceIdPersonsIdCallForDocument201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdCallForDocument201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdCallForDocument201ApplicationJSON.class);
                res.postSpacesSpaceIdPersonsIdCallForDocument201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Add a folder for a employee
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdEmployeesResponse postSpacesSpaceIdPersonsIdEmployees(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdEmployeesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdEmployeesPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/employees", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdEmployeesResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdEmployeesResponse() {{
            postSpacesSpaceIdPersonsIdEmployees201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdEmployees201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdEmployees201ApplicationJSON.class);
                res.postSpacesSpaceIdPersonsIdEmployees201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * invite a person in a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdGuestInSpaceResponse postSpacesSpaceIdPersonsIdGuestInSpace(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdGuestInSpaceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdGuestInSpacePathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/guest-in-space", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdGuestInSpaceResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdGuestInSpaceResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * create an invitation in a space for a person
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationResponse postSpacesSpaceIdPersonsIdInvitation(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/invitation", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationResponse() {{
            postSpacesSpaceIdPersonsIdInvitation201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitation201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitation201ApplicationJSON.class);
                res.postSpacesSpaceIdPersonsIdInvitation201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * send the invitation of a person in a space
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendResponse postSpacesSpaceIdPersonsIdInvitationInvitationIdSend(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendPathParams.class, baseUrl, "/spaces/{spaceId}/persons/{id}/invitation/{invitationId}/send", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendResponse res = new org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationInvitationIdSendResponse() {{
            postSpacesSpaceIdPersonsIdInvitationInvitationIdSend201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationInvitationIdSend201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostSpacesSpaceIdPersonsIdInvitationInvitationIdSend201ApplicationJSON.class);
                res.postSpacesSpaceIdPersonsIdInvitationInvitationIdSend201ApplicationJSONObject = out;
            }
        }

        return res;
    }
}