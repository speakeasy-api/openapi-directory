/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform } from "class-transformer";

export class EditChatbotMessageSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  clientCredentials: string;
}

export class EditChatbotMessageApplicationJSON extends SpeakeasyBase {
  /**
   * The AccountID of the Zoom account to which the message was sent. Retrieve this from the Chatbot request sent to your server as shown in the example [here]( https://marketplace.zoom.us/docs/guides/chatbots/sending-messages).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  /**
   * JSON template describing how the edited message should be displayed for the user. For more information please see our ["Send Message" templates](https://marketplace.zoom.us/docs/guides/chatbots/sending-messages#example-request).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content: Record<string, any>;

  /**
   * **Optional**<br>
   *
   * @remarks
   * Enable or disable markdown parser to your chatbot message. Applies the markdown parser to your chatbot message if the value of this field is set to `true`.<br> To learn more, refer to the Chatbot message [markdown reference](https://marketplace.zoom.us/docs/guides/chatbots/customizing-messages/message-with-markdown).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_markdown_support" })
  isMarkdownSupport?: boolean;

  /**
   * Robot JID created when enabling chatbot features on your marketplace app.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "robot_jid" })
  robotJid: string;

  /**
   * **Optional**<br>
   *
   * @remarks
   * The UserJID of the user on whose behalf the message is being sent. Use this field to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_jid" })
  userJid?: string;
}

export class EditChatbotMessageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: EditChatbotMessageApplicationJSON;

  /**
   * Unique Identifier of the message that needs to be updated. This should be retrieved from the response of [Send Chatbot Message API](https://marketplace.zoom.us/docs/api-reference/zoom-api/im-chat/sendchatbot).
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=message_id",
  })
  messageId: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Message updated.
 */
export class EditChatbotMessage200ApplicationXML extends SpeakeasyBase {
  /**
   * Unique Identifier of the updated message,
   */
  @SpeakeasyMetadata()
  messageId?: string;

  /**
   * The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.
   */
  @SpeakeasyMetadata()
  robotJid?: string;

  /**
   * The date and time at which the message was sent.
   */
  @SpeakeasyMetadata()
  sentTime?: Date;

  /**
   * The JID of the Channel or User to whom the message was sent.
   */
  @SpeakeasyMetadata()
  toJid?: string;

  /**
   * The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
   */
  @SpeakeasyMetadata()
  userJid?: string;
}

/**
 * **HTTP Status Code:** `200` **OK**<br>
 *
 * @remarks
 * Message updated.
 */
export class EditChatbotMessage200ApplicationJSON extends SpeakeasyBase {
  /**
   * Unique Identifier of the updated message,
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_id" })
  messageId?: string;

  /**
   * The BotJID found in the Chat Subscription Section on the Features page of your App Dashboard.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "robot_jid" })
  robotJid?: string;

  /**
   * The date and time at which the message was sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sent_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  sentTime?: Date;

  /**
   * The JID of the Channel or User to whom the message was sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "to_jid" })
  toJid?: string;

  /**
   * The UserJID of the user on whose behalf the message is being sent. Used to prevent members of a channel from getting notifications that were set up by a user who has left the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_jid" })
  userJid?: string;
}

export class EditChatbotMessageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200` **OK**<br>
   *
   * @remarks
   * Message updated.
   */
  @SpeakeasyMetadata()
  editChatbotMessage200ApplicationJSONObject?: EditChatbotMessage200ApplicationJSON;
}
