<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Polygon 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * broadcastTransaction
     * 
     * Broadcast raw transactions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Broadcasttransaction1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Broadcasttransaction1Response
     */
	public function broadcasttransaction1(
        \OpenAPI\OpenAPI\Models\Operations\Broadcasttransaction1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Broadcasttransaction1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions/broadcast');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Broadcasttransaction1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->broadcasttransaction1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Broadcasttransaction1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteAddress
     * 
     * deleteAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Deleteaddress1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Deleteaddress1Response
     */
	public function deleteaddress1(
        \OpenAPI\OpenAPI\Models\Operations\Deleteaddress1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Deleteaddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/addresses/{address}', \OpenAPI\OpenAPI\Models\Operations\Deleteaddress1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Deleteaddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteaddress1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Deleteaddress1200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteaddress1422ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Deleteaddress1422ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * exportAddress
     * 
     * exportAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Exportaddress1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Exportaddress1Response
     */
	public function exportaddress1(
        \OpenAPI\OpenAPI\Models\Operations\Exportaddress1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Exportaddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/addresses/export/{address}', \OpenAPI\OpenAPI\Models\Operations\Exportaddress1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Exportaddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportaddress1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Exportaddress1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBlock
     * 
     * Get information of a specific block
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getblock1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getblock1Response
     */
	public function getblock1(
        \OpenAPI\OpenAPI\Models\Operations\Getblock1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getblock1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/blocks/{block}', \OpenAPI\OpenAPI\Models\Operations\Getblock1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getblock1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getERC20
     * 
     * Get information about an ERC20 token
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Geterc201Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Geterc201Response
     */
	public function geterc201(
        \OpenAPI\OpenAPI\Models\Operations\Geterc201Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Geterc201Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/erc20/{erc20_token}', \OpenAPI\OpenAPI\Models\Operations\Geterc201Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Geterc201Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->geterc201200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Geterc201200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getERC20Balance
     * 
     * Get the balance of an ERC20 address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Response
     */
	public function geterc20balance1(
        \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/balances/{address}/erc20/{erc20_token}', \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Geterc20balance1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->geterc20balance1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Geterc20balance1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getGasPrice
     * 
     * Get gas price
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Getgasprice1Response
     */
	public function getgasprice1(
    ): \OpenAPI\OpenAPI\Models\Operations\Getgasprice1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/gasprice');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getgasprice1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getgasprice1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getgasprice1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlockNumber
     * 
     * Get the latest block number
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1Response
     */
	public function getlastblocknumber1(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/blocks/number');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getlastblocknumber1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTOwner
     * 
     * Get the Owner of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Response
     */
	public function getnftowner1(
        \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/nfts/{contract}/owner/{token_id}', \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getnftowner1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnftowner1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnftowner1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getNFTUri
     * 
     * Get the URI of an NFT
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Response
     */
	public function getnfturi1(
        \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/nfts/{ft_contract}/uri/{token_id}', \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getnfturi1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getnfturi1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getnfturi1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getPolygonBalance
     * 
     * Get the balance of an address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceResponse
     */
	public function getpolygonbalance(
        \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/balances/{address}', \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetpolygonbalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getpolygonbalance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getpolygonbalance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransaction
     * 
     * Get info about a transaction
     * 
     * You can choose if you want to get the Transaction encoded or decoded by add /decoded to your request. See examlpes for details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Response
     */
	public function gettransaction1(
        \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions/{transaction}/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransaction1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransaction1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransaction1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransactionReceipt
     * 
     * Get info about a transaction receipt
     * 
     * You can choose if you want to get the Transaction encoded or decoded by add /decoded to your request. See examlpes for details
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Response
     */
	public function gettransactionreceipt1(
        \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions/{transaction}/receipt/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransactionreceipt1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * importAddress
     * 
     * importAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Importaddress1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Importaddress1Response
     */
	public function importaddress1(
        \OpenAPI\OpenAPI\Models\Operations\Importaddress1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Importaddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/addresses/import');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Importaddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importaddress1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Importaddress1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAddresses
     * 
     * listAddresses
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Listaddresses1Response
     */
	public function listaddresses1(
    ): \OpenAPI\OpenAPI\Models\Operations\Listaddresses1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/addresses');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listaddresses1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listaddresses1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listaddresses1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listFailedIPNs
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Listfailedipns1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Listfailedipns1Response
     */
	public function listfailedipns1(
        \OpenAPI\OpenAPI\Models\Operations\Listfailedipns1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Listfailedipns1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/webkhooks/{webhook}/notifications/failed', \OpenAPI\OpenAPI\Models\Operations\Listfailedipns1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listfailedipns1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listfailedipns1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listfailedipns1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listIPNsByWebhookId
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Listipnsbywebhookid1Response
     */
	public function listipnsbywebhookid1(
    ): \OpenAPI\OpenAPI\Models\Operations\Listipnsbywebhookid1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/webkhooks/notifications/failed');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listipnsbywebhookid1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listipnsbywebhookid1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listipnsbywebhookid1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSubscribedAddresses
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses1Response
     */
	public function listsubscribedaddresses1(
    ): \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/webhooks');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listsubscribedaddresses1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListTransactionsByAddress
     * 
     * Our API provides an endpoint for retrieving all transactions associated with a particular blockchain address. To use this endpoint, you will need to provide the wallet address as a parameter in the request.
     * 
     * Each page of results returned by this endpoint contains up to 100 entries, and you can use a paginator to navigate through the pages of results.
     * 
     * To use the paginator, you can include parameter in your request: "page" . The "page" parameter specifies which page of results to retrieve,
     * 
     * For example, to retrieve the first 100 transactions associated with a particular blockchain address, you would make a request to the following URL:
     * 
     * ```
     * /addresses//transactions/1
     * 
     * ```
     * 
     * If there are more than 100 transactions associated with the blockchain address, you can retrieve additional pages of results by incrementing the "page" parameter in your request. For example, to retrieve the next 100 transactions, you would make a request to the following URL:
     * 
     * ```
     * /addresses//transactions/2
     * ```
     * 
     * By using the paginator, you can retrieve all transactions associated with a particular blockchain address, regardless of the total number of transactions in the blockchain.
     * 
     * each request tells you the max pages within the Request in the **max_pages** field
     * 
     * `"max_pages": 515`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress1Response
     */
	public function listtransactionsbyaddress1(
        \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/addresses/{address}/transactions/{page}', \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listtransactionsbyaddress1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * newAddress
     * 
     * newAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Newaddress1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Newaddress1Response
     */
	public function newaddress1(
        \OpenAPI\OpenAPI\Models\Operations\Newaddress1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Newaddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/addresses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Newaddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newaddress1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Newaddress1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * resendFailedIPN
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn1Response
     */
	public function resendfailedipn1(
        \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/webhooks/notifications/failed/{notification_id}', \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resendfailedipn1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Resendfailedipn1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * sendERC20
     * 
     * sendERC20
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Senderc201RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Senderc201Response
     */
	public function senderc201(
        \OpenAPI\OpenAPI\Models\Operations\Senderc201RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Senderc201Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions/erc20');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Senderc201Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * sendERC721
     * 
     * sendERC721
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Senderc7211RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Senderc7211Response
     */
	public function senderc7211(
        \OpenAPI\OpenAPI\Models\Operations\Senderc7211RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Senderc7211Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions/erc721');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Senderc7211Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * sendTransaction
     * 
     * sendTransaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Sendtransaction1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Sendtransaction1Response
     */
	public function sendtransaction1(
        \OpenAPI\OpenAPI\Models\Operations\Sendtransaction1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Sendtransaction1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/transactions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Sendtransaction1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * subscribeAddress
     * 
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.
     * 
     * You can choose one or more from following filter criterias
     * 
     * | **Parameter** | **Description** |
     * | --- | --- |
     * | from | ethereum address |
     * | to | ethereum address |
     * | contractaddress | contract address |
     * | tokenid | token id |
     * 
     * You also need to dpecify the parameter "type". you can choose between \['ETH', 'ERC20', 'ERC721', null\]
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress1RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress1Response
     */
	public function subscribeaddress1(
        \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress1RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscribeaddress1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Subscribeaddress1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unsubscribeAddress
     * 
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress1Response
     */
	public function unsubscribeaddress1(
        \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/polygon/webhooks/{webhook}', \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsubscribeaddress1200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress1200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}