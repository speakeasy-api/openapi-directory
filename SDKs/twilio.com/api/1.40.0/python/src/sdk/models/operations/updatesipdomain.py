"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_v2010_account_sip_sip_domain as shared_api_v2010_account_sip_sip_domain
from enum import Enum
from typing import Optional

UPDATE_SIP_DOMAIN_SERVERS = [
	"https://api.twilio.com",
]


@dataclasses.dataclass
class UpdateSipDomainSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class UpdateSipDomainUpdateSipDomainRequestVoiceFallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateSipDomainUpdateSipDomainRequestVoiceMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `voice_url`"""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class UpdateSipDomainUpdateSipDomainRequestVoiceStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class UpdateSipDomainUpdateSipDomainRequest:
    
    byoc_trunk_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ByocTrunkSid' }})
    r"""The SID of the BYOC Trunk(Bring Your Own Carrier) resource that the Sip Domain will be associated with."""  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'DomainName' }})
    r"""The unique address you reserve on Twilio to which you route your SIP traffic. Domain names can contain letters, digits, and \\"-\\" and must end with `sip.twilio.com`."""  
    emergency_caller_sid: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EmergencyCallerSid' }})
    r"""Whether an emergency caller sid is configured for the domain. If present, this phone number will be used as the callback for the emergency call."""  
    emergency_calling_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EmergencyCallingEnabled' }})
    r"""Whether emergency calling is enabled for the domain. If enabled, allows emergency calls on the domain from phone numbers with validated addresses."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'FriendlyName' }})
    r"""A descriptive string that you created to describe the resource. It can be up to 64 characters long."""  
    secure: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Secure' }})
    r"""Whether secure SIP is enabled for the domain. If enabled, TLS will be enforced and SRTP will be negotiated on all incoming calls to this sip domain."""  
    sip_registration: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SipRegistration' }})
    r"""Whether to allow SIP Endpoints to register with the domain to receive calls. Can be `true` or `false`. `true` allows SIP Endpoints to register with the domain to receive calls, `false` does not."""  
    voice_fallback_method: Optional[UpdateSipDomainUpdateSipDomainRequestVoiceFallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceFallbackMethod' }})
    r"""The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`."""  
    voice_fallback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceFallbackUrl' }})
    r"""The URL that we should call when an error occurs while retrieving or executing the TwiML requested by `voice_url`."""  
    voice_method: Optional[UpdateSipDomainUpdateSipDomainRequestVoiceMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceMethod' }})
    r"""The HTTP method we should use to call `voice_url`"""  
    voice_status_callback_method: Optional[UpdateSipDomainUpdateSipDomainRequestVoiceStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceStatusCallbackMethod' }})
    r"""The HTTP method we should use to call `voice_status_callback_url`. Can be: `GET` or `POST`."""  
    voice_status_callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceStatusCallbackUrl' }})
    r"""The URL that we should call to pass status parameters (such as call ended) to your application."""  
    voice_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'VoiceUrl' }})
    r"""The URL we should call when the domain receives a call."""  
    

@dataclasses.dataclass
class UpdateSipDomainRequest:
    
    account_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'AccountSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the SipDomain resource to update."""  
    sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'Sid', 'style': 'simple', 'explode': False }})
    r"""The Twilio-provided string that uniquely identifies the SipDomain resource to update."""  
    request_body: Optional[UpdateSipDomainUpdateSipDomainRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class UpdateSipDomainResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_v2010_account_sip_sip_domain: Optional[shared_api_v2010_account_sip_sip_domain.APIV2010AccountSipSipDomain] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    