/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The parent entity update request.
 */
export class UpdateEntityRequestBodyParentEntityUpdate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "parentEntityId" })
  parentEntityId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updateType" })
  updateType?: shared.ParentEntityUpdateTypeEnum;
}

export class UpdateEntityRequestBody extends SpeakeasyBase {
  /**
   * An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.
   */
  @SpeakeasyMetadata({ elemType: shared.ComponentUpdateRequest })
  @Expose({ name: "componentUpdates" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.ComponentUpdateRequest> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.ComponentUpdateRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  componentUpdates?: Record<string, shared.ComponentUpdateRequest>;

  /**
   * The description of the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The name of the entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "entityName" })
  entityName?: string;

  /**
   * The parent entity update request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentEntityUpdate" })
  @Type(() => UpdateEntityRequestBodyParentEntityUpdate)
  parentEntityUpdate?: UpdateEntityRequestBodyParentEntityUpdate;
}

export class UpdateEntityRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateEntityRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The ID of the entity.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=entityId",
  })
  entityId: string;

  /**
   * The ID of the workspace that contains the entity.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspaceId",
  })
  workspaceId: string;
}

export class UpdateEntityResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateEntityResponse?: shared.UpdateEntityResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
