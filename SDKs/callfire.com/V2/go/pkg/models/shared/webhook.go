// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// WebhookInput - Webhook is a user-defined callback, which can be maintained via API. CallFire will send POST request to a client's endpoint defined in webhook once one of assigned events is triggered. See [webhooks guide](https://developers.callfire.com/webhooks-guide.html) for more information about CallFire Webhooks API.
type WebhookInput struct {
	// URL that webhook will send POST to on resource event trigger
	Callback *string `json:"callback,omitempty"`
	// A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
	Enabled *bool `json:"enabled,omitempty"`
	// Comma separated list of events on resource that will trigger callbacks (ex: STARTED, STOPPED, FINISHED, etc...).
	Events []string `json:"events,omitempty"`
	// ~
	ExpiresAt *int64 `json:"expiresAt,omitempty"`
	// A limit callback response to a particular fields
	Fields *string `json:"fields,omitempty"`
	// An id of a webhook
	ID *int64 `json:"id,omitempty"`
	// A name of a webhook
	Name *string `json:"name,omitempty"`
	// A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
	NonStrictSsl *bool `json:"nonStrictSsl,omitempty"`
	// A resource name that webhook is watching events on. Use GET /webhooks/resources to determine resources and events available (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)
	Resource *string `json:"resource,omitempty"`
	// Webhook secret token which is used as a signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
	Secret *string `json:"secret,omitempty"`
	// If true is set then webhook triggers only once. Afterwards the webhook will be deleted
	SingleUse *bool `json:"singleUse,omitempty"`
}

// Webhook - Webhook is a user-defined callback, which can be maintained via API. CallFire will send POST request to a client's endpoint defined in webhook once one of assigned events is triggered. See [webhooks guide](https://developers.callfire.com/webhooks-guide.html) for more information about CallFire Webhooks API.
type Webhook struct {
	// URL that webhook will send POST to on resource event trigger
	Callback *string `json:"callback,omitempty"`
	// A time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
	Enabled *bool `json:"enabled,omitempty"`
	// Comma separated list of events on resource that will trigger callbacks (ex: STARTED, STOPPED, FINISHED, etc...).
	Events []string `json:"events,omitempty"`
	// ~
	ExpiresAt *int64 `json:"expiresAt,omitempty"`
	// A limit callback response to a particular fields
	Fields *string `json:"fields,omitempty"`
	// An id of a webhook
	ID *int64 `json:"id,omitempty"`
	// A name of a webhook
	Name *string `json:"name,omitempty"`
	// A parameter which allows the webhook to send requests to unknown ssl endpoints (ssl certificate verification is disabled)
	NonStrictSsl *bool `json:"nonStrictSsl,omitempty"`
	// A resource name that webhook is watching events on. Use GET /webhooks/resources to determine resources and events available (ex: InboundCall, OutboundCall, InboundText, OutboundText, CallBroadcast, TextBroadcast, etc...)
	Resource *string `json:"resource,omitempty"`
	// Webhook secret token which is used as a signing key to HmacSHA1 hash of json payload which is returned in 'X-CallFire-Signature' header. This header can be used to verify callback POST is coming from CallFire. See [security guide](https://developers.callfire.com/security-guide.html)
	Secret *string `json:"secret,omitempty"`
	// If true is set then webhook triggers only once. Afterwards the webhook will be deleted
	SingleUse *bool `json:"singleUse,omitempty"`
	// A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
}
