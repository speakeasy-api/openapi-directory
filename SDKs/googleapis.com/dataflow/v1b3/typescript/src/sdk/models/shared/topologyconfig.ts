/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ComputationTopology } from "./computationtopology";
import { DataDiskAssignment } from "./datadiskassignment";
import { Expose, Type } from "class-transformer";

/**
 * Global topology of the streaming Dataflow job, including all computations and their sharded locations.
 */
export class TopologyConfig extends SpeakeasyBase {
  /**
   * The computations associated with a streaming Dataflow job.
   */
  @SpeakeasyMetadata({ elemType: ComputationTopology })
  @Expose({ name: "computations" })
  @Type(() => ComputationTopology)
  computations?: ComputationTopology[];

  /**
   * The disks assigned to a streaming Dataflow job.
   */
  @SpeakeasyMetadata({ elemType: DataDiskAssignment })
  @Expose({ name: "dataDiskAssignments" })
  @Type(() => DataDiskAssignment)
  dataDiskAssignments?: DataDiskAssignment[];

  /**
   * The size (in bits) of keys that will be assigned to source messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "forwardingKeyBits" })
  forwardingKeyBits?: number;

  /**
   * Version number for persistent state.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "persistentStateVersion" })
  persistentStateVersion?: number;

  /**
   * Maps user stage names to stable computation names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userStageToComputationNameMap" })
  userStageToComputationNameMap?: Record<string, string>;
}
