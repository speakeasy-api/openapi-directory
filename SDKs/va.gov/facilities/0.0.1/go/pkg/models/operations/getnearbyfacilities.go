// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetNearbyFacilitiesSecurity struct {
	Apikey string `security:"scheme,type=apiKey,subtype=header,name=apikey"`
}

// GetNearbyFacilitiesDriveTimeEnum - Filter to only include facilities that are within the specified number of drive time minutes from the requested location.
type GetNearbyFacilitiesDriveTimeEnum string

const (
	GetNearbyFacilitiesDriveTimeEnumTen     GetNearbyFacilitiesDriveTimeEnum = "10"
	GetNearbyFacilitiesDriveTimeEnumTwenty  GetNearbyFacilitiesDriveTimeEnum = "20"
	GetNearbyFacilitiesDriveTimeEnumThirty  GetNearbyFacilitiesDriveTimeEnum = "30"
	GetNearbyFacilitiesDriveTimeEnumForty   GetNearbyFacilitiesDriveTimeEnum = "40"
	GetNearbyFacilitiesDriveTimeEnumFifty   GetNearbyFacilitiesDriveTimeEnum = "50"
	GetNearbyFacilitiesDriveTimeEnumSixty   GetNearbyFacilitiesDriveTimeEnum = "60"
	GetNearbyFacilitiesDriveTimeEnumSeventy GetNearbyFacilitiesDriveTimeEnum = "70"
	GetNearbyFacilitiesDriveTimeEnumEighty  GetNearbyFacilitiesDriveTimeEnum = "80"
	GetNearbyFacilitiesDriveTimeEnumNinety  GetNearbyFacilitiesDriveTimeEnum = "90"
)

func (e *GetNearbyFacilitiesDriveTimeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "10":
		fallthrough
	case "20":
		fallthrough
	case "30":
		fallthrough
	case "40":
		fallthrough
	case "50":
		fallthrough
	case "60":
		fallthrough
	case "70":
		fallthrough
	case "80":
		fallthrough
	case "90":
		*e = GetNearbyFacilitiesDriveTimeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNearbyFacilitiesDriveTimeEnum: %s", s)
	}
}

type GetNearbyFacilitiesRequest struct {
	// City of the location from which drive time will be calculated.
	City *string `queryParam:"style=form,explode=true,name=city"`
	// Filter to only include facilities that are within the specified number of drive time minutes from the requested location.
	DriveTime *GetNearbyFacilitiesDriveTimeEnum `queryParam:"style=form,explode=true,name=drive_time"`
	// Latitude of the location from which drive time will be calculated.
	Lat *float32 `queryParam:"style=form,explode=true,name=lat"`
	// Longitude of the location from which drive time will be calculated.
	Lng *float32 `queryParam:"style=form,explode=true,name=lng"`
	// Page of results to return per paginated response.
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// Number of results to return per paginated response.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Optional facility service search filter
	Services []string `queryParam:"style=form,explode=true,name=services[]"`
	// Two character state code of the location from which drive time will be calculated.
	State *string `queryParam:"style=form,explode=true,name=state"`
	// Street address of the location from which drive time will be calculated.
	StreetAddress *string `queryParam:"style=form,explode=true,name=street_address"`
	// Zip code of the location from which drive time will be calculated.
	Zip *string `queryParam:"style=form,explode=true,name=zip"`
}

type GetNearbyFacilitiesResponse struct {
	// Requested format unacceptable
	APIError    *shared.APIError
	ContentType string
	// Missing Required Or Ambiguous Parameters
	GenericError *shared.GenericError
	// Success
	NearbyResponse *shared.NearbyResponse
	StatusCode     int
	RawResponse    *http.Response
}
