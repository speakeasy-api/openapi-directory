"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Optional


@dataclasses.dataclass
class RegistrationsWikisListRequest:
    
    registration_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'registration_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the registration."""  
    

@dataclasses.dataclass
class RegistrationsWikisListWikiAttributes:
    r"""The properties of the wiki."""
    
    content_type: str = dataclasses.field()
    r"""Content type of the wiki (`text/markdown`)."""  
    current_user_can_comment: str = dataclasses.field()
    r"""Whether the current user is allowed to post comments on this wiki."""  
    date_modified: datetime = dataclasses.field()
    r"""The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."""  
    extra: str = dataclasses.field()
    r"""A dictionary containing additional metadata about this wiki, including version information."""  
    kind: str = dataclasses.field()
    r"""The type of object."""  
    materialized_path: str = dataclasses.field()
    r"""Materialized path to the wiki object."""  
    name: str = dataclasses.field()
    r"""The name/title of the wiki page."""  
    path: str = dataclasses.field()
    r"""Path to the wiki object."""  
    size: str = dataclasses.field()
    r"""Size of the wiki."""  
    

@dataclasses.dataclass
class RegistrationsWikisListWikiLinks:
    r"""URLs to alternative representations of the wiki."""
    
    download: Optional[str] = dataclasses.field(default=None)
    r"""The URL to download the content of the wiki."""  
    info: Optional[str] = dataclasses.field(default=None)
    r"""A link to the detail page for the wiki."""  
    self_: Optional[str] = dataclasses.field(default=None)
    r"""A link to the detail page for the wiki."""  
    

@dataclasses.dataclass
class RegistrationsWikisListWikiRelationships:
    r"""URLs to other entities or entity collections that have a relationship to the wiki."""
    
    comments: str = dataclasses.field()
    r"""A relationship to the comments related to this wiki."""  
    node: str = dataclasses.field()
    r"""A relationship to the associated node."""  
    user: str = dataclasses.field()
    r"""A relationship to the user associated with this wiki."""  
    

@dataclasses.dataclass
class RegistrationsWikisListWiki:
    
    relationships: RegistrationsWikisListWikiRelationships = dataclasses.field()
    r"""URLs to other entities or entity collections that have a relationship to the wiki."""  
    type: str = dataclasses.field()
    r"""The type identifier of the wiki (`wikis`)."""  
    attributes: Optional[RegistrationsWikisListWikiAttributes] = dataclasses.field(default=None)
    r"""The properties of the wiki."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The identifier of the wiki."""  
    links: Optional[RegistrationsWikisListWikiLinks] = dataclasses.field(default=None)
    r"""URLs to alternative representations of the wiki."""  
    

@dataclasses.dataclass
class RegistrationsWikisListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    