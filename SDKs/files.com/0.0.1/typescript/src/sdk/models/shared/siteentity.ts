/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ImageEntity } from "./imageentity";
import { SessionEntity } from "./sessionentity";
import { UserEntity } from "./userentity";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Do Bundle owners receive activity notifications?
 */
export enum SiteEntityBundleActivityNotificationsEnum {
  Never = "never",
  Always = "always",
  PerBundleSetting = "per_bundle_setting",
}

/**
 * Do Bundle owners receive registration notification?
 */
export enum SiteEntityBundleRegistrationNotificationsEnum {
  Never = "never",
  Always = "always",
  PerBundleSetting = "per_bundle_setting",
}

/**
 * Do Bundle uploaders receive upload confirmation notifications?
 */
export enum SiteEntityBundleUploadReceiptNotificationsEnum {
  Never = "never",
  Always = "always",
  PerBundleSetting = "per_bundle_setting",
}

/**
 * Letsencrypt chain to use when registering SSL Certificate for domain.
 */
export enum SiteEntityDomainLetsencryptChainEnum {
  Default = "default",
  IsrgRootX1 = "isrg_root_x1",
  DstRootCaX3 = "dst_root_ca_x3",
}

/**
 * Office integration application used to edit and view the MS Office documents
 */
export enum SiteEntityOfficeIntegrationTypeEnum {
  OnlyOffice = "only_office",
  Office365 = "office_365",
  Disabled = "disabled",
}

/**
 * What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?
 */
export enum SiteEntityRequire2faUserTypeEnum {
  All = "all",
  FolderAndSiteAdmins = "folder_and_site_admins",
  SiteAdmins = "site_admins",
}

/**
 * Sftp Host Key Type
 */
export enum SiteEntitySftpHostKeyTypeEnum {
  Default = "default",
  Exavault = "exavault",
  Custom = "custom",
}

/**
 * Does the welcome screen appear?
 */
export enum SiteEntityWelcomeScreenEnum {
  Enabled = "enabled",
  Hidden = "hidden",
  Disabled = "disabled",
}

/**
 * Show site settings
 */
export class SiteEntity extends SpeakeasyBase {
  /**
   * Id of the currently selected custom SFTP Host Key
   */
  @SpeakeasyMetadata()
  @Expose({ name: "active_sftp_host_key_id" })
  activeSftpHostKeyId?: number;

  /**
   * User ID for the main site administrator
   */
  @SpeakeasyMetadata()
  @Expose({ name: "admin_user_id" })
  adminUserId?: number;

  /**
   * Are manual Bundle names allowed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_bundle_names" })
  allowBundleNames?: boolean;

  /**
   * Are users allowed to configure their two factor authentication to be bypassed for FTP/SFTP/WebDAV?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_2fa_method_bypass_for_ftp_sftp_dav" })
  allowed2faMethodBypassForFtpSftpDav?: boolean;

  /**
   * Is SMS two factor authentication allowed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_2fa_method_sms" })
  allowed2faMethodSms?: boolean;

  /**
   * Is TOTP two factor authentication allowed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_2fa_method_totp" })
  allowed2faMethodTotp?: boolean;

  /**
   * Is U2F two factor authentication allowed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_2fa_method_u2f" })
  allowed2faMethodU2f?: boolean;

  /**
   * Is WebAuthn two factor authentication allowed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_2fa_method_webauthn" })
  allowed2faMethodWebauthn?: boolean;

  /**
   * Is yubikey two factor authentication allowed?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_2fa_method_yubi" })
  allowed2faMethodYubi?: boolean;

  /**
   * Comma seperated list of allowed Country codes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_countries" })
  allowedCountries?: string;

  /**
   * List of allowed IP addresses
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allowed_ips" })
  allowedIps?: string;

  /**
   * If false, rename conflicting files instead of asking for overwrite confirmation.  Only applies to web interface.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ask_about_overwrites" })
  askAboutOverwrites?: boolean;

  /**
   * Do Bundle owners receive activity notifications?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_activity_notifications" })
  bundleActivityNotifications?: SiteEntityBundleActivityNotificationsEnum;

  /**
   * Site-wide Bundle expiration in days
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_expiration" })
  bundleExpiration?: number;

  /**
   * Do Bundles require password protection?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_password_required" })
  bundlePasswordRequired?: boolean;

  /**
   * Do Bundle owners receive registration notification?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_registration_notifications" })
  bundleRegistrationNotifications?: SiteEntityBundleRegistrationNotificationsEnum;

  /**
   * Do Bundles require recipients for sharing?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_require_share_recipient" })
  bundleRequireShareRecipient?: boolean;

  /**
   * Do Bundle uploaders receive upload confirmation notifications?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_upload_receipt_notifications" })
  bundleUploadReceiptNotifications?: SiteEntityBundleUploadReceiptNotificationsEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "bundle_watermark_attachment" })
  @Type(() => ImageEntity)
  bundleWatermarkAttachment?: ImageEntity;

  /**
   * Preview watermark settings applied to all bundle items. Uses the same keys as Behavior.value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_watermark_value" })
  bundleWatermarkValue?: Record<string, any>;

  /**
   * Page link and button color
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color2_left" })
  color2Left?: string;

  /**
   * Top bar link color
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color2_link" })
  color2Link?: string;

  /**
   * Page link and button color
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color2_text" })
  color2Text?: string;

  /**
   * Top bar background color
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color2_top" })
  color2Top?: string;

  /**
   * Top bar text color
   */
  @SpeakeasyMetadata()
  @Expose({ name: "color2_top_text" })
  color2TopText?: string;

  /**
   * Site main contact name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contact_name" })
  contactName?: string;

  /**
   * Time this site was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt?: Date;

  /**
   * Preferred currency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency?: string;

  /**
   * Is this site using a custom namespace for users?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "custom_namespace" })
  customNamespace?: boolean;

  /**
   * Number of days to keep deleted files
   */
  @SpeakeasyMetadata()
  @Expose({ name: "days_to_retain_backups" })
  daysToRetainBackups?: number;

  /**
   * Site default time zone
   */
  @SpeakeasyMetadata()
  @Expose({ name: "default_time_zone" })
  defaultTimeZone?: string;

  /**
   * Is the desktop app enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "desktop_app" })
  desktopApp?: boolean;

  /**
   * Is desktop app session IP pinning enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "desktop_app_session_ip_pinning" })
  desktopAppSessionIpPinning?: boolean;

  /**
   * Desktop app session lifetime (in hours)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "desktop_app_session_lifetime" })
  desktopAppSessionLifetime?: number;

  /**
   * If set, Files.com will not set the CAA records required to generate future SSL certificates for this domain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disable_files_certificate_generation" })
  disableFilesCertificateGeneration?: boolean;

  /**
   * Are notifications disabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disable_notifications" })
  disableNotifications?: boolean;

  /**
   * Is password reset disabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disable_password_reset" })
  disablePasswordReset?: boolean;

  /**
   * If greater than zero, users will unable to login if they do not show activity within this number of days.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disable_users_from_inactivity_period_days" })
  disableUsersFromInactivityPeriodDays?: number;

  /**
   * Comma seperated list of disallowed Country codes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disallowed_countries" })
  disallowedCountries?: string;

  /**
   * Custom domain
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain" })
  domain?: string;

  /**
   * Send HSTS (HTTP Strict Transport Security) header when visitors access the site via a custom domain?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain_hsts_header" })
  domainHstsHeader?: boolean;

  /**
   * Letsencrypt chain to use when registering SSL Certificate for domain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain_letsencrypt_chain" })
  domainLetsencryptChain?: SiteEntityDomainLetsencryptChainEnum;

  /**
   * Main email for this site
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * If true, permissions for this site must be bound to a group (not a user). Otherwise, permissions must be bound to a user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "folder_permissions_groups_only" })
  folderPermissionsGroupsOnly?: boolean;

  /**
   * Is FTP enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ftp_enabled" })
  ftpEnabled?: boolean;

  /**
   * Is there a signed HIPAA BAA between Files.com and this site?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hipaa" })
  hipaa?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "icon128" })
  @Type(() => ImageEntity)
  icon128?: ImageEntity;

  @SpeakeasyMetadata()
  @Expose({ name: "icon16" })
  @Type(() => ImageEntity)
  icon16?: ImageEntity;

  @SpeakeasyMetadata()
  @Expose({ name: "icon32" })
  @Type(() => ImageEntity)
  icon32?: ImageEntity;

  @SpeakeasyMetadata()
  @Expose({ name: "icon48" })
  @Type(() => ImageEntity)
  icon48?: ImageEntity;

  /**
   * Can files be modified?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "immutable_files_set_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  immutableFilesSetAt?: Date;

  /**
   * Include password in emails to new users?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "include_password_in_welcome_email" })
  includePasswordInWelcomeEmail?: boolean;

  /**
   * Site default language
   */
  @SpeakeasyMetadata()
  @Expose({ name: "language" })
  language?: string;

  /**
   * Base DN for looking up users in LDAP server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_base_dn" })
  ldapBaseDn?: string;

  /**
   * Domain name that will be appended to usernames
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_domain" })
  ldapDomain?: string;

  /**
   * Main LDAP setting: is LDAP enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_enabled" })
  ldapEnabled?: boolean;

  /**
   * Should we sync groups from LDAP server?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_group_action" })
  ldapGroupAction?: string;

  /**
   * Comma or newline separated list of group names (with optional wildcards) to exclude when syncing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_group_exclusion" })
  ldapGroupExclusion?: string;

  /**
   * Comma or newline separated list of group names (with optional wildcards) to include when syncing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_group_inclusion" })
  ldapGroupInclusion?: string;

  /**
   * LDAP host
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_host" })
  ldapHost?: string;

  /**
   * LDAP backup host
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_host_2" })
  ldapHost2?: string;

  /**
   * LDAP backup host
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_host_3" })
  ldapHost3?: string;

  /**
   * LDAP port
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_port" })
  ldapPort?: number;

  /**
   * Use secure LDAP?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_secure" })
  ldapSecure?: boolean;

  /**
   * LDAP type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_type" })
  ldapType?: string;

  /**
   * Should we sync users from LDAP server?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_user_action" })
  ldapUserAction?: string;

  /**
   * Comma or newline separated list of group names (with optional wildcards) - if provided, only users in these groups will be added or synced.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_user_include_groups" })
  ldapUserIncludeGroups?: string;

  /**
   * Username for signing in to LDAP server.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_username" })
  ldapUsername?: string;

  /**
   * LDAP username field
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ldap_username_field" })
  ldapUsernameField?: string;

  /**
   * Login help text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "login_help_text" })
  loginHelpText?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "logo" })
  @Type(() => ImageEntity)
  logo?: ImageEntity;

  /**
   * Number of prior passwords to disallow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "max_prior_passwords" })
  maxPriorPasswords?: number;

  /**
   * Is the mobile app enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mobile_app" })
  mobileApp?: boolean;

  /**
   * Is mobile app session IP pinning enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mobile_app_session_ip_pinning" })
  mobileAppSessionIpPinning?: boolean;

  /**
   * Mobile app session lifetime (in hours)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mobile_app_session_lifetime" })
  mobileAppSessionLifetime?: number;

  /**
   * A message to show users when they connect via FTP or SFTP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "motd_text" })
  motdText?: string;

  /**
   * Show message to users connecting via FTP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "motd_use_for_ftp" })
  motdUseForFtp?: boolean;

  /**
   * Show message to users connecting via SFTP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "motd_use_for_sftp" })
  motdUseForSftp?: boolean;

  /**
   * Site name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Next billing amount
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_billing_amount" })
  nextBillingAmount?: number;

  /**
   * Next billing date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_billing_date" })
  nextBillingDate?: string;

  /**
   * If true, groups can be manually created / modified / deleted by Site Admins. Otherwise, groups can only be managed via your SSO provider.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "non_sso_groups_allowed" })
  nonSsoGroupsAllowed?: boolean;

  /**
   * If true, users can be manually created / modified / deleted by Site Admins. Otherwise, users can only be managed via your SSO provider.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "non_sso_users_allowed" })
  nonSsoUsersAllowed?: boolean;

  /**
   * Allow users to use Office for the web?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "office_integration_available" })
  officeIntegrationAvailable?: boolean;

  /**
   * Office integration application used to edit and view the MS Office documents
   */
  @SpeakeasyMetadata()
  @Expose({ name: "office_integration_type" })
  officeIntegrationType?: SiteEntityOfficeIntegrationTypeEnum;

  /**
   * Link to scheduling a meeting with our Sales team
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oncehub_link" })
  oncehubLink?: string;

  /**
   * Use servers in the USA only?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "opt_out_global" })
  optOutGlobal?: boolean;

  /**
   * Last time the site was notified about an overage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overage_notified_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  overageNotifiedAt?: Date;

  /**
   * Notify site email of overages?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overage_notify" })
  overageNotify?: boolean;

  /**
   * Is this site's billing overdue?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "overdue" })
  overdue?: boolean;

  /**
   * Shortest password length for users
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_min_length" })
  passwordMinLength?: number;

  /**
   * Require a letter in passwords?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_require_letter" })
  passwordRequireLetter?: boolean;

  /**
   * Require lower and upper case letters in passwords?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_require_mixed" })
  passwordRequireMixed?: boolean;

  /**
   * Require a number in passwords?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_require_number" })
  passwordRequireNumber?: boolean;

  /**
   * Require special characters in password?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_require_special" })
  passwordRequireSpecial?: boolean;

  /**
   * Require passwords that have not been previously breached? (see https://haveibeenpwned.com/)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_require_unbreached" })
  passwordRequireUnbreached?: boolean;

  /**
   * Require bundles' passwords, and passwords for other items (inboxes, public shares, etc.) to conform to the same requirements as users' passwords?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_requirements_apply_to_bundles" })
  passwordRequirementsApplyToBundles?: boolean;

  /**
   * Number of days password is valid
   */
  @SpeakeasyMetadata()
  @Expose({ name: "password_validity_days" })
  passwordValidityDays?: number;

  /**
   * Site phone number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "phone" })
  phone?: string;

  /**
   * If true, we will ensure that all internal communications with any remote server are made through the primary region of the site. This setting overrides individual remote server settings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pin_all_remote_servers_to_site_region" })
  pinAllRemoteServersToSiteRegion?: boolean;

  /**
   * Reply-to email for this site
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reply_to_email" })
  replyToEmail?: string;

  /**
   * Require two-factor authentication for all users?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_2fa" })
  require2fa?: boolean;

  /**
   * If set, requirement for two-factor authentication has been scheduled to end on this date-time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_2fa_stop_time" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  require2faStopTime?: Date;

  /**
   * What type of user is required to use two-factor authentication (when require_2fa is set to `true` for this site)?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "require_2fa_user_type" })
  require2faUserType?: SiteEntityRequire2faUserTypeEnum;

  /**
   * Create user session (log in)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "session" })
  @Type(() => SessionEntity)
  session?: SessionEntity;

  /**
   * Session expiry in hours
   */
  @SpeakeasyMetadata()
  @Expose({ name: "session_expiry" })
  sessionExpiry?: number;

  /**
   * Session expiry in minutes
   */
  @SpeakeasyMetadata()
  @Expose({ name: "session_expiry_minutes" })
  sessionExpiryMinutes?: number;

  /**
   * Are sessions locked to the same IP? (i.e. do users need to log in again if they change IPs?)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "session_pinned_by_ip" })
  sessionPinnedByIp?: boolean;

  /**
   * Is SFTP enabled?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sftp_enabled" })
  sftpEnabled?: boolean;

  /**
   * Sftp Host Key Type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sftp_host_key_type" })
  sftpHostKeyType?: SiteEntitySftpHostKeyTypeEnum;

  /**
   * Are Insecure Ciphers allowed for SFTP?  Note:  Settting TLS Disabled -> True will always allow insecure ciphers for SFTP as well.  Enabling this is insecure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sftp_insecure_ciphers" })
  sftpInsecureCiphers?: boolean;

  /**
   * Use user FTP roots also for SFTP?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sftp_user_root_enabled" })
  sftpUserRootEnabled?: boolean;

  /**
   * Allow bundle creation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sharing_enabled" })
  sharingEnabled?: boolean;

  /**
   * Show request access link for users without access?  Currently unused.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "show_request_access_link" })
  showRequestAccessLink?: boolean;

  /**
   * Custom site footer text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "site_footer" })
  siteFooter?: string;

  /**
   * Custom site header text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "site_header" })
  siteHeader?: string;

  /**
   * SMTP server hostname or IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smtp_address" })
  smtpAddress?: string;

  /**
   * SMTP server authentication type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smtp_authentication" })
  smtpAuthentication?: string;

  /**
   * From address to use when mailing through custom SMTP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smtp_from" })
  smtpFrom?: string;

  /**
   * SMTP server port
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smtp_port" })
  smtpPort?: number;

  /**
   * SMTP server username
   */
  @SpeakeasyMetadata()
  @Expose({ name: "smtp_username" })
  smtpUsername?: string;

  /**
   * Is SSL required?  Disabling this is insecure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssl_required" })
  sslRequired?: boolean;

  /**
   * Site subdomain
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subdomain" })
  subdomain?: string;

  /**
   * If switching plans, when does the new plan take effect?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "switch_to_plan_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  switchToPlanDate?: Date;

  /**
   * Are Insecure TLS and SFTP Ciphers allowed?  Enabling this is insecure.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tls_disabled" })
  tlsDisabled?: boolean;

  /**
   * Number of days left in trial
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trial_days_left" })
  trialDaysLeft?: number;

  /**
   * When does this Site trial expire?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trial_until" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  trialUntil?: Date;

  /**
   * Last time this Site was updated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updatedAt?: Date;

  /**
   * Do incoming emails in the Inboxes require checking for SPF/DKIM/DMARC?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploads_via_email_authentication" })
  uploadsViaEmailAuthentication?: boolean;

  /**
   * Allow uploaders to set `provided_modified_at` for uploaded files?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "use_provided_modified_at" })
  useProvidedModifiedAt?: boolean;

  /**
   * Create User
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => UserEntity)
  user?: UserEntity;

  /**
   * Will users be locked out after incorrect login attempts?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_lockout" })
  userLockout?: boolean;

  /**
   * How many hours to lock user out for failed password?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_lockout_lock_period" })
  userLockoutLockPeriod?: number;

  /**
   * Number of login tries within `user_lockout_within` hours before users are locked out
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_lockout_tries" })
  userLockoutTries?: number;

  /**
   * Number of hours for user lockout window
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_lockout_within" })
  userLockoutWithin?: number;

  /**
   * Enable User Requests feature
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_requests_enabled" })
  userRequestsEnabled?: boolean;

  /**
   * Send email to site admins when a user request is received?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_requests_notify_admins" })
  userRequestsNotifyAdmins?: boolean;

  /**
   * Custom text send in user welcome email
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcome_custom_text" })
  welcomeCustomText?: string;

  /**
   * Include this email in welcome emails if enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcome_email_cc" })
  welcomeEmailCc?: string;

  /**
   * Will the welcome email be sent to new users?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcome_email_enabled" })
  welcomeEmailEnabled?: boolean;

  /**
   * Include this email subject in welcome emails if enabled
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcome_email_subject" })
  welcomeEmailSubject?: string;

  /**
   * Does the welcome screen appear?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "welcome_screen" })
  welcomeScreen?: SiteEntityWelcomeScreenEnum;

  /**
   * Does FTP user Windows emulation mode?
   */
  @SpeakeasyMetadata()
  @Expose({ name: "windows_mode_ftp" })
  windowsModeFtp?: boolean;
}
