/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MediaAttachment - Media attachment. The API will automatically resolve the details, oEmbed,
 * and media available if possible and return them in this object
 * 
 */
public class MediaAttachment {
    /**
     * The resolved author name of the attachment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorName")
    public String authorName;

    public MediaAttachment withAuthorName(String authorName) {
        this.authorName = authorName;
        return this;
    }
    
    /**
     * The resolved author url of the attachment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorUrl")
    public String authorUrl;

    public MediaAttachment withAuthorUrl(String authorUrl) {
        this.authorUrl = authorUrl;
        return this;
    }
    
    /**
     * The resolved description of the attachment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public MediaAttachment withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The ID of the Google Drive File
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("googleDriveFileId")
    public String googleDriveFileId;

    public MediaAttachment withGoogleDriveFileId(String googleDriveFileId) {
        this.googleDriveFileId = googleDriveFileId;
        return this;
    }
    
    /**
     * If the attachment type is `rich` or `video`, the HTML code of the
     * media to display
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html")
    public String html;

    public MediaAttachment withHtml(String html) {
        this.html = html;
        return this;
    }
    
    /**
     * If the `html` is available, the height of the widget
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlHeight")
    public String htmlHeight;

    public MediaAttachment withHtmlHeight(String htmlHeight) {
        this.htmlHeight = htmlHeight;
        return this;
    }
    
    /**
     * If the `html` is available, the width of the widget
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlWidth")
    public String htmlWidth;

    public MediaAttachment withHtmlWidth(String htmlWidth) {
        this.htmlWidth = htmlWidth;
        return this;
    }
    
    /**
     * The URL of the icon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("iconUrl")
    public String iconUrl;

    public MediaAttachment withIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
        return this;
    }
    
    /**
     * To be used with a score attached in `sharingMode` `copy` (score used as template). If true, students won't be able to change the original notes of the template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lockScoreTemplate")
    public Boolean lockScoreTemplate;

    public MediaAttachment withLockScoreTemplate(Boolean lockScoreTemplate) {
        this.lockScoreTemplate = lockScoreTemplate;
        return this;
    }
    
    /**
     * The mine type of the file
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mimeType")
    public String mimeType;

    public MediaAttachment withMimeType(String mimeType) {
        this.mimeType = mimeType;
        return this;
    }
    
    /**
     * An unique revision identifier of a score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revision")
    public String revision;

    public MediaAttachment withRevision(String revision) {
        this.revision = revision;
        return this;
    }
    
    /**
     * An unique Flat score identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("score")
    public String score;

    public MediaAttachment withScore(String score) {
        this.score = score;
        return this;
    }
    
    /**
     * The sharing mode of the score for classes post and assignments
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sharingMode")
    public MediaScoreSharingModeEnum sharingMode;

    public MediaAttachment withSharingMode(MediaScoreSharingModeEnum sharingMode) {
        this.sharingMode = sharingMode;
        return this;
    }
    
    /**
     * If the `thumbnailUrl` is available, the width of the thumbnail
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailHeight")
    public Long thumbnailHeight;

    public MediaAttachment withThumbnailHeight(Long thumbnailHeight) {
        this.thumbnailHeight = thumbnailHeight;
        return this;
    }
    
    /**
     * If the attachment type is `rich`, `video`, `photo` or `link`, a
     * displayable thumbnail for this attachment
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailUrl")
    public String thumbnailUrl;

    public MediaAttachment withThumbnailUrl(String thumbnailUrl) {
        this.thumbnailUrl = thumbnailUrl;
        return this;
    }
    
    /**
     * If the `thumbnailUrl` is available, the width of the thumbnail
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailWidth")
    public Long thumbnailWidth;

    public MediaAttachment withThumbnailWidth(Long thumbnailWidth) {
        this.thumbnailWidth = thumbnailWidth;
        return this;
    }
    
    /**
     * The resolved title of the attachment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public MediaAttachment withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * A unique track identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("track")
    public String track;

    public MediaAttachment withTrack(String track) {
        this.track = track;
        return this;
    }
    
    /**
     * The type of the assignment resolved:
     * * `rich`, `photo`, `video` are attachment types that are automatically resolved from a `link` attachment.
     * * A `flat` attachment is a score document where the unique identifier will be specified in the `score` property. Its sharing mode will be provided in the `sharingMode` property.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public MediaAttachmentTypeEnum type;

    public MediaAttachment withType(MediaAttachmentTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The url of the attachment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public MediaAttachment withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * An unique worksheet identifier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("worksheet")
    public String worksheet;

    public MediaAttachment withWorksheet(String worksheet) {
        this.worksheet = worksheet;
        return this;
    }
    
    public MediaAttachment(){}
}
