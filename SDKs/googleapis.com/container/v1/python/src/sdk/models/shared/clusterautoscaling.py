"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autoprovisioningnodepooldefaults as shared_autoprovisioningnodepooldefaults
from ..shared import resourcelimit as shared_resourcelimit
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ClusterAutoscalingAutoscalingProfileEnum(str, Enum):
    r"""Defines autoscaling behaviour."""
    PROFILE_UNSPECIFIED = 'PROFILE_UNSPECIFIED'
    OPTIMIZE_UTILIZATION = 'OPTIMIZE_UTILIZATION'
    BALANCED = 'BALANCED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClusterAutoscaling:
    r"""ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs."""
    
    autoprovisioning_locations: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoprovisioningLocations'), 'exclude': lambda f: f is None }})
    r"""The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP."""  
    autoprovisioning_node_pool_defaults: Optional[shared_autoprovisioningnodepooldefaults.AutoprovisioningNodePoolDefaults] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoprovisioningNodePoolDefaults'), 'exclude': lambda f: f is None }})
    r"""AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP."""  
    autoscaling_profile: Optional[ClusterAutoscalingAutoscalingProfileEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoscalingProfile'), 'exclude': lambda f: f is None }})
    r"""Defines autoscaling behaviour."""  
    enable_node_autoprovisioning: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableNodeAutoprovisioning'), 'exclude': lambda f: f is None }})
    r"""Enables automatic node pool creation and deletion."""  
    resource_limits: Optional[list[shared_resourcelimit.ResourceLimit]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceLimits'), 'exclude': lambda f: f is None }})
    r"""Contains global constraints regarding minimum and maximum amount of resources in the cluster."""  
    