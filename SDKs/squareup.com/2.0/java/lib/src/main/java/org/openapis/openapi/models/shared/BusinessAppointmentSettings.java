/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * BusinessAppointmentSettings - The service appointment settings, including where and how the service is provided.
 */
public class BusinessAppointmentSettings {
    /**
     * The time unit of the service duration for bookings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alignment_time")
    public String alignmentTime;
    public BusinessAppointmentSettings withAlignmentTime(String alignmentTime) {
        this.alignmentTime = alignmentTime;
        return this;
    }
    
    /**
     * Indicates whether a customer can choose from all available time slots and have a staff member assigned
     * automatically (`true`) or not (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("any_team_member_booking_enabled")
    public Boolean anyTeamMemberBookingEnabled;
    public BusinessAppointmentSettings withAnyTeamMemberBookingEnabled(Boolean anyTeamMemberBookingEnabled) {
        this.anyTeamMemberBookingEnabled = anyTeamMemberBookingEnabled;
        return this;
    }
    
    /**
     * Represents an amount of money. `Money` fields can be signed or unsigned.
     * Fields that do not explicitly define whether they are signed or unsigned are
     * considered unsigned and can only hold positive amounts. For signed fields, the
     * sign of the value indicates the purpose of the money transfer. See
     * [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
     * for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancellation_fee_money")
    public Money cancellationFeeMoney;
    public BusinessAppointmentSettings withCancellationFeeMoney(Money cancellationFeeMoney) {
        this.cancellationFeeMoney = cancellationFeeMoney;
        return this;
    }
    
    /**
     * The cancellation policy adopted by the seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancellation_policy")
    public String cancellationPolicy;
    public BusinessAppointmentSettings withCancellationPolicy(String cancellationPolicy) {
        this.cancellationPolicy = cancellationPolicy;
        return this;
    }
    
    /**
     * The free-form text of the seller's cancellation policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancellation_policy_text")
    public String cancellationPolicyText;
    public BusinessAppointmentSettings withCancellationPolicyText(String cancellationPolicyText) {
        this.cancellationPolicyText = cancellationPolicyText;
        return this;
    }
    
    /**
     * The cut-off time in seconds for allowing clients to cancel or reschedule an appointment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancellation_window_seconds")
    public Long cancellationWindowSeconds;
    public BusinessAppointmentSettings withCancellationWindowSeconds(Long cancellationWindowSeconds) {
        this.cancellationWindowSeconds = cancellationWindowSeconds;
        return this;
    }
    
    /**
     * Types of the location allowed for bookings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_types")
    public String[] locationTypes;
    public BusinessAppointmentSettings withLocationTypes(String[] locationTypes) {
        this.locationTypes = locationTypes;
        return this;
    }
    
    /**
     * The maximum number of daily appointments per team member or per location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_appointments_per_day_limit")
    public Long maxAppointmentsPerDayLimit;
    public BusinessAppointmentSettings withMaxAppointmentsPerDayLimit(Long maxAppointmentsPerDayLimit) {
        this.maxAppointmentsPerDayLimit = maxAppointmentsPerDayLimit;
        return this;
    }
    
    /**
     * Indicates whether the daily appointment limit applies to team members or to
     * business locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_appointments_per_day_limit_type")
    public String maxAppointmentsPerDayLimitType;
    public BusinessAppointmentSettings withMaxAppointmentsPerDayLimitType(String maxAppointmentsPerDayLimitType) {
        this.maxAppointmentsPerDayLimitType = maxAppointmentsPerDayLimitType;
        return this;
    }
    
    /**
     * The maximum lead time in seconds before a service can be booked. Bookings must be created at most this far ahead of the booking's starting time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_booking_lead_time_seconds")
    public Long maxBookingLeadTimeSeconds;
    public BusinessAppointmentSettings withMaxBookingLeadTimeSeconds(Long maxBookingLeadTimeSeconds) {
        this.maxBookingLeadTimeSeconds = maxBookingLeadTimeSeconds;
        return this;
    }
    
    /**
     * The minimum lead time in seconds before a service can be booked. Bookings must be created at least this far ahead of the booking's starting time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min_booking_lead_time_seconds")
    public Long minBookingLeadTimeSeconds;
    public BusinessAppointmentSettings withMinBookingLeadTimeSeconds(Long minBookingLeadTimeSeconds) {
        this.minBookingLeadTimeSeconds = minBookingLeadTimeSeconds;
        return this;
    }
    
    /**
     * Indicates whether a customer can book multiple services in a single online booking.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiple_service_booking_enabled")
    public Boolean multipleServiceBookingEnabled;
    public BusinessAppointmentSettings withMultipleServiceBookingEnabled(Boolean multipleServiceBookingEnabled) {
        this.multipleServiceBookingEnabled = multipleServiceBookingEnabled;
        return this;
    }
    
    /**
     * Indicates whether customers has an assigned staff member (`true`) or can select s staff member of their choice (`false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_booking_flow_staff_selection")
    public Boolean skipBookingFlowStaffSelection;
    public BusinessAppointmentSettings withSkipBookingFlowStaffSelection(Boolean skipBookingFlowStaffSelection) {
        this.skipBookingFlowStaffSelection = skipBookingFlowStaffSelection;
        return this;
    }
    
}
