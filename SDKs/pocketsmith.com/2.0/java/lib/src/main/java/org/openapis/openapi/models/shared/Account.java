/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Account - Success
 */
public class Account {
    /**
     * When the account was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public Account withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The currency code for the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_code")
    public String currencyCode;
    public Account withCurrencyCode(String currencyCode) {
        this.currencyCode = currencyCode;
        return this;
    }
    
    /**
     * The current balance of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance")
    public Double currentBalance;
    public Account withCurrentBalance(Double currentBalance) {
        this.currentBalance = currentBalance;
        return this;
    }
    
    /**
     * The date of the current balance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_date")
    public String currentBalanceDate;
    public Account withCurrentBalanceDate(String currentBalanceDate) {
        this.currentBalanceDate = currentBalanceDate;
        return this;
    }
    
    /**
     * The exchange rate between the account's currency and the user's base currency, when different. If the currencies are the same, null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_exchange_rate")
    public Double currentBalanceExchangeRate;
    public Account withCurrentBalanceExchangeRate(Double currentBalanceExchangeRate) {
        this.currentBalanceExchangeRate = currentBalanceExchangeRate;
        return this;
    }
    
    /**
     * The current balance of the account in the user's base currency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_balance_in_base_currency")
    public Double currentBalanceInBaseCurrency;
    public Account withCurrentBalanceInBaseCurrency(Double currentBalanceInBaseCurrency) {
        this.currentBalanceInBaseCurrency = currentBalanceInBaseCurrency;
        return this;
    }
    
    /**
     * The unique identifier of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Account withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether the account is a net worth asset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_net_worth")
    public Boolean isNetWorth;
    public Account withIsNetWorth(Boolean isNetWorth) {
        this.isNetWorth = isNetWorth;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_scenario")
    public Scenario primaryScenario;
    public Account withPrimaryScenario(Scenario primaryScenario) {
        this.primaryScenario = primaryScenario;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_transaction_account")
    public TransactionAccount primaryTransactionAccount;
    public Account withPrimaryTransactionAccount(TransactionAccount primaryTransactionAccount) {
        this.primaryTransactionAccount = primaryTransactionAccount;
        return this;
    }
    
    /**
     * The current safe balance, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safe_balance")
    public Double safeBalance;
    public Account withSafeBalance(Double safeBalance) {
        this.safeBalance = safeBalance;
        return this;
    }
    
    /**
     * The current safe balance in the user's base currency, if safe balance is activated on the account. If safe balance is not activated, then null is returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("safe_balance_in_base_currency")
    public Double safeBalanceInBaseCurrency;
    public Account withSafeBalanceInBaseCurrency(Double safeBalanceInBaseCurrency) {
        this.safeBalanceInBaseCurrency = safeBalanceInBaseCurrency;
        return this;
    }
    
    /**
     * All scenarios that compose the account, including the primary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scenarios")
    public Scenario[] scenarios;
    public Account withScenarios(Scenario[] scenarios) {
        this.scenarios = scenarios;
        return this;
    }
    
    /**
     * The title of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Account withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * All transaction accounts that compose the account, including the primary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_accounts")
    public TransactionAccount[] transactionAccounts;
    public Account withTransactionAccounts(TransactionAccount[] transactionAccounts) {
        this.transactionAccounts = transactionAccounts;
        return this;
    }
    
    /**
     * The type of the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public AccountTypeEnum type;
    public Account withType(AccountTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * When the account was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;
    public Account withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
