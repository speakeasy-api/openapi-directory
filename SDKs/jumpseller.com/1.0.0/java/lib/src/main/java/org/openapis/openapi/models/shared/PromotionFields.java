/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PromotionFields {
    /**
     * Creation date of the promotion (requires 'lasts' param - 'date')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("begins_at")
    public String beginsAt;

    public PromotionFields withBeginsAt(String beginsAt) {
        this.beginsAt = beginsAt;
        return this;
    }
    
    /**
     * Products Categories where the promotion will be applied (requires 'discount_target' param - 'categories')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public Id[] categories;

    public PromotionFields withCategories(Id[] categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Code of the promotion
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    public String code;

    public PromotionFields withCode(String code) {
        this.code = code;
        return this;
    }
    
    /**
     * Minimum order amount to validate the promotion
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition_price")
    public Float conditionPrice;

    public PromotionFields withConditionPrice(Float conditionPrice) {
        this.conditionPrice = conditionPrice;
        return this;
    }
    
    /**
     * Minimum quantity of ordered itens to validate the promotion
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("condition_qty")
    public Integer conditionQty;

    public PromotionFields withConditionQty(Integer conditionQty) {
        this.conditionQty = conditionQty;
        return this;
    }
    
    /**
     * True if the promotion can be acumulated with others
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cumulative")
    public Boolean cumulative;

    public PromotionFields withCumulative(Boolean cumulative) {
        this.cumulative = cumulative;
        return this;
    }
    
    /**
     * Customer Categories to whom the promotion will be applied (requires 'customers' param - 'categories')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_categories")
    public Id[] customerCategories;

    public PromotionFields withCustomerCategories(Id[] customerCategories) {
        this.customerCategories = customerCategories;
        return this;
    }
    
    /**
     * Fixed discount amount of the promotion
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount_fix")
    public Float discountAmountFix;

    public PromotionFields withDiscountAmountFix(Float discountAmountFix) {
        this.discountAmountFix = discountAmountFix;
        return this;
    }
    
    /**
     * Percentual discount amount of the promotion
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount_percent")
    public Float discountAmountPercent;

    public PromotionFields withDiscountAmountPercent(Float discountAmountPercent) {
        this.discountAmountPercent = discountAmountPercent;
        return this;
    }
    
    /**
     * Where the promotion will be applied ('order', 'shipping', 'categories', 'buy_x_get_y)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_target")
    public String discountTarget;

    public PromotionFields withDiscountTarget(String discountTarget) {
        this.discountTarget = discountTarget;
        return this;
    }
    
    /**
     * If the promotion is currently enabled
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public PromotionFields withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * Expiration date of the promotion (requires 'lasts' param - 'date')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    public String expiresAt;

    public PromotionFields withExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * Unique identifier of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public PromotionFields withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * Controls when the promotion will expire ('none', 'date', 'max_times_used')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lasts")
    public String lasts;

    public PromotionFields withLasts(String lasts) {
        this.lasts = lasts;
        return this;
    }
    
    /**
     * Maximum amount a promotion can be used (requires 'lasts' param - 'max_times_used')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_times_used")
    public Integer maxTimesUsed;

    public PromotionFields withMaxTimesUsed(Integer maxTimesUsed) {
        this.maxTimesUsed = maxTimesUsed;
        return this;
    }
    
    /**
     * Name of the product
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public PromotionFields withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Products where the promotion will be applied (requires 'discount_target' param - 'categories' or 'buy_x_get_y')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products")
    public Id[] products;

    public PromotionFields withProducts(Id[] products) {
        this.products = products;
        return this;
    }
    
    /**
     * Products required to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("products_x")
    public Id[] productsX;

    public PromotionFields withProductsX(Id[] productsX) {
        this.productsX = productsX;
        return this;
    }
    
    /**
     * Number of sets of products_x needed to be able to apply the promotion (requires 'discount_target' param - 'buy_x_get_y')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity_x")
    public Integer quantityX;

    public PromotionFields withQuantityX(Integer quantityX) {
        this.quantityX = quantityX;
        return this;
    }
    
    /**
     * Status of the promotion ('active', 'expired')
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;

    public PromotionFields withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Amount of times the promotion was used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times_used")
    public Integer timesUsed;

    public PromotionFields withTimesUsed(Integer timesUsed) {
        this.timesUsed = timesUsed;
        return this;
    }
    
    public PromotionFields(){}
}
