// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PaymentInstrumentBankAccountType string

const (
	PaymentInstrumentBankAccountTypeIbanAccountIdentification    PaymentInstrumentBankAccountType = "IbanAccountIdentification"
	PaymentInstrumentBankAccountTypeUSLocalAccountIdentification PaymentInstrumentBankAccountType = "USLocalAccountIdentification"
)

type PaymentInstrumentBankAccount struct {
	IbanAccountIdentification    *IbanAccountIdentification
	USLocalAccountIdentification *USLocalAccountIdentification

	Type PaymentInstrumentBankAccountType
}

func CreatePaymentInstrumentBankAccountIbanAccountIdentification(ibanAccountIdentification IbanAccountIdentification) PaymentInstrumentBankAccount {
	typ := PaymentInstrumentBankAccountTypeIbanAccountIdentification

	return PaymentInstrumentBankAccount{
		IbanAccountIdentification: &ibanAccountIdentification,
		Type:                      typ,
	}
}

func CreatePaymentInstrumentBankAccountUSLocalAccountIdentification(usLocalAccountIdentification USLocalAccountIdentification) PaymentInstrumentBankAccount {
	typ := PaymentInstrumentBankAccountTypeUSLocalAccountIdentification

	return PaymentInstrumentBankAccount{
		USLocalAccountIdentification: &usLocalAccountIdentification,
		Type:                         typ,
	}
}

func (u *PaymentInstrumentBankAccount) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	ibanAccountIdentification := new(IbanAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&ibanAccountIdentification); err == nil {
		u.IbanAccountIdentification = ibanAccountIdentification
		u.Type = PaymentInstrumentBankAccountTypeIbanAccountIdentification
		return nil
	}

	usLocalAccountIdentification := new(USLocalAccountIdentification)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&usLocalAccountIdentification); err == nil {
		u.USLocalAccountIdentification = usLocalAccountIdentification
		u.Type = PaymentInstrumentBankAccountTypeUSLocalAccountIdentification
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PaymentInstrumentBankAccount) MarshalJSON() ([]byte, error) {
	if u.IbanAccountIdentification != nil {
		return json.Marshal(u.IbanAccountIdentification)
	}

	if u.USLocalAccountIdentification != nil {
		return json.Marshal(u.USLocalAccountIdentification)
	}

	return nil, nil
}

// PaymentInstrumentStatusEnum - The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.
//
// Possible values:
//
//   - **Active**:  The payment instrument is active and can be used to make payments.
//
//   - **Requested**: The payment instrument has been requested. This state is applicable for physical cards.
//
// * **Inactive**: The payment instrument is inactive and cannot be used to make payments.
//
//   - **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.
//
//   - **Closed**: The payment instrument is permanently closed. This action cannot be undone.
//
// * **Stolen**
//
//   - **Lost**
type PaymentInstrumentStatusEnum string

const (
	PaymentInstrumentStatusEnumActive    PaymentInstrumentStatusEnum = "Active"
	PaymentInstrumentStatusEnumClosed    PaymentInstrumentStatusEnum = "Closed"
	PaymentInstrumentStatusEnumInactive  PaymentInstrumentStatusEnum = "Inactive"
	PaymentInstrumentStatusEnumLost      PaymentInstrumentStatusEnum = "Lost"
	PaymentInstrumentStatusEnumRequested PaymentInstrumentStatusEnum = "Requested"
	PaymentInstrumentStatusEnumStolen    PaymentInstrumentStatusEnum = "Stolen"
	PaymentInstrumentStatusEnumSuspended PaymentInstrumentStatusEnum = "Suspended"
	PaymentInstrumentStatusEnumBlocked   PaymentInstrumentStatusEnum = "blocked"
	PaymentInstrumentStatusEnumDiscarded PaymentInstrumentStatusEnum = "discarded"
)

func (e PaymentInstrumentStatusEnum) ToPointer() *PaymentInstrumentStatusEnum {
	return &e
}

func (e *PaymentInstrumentStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Active":
		fallthrough
	case "Closed":
		fallthrough
	case "Inactive":
		fallthrough
	case "Lost":
		fallthrough
	case "Requested":
		fallthrough
	case "Stolen":
		fallthrough
	case "Suspended":
		fallthrough
	case "blocked":
		fallthrough
	case "discarded":
		*e = PaymentInstrumentStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentInstrumentStatusEnum: %v", v)
	}
}

// PaymentInstrumentTypeEnum - Type of payment instrument.
//
// Possible value: **card**, **bankAccount**.
type PaymentInstrumentTypeEnum string

const (
	PaymentInstrumentTypeEnumBankAccount PaymentInstrumentTypeEnum = "bankAccount"
	PaymentInstrumentTypeEnumCard        PaymentInstrumentTypeEnum = "card"
)

func (e PaymentInstrumentTypeEnum) ToPointer() *PaymentInstrumentTypeEnum {
	return &e
}

func (e *PaymentInstrumentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bankAccount":
		fallthrough
	case "card":
		*e = PaymentInstrumentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaymentInstrumentTypeEnum: %v", v)
	}
}

// PaymentInstrument - OK - the request has succeeded.
type PaymentInstrument struct {
	// The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.
	BalanceAccountID string `json:"balanceAccountId"`
	// Contains the business account details. Returned when you create a payment instrument with `type` **bankAccount**.
	BankAccount *PaymentInstrumentBankAccount `json:"bankAccount,omitempty"`
	Card        *Card                         `json:"card,omitempty"`
	// Your description for the payment instrument, maximum 300 characters.
	Description *string `json:"description,omitempty"`
	// The unique identifier of the payment instrument.
	ID string `json:"id"`
	// The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
	IssuingCountryCode string `json:"issuingCountryCode"`
	// The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.
	PaymentInstrumentGroupID *string `json:"paymentInstrumentGroupId,omitempty"`
	// Your reference for the payment instrument, maximum 150 characters.
	Reference *string `json:"reference,omitempty"`
	// The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.
	//
	// Possible values:
	//
	//  * **Active**:  The payment instrument is active and can be used to make payments.
	//
	//  * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.
	//
	// * **Inactive**: The payment instrument is inactive and cannot be used to make payments.
	//
	//  * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.
	//
	//  * **Closed**: The payment instrument is permanently closed. This action cannot be undone.
	//
	// * **Stolen**
	//
	//  * **Lost**
	//
	//
	Status *PaymentInstrumentStatusEnum `json:"status,omitempty"`
	// Type of payment instrument.
	//
	// Possible value: **card**, **bankAccount**.
	Type PaymentInstrumentTypeEnum `json:"type"`
}
