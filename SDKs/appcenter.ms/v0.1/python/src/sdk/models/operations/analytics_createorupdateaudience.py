"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AnalyticsCreateOrUpdateAudienceSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    
class AnalyticsCreateOrUpdateAudienceRequestBodyCustomPropertiesEnum(str, Enum):
    STRING = 'string'
    NUMBER = 'number'
    BOOLEAN = 'boolean'
    DATE_TIME = 'date_time'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsCreateOrUpdateAudienceRequestBody:
    r"""Audience definition."""
    
    definition: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition') }})
    r"""Audience definition in OData format."""  
    custom_properties: Optional[dict[str, AnalyticsCreateOrUpdateAudienceRequestBodyCustomPropertiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_properties'), 'exclude': lambda f: f is None }})
    r"""Custom properties used in the definition."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Audience description."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AnalyticsCreateOrUpdateAudienceRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    audience_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'audience_name', 'style': 'simple', 'explode': False }})
    r"""The name of the audience"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    request_body: AnalyticsCreateOrUpdateAudienceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Audience definition"""  
    
class AnalyticsCreateOrUpdateAudienceDefaultApplicationJSONErrorCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsCreateOrUpdateAudienceDefaultApplicationJSONError:
    
    code: AnalyticsCreateOrUpdateAudienceDefaultApplicationJSONErrorCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsCreateOrUpdateAudienceDefaultApplicationJSON:
    r"""Error code with reason"""
    
    error: AnalyticsCreateOrUpdateAudienceDefaultApplicationJSONError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})  
    
class AnalyticsCreateOrUpdateAudience200ApplicationJSONCustomPropertiesEnum(str, Enum):
    STRING = 'string'
    NUMBER = 'number'
    BOOLEAN = 'boolean'
    DATE_TIME = 'date_time'

class AnalyticsCreateOrUpdateAudience200ApplicationJSONStateEnum(str, Enum):
    r"""Audience state."""
    CALCULATING = 'Calculating'
    READY = 'Ready'
    DISABLED = 'Disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsCreateOrUpdateAudience200ApplicationJSON:
    r"""Audience definition."""
    
    custom_properties: Optional[dict[str, AnalyticsCreateOrUpdateAudience200ApplicationJSONCustomPropertiesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_properties'), 'exclude': lambda f: f is None }})
    r"""Custom properties used in the definition."""  
    definition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definition'), 'exclude': lambda f: f is None }})
    r"""Audience definition in OData format."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Audience description."""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    estimated_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_count'), 'exclude': lambda f: f is None }})
    r"""Estimated audience size."""  
    estimated_total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimated_total_count'), 'exclude': lambda f: f is None }})
    r"""Estimated total audience size."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Audience name."""  
    state: Optional[AnalyticsCreateOrUpdateAudience200ApplicationJSONStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Audience state."""  
    timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the audience was last refreshed."""  
    

@dataclasses.dataclass
class AnalyticsCreateOrUpdateAudienceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    analytics_create_or_update_audience_200_application_json_object: Optional[AnalyticsCreateOrUpdateAudience200ApplicationJSON] = dataclasses.field(default=None)
    r"""Updated audiences definition."""  
    analytics_create_or_update_audience_default_application_json_object: Optional[AnalyticsCreateOrUpdateAudienceDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    