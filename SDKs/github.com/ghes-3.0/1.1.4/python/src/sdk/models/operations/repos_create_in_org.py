"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import repository as shared_repository
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReposCreateInOrgRequestBodyVisibilityEnum(str, Enum):
    r"""Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \\"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\\" in the GitHub Help documentation.
    The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
    """
    PUBLIC = 'public'
    PRIVATE = 'private'
    INTERNAL = 'internal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReposCreateInOrgRequestBody:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the repository."""  
    allow_merge_commit: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_merge_commit'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits."""  
    allow_rebase_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_rebase_merge'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging."""  
    allow_squash_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allow_squash_merge'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging."""  
    auto_init: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auto_init'), 'exclude': lambda f: f is None }})
    r"""Pass `true` to create an initial commit with empty README."""  
    delete_branch_on_merge: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delete_branch_on_merge'), 'exclude': lambda f: f is None }})
    r"""Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A short description of the repository."""  
    gitignore_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gitignore_template'), 'exclude': lambda f: f is None }})
    r"""Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \\"Haskell\\"."""  
    has_issues: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_issues'), 'exclude': lambda f: f is None }})
    r"""Either `true` to enable issues for this repository or `false` to disable them."""  
    has_projects: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_projects'), 'exclude': lambda f: f is None }})
    r"""Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error."""  
    has_wiki: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('has_wiki'), 'exclude': lambda f: f is None }})
    r"""Either `true` to enable the wiki for this repository or `false` to disable it."""  
    homepage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homepage'), 'exclude': lambda f: f is None }})
    r"""A URL with more information about the repository."""  
    is_template: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_template'), 'exclude': lambda f: f is None }})
    r"""Either `true` to make this repo available as a template repository or `false` to prevent it."""  
    license_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('license_template'), 'exclude': lambda f: f is None }})
    r"""Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \\"mit\\" or \\"mpl-2.0\\"."""  
    private: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('private'), 'exclude': lambda f: f is None }})
    r"""Whether the repository is private."""  
    team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_id'), 'exclude': lambda f: f is None }})
    r"""The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization."""  
    visibility: Optional[ReposCreateInOrgRequestBodyVisibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \\"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\\" in the GitHub Help documentation.
    The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
    """  
    

@dataclasses.dataclass
class ReposCreateInOrgRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})  
    request_body: ReposCreateInOrgRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ReposCreateInOrgResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Forbidden"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    repository: Optional[shared_repository.Repository] = dataclasses.field(default=None)
    r"""Response"""  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed"""  
    