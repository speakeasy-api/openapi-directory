/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class RegionTargetHttpProxies {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Deletes the specified TargetHttpProxy resource.
   */
  computeRegionTargetHttpProxiesDelete(
    req: operations.ComputeRegionTargetHttpProxiesDeleteRequest,
    security: operations.ComputeRegionTargetHttpProxiesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionTargetHttpProxiesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionTargetHttpProxiesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeRegionTargetHttpProxiesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionTargetHttpProxiesDeleteResponse =
        new operations.ComputeRegionTargetHttpProxiesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the specified TargetHttpProxy resource in the specified region.
   */
  computeRegionTargetHttpProxiesGet(
    req: operations.ComputeRegionTargetHttpProxiesGetRequest,
    security: operations.ComputeRegionTargetHttpProxiesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionTargetHttpProxiesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionTargetHttpProxiesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeRegionTargetHttpProxiesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionTargetHttpProxiesGetResponse =
        new operations.ComputeRegionTargetHttpProxiesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targetHttpProxy = utils.objectToClass(
              httpRes?.data,
              shared.TargetHttpProxy
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.
   */
  computeRegionTargetHttpProxiesInsert(
    req: operations.ComputeRegionTargetHttpProxiesInsertRequest,
    security: operations.ComputeRegionTargetHttpProxiesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionTargetHttpProxiesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionTargetHttpProxiesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/targetHttpProxies",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "targetHttpProxy",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeRegionTargetHttpProxiesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionTargetHttpProxiesInsertResponse =
        new operations.ComputeRegionTargetHttpProxiesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.
   */
  computeRegionTargetHttpProxiesList(
    req: operations.ComputeRegionTargetHttpProxiesListRequest,
    security: operations.ComputeRegionTargetHttpProxiesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionTargetHttpProxiesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionTargetHttpProxiesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/targetHttpProxies",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeRegionTargetHttpProxiesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionTargetHttpProxiesListResponse =
        new operations.ComputeRegionTargetHttpProxiesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.targetHttpProxyList = utils.objectToClass(
              httpRes?.data,
              shared.TargetHttpProxyList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Changes the URL map for TargetHttpProxy.
   */
  computeRegionTargetHttpProxiesSetUrlMap(
    req: operations.ComputeRegionTargetHttpProxiesSetUrlMapRequest,
    security: operations.ComputeRegionTargetHttpProxiesSetUrlMapSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputeRegionTargetHttpProxiesSetUrlMapResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputeRegionTargetHttpProxiesSetUrlMapRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "urlMapReference",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputeRegionTargetHttpProxiesSetUrlMapSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputeRegionTargetHttpProxiesSetUrlMapResponse =
        new operations.ComputeRegionTargetHttpProxiesSetUrlMapResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
