/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateOpenIdIdpConfigRequest - Request model for creating an OpenID Connect IDP configuration
 */
public class CreateOpenIdIdpConfigRequest {
    /**
     * URL of the authorization endpoint
     */
    @JsonProperty("authorizationEndPointUrl")
    public String authorizationEndPointUrl;
    public CreateOpenIdIdpConfigRequest withAuthorizationEndPointUrl(String authorizationEndPointUrl) {
        this.authorizationEndPointUrl = authorizationEndPointUrl;
        return this;
    }
    
    /**
     * ID of the OpenID client
     */
    @JsonProperty("clientId")
    public String clientId;
    public CreateOpenIdIdpConfigRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Secret, which client uses at authentication.
     */
    @JsonProperty("clientSecret")
    public String clientSecret;
    public CreateOpenIdIdpConfigRequest withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * Name of the claim which is used for the user mapping fallback.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fallbackMappingClaim")
    public String fallbackMappingClaim;
    public CreateOpenIdIdpConfigRequest withFallbackMappingClaim(String fallbackMappingClaim) {
        this.fallbackMappingClaim = fallbackMappingClaim;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.11.0
     * 
     * Flow, which is used at authentication
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flow")
    public CreateOpenIdIdpConfigRequestFlowEnum flow;
    public CreateOpenIdIdpConfigRequest withFlow(CreateOpenIdIdpConfigRequestFlowEnum flow) {
        this.flow = flow;
        return this;
    }
    
    /**
     * Issuer identifier of the IDP
     * 
     * The value is a case sensitive URL.
     */
    @JsonProperty("issuer")
    public String issuer;
    public CreateOpenIdIdpConfigRequest withIssuer(String issuer) {
        this.issuer = issuer;
        return this;
    }
    
    /**
     * URL of the JWKS endpoint
     */
    @JsonProperty("jwksEndPointUrl")
    public String jwksEndPointUrl;
    public CreateOpenIdIdpConfigRequest withJwksEndPointUrl(String jwksEndPointUrl) {
        this.jwksEndPointUrl = jwksEndPointUrl;
        return this;
    }
    
    /**
     * Name of the claim which is used for the user mapping.
     */
    @JsonProperty("mappingClaim")
    public String mappingClaim;
    public CreateOpenIdIdpConfigRequest withMappingClaim(String mappingClaim) {
        this.mappingClaim = mappingClaim;
        return this;
    }
    
    /**
     * Name of the IDP
     */
    @JsonProperty("name")
    public String name;
    public CreateOpenIdIdpConfigRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * PKCE code challenge method.
     * 
     * cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pkceChallengeMethod")
    public String pkceChallengeMethod;
    public CreateOpenIdIdpConfigRequest withPkceChallengeMethod(String pkceChallengeMethod) {
        this.pkceChallengeMethod = pkceChallengeMethod;
        return this;
    }
    
    /**
     * Determines whether PKCE is enabled.
     * 
     * cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pkceEnabled")
    public Boolean pkceEnabled;
    public CreateOpenIdIdpConfigRequest withPkceEnabled(Boolean pkceEnabled) {
        this.pkceEnabled = pkceEnabled;
        return this;
    }
    
    /**
     * URIs, to which a user is redirected after authorization.
     */
    @JsonProperty("redirectUris")
    public String[] redirectUris;
    public CreateOpenIdIdpConfigRequest withRedirectUris(String[] redirectUris) {
        this.redirectUris = redirectUris;
        return this;
    }
    
    /**
     * List of requested scopes
     */
    @JsonProperty("scopes")
    public String[] scopes;
    public CreateOpenIdIdpConfigRequest withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * URL of the token endpoint
     */
    @JsonProperty("tokenEndPointUrl")
    public String tokenEndPointUrl;
    public CreateOpenIdIdpConfigRequest withTokenEndPointUrl(String tokenEndPointUrl) {
        this.tokenEndPointUrl = tokenEndPointUrl;
        return this;
    }
    
    /**
     * Determines if a DRACOON account is automatically created for a new user
     * 
     * who successfully logs on with his / her AD / IDP account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userImportEnabled")
    public Boolean userImportEnabled;
    public CreateOpenIdIdpConfigRequest withUserImportEnabled(Boolean userImportEnabled) {
        this.userImportEnabled = userImportEnabled;
        return this;
    }
    
    /**
     * User group that is assigned to users who are created by automatic import.
     * 
     * Reset with `0`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userImportGroup")
    public Long userImportGroup;
    public CreateOpenIdIdpConfigRequest withUserImportGroup(Long userImportGroup) {
        this.userImportGroup = userImportGroup;
        return this;
    }
    
    /**
     * URL of the user info endpoint
     */
    @JsonProperty("userInfoEndPointUrl")
    public String userInfoEndPointUrl;
    public CreateOpenIdIdpConfigRequest withUserInfoEndPointUrl(String userInfoEndPointUrl) {
        this.userInfoEndPointUrl = userInfoEndPointUrl;
        return this;
    }
    
    /**
     * &amp;#128640; Since v4.23.0
     * 
     * Source, which is used to get user information at the import or update of a user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInfoSource")
    public CreateOpenIdIdpConfigRequestUserInfoSourceEnum userInfoSource;
    public CreateOpenIdIdpConfigRequest withUserInfoSource(CreateOpenIdIdpConfigRequestUserInfoSourceEnum userInfoSource) {
        this.userInfoSource = userInfoSource;
        return this;
    }
    
    /**
     * URL of the user management UI.
     * 
     * Use empty string to remove.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userManagementUrl")
    public String userManagementUrl;
    public CreateOpenIdIdpConfigRequest withUserManagementUrl(String userManagementUrl) {
        this.userManagementUrl = userManagementUrl;
        return this;
    }
    
    /**
     * Determines if the DRACOON account is updated with data from AD / IDP.
     * 
     * For OpenID Connect, the scopes `email` and `profile` are needed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userUpdateEnabled")
    public Boolean userUpdateEnabled;
    public CreateOpenIdIdpConfigRequest withUserUpdateEnabled(Boolean userUpdateEnabled) {
        this.userUpdateEnabled = userUpdateEnabled;
        return this;
    }
    
}
