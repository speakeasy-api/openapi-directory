"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import account as shared_account
from ..shared import error as shared_error
from ..shared import status as shared_status
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetAPIV2SearchSecurity:
    
    bearer_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})  
    
class GetAPIV2SearchTypeEnum(str, Enum):
    r"""Enum(accounts, hashtags, statuses)"""
    ACCOUNTS = 'accounts'
    HASHTAGS = 'hashtags'
    STATUSES = 'statuses'


@dataclasses.dataclass
class GetAPIV2SearchRequest:
    
    q: str = dataclasses.field(metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""What to search for"""  
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'account_id', 'style': 'form', 'explode': True }})
    r"""If provided, statuses returned will be authored only by this account"""  
    exclude_unreviewed: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_unreviewed', 'style': 'form', 'explode': True }})
    r"""Filter out unreviewed tags? Defaults to false. Use true when trying to find trending tags."""  
    following: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'following', 'style': 'form', 'explode': True }})
    r"""Only who the user is following. Defaults to false."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of results. Defaults to 40."""  
    max_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_id', 'style': 'form', 'explode': True }})
    r"""Return results older than this id"""  
    min_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'min_id', 'style': 'form', 'explode': True }})
    r"""Return results immediately newer than this id"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Offset in search results. Used for pagination. Defaults to 0."""  
    resolve: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resolve', 'style': 'form', 'explode': True }})
    r"""Attempt WebFinger lookup."""  
    type: Optional[GetAPIV2SearchTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Enum(accounts, hashtags, statuses)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetAPIV2Search200ApplicationJSON:
    r"""Result"""
    
    accounts: Optional[list[shared_account.Account]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accounts'), 'exclude': lambda f: f is None }})  
    hashtags: Optional[list[shared_status.Status]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashtags'), 'exclude': lambda f: f is None }})  
    statuses: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statuses'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetAPIV2SearchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Invalid or missing Authorization header"""  
    get_api_v2_search_200_application_json_object: Optional[GetAPIV2Search200ApplicationJSON] = dataclasses.field(default=None)
    r"""Result"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    