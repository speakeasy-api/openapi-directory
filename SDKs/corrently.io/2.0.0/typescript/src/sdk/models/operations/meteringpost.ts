/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class MeteringPostRequestBody extends SpeakeasyBase {
  /**
   * Meter Reading (prefered in Wh)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "1.8.0" })
  one80?: number;

  /**
   * Stromkonto account (address) associated with this metering.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account?: string;

  /**
   * Alias for 1.8.0
   */
  @SpeakeasyMetadata()
  @Expose({ name: "energy" })
  energy?: number;

  /**
   * Some private password you might choose on first update. However you need to use the same secret on every further posts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  /**
   * Alias for 1.8.0
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: number;

  /**
   * Zipcode (Postleitzahl) of metered location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip?: string;
}

/**
 * Success
 */
export class MeteringPost200ApplicationJSON extends SpeakeasyBase {
  /**
   * Reading as provided as input in Wh
   */
  @SpeakeasyMetadata()
  @Expose({ name: "1.8.0" })
  one80?: number;

  /**
   * Green energy calculated using Green Power Index (GrünstromIndex) in Wh
   */
  @SpeakeasyMetadata()
  @Expose({ name: "1.8.1" })
  one81?: number;

  /**
   * Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
   */
  @SpeakeasyMetadata()
  @Expose({ name: "1.8.2" })
  one82?: number;

  /**
   * Time this reading got imported into consensus (e.q. signed timestamp).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "_processingTime" })
  processingTime?: number;

  /**
   * Stromkonto/Metering address allocated (this is not the MELOID!)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account" })
  account?: string;

  /**
   * CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "co2_g_oekostrom" })
  co2GOekostrom?: number;

  /**
   * CO2 Emission of metered energy in a standard mix
   */
  @SpeakeasyMetadata()
  @Expose({ name: "co2_g_standard" })
  co2GStandard?: number;

  /**
   * API Consensus time this reading was fully received
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timeStamp" })
  timeStamp?: number;
}

export class MeteringPostResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  meteringPost200ApplicationJSONObject?: MeteringPost200ApplicationJSON;
}
