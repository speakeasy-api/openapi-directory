// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddEndpointsXAmzTargetEnum
type AddEndpointsXAmzTargetEnum string

const (
	AddEndpointsXAmzTargetEnumGlobalAcceleratorV20180706AddEndpoints AddEndpointsXAmzTargetEnum = "GlobalAccelerator_V20180706.AddEndpoints"
)

func (e *AddEndpointsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GlobalAccelerator_V20180706.AddEndpoints":
		*e = AddEndpointsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddEndpointsXAmzTargetEnum: %s", s)
	}
}

type AddEndpointsRequest struct {
	AddEndpointsRequest shared.AddEndpointsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          AddEndpointsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddEndpointsResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	AddEndpointsResponse *shared.AddEndpointsResponse
	ContentType          string
	// EndpointGroupNotFoundException
	EndpointGroupNotFoundException interface{}
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// TransactionInProgressException
	TransactionInProgressException interface{}
}
