/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * The type of deployment. When used for ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
 */
export enum CreateDeploymentRequestBodyDeploymentTypeEnum {
  NewDeployment = "NewDeployment",
  Redeployment = "Redeployment",
  ResetDeployment = "ResetDeployment",
  ForceResetDeployment = "ForceResetDeployment",
}

export class CreateDeploymentRequestBody extends SpeakeasyBase {
  /**
   * The ID of the deployment if you wish to redeploy a previous deployment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentId" })
  deploymentId?: string;

  /**
   * The type of deployment. When used for ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentType" })
  deploymentType: CreateDeploymentRequestBodyDeploymentTypeEnum;

  /**
   * The ID of the group version to be deployed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GroupVersionId" })
  groupVersionId?: string;
}

export class CreateDeploymentRequest extends SpeakeasyBase {
  /**
   * The ID of the Greengrass group.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=GroupId",
  })
  groupId: string;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateDeploymentRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * A client token used to correlate requests and responses.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amzn-Client-Token",
  })
  xAmznClientToken?: string;
}

export class CreateDeploymentResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDeploymentResponse?: shared.CreateDeploymentResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
