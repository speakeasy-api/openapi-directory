<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AssetsMonteCarloReturnsSimulation 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Cornish-Fisher Distribution
     * 
     * Simulate the return(s) of one asset for one or several time period(s) using a Cornish-Fisher distribution.
     * 
     * References
     * * [Maillard, Didier, A User’s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)
     * * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish–Fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherResponse
     */
	public function postAssetsReturnsSimulationMonteCarloCornishFisher(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/returns/simulation/monte-carlo/cornish-fisher');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsReturnsSimulationMonteCarloCornishFisher200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisher200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Corrected Cornish-Fisher Distribution
     * 
     * Simulate the return(s) of one asset for one or several time period(s) using a corrected Cornish-Fisher distribution.
     * 
     * References
     * * [Maillard, Didier, A User’s Guide to the Cornish Fisher Expansion](https://papers.ssrn.com/sol3/papers.cfm?abstract_id=1997178)
     * * [Lamb, John D., Maura E. Monville, and Kai-Hong Tee. Making Cornish–fisher Fit for Risk Measurement, Journal of Risk, Volume 21, Number 5, p. 53-81](http://doi.org/10.21314/JOR.2019.408)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedResponse
     */
	public function postAssetsReturnsSimulationMonteCarloCornishFisherCorrected(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/returns/simulation/monte-carlo/cornish-fisher/corrected');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherCorrectedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsReturnsSimulationMonteCarloCornishFisherCorrected200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloCornishFisherCorrected200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Gaussian Distribution
     * 
     * Simulate the return(s) of one asset for one or several time period(s) using a Gaussian distribution.
     * 
     * References
     * * [Wikipedia, Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloGaussianRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloGaussianResponse
     */
	public function postAssetsReturnsSimulationMonteCarloGaussian(
        \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloGaussianRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloGaussianResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/assets/returns/simulation/monte-carlo/gaussian');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloGaussianResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postAssetsReturnsSimulationMonteCarloGaussian200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostAssetsReturnsSimulationMonteCarloGaussian200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}