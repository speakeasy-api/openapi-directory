// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListTechniques200ApplicationJSONActionEnum - The id of the action
type ListTechniques200ApplicationJSONActionEnum string

const (
	ListTechniques200ApplicationJSONActionEnumListTechniques ListTechniques200ApplicationJSONActionEnum = "listTechniques"
)

func (e *ListTechniques200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "listTechniques":
		*e = ListTechniques200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTechniques200ApplicationJSONActionEnum: %s", s)
	}
}

type ListTechniques200ApplicationJSONData struct {
	Techniques []shared.Techniques `json:"techniques"`
}

// ListTechniques200ApplicationJSONResultEnum - Result of the request
type ListTechniques200ApplicationJSONResultEnum string

const (
	ListTechniques200ApplicationJSONResultEnumSuccess ListTechniques200ApplicationJSONResultEnum = "success"
	ListTechniques200ApplicationJSONResultEnumError   ListTechniques200ApplicationJSONResultEnum = "error"
)

func (e *ListTechniques200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ListTechniques200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListTechniques200ApplicationJSONResultEnum: %s", s)
	}
}

// ListTechniques200ApplicationJSON - Techniques information
type ListTechniques200ApplicationJSON struct {
	// The id of the action
	Action ListTechniques200ApplicationJSONActionEnum `json:"action"`
	Data   ListTechniques200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ListTechniques200ApplicationJSONResultEnum `json:"result"`
}

type ListTechniquesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Techniques information
	ListTechniques200ApplicationJSONObject *ListTechniques200ApplicationJSON
}
