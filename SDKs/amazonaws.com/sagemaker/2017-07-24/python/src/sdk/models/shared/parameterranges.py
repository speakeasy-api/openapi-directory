"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import categoricalparameterrange as shared_categoricalparameterrange
from ..shared import continuousparameterrange as shared_continuousparameterrange
from ..shared import integerparameterrange as shared_integerparameterrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParameterRanges:
    r"""<p>Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job.</p> <note> <p>The maximum number of items specified for <code>Array Members</code> refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.</p> </note>"""
    
    categorical_parameter_ranges: Optional[list[shared_categoricalparameterrange.CategoricalParameterRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CategoricalParameterRanges'), 'exclude': lambda f: f is None }})  
    continuous_parameter_ranges: Optional[list[shared_continuousparameterrange.ContinuousParameterRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContinuousParameterRanges'), 'exclude': lambda f: f is None }})  
    integer_parameter_ranges: Optional[list[shared_integerparameterrange.IntegerParameterRange]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IntegerParameterRanges'), 'exclude': lambda f: f is None }})  
    