// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritablePlatformLegacyRPCClientEnum string

const (
	WritablePlatformLegacyRPCClientEnumJuniperJunos WritablePlatformLegacyRPCClientEnum = "juniper-junos"
	WritablePlatformLegacyRPCClientEnumCiscoIos     WritablePlatformLegacyRPCClientEnum = "cisco-ios"
	WritablePlatformLegacyRPCClientEnumOpengear     WritablePlatformLegacyRPCClientEnum = "opengear"
)

func (e *WritablePlatformLegacyRPCClientEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "juniper-junos":
		fallthrough
	case "cisco-ios":
		fallthrough
	case "opengear":
		*e = WritablePlatformLegacyRPCClientEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritablePlatformLegacyRPCClientEnum: %s", s)
	}
}

type WritablePlatformInput struct {
	// Optionally limit this platform to devices of a certain manufacturer
	Manufacturer *int64 `json:"manufacturer,omitempty"`
	Name         string `json:"name"`
	// Additional arguments to pass when initiating the NAPALM driver (JSON format)
	NapalmArgs *string `json:"napalm_args,omitempty"`
	// The name of the NAPALM driver to use when interacting with devices
	NapalmDriver *string                              `json:"napalm_driver,omitempty"`
	RPCClient    *WritablePlatformLegacyRPCClientEnum `json:"rpc_client,omitempty"`
	Slug         string                               `json:"slug"`
}
