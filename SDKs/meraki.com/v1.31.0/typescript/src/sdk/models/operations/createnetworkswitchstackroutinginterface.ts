/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The IPv6 settings of the interface.
 */
export class CreateNetworkSwitchStackRoutingInterfaceRequestBodyIpv6 extends SpeakeasyBase {
  /**
   * The IPv6 address of the interface. Required if assignmentMode is 'static'. Must not be included if assignmentMode is 'eui-64'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address" })
  address?: string;

  /**
   * The IPv6 assignment mode for the interface. Can be either 'eui-64' or 'static'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignmentMode" })
  assignmentMode?: string;

  /**
   * The IPv6 default gateway of the interface. Required if prefix is defined and this is the first interface with IPv6 configured for the stack.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gateway" })
  gateway?: string;

  /**
   * The IPv6 prefix of the interface. Required if IPv6 object is included.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prefix" })
  prefix?: string;
}

/**
 * Enable multicast support if, multicast routing between VLANs is required. Options are, 'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
 */
export enum CreateNetworkSwitchStackRoutingInterfaceRequestBodyMulticastRoutingEnum {
  IGMPSnoopingQuerier = "IGMP snooping querier",
  Disabled = "disabled",
  Enabled = "enabled",
}

/**
 * The OSPF routing settings of the interface.
 */
export class CreateNetworkSwitchStackRoutingInterfaceRequestBodyOspfSettings extends SpeakeasyBase {
  /**
   * The OSPF area to which this interface should belong. Can be either 'disabled' or the identifier of an existing OSPF area. Defaults to 'disabled'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "area" })
  area?: string;

  /**
   * The path cost for this interface. Defaults to 1, but can be increased up to 65535 to give lower priority.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cost" })
  cost?: number;

  /**
   * When enabled, OSPF will not run on the interface, but the subnet will still be advertised.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isPassiveEnabled" })
  isPassiveEnabled?: boolean;
}

export class CreateNetworkSwitchStackRoutingInterfaceRequestBody extends SpeakeasyBase {
  /**
   * The next hop for any traffic that isn't going to a directly connected subnet or over a static route. This IP address must exist in a subnet with a routed interface.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultGateway" })
  defaultGateway?: string;

  /**
   * The IP address this switch stack will use for layer 3 routing on this VLAN or subnet. This cannot be the same as the switch's management IP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interfaceIp" })
  interfaceIp?: string;

  /**
   * The IPv6 settings of the interface.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ipv6" })
  @Type(() => CreateNetworkSwitchStackRoutingInterfaceRequestBodyIpv6)
  ipv6?: CreateNetworkSwitchStackRoutingInterfaceRequestBodyIpv6;

  /**
   * Enable multicast support if, multicast routing between VLANs is required. Options are, 'disabled', 'enabled' or 'IGMP snooping querier'. Default is 'disabled'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multicastRouting" })
  multicastRouting?: CreateNetworkSwitchStackRoutingInterfaceRequestBodyMulticastRoutingEnum;

  /**
   * A friendly name or description for the interface or VLAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The OSPF routing settings of the interface.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ospfSettings" })
  @Type(() => CreateNetworkSwitchStackRoutingInterfaceRequestBodyOspfSettings)
  ospfSettings?: CreateNetworkSwitchStackRoutingInterfaceRequestBodyOspfSettings;

  /**
   * The network that this routed interface is on, in CIDR notation (ex. 10.1.1.0/24).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subnet" })
  subnet?: string;

  /**
   * The VLAN this routed interface is on. VLAN must be between 1 and 4094.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlanId" })
  vlanId: number;
}

export class CreateNetworkSwitchStackRoutingInterfaceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateNetworkSwitchStackRoutingInterfaceRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=switchStackId",
  })
  switchStackId: string;
}

export class CreateNetworkSwitchStackRoutingInterfaceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  createNetworkSwitchStackRoutingInterface201ApplicationJSONObject?: Record<
    string,
    any
  >;
}
