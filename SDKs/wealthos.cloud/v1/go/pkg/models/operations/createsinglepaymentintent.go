// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type CreateSinglePaymentIntentSecurity struct {
	APISecretKey string `security:"scheme,type=apiKey,subtype=header,name=x-api-key"`
}

type CreateSinglePaymentIntentRequestBodyInvestmentInstructions struct {
	InvestmentProductID string `json:"investment_product_id"`
	// Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
	Quantity *string `json:"quantity,omitempty"`
	// Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
	Value *string `json:"value,omitempty"`
}

type CreateSinglePaymentIntentRequestBodyPaymentTypeEnum string

const (
	CreateSinglePaymentIntentRequestBodyPaymentTypeEnumCard                   CreateSinglePaymentIntentRequestBodyPaymentTypeEnum = "card"
	CreateSinglePaymentIntentRequestBodyPaymentTypeEnumElectronicFundTransfer CreateSinglePaymentIntentRequestBodyPaymentTypeEnum = "electronic_fund_transfer"
)

func (e CreateSinglePaymentIntentRequestBodyPaymentTypeEnum) ToPointer() *CreateSinglePaymentIntentRequestBodyPaymentTypeEnum {
	return &e
}

func (e *CreateSinglePaymentIntentRequestBodyPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card":
		fallthrough
	case "electronic_fund_transfer":
		*e = CreateSinglePaymentIntentRequestBodyPaymentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntentRequestBodyPaymentTypeEnum: %v", v)
	}
}

type CreateSinglePaymentIntentRequestBodyPurposeEnum string

const (
	CreateSinglePaymentIntentRequestBodyPurposeEnumCash   CreateSinglePaymentIntentRequestBodyPurposeEnum = "cash"
	CreateSinglePaymentIntentRequestBodyPurposeEnumInvest CreateSinglePaymentIntentRequestBodyPurposeEnum = "invest"
)

func (e CreateSinglePaymentIntentRequestBodyPurposeEnum) ToPointer() *CreateSinglePaymentIntentRequestBodyPurposeEnum {
	return &e
}

func (e *CreateSinglePaymentIntentRequestBodyPurposeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cash":
		fallthrough
	case "invest":
		*e = CreateSinglePaymentIntentRequestBodyPurposeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntentRequestBodyPurposeEnum: %v", v)
	}
}

type CreateSinglePaymentIntentRequestBodyServiceProviderEnum string

const (
	CreateSinglePaymentIntentRequestBodyServiceProviderEnumStripe    CreateSinglePaymentIntentRequestBodyServiceProviderEnum = "stripe"
	CreateSinglePaymentIntentRequestBodyServiceProviderEnumTruelayer CreateSinglePaymentIntentRequestBodyServiceProviderEnum = "truelayer"
	CreateSinglePaymentIntentRequestBodyServiceProviderEnumNone      CreateSinglePaymentIntentRequestBodyServiceProviderEnum = "none"
)

func (e CreateSinglePaymentIntentRequestBodyServiceProviderEnum) ToPointer() *CreateSinglePaymentIntentRequestBodyServiceProviderEnum {
	return &e
}

func (e *CreateSinglePaymentIntentRequestBodyServiceProviderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripe":
		fallthrough
	case "truelayer":
		fallthrough
	case "none":
		*e = CreateSinglePaymentIntentRequestBodyServiceProviderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntentRequestBodyServiceProviderEnum: %v", v)
	}
}

// CreateSinglePaymentIntentRequestBodyServiceProviderParams - Parameters based on prerequisites of the selected provider
type CreateSinglePaymentIntentRequestBodyServiceProviderParams struct {
	// Bank account ID of Investor (mandatory only if service_provider="truelayer")
	BankAccountID *string `json:"bank_account_id,omitempty"`
}

type CreateSinglePaymentIntentRequestBody struct {
	// Amount as a numeral string with two decimal points. (ex: 1500.00). Minimum allowed amount is 1.00
	Amount string `json:"amount"`
	// must be a currency configured for the Pot
	Currency *string `json:"currency,omitempty"`
	// mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager).
	InvestmentInstructions []CreateSinglePaymentIntentRequestBodyInvestmentInstructions `json:"investment_instructions,omitempty"`
	PaymentType            CreateSinglePaymentIntentRequestBodyPaymentTypeEnum          `json:"payment_type"`
	PotID                  string                                                       `json:"pot_id"`
	Purpose                CreateSinglePaymentIntentRequestBodyPurposeEnum              `json:"purpose"`
	// Unique request id to ensure idempotency. (ex: UUID)
	RequestID       string                                                  `json:"request_id"`
	ServiceProvider CreateSinglePaymentIntentRequestBodyServiceProviderEnum `json:"service_provider"`
	// Parameters based on prerequisites of the selected provider
	ServiceProviderParams *CreateSinglePaymentIntentRequestBodyServiceProviderParams `json:"service_provider_params,omitempty"`
}

type CreateSinglePaymentIntentRequest struct {
	RequestBody CreateSinglePaymentIntentRequestBody `request:"mediaType=application/json"`
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

// CreateSinglePaymentIntent500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type CreateSinglePaymentIntent500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateSinglePaymentIntent429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type CreateSinglePaymentIntent429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateSinglePaymentIntent409ApplicationJSONStatusEnum - Current status of the original request
type CreateSinglePaymentIntent409ApplicationJSONStatusEnum string

const (
	CreateSinglePaymentIntent409ApplicationJSONStatusEnumProcessing CreateSinglePaymentIntent409ApplicationJSONStatusEnum = "PROCESSING"
	CreateSinglePaymentIntent409ApplicationJSONStatusEnumComplete   CreateSinglePaymentIntent409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e CreateSinglePaymentIntent409ApplicationJSONStatusEnum) ToPointer() *CreateSinglePaymentIntent409ApplicationJSONStatusEnum {
	return &e
}

func (e *CreateSinglePaymentIntent409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = CreateSinglePaymentIntent409ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntent409ApplicationJSONStatusEnum: %v", v)
	}
}

// CreateSinglePaymentIntent409ApplicationJSON - Duplicate request
type CreateSinglePaymentIntent409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status CreateSinglePaymentIntent409ApplicationJSONStatusEnum `json:"status"`
}

// CreateSinglePaymentIntent403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type CreateSinglePaymentIntent403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateSinglePaymentIntent401ApplicationJSON - You do not have permissions to access this resource.
type CreateSinglePaymentIntent401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// CreateSinglePaymentIntent400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type CreateSinglePaymentIntent400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

type CreateSinglePaymentIntent201ApplicationJSONInvestmentInstructions struct {
	InvestmentProductID string `json:"investment_product_id"`
	// Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
	Quantity *string `json:"quantity,omitempty"`
	// Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
	Value *string `json:"value,omitempty"`
}

type CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum string

const (
	CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnumCard                   CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum = "card"
	CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnumElectronicFundTransfer CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum = "electronic_fund_transfer"
)

func (e CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum) ToPointer() *CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum {
	return &e
}

func (e *CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card":
		fallthrough
	case "electronic_fund_transfer":
		*e = CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum: %v", v)
	}
}

type CreateSinglePaymentIntent201ApplicationJSONPurposeEnum string

const (
	CreateSinglePaymentIntent201ApplicationJSONPurposeEnumCash   CreateSinglePaymentIntent201ApplicationJSONPurposeEnum = "cash"
	CreateSinglePaymentIntent201ApplicationJSONPurposeEnumInvest CreateSinglePaymentIntent201ApplicationJSONPurposeEnum = "invest"
)

func (e CreateSinglePaymentIntent201ApplicationJSONPurposeEnum) ToPointer() *CreateSinglePaymentIntent201ApplicationJSONPurposeEnum {
	return &e
}

func (e *CreateSinglePaymentIntent201ApplicationJSONPurposeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cash":
		fallthrough
	case "invest":
		*e = CreateSinglePaymentIntent201ApplicationJSONPurposeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntent201ApplicationJSONPurposeEnum: %v", v)
	}
}

type CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum string

const (
	CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnumStripe    CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum = "stripe"
	CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnumTruelayer CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum = "truelayer"
	CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnumNone      CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum = "none"
)

func (e CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum) ToPointer() *CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum {
	return &e
}

func (e *CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "stripe":
		fallthrough
	case "truelayer":
		fallthrough
	case "none":
		*e = CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum: %v", v)
	}
}

// CreateSinglePaymentIntent201ApplicationJSONServiceProviderParams - Parameters based on prerequisites of the selected provider
type CreateSinglePaymentIntent201ApplicationJSONServiceProviderParams struct {
	// Bank account ID of Investor (include if service_provider="truelayer")
	BankAccountID *string `json:"bank_account_id,omitempty"`
	// Client secret (include if service_provider="stripe")
	ClientSecret *string `json:"client_secret,omitempty"`
	// URL for Hosted Payment Page (include if service_provider="truelayer")
	HppURL *string `json:"hpp_url,omitempty"`
	// Payment intent ID (include if service_provider="truelayer" or service_provider="stripe")
	PaymentIntentID *string `json:"payment_intent_id,omitempty"`
	// Publishable key (include if service_provider="stripe")
	PublishableKey *string `json:"publishable_key,omitempty"`
}

type CreateSinglePaymentIntent201ApplicationJSONStatusEnum string

const (
	CreateSinglePaymentIntent201ApplicationJSONStatusEnumPendingConfirmation CreateSinglePaymentIntent201ApplicationJSONStatusEnum = "pending_confirmation"
	CreateSinglePaymentIntent201ApplicationJSONStatusEnumProcessing          CreateSinglePaymentIntent201ApplicationJSONStatusEnum = "processing"
	CreateSinglePaymentIntent201ApplicationJSONStatusEnumSucceeded           CreateSinglePaymentIntent201ApplicationJSONStatusEnum = "succeeded"
)

func (e CreateSinglePaymentIntent201ApplicationJSONStatusEnum) ToPointer() *CreateSinglePaymentIntent201ApplicationJSONStatusEnum {
	return &e
}

func (e *CreateSinglePaymentIntent201ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending_confirmation":
		fallthrough
	case "processing":
		fallthrough
	case "succeeded":
		*e = CreateSinglePaymentIntent201ApplicationJSONStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSinglePaymentIntent201ApplicationJSONStatusEnum: %v", v)
	}
}

// CreateSinglePaymentIntent201ApplicationJSON - Resource created
type CreateSinglePaymentIntent201ApplicationJSON struct {
	Amount   string `json:"amount"`
	Currency string `json:"currency"`
	// mandatory only if purpose:"invest" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)
	InvestmentInstructions []CreateSinglePaymentIntent201ApplicationJSONInvestmentInstructions `json:"investment_instructions,omitempty"`
	PaymentType            CreateSinglePaymentIntent201ApplicationJSONPaymentTypeEnum          `json:"payment_type"`
	PotID                  string                                                              `json:"pot_id"`
	Purpose                CreateSinglePaymentIntent201ApplicationJSONPurposeEnum              `json:"purpose"`
	ServiceProvider        CreateSinglePaymentIntent201ApplicationJSONServiceProviderEnum      `json:"service_provider"`
	// Parameters based on prerequisites of the selected provider
	ServiceProviderParams *CreateSinglePaymentIntent201ApplicationJSONServiceProviderParams `json:"service_provider_params,omitempty"`
	Status                CreateSinglePaymentIntent201ApplicationJSONStatusEnum             `json:"status"`
	TransactionID         string                                                            `json:"transaction_id"`
}

type CreateSinglePaymentIntentResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Resource created
	CreateSinglePaymentIntent201ApplicationJSONObject *CreateSinglePaymentIntent201ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	CreateSinglePaymentIntent400ApplicationJSONObject *CreateSinglePaymentIntent400ApplicationJSON
	// You do not have permissions to access this resource.
	CreateSinglePaymentIntent401ApplicationJSONObject *CreateSinglePaymentIntent401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	CreateSinglePaymentIntent403ApplicationJSONObject *CreateSinglePaymentIntent403ApplicationJSON
	// Duplicate request
	CreateSinglePaymentIntent409ApplicationJSONObject *CreateSinglePaymentIntent409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	CreateSinglePaymentIntent429ApplicationJSONObject *CreateSinglePaymentIntent429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	CreateSinglePaymentIntent500ApplicationJSONObject *CreateSinglePaymentIntent500ApplicationJSON
}
