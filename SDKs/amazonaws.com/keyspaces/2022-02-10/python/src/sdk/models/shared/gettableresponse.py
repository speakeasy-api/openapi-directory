"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import capacityspecificationsummary as shared_capacityspecificationsummary
from ..shared import clientsidetimestamps as shared_clientsidetimestamps
from ..shared import comment as shared_comment
from ..shared import encryptionspecification as shared_encryptionspecification
from ..shared import pointintimerecoverysummary as shared_pointintimerecoverysummary
from ..shared import schemadefinition as shared_schemadefinition
from ..shared import tablestatus_enum as shared_tablestatus_enum
from ..shared import timetolive as shared_timetolive
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTableResponse:
    r"""Success"""
    
    keyspace_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keyspaceName') }})  
    resource_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceArn') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tableName') }})  
    capacity_specification: Optional[shared_capacityspecificationsummary.CapacitySpecificationSummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacitySpecification'), 'exclude': lambda f: f is None }})  
    client_side_timestamps: Optional[shared_clientsidetimestamps.ClientSideTimestamps] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSideTimestamps'), 'exclude': lambda f: f is None }})  
    comment: Optional[shared_comment.Comment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})  
    creation_timestamp: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTimestamp'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    default_time_to_live: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultTimeToLive'), 'exclude': lambda f: f is None }})  
    encryption_specification: Optional[shared_encryptionspecification.EncryptionSpecification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionSpecification'), 'exclude': lambda f: f is None }})  
    point_in_time_recovery: Optional[shared_pointintimerecoverysummary.PointInTimeRecoverySummary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointInTimeRecovery'), 'exclude': lambda f: f is None }})  
    schema_definition: Optional[shared_schemadefinition.SchemaDefinition] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaDefinition'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_tablestatus_enum.TableStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    ttl: Optional[shared_timetolive.TimeToLive] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})  
    