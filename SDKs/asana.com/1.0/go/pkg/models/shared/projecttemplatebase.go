// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProjectTemplateBaseColorEnum - Color of the project template.
type ProjectTemplateBaseColorEnum string

const (
	ProjectTemplateBaseColorEnumDarkPink      ProjectTemplateBaseColorEnum = "dark-pink"
	ProjectTemplateBaseColorEnumDarkGreen     ProjectTemplateBaseColorEnum = "dark-green"
	ProjectTemplateBaseColorEnumDarkBlue      ProjectTemplateBaseColorEnum = "dark-blue"
	ProjectTemplateBaseColorEnumDarkRed       ProjectTemplateBaseColorEnum = "dark-red"
	ProjectTemplateBaseColorEnumDarkTeal      ProjectTemplateBaseColorEnum = "dark-teal"
	ProjectTemplateBaseColorEnumDarkBrown     ProjectTemplateBaseColorEnum = "dark-brown"
	ProjectTemplateBaseColorEnumDarkOrange    ProjectTemplateBaseColorEnum = "dark-orange"
	ProjectTemplateBaseColorEnumDarkPurple    ProjectTemplateBaseColorEnum = "dark-purple"
	ProjectTemplateBaseColorEnumDarkWarmGray  ProjectTemplateBaseColorEnum = "dark-warm-gray"
	ProjectTemplateBaseColorEnumLightPink     ProjectTemplateBaseColorEnum = "light-pink"
	ProjectTemplateBaseColorEnumLightGreen    ProjectTemplateBaseColorEnum = "light-green"
	ProjectTemplateBaseColorEnumLightBlue     ProjectTemplateBaseColorEnum = "light-blue"
	ProjectTemplateBaseColorEnumLightRed      ProjectTemplateBaseColorEnum = "light-red"
	ProjectTemplateBaseColorEnumLightTeal     ProjectTemplateBaseColorEnum = "light-teal"
	ProjectTemplateBaseColorEnumLightBrown    ProjectTemplateBaseColorEnum = "light-brown"
	ProjectTemplateBaseColorEnumLightOrange   ProjectTemplateBaseColorEnum = "light-orange"
	ProjectTemplateBaseColorEnumLightPurple   ProjectTemplateBaseColorEnum = "light-purple"
	ProjectTemplateBaseColorEnumLightWarmGray ProjectTemplateBaseColorEnum = "light-warm-gray"
)

func (e ProjectTemplateBaseColorEnum) ToPointer() *ProjectTemplateBaseColorEnum {
	return &e
}

func (e *ProjectTemplateBaseColorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "dark-pink":
		fallthrough
	case "dark-green":
		fallthrough
	case "dark-blue":
		fallthrough
	case "dark-red":
		fallthrough
	case "dark-teal":
		fallthrough
	case "dark-brown":
		fallthrough
	case "dark-orange":
		fallthrough
	case "dark-purple":
		fallthrough
	case "dark-warm-gray":
		fallthrough
	case "light-pink":
		fallthrough
	case "light-green":
		fallthrough
	case "light-blue":
		fallthrough
	case "light-red":
		fallthrough
	case "light-teal":
		fallthrough
	case "light-brown":
		fallthrough
	case "light-orange":
		fallthrough
	case "light-purple":
		fallthrough
	case "light-warm-gray":
		*e = ProjectTemplateBaseColorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectTemplateBaseColorEnum: %v", v)
	}
}

// ProjectTemplateBaseOwner - A *user* object represents an account in Asana that can be given access to various workspaces, projects, and tasks.
type ProjectTemplateBaseOwner struct {
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// *Read-only except when same user as requester*. The userâ€™s name.
	Name *string `json:"name,omitempty"`
	// The base type of this resource.
	ResourceType *string `json:"resource_type,omitempty"`
}

// ProjectTemplateBase - A *project template* is an object that allows new projects to be created with a predefined setup, which may include tasks, sections, Rules, etc. It simplifies the process of running a workflow that involves a similar set of work every time.
type ProjectTemplateBase struct {
	// Color of the project template.
	Color *ProjectTemplateBaseColorEnum `json:"color,omitempty"`
	// Free-form textual information associated with the project template
	Description *string `json:"description,omitempty"`
	// Globally unique identifier of the resource, as a string.
	Gid *string `json:"gid,omitempty"`
	// The description of the project template with formatting as HTML.
	HTMLDescription *string `json:"html_description,omitempty"`
	// Name of the project template.
	Name *string `json:"name,omitempty"`
	// The current owner of the project template, may be null.
	Owner *ProjectTemplateBaseOwner `json:"owner,omitempty"`
	// True if the project template is public to its team.
	Public *bool `json:"public,omitempty"`
	// Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.
	RequestedDates []DateVariableCompact `json:"requested_dates,omitempty"`
	// The base type of this resource.
	ResourceType *string      `json:"resource_type,omitempty"`
	Team         *TeamCompact `json:"team,omitempty"`
}
