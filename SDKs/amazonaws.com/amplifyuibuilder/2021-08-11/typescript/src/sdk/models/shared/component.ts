/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ComponentBindingPropertiesValue } from "./componentbindingpropertiesvalue";
import { ComponentChild } from "./componentchild";
import { ComponentDataConfiguration } from "./componentdataconfiguration";
import { ComponentEvent } from "./componentevent";
import { ComponentVariant } from "./componentvariant";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Contains the configuration settings for a user interface (UI) element for an Amplify app. A component is configured as a primary, stand-alone UI element. Use <code>ComponentChild</code> to configure an instance of a <code>Component</code>. A <code>ComponentChild</code> instance inherits the configuration of the main <code>Component</code>.
 */
export class Component extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "appId" })
  appId: string;

  @SpeakeasyMetadata({ elemType: ComponentBindingPropertiesValue })
  @Expose({ name: "bindingProperties" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentBindingPropertiesValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentBindingPropertiesValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  bindingProperties: Record<string, ComponentBindingPropertiesValue>;

  @SpeakeasyMetadata({ elemType: ComponentChild })
  @Expose({ name: "children" })
  @Type(() => ComponentChild)
  children?: ComponentChild[];

  @SpeakeasyMetadata({ elemType: ComponentDataConfiguration })
  @Expose({ name: "collectionProperties" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentDataConfiguration> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentDataConfiguration);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  collectionProperties?: Record<string, ComponentDataConfiguration>;

  @SpeakeasyMetadata()
  @Expose({ name: "componentType" })
  componentType: string;

  @SpeakeasyMetadata()
  @Expose({ name: "createdAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "environmentName" })
  environmentName: string;

  @SpeakeasyMetadata({ elemType: ComponentEvent })
  @Expose({ name: "events" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentEvent> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentEvent);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  events?: Record<string, ComponentEvent>;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  @SpeakeasyMetadata()
  @Expose({ name: "modifiedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  modifiedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata()
  @Expose({ name: "overrides" })
  overrides: Record<string, Record<string, string>>;

  /**
   * Describes the component's properties. You can't specify <code>tags</code> as a valid property for <code>properties</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties: any;

  @SpeakeasyMetadata()
  @Expose({ name: "schemaVersion" })
  schemaVersion?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sourceId" })
  sourceId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: ComponentVariant })
  @Expose({ name: "variants" })
  @Type(() => ComponentVariant)
  variants: ComponentVariant[];
}
