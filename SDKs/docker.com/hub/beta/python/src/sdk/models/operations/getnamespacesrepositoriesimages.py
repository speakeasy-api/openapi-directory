"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import errorresponse as shared_errorresponse
from ..shared import getnamespacerepositoryimagesresponse as shared_getnamespacerepositoryimagesresponse
from enum import Enum
from typing import Optional

class GetNamespacesRepositoriesImagesOrderingEnum(str, Enum):
    r"""Orders the results by this property.
    
    Prefixing with `-` sorts by descending order.
    """
    LAST_ACTIVITY = 'last_activity'
    MINUS_LAST_ACTIVITY = '-last_activity'
    DIGEST = 'digest'
    MINUS_DIGEST = '-digest'

class GetNamespacesRepositoriesImagesStatusEnum(str, Enum):
    r"""Filters to only show images of this status."""
    ACTIVE = 'active'
    INACTIVE = 'inactive'


@dataclasses.dataclass
class GetNamespacesRepositoriesImagesRequest:
    
    namespace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'namespace', 'style': 'simple', 'explode': False }})
    r"""Namespace of the repository."""  
    repository: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repository', 'style': 'simple', 'explode': False }})
    r"""Name of the repository."""  
    active_from: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'active_from', 'style': 'form', 'explode': True }})
    r"""Sets the time from which an image must have been pushed or pulled to
    be counted as active.
    
    Defaults to 1 month before the current time.
    """  
    currently_tagged: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'currently_tagged', 'style': 'form', 'explode': True }})
    r"""Filters to only show images with:
    - `true`: at least 1 current tag.
    - `false`: no current tags.
    """  
    ordering: Optional[GetNamespacesRepositoriesImagesOrderingEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ordering', 'style': 'form', 'explode': True }})
    r"""Orders the results by this property.
    
    Prefixing with `-` sorts by descending order.
    """  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number to get. Defaults to 1."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""Number of images to get per page. Defaults to 10. Max of 100."""  
    status: Optional[GetNamespacesRepositoriesImagesStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Filters to only show images of this status."""  
    

@dataclasses.dataclass
class GetNamespacesRepositoriesImagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error_response: Optional[shared_errorresponse.ErrorResponse] = dataclasses.field(default=None)
    r"""Unauthorized - user does not have read access to the namespace."""  
    get_namespace_repository_images_response: Optional[shared_getnamespacerepositoryimagesresponse.GetNamespaceRepositoryImagesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    