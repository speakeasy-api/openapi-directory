// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RegistrationInput - The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.
type RegistrationInput struct {
	// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
	ContactSettings *ContactSettings `json:"contactSettings,omitempty"`
	// Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
	DNSSettings *DNSSettingsInput `json:"dnsSettings,omitempty"`
	// Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
	DomainName *string `json:"domainName,omitempty"`
	// Set of labels associated with the `Registration`.
	Labels map[string]string `json:"labels,omitempty"`
	// Defines renewal, billing, and transfer settings for a `Registration`.
	ManagementSettings *ManagementSettingsInput `json:"managementSettings,omitempty"`
	// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
	PendingContactSettings *ContactSettings `json:"pendingContactSettings,omitempty"`
}

type RegistrationIssuesEnum string

const (
	RegistrationIssuesEnumIssueUnspecified RegistrationIssuesEnum = "ISSUE_UNSPECIFIED"
	RegistrationIssuesEnumContactSupport   RegistrationIssuesEnum = "CONTACT_SUPPORT"
	RegistrationIssuesEnumUnverifiedEmail  RegistrationIssuesEnum = "UNVERIFIED_EMAIL"
)

func (e *RegistrationIssuesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ISSUE_UNSPECIFIED":
		fallthrough
	case "CONTACT_SUPPORT":
		fallthrough
	case "UNVERIFIED_EMAIL":
		*e = RegistrationIssuesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistrationIssuesEnum: %s", s)
	}
}

// RegistrationRegisterFailureReasonEnum - Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
type RegistrationRegisterFailureReasonEnum string

const (
	RegistrationRegisterFailureReasonEnumRegisterFailureReasonUnspecified RegistrationRegisterFailureReasonEnum = "REGISTER_FAILURE_REASON_UNSPECIFIED"
	RegistrationRegisterFailureReasonEnumRegisterFailureReasonUnknown     RegistrationRegisterFailureReasonEnum = "REGISTER_FAILURE_REASON_UNKNOWN"
	RegistrationRegisterFailureReasonEnumDomainNotAvailable               RegistrationRegisterFailureReasonEnum = "DOMAIN_NOT_AVAILABLE"
	RegistrationRegisterFailureReasonEnumInvalidContacts                  RegistrationRegisterFailureReasonEnum = "INVALID_CONTACTS"
)

func (e *RegistrationRegisterFailureReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REGISTER_FAILURE_REASON_UNSPECIFIED":
		fallthrough
	case "REGISTER_FAILURE_REASON_UNKNOWN":
		fallthrough
	case "DOMAIN_NOT_AVAILABLE":
		fallthrough
	case "INVALID_CONTACTS":
		*e = RegistrationRegisterFailureReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistrationRegisterFailureReasonEnum: %s", s)
	}
}

// RegistrationStateEnum - Output only. The state of the `Registration`
type RegistrationStateEnum string

const (
	RegistrationStateEnumStateUnspecified    RegistrationStateEnum = "STATE_UNSPECIFIED"
	RegistrationStateEnumRegistrationPending RegistrationStateEnum = "REGISTRATION_PENDING"
	RegistrationStateEnumRegistrationFailed  RegistrationStateEnum = "REGISTRATION_FAILED"
	RegistrationStateEnumTransferPending     RegistrationStateEnum = "TRANSFER_PENDING"
	RegistrationStateEnumTransferFailed      RegistrationStateEnum = "TRANSFER_FAILED"
	RegistrationStateEnumImportPending       RegistrationStateEnum = "IMPORT_PENDING"
	RegistrationStateEnumActive              RegistrationStateEnum = "ACTIVE"
	RegistrationStateEnumSuspended           RegistrationStateEnum = "SUSPENDED"
	RegistrationStateEnumExported            RegistrationStateEnum = "EXPORTED"
)

func (e *RegistrationStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "REGISTRATION_PENDING":
		fallthrough
	case "REGISTRATION_FAILED":
		fallthrough
	case "TRANSFER_PENDING":
		fallthrough
	case "TRANSFER_FAILED":
		fallthrough
	case "IMPORT_PENDING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "SUSPENDED":
		fallthrough
	case "EXPORTED":
		*e = RegistrationStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistrationStateEnum: %s", s)
	}
}

type RegistrationSupportedPrivacyEnum string

const (
	RegistrationSupportedPrivacyEnumContactPrivacyUnspecified RegistrationSupportedPrivacyEnum = "CONTACT_PRIVACY_UNSPECIFIED"
	RegistrationSupportedPrivacyEnumPublicContactData         RegistrationSupportedPrivacyEnum = "PUBLIC_CONTACT_DATA"
	RegistrationSupportedPrivacyEnumPrivateContactData        RegistrationSupportedPrivacyEnum = "PRIVATE_CONTACT_DATA"
	RegistrationSupportedPrivacyEnumRedactedContactData       RegistrationSupportedPrivacyEnum = "REDACTED_CONTACT_DATA"
)

func (e *RegistrationSupportedPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CONTACT_PRIVACY_UNSPECIFIED":
		fallthrough
	case "PUBLIC_CONTACT_DATA":
		fallthrough
	case "PRIVATE_CONTACT_DATA":
		fallthrough
	case "REDACTED_CONTACT_DATA":
		*e = RegistrationSupportedPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistrationSupportedPrivacyEnum: %s", s)
	}
}

// RegistrationTransferFailureReasonEnum - Output only. The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.
type RegistrationTransferFailureReasonEnum string

const (
	RegistrationTransferFailureReasonEnumTransferFailureReasonUnspecified RegistrationTransferFailureReasonEnum = "TRANSFER_FAILURE_REASON_UNSPECIFIED"
	RegistrationTransferFailureReasonEnumTransferFailureReasonUnknown     RegistrationTransferFailureReasonEnum = "TRANSFER_FAILURE_REASON_UNKNOWN"
	RegistrationTransferFailureReasonEnumEmailConfirmationFailure         RegistrationTransferFailureReasonEnum = "EMAIL_CONFIRMATION_FAILURE"
	RegistrationTransferFailureReasonEnumDomainNotRegistered              RegistrationTransferFailureReasonEnum = "DOMAIN_NOT_REGISTERED"
	RegistrationTransferFailureReasonEnumDomainHasTransferLock            RegistrationTransferFailureReasonEnum = "DOMAIN_HAS_TRANSFER_LOCK"
	RegistrationTransferFailureReasonEnumInvalidAuthorizationCode         RegistrationTransferFailureReasonEnum = "INVALID_AUTHORIZATION_CODE"
	RegistrationTransferFailureReasonEnumTransferCancelled                RegistrationTransferFailureReasonEnum = "TRANSFER_CANCELLED"
	RegistrationTransferFailureReasonEnumTransferRejected                 RegistrationTransferFailureReasonEnum = "TRANSFER_REJECTED"
	RegistrationTransferFailureReasonEnumInvalidRegistrantEmailAddress    RegistrationTransferFailureReasonEnum = "INVALID_REGISTRANT_EMAIL_ADDRESS"
	RegistrationTransferFailureReasonEnumDomainNotEligibleForTransfer     RegistrationTransferFailureReasonEnum = "DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER"
	RegistrationTransferFailureReasonEnumTransferAlreadyPending           RegistrationTransferFailureReasonEnum = "TRANSFER_ALREADY_PENDING"
)

func (e *RegistrationTransferFailureReasonEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TRANSFER_FAILURE_REASON_UNSPECIFIED":
		fallthrough
	case "TRANSFER_FAILURE_REASON_UNKNOWN":
		fallthrough
	case "EMAIL_CONFIRMATION_FAILURE":
		fallthrough
	case "DOMAIN_NOT_REGISTERED":
		fallthrough
	case "DOMAIN_HAS_TRANSFER_LOCK":
		fallthrough
	case "INVALID_AUTHORIZATION_CODE":
		fallthrough
	case "TRANSFER_CANCELLED":
		fallthrough
	case "TRANSFER_REJECTED":
		fallthrough
	case "INVALID_REGISTRANT_EMAIL_ADDRESS":
		fallthrough
	case "DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER":
		fallthrough
	case "TRANSFER_ALREADY_PENDING":
		*e = RegistrationTransferFailureReasonEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RegistrationTransferFailureReasonEnum: %s", s)
	}
}

// Registration - The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar. First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.
type Registration struct {
	// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
	ContactSettings *ContactSettings `json:"contactSettings,omitempty"`
	// Output only. The creation timestamp of the `Registration` resource.
	CreateTime *string `json:"createTime,omitempty"`
	// Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.
	DNSSettings *DNSSettings `json:"dnsSettings,omitempty"`
	// Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
	DomainName *string `json:"domainName,omitempty"`
	// Output only. The expiration timestamp of the `Registration`.
	ExpireTime *string `json:"expireTime,omitempty"`
	// Output only. The set of issues with the `Registration` that require attention.
	Issues []RegistrationIssuesEnum `json:"issues,omitempty"`
	// Set of labels associated with the `Registration`.
	Labels map[string]string `json:"labels,omitempty"`
	// Defines renewal, billing, and transfer settings for a `Registration`.
	ManagementSettings *ManagementSettings `json:"managementSettings,omitempty"`
	// Output only. Name of the `Registration` resource, in the format `projects/*/locations/*/registrations/`.
	Name *string `json:"name,omitempty"`
	// Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.
	PendingContactSettings *ContactSettings `json:"pendingContactSettings,omitempty"`
	// Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.
	RegisterFailureReason *RegistrationRegisterFailureReasonEnum `json:"registerFailureReason,omitempty"`
	// Output only. The state of the `Registration`
	State *RegistrationStateEnum `json:"state,omitempty"`
	// Output only. Set of options for the `contact_settings.privacy` field that this `Registration` supports.
	SupportedPrivacy []RegistrationSupportedPrivacyEnum `json:"supportedPrivacy,omitempty"`
	// Output only. The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.
	TransferFailureReason *RegistrationTransferFailureReasonEnum `json:"transferFailureReason,omitempty"`
}
