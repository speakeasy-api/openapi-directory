<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Subscription 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * This method can be used to determine if hooks are supported.
     * 
     * This method can be used to determine if hooks are supported.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AreHooksSupportedResponse
     */
	public function areHooksSupported(
    ): \OpenAPI\OpenAPI\Models\Operations\AreHooksSupportedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscription/supports');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AreHooksSupportedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->areHooksSupportedDefaultApplicationVndXtrfV1PlusJsonBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all subscriptions
     * 
     * Returns all subscriptions. Subscriptions are automatically removed if they do not work (ie. if 404 status is returned). To improve notification reliability one can use this method to check if subscription is still active and re-subscribe if necessary.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAll4Response
     */
	public function getAll4(
    ): \OpenAPI\OpenAPI\Models\Operations\GetAll4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscription');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAll4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activeSubscriptionDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ActiveSubscriptionDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subscribe to event
     * 
     * Subscribe to event. Returns subscription Id.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SubscriptionDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribeResponse
     */
	public function subscribe(
        \OpenAPI\OpenAPI\Models\Shared\SubscriptionDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $response->subscribe201ApplicationVndXtrfV1PlusJsonString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $response->subscribe409ApplicationVndXtrfV1PlusJsonString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Unsubscribe from event
     * 
     * Unsubscribe from job status changed event
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnsubscribeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnsubscribeResponse
     */
	public function unsubscribe(
        \OpenAPI\OpenAPI\Models\Operations\UnsubscribeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnsubscribeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/subscription/{subscriptionId}', \OpenAPI\OpenAPI\Models\Operations\UnsubscribeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnsubscribeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}