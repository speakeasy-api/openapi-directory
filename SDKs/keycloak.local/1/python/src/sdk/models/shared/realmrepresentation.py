"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authenticationflowrepresentation as shared_authenticationflowrepresentation
from ..shared import authenticatorconfigrepresentation as shared_authenticatorconfigrepresentation
from ..shared import clientrepresentation as shared_clientrepresentation
from ..shared import clientscoperepresentation as shared_clientscoperepresentation
from ..shared import grouprepresentation as shared_grouprepresentation
from ..shared import identityprovidermapperrepresentation as shared_identityprovidermapperrepresentation
from ..shared import identityproviderrepresentation as shared_identityproviderrepresentation
from ..shared import multivaluedhashmap as shared_multivaluedhashmap
from ..shared import protocolmapperrepresentation as shared_protocolmapperrepresentation
from ..shared import requiredactionproviderrepresentation as shared_requiredactionproviderrepresentation
from ..shared import rolesrepresentation as shared_rolesrepresentation
from ..shared import scopemappingrepresentation as shared_scopemappingrepresentation
from ..shared import userfederationmapperrepresentation as shared_userfederationmapperrepresentation
from ..shared import userfederationproviderrepresentation as shared_userfederationproviderrepresentation
from ..shared import userrepresentation as shared_userrepresentation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RealmRepresentation:
    r"""JSON representation of the realm"""
    
    access_code_lifespan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessCodeLifespan'), 'exclude': lambda f: f is None }})  
    access_code_lifespan_login: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessCodeLifespanLogin'), 'exclude': lambda f: f is None }})  
    access_code_lifespan_user_action: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessCodeLifespanUserAction'), 'exclude': lambda f: f is None }})  
    access_token_lifespan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessTokenLifespan'), 'exclude': lambda f: f is None }})  
    access_token_lifespan_for_implicit_flow: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessTokenLifespanForImplicitFlow'), 'exclude': lambda f: f is None }})  
    account_theme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountTheme'), 'exclude': lambda f: f is None }})  
    action_token_generated_by_admin_lifespan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionTokenGeneratedByAdminLifespan'), 'exclude': lambda f: f is None }})  
    action_token_generated_by_user_lifespan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionTokenGeneratedByUserLifespan'), 'exclude': lambda f: f is None }})  
    admin_events_details_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminEventsDetailsEnabled'), 'exclude': lambda f: f is None }})  
    admin_events_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminEventsEnabled'), 'exclude': lambda f: f is None }})  
    admin_theme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminTheme'), 'exclude': lambda f: f is None }})  
    attributes: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes'), 'exclude': lambda f: f is None }})  
    authentication_flows: Optional[list[shared_authenticationflowrepresentation.AuthenticationFlowRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticationFlows'), 'exclude': lambda f: f is None }})  
    authenticator_config: Optional[list[shared_authenticatorconfigrepresentation.AuthenticatorConfigRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authenticatorConfig'), 'exclude': lambda f: f is None }})  
    browser_flow: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserFlow'), 'exclude': lambda f: f is None }})  
    browser_security_headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('browserSecurityHeaders'), 'exclude': lambda f: f is None }})  
    brute_force_protected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bruteForceProtected'), 'exclude': lambda f: f is None }})  
    client_authentication_flow: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientAuthenticationFlow'), 'exclude': lambda f: f is None }})  
    clients: Optional[list[shared_clientrepresentation.ClientRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clients'), 'exclude': lambda f: f is None }})  
    client_scope_mappings: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientScopeMappings'), 'exclude': lambda f: f is None }})  
    client_scopes: Optional[list[shared_clientscoperepresentation.ClientScopeRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientScopes'), 'exclude': lambda f: f is None }})  
    client_session_idle_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSessionIdleTimeout'), 'exclude': lambda f: f is None }})  
    client_session_max_lifespan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSessionMaxLifespan'), 'exclude': lambda f: f is None }})  
    components: Optional[shared_multivaluedhashmap.MultivaluedHashMap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})  
    default_default_client_scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultDefaultClientScopes'), 'exclude': lambda f: f is None }})  
    default_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultGroups'), 'exclude': lambda f: f is None }})  
    default_locale: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultLocale'), 'exclude': lambda f: f is None }})  
    default_optional_client_scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultOptionalClientScopes'), 'exclude': lambda f: f is None }})  
    default_roles: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultRoles'), 'exclude': lambda f: f is None }})  
    default_signature_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('defaultSignatureAlgorithm'), 'exclude': lambda f: f is None }})  
    direct_grant_flow: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directGrantFlow'), 'exclude': lambda f: f is None }})  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})  
    display_name_html: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayNameHtml'), 'exclude': lambda f: f is None }})  
    docker_authentication_flow: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dockerAuthenticationFlow'), 'exclude': lambda f: f is None }})  
    duplicate_emails_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duplicateEmailsAllowed'), 'exclude': lambda f: f is None }})  
    edit_username_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('editUsernameAllowed'), 'exclude': lambda f: f is None }})  
    email_theme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailTheme'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    enabled_event_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabledEventTypes'), 'exclude': lambda f: f is None }})  
    events_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventsEnabled'), 'exclude': lambda f: f is None }})  
    events_expiration: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventsExpiration'), 'exclude': lambda f: f is None }})  
    events_listeners: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventsListeners'), 'exclude': lambda f: f is None }})  
    failure_factor: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureFactor'), 'exclude': lambda f: f is None }})  
    federated_users: Optional[list[shared_userrepresentation.UserRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('federatedUsers'), 'exclude': lambda f: f is None }})  
    groups: Optional[list[shared_grouprepresentation.GroupRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    identity_provider_mappers: Optional[list[shared_identityprovidermapperrepresentation.IdentityProviderMapperRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviderMappers'), 'exclude': lambda f: f is None }})  
    identity_providers: Optional[list[shared_identityproviderrepresentation.IdentityProviderRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identityProviders'), 'exclude': lambda f: f is None }})  
    internationalization_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('internationalizationEnabled'), 'exclude': lambda f: f is None }})  
    keycloak_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keycloakVersion'), 'exclude': lambda f: f is None }})  
    login_theme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loginTheme'), 'exclude': lambda f: f is None }})  
    login_with_email_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loginWithEmailAllowed'), 'exclude': lambda f: f is None }})  
    max_delta_time_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxDeltaTimeSeconds'), 'exclude': lambda f: f is None }})  
    max_failure_wait_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxFailureWaitSeconds'), 'exclude': lambda f: f is None }})  
    minimum_quick_login_wait_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumQuickLoginWaitSeconds'), 'exclude': lambda f: f is None }})  
    not_before: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notBefore'), 'exclude': lambda f: f is None }})  
    offline_session_idle_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offlineSessionIdleTimeout'), 'exclude': lambda f: f is None }})  
    offline_session_max_lifespan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offlineSessionMaxLifespan'), 'exclude': lambda f: f is None }})  
    offline_session_max_lifespan_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offlineSessionMaxLifespanEnabled'), 'exclude': lambda f: f is None }})  
    otp_policy_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otpPolicyAlgorithm'), 'exclude': lambda f: f is None }})  
    otp_policy_digits: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otpPolicyDigits'), 'exclude': lambda f: f is None }})  
    otp_policy_initial_counter: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otpPolicyInitialCounter'), 'exclude': lambda f: f is None }})  
    otp_policy_look_ahead_window: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otpPolicyLookAheadWindow'), 'exclude': lambda f: f is None }})  
    otp_policy_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otpPolicyPeriod'), 'exclude': lambda f: f is None }})  
    otp_policy_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otpPolicyType'), 'exclude': lambda f: f is None }})  
    otp_supported_applications: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otpSupportedApplications'), 'exclude': lambda f: f is None }})  
    password_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordPolicy'), 'exclude': lambda f: f is None }})  
    permanent_lockout: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permanentLockout'), 'exclude': lambda f: f is None }})  
    protocol_mappers: Optional[list[shared_protocolmapperrepresentation.ProtocolMapperRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocolMappers'), 'exclude': lambda f: f is None }})  
    quick_login_check_milli_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quickLoginCheckMilliSeconds'), 'exclude': lambda f: f is None }})  
    realm: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('realm'), 'exclude': lambda f: f is None }})  
    refresh_token_max_reuse: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refreshTokenMaxReuse'), 'exclude': lambda f: f is None }})  
    registration_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationAllowed'), 'exclude': lambda f: f is None }})  
    registration_email_as_username: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationEmailAsUsername'), 'exclude': lambda f: f is None }})  
    registration_flow: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationFlow'), 'exclude': lambda f: f is None }})  
    remember_me: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rememberMe'), 'exclude': lambda f: f is None }})  
    required_actions: Optional[list[shared_requiredactionproviderrepresentation.RequiredActionProviderRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requiredActions'), 'exclude': lambda f: f is None }})  
    reset_credentials_flow: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resetCredentialsFlow'), 'exclude': lambda f: f is None }})  
    reset_password_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resetPasswordAllowed'), 'exclude': lambda f: f is None }})  
    revoke_refresh_token: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revokeRefreshToken'), 'exclude': lambda f: f is None }})  
    roles: Optional[shared_rolesrepresentation.RolesRepresentation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles'), 'exclude': lambda f: f is None }})  
    scope_mappings: Optional[list[shared_scopemappingrepresentation.ScopeMappingRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopeMappings'), 'exclude': lambda f: f is None }})  
    smtp_server: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtpServer'), 'exclude': lambda f: f is None }})  
    ssl_required: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslRequired'), 'exclude': lambda f: f is None }})  
    sso_session_idle_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssoSessionIdleTimeout'), 'exclude': lambda f: f is None }})  
    sso_session_idle_timeout_remember_me: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssoSessionIdleTimeoutRememberMe'), 'exclude': lambda f: f is None }})  
    sso_session_max_lifespan: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssoSessionMaxLifespan'), 'exclude': lambda f: f is None }})  
    sso_session_max_lifespan_remember_me: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssoSessionMaxLifespanRememberMe'), 'exclude': lambda f: f is None }})  
    supported_locales: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedLocales'), 'exclude': lambda f: f is None }})  
    user_federation_mappers: Optional[list[shared_userfederationmapperrepresentation.UserFederationMapperRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userFederationMappers'), 'exclude': lambda f: f is None }})  
    user_federation_providers: Optional[list[shared_userfederationproviderrepresentation.UserFederationProviderRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userFederationProviders'), 'exclude': lambda f: f is None }})  
    user_managed_access_allowed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userManagedAccessAllowed'), 'exclude': lambda f: f is None }})  
    users: Optional[list[shared_userrepresentation.UserRepresentation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})  
    verify_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verifyEmail'), 'exclude': lambda f: f is None }})  
    wait_increment_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('waitIncrementSeconds'), 'exclude': lambda f: f is None }})  
    web_authn_policy_acceptable_aaguids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyAcceptableAaguids'), 'exclude': lambda f: f is None }})  
    web_authn_policy_attestation_conveyance_preference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyAttestationConveyancePreference'), 'exclude': lambda f: f is None }})  
    web_authn_policy_authenticator_attachment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyAuthenticatorAttachment'), 'exclude': lambda f: f is None }})  
    web_authn_policy_avoid_same_authenticator_register: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyAvoidSameAuthenticatorRegister'), 'exclude': lambda f: f is None }})  
    web_authn_policy_create_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyCreateTimeout'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_acceptable_aaguids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessAcceptableAaguids'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_attestation_conveyance_preference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessAttestationConveyancePreference'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_authenticator_attachment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessAuthenticatorAttachment'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_avoid_same_authenticator_register: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_create_timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessCreateTimeout'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_require_resident_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessRequireResidentKey'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_rp_entity_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessRpEntityName'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_rp_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessRpId'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_signature_algorithms: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessSignatureAlgorithms'), 'exclude': lambda f: f is None }})  
    web_authn_policy_passwordless_user_verification_requirement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyPasswordlessUserVerificationRequirement'), 'exclude': lambda f: f is None }})  
    web_authn_policy_require_resident_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyRequireResidentKey'), 'exclude': lambda f: f is None }})  
    web_authn_policy_rp_entity_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyRpEntityName'), 'exclude': lambda f: f is None }})  
    web_authn_policy_rp_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyRpId'), 'exclude': lambda f: f is None }})  
    web_authn_policy_signature_algorithms: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicySignatureAlgorithms'), 'exclude': lambda f: f is None }})  
    web_authn_policy_user_verification_requirement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAuthnPolicyUserVerificationRequirement'), 'exclude': lambda f: f is None }})  
    