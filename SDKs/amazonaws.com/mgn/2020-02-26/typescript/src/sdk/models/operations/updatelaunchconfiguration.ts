/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Update Launch configuration boot mode request.
 */
export enum UpdateLaunchConfigurationRequestBodyBootModeEnum {
  LegacyBios = "LEGACY_BIOS",
  Uefi = "UEFI",
}

/**
 * Update Launch configuration launch disposition request.
 */
export enum UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum {
  Stopped = "STOPPED",
  Started = "STARTED",
}

/**
 * Configure Licensing.
 */
export class UpdateLaunchConfigurationRequestBodyLicensing extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "osByol" })
  osByol?: boolean;
}

/**
 * Post Launch Actions to executed on the Test or Cutover instance.
 */
export class UpdateLaunchConfigurationRequestBodyPostLaunchActions extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "cloudWatchLogGroupName" })
  cloudWatchLogGroupName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deployment" })
  deployment?: shared.PostLaunchActionsDeploymentTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "s3LogBucket" })
  s3LogBucket?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "s3OutputKeyPrefix" })
  s3OutputKeyPrefix?: string;

  @SpeakeasyMetadata({ elemType: shared.SsmDocument })
  @Expose({ name: "ssmDocuments" })
  @Type(() => shared.SsmDocument)
  ssmDocuments?: shared.SsmDocument[];
}

/**
 * Update Launch configuration Target instance right sizing request.
 */
export enum UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum {
  None = "NONE",
  Basic = "BASIC",
}

export class UpdateLaunchConfigurationRequestBody extends SpeakeasyBase {
  /**
   * Update Launch configuration boot mode request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bootMode" })
  bootMode?: UpdateLaunchConfigurationRequestBodyBootModeEnum;

  /**
   * Update Launch configuration copy Private IP request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "copyPrivateIp" })
  copyPrivateIp?: boolean;

  /**
   * Update Launch configuration copy Tags request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "copyTags" })
  copyTags?: boolean;

  /**
   * Enable map auto tagging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableMapAutoTagging" })
  enableMapAutoTagging?: boolean;

  /**
   * Update Launch configuration launch disposition request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "launchDisposition" })
  launchDisposition?: UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum;

  /**
   * Configure Licensing.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "licensing" })
  @Type(() => UpdateLaunchConfigurationRequestBodyLicensing)
  licensing?: UpdateLaunchConfigurationRequestBodyLicensing;

  /**
   * Launch configuration map auto tagging MPE ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mapAutoTaggingMpeID" })
  mapAutoTaggingMpeID?: string;

  /**
   * Update Launch configuration name request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Post Launch Actions to executed on the Test or Cutover instance.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "postLaunchActions" })
  @Type(() => UpdateLaunchConfigurationRequestBodyPostLaunchActions)
  postLaunchActions?: UpdateLaunchConfigurationRequestBodyPostLaunchActions;

  /**
   * Update Launch configuration by Source Server ID request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceServerID" })
  sourceServerID: string;

  /**
   * Update Launch configuration Target instance right sizing request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetInstanceTypeRightSizingMethod" })
  targetInstanceTypeRightSizingMethod?: UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum;
}

export class UpdateLaunchConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateLaunchConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateLaunchConfigurationResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  launchConfiguration?: shared.LaunchConfiguration;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * UninitializedAccountException
   */
  @SpeakeasyMetadata()
  uninitializedAccountException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
