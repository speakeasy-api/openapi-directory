// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetPlanUsageSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type GetPlanUsageRequest struct {
	AccountID string `pathParam:"style=simple,explode=false,name=accountId"`
}

type GetPlanUsage200ApplicationXMLPlanBase struct {
	// Number of hosts under the base plan.
	Hosts *int64
	// Type of the base plan.
	Type *string
	// Total number of usage of this plan.
	Usage *int64
}

type GetPlanUsage200ApplicationXMLPlanLargeMeeting struct {
	// Number of hosts in this plan.
	Hosts *int64
	// Large meeting Plan Type
	Type *string
	// Number of usages for this account plan.
	Usage *int64
}

// GetPlanUsage200ApplicationXMLPlanRecording - Recording Plan
type GetPlanUsage200ApplicationXMLPlanRecording struct {
	// Recording free storage.
	FreeStorage *string
	// Amount of free storage used.
	FreeStorageUsage *string
	// Recording plan storage.
	PlanStorage       *string
	PlanStorageExceed *string
	// Recording storage usage.
	PlanStorageUsage *string
	// Recording plan type.
	Type *string
}

// GetPlanUsage200ApplicationXMLPlanUnited - [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
type GetPlanUsage200ApplicationXMLPlanUnited struct {
	// Number of licenses purchased.
	Hosts *int64
	// Name of the plan.
	Name *string
	// Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans).
	Type *string
	// Number of licenses that are already being used.
	Usage *int64
}

type GetPlanUsage200ApplicationXMLPlanWebinar struct {
	// The number of hosts in this plan.
	Hosts *int64
	// The type of Webinar plan for the account.
	Type *string
	// The total number of plan usage.
	Usage *int64
}

type GetPlanUsage200ApplicationXMLPlanZoomRooms struct {
	// The number of hosts in this plan.
	Hosts *int64
	// THe plan type for Zoom room plan.
	Type *string
	// The total number of usage for this plan.
	Usage *int64
}

// GetPlanUsage200ApplicationXML - **HTTP Status Code:** `200` <br>
// Plan Usage returned.<br>
type GetPlanUsage200ApplicationXML struct {
	// The base plan subscribed for the sub account.
	PlanBase []GetPlanUsage200ApplicationXMLPlanBase
	// Large Meeting Plan
	PlanLargeMeeting []GetPlanUsage200ApplicationXMLPlanLargeMeeting
	// Recording Plan
	PlanRecording *GetPlanUsage200ApplicationXMLPlanRecording
	// [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
	PlanUnited *GetPlanUsage200ApplicationXMLPlanUnited
	// Webinar Plan
	PlanWebinar []GetPlanUsage200ApplicationXMLPlanWebinar
	// Zoom Rooms Plan
	PlanZoomRooms []GetPlanUsage200ApplicationXMLPlanZoomRooms
}

type GetPlanUsage200ApplicationJSONPlanBase struct {
	// Number of hosts under the base plan.
	Hosts *int64 `json:"hosts,omitempty"`
	// Type of the base plan.
	Type *string `json:"type,omitempty"`
	// Total number of usage of this plan.
	Usage *int64 `json:"usage,omitempty"`
}

type GetPlanUsage200ApplicationJSONPlanLargeMeeting struct {
	// Number of hosts in this plan.
	Hosts *int64 `json:"hosts,omitempty"`
	// Large meeting Plan Type
	Type *string `json:"type,omitempty"`
	// Number of usages for this account plan.
	Usage *int64 `json:"usage,omitempty"`
}

// GetPlanUsage200ApplicationJSONPlanRecording - Recording Plan
type GetPlanUsage200ApplicationJSONPlanRecording struct {
	// Recording free storage.
	FreeStorage *string `json:"free_storage,omitempty"`
	// Amount of free storage used.
	FreeStorageUsage *string `json:"free_storage_usage,omitempty"`
	// Recording plan storage.
	PlanStorage       *string `json:"plan_storage,omitempty"`
	PlanStorageExceed *string `json:"plan_storage_exceed,omitempty"`
	// Recording storage usage.
	PlanStorageUsage *string `json:"plan_storage_usage,omitempty"`
	// Recording plan type.
	Type *string `json:"type,omitempty"`
}

// GetPlanUsage200ApplicationJSONPlanUnited - [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
type GetPlanUsage200ApplicationJSONPlanUnited struct {
	// Number of licenses purchased.
	Hosts *int64 `json:"hosts,omitempty"`
	// Name of the plan.
	Name *string `json:"name,omitempty"`
	// Plan [type](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-united-plans).
	Type *string `json:"type,omitempty"`
	// Number of licenses that are already being used.
	Usage *int64 `json:"usage,omitempty"`
}

type GetPlanUsage200ApplicationJSONPlanWebinar struct {
	// The number of hosts in this plan.
	Hosts *int64 `json:"hosts,omitempty"`
	// The type of Webinar plan for the account.
	Type *string `json:"type,omitempty"`
	// The total number of plan usage.
	Usage *int64 `json:"usage,omitempty"`
}

type GetPlanUsage200ApplicationJSONPlanZoomRooms struct {
	// The number of hosts in this plan.
	Hosts *int64 `json:"hosts,omitempty"`
	// THe plan type for Zoom room plan.
	Type *string `json:"type,omitempty"`
	// The total number of usage for this plan.
	Usage *int64 `json:"usage,omitempty"`
}

// GetPlanUsage200ApplicationJSON - **HTTP Status Code:** `200` <br>
// Plan Usage returned.<br>
type GetPlanUsage200ApplicationJSON struct {
	// The base plan subscribed for the sub account.
	PlanBase []GetPlanUsage200ApplicationJSONPlanBase `json:"plan_base,omitempty"`
	// Large Meeting Plan
	PlanLargeMeeting []GetPlanUsage200ApplicationJSONPlanLargeMeeting `json:"plan_large_meeting,omitempty"`
	// Recording Plan
	PlanRecording *GetPlanUsage200ApplicationJSONPlanRecording `json:"plan_recording,omitempty"`
	// [Zoom United](https://zoom.us/pricing/zoom-bundles) plan.
	PlanUnited *GetPlanUsage200ApplicationJSONPlanUnited `json:"plan_united,omitempty"`
	// Webinar Plan
	PlanWebinar []GetPlanUsage200ApplicationJSONPlanWebinar `json:"plan_webinar,omitempty"`
	// Zoom Rooms Plan
	PlanZoomRooms []GetPlanUsage200ApplicationJSONPlanZoomRooms `json:"plan_zoom_rooms,omitempty"`
}

type GetPlanUsageResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` <br>
	// Plan Usage returned.<br>
	GetPlanUsage200ApplicationJSONObject *GetPlanUsage200ApplicationJSON
}
