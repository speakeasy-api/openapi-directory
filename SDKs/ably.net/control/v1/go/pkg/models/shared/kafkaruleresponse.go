// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type KafkaRuleResponseRuleTypeEnum string

const (
	KafkaRuleResponseRuleTypeEnumKafka KafkaRuleResponseRuleTypeEnum = "kafka"
)

func (e KafkaRuleResponseRuleTypeEnum) ToPointer() *KafkaRuleResponseRuleTypeEnum {
	return &e
}

func (e *KafkaRuleResponseRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "kafka":
		*e = KafkaRuleResponseRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaRuleResponseRuleTypeEnum: %v", v)
	}
}

type KafkaRuleResponseTargetAuthSaslMechanismEnum string

const (
	KafkaRuleResponseTargetAuthSaslMechanismEnumPlain       KafkaRuleResponseTargetAuthSaslMechanismEnum = "plain"
	KafkaRuleResponseTargetAuthSaslMechanismEnumScramSha256 KafkaRuleResponseTargetAuthSaslMechanismEnum = "scram-sha-256"
	KafkaRuleResponseTargetAuthSaslMechanismEnumScramSha512 KafkaRuleResponseTargetAuthSaslMechanismEnum = "scram-sha-512"
)

func (e KafkaRuleResponseTargetAuthSaslMechanismEnum) ToPointer() *KafkaRuleResponseTargetAuthSaslMechanismEnum {
	return &e
}

func (e *KafkaRuleResponseTargetAuthSaslMechanismEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "plain":
		fallthrough
	case "scram-sha-256":
		fallthrough
	case "scram-sha-512":
		*e = KafkaRuleResponseTargetAuthSaslMechanismEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for KafkaRuleResponseTargetAuthSaslMechanismEnum: %v", v)
	}
}

type KafkaRuleResponseTargetAuthSasl struct {
	Mechanism *KafkaRuleResponseTargetAuthSaslMechanismEnum `json:"mechanism,omitempty"`
	Password  *string                                       `json:"password,omitempty"`
	Username  *string                                       `json:"username,omitempty"`
}

type KafkaRuleResponseTargetAuth struct {
	Sasl *KafkaRuleResponseTargetAuthSasl `json:"sasl,omitempty"`
}

type KafkaRuleResponseTarget struct {
	Auth       KafkaRuleResponseTargetAuth `json:"auth"`
	Brokers    []string                    `json:"brokers"`
	Enveloped  *bool                       `json:"enveloped,omitempty"`
	Format     *string                     `json:"format,omitempty"`
	RoutingKey string                      `json:"routingKey"`
}

type KafkaRuleResponse struct {
	Links       map[string]interface{}        `json:"_links,omitempty"`
	AppID       *string                       `json:"appId,omitempty"`
	Created     *float64                      `json:"created,omitempty"`
	ID          *string                       `json:"id,omitempty"`
	Modified    *float64                      `json:"modified,omitempty"`
	RequestMode string                        `json:"requestMode"`
	RuleType    KafkaRuleResponseRuleTypeEnum `json:"ruleType"`
	Source      RuleSource                    `json:"source"`
	Status      *string                       `json:"status,omitempty"`
	Target      KafkaRuleResponseTarget       `json:"target"`
	Version     *string                       `json:"version,omitempty"`
}
