/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Revision - Revision is an immutable snapshot of code and configuration. A revision references a container image. Revisions are created by updates to a Configuration. See also: https://github.com/knative/specs/blob/main/specs/serving/overview.md#revision
 */
public class Revision {
    /**
     * The API version for this call such as "serving.knative.dev/v1".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("apiVersion")
    public String apiVersion;

    public Revision withApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }
    
    /**
     * The kind of this resource, in this case "Revision".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public Revision withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public ObjectMeta metadata;

    public Revision withMetadata(ObjectMeta metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * RevisionSpec holds the desired state of the Revision (from the client).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spec")
    public RevisionSpec spec;

    public Revision withSpec(RevisionSpec spec) {
        this.spec = spec;
        return this;
    }
    
    /**
     * RevisionStatus communicates the observed state of the Revision (from the controller).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public RevisionStatus status;

    public Revision withStatus(RevisionStatus status) {
        this.status = status;
        return this;
    }
    
    public Revision(){}
}
