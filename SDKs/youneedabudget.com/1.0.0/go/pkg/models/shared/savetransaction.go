// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// SaveTransactionClearedEnum - The cleared status of the transaction
type SaveTransactionClearedEnum string

const (
	SaveTransactionClearedEnumCleared    SaveTransactionClearedEnum = "cleared"
	SaveTransactionClearedEnumUncleared  SaveTransactionClearedEnum = "uncleared"
	SaveTransactionClearedEnumReconciled SaveTransactionClearedEnum = "reconciled"
)

func (e *SaveTransactionClearedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cleared":
		fallthrough
	case "uncleared":
		fallthrough
	case "reconciled":
		*e = SaveTransactionClearedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveTransactionClearedEnum: %s", s)
	}
}

// SaveTransactionFlagColorEnum - The transaction flag
type SaveTransactionFlagColorEnum string

const (
	SaveTransactionFlagColorEnumRed    SaveTransactionFlagColorEnum = "red"
	SaveTransactionFlagColorEnumOrange SaveTransactionFlagColorEnum = "orange"
	SaveTransactionFlagColorEnumYellow SaveTransactionFlagColorEnum = "yellow"
	SaveTransactionFlagColorEnumGreen  SaveTransactionFlagColorEnum = "green"
	SaveTransactionFlagColorEnumBlue   SaveTransactionFlagColorEnum = "blue"
	SaveTransactionFlagColorEnumPurple SaveTransactionFlagColorEnum = "purple"
	SaveTransactionFlagColorEnumNull   SaveTransactionFlagColorEnum = "null"
)

func (e *SaveTransactionFlagColorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "red":
		fallthrough
	case "orange":
		fallthrough
	case "yellow":
		fallthrough
	case "green":
		fallthrough
	case "blue":
		fallthrough
	case "purple":
		fallthrough
	case "null":
		*e = SaveTransactionFlagColorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SaveTransactionFlagColorEnum: %s", s)
	}
}

type SaveTransaction struct {
	AccountID string `json:"account_id"`
	// The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
	Amount int64 `json:"amount"`
	// Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
	Approved *bool `json:"approved,omitempty"`
	// The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
	CategoryID *string `json:"category_id,omitempty"`
	// The cleared status of the transaction
	Cleared *SaveTransactionClearedEnum `json:"cleared,omitempty"`
	// The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
	Date types.Date `json:"date"`
	// The transaction flag
	FlagColor *SaveTransactionFlagColorEnum `json:"flag_color,omitempty"`
	// If specified, the new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
	ImportID *string `json:"import_id,omitempty"`
	Memo     *string `json:"memo,omitempty"`
	// The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
	PayeeID *string `json:"payee_id,omitempty"`
	// The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
	PayeeName *string `json:"payee_name,omitempty"`
	// An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
	Subtransactions []SaveSubTransaction `json:"subtransactions,omitempty"`
}
