"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import wlt_record as shared_wlt_record
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TeamEventStatusPlayoffLevelEnum(str, Enum):
    r"""The highest playoff level the team reached."""
    QM = 'qm'
    EF = 'ef'
    QF = 'qf'
    SF = 'sf'
    F = 'f'

class TeamEventStatusPlayoffStatusEnum(str, Enum):
    r"""Current competition status for the playoffs."""
    WON = 'won'
    ELIMINATED = 'eliminated'
    PLAYING = 'playing'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TeamEventStatusPlayoff:
    r"""Playoff status for this team, may be null if the team did not make playoffs, or playoffs have not begun."""
    
    current_level_record: Optional[shared_wlt_record.WLTRecord] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_level_record'), 'exclude': lambda f: f is None }})
    r"""A Win-Loss-Tie record for a team, or an alliance."""  
    level: Optional[TeamEventStatusPlayoffLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('level'), 'exclude': lambda f: f is None }})
    r"""The highest playoff level the team reached."""  
    playoff_average: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playoff_average'), 'exclude': lambda f: f is None }})
    r"""The average match score during playoffs. Year specific. May be null if not relevant for a given year."""  
    record: Optional[shared_wlt_record.WLTRecord] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record'), 'exclude': lambda f: f is None }})
    r"""A Win-Loss-Tie record for a team, or an alliance."""  
    status: Optional[TeamEventStatusPlayoffStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Current competition status for the playoffs."""  
    