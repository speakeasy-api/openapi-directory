// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type OperatingSystemEnum string

const (
	OperatingSystemEnumWindows               OperatingSystemEnum = "WINDOWS"
	OperatingSystemEnumAmazonLinux           OperatingSystemEnum = "AMAZON_LINUX"
	OperatingSystemEnumAmazonLinux2          OperatingSystemEnum = "AMAZON_LINUX_2"
	OperatingSystemEnumAmazonLinux2022       OperatingSystemEnum = "AMAZON_LINUX_2022"
	OperatingSystemEnumUbuntu                OperatingSystemEnum = "UBUNTU"
	OperatingSystemEnumRedhatEnterpriseLinux OperatingSystemEnum = "REDHAT_ENTERPRISE_LINUX"
	OperatingSystemEnumSuse                  OperatingSystemEnum = "SUSE"
	OperatingSystemEnumCentos                OperatingSystemEnum = "CENTOS"
	OperatingSystemEnumOracleLinux           OperatingSystemEnum = "ORACLE_LINUX"
	OperatingSystemEnumDebian                OperatingSystemEnum = "DEBIAN"
	OperatingSystemEnumMacos                 OperatingSystemEnum = "MACOS"
	OperatingSystemEnumRaspbian              OperatingSystemEnum = "RASPBIAN"
	OperatingSystemEnumRockyLinux            OperatingSystemEnum = "ROCKY_LINUX"
)

func (e *OperatingSystemEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "WINDOWS":
		fallthrough
	case "AMAZON_LINUX":
		fallthrough
	case "AMAZON_LINUX_2":
		fallthrough
	case "AMAZON_LINUX_2022":
		fallthrough
	case "UBUNTU":
		fallthrough
	case "REDHAT_ENTERPRISE_LINUX":
		fallthrough
	case "SUSE":
		fallthrough
	case "CENTOS":
		fallthrough
	case "ORACLE_LINUX":
		fallthrough
	case "DEBIAN":
		fallthrough
	case "MACOS":
		fallthrough
	case "RASPBIAN":
		fallthrough
	case "ROCKY_LINUX":
		*e = OperatingSystemEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OperatingSystemEnum: %s", s)
	}
}
