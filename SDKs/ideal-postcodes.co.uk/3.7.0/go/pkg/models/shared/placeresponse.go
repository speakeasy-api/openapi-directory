// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type PlaceResponseCodeEnum string

const (
	PlaceResponseCodeEnumTwoThousand PlaceResponseCodeEnum = "2000"
)

func (e *PlaceResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = PlaceResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceResponseCodeEnum: %s", s)
	}
}

type PlaceResponseMessageEnum string

const (
	PlaceResponseMessageEnumSuccess PlaceResponseMessageEnum = "Success"
)

func (e *PlaceResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = PlaceResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlaceResponseMessageEnum: %s", s)
	}
}

type PlaceResponseResultHitsType string

const (
	PlaceResponseResultHitsTypePlaceSuggestion PlaceResponseResultHitsType = "PlaceSuggestion"
)

type PlaceResponseResultHits struct {
	PlaceSuggestion *PlaceSuggestion

	Type PlaceResponseResultHitsType
}

func CreatePlaceResponseResultHitsPlaceSuggestion(placeSuggestion PlaceSuggestion) PlaceResponseResultHits {
	typ := PlaceResponseResultHitsTypePlaceSuggestion

	return PlaceResponseResultHits{
		PlaceSuggestion: &placeSuggestion,
		Type:            typ,
	}
}

func (u *PlaceResponseResultHits) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	placeSuggestion := new(PlaceSuggestion)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&placeSuggestion); err == nil {
		u.PlaceSuggestion = placeSuggestion
		u.Type = PlaceResponseResultHitsTypePlaceSuggestion
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PlaceResponseResultHits) MarshalJSON() ([]byte, error) {
	if u.PlaceSuggestion != nil {
		return json.Marshal(u.PlaceSuggestion)
	}

	return nil, nil
}

type PlaceResponseResult struct {
	// List of up to 10 matching places
	//
	Hits []PlaceResponseResultHits `json:"hits"`
}

// PlaceResponse - Success
type PlaceResponse struct {
	Code    PlaceResponseCodeEnum    `json:"code"`
	Message PlaceResponseMessageEnum `json:"message"`
	Result  PlaceResponseResult      `json:"result"`
}
