// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RpcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RpcerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Registration No
	RegistrationNo string `json:"RegistrationNo"`
}

// RpcerRequestBodyFormatEnum - The format of the certificate in response.
type RpcerRequestBodyFormatEnum string

const (
	RpcerRequestBodyFormatEnumPdf RpcerRequestBodyFormatEnum = "pdf"
)

func (e RpcerRequestBodyFormatEnum) ToPointer() *RpcerRequestBodyFormatEnum {
	return &e
}

func (e *RpcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = RpcerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RpcerRequestBodyFormatEnum: %v", v)
	}
}

// RpcerRequestBody - Request format
type RpcerRequestBody struct {
	CertificateParameters *RpcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RpcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rpcer504ApplicationJSONErrorEnum string

const (
	Rpcer504ApplicationJSONErrorEnumGatewayTimeout Rpcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Rpcer504ApplicationJSONErrorEnum) ToPointer() *Rpcer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Rpcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Rpcer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Rpcer504ApplicationJSONErrorDescriptionEnum string

const (
	Rpcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rpcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Rpcer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Rpcer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rpcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Rpcer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rpcer504ApplicationJSON - Gateway timeout
type Rpcer504ApplicationJSON struct {
	Error            *Rpcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rpcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rpcer503ApplicationJSONErrorEnum string

const (
	Rpcer503ApplicationJSONErrorEnumServiceUnavailable Rpcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Rpcer503ApplicationJSONErrorEnum) ToPointer() *Rpcer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Rpcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Rpcer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Rpcer503ApplicationJSONErrorDescriptionEnum string

const (
	Rpcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rpcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Rpcer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Rpcer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rpcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Rpcer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rpcer503ApplicationJSON - Service unavailable
type Rpcer503ApplicationJSON struct {
	Error            *Rpcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rpcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rpcer502ApplicationJSONErrorEnum string

const (
	Rpcer502ApplicationJSONErrorEnumBadGatewy Rpcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Rpcer502ApplicationJSONErrorEnum) ToPointer() *Rpcer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Rpcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Rpcer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Rpcer502ApplicationJSONErrorDescriptionEnum string

const (
	Rpcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rpcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Rpcer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Rpcer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rpcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Rpcer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rpcer502ApplicationJSON - Bad gateway
type Rpcer502ApplicationJSON struct {
	Error            *Rpcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rpcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rpcer500ApplicationJSONErrorEnum string

const (
	Rpcer500ApplicationJSONErrorEnumInternalServerError Rpcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Rpcer500ApplicationJSONErrorEnum) ToPointer() *Rpcer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Rpcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Rpcer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Rpcer500ApplicationJSONErrorDescriptionEnum string

const (
	Rpcer500ApplicationJSONErrorDescriptionEnumInternalServerError Rpcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Rpcer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Rpcer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rpcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Rpcer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rpcer500ApplicationJSON - Internal server error
type Rpcer500ApplicationJSON struct {
	Error            *Rpcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rpcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rpcer404ApplicationJSONErrorEnum string

const (
	Rpcer404ApplicationJSONErrorEnumRecordNotFound Rpcer404ApplicationJSONErrorEnum = "record_not_found"
	Rpcer404ApplicationJSONErrorEnumURLNotFound    Rpcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Rpcer404ApplicationJSONErrorEnum) ToPointer() *Rpcer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Rpcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rpcer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Rpcer404ApplicationJSONErrorDescriptionEnum string

const (
	Rpcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rpcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rpcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rpcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Rpcer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Rpcer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rpcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rpcer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rpcer404ApplicationJSON - No record found
type Rpcer404ApplicationJSON struct {
	Error            *Rpcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rpcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rpcer401ApplicationJSONErrorEnum string

const (
	Rpcer401ApplicationJSONErrorEnumInvalidAuthentication Rpcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rpcer401ApplicationJSONErrorEnumInvalidAuthorization  Rpcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Rpcer401ApplicationJSONErrorEnum) ToPointer() *Rpcer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Rpcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rpcer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Rpcer401ApplicationJSONErrorDescriptionEnum string

const (
	Rpcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rpcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rpcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rpcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Rpcer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Rpcer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rpcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rpcer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rpcer401ApplicationJSON - Unauthorized access
type Rpcer401ApplicationJSON struct {
	Error            *Rpcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rpcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rpcer400ApplicationJSONErrorEnum string

const (
	Rpcer400ApplicationJSONErrorEnumMissingParameter Rpcer400ApplicationJSONErrorEnum = "missing_parameter"
	Rpcer400ApplicationJSONErrorEnumInvalidParameter Rpcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rpcer400ApplicationJSONErrorEnumInvalidFormat    Rpcer400ApplicationJSONErrorEnum = "invalid_format"
	Rpcer400ApplicationJSONErrorEnumInvalidTxnid     Rpcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rpcer400ApplicationJSONErrorEnumInvalidConsentid Rpcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Rpcer400ApplicationJSONErrorEnum) ToPointer() *Rpcer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Rpcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rpcer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Rpcer400ApplicationJSONErrorDescriptionEnum string

const (
	Rpcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rpcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rpcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rpcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rpcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rpcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rpcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rpcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rpcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rpcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Rpcer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Rpcer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rpcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rpcer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rpcer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rpcer400ApplicationJSON - Bad request
type Rpcer400ApplicationJSON struct {
	Error            *Rpcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rpcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RpcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rpcer400ApplicationJSONObject *Rpcer400ApplicationJSON
	// Unauthorized access
	Rpcer401ApplicationJSONObject *Rpcer401ApplicationJSON
	// No record found
	Rpcer404ApplicationJSONObject *Rpcer404ApplicationJSON
	// Internal server error
	Rpcer500ApplicationJSONObject *Rpcer500ApplicationJSON
	// Bad gateway
	Rpcer502ApplicationJSONObject *Rpcer502ApplicationJSON
	// Service unavailable
	Rpcer503ApplicationJSONObject *Rpcer503ApplicationJSON
	// Gateway timeout
	Rpcer504ApplicationJSONObject *Rpcer504ApplicationJSON
}
