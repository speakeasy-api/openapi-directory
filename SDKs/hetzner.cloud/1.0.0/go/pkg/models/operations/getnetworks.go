// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworksRequest struct {
	// Can be used to filter networks by labels. The response will only contain networks with a matching label selector pattern.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter networks by their name. The response will only contain the networks matching the specified name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
}

type GetNetworks200ApplicationJSONMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetNetworks200ApplicationJSONMeta struct {
	Pagination GetNetworks200ApplicationJSONMetaPagination `json:"pagination"`
}

// GetNetworks200ApplicationJSONNetworksProtection - Protection configuration for the Network
type GetNetworks200ApplicationJSONNetworksProtection struct {
	// If true, prevents the Network from being deleted
	Delete bool `json:"delete"`
}

type GetNetworks200ApplicationJSONNetworksRoutes struct {
	// Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
	Destination string `json:"destination"`
	// Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
	Gateway string `json:"gateway"`
}

// GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum - Type of Subnetwork
type GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum string

const (
	GetNetworks200ApplicationJSONNetworksSubnetsTypeEnumCloud   GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum = "cloud"
	GetNetworks200ApplicationJSONNetworksSubnetsTypeEnumServer  GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum = "server"
	GetNetworks200ApplicationJSONNetworksSubnetsTypeEnumVswitch GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum = "vswitch"
)

func (e *GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cloud":
		fallthrough
	case "server":
		fallthrough
	case "vswitch":
		*e = GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum: %s", s)
	}
}

type GetNetworks200ApplicationJSONNetworksSubnets struct {
	// Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.
	Gateway string `json:"gateway"`
	// Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.
	IPRange *string `json:"ip_range,omitempty"`
	// Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.
	NetworkZone string `json:"network_zone"`
	// Type of Subnetwork
	Type GetNetworks200ApplicationJSONNetworksSubnetsTypeEnum `json:"type"`
}

type GetNetworks200ApplicationJSONNetworks struct {
	// Point in time when the Network was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Network
	ID int64 `json:"id"`
	// IPv4 prefix of the whole Network
	IPRange string `json:"ip_range"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels"`
	// Array of IDs of Load Balancers attached to this Network
	LoadBalancers []int64 `json:"load_balancers,omitempty"`
	// Name of the Network
	Name string `json:"name"`
	// Protection configuration for the Network
	Protection GetNetworks200ApplicationJSONNetworksProtection `json:"protection"`
	// Array of routes set in this Network
	Routes []GetNetworks200ApplicationJSONNetworksRoutes `json:"routes"`
	// Array of IDs of Servers attached to this Network
	Servers []int64 `json:"servers"`
	// Array subnets allocated in this Network
	Subnets []GetNetworks200ApplicationJSONNetworksSubnets `json:"subnets"`
}

// GetNetworks200ApplicationJSON - The `networks` key contains a list of networks
type GetNetworks200ApplicationJSON struct {
	Meta     *GetNetworks200ApplicationJSONMeta      `json:"meta,omitempty"`
	Networks []GetNetworks200ApplicationJSONNetworks `json:"networks"`
}

type GetNetworksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `networks` key contains a list of networks
	GetNetworks200ApplicationJSONObject *GetNetworks200ApplicationJSON
}
