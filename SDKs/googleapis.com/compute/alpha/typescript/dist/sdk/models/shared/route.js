"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route = exports.RouteWarnings = exports.RouteWarningsData = exports.RouteWarningsCodeEnum = exports.RouteRouteTypeEnum = exports.RouteRouteStatusEnum = exports.RouteIlbRouteBehaviorOnUnhealthyEnum = void 0;
var utils_1 = require("../../../internal/utils");
var routeaspath_1 = require("./routeaspath");
var class_transformer_1 = require("class-transformer");
/**
 * ILB route behavior when ILB is deemed unhealthy based on user specified threshold on the Backend Service of the internal load balancing.
 */
var RouteIlbRouteBehaviorOnUnhealthyEnum;
(function (RouteIlbRouteBehaviorOnUnhealthyEnum) {
    RouteIlbRouteBehaviorOnUnhealthyEnum["DoNotWithdrawRouteIfIlbUnhealthy"] = "DO_NOT_WITHDRAW_ROUTE_IF_ILB_UNHEALTHY";
    RouteIlbRouteBehaviorOnUnhealthyEnum["WithdrawRouteIfIlbUnhealthy"] = "WITHDRAW_ROUTE_IF_ILB_UNHEALTHY";
})(RouteIlbRouteBehaviorOnUnhealthyEnum = exports.RouteIlbRouteBehaviorOnUnhealthyEnum || (exports.RouteIlbRouteBehaviorOnUnhealthyEnum = {}));
/**
 * [Output only] The status of the route.
 */
var RouteRouteStatusEnum;
(function (RouteRouteStatusEnum) {
    RouteRouteStatusEnum["Active"] = "ACTIVE";
    RouteRouteStatusEnum["Dropped"] = "DROPPED";
    RouteRouteStatusEnum["Inactive"] = "INACTIVE";
    RouteRouteStatusEnum["Pending"] = "PENDING";
})(RouteRouteStatusEnum = exports.RouteRouteStatusEnum || (exports.RouteRouteStatusEnum = {}));
/**
 * [Output Only] The type of this route, which can be one of the following values: - 'TRANSIT' for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers - 'SUBNET' for a route from a subnet of the VPC - 'BGP' for a route learned from a BGP peer of this router - 'STATIC' for a static route
 */
var RouteRouteTypeEnum;
(function (RouteRouteTypeEnum) {
    RouteRouteTypeEnum["Bgp"] = "BGP";
    RouteRouteTypeEnum["Static"] = "STATIC";
    RouteRouteTypeEnum["Subnet"] = "SUBNET";
    RouteRouteTypeEnum["Transit"] = "TRANSIT";
})(RouteRouteTypeEnum = exports.RouteRouteTypeEnum || (exports.RouteRouteTypeEnum = {}));
/**
 * [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
 */
var RouteWarningsCodeEnum;
(function (RouteWarningsCodeEnum) {
    RouteWarningsCodeEnum["CleanupFailed"] = "CLEANUP_FAILED";
    RouteWarningsCodeEnum["DeprecatedResourceUsed"] = "DEPRECATED_RESOURCE_USED";
    RouteWarningsCodeEnum["DeprecatedTypeUsed"] = "DEPRECATED_TYPE_USED";
    RouteWarningsCodeEnum["DiskSizeLargerThanImageSize"] = "DISK_SIZE_LARGER_THAN_IMAGE_SIZE";
    RouteWarningsCodeEnum["ExperimentalTypeUsed"] = "EXPERIMENTAL_TYPE_USED";
    RouteWarningsCodeEnum["ExternalApiWarning"] = "EXTERNAL_API_WARNING";
    RouteWarningsCodeEnum["FieldValueOverriden"] = "FIELD_VALUE_OVERRIDEN";
    RouteWarningsCodeEnum["InjectedKernelsDeprecated"] = "INJECTED_KERNELS_DEPRECATED";
    RouteWarningsCodeEnum["InvalidHealthCheckForDynamicWieghtedLb"] = "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB";
    RouteWarningsCodeEnum["LargeDeploymentWarning"] = "LARGE_DEPLOYMENT_WARNING";
    RouteWarningsCodeEnum["MissingTypeDependency"] = "MISSING_TYPE_DEPENDENCY";
    RouteWarningsCodeEnum["NextHopAddressNotAssigned"] = "NEXT_HOP_ADDRESS_NOT_ASSIGNED";
    RouteWarningsCodeEnum["NextHopCannotIpForward"] = "NEXT_HOP_CANNOT_IP_FORWARD";
    RouteWarningsCodeEnum["NextHopInstanceHasNoIpv6Interface"] = "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE";
    RouteWarningsCodeEnum["NextHopInstanceNotFound"] = "NEXT_HOP_INSTANCE_NOT_FOUND";
    RouteWarningsCodeEnum["NextHopInstanceNotOnNetwork"] = "NEXT_HOP_INSTANCE_NOT_ON_NETWORK";
    RouteWarningsCodeEnum["NextHopNotRunning"] = "NEXT_HOP_NOT_RUNNING";
    RouteWarningsCodeEnum["NotCriticalError"] = "NOT_CRITICAL_ERROR";
    RouteWarningsCodeEnum["NoResultsOnPage"] = "NO_RESULTS_ON_PAGE";
    RouteWarningsCodeEnum["PartialSuccess"] = "PARTIAL_SUCCESS";
    RouteWarningsCodeEnum["RequiredTosAgreement"] = "REQUIRED_TOS_AGREEMENT";
    RouteWarningsCodeEnum["ResourceInUseByOtherResourceWarning"] = "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING";
    RouteWarningsCodeEnum["ResourceNotDeleted"] = "RESOURCE_NOT_DELETED";
    RouteWarningsCodeEnum["SchemaValidationIgnored"] = "SCHEMA_VALIDATION_IGNORED";
    RouteWarningsCodeEnum["SingleInstancePropertyTemplate"] = "SINGLE_INSTANCE_PROPERTY_TEMPLATE";
    RouteWarningsCodeEnum["UndeclaredProperties"] = "UNDECLARED_PROPERTIES";
    RouteWarningsCodeEnum["Unreachable"] = "UNREACHABLE";
})(RouteWarningsCodeEnum = exports.RouteWarningsCodeEnum || (exports.RouteWarningsCodeEnum = {}));
var RouteWarningsData = /** @class */ (function (_super) {
    __extends(RouteWarningsData, _super);
    function RouteWarningsData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "key" }),
        __metadata("design:type", String)
    ], RouteWarningsData.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], RouteWarningsData.prototype, "value", void 0);
    return RouteWarningsData;
}(utils_1.SpeakeasyBase));
exports.RouteWarningsData = RouteWarningsData;
var RouteWarnings = /** @class */ (function (_super) {
    __extends(RouteWarnings, _super);
    function RouteWarnings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code" }),
        __metadata("design:type", String)
    ], RouteWarnings.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RouteWarningsData }),
        (0, class_transformer_1.Expose)({ name: "data" }),
        (0, class_transformer_1.Type)(function () { return RouteWarningsData; }),
        __metadata("design:type", Array)
    ], RouteWarnings.prototype, "data", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "message" }),
        __metadata("design:type", String)
    ], RouteWarnings.prototype, "message", void 0);
    return RouteWarnings;
}(utils_1.SpeakeasyBase));
exports.RouteWarnings = RouteWarnings;
/**
 * Represents a Route resource. A route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview.
 */
var Route = /** @class */ (function (_super) {
    __extends(Route, _super);
    function Route() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "allowConflictingSubnetworks" }),
        __metadata("design:type", Boolean)
    ], Route.prototype, "allowConflictingSubnetworks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: routeaspath_1.RouteAsPath }),
        (0, class_transformer_1.Expose)({ name: "asPaths" }),
        (0, class_transformer_1.Type)(function () { return routeaspath_1.RouteAsPath; }),
        __metadata("design:type", Array)
    ], Route.prototype, "asPaths", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], Route.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], Route.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "destRange" }),
        __metadata("design:type", String)
    ], Route.prototype, "destRange", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Route.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ilbRouteBehaviorOnUnhealthy" }),
        __metadata("design:type", String)
    ], Route.prototype, "ilbRouteBehaviorOnUnhealthy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], Route.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Route.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], Route.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopGateway" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopGateway", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopHub" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopHub", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopIlb" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopIlb", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopInstance" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopInstance", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopInterconnectAttachment" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopInterconnectAttachment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopIp" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopNetwork" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopNetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopPeering" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopPeering", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nextHopVpnTunnel" }),
        __metadata("design:type", String)
    ], Route.prototype, "nextHopVpnTunnel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "priority" }),
        __metadata("design:type", Number)
    ], Route.prototype, "priority", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "routeStatus" }),
        __metadata("design:type", String)
    ], Route.prototype, "routeStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "routeType" }),
        __metadata("design:type", String)
    ], Route.prototype, "routeType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], Route.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLinkWithId" }),
        __metadata("design:type", String)
    ], Route.prototype, "selfLinkWithId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tags" }),
        __metadata("design:type", Array)
    ], Route.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: RouteWarnings }),
        (0, class_transformer_1.Expose)({ name: "warnings" }),
        (0, class_transformer_1.Type)(function () { return RouteWarnings; }),
        __metadata("design:type", Array)
    ], Route.prototype, "warnings", void 0);
    return Route;
}(utils_1.SpeakeasyBase));
exports.Route = Route;
