/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class UserApiTokensNewSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export enum UserApiTokensNewRequestBodyScopeEnum {
  All = "all",
  Viewer = "viewer",
}

/**
 * Description of the token
 */
export class UserApiTokensNewRequestBody extends SpeakeasyBase {
  /**
   * The description of the token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The scope for this token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: UserApiTokensNewRequestBodyScopeEnum[];
}

export enum UserApiTokensNew401ApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class UserApiTokensNew401ApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: UserApiTokensNew401ApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Unauthorized
 */
export class UserApiTokensNew401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => UserApiTokensNew401ApplicationJSONError)
  error: UserApiTokensNew401ApplicationJSONError;
}

export enum UserApiTokensNew400ApplicationJSONErrorCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

export class UserApiTokensNew400ApplicationJSONError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: UserApiTokensNew400ApplicationJSONErrorCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Error
 */
export class UserApiTokensNew400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => UserApiTokensNew400ApplicationJSONError)
  error: UserApiTokensNew400ApplicationJSONError;
}

export enum UserApiTokensNew201ApplicationJSONScopeEnum {
  All = "all",
  Viewer = "viewer",
}

/**
 * Success
 */
export class UserApiTokensNew201ApplicationJSON extends SpeakeasyBase {
  /**
   * The api token generated will not be accessible again
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api_token" })
  apiToken: string;

  /**
   * The creation time
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt: string;

  /**
   * The description of the token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The unique id (UUID) of the api token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The scope for this token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope?: UserApiTokensNew201ApplicationJSONScopeEnum[];
}

export class UserApiTokensNewResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  userApiTokensNew201ApplicationJSONObject?: UserApiTokensNew201ApplicationJSON;

  /**
   * Error
   */
  @SpeakeasyMetadata()
  userApiTokensNew400ApplicationJSONObject?: UserApiTokensNew400ApplicationJSON;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  userApiTokensNew401ApplicationJSONObject?: UserApiTokensNew401ApplicationJSON;
}
