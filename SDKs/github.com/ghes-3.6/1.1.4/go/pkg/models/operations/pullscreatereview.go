// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PullsCreateReviewRequestBodyComments struct {
	// Text of the review comment.
	Body string `json:"body"`
	Line *int64 `json:"line,omitempty"`
	// The relative path to the file that necessitates a review comment.
	Path string `json:"path"`
	// The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
	Position  *int64  `json:"position,omitempty"`
	Side      *string `json:"side,omitempty"`
	StartLine *int64  `json:"start_line,omitempty"`
	StartSide *string `json:"start_side,omitempty"`
}

// PullsCreateReviewRequestBodyEventEnum - The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.6/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
type PullsCreateReviewRequestBodyEventEnum string

const (
	PullsCreateReviewRequestBodyEventEnumApprove        PullsCreateReviewRequestBodyEventEnum = "APPROVE"
	PullsCreateReviewRequestBodyEventEnumRequestChanges PullsCreateReviewRequestBodyEventEnum = "REQUEST_CHANGES"
	PullsCreateReviewRequestBodyEventEnumComment        PullsCreateReviewRequestBodyEventEnum = "COMMENT"
)

func (e *PullsCreateReviewRequestBodyEventEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "APPROVE":
		fallthrough
	case "REQUEST_CHANGES":
		fallthrough
	case "COMMENT":
		*e = PullsCreateReviewRequestBodyEventEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PullsCreateReviewRequestBodyEventEnum: %s", s)
	}
}

type PullsCreateReviewRequestBody struct {
	// **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
	Body *string `json:"body,omitempty"`
	// Use the following table to specify the location, destination, and contents of the draft review comment.
	Comments []PullsCreateReviewRequestBodyComments `json:"comments,omitempty"`
	// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
	CommitID *string `json:"commit_id,omitempty"`
	// The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.6/rest/pulls#submit-a-review-for-a-pull-request) when you are ready.
	Event *PullsCreateReviewRequestBodyEventEnum `json:"event,omitempty"`
}

type PullsCreateReviewRequest struct {
	RequestBody *PullsCreateReviewRequestBody `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The number that identifies the pull request.
	PullNumber int64 `pathParam:"style=simple,explode=false,name=pull_number"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type PullsCreateReviewResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	PullRequestReview *shared.PullRequestReview
	// Validation failed, or the endpoint has been spammed.
	ValidationErrorSimple *shared.ValidationErrorSimple
}
