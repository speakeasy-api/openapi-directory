// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type PecerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type PecerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Gender - M for male, F for female and O for other
	Gender string `json:"GENDER"`
	// PAN No
	Pan string `json:"PAN"`
	// PPO No
	Ppo string `json:"PPO"`
}

// PecerRequestBodyFormatEnum - The format of the certificate in response.
type PecerRequestBodyFormatEnum string

const (
	PecerRequestBodyFormatEnumPdf PecerRequestBodyFormatEnum = "pdf"
)

func (e *PecerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = PecerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PecerRequestBodyFormatEnum: %s", s)
	}
}

// PecerRequestBody - Request format
type PecerRequestBody struct {
	CertificateParameters *PecerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format PecerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Pecer504ApplicationJSONErrorEnum string

const (
	Pecer504ApplicationJSONErrorEnumGatewayTimeout Pecer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Pecer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Pecer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Pecer504ApplicationJSONErrorDescriptionEnum string

const (
	Pecer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Pecer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Pecer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Pecer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pecer504ApplicationJSON - Gateway timeout
type Pecer504ApplicationJSON struct {
	Error            *Pecer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pecer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pecer503ApplicationJSONErrorEnum string

const (
	Pecer503ApplicationJSONErrorEnumServiceUnavailable Pecer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Pecer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Pecer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Pecer503ApplicationJSONErrorDescriptionEnum string

const (
	Pecer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Pecer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Pecer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Pecer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pecer503ApplicationJSON - Service unavailable
type Pecer503ApplicationJSON struct {
	Error            *Pecer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pecer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pecer502ApplicationJSONErrorEnum string

const (
	Pecer502ApplicationJSONErrorEnumBadGatewy Pecer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Pecer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Pecer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Pecer502ApplicationJSONErrorDescriptionEnum string

const (
	Pecer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Pecer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Pecer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Pecer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pecer502ApplicationJSON - Bad gateway
type Pecer502ApplicationJSON struct {
	Error            *Pecer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pecer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pecer500ApplicationJSONErrorEnum string

const (
	Pecer500ApplicationJSONErrorEnumInternalServerError Pecer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Pecer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Pecer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Pecer500ApplicationJSONErrorDescriptionEnum string

const (
	Pecer500ApplicationJSONErrorDescriptionEnumInternalServerError Pecer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Pecer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Pecer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pecer500ApplicationJSON - Internal server error
type Pecer500ApplicationJSON struct {
	Error            *Pecer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pecer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pecer404ApplicationJSONErrorEnum string

const (
	Pecer404ApplicationJSONErrorEnumRecordNotFound Pecer404ApplicationJSONErrorEnum = "record_not_found"
	Pecer404ApplicationJSONErrorEnumURLNotFound    Pecer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Pecer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Pecer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Pecer404ApplicationJSONErrorDescriptionEnum string

const (
	Pecer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Pecer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Pecer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Pecer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Pecer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Pecer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pecer404ApplicationJSON - No record found
type Pecer404ApplicationJSON struct {
	Error            *Pecer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pecer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pecer401ApplicationJSONErrorEnum string

const (
	Pecer401ApplicationJSONErrorEnumInvalidAuthentication Pecer401ApplicationJSONErrorEnum = "invalid_authentication"
	Pecer401ApplicationJSONErrorEnumInvalidAuthorization  Pecer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Pecer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Pecer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Pecer401ApplicationJSONErrorDescriptionEnum string

const (
	Pecer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Pecer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Pecer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Pecer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Pecer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Pecer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pecer401ApplicationJSON - Unauthorized access
type Pecer401ApplicationJSON struct {
	Error            *Pecer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pecer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Pecer400ApplicationJSONErrorEnum string

const (
	Pecer400ApplicationJSONErrorEnumMissingParameter Pecer400ApplicationJSONErrorEnum = "missing_parameter"
	Pecer400ApplicationJSONErrorEnumInvalidParameter Pecer400ApplicationJSONErrorEnum = "invalid_parameter"
	Pecer400ApplicationJSONErrorEnumInvalidFormat    Pecer400ApplicationJSONErrorEnum = "invalid_format"
	Pecer400ApplicationJSONErrorEnumInvalidTxnid     Pecer400ApplicationJSONErrorEnum = "invalid_txnid"
	Pecer400ApplicationJSONErrorEnumInvalidConsentid Pecer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Pecer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Pecer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Pecer400ApplicationJSONErrorDescriptionEnum string

const (
	Pecer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Pecer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Pecer400ApplicationJSONErrorDescriptionEnumBadRequest                              Pecer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Pecer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Pecer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Pecer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Pecer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Pecer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Pecer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Pecer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Pecer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Pecer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Pecer400ApplicationJSON - Bad request
type Pecer400ApplicationJSON struct {
	Error            *Pecer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Pecer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type PecerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Pecer400ApplicationJSONObject *Pecer400ApplicationJSON
	// Unauthorized access
	Pecer401ApplicationJSONObject *Pecer401ApplicationJSON
	// No record found
	Pecer404ApplicationJSONObject *Pecer404ApplicationJSON
	// Internal server error
	Pecer500ApplicationJSONObject *Pecer500ApplicationJSON
	// Bad gateway
	Pecer502ApplicationJSONObject *Pecer502ApplicationJSON
	// Service unavailable
	Pecer503ApplicationJSONObject *Pecer503ApplicationJSON
	// Gateway timeout
	Pecer504ApplicationJSONObject *Pecer504ApplicationJSON
}
