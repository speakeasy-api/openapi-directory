"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import moneyobject as shared_moneyobject
from ..shared import transactionstatusenum_enum as shared_transactionstatusenum_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceAttributesCashback:
    r"""Provides information about an instant reimbursement in the form of
    cashback.
    """
    
    amount: shared_moneyobject.MoneyObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The total amount of cashback paid, represented as a positive value."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A brief description of why this cashback was paid."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceAttributesForeignAmount:
    r"""Provides information about a value of money."""
    
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode') }})
    r"""The ISO 4217 currency code."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The amount of money, formatted as a string in the relevant currency.
    For example, for an Australian dollar value of $10.56, this field will
    be `\"10.56\"`. The currency symbol is not included in the string.
    """  
    value_in_base_units: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueInBaseUnits') }})
    r"""The amount of money in the smallest denomination for the currency, as a
    64-bit integer.  For example, for an Australian dollar value of $10.56,
    this field will be `1056`.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceAttributesHoldInfoForeignAmount:
    r"""Provides information about a value of money."""
    
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode') }})
    r"""The ISO 4217 currency code."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The amount of money, formatted as a string in the relevant currency.
    For example, for an Australian dollar value of $10.56, this field will
    be `\"10.56\"`. The currency symbol is not included in the string.
    """  
    value_in_base_units: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueInBaseUnits') }})
    r"""The amount of money in the smallest denomination for the currency, as a
    64-bit integer.  For example, for an Australian dollar value of $10.56,
    this field will be `1056`.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceAttributesHoldInfo:
    r"""Provides information about the amount at which a transaction was in the
    `HELD` status.
    """
    
    amount: shared_moneyobject.MoneyObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount of this transaction while in the `HELD` status, in
    Australian dollars.
    """  
    foreign_amount: TransactionResourceAttributesHoldInfoForeignAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('foreignAmount') }})
    r"""The foreign currency amount of this transaction while in the `HELD`
    status. This field will be `null` for domestic transactions. The amount
    was converted to the AUD amount reflected in the `amount` field.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceAttributesRoundUpBoostPortion:
    r"""Provides information about a value of money."""
    
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode') }})
    r"""The ISO 4217 currency code."""  
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The amount of money, formatted as a string in the relevant currency.
    For example, for an Australian dollar value of $10.56, this field will
    be `\"10.56\"`. The currency symbol is not included in the string.
    """  
    value_in_base_units: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueInBaseUnits') }})
    r"""The amount of money in the smallest denomination for the currency, as a
    64-bit integer.  For example, for an Australian dollar value of $10.56,
    this field will be `1056`.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceAttributesRoundUp:
    r"""Provides information about how a Round Up was applied, such as whether or
    not a boost was included in the Round Up.
    """
    
    amount: shared_moneyobject.MoneyObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The total amount of this Round Up, including any boosts, represented as
    a negative value.
    """  
    boost_portion: TransactionResourceAttributesRoundUpBoostPortion = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boostPortion') }})
    r"""The portion of the Round Up `amount` owing to boosted Round Ups,
    represented as a negative value. If no boost was added to the Round Up
    this field will be `null`.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceAttributes:
    
    amount: shared_moneyobject.MoneyObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount of this transaction in Australian dollars. For
    transactions that were once `HELD` but are now `SETTLED`, refer to
    the `holdInfo` field for the original `amount` the transaction was
    `HELD` at.
    """  
    cashback: TransactionResourceAttributesCashback = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cashback') }})
    r"""If all or part of this transaction was instantly reimbursed in the
    form of cashback, details of the reimbursement.
    """  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date-time at which this transaction was first encountered."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A short description for this transaction. Usually the merchant name
    for purchases.
    """  
    foreign_amount: TransactionResourceAttributesForeignAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('foreignAmount') }})
    r"""The foreign currency amount of this transaction. This field will be
    `null` for domestic transactions. The amount was converted to the AUD
    amount reflected in the `amount` of this transaction. Refer to the
    `holdInfo` field for the original `foreignAmount` the transaction was
    `HELD` at.
    """  
    hold_info: TransactionResourceAttributesHoldInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('holdInfo') }})
    r"""If this transaction is currently in the `HELD` status, or was ever in
    the `HELD` status, the `amount` and `foreignAmount` of the
    transaction while `HELD`.
    """  
    is_categorizable: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isCategorizable') }})
    r"""Boolean flag set to true on transactions that support the use of
    categories.
    """  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Attached message for this transaction, such as a payment message, or a
    transfer note.
    """  
    raw_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rawText') }})
    r"""The original, unprocessed text of the transaction. This is often not
    a perfect indicator of the actual merchant, but it is useful for
    reconciliation purposes in some cases.
    """  
    round_up: TransactionResourceAttributesRoundUp = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roundUp') }})
    r"""Details of how this transaction was rounded-up. If no Round Up was
    applied this field will be `null`.
    """  
    settled_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settledAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date-time at which this transaction settled. This field will be
    `null` for transactions that are currently in the `HELD` status.
    """  
    status: shared_transactionstatusenum_enum.TransactionStatusEnumEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The current processing status of this transaction, according to
    whether or not this transaction has settled or is still held.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceLinks:
    
    self_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})
    r"""The canonical link to this resource within the API."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsAccountData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the resource within its type."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `accounts`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsAccountLinks:
    
    related: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""The link to retrieve the related resource(s) in this relationship."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsAccount:
    
    data: TransactionResourceRelationshipsAccountData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: Optional[TransactionResourceRelationshipsAccountLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsCategoryData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the resource within its type."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `categories`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsCategoryLinks:
    
    self_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})
    r"""The link to retrieve or modify linkage between this resources and the
    related resource(s) in this relationship.
    """  
    related: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related'), 'exclude': lambda f: f is None }})
    r"""The link to retrieve the related resource(s) in this relationship."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsCategory:
    
    data: TransactionResourceRelationshipsCategoryData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: Optional[TransactionResourceRelationshipsCategoryLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsParentCategoryData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the resource within its type."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `categories`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsParentCategoryLinks:
    
    related: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""The link to retrieve the related resource(s) in this relationship."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsParentCategory:
    
    data: TransactionResourceRelationshipsParentCategoryData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: Optional[TransactionResourceRelationshipsParentCategoryLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsTagsData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The label of the tag, which also acts as the tag’s unique identifier."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `tags`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsTagsLinks:
    
    self_: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('self') }})
    r"""The link to retrieve or modify linkage between this resources and the
    related resource(s) in this relationship.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsTags:
    
    data: list[TransactionResourceRelationshipsTagsData] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: Optional[TransactionResourceRelationshipsTagsLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsTransferAccountData:
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the resource within its type."""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `accounts`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsTransferAccountLinks:
    
    related: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('related') }})
    r"""The link to retrieve the related resource(s) in this relationship."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationshipsTransferAccount:
    r"""If this transaction is a transfer between accounts, this relationship
    will contain the account the transaction went to/came from. The
    `amount` field can be used to determine the direction of the transfer.
    """
    
    data: TransactionResourceRelationshipsTransferAccountData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})  
    links: Optional[TransactionResourceRelationshipsTransferAccountLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResourceRelationships:
    
    account: TransactionResourceRelationshipsAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account') }})  
    category: TransactionResourceRelationshipsCategory = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category') }})  
    parent_category: TransactionResourceRelationshipsParentCategory = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentCategory') }})  
    tags: TransactionResourceRelationshipsTags = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})  
    transfer_account: TransactionResourceRelationshipsTransferAccount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferAccount') }})
    r"""If this transaction is a transfer between accounts, this relationship
    will contain the account the transaction went to/came from. The
    `amount` field can be used to determine the direction of the transfer.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TransactionResource:
    
    attributes: TransactionResourceAttributes = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attributes') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier for this transaction."""  
    relationships: TransactionResourceRelationships = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of this resource: `transactions`"""  
    links: Optional[TransactionResourceLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    