/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Defines the request schema for `/transfer/list`
 */
export class TransferListRequest extends SpeakeasyBase {
  /**
   * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_id" })
  clientId?: string;

  /**
   * The maximum number of transfers to return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "count" })
  count?: number;

  /**
   * The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;

  /**
   * Filter transfers to only those with the specified `funding_account_id`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "funding_account_id" })
  fundingAccountId?: string;

  /**
   * The number of transfers to skip before returning results.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "offset" })
  offset?: number;

  /**
   * Filter transfers to only those originated through the specified origination account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origination_account_id" })
  originationAccountId?: string;

  /**
   * Filter transfers to only those with the specified originator client.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originator_client_id" })
  originatorClientId?: string;

  /**
   * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  /**
   * The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startDate?: Date;
}
