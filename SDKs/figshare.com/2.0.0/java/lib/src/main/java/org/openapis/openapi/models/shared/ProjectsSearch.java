/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProjectsSearch - Search Parameters
 */
public class ProjectsSearch {
    /**
     * only return collections from this group
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    public Integer group;

    public ProjectsSearch withGroup(Integer group) {
        this.group = group;
        return this;
    }
    
    /**
     * only return collections from this institution
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("institution")
    public Integer institution;

    public ProjectsSearch withInstitution(Integer institution) {
        this.institution = institution;
        return this;
    }
    
    /**
     * Number of results included on a page. Used for pagination with query
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public Long limit;

    public ProjectsSearch withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Filter by article modified date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modified_since")
    public String modifiedSince;

    public ProjectsSearch withModifiedSince(String modifiedSince) {
        this.modifiedSince = modifiedSince;
        return this;
    }
    
    /**
     * Where to start the listing(the offset of the first result). Used for pagination with limit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public Long offset;

    public ProjectsSearch withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * The field by which to order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    public ProjectsSearchOrderEnum order;

    public ProjectsSearch withOrder(ProjectsSearchOrderEnum order) {
        this.order = order;
        return this;
    }
    
    /**
     * Direction of ordering
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_direction")
    public ProjectsSearchOrderDirectionEnum orderDirection;

    public ProjectsSearch withOrderDirection(ProjectsSearchOrderDirectionEnum orderDirection) {
        this.orderDirection = orderDirection;
        return this;
    }
    
    /**
     * Page number. Used for pagination with page_size
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    public Long page;

    public ProjectsSearch withPage(Long page) {
        this.page = page;
        return this;
    }
    
    /**
     * The number of results included on a page. Used for pagination with page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    public Long pageSize;

    public ProjectsSearch withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * Filter by article publishing date. Will only return articles published after the date. date(ISO 8601) YYYY-MM-DD
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("published_since")
    public String publishedSince;

    public ProjectsSearch withPublishedSince(String publishedSince) {
        this.publishedSince = publishedSince;
        return this;
    }
    
    /**
     * Search term
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_for")
    public String searchFor;

    public ProjectsSearch withSearchFor(String searchFor) {
        this.searchFor = searchFor;
        return this;
    }
    
    public ProjectsSearch(){}
}
