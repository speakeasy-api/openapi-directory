"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkSensorRelationshipsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    
class GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum(str, Enum):
    r"""The product type of the device"""
    CAMERA = 'camera'
    SENSOR = 'sensor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorRelationships200ApplicationJSONDevice:
    r"""A sensor or gateway device in the network"""
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the device"""  
    product_type: Optional[GetNetworkSensorRelationships200ApplicationJSONDeviceProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""The product type of the device"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The serial of the device"""  
    
class GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum(str, Enum):
    r"""The product type of the related device"""
    CAMERA = 'camera'
    SENSOR = 'sensor'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevices:
    
    product_type: Optional[GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevicesProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""The product type of the related device"""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The serial of the related device"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestream:
    r"""A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers."""
    
    related_devices: Optional[list[GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestreamRelatedDevices]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relatedDevices'), 'exclude': lambda f: f is None }})
    r"""An array of the related devices for the role"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorRelationships200ApplicationJSONRelationships:
    r"""An object describing the relationships defined between the device and other devices"""
    
    livestream: Optional[GetNetworkSensorRelationships200ApplicationJSONRelationshipsLivestream] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('livestream'), 'exclude': lambda f: f is None }})
    r"""A role defined between an MT sensor and an MV camera that adds the camera's livestream to the sensor's details page. Snapshots from the camera will also appear in alert notifications that the sensor triggers."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSensorRelationships200ApplicationJSON:
    
    device: Optional[GetNetworkSensorRelationships200ApplicationJSONDevice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device'), 'exclude': lambda f: f is None }})
    r"""A sensor or gateway device in the network"""  
    relationships: Optional[GetNetworkSensorRelationships200ApplicationJSONRelationships] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})
    r"""An object describing the relationships defined between the device and other devices"""  
    

@dataclasses.dataclass
class GetNetworkSensorRelationshipsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_sensor_relationships_200_application_json_objects: Optional[list[GetNetworkSensorRelationships200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    