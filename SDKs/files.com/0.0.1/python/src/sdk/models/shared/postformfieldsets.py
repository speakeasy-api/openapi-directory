"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFormFieldSetsFormFields:
    
    default_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('default_option'), 'exclude': lambda f: f is None }})
    r"""Default option to be preselected in the dropdown or radio."""  
    field_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_type'), 'exclude': lambda f: f is None }})
    r"""Type of field: text, text_area, dropdown, or radio"""  
    help_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('help_text'), 'exclude': lambda f: f is None }})
    r"""Help text of field"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of existing Form Field"""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""Label of Field"""  
    options_for_select: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options_for_select'), 'exclude': lambda f: f is None }})
    r"""List of options for dropdown or radio"""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Is this a required field? (default true)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostFormFieldSets:
    r"""Create Form Field Set"""
    
    form_fields: Optional[list[PostFormFieldSetsFormFields]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_fields'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'form_fields', 'json': True }, 'multipart_form': { 'field_name': 'form_fields', 'json': True }})  
    skip_company: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_company'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'skip_company' }, 'multipart_form': { 'field_name': 'skip_company' }})
    r"""Skip validating company"""  
    skip_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_email'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'skip_email' }, 'multipart_form': { 'field_name': 'skip_email' }})
    r"""Skip validating form email"""  
    skip_name: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_name'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'skip_name' }, 'multipart_form': { 'field_name': 'skip_name' }})
    r"""Skip validating form name"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'title' }, 'multipart_form': { 'field_name': 'title' }})
    r"""Title to be displayed"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'user_id' }, 'multipart_form': { 'field_name': 'user_id' }})
    r"""User ID.  Provide a value of `0` to operate the current session's user."""  
    