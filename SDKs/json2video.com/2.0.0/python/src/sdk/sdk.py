"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared

SERVERS = [
    "https://api.json2video.com/v2",
    r"""Version 2 endpoint"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Create and edit awesome videos programmatically"""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_movies(self) -> operations.GetMoviesResponse:
        r"""Get the status of your movies
        Get the status any of your movies by passing your project ID in the <code>project</code> query parameter. You can get your project ID from the response of the POST request.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/movies'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMoviesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def new_movie(self, request: shared.Movie) -> operations.NewMovieResponse:
        r"""Create a new movie
        Submit a new movie rendering job.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/movies'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.NewMovieResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    