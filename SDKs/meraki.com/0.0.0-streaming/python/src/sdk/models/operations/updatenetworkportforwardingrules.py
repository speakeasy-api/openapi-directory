"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum(str, Enum):
    r"""TCP or UDP"""
    TCP = 'tcp'
    UDP = 'udp'

class UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum(str, Enum):
    r"""The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')"""
    BOTH = 'both'
    INTERNET1 = 'internet1'
    INTERNET2 = 'internet2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkPortForwardingRulesRequestBodyRules:
    
    allowed_ips: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedIps') }})
    r"""An array of ranges of WAN IP addresses that are allowed to make inbound connections on the specified ports or port ranges (or any)"""  
    lan_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lanIp') }})
    r"""The IP address of the server or device that hosts the internal resource that you wish to make available on the WAN"""  
    local_port: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localPort') }})
    r"""A port or port ranges that will receive the forwarded traffic from the WAN"""  
    protocol: UpdateNetworkPortForwardingRulesRequestBodyRulesProtocolEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol') }})
    r"""TCP or UDP"""  
    public_port: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicPort') }})
    r"""A port or port ranges that will be forwarded to the host on the LAN"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""A descriptive name for the rule"""  
    uplink: Optional[UpdateNetworkPortForwardingRulesRequestBodyRulesUplinkEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uplink'), 'exclude': lambda f: f is None }})
    r"""The physical WAN interface on which the traffic will arrive ('internet1' or, if available, 'internet2' or 'both')"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateNetworkPortForwardingRulesRequestBody:
    
    rules: list[UpdateNetworkPortForwardingRulesRequestBodyRules] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules') }})
    r"""An array of port forwarding params"""  
    

@dataclasses.dataclass
class UpdateNetworkPortForwardingRulesRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateNetworkPortForwardingRulesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateNetworkPortForwardingRulesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_network_port_forwarding_rules_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    