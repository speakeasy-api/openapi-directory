"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import editorialsearchresults as shared_editorialsearchresults
from ..shared import security as shared_security
from datetime import date
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class SearchEditorialImagesSecurity:
    
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    customer_access_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class SearchEditorialImagesSortEnum(str, Enum):
    r"""Sort by"""
    RELEVANT = 'relevant'
    NEWEST = 'newest'
    OLDEST = 'oldest'


@dataclasses.dataclass
class SearchEditorialImagesRequest:
    
    country: str = dataclasses.field(metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""Show only editorial content that is available for distribution in a certain country"""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category', 'style': 'form', 'explode': True }})
    r"""Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list"""  
    cursor: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cursor', 'style': 'form', 'explode': True }})
    r"""The cursor of the page with which to start fetching results; this cursor is returned from previous requests"""  
    date_end: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_end', 'style': 'form', 'explode': True }})
    r"""Show only editorial content generated on or before a specific date"""  
    date_start: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'date_start', 'style': 'form', 'explode': True }})
    r"""Show only editorial content generated on or after a specific date"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results per page"""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""One or more search terms separated by spaces"""  
    sort: Optional[SearchEditorialImagesSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort by"""  
    supplier_code: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'supplier_code', 'style': 'form', 'explode': True }})
    r"""Show only editorial content from certain suppliers"""  
    

@dataclasses.dataclass
class SearchEditorialImagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    editorial_search_results: Optional[shared_editorialsearchresults.EditorialSearchResults] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    