"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def eventarc_projects_locations_list(self, request: operations.EventarcProjectsLocationsListRequest, security: operations.EventarcProjectsLocationsListSecurity) -> operations.EventarcProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsListRequest, base_url, '/v1beta1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def eventarc_projects_locations_operations_cancel(self, request: operations.EventarcProjectsLocationsOperationsCancelRequest, security: operations.EventarcProjectsLocationsOperationsCancelSecurity) -> operations.EventarcProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsOperationsCancelRequest, base_url, '/v1beta1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def eventarc_projects_locations_operations_list(self, request: operations.EventarcProjectsLocationsOperationsListRequest, security: operations.EventarcProjectsLocationsOperationsListSecurity) -> operations.EventarcProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsOperationsListRequest, base_url, '/v1beta1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def eventarc_projects_locations_triggers_create(self, request: operations.EventarcProjectsLocationsTriggersCreateRequest, security: operations.EventarcProjectsLocationsTriggersCreateSecurity) -> operations.EventarcProjectsLocationsTriggersCreateResponse:
        r"""Create a new trigger in a particular project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersCreateRequest, base_url, '/v1beta1/{parent}/triggers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "trigger_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def eventarc_projects_locations_triggers_delete(self, request: operations.EventarcProjectsLocationsTriggersDeleteRequest, security: operations.EventarcProjectsLocationsTriggersDeleteSecurity) -> operations.EventarcProjectsLocationsTriggersDeleteResponse:
        r"""Delete a single trigger."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def eventarc_projects_locations_triggers_get(self, request: operations.EventarcProjectsLocationsTriggersGetRequest, security: operations.EventarcProjectsLocationsTriggersGetSecurity) -> operations.EventarcProjectsLocationsTriggersGetResponse:
        r"""Get a single trigger."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Trigger])
                res.trigger = out

        return res

    def eventarc_projects_locations_triggers_get_iam_policy(self, request: operations.EventarcProjectsLocationsTriggersGetIamPolicyRequest, security: operations.EventarcProjectsLocationsTriggersGetIamPolicySecurity) -> operations.EventarcProjectsLocationsTriggersGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersGetIamPolicyRequest, base_url, '/v1beta1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def eventarc_projects_locations_triggers_list(self, request: operations.EventarcProjectsLocationsTriggersListRequest, security: operations.EventarcProjectsLocationsTriggersListSecurity) -> operations.EventarcProjectsLocationsTriggersListResponse:
        r"""List triggers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersListRequest, base_url, '/v1beta1/{parent}/triggers', request)
        
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTriggersResponse])
                res.list_triggers_response = out

        return res

    def eventarc_projects_locations_triggers_patch(self, request: operations.EventarcProjectsLocationsTriggersPatchRequest, security: operations.EventarcProjectsLocationsTriggersPatchSecurity) -> operations.EventarcProjectsLocationsTriggersPatchResponse:
        r"""Update a single trigger."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersPatchRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "trigger_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def eventarc_projects_locations_triggers_set_iam_policy(self, request: operations.EventarcProjectsLocationsTriggersSetIamPolicyRequest, security: operations.EventarcProjectsLocationsTriggersSetIamPolicySecurity) -> operations.EventarcProjectsLocationsTriggersSetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersSetIamPolicyRequest, base_url, '/v1beta1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def eventarc_projects_locations_triggers_test_iam_permissions(self, request: operations.EventarcProjectsLocationsTriggersTestIamPermissionsRequest, security: operations.EventarcProjectsLocationsTriggersTestIamPermissionsSecurity) -> operations.EventarcProjectsLocationsTriggersTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EventarcProjectsLocationsTriggersTestIamPermissionsRequest, base_url, '/v1beta1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EventarcProjectsLocationsTriggersTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EventarcProjectsLocationsTriggersTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    