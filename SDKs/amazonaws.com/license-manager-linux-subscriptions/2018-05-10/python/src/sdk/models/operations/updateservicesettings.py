"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import organizationintegration_enum as shared_organizationintegration_enum
from ..shared import updateservicesettingsresponse as shared_updateservicesettingsresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum(str, Enum):
    r"""Describes if the discovery of Linux subscriptions is enabled."""
    ENABLED = 'Enabled'
    DISABLED = 'Disabled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings:
    r"""Lists the settings defined for discovering Linux subscriptions."""
    
    organization_integration: Optional[shared_organizationintegration_enum.OrganizationIntegrationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationIntegration'), 'exclude': lambda f: f is None }})  
    source_regions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SourceRegions'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateServiceSettingsRequestBody:
    
    linux_subscriptions_discovery: UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoveryEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinuxSubscriptionsDiscovery') }})
    r"""Describes if the discovery of Linux subscriptions is enabled."""  
    linux_subscriptions_discovery_settings: UpdateServiceSettingsRequestBodyLinuxSubscriptionsDiscoverySettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LinuxSubscriptionsDiscoverySettings') }})
    r"""Lists the settings defined for discovering Linux subscriptions."""  
    allow_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllowUpdate'), 'exclude': lambda f: f is None }})
    r"""Describes if updates are allowed to the service settings for Linux subscriptions. If you allow updates, you can aggregate Linux subscription data in more than one home Region."""  
    

@dataclasses.dataclass
class UpdateServiceSettingsRequest:
    
    request_body: UpdateServiceSettingsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateServiceSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_service_settings_response: Optional[shared_updateservicesettingsresponse.UpdateServiceSettingsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    