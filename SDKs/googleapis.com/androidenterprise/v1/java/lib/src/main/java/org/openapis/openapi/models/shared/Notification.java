/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Notification - A notification of one event relating to an enterprise.
 */
public class Notification {
    /**
     * An event generated when a new app version is uploaded to Google Play and its app restrictions schema changed. To fetch the app restrictions schema for an app, use Products.getAppRestrictionsSchema on the EMM API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appRestrictionsSchemaChangeEvent")
    public AppRestrictionsSchemaChangeEvent appRestrictionsSchemaChangeEvent;
    public Notification withAppRestrictionsSchemaChangeEvent(AppRestrictionsSchemaChangeEvent appRestrictionsSchemaChangeEvent) {
        this.appRestrictionsSchemaChangeEvent = appRestrictionsSchemaChangeEvent;
        return this;
    }
    
    /**
     * An event generated when a new version of an app is uploaded to Google Play. Notifications are sent for new public versions only: alpha, beta, or canary versions do not generate this event. To fetch up-to-date version history for an app, use Products.Get on the EMM API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("appUpdateEvent")
    public AppUpdateEvent appUpdateEvent;
    public Notification withAppUpdateEvent(AppUpdateEvent appUpdateEvent) {
        this.appUpdateEvent = appUpdateEvent;
        return this;
    }
    
    /**
     * An event generated when an updated device report is available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceReportUpdateEvent")
    public DeviceReportUpdateEvent deviceReportUpdateEvent;
    public Notification withDeviceReportUpdateEvent(DeviceReportUpdateEvent deviceReportUpdateEvent) {
        this.deviceReportUpdateEvent = deviceReportUpdateEvent;
        return this;
    }
    
    /**
     * The ID of the enterprise for which the notification is sent. This will always be present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enterpriseId")
    public String enterpriseId;
    public Notification withEnterpriseId(String enterpriseId) {
        this.enterpriseId = enterpriseId;
        return this;
    }
    
    /**
     * An event generated when an app installation failed on a device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installFailureEvent")
    public InstallFailureEvent installFailureEvent;
    public Notification withInstallFailureEvent(InstallFailureEvent installFailureEvent) {
        this.installFailureEvent = installFailureEvent;
        return this;
    }
    
    /**
     * An event generated when a new device is ready to be managed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newDeviceEvent")
    public NewDeviceEvent newDeviceEvent;
    public Notification withNewDeviceEvent(NewDeviceEvent newDeviceEvent) {
        this.newDeviceEvent = newDeviceEvent;
        return this;
    }
    
    /**
     * An event generated when new permissions are added to an app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newPermissionsEvent")
    public NewPermissionsEvent newPermissionsEvent;
    public Notification withNewPermissionsEvent(NewPermissionsEvent newPermissionsEvent) {
        this.newPermissionsEvent = newPermissionsEvent;
        return this;
    }
    
    /**
     * Type of the notification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notificationType")
    public NotificationNotificationTypeEnum notificationType;
    public Notification withNotificationType(NotificationNotificationTypeEnum notificationType) {
        this.notificationType = notificationType;
        return this;
    }
    
    /**
     * An event generated when a product's approval status is changed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productApprovalEvent")
    public ProductApprovalEvent productApprovalEvent;
    public Notification withProductApprovalEvent(ProductApprovalEvent productApprovalEvent) {
        this.productApprovalEvent = productApprovalEvent;
        return this;
    }
    
    /**
     * An event generated whenever a product's availability changes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productAvailabilityChangeEvent")
    public ProductAvailabilityChangeEvent productAvailabilityChangeEvent;
    public Notification withProductAvailabilityChangeEvent(ProductAvailabilityChangeEvent productAvailabilityChangeEvent) {
        this.productAvailabilityChangeEvent = productAvailabilityChangeEvent;
        return this;
    }
    
    /**
     * The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestampMillis")
    public String timestampMillis;
    public Notification withTimestampMillis(String timestampMillis) {
        this.timestampMillis = timestampMillis;
        return this;
    }
    
}
