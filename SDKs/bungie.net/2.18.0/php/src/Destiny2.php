<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Destiny2 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns the action token if user approves the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenResponse
     */
	public function destiny2AwaGetActionToken(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Awa/GetActionToken/{correlationId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaGetActionTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Initialize a request to perform an advanced write action.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaInitializeRequestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaInitializeRequestResponse
     */
	public function destiny2AwaInitializeRequest(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaInitializeRequestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaInitializeRequestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Awa/Initialize/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaInitializeRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Provide the result of the user interaction. Called by the Bungie Destiny App to approve or reject a request.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaProvideAuthorizationResultResponse
     */
	public function destiny2AwaProvideAuthorizationResult(
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaProvideAuthorizationResultResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Awa/AwaProvideAuthorizationResult/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2AwaProvideAuthorizationResultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Clear the identifiers and items of a loadout.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2ClearLoadoutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2ClearLoadoutResponse
     */
	public function destiny2ClearLoadout(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2ClearLoadoutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2ClearLoadoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Loadouts/ClearLoadout/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2ClearLoadoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemResponse
     */
	public function destiny2EquipItem(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/EquipItem/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemsResponse
     */
	public function destiny2EquipItems(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/EquipItems/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipItemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Equip a loadout. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipLoadoutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipLoadoutResponse
     */
	public function destiny2EquipLoadout(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipLoadoutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipLoadoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Loadouts/EquipLoadout/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2EquipLoadoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets activity history stats for indicated character.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetActivityHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetActivityHistoryResponse
     */
	public function destiny2GetActivityHistory(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetActivityHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetActivityHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetActivityHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetActivityHistoryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetActivityHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns character information for the supplied character.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCharacterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCharacterResponse
     */
	public function destiny2GetCharacter(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCharacterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCharacterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCharacterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetCharacterRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCharacterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanAggregateStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanAggregateStatsResponse
     */
	public function destiny2GetClanAggregateStats(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanAggregateStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanAggregateStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Stats/AggregateClanStats/{groupId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanAggregateStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanAggregateStatsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanAggregateStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the dictionary of values for the Clan Banner
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanBannerSourceResponse
     */
	public function destiny2GetClanBannerSource(
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanBannerSourceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Clan/ClanBannerDictionary/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanBannerSourceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanLeaderboardsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanLeaderboardsResponse
     */
	public function destiny2GetClanLeaderboards(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanLeaderboardsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanLeaderboardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanLeaderboardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanLeaderboardsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanLeaderboardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanWeeklyRewardStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanWeeklyRewardStateResponse
     */
	public function destiny2GetClanWeeklyRewardState(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanWeeklyRewardStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanWeeklyRewardStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Clan/{groupId}/WeeklyRewardState/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanWeeklyRewardStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetClanWeeklyRewardStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Given a Presentation Node that has Collectibles as direct descendants, this will return item details about those descendants in the context of the requesting character.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCollectibleNodeDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCollectibleNodeDetailsResponse
     */
	public function destiny2GetCollectibleNodeDetails(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCollectibleNodeDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCollectibleNodeDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Collectibles/{collectiblePresentationNodeHash}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCollectibleNodeDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetCollectibleNodeDetailsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetCollectibleNodeDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets all activities the character has participated in together with aggregate statistics for those activities.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyAggregateActivityStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyAggregateActivityStatsResponse
     */
	public function destiny2GetDestinyAggregateActivityStats(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyAggregateActivityStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyAggregateActivityStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyAggregateActivityStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyAggregateActivityStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyEntityDefinitionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyEntityDefinitionResponse
     */
	public function destiny2GetDestinyEntityDefinition(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyEntityDefinitionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyEntityDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Manifest/{entityType}/{hashIdentifier}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyEntityDefinitionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyEntityDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the current version of the manifest as a json object.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyManifestResponse
     */
	public function destiny2GetDestinyManifest(
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyManifestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Manifest/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetDestinyManifestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets historical stats for indicated character.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsResponse
     */
	public function destiny2GetHistoricalStats(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets historical stats definitions.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsDefinitionResponse
     */
	public function destiny2GetHistoricalStatsDefinition(
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsDefinitionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Stats/Definition/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsDefinitionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets aggregate historical stats organized around each character for a given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsForAccountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsForAccountResponse
     */
	public function destiny2GetHistoricalStatsForAccount(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsForAccountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsForAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsForAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsForAccountRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetHistoricalStatsForAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetItemRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetItemResponse
     */
	public function destiny2GetItem(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetItemRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetItemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetItemRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsResponse
     */
	public function destiny2GetLeaderboards(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsForCharacterRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsForCharacterResponse
     */
	public function destiny2GetLeaderboardsForCharacter(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsForCharacterRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsForCharacterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsForCharacterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsForCharacterRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLeaderboardsForCharacterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a summary information about all profiles linked to the requesting membership type/membership ID that have valid Destiny information. The passed-in Membership Type/Membership ID may be a Bungie.Net membership or a Destiny membership. It only returns the minimal amount of data to begin making more substantive requests, but will hopefully serve as a useful alternative to UserServices for people who just care about Destiny data. Note that it will only return linked accounts whose linkages you are allowed to view.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLinkedProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLinkedProfilesResponse
     */
	public function destiny2GetLinkedProfiles(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLinkedProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLinkedProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Profile/{membershipId}/LinkedProfiles/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLinkedProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetLinkedProfilesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetLinkedProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets the available post game carnage report for the activity ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPostGameCarnageReportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPostGameCarnageReportResponse
     */
	public function destiny2GetPostGameCarnageReport(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPostGameCarnageReportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPostGameCarnageReportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Stats/PostGameCarnageReport/{activityId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPostGameCarnageReportRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPostGameCarnageReportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns Destiny Profile information for the supplied membership.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetProfileRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetProfileResponse
     */
	public function destiny2GetProfile(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetProfileRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetProfileResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetProfileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetProfileRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetProfileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets custom localized content for the milestone of the given hash, if it exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestoneContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestoneContentResponse
     */
	public function destiny2GetPublicMilestoneContent(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestoneContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestoneContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Milestones/{milestoneHash}/Content/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestoneContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestoneContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets public information about currently available Milestones.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestonesResponse
     */
	public function destiny2GetPublicMilestones(
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestonesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Milestones/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicMilestonesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get items available from vendors where the vendors have items for sale that are common for everyone. If any portion of the Vendor's available inventory is character or account specific, we will be unable to return their data from this endpoint due to the way that available inventory is computed. As I am often guilty of saying: 'It's a long story...'
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicVendorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicVendorsResponse
     */
	public function destiny2GetPublicVendors(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicVendorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicVendorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Vendors/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicVendorsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetPublicVendorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets details about unique weapon usage, including all exotic weapons.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetUniqueWeaponHistoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetUniqueWeaponHistoryResponse
     */
	public function destiny2GetUniqueWeaponHistory(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetUniqueWeaponHistoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetUniqueWeaponHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetUniqueWeaponHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetUniqueWeaponHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the details of a specific Vendor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorResponse
     */
	public function destiny2GetVendor(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorsResponse
     */
	public function destiny2GetVendors(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/', \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2GetVendorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Request must include proof of permission for 'InsertPlugs' from the account owner.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugResponse
     */
	public function destiny2InsertSocketPlug(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/InsertSocketPlug/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Insert a 'free' plug into an item's socket. This does not require 'Advanced Write Action' authorization and is available to 3rd-party apps, but will only work on 'free and reversible' socket actions (Perks, Armor Mods, Shaders, Ornaments, etc.). You must have a valid Destiny Account, and the character must either be in a social space, in orbit, or offline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugFreeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugFreeResponse
     */
	public function destiny2InsertSocketPlugFree(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugFreeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugFreeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/InsertSocketPlugFree/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2InsertSocketPlugFreeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2PullFromPostmasterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2PullFromPostmasterResponse
     */
	public function destiny2PullFromPostmaster(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2PullFromPostmasterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2PullFromPostmasterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/PullFromPostmaster/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2PullFromPostmasterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerResponse
     */
	public function destiny2ReportOffensivePostGameCarnageReportPlayer(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/', \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2ReportOffensivePostGameCarnageReportPlayerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets a page list of Destiny items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyEntitiesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyEntitiesResponse
     */
	public function destiny2SearchDestinyEntities(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyEntitiesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyEntitiesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Armory/Search/{type}/{searchTerm}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyEntitiesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyEntitiesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyEntitiesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of Destiny memberships given a global Bungie Display Name. This method will hide overridden memberships due to cross save.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyPlayerByBungieNameRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyPlayerByBungieNameResponse
     */
	public function destiny2SearchDestinyPlayerByBungieName(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyPlayerByBungieNameRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyPlayerByBungieNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/SearchDestinyPlayerByBungieName/{membershipType}/', \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyPlayerByBungieNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2SearchDestinyPlayerByBungieNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Set the Lock State for an instanced item. You must have a valid Destiny Account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2SetItemLockStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2SetItemLockStateResponse
     */
	public function destiny2SetItemLockState(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2SetItemLockStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2SetItemLockStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/SetLockState/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2SetItemLockStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Set the Tracking State for an instanced item, if that item is a Quest or Bounty. You must have a valid Destiny Account. Yeah, it's an item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2SetQuestTrackedStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2SetQuestTrackedStateResponse
     */
	public function destiny2SetQuestTrackedState(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2SetQuestTrackedStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2SetQuestTrackedStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/SetTrackedState/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2SetQuestTrackedStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Snapshot a loadout with the currently equipped items.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2SnapshotLoadoutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2SnapshotLoadoutResponse
     */
	public function destiny2SnapshotLoadout(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2SnapshotLoadoutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2SnapshotLoadoutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Loadouts/SnapshotLoadout/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2SnapshotLoadoutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2TransferItemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2TransferItemResponse
     */
	public function destiny2TransferItem(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2TransferItemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2TransferItemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Items/TransferItem/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2TransferItemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update the color, icon, and name of a loadout.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Destiny2UpdateLoadoutIdentifiersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Destiny2UpdateLoadoutIdentifiersResponse
     */
	public function destiny2UpdateLoadoutIdentifiers(
        \OpenAPI\OpenAPI\Models\Operations\Destiny2UpdateLoadoutIdentifiersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Destiny2UpdateLoadoutIdentifiersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Destiny2/Actions/Loadouts/UpdateLoadoutIdentifiers/');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Destiny2UpdateLoadoutIdentifiersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}