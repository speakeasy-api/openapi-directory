"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Employee:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_employee(self, request: operations.AddEmployeeRequest, security: operations.AddEmployeeSecurity) -> operations.AddEmployeeResponse:
        r"""Add new employee
        New Employee API sends new employee data directly to Web Pay. Companies who use the New Hire Template in Web Pay may require additional fields when hiring employees. New Employee API Requests will honor these required fields.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddEmployeeRequest, base_url, '/v2/companies/{companyId}/employees', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "employee", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmployeeIDResponse])
                res.employee_id_response = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out
        elif http_res.status_code in [401, 403, 429]:
            pass

        return res

    def get_all_employees(self, request: operations.GetAllEmployeesRequest, security: operations.GetAllEmployeesSecurity) -> operations.GetAllEmployeesResponse:
        r"""Get all employees
        Get All Employees API will return employee data currently available in Web Pay.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAllEmployeesRequest, base_url, '/v2/companies/{companyId}/employees/', request)
        
        query_params = utils.get_query_params(operations.GetAllEmployeesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllEmployeesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.EmployeeInfo]])
                res.employee_infos = out
        elif http_res.status_code in [401, 403, 429]:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def get_employee(self, request: operations.GetEmployeeRequest, security: operations.GetEmployeeSecurity) -> operations.GetEmployeeResponse:
        r"""Get employee
        Get Employee API will return employee data currently available in Web Pay.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmployeeRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Employee])
                res.employee = out
        elif http_res.status_code in [401, 403, 429]:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    def update_employee(self, request: operations.UpdateEmployeeRequest, security: operations.UpdateEmployeeSecurity) -> operations.UpdateEmployeeResponse:
        r"""Update employee
        Update Employee API will update existing employee data in WebPay.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateEmployeeRequest, base_url, '/v2/companies/{companyId}/employees/{employeeId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "employee", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 401, 403, 429]:
            pass
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Error]])
                res.errors = out

        return res

    