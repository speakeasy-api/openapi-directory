<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * CreateShipmentFromQuoteRequest - This complex type contains the request payload for the <b>createFromShippingQuote</b> method.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class CreateShipmentFromQuoteRequest
{
    /**
     * Supply a list of one or more shipping options that the seller wants to purchase for this shipment.  <br><br>The <b>baseShippingCost</b> field that's associated with the selected shipping rate is the cost of the base service offered in the rate. In addition to the base service, sellers can add additional shipping services to the base service. Shipping options include things such as shipping insurance or a recipient's signature upon delivery. The cost of any added services is summed with the base shipping cost to determine the final cost for the shipment. All options added to the shipment must be chosen from the set of shipping options offered with the selected rate.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\AdditionalOption> $additionalOptions
     */
	#[\JMS\Serializer\Annotation\SerializedName('additionalOptions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\AdditionalOption>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $additionalOptions = null;
    
    /**
     * Optional text to be printed on the shipping label if the selected shipping carrier supports custom messages on their labels.
     * 
     * @var ?string $labelCustomMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('labelCustomMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $labelCustomMessage = null;
    
    /**
     * The seller's desired label size. Any supplied value is applied only if the shipping carrier supports multiple label sizes, otherwise the carrier's default label size is used.  <br><brCurrently, the only valid value is: <code>4"x6"</code>
     * 
     * @var ?string $labelSize
     */
	#[\JMS\Serializer\Annotation\SerializedName('labelSize')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $labelSize = null;
    
    /**
     * The eBay-assigned ID of the shipping rate that the seller selected for the shipment. This value is generated by a call to <b>createShippingQuote</b> and is returned in the <b>rates.rateId</b> field.
     * 
     * @var ?string $rateId
     */
	#[\JMS\Serializer\Annotation\SerializedName('rateId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $rateId = null;
    
    /**
     * This complex type contains contact information for an individual buyer or seller.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Contact $returnTo
     */
	#[\JMS\Serializer\Annotation\SerializedName('returnTo')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Contact')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Contact $returnTo = null;
    
    /**
     * The unique eBay-assigned ID of the shipping quote that was generated by a call to <b>createShippingQuote</b>.
     * 
     * @var ?string $shippingQuoteId
     */
	#[\JMS\Serializer\Annotation\SerializedName('shippingQuoteId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $shippingQuoteId = null;
    
	public function __construct()
	{
		$this->additionalOptions = null;
		$this->labelCustomMessage = null;
		$this->labelSize = null;
		$this->rateId = null;
		$this->returnTo = null;
		$this->shippingQuoteId = null;
	}
}
