/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;

public class GetFloatingIpsId200ApplicationJSONFloatingIp {
    /**
     * Whether the IP is blocked
     */
    @JsonProperty("blocked")
    public Boolean blocked;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withBlocked(Boolean blocked) {
        this.blocked = blocked;
        return this;
    }
    
    /**
     * Point in time when the Resource was created (in ISO-8601 format)
     */
    @JsonProperty("created")
    public String created;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withCreated(String created) {
        this.created = created;
        return this;
    }
    
    /**
     * Description of the Resource
     */
    @JsonProperty("description")
    public String description;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Array of reverse DNS entries
     */
    @JsonProperty("dns_ptr")
    public GetFloatingIpsId200ApplicationJSONFloatingIpDnsPtr[] dnsPtr;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withDnsPtr(GetFloatingIpsId200ApplicationJSONFloatingIpDnsPtr[] dnsPtr) {
        this.dnsPtr = dnsPtr;
        return this;
    }
    
    /**
     * Location the Floating IP was created in. Routing is optimized for this Location.
     */
    @JsonProperty("home_location")
    public GetFloatingIpsId200ApplicationJSONFloatingIpHomeLocation homeLocation;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withHomeLocation(GetFloatingIpsId200ApplicationJSONFloatingIpHomeLocation homeLocation) {
        this.homeLocation = homeLocation;
        return this;
    }
    
    /**
     * ID of the Resource
     */
    @JsonProperty("id")
    public Long id;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * IP address
     */
    @JsonProperty("ip")
    public String ip;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withIp(String ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * User-defined labels (key-value pairs)
     */
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Name of the Resource. Must be unique per Project.
     */
    @JsonProperty("name")
    public String name;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Protection configuration for the Resource
     */
    @JsonProperty("protection")
    public GetFloatingIpsId200ApplicationJSONFloatingIpProtection protection;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withProtection(GetFloatingIpsId200ApplicationJSONFloatingIpProtection protection) {
        this.protection = protection;
        return this;
    }
    
    /**
     * ID of the Server the Floating IP is assigned to, null if it is not assigned at all
     */
    @JsonProperty("server")
    public Long server;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withServer(Long server) {
        this.server = server;
        return this;
    }
    
    /**
     * Type of the Floating IP
     */
    @JsonProperty("type")
    public GetFloatingIpsId200ApplicationJSONFloatingIpTypeEnum type;
    public GetFloatingIpsId200ApplicationJSONFloatingIp withType(GetFloatingIpsId200ApplicationJSONFloatingIpTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
