/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Pivot - Describes the visible dimension columns and rows in the report response.
 */
public class Pivot {
    /**
     * Dimension names for visible columns in the report response. Including "dateRange" produces a date range column; for each row in the response, dimension values in the date range column will indicate the corresponding date range from the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fieldNames")
    public String[] fieldNames;
    public Pivot withFieldNames(String[] fieldNames) {
        this.fieldNames = fieldNames;
        return this;
    }
    
    /**
     * The number of unique combinations of dimension values to return in this pivot. The `limit` parameter is required. A `limit` of 10,000 is common for single pivot requests. The product of the `limit` for each `pivot` in a `RunPivotReportRequest` must not exceed 100,000. For example, a two pivot request with `limit: 1000` in each pivot will fail because the product is `1,000,000`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public String limit;
    public Pivot withLimit(String limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Aggregate the metrics by dimensions in this pivot using the specified metric_aggregations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricAggregations")
    public PivotMetricAggregationsEnum[] metricAggregations;
    public Pivot withMetricAggregations(PivotMetricAggregationsEnum[] metricAggregations) {
        this.metricAggregations = metricAggregations;
        return this;
    }
    
    /**
     * The row count of the start row. The first row is counted as row 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    public String offset;
    public Pivot withOffset(String offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Specifies how dimensions are ordered in the pivot. In the first Pivot, the OrderBys determine Row and PivotDimensionHeader ordering; in subsequent Pivots, the OrderBys determine only PivotDimensionHeader ordering. Dimensions specified in these OrderBys must be a subset of Pivot.field_names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderBys")
    public OrderBy[] orderBys;
    public Pivot withOrderBys(OrderBy[] orderBys) {
        this.orderBys = orderBys;
        return this;
    }
    
}
