<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * UpdateOrganizationAlertsProfileRequestBodyAlertCondition - The conditions that determine if the alert triggers
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class UpdateOrganizationAlertsProfileRequestBodyAlertCondition
{
    /**
     * The threshold the metric must cross to be valid for alerting. Used only for WAN Utilization alerts.
     * 
     * @var ?int $bitRateBps
     */
	#[\JMS\Serializer\Annotation\SerializedName('bit_rate_bps')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $bitRateBps = null;
    
    /**
     * The total duration in seconds that the threshold should be crossed before alerting
     * 
     * @var ?int $duration
     */
	#[\JMS\Serializer\Annotation\SerializedName('duration')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $duration = null;
    
    /**
     * The uplink observed for the alert.  interface must be one of the following: wan1, wan2, cellular
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequestBodyAlertConditionInterfaceEnum $interface
     */
	#[\JMS\Serializer\Annotation\SerializedName('interface')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationAlertsProfileRequestBodyAlertConditionInterfaceEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UpdateOrganizationAlertsProfileRequestBodyAlertConditionInterfaceEnum $interface = null;
    
    /**
     * The threshold the metric must cross to be valid for alerting. Used only for VoIP Jitter alerts.
     * 
     * @var ?int $jitterMs
     */
	#[\JMS\Serializer\Annotation\SerializedName('jitter_ms')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $jitterMs = null;
    
    /**
     * The threshold the metric must cross to be valid for alerting. Used only for WAN Latency alerts.
     * 
     * @var ?int $latencyMs
     */
	#[\JMS\Serializer\Annotation\SerializedName('latency_ms')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $latencyMs = null;
    
    /**
     * The threshold the metric must cross to be valid for alerting. Used only for Packet Loss alerts.
     * 
     * @var ?float $lossRatio
     */
	#[\JMS\Serializer\Annotation\SerializedName('loss_ratio')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $lossRatio = null;
    
    /**
     * The threshold the metric must drop below to be valid for alerting. Used only for VoIP MOS alerts.
     * 
     * @var ?float $mos
     */
	#[\JMS\Serializer\Annotation\SerializedName('mos')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $mos = null;
    
    /**
     * The look back period in seconds for sensing the alert
     * 
     * @var ?int $window
     */
	#[\JMS\Serializer\Annotation\SerializedName('window')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $window = null;
    
	public function __construct()
	{
		$this->bitRateBps = null;
		$this->duration = null;
		$this->interface = null;
		$this->jitterMs = null;
		$this->latencyMs = null;
		$this->lossRatio = null;
		$this->mos = null;
		$this->window = null;
	}
}
