// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type SubscribeHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// SubscribeRequestBodyTarget - Information about the Chatbot topics or Chatbot clients associated with a notification rule.
type SubscribeRequestBodyTarget struct {
	TargetAddress *string `json:"TargetAddress,omitempty"`
	TargetType    *string `json:"TargetType,omitempty"`
}

type SubscribeRequestBody struct {
	// The Amazon Resource Name (ARN) of the notification rule for which you want to create the association.
	Arn string `json:"Arn"`
	// An enumeration token that, when provided in a request, returns the next batch of the results.
	ClientRequestToken *string `json:"ClientRequestToken,omitempty"`
	// Information about the Chatbot topics or Chatbot clients associated with a notification rule.
	Target SubscribeRequestBodyTarget `json:"Target"`
}

type SubscribeRequest struct {
	Headers SubscribeHeaders
	Request SubscribeRequestBody `request:"mediaType=application/json"`
}

type SubscribeResponse struct {
	// ConfigurationException
	ConfigurationException interface{}
	ContentType            string
	StatusCode             int
	RawResponse            *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	SubscribeResult *shared.SubscribeResult
	// ValidationException
	ValidationException interface{}
}
