<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TargetSslProxies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes the specified TargetSslProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteResponse
     */
	public function computeTargetSslProxiesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies/{targetSslProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified TargetSslProxy resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetResponse
     */
	public function computeTargetSslProxiesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies/{targetSslProxy}', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetSslProxy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetSslProxy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a TargetSslProxy resource in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertResponse
     */
	public function computeTargetSslProxiesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetSslProxy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of TargetSslProxy resources available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListResponse
     */
	public function computeTargetSslProxiesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->targetSslProxyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TargetSslProxyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the BackendService for TargetSslProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceResponse
     */
	public function computeTargetSslProxiesSetBackendService(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetSslProxiesSetBackendServiceRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetBackendServiceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the Certificate Map for TargetSslProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapResponse
     */
	public function computeTargetSslProxiesSetCertificateMap(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetSslProxiesSetCertificateMapRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetCertificateMapResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the ProxyHeaderType for TargetSslProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderResponse
     */
	public function computeTargetSslProxiesSetProxyHeader(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetSslProxiesSetProxyHeaderRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetProxyHeaderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes SslCertificates for TargetSslProxy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesResponse
     */
	public function computeTargetSslProxiesSetSslCertificates(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "targetSslProxiesSetSslCertificatesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslCertificatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicyResponse
     */
	public function computeTargetSslProxiesSetSslPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy', \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "sslPolicyReference", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeTargetSslProxiesSetSslPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}