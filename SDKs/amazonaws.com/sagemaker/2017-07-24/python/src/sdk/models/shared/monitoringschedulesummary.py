"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import monitoringtype_enum as shared_monitoringtype_enum
from ..shared import schedulestatus_enum as shared_schedulestatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MonitoringScheduleSummary:
    r"""Summarizes the monitoring schedule."""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    last_modified_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModifiedTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    monitoring_schedule_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringScheduleArn') }})  
    monitoring_schedule_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringScheduleName') }})  
    monitoring_schedule_status: shared_schedulestatus_enum.ScheduleStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringScheduleStatus') }})  
    endpoint_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndpointName'), 'exclude': lambda f: f is None }})  
    monitoring_job_definition_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringJobDefinitionName'), 'exclude': lambda f: f is None }})  
    monitoring_type: Optional[shared_monitoringtype_enum.MonitoringTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoringType'), 'exclude': lambda f: f is None }})  
    