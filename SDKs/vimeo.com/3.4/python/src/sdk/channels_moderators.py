"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelsModerators:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_channel_moderator(self, request: operations.AddChannelModeratorRequest, security: operations.AddChannelModeratorSecurity) -> operations.AddChannelModeratorResponse:
        r"""Add a specific channel moderator"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddChannelModeratorRequest, base_url, '/channels/{channel_id}/moderators/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddChannelModeratorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def add_channel_moderators(self, request: operations.AddChannelModeratorsRequest, security: operations.AddChannelModeratorsSecurity) -> operations.AddChannelModeratorsResponse:
        r"""Add a list of channel moderators"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddChannelModeratorsRequest, base_url, '/channels/{channel_id}/moderators', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddChannelModeratorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def get_channel_moderator(self, request: operations.GetChannelModeratorRequest) -> operations.GetChannelModeratorResponse:
        r"""Get a specific channel moderator"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelModeratorRequest, base_url, '/channels/{channel_id}/moderators/{user_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelModeratorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out

        return res

    def get_channel_moderators(self, request: operations.GetChannelModeratorsRequest) -> operations.GetChannelModeratorsResponse:
        r"""Get all the moderators in a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChannelModeratorsRequest, base_url, '/channels/{channel_id}/moderators', request)
        
        query_params = utils.get_query_params(operations.GetChannelModeratorsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChannelModeratorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out

        return res

    def remove_channel_moderator(self, request: operations.RemoveChannelModeratorRequest, security: operations.RemoveChannelModeratorSecurity) -> operations.RemoveChannelModeratorResponse:
        r"""Remove a specific channel moderator"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveChannelModeratorRequest, base_url, '/channels/{channel_id}/moderators/{user_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveChannelModeratorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def remove_channel_moderators(self, request: operations.RemoveChannelModeratorsRequest, security: operations.RemoveChannelModeratorsSecurity) -> operations.RemoveChannelModeratorsResponse:
        r"""Remove a list of channel moderators"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RemoveChannelModeratorsRequest, base_url, '/channels/{channel_id}/moderators', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RemoveChannelModeratorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.user+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def replace_channel_moderators(self, request: operations.ReplaceChannelModeratorsRequest, security: operations.ReplaceChannelModeratorsSecurity) -> operations.ReplaceChannelModeratorsResponse:
        r"""Replace the moderators of a channel"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplaceChannelModeratorsRequest, base_url, '/channels/{channel_id}/moderators', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplaceChannelModeratorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out
        elif http_res.status_code in [403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    