<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Accounts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an account
     * 
     * Deletes an account. This operation is not reversible without contacting support.
     * This operation can be called multiple times successfully.
     * 
     * Deleting an account will remove all connected people from that account.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteV2AccountsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteV2AccountsIdJsonResponse
     */
	public function deleteV2AccountsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\DeleteV2AccountsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteV2AccountsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/{id}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteV2AccountsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteV2AccountsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List accounts
     * 
     * Fetches multiple account records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsJsonResponse
     */
	public function getV2AccountsJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2AccountsJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetch an account
     * 
     * Fetches an account, by ID only.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsIdJsonResponse
     */
	public function getV2AccountsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2AccountsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Create an account
     * 
     * Creates an account.
     * 
     * "domain" must be unique on the current team.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostV2AccountsJsonRequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV2AccountsJsonResponse
     */
	public function postV2AccountsJson(
        \OpenAPI\OpenAPI\Models\Operations\PostV2AccountsJsonRequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV2AccountsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV2AccountsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update an existing Account
     * 
     * Updates an account.
     * 
     * "domain" must be unique on the current team.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutV2AccountsIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutV2AccountsIdJsonResponse
     */
	public function putV2AccountsIdJson(
        \OpenAPI\OpenAPI\Models\Operations\PutV2AccountsIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutV2AccountsIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/accounts/{id}.json', \OpenAPI\OpenAPI\Models\Operations\PutV2AccountsIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutV2AccountsIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}