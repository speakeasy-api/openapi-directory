/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { HttpMethodEnum } from "./httpmethodenum";
import { InfoSummaries } from "./infosummaries";
import { LinkParameter3 } from "./linkparameter3";
import { Expose, Transform, Type } from "class-transformer";

export class Link3 extends SpeakeasyBase {
  /**
   * indicates whether all optionals params have been provided
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allOptionalParamsProvided" })
  allOptionalParamsProvided?: boolean;

  /**
   * indicates whether all required params have been provided
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allRequiredParamsProvided" })
  allRequiredParamsProvided?: boolean;

  /**
   * The description of the link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The documentation related to this operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "docUrl" })
  docUrl?: string;

  /**
   * Indicate the relative uri for this link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "href" })
  href: string;

  @SpeakeasyMetadata()
  @Expose({ name: "info" })
  @Type(() => InfoSummaries)
  info?: InfoSummaries;

  /**
   * The label corresponding to the link. This label is automatically translated based on the Accept-Language http header.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label" })
  label?: string;

  /**
   * Indicate the http method to use on this link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "method" })
  method?: HttpMethodEnum;

  /**
   * The operationId to call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operationId" })
  operationId?: string;

  @SpeakeasyMetadata({ elemType: LinkParameter3 })
  @Expose({ name: "parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LinkParameter3> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LinkParameter3);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, LinkParameter3>;

  /**
   * Indicate the relation name related to the link
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rel" })
  rel?: string;

  /**
   * indicates whether the href is templated or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "urlTemplated" })
  urlTemplated?: boolean;
}
