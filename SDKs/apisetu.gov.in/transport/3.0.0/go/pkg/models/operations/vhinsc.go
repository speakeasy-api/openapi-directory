// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type VhinscSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type VhinscRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Aadhaar number
	UID string `json:"UID"`
	// Chassis No
	ChasisNo string `json:"chasis_no"`
	// Vehicle Registration No
	RegNo string `json:"reg_no"`
	// Son / Wife / Daughter of
	SwdName string `json:"swd_name"`
}

// VhinscRequestBodyFormatEnum - The format of the certificate in response.
type VhinscRequestBodyFormatEnum string

const (
	VhinscRequestBodyFormatEnumPdf VhinscRequestBodyFormatEnum = "pdf"
)

func (e *VhinscRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = VhinscRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VhinscRequestBodyFormatEnum: %s", s)
	}
}

// VhinscRequestBody - Request format
type VhinscRequestBody struct {
	CertificateParameters *VhinscRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema           `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format VhinscRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type VhinscRequest struct {
	// Request format
	Request  *VhinscRequestBody `request:"mediaType=application/json"`
	Security VhinscSecurity
}

type Vhinsc504ApplicationJSONErrorEnum string

const (
	Vhinsc504ApplicationJSONErrorEnumGatewayTimeout Vhinsc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Vhinsc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Vhinsc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Vhinsc504ApplicationJSONErrorDescriptionEnum string

const (
	Vhinsc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Vhinsc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Vhinsc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Vhinsc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Vhinsc504ApplicationJSON - Gateway timeout
type Vhinsc504ApplicationJSON struct {
	Error            *Vhinsc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhinsc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhinsc503ApplicationJSONErrorEnum string

const (
	Vhinsc503ApplicationJSONErrorEnumServiceUnavailable Vhinsc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Vhinsc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Vhinsc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Vhinsc503ApplicationJSONErrorDescriptionEnum string

const (
	Vhinsc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Vhinsc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Vhinsc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Vhinsc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Vhinsc503ApplicationJSON - Service unavailable
type Vhinsc503ApplicationJSON struct {
	Error            *Vhinsc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhinsc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhinsc502ApplicationJSONErrorEnum string

const (
	Vhinsc502ApplicationJSONErrorEnumBadGatewy Vhinsc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Vhinsc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Vhinsc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Vhinsc502ApplicationJSONErrorDescriptionEnum string

const (
	Vhinsc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Vhinsc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Vhinsc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Vhinsc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Vhinsc502ApplicationJSON - Bad gateway
type Vhinsc502ApplicationJSON struct {
	Error            *Vhinsc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhinsc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhinsc500ApplicationJSONErrorEnum string

const (
	Vhinsc500ApplicationJSONErrorEnumInternalServerError Vhinsc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Vhinsc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Vhinsc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Vhinsc500ApplicationJSONErrorDescriptionEnum string

const (
	Vhinsc500ApplicationJSONErrorDescriptionEnumInternalServerError Vhinsc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Vhinsc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Vhinsc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Vhinsc500ApplicationJSON - Internal server error
type Vhinsc500ApplicationJSON struct {
	Error            *Vhinsc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhinsc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhinsc404ApplicationJSONErrorEnum string

const (
	Vhinsc404ApplicationJSONErrorEnumRecordNotFound Vhinsc404ApplicationJSONErrorEnum = "record_not_found"
	Vhinsc404ApplicationJSONErrorEnumURLNotFound    Vhinsc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Vhinsc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Vhinsc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Vhinsc404ApplicationJSONErrorDescriptionEnum string

const (
	Vhinsc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Vhinsc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Vhinsc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Vhinsc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Vhinsc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Vhinsc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Vhinsc404ApplicationJSON - No record found
type Vhinsc404ApplicationJSON struct {
	Error            *Vhinsc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhinsc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhinsc401ApplicationJSONErrorEnum string

const (
	Vhinsc401ApplicationJSONErrorEnumInvalidAuthentication Vhinsc401ApplicationJSONErrorEnum = "invalid_authentication"
	Vhinsc401ApplicationJSONErrorEnumInvalidAuthorization  Vhinsc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Vhinsc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Vhinsc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Vhinsc401ApplicationJSONErrorDescriptionEnum string

const (
	Vhinsc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Vhinsc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Vhinsc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Vhinsc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Vhinsc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Vhinsc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Vhinsc401ApplicationJSON - Unauthorized access
type Vhinsc401ApplicationJSON struct {
	Error            *Vhinsc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhinsc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Vhinsc400ApplicationJSONErrorEnum string

const (
	Vhinsc400ApplicationJSONErrorEnumMissingParameter Vhinsc400ApplicationJSONErrorEnum = "missing_parameter"
	Vhinsc400ApplicationJSONErrorEnumInvalidParameter Vhinsc400ApplicationJSONErrorEnum = "invalid_parameter"
	Vhinsc400ApplicationJSONErrorEnumInvalidFormat    Vhinsc400ApplicationJSONErrorEnum = "invalid_format"
	Vhinsc400ApplicationJSONErrorEnumInvalidTxnid     Vhinsc400ApplicationJSONErrorEnum = "invalid_txnid"
	Vhinsc400ApplicationJSONErrorEnumInvalidConsentid Vhinsc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Vhinsc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Vhinsc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Vhinsc400ApplicationJSONErrorDescriptionEnum string

const (
	Vhinsc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Vhinsc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Vhinsc400ApplicationJSONErrorDescriptionEnumBadRequest                              Vhinsc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Vhinsc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Vhinsc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Vhinsc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Vhinsc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Vhinsc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Vhinsc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Vhinsc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Vhinsc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Vhinsc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Vhinsc400ApplicationJSON - Bad request
type Vhinsc400ApplicationJSON struct {
	Error            *Vhinsc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Vhinsc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type VhinscResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Vhinsc400ApplicationJSONObject *Vhinsc400ApplicationJSON
	// Unauthorized access
	Vhinsc401ApplicationJSONObject *Vhinsc401ApplicationJSON
	// No record found
	Vhinsc404ApplicationJSONObject *Vhinsc404ApplicationJSON
	// Internal server error
	Vhinsc500ApplicationJSONObject *Vhinsc500ApplicationJSON
	// Bad gateway
	Vhinsc502ApplicationJSONObject *Vhinsc502ApplicationJSON
	// Service unavailable
	Vhinsc503ApplicationJSONObject *Vhinsc503ApplicationJSON
	// Gateway timeout
	Vhinsc504ApplicationJSONObject *Vhinsc504ApplicationJSON
}
