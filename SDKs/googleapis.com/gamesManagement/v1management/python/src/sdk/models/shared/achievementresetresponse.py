"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AchievementResetResponse:
    r"""An achievement reset response."""
    
    current_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentState'), 'exclude': lambda f: f is None }})
    r"""The current state of the achievement. This is the same as the initial state of the achievement. Possible values are: - \\"`HIDDEN`\\"- Achievement is hidden. - \\"`REVEALED`\\" - Achievement is revealed. - \\"`UNLOCKED`\\" - Achievement is unlocked."""  
    definition_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('definitionId'), 'exclude': lambda f: f is None }})
    r"""The ID of an achievement for which player state has been updated."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#achievementResetResponse`."""  
    update_occurred: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateOccurred'), 'exclude': lambda f: f is None }})
    r"""Flag to indicate if the requested update actually occurred."""  
    