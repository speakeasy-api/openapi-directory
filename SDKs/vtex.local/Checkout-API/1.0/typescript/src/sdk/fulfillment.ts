/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Fulfillment {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get address by postal code
   *
   * @remarks
   * Retrieves address information for a given postal code and country.
   *
   * This request can be used to implement auto complete functionality when a customer needs to fill in an address.
   */
  getAddressByPostalCode(
    req: operations.GetAddressByPostalCodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAddressByPostalCodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAddressByPostalCodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/checkout/pub/postal-code/{countryCode}/{postalCode}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAddressByPostalCodeResponse =
        new operations.GetAddressByPostalCodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List pickup points by location
   * 
   * @remarks
   * Retrieves information on pickup points close to a given location determined by geocoordinates or postal code.
   * 
   * 
The pickup points returned are not necessarily all active ones. Make sure to validate the information consumed by integrations.
   */
  listPickupPpointsByLocation(
    req: operations.ListPickupPpointsByLocationRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPickupPpointsByLocationResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListPickupPpointsByLocationRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/api/checkout/pub/pickup-points";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListPickupPpointsByLocationResponse =
        new operations.ListPickupPpointsByLocationResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }
}
