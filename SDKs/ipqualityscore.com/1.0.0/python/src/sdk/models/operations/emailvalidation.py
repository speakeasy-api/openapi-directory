"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class EmailValidationRequest:
    
    user_email_here: str = dataclasses.field(metadata={'path_param': { 'field_name': 'USER_EMAIL_HERE', 'style': 'simple', 'explode': False }})
    r"""(Required) USER_EMAIL_HERE"""  
    your_api_key_here: str = dataclasses.field(metadata={'path_param': { 'field_name': 'YOUR_API_KEY_HERE', 'style': 'simple', 'explode': False }})
    r"""(Required) YOUR_API_KEY_HERE"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidation500ApplicationJSON:
    r"""Unexpected error"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidation400ApplicationJSON:
    r"""Bad Request"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidation200ApplicationJSONAssociatedNames:
    
    names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('names'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidation200ApplicationJSONAssociatedPhoneNumbers:
    
    phone_numbers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phone_numbers'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidation200ApplicationJSONDomainAge:
    
    human: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('human'), 'exclude': lambda f: f is None }})  
    iso: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iso'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidation200ApplicationJSONFirstSeen:
    
    human: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('human'), 'exclude': lambda f: f is None }})  
    iso: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iso'), 'exclude': lambda f: f is None }})  
    timestamp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EmailValidation200ApplicationJSON:
    r"""Successful response"""
    
    associated_names: Optional[EmailValidation200ApplicationJSONAssociatedNames] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associated_names'), 'exclude': lambda f: f is None }})  
    associated_phone_numbers: Optional[EmailValidation200ApplicationJSONAssociatedPhoneNumbers] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associated_phone_numbers'), 'exclude': lambda f: f is None }})  
    catch_all: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catch_all'), 'exclude': lambda f: f is None }})  
    common: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('common'), 'exclude': lambda f: f is None }})  
    deliverability: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliverability'), 'exclude': lambda f: f is None }})  
    disposable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disposable'), 'exclude': lambda f: f is None }})  
    dns_valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dns_valid'), 'exclude': lambda f: f is None }})  
    domain_age: Optional[EmailValidation200ApplicationJSONDomainAge] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_age'), 'exclude': lambda f: f is None }})  
    domain_velocity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain_velocity'), 'exclude': lambda f: f is None }})  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_name'), 'exclude': lambda f: f is None }})  
    first_seen: Optional[EmailValidation200ApplicationJSONFirstSeen] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen'), 'exclude': lambda f: f is None }})  
    fraud_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fraud_score'), 'exclude': lambda f: f is None }})  
    frequent_complainer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('frequent_complainer'), 'exclude': lambda f: f is None }})  
    generic: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generic'), 'exclude': lambda f: f is None }})  
    honeypot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('honeypot'), 'exclude': lambda f: f is None }})  
    leaked: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leaked'), 'exclude': lambda f: f is None }})  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    overall_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overall_score'), 'exclude': lambda f: f is None }})  
    recent_abuse: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recent_abuse'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request_id'), 'exclude': lambda f: f is None }})  
    sanitized_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sanitized_email'), 'exclude': lambda f: f is None }})  
    smtp_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_score'), 'exclude': lambda f: f is None }})  
    spam_trap_score: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spam_trap_score'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    suggested_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suggested_domain'), 'exclude': lambda f: f is None }})  
    suspect: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspect'), 'exclude': lambda f: f is None }})  
    timed_out: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timed_out'), 'exclude': lambda f: f is None }})  
    user_activity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_activity'), 'exclude': lambda f: f is None }})  
    valid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class EmailValidationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    email_validation_200_application_json_object: Optional[EmailValidation200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful response"""  
    email_validation_400_application_json_object: Optional[EmailValidation400ApplicationJSON] = dataclasses.field(default=None)
    r"""Bad Request"""  
    email_validation_500_application_json_object: Optional[EmailValidation500ApplicationJSON] = dataclasses.field(default=None)
    r"""Unexpected error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    