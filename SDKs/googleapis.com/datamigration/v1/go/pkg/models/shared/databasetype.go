// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DatabaseTypeEngineEnum - The database engine.
type DatabaseTypeEngineEnum string

const (
	DatabaseTypeEngineEnumDatabaseEngineUnspecified DatabaseTypeEngineEnum = "DATABASE_ENGINE_UNSPECIFIED"
	DatabaseTypeEngineEnumMysql                     DatabaseTypeEngineEnum = "MYSQL"
	DatabaseTypeEngineEnumPostgresql                DatabaseTypeEngineEnum = "POSTGRESQL"
	DatabaseTypeEngineEnumOracle                    DatabaseTypeEngineEnum = "ORACLE"
)

func (e *DatabaseTypeEngineEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATABASE_ENGINE_UNSPECIFIED":
		fallthrough
	case "MYSQL":
		fallthrough
	case "POSTGRESQL":
		fallthrough
	case "ORACLE":
		*e = DatabaseTypeEngineEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseTypeEngineEnum: %s", s)
	}
}

// DatabaseTypeProviderEnum - The database provider.
type DatabaseTypeProviderEnum string

const (
	DatabaseTypeProviderEnumDatabaseProviderUnspecified DatabaseTypeProviderEnum = "DATABASE_PROVIDER_UNSPECIFIED"
	DatabaseTypeProviderEnumCloudsql                    DatabaseTypeProviderEnum = "CLOUDSQL"
	DatabaseTypeProviderEnumRds                         DatabaseTypeProviderEnum = "RDS"
	DatabaseTypeProviderEnumAurora                      DatabaseTypeProviderEnum = "AURORA"
	DatabaseTypeProviderEnumAlloydb                     DatabaseTypeProviderEnum = "ALLOYDB"
)

func (e *DatabaseTypeProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DATABASE_PROVIDER_UNSPECIFIED":
		fallthrough
	case "CLOUDSQL":
		fallthrough
	case "RDS":
		fallthrough
	case "AURORA":
		fallthrough
	case "ALLOYDB":
		*e = DatabaseTypeProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DatabaseTypeProviderEnum: %s", s)
	}
}

// DatabaseType - A message defining the database engine and provider.
type DatabaseType struct {
	// The database engine.
	Engine *DatabaseTypeEngineEnum `json:"engine,omitempty"`
	// The database provider.
	Provider *DatabaseTypeProviderEnum `json:"provider,omitempty"`
}
