<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateBotAliasRequestBody
{
    /**
     * Maps configuration information to a specific locale. You can use this parameter to specify a specific Lambda function to run different functions in different locales.
     * 
     * @var ?array<string, \OpenAPI\OpenAPI\Models\Shared\BotAliasLocaleSettings> $botAliasLocaleSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('botAliasLocaleSettings')]
    #[\JMS\Serializer\Annotation\Type('array<string, OpenAPI\OpenAPI\Models\Shared\BotAliasLocaleSettings>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $botAliasLocaleSettings = null;
    
    /**
     * The alias to create. The name must be unique for the bot.
     * 
     * @var string $botAliasName
     */
	#[\JMS\Serializer\Annotation\SerializedName('botAliasName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $botAliasName;
    
    /**
     * The version of the bot that this alias points to. You can use the <a href="https://docs.aws.amazon.com/lexv2/latest/APIReference/API_UpdateBotAlias.html">UpdateBotAlias</a> operation to change the bot version associated with the alias.
     * 
     * @var ?string $botVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('botVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $botVersion = null;
    
    /**
     * Configures conversation logging that saves audio, text, and metadata for the conversations with your users.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateBotAliasRequestBodyConversationLogSettings $conversationLogSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('conversationLogSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateBotAliasRequestBodyConversationLogSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateBotAliasRequestBodyConversationLogSettings $conversationLogSettings = null;
    
    /**
     * A description of the alias. Use this description to help identify the alias.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * Determines whether Amazon Lex will use Amazon Comprehend to detect the sentiment of user utterances.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateBotAliasRequestBodySentimentAnalysisSettings $sentimentAnalysisSettings
     */
	#[\JMS\Serializer\Annotation\SerializedName('sentimentAnalysisSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateBotAliasRequestBodySentimentAnalysisSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateBotAliasRequestBodySentimentAnalysisSettings $sentimentAnalysisSettings = null;
    
    /**
     * A list of tags to add to the bot alias. You can only add tags when you create an alias, you can't use the <code>UpdateBotAlias</code> operation to update the tags on a bot alias. To update tags, use the <code>TagResource</code> operation.
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
	public function __construct()
	{
		$this->botAliasLocaleSettings = null;
		$this->botAliasName = "";
		$this->botVersion = null;
		$this->conversationLogSettings = null;
		$this->description = null;
		$this->sentimentAnalysisSettings = null;
		$this->tags = null;
	}
}
