// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type MiipcSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type MiipcRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Policy Number
	Udf1 string `json:"UDF1"`
	// Customer Id
	Udf2 string `json:"UDF2"`
	// Policy Start Date
	Udf3 string `json:"UDF3"`
}

// MiipcRequestBodyFormatEnum - The format of the certificate in response.
type MiipcRequestBodyFormatEnum string

const (
	MiipcRequestBodyFormatEnumPdf MiipcRequestBodyFormatEnum = "pdf"
)

func (e *MiipcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = MiipcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MiipcRequestBodyFormatEnum: %s", s)
	}
}

// MiipcRequestBody - Request format
type MiipcRequestBody struct {
	CertificateParameters *MiipcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format MiipcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type MiipcRequest struct {
	// Request format
	Request  *MiipcRequestBody `request:"mediaType=application/json"`
	Security MiipcSecurity
}

type Miipc504ApplicationJSONErrorEnum string

const (
	Miipc504ApplicationJSONErrorEnumGatewayTimeout Miipc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Miipc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Miipc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Miipc504ApplicationJSONErrorDescriptionEnum string

const (
	Miipc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Miipc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Miipc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Miipc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Miipc504ApplicationJSON - Gateway timeout
type Miipc504ApplicationJSON struct {
	Error            *Miipc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Miipc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Miipc503ApplicationJSONErrorEnum string

const (
	Miipc503ApplicationJSONErrorEnumServiceUnavailable Miipc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Miipc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Miipc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Miipc503ApplicationJSONErrorDescriptionEnum string

const (
	Miipc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Miipc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Miipc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Miipc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Miipc503ApplicationJSON - Service unavailable
type Miipc503ApplicationJSON struct {
	Error            *Miipc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Miipc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Miipc502ApplicationJSONErrorEnum string

const (
	Miipc502ApplicationJSONErrorEnumBadGatewy Miipc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Miipc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Miipc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Miipc502ApplicationJSONErrorDescriptionEnum string

const (
	Miipc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Miipc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Miipc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Miipc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Miipc502ApplicationJSON - Bad gateway
type Miipc502ApplicationJSON struct {
	Error            *Miipc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Miipc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Miipc500ApplicationJSONErrorEnum string

const (
	Miipc500ApplicationJSONErrorEnumInternalServerError Miipc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Miipc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Miipc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Miipc500ApplicationJSONErrorDescriptionEnum string

const (
	Miipc500ApplicationJSONErrorDescriptionEnumInternalServerError Miipc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Miipc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Miipc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Miipc500ApplicationJSON - Internal server error
type Miipc500ApplicationJSON struct {
	Error            *Miipc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Miipc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Miipc404ApplicationJSONErrorEnum string

const (
	Miipc404ApplicationJSONErrorEnumRecordNotFound Miipc404ApplicationJSONErrorEnum = "record_not_found"
	Miipc404ApplicationJSONErrorEnumURLNotFound    Miipc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Miipc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Miipc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Miipc404ApplicationJSONErrorDescriptionEnum string

const (
	Miipc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Miipc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Miipc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Miipc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Miipc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Miipc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Miipc404ApplicationJSON - No record found
type Miipc404ApplicationJSON struct {
	Error            *Miipc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Miipc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Miipc401ApplicationJSONErrorEnum string

const (
	Miipc401ApplicationJSONErrorEnumInvalidAuthentication Miipc401ApplicationJSONErrorEnum = "invalid_authentication"
	Miipc401ApplicationJSONErrorEnumInvalidAuthorization  Miipc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Miipc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Miipc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Miipc401ApplicationJSONErrorDescriptionEnum string

const (
	Miipc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Miipc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Miipc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Miipc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Miipc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Miipc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Miipc401ApplicationJSON - Unauthorized access
type Miipc401ApplicationJSON struct {
	Error            *Miipc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Miipc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Miipc400ApplicationJSONErrorEnum string

const (
	Miipc400ApplicationJSONErrorEnumMissingParameter Miipc400ApplicationJSONErrorEnum = "missing_parameter"
	Miipc400ApplicationJSONErrorEnumInvalidParameter Miipc400ApplicationJSONErrorEnum = "invalid_parameter"
	Miipc400ApplicationJSONErrorEnumInvalidFormat    Miipc400ApplicationJSONErrorEnum = "invalid_format"
	Miipc400ApplicationJSONErrorEnumInvalidTxnid     Miipc400ApplicationJSONErrorEnum = "invalid_txnid"
	Miipc400ApplicationJSONErrorEnumInvalidConsentid Miipc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Miipc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Miipc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Miipc400ApplicationJSONErrorDescriptionEnum string

const (
	Miipc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Miipc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Miipc400ApplicationJSONErrorDescriptionEnumBadRequest                              Miipc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Miipc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Miipc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Miipc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Miipc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Miipc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Miipc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Miipc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Miipc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Miipc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Miipc400ApplicationJSON - Bad request
type Miipc400ApplicationJSON struct {
	Error            *Miipc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Miipc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type MiipcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Miipc400ApplicationJSONObject *Miipc400ApplicationJSON
	// Unauthorized access
	Miipc401ApplicationJSONObject *Miipc401ApplicationJSON
	// No record found
	Miipc404ApplicationJSONObject *Miipc404ApplicationJSON
	// Internal server error
	Miipc500ApplicationJSONObject *Miipc500ApplicationJSON
	// Bad gateway
	Miipc502ApplicationJSONObject *Miipc502ApplicationJSON
	// Service unavailable
	Miipc503ApplicationJSONObject *Miipc503ApplicationJSON
	// Gateway timeout
	Miipc504ApplicationJSONObject *Miipc504ApplicationJSON
}
