"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CostMatrixDataInfo:
    r"""Additional information for your request"""
    
    copyrights: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyrights'), 'exclude': lambda f: f is None }})  
    took: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('took'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CostMatrixData:
    r"""JSON data of matrix response"""
    
    distances: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distances'), 'exclude': lambda f: f is None }})  
    info: Optional[CostMatrixDataInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('info'), 'exclude': lambda f: f is None }})
    r"""Additional information for your request"""  
    times: Optional[list[list[int]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('times'), 'exclude': lambda f: f is None }})  
    
class CostMatrixTypeEnum(str, Enum):
    r"""type of cost matrix, currently default or google are supported"""
    DEFAULT = 'default'
    GOOGLE = 'google'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CostMatrix:
    
    data: Optional[CostMatrixData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""JSON data of matrix response"""  
    location_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_ids'), 'exclude': lambda f: f is None }})  
    profile: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profile'), 'exclude': lambda f: f is None }})
    r"""vehicle profile or empty if catch all fallback"""  
    type: Optional[CostMatrixTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""type of cost matrix, currently default or google are supported"""  
    