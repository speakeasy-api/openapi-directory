// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetRepositoriesXAmzTargetEnum
type BatchGetRepositoriesXAmzTargetEnum string

const (
	BatchGetRepositoriesXAmzTargetEnumCodeCommit20150413BatchGetRepositories BatchGetRepositoriesXAmzTargetEnum = "CodeCommit_20150413.BatchGetRepositories"
)

func (e *BatchGetRepositoriesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.BatchGetRepositories":
		*e = BatchGetRepositoriesXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetRepositoriesXAmzTargetEnum: %s", s)
	}
}

type BatchGetRepositoriesRequest struct {
	BatchGetRepositoriesInput shared.BatchGetRepositoriesInput   `request:"mediaType=application/json"`
	XAmzAlgorithm             *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256         *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential            *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                  *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken         *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature             *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders         *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                BatchGetRepositoriesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetRepositoriesResponse struct {
	// Success
	BatchGetRepositoriesOutput *shared.BatchGetRepositoriesOutput
	ContentType                string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// MaximumRepositoryNamesExceededException
	MaximumRepositoryNamesExceededException interface{}
	// RepositoryNamesRequiredException
	RepositoryNamesRequiredException interface{}
	StatusCode                       int
	RawResponse                      *http.Response
}
