<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 * 
 * https://appwrite.io/docs - Full API docs, specs and tutorials
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 * @see https://appwrite.io/docs
 */
class SDK
{
	public const SERVERS = [
		'https://appwrite.io/v1',
	];
  	
    /**
     * The Account service allows you to authenticate and manage a user account.
     * 
     * @var Account $$account
     */
	public Account $account;
	
    /**
     * The Avatars service aims to help you complete everyday tasks related to your app image, icons, and avatars.
     * 
     * @var Avatars $$avatars
     */
	public Avatars $avatars;
	
    /**
     * The Database service allows you to create structured collections of documents, query and filter lists of documents
     * 
     * @var Database $$database
     */
	public Database $database;
	
    /**
     * The Functions Service allows you view, create and manage your Cloud Functions.
     * 
     * @var Functions $$functions
     */
	public Functions $functions;
	
    /**
     * The Locale service allows you to customize your app based on your users' location.
     * 
     * @var Locale $$locale
     */
	public Locale $locale;
	
    /**
     * The Storage service allows you to manage your project files.
     * 
     * @var Storage $$storage
     */
	public Storage $storage;
	
    /**
     * The Teams service allows you to group users of your project and to enable them to share read and write access to your project resources
     * 
     * @var Teams $$teams
     */
	public Teams $teams;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->account = new Account(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->avatars = new Avatars(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->database = new Database(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->functions = new Functions(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->locale = new Locale(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->storage = new Storage(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->teams = new Teams(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}