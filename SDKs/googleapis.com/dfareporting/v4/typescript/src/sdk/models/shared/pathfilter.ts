/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EventFilter } from "./eventfilter";
import { Expose, Type } from "class-transformer";

/**
 * Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
 */
export enum PathFilterPathMatchPositionEnum {
  PathMatchPositionUnspecified = "PATH_MATCH_POSITION_UNSPECIFIED",
  Any = "ANY",
  First = "FIRST",
  Last = "LAST",
}

/**
 * Represents a DfaReporting path filter.
 */
export class PathFilter extends SpeakeasyBase {
  /**
   * Event filters in path report.
   */
  @SpeakeasyMetadata({ elemType: EventFilter })
  @Expose({ name: "eventFilters" })
  @Type(() => EventFilter)
  eventFilters?: EventFilter[];

  /**
   * The kind of resource this is, in this case dfareporting#pathFilter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Determines how the 'value' field is matched when filtering. If not specified, defaults to EXACT. If set to WILDCARD_EXPRESSION, '*' is allowed as a placeholder for variable length character sequences, and it can be escaped with a backslash. Note, only paid search dimensions ('dfa:paidSearch*') allow a matchType other than EXACT.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pathMatchPosition" })
  pathMatchPosition?: PathFilterPathMatchPositionEnum;
}
