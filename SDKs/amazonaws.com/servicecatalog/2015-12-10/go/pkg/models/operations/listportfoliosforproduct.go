// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListPortfoliosForProductXAmzTargetEnum
type ListPortfoliosForProductXAmzTargetEnum string

const (
	ListPortfoliosForProductXAmzTargetEnumAws242ServiceCatalogServiceListPortfoliosForProduct ListPortfoliosForProductXAmzTargetEnum = "AWS242ServiceCatalogService.ListPortfoliosForProduct"
)

func (e ListPortfoliosForProductXAmzTargetEnum) ToPointer() *ListPortfoliosForProductXAmzTargetEnum {
	return &e
}

func (e *ListPortfoliosForProductXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS242ServiceCatalogService.ListPortfoliosForProduct":
		*e = ListPortfoliosForProductXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListPortfoliosForProductXAmzTargetEnum: %v", v)
	}
}

type ListPortfoliosForProductRequest struct {
	ListPortfoliosForProductInput shared.ListPortfoliosForProductInput `request:"mediaType=application/json"`
	// Pagination limit
	PageSize *string `queryParam:"style=form,explode=true,name=PageSize"`
	// Pagination token
	PageToken         *string                                `queryParam:"style=form,explode=true,name=PageToken"`
	XAmzAlgorithm     *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListPortfoliosForProductXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListPortfoliosForProductResponse struct {
	ContentType string
	// InvalidParametersException
	InvalidParametersException interface{}
	// Success
	ListPortfoliosForProductOutput *shared.ListPortfoliosForProductOutput
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
