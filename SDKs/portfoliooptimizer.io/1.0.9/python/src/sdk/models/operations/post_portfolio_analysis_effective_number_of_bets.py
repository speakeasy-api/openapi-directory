"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostPortfolioAnalysisEffectiveNumberOfBetsRequestBodyFactorsExtractionMethodEnum(str, Enum):
    r"""The method used to extract the uncorrelated risk factors from the asset covariance matrix"""
    PRINCIPAL_COMPONENT_ANALYSIS = 'principalComponentAnalysis'
    EXACT_MINIMUM_LINEAR_TORSION = 'exactMinimumLinearTorsion'
    APPROXIMATE_MINIMUM_LINEAR_TORSION = 'approximateMinimumLinearTorsion'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisEffectiveNumberOfBetsRequestBodyPortfolios:
    
    assets_weights: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsWeights') }})
    r"""assetsWeights[i] is the weight of the asset i in the portfolio, in percentage"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisEffectiveNumberOfBetsRequestBody:
    
    assets: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})
    r"""The number of assets"""  
    assets_covariance_matrix: list[list[float]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsCovarianceMatrix') }})
    r"""assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j"""  
    portfolios: list[PostPortfolioAnalysisEffectiveNumberOfBetsRequestBodyPortfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    factors_extraction_method: Optional[PostPortfolioAnalysisEffectiveNumberOfBetsRequestBodyFactorsExtractionMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('factorsExtractionMethod'), 'exclude': lambda f: f is None }})
    r"""The method used to extract the uncorrelated risk factors from the asset covariance matrix"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSONPortfolios:
    
    portfolio_effective_number_of_bets: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolioEffectiveNumberOfBets') }})
    r"""The effective number of bets of the portfolio"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSON:
    r"""OK"""
    
    portfolios: list[PostPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSONPortfolios] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('portfolios') }})  
    

@dataclasses.dataclass
class PostPortfolioAnalysisEffectiveNumberOfBetsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_analysis_effective_number_of_bets_200_application_json_object: Optional[PostPortfolioAnalysisEffectiveNumberOfBets200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    