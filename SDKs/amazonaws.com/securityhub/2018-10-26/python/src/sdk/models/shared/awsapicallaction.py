"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import actionremoteipdetails as shared_actionremoteipdetails
from ..shared import awsapicallactiondomaindetails as shared_awsapicallactiondomaindetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsAPICallAction:
    r"""Provided if <code>ActionType</code> is <code>AWS_API_CALL</code>. It provides details about the API call that was detected."""
    
    affected_resources: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AffectedResources'), 'exclude': lambda f: f is None }})  
    api: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Api'), 'exclude': lambda f: f is None }})  
    caller_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CallerType'), 'exclude': lambda f: f is None }})  
    domain_details: Optional[shared_awsapicallactiondomaindetails.AwsAPICallActionDomainDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DomainDetails'), 'exclude': lambda f: f is None }})  
    first_seen: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FirstSeen'), 'exclude': lambda f: f is None }})  
    last_seen: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastSeen'), 'exclude': lambda f: f is None }})  
    remote_ip_details: Optional[shared_actionremoteipdetails.ActionRemoteIPDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoteIpDetails'), 'exclude': lambda f: f is None }})  
    service_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceName'), 'exclude': lambda f: f is None }})  
    