/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class BooksVolumesMybooksListSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export enum BooksVolumesMybooksListAcquireMethodEnum {
  AcquireMethodUndefined = "ACQUIRE_METHOD_UNDEFINED",
  FamilyShared = "FAMILY_SHARED",
  Preordered = "PREORDERED",
  PreviouslyRented = "PREVIOUSLY_RENTED",
  PublicDomain = "PUBLIC_DOMAIN",
  Purchased = "PURCHASED",
  Rented = "RENTED",
  Sample = "SAMPLE",
  Uploaded = "UPLOADED",
}

export enum BooksVolumesMybooksListProcessingStateEnum {
  ProcessingStateUndefined = "PROCESSING_STATE_UNDEFINED",
  CompletedFailed = "COMPLETED_FAILED",
  CompletedSuccess = "COMPLETED_SUCCESS",
  Running = "RUNNING",
}

export class BooksVolumesMybooksListRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * How the book was acquired
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=acquireMethod",
  })
  acquireMethod?: BooksVolumesMybooksListAcquireMethodEnum[];

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * ISO-3166-1 code to override the IP-based location.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country",
  })
  country?: string;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * ISO-639-1 language and ISO-3166-1 country code. Ex:'en_US'. Used for generating recommendations.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=locale",
  })
  locale?: string;

  /**
   * Maximum number of results to return.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * The processing state of the user uploaded volumes to be returned. Applicable only if the UPLOADED is specified in the acquireMethod.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=processingState",
  })
  processingState?: BooksVolumesMybooksListProcessingStateEnum[];

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * String to identify the originator of this request.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=source",
  })
  source?: string;

  /**
   * Index of the first result to return (starts at 0)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=startIndex",
  })
  startIndex?: number;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;
}

export class BooksVolumesMybooksListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  volumes?: shared.Volumes;
}
