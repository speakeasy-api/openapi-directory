// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleaseEventAPIPostReportPathParams struct {
	// Event to be reported.
	EventID int `pathParam:"style=simple,explode=false,name=eventId"`
}

// ReleaseEventAPIPostReportReportTypeEnum - Report type.
type ReleaseEventAPIPostReportReportTypeEnum string

const (
	ReleaseEventAPIPostReportReportTypeEnumInvalidInfo   ReleaseEventAPIPostReportReportTypeEnum = "InvalidInfo"
	ReleaseEventAPIPostReportReportTypeEnumDuplicate     ReleaseEventAPIPostReportReportTypeEnum = "Duplicate"
	ReleaseEventAPIPostReportReportTypeEnumInappropriate ReleaseEventAPIPostReportReportTypeEnum = "Inappropriate"
	ReleaseEventAPIPostReportReportTypeEnumOther         ReleaseEventAPIPostReportReportTypeEnum = "Other"
)

func (e *ReleaseEventAPIPostReportReportTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "InvalidInfo":
		fallthrough
	case "Duplicate":
		fallthrough
	case "Inappropriate":
		fallthrough
	case "Other":
		*e = ReleaseEventAPIPostReportReportTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleaseEventAPIPostReportReportTypeEnum: %s", s)
	}
}

type ReleaseEventAPIPostReportQueryParams struct {
	// Notes. Optional.
	Notes string `queryParam:"style=form,explode=true,name=notes"`
	// Report type.
	ReportType ReleaseEventAPIPostReportReportTypeEnum `queryParam:"style=form,explode=true,name=reportType"`
	// Version to be reported. Optional.
	VersionNumber int `queryParam:"style=form,explode=true,name=versionNumber"`
}

type ReleaseEventAPIPostReportRequest struct {
	PathParams  ReleaseEventAPIPostReportPathParams
	QueryParams ReleaseEventAPIPostReportQueryParams
}

type ReleaseEventAPIPostReportResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
