// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type AnalyticsCrashGroupTotalsSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type AnalyticsCrashGroupTotalsPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the crash group.
	CrashGroupID string `pathParam:"style=simple,explode=false,name=crash_group_id"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AnalyticsCrashGroupTotalsQueryParams struct {
	Version string `queryParam:"style=form,explode=true,name=version"`
}

type AnalyticsCrashGroupTotalsRequest struct {
	PathParams  AnalyticsCrashGroupTotalsPathParams
	QueryParams AnalyticsCrashGroupTotalsQueryParams
	Security    AnalyticsCrashGroupTotalsSecurity
}

// AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum string

const (
	AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum = "400"
	AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum = "403"
	AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum = "500"
)

func (e *AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		fallthrough
	case "403":
		fallthrough
	case "500":
		*e = AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AnalyticsCrashGroupTotalsDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsCrashGroupTotalsDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsCrashGroupTotalsDefaultApplicationJSON - Error
type AnalyticsCrashGroupTotalsDefaultApplicationJSON struct {
	Error *AnalyticsCrashGroupTotalsDefaultApplicationJSONError `json:"error,omitempty"`
}

// AnalyticsCrashGroupTotals200ApplicationJSON - Overall crashes and affected users count.
type AnalyticsCrashGroupTotals200ApplicationJSON struct {
	CrashCount  *int64 `json:"crash_count,omitempty"`
	DeviceCount *int64 `json:"device_count,omitempty"`
}

type AnalyticsCrashGroupTotalsResponse struct {
	// Overall crashes and affected users count.
	AnalyticsCrashGroupTotals200ApplicationJSONObject *AnalyticsCrashGroupTotals200ApplicationJSON
	// Error code with reason.
	AnalyticsCrashGroupTotalsDefaultApplicationJSONObject *AnalyticsCrashGroupTotalsDefaultApplicationJSON
	ContentType                                           string
	StatusCode                                            int
	RawResponse                                           *http.Response
}
