// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateDataQualityJobDefinitionXAmzTargetEnum
type CreateDataQualityJobDefinitionXAmzTargetEnum string

const (
	CreateDataQualityJobDefinitionXAmzTargetEnumSageMakerCreateDataQualityJobDefinition CreateDataQualityJobDefinitionXAmzTargetEnum = "SageMaker.CreateDataQualityJobDefinition"
)

func (e *CreateDataQualityJobDefinitionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SageMaker.CreateDataQualityJobDefinition":
		*e = CreateDataQualityJobDefinitionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDataQualityJobDefinitionXAmzTargetEnum: %s", s)
	}
}

type CreateDataQualityJobDefinitionHeaders struct {
	XAmzAlgorithm     *string                                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateDataQualityJobDefinitionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateDataQualityJobDefinitionRequest struct {
	Headers CreateDataQualityJobDefinitionHeaders
	Request shared.CreateDataQualityJobDefinitionRequest `request:"mediaType=application/json"`
}

type CreateDataQualityJobDefinitionResponse struct {
	ContentType string
	// Success
	CreateDataQualityJobDefinitionResponse *shared.CreateDataQualityJobDefinitionResponse
	// ResourceInUse
	ResourceInUse interface{}
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
	StatusCode            int
	RawResponse           *http.Response
}
