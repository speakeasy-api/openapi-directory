// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListBootstrapActionsXAmzTargetEnum
type ListBootstrapActionsXAmzTargetEnum string

const (
	ListBootstrapActionsXAmzTargetEnumElasticMapReduceListBootstrapActions ListBootstrapActionsXAmzTargetEnum = "ElasticMapReduce.ListBootstrapActions"
)

func (e ListBootstrapActionsXAmzTargetEnum) ToPointer() *ListBootstrapActionsXAmzTargetEnum {
	return &e
}

func (e *ListBootstrapActionsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ElasticMapReduce.ListBootstrapActions":
		*e = ListBootstrapActionsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListBootstrapActionsXAmzTargetEnum: %v", v)
	}
}

type ListBootstrapActionsRequest struct {
	ListBootstrapActionsInput shared.ListBootstrapActionsInput `request:"mediaType=application/json"`
	// Pagination token
	Marker            *string                            `queryParam:"style=form,explode=true,name=Marker"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListBootstrapActionsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListBootstrapActionsResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListBootstrapActionsOutput *shared.ListBootstrapActionsOutput
	StatusCode                 int
	RawResponse                *http.Response
}
