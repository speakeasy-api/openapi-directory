"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MysqlSslConfig:
    r"""MySQL SSL configuration information."""
    
    ca_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caCertificate'), 'exclude': lambda f: f is None }})
    r"""Input only. PEM-encoded certificate of the CA that signed the source database server's certificate."""  
    ca_certificate_set: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caCertificateSet'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates whether the ca_certificate field is set."""  
    client_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertificate'), 'exclude': lambda f: f is None }})
    r"""Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory."""  
    client_certificate_set: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertificateSet'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates whether the client_certificate field is set."""  
    client_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientKey'), 'exclude': lambda f: f is None }})
    r"""Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory."""  
    client_key_set: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientKeySet'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates whether the client_key field is set."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MysqlSslConfigInput:
    r"""MySQL SSL configuration information."""
    
    ca_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caCertificate'), 'exclude': lambda f: f is None }})
    r"""Input only. PEM-encoded certificate of the CA that signed the source database server's certificate."""  
    client_certificate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientCertificate'), 'exclude': lambda f: f is None }})
    r"""Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory."""  
    client_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientKey'), 'exclude': lambda f: f is None }})
    r"""Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory."""  
    