/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * \u30b7\u30e7\u30c3\u30d7\u30da\u30fc\u30b8\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u3092\u633f\u5165\u3059\u308bAPI\u3067\u3059\u3002
 * 
 * \u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u70b9\u306b\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002
 * - \u30b9\u30af\u30ea\u30d7\u30c8\u3092\u914d\u4fe1\u3059\u308b\u30b5\u30fc\u30d0\u306f\u3001\u9069\u5207\u306aCORS\u30d8\u30c3\u30c0(e.g. `Access-Control-Allow-Origin`) \u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059
 * - \u767b\u9332\u6e08\u307f\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5185\u5bb9\u3092\u5909\u66f4\u3057\u305f\u5834\u5408\u306f\u3001\u90fd\u5ea6\u66f4\u65b0\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u3066\u9069\u5207\u306a `integrity` \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059
 * - \u767b\u9332\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u306eURL\u30b9\u30ad\u30fc\u30e0\u306f `https` \u306e\u307f\u306b\u306a\u308a\u307e\u3059
 * - \u767b\u9332\u30fb\u66f4\u65b0\u6642\u306b\u30ab\u30e9\u30fc\u30df\u30fcAPI\u304c\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u767b\u9332\u3067\u304d\u307e\u305b\u3093
 * - \u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0API\u3067\u633f\u5165\u3055\u308c\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u306f\u3001\u30a2\u30d7\u30ea\u304c\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u3068\u81ea\u52d5\u3067\u524a\u9664\u3055\u308c\u307e\u3059
 * 
 */
public class Script {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Script(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * \u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u306e\u4f5c\u6210
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateShopScriptTagResponse createShopScriptTag(org.openapis.openapi.models.operations.CreateShopScriptTagRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/appstore/v1/script_tags.json");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateShopScriptTagResponse res = new org.openapis.openapi.models.operations.CreateShopScriptTagResponse() {{
            createShopScriptTag200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateShopScriptTag200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateShopScriptTag200ApplicationJSON.class);
                res.createShopScriptTag200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * \u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u306e\u524a\u9664
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteScriptTagResponse deleteScriptTag(org.openapis.openapi.models.operations.DeleteScriptTagRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteScriptTagPathParams.class, baseUrl, "/appstore/v1/script_tags/{scriptTagId}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteScriptTagResponse res = new org.openapis.openapi.models.operations.DeleteScriptTagResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * \u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u306e\u53d6\u5f97
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetShopScriptTagResponse getShopScriptTag(org.openapis.openapi.models.operations.GetShopScriptTagRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetShopScriptTagPathParams.class, baseUrl, "/appstore/v1/script_tags/{scriptTagId}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetShopScriptTagResponse res = new org.openapis.openapi.models.operations.GetShopScriptTagResponse() {{
            getShopScriptTag200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetShopScriptTag200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetShopScriptTag200ApplicationJSON.class);
                res.getShopScriptTag200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * \u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u306e\u53d6\u5f97
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetShopScriptTagsResponse getShopScriptTags(org.openapis.openapi.models.operations.GetShopScriptTagsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/appstore/v1/script_tags.json");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetShopScriptTagsResponse res = new org.openapis.openapi.models.operations.GetShopScriptTagsResponse() {{
            getShopScriptTags200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetShopScriptTags200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetShopScriptTags200ApplicationJSON.class);
                res.getShopScriptTags200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * \u30b9\u30af\u30ea\u30d7\u30c8\u30bf\u30b0\u306e\u66f4\u65b0
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateShopScriptTagResponse updateShopScriptTag(org.openapis.openapi.models.operations.UpdateShopScriptTagRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateShopScriptTagPathParams.class, baseUrl, "/appstore/v1/script_tags/{scriptTagId}.json", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, request.security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateShopScriptTagResponse res = new org.openapis.openapi.models.operations.UpdateShopScriptTagResponse() {{
            updateShopScriptTag200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateShopScriptTag200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateShopScriptTag200ApplicationJSON.class);
                res.updateShopScriptTag200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}