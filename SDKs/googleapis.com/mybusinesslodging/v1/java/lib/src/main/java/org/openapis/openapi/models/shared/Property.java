/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Property - General factual information about the property's physical structure and important dates.
 */
public class Property {
    /**
     * Built year. The year that construction of the property was completed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("builtYear")
    public Integer builtYear;

    public Property withBuiltYear(Integer builtYear) {
        this.builtYear = builtYear;
        return this;
    }
    
    /**
     * Built year exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("builtYearException")
    public PropertyBuiltYearExceptionEnum builtYearException;

    public Property withBuiltYearException(PropertyBuiltYearExceptionEnum builtYearException) {
        this.builtYearException = builtYearException;
        return this;
    }
    
    /**
     * Floors count. The number of stories the building has from the ground floor to the top floor that are accessible to guests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floorsCount")
    public Integer floorsCount;

    public Property withFloorsCount(Integer floorsCount) {
        this.floorsCount = floorsCount;
        return this;
    }
    
    /**
     * Floors count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floorsCountException")
    public PropertyFloorsCountExceptionEnum floorsCountException;

    public Property withFloorsCountException(PropertyFloorsCountExceptionEnum floorsCountException) {
        this.floorsCountException = floorsCountException;
        return this;
    }
    
    /**
     * Last renovated year. The year when the most recent renovation of the property was completed. Renovation may include all or any combination of the following: the units, the public spaces, the exterior, or the interior.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastRenovatedYear")
    public Integer lastRenovatedYear;

    public Property withLastRenovatedYear(Integer lastRenovatedYear) {
        this.lastRenovatedYear = lastRenovatedYear;
        return this;
    }
    
    /**
     * Last renovated year exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastRenovatedYearException")
    public PropertyLastRenovatedYearExceptionEnum lastRenovatedYearException;

    public Property withLastRenovatedYearException(PropertyLastRenovatedYearExceptionEnum lastRenovatedYearException) {
        this.lastRenovatedYearException = lastRenovatedYearException;
        return this;
    }
    
    /**
     * Rooms count. The total number of rooms and suites bookable by guests for an overnight stay. Does not include event space, public spaces, conference rooms, fitness rooms, business centers, spa, salon, restaurants/bars, or shops.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roomsCount")
    public Integer roomsCount;

    public Property withRoomsCount(Integer roomsCount) {
        this.roomsCount = roomsCount;
        return this;
    }
    
    /**
     * Rooms count exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roomsCountException")
    public PropertyRoomsCountExceptionEnum roomsCountException;

    public Property withRoomsCountException(PropertyRoomsCountExceptionEnum roomsCountException) {
        this.roomsCountException = roomsCountException;
        return this;
    }
    
    public Property(){}
}
