"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import custombiddingmodelreadinessstate as shared_custombiddingmodelreadinessstate
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CustomBiddingAlgorithmCustomBiddingAlgorithmTypeEnum(str, Enum):
    r"""Required. Immutable. The type of custom bidding algorithm."""
    CUSTOM_BIDDING_ALGORITHM_TYPE_UNSPECIFIED = 'CUSTOM_BIDDING_ALGORITHM_TYPE_UNSPECIFIED'
    SCRIPT_BASED = 'SCRIPT_BASED'
    ADS_DATA_HUB_BASED = 'ADS_DATA_HUB_BASED'
    GOAL_BUILDER_BASED = 'GOAL_BUILDER_BASED'

class CustomBiddingAlgorithmEntityStatusEnum(str, Enum):
    r"""Controls whether or not the custom bidding algorithm can be used as a bidding strategy. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED`"""
    ENTITY_STATUS_UNSPECIFIED = 'ENTITY_STATUS_UNSPECIFIED'
    ENTITY_STATUS_ACTIVE = 'ENTITY_STATUS_ACTIVE'
    ENTITY_STATUS_ARCHIVED = 'ENTITY_STATUS_ARCHIVED'
    ENTITY_STATUS_DRAFT = 'ENTITY_STATUS_DRAFT'
    ENTITY_STATUS_PAUSED = 'ENTITY_STATUS_PAUSED'
    ENTITY_STATUS_SCHEDULED_FOR_DELETION = 'ENTITY_STATUS_SCHEDULED_FOR_DELETION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomBiddingAlgorithmInput:
    r"""A single custom bidding algorithm."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique ID of the advertiser that owns the custom bidding algorithm."""  
    custom_bidding_algorithm_type: Optional[CustomBiddingAlgorithmCustomBiddingAlgorithmTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customBiddingAlgorithmType'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The type of custom bidding algorithm."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the custom bidding algorithm. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[CustomBiddingAlgorithmEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Controls whether or not the custom bidding algorithm can be used as a bidding strategy. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED`"""  
    partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique ID of the partner that owns the custom bidding algorithm."""  
    shared_advertiser_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedAdvertiserIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the advertisers who have access to this algorithm. If advertiser_id is set, this field will only consist of that value. This field will not be set if the algorithm [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor)."""  
    
class CustomBiddingAlgorithmCustomBiddingAlgorithmStateEnum(str, Enum):
    r"""Output only. The status of custom bidding algorithm."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ENABLED = 'ENABLED'
    DORMANT = 'DORMANT'
    SUSPENDED = 'SUSPENDED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomBiddingAlgorithm:
    r"""A single custom bidding algorithm."""
    
    advertiser_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('advertiserId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique ID of the advertiser that owns the custom bidding algorithm."""  
    custom_bidding_algorithm_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customBiddingAlgorithmId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the custom bidding algorithm. Assigned by the system."""  
    custom_bidding_algorithm_state: Optional[CustomBiddingAlgorithmCustomBiddingAlgorithmStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customBiddingAlgorithmState'), 'exclude': lambda f: f is None }})
    r"""Output only. The status of custom bidding algorithm."""  
    custom_bidding_algorithm_type: Optional[CustomBiddingAlgorithmCustomBiddingAlgorithmTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customBiddingAlgorithmType'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The type of custom bidding algorithm."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. The display name of the custom bidding algorithm. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[CustomBiddingAlgorithmEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Controls whether or not the custom bidding algorithm can be used as a bidding strategy. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED`"""  
    model_readiness: Optional[list[shared_custombiddingmodelreadinessstate.CustomBiddingModelReadinessState]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modelReadiness'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of custom bidding model readiness for each advertiser who has access. This field may only include the state of the queried advertiser if the algorithm [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor)."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the custom bidding algorithm."""  
    partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerId'), 'exclude': lambda f: f is None }})
    r"""Immutable. The unique ID of the partner that owns the custom bidding algorithm."""  
    shared_advertiser_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sharedAdvertiserIds'), 'exclude': lambda f: f is None }})
    r"""The IDs of the advertisers who have access to this algorithm. If advertiser_id is set, this field will only consist of that value. This field will not be set if the algorithm [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor)."""  
    