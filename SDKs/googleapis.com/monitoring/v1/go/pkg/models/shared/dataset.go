// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataSetPlotTypeEnum - How this data should be plotted on the chart.
type DataSetPlotTypeEnum string

const (
	DataSetPlotTypeEnumPlotTypeUnspecified DataSetPlotTypeEnum = "PLOT_TYPE_UNSPECIFIED"
	DataSetPlotTypeEnumLine                DataSetPlotTypeEnum = "LINE"
	DataSetPlotTypeEnumStackedArea         DataSetPlotTypeEnum = "STACKED_AREA"
	DataSetPlotTypeEnumStackedBar          DataSetPlotTypeEnum = "STACKED_BAR"
	DataSetPlotTypeEnumHeatmap             DataSetPlotTypeEnum = "HEATMAP"
)

func (e *DataSetPlotTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PLOT_TYPE_UNSPECIFIED":
		fallthrough
	case "LINE":
		fallthrough
	case "STACKED_AREA":
		fallthrough
	case "STACKED_BAR":
		fallthrough
	case "HEATMAP":
		*e = DataSetPlotTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSetPlotTypeEnum: %s", s)
	}
}

// DataSetTargetAxisEnum - Optional. The target axis to use for plotting the metric.
type DataSetTargetAxisEnum string

const (
	DataSetTargetAxisEnumTargetAxisUnspecified DataSetTargetAxisEnum = "TARGET_AXIS_UNSPECIFIED"
	DataSetTargetAxisEnumY1                    DataSetTargetAxisEnum = "Y1"
	DataSetTargetAxisEnumY2                    DataSetTargetAxisEnum = "Y2"
)

func (e *DataSetTargetAxisEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TARGET_AXIS_UNSPECIFIED":
		fallthrough
	case "Y1":
		fallthrough
	case "Y2":
		*e = DataSetTargetAxisEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSetTargetAxisEnum: %s", s)
	}
}

// DataSet - Groups a time series query definition with charting options.
type DataSet struct {
	// A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value.
	LegendTemplate *string `json:"legendTemplate,omitempty"`
	// Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.
	MinAlignmentPeriod *string `json:"minAlignmentPeriod,omitempty"`
	// How this data should be plotted on the chart.
	PlotType *DataSetPlotTypeEnum `json:"plotType,omitempty"`
	// Optional. The target axis to use for plotting the metric.
	TargetAxis *DataSetTargetAxisEnum `json:"targetAxis,omitempty"`
	// TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API.
	TimeSeriesQuery *TimeSeriesQuery `json:"timeSeriesQuery,omitempty"`
}
