/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SecurityPolicyRuleNetworkMatcher - Represents a match condition that incoming network traffic is evaluated against.
 */
public class SecurityPolicyRuleNetworkMatcher {
    /**
     * Destination IPv4/IPv6 addresses or CIDR prefixes, in standard text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destIpRanges")
    public String[] destIpRanges;

    public SecurityPolicyRuleNetworkMatcher withDestIpRanges(String[] destIpRanges) {
        this.destIpRanges = destIpRanges;
        return this;
    }
    
    /**
     * Destination port numbers for TCP/UDP/SCTP. Each element can be a 16-bit unsigned decimal number (e.g. "80") or range (e.g. "0-1023").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destPorts")
    public String[] destPorts;

    public SecurityPolicyRuleNetworkMatcher withDestPorts(String[] destPorts) {
        this.destPorts = destPorts;
        return this;
    }
    
    /**
     * IPv4 protocol / IPv6 next header (after extension headers). Each element can be an 8-bit unsigned decimal number (e.g. "6"), range (e.g. "253-254"), or one of the following protocol names: "tcp", "udp", "icmp", "esp", "ah", "ipip", or "sctp".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ipProtocols")
    public String[] ipProtocols;

    public SecurityPolicyRuleNetworkMatcher withIpProtocols(String[] ipProtocols) {
        this.ipProtocols = ipProtocols;
        return this;
    }
    
    /**
     * BGP Autonomous System Number associated with the source IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("srcAsns")
    public Long[] srcAsns;

    public SecurityPolicyRuleNetworkMatcher withSrcAsns(Long[] srcAsns) {
        this.srcAsns = srcAsns;
        return this;
    }
    
    /**
     * Source IPv4/IPv6 addresses or CIDR prefixes, in standard text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("srcIpRanges")
    public String[] srcIpRanges;

    public SecurityPolicyRuleNetworkMatcher withSrcIpRanges(String[] srcIpRanges) {
        this.srcIpRanges = srcIpRanges;
        return this;
    }
    
    /**
     * Source port numbers for TCP/UDP/SCTP. Each element can be a 16-bit unsigned decimal number (e.g. "80") or range (e.g. "0-1023").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("srcPorts")
    public String[] srcPorts;

    public SecurityPolicyRuleNetworkMatcher withSrcPorts(String[] srcPorts) {
        this.srcPorts = srcPorts;
        return this;
    }
    
    /**
     * Two-letter ISO 3166-1 alpha-2 country code associated with the source IP address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("srcRegionCodes")
    public String[] srcRegionCodes;

    public SecurityPolicyRuleNetworkMatcher withSrcRegionCodes(String[] srcRegionCodes) {
        this.srcRegionCodes = srcRegionCodes;
        return this;
    }
    
    /**
     * User-defined fields. Each element names a defined field and lists the matching values for that field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userDefinedFields")
    public SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch[] userDefinedFields;

    public SecurityPolicyRuleNetworkMatcher withUserDefinedFields(SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch[] userDefinedFields) {
        this.userDefinedFields = userDefinedFields;
        return this;
    }
    
    public SecurityPolicyRuleNetworkMatcher(){}
}
