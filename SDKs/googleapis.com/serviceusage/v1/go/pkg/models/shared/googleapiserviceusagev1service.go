// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleAPIServiceusageV1ServiceStateEnum - Whether or not the service has been enabled for use by the consumer.
type GoogleAPIServiceusageV1ServiceStateEnum string

const (
	GoogleAPIServiceusageV1ServiceStateEnumStateUnspecified GoogleAPIServiceusageV1ServiceStateEnum = "STATE_UNSPECIFIED"
	GoogleAPIServiceusageV1ServiceStateEnumDisabled         GoogleAPIServiceusageV1ServiceStateEnum = "DISABLED"
	GoogleAPIServiceusageV1ServiceStateEnumEnabled          GoogleAPIServiceusageV1ServiceStateEnum = "ENABLED"
)

func (e GoogleAPIServiceusageV1ServiceStateEnum) ToPointer() *GoogleAPIServiceusageV1ServiceStateEnum {
	return &e
}

func (e *GoogleAPIServiceusageV1ServiceStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "ENABLED":
		*e = GoogleAPIServiceusageV1ServiceStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleAPIServiceusageV1ServiceStateEnum: %v", v)
	}
}

// GoogleAPIServiceusageV1Service - A service that is available for use by the consumer.
type GoogleAPIServiceusageV1Service struct {
	// The configuration of the service.
	Config *GoogleAPIServiceusageV1ServiceConfig `json:"config,omitempty"`
	// The resource name of the consumer and service. A valid name would be: - projects/123/services/serviceusage.googleapis.com
	Name *string `json:"name,omitempty"`
	// The resource name of the consumer. A valid name would be: - projects/123
	Parent *string `json:"parent,omitempty"`
	// Whether or not the service has been enabled for use by the consumer.
	State *GoogleAPIServiceusageV1ServiceStateEnum `json:"state,omitempty"`
}
