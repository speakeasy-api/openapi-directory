/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FloodlightActivity - Contains properties of a Floodlight activity.
 */
public class FloodlightActivity {
    /**
     * Account ID of this floodlight activity. This is a read-only field that can be left blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountId")
    public String accountId;
    public FloodlightActivity withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserId")
    public String advertiserId;
    public FloodlightActivity withAdvertiserId(String advertiserId) {
        this.advertiserId = advertiserId;
        return this;
    }
    
    /**
     * Represents a DimensionValue resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advertiserIdDimensionValue")
    public DimensionValue advertiserIdDimensionValue;
    public FloodlightActivity withAdvertiserIdDimensionValue(DimensionValue advertiserIdDimensionValue) {
        this.advertiserIdDimensionValue = advertiserIdDimensionValue;
        return this;
    }
    
    /**
     * Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheBustingType")
    public FloodlightActivityCacheBustingTypeEnum cacheBustingType;
    public FloodlightActivity withCacheBustingType(FloodlightActivityCacheBustingTypeEnum cacheBustingType) {
        this.cacheBustingType = cacheBustingType;
        return this;
    }
    
    /**
     * Counting method for conversions for this floodlight activity. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countingMethod")
    public FloodlightActivityCountingMethodEnum countingMethod;
    public FloodlightActivity withCountingMethod(FloodlightActivityCountingMethodEnum countingMethod) {
        this.countingMethod = countingMethod;
        return this;
    }
    
    /**
     * Dynamic floodlight tags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultTags")
    public FloodlightActivityDynamicTag[] defaultTags;
    public FloodlightActivity withDefaultTags(FloodlightActivityDynamicTag[] defaultTags) {
        this.defaultTags = defaultTags;
        return this;
    }
    
    /**
     * URL where this tag will be deployed. If specified, must be less than 256 characters long.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expectedUrl")
    public String expectedUrl;
    public FloodlightActivity withExpectedUrl(String expectedUrl) {
        this.expectedUrl = expectedUrl;
        return this;
    }
    
    /**
     * Floodlight activity group ID of this floodlight activity. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightActivityGroupId")
    public String floodlightActivityGroupId;
    public FloodlightActivity withFloodlightActivityGroupId(String floodlightActivityGroupId) {
        this.floodlightActivityGroupId = floodlightActivityGroupId;
        return this;
    }
    
    /**
     * Name of the associated floodlight activity group. This is a read-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightActivityGroupName")
    public String floodlightActivityGroupName;
    public FloodlightActivity withFloodlightActivityGroupName(String floodlightActivityGroupName) {
        this.floodlightActivityGroupName = floodlightActivityGroupName;
        return this;
    }
    
    /**
     * Tag string of the associated floodlight activity group. This is a read-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightActivityGroupTagString")
    public String floodlightActivityGroupTagString;
    public FloodlightActivity withFloodlightActivityGroupTagString(String floodlightActivityGroupTagString) {
        this.floodlightActivityGroupTagString = floodlightActivityGroupTagString;
        return this;
    }
    
    /**
     * Type of the associated floodlight activity group. This is a read-only field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightActivityGroupType")
    public FloodlightActivityFloodlightActivityGroupTypeEnum floodlightActivityGroupType;
    public FloodlightActivity withFloodlightActivityGroupType(FloodlightActivityFloodlightActivityGroupTypeEnum floodlightActivityGroupType) {
        this.floodlightActivityGroupType = floodlightActivityGroupType;
        return this;
    }
    
    /**
     * Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightConfigurationId")
    public String floodlightConfigurationId;
    public FloodlightActivity withFloodlightConfigurationId(String floodlightConfigurationId) {
        this.floodlightConfigurationId = floodlightConfigurationId;
        return this;
    }
    
    /**
     * Represents a DimensionValue resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightConfigurationIdDimensionValue")
    public DimensionValue floodlightConfigurationIdDimensionValue;
    public FloodlightActivity withFloodlightConfigurationIdDimensionValue(DimensionValue floodlightConfigurationIdDimensionValue) {
        this.floodlightConfigurationIdDimensionValue = floodlightConfigurationIdDimensionValue;
        return this;
    }
    
    /**
     * The type of Floodlight tag this activity will generate. This is a required field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("floodlightTagType")
    public FloodlightActivityFloodlightTagTypeEnum floodlightTagType;
    public FloodlightActivity withFloodlightTagType(FloodlightActivityFloodlightTagTypeEnum floodlightTagType) {
        this.floodlightTagType = floodlightTagType;
        return this;
    }
    
    /**
     * Whether this activity is archived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    public Boolean hidden;
    public FloodlightActivity withHidden(Boolean hidden) {
        this.hidden = hidden;
        return this;
    }
    
    /**
     * ID of this floodlight activity. This is a read-only, auto-generated field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public FloodlightActivity withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Represents a DimensionValue resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idDimensionValue")
    public DimensionValue idDimensionValue;
    public FloodlightActivity withIdDimensionValue(DimensionValue idDimensionValue) {
        this.idDimensionValue = idDimensionValue;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "dfareporting#floodlightActivity".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public FloodlightActivity withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public FloodlightActivity withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * General notes or implementation instructions for the tag.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    public String notes;
    public FloodlightActivity withNotes(String notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * Publisher dynamic floodlight tags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publisherTags")
    public FloodlightActivityPublisherDynamicTag[] publisherTags;
    public FloodlightActivity withPublisherTags(FloodlightActivityPublisherDynamicTag[] publisherTags) {
        this.publisherTags = publisherTags;
        return this;
    }
    
    /**
     * Whether this tag should use SSL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secure")
    public Boolean secure;
    public FloodlightActivity withSecure(Boolean secure) {
        this.secure = secure;
        return this;
    }
    
    /**
     * Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslCompliant")
    public Boolean sslCompliant;
    public FloodlightActivity withSslCompliant(Boolean sslCompliant) {
        this.sslCompliant = sslCompliant;
        return this;
    }
    
    /**
     * Whether this floodlight activity must be SSL-compliant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sslRequired")
    public Boolean sslRequired;
    public FloodlightActivity withSslRequired(Boolean sslRequired) {
        this.sslRequired = sslRequired;
        return this;
    }
    
    /**
     * Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subaccountId")
    public String subaccountId;
    public FloodlightActivity withSubaccountId(String subaccountId) {
        this.subaccountId = subaccountId;
        return this;
    }
    
    /**
     * Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagFormat")
    public FloodlightActivityTagFormatEnum tagFormat;
    public FloodlightActivity withTagFormat(FloodlightActivityTagFormatEnum tagFormat) {
        this.tagFormat = tagFormat;
        return this;
    }
    
    /**
     * Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagString")
    public String tagString;
    public FloodlightActivity withTagString(String tagString) {
        this.tagString = tagString;
        return this;
    }
    
    /**
     * List of the user-defined variables used by this conversion tag. These map to the "u[1-100]=" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userDefinedVariableTypes")
    public FloodlightActivityUserDefinedVariableTypesEnum[] userDefinedVariableTypes;
    public FloodlightActivity withUserDefinedVariableTypes(FloodlightActivityUserDefinedVariableTypesEnum[] userDefinedVariableTypes) {
        this.userDefinedVariableTypes = userDefinedVariableTypes;
        return this;
    }
    
}
