"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://microvisor.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_account_config(self, request: operations.CreateAccountConfigCreateAccountConfigRequest, security: operations.CreateAccountConfigSecurity, server_url: Optional[str] = None) -> operations.CreateAccountConfigResponse:
        r"""Create a config for an Account."""
        base_url = operations.CREATE_ACCOUNT_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Configs'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1AccountConfig])
                res.microvisor_v1_account_config = out

        return res

    def create_account_secret(self, request: operations.CreateAccountSecretCreateAccountSecretRequest, security: operations.CreateAccountSecretSecurity, server_url: Optional[str] = None) -> operations.CreateAccountSecretResponse:
        r"""Create a secret for an Account."""
        base_url = operations.CREATE_ACCOUNT_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Secrets'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAccountSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1AccountSecret])
                res.microvisor_v1_account_secret = out

        return res

    def create_device_config(self, request: operations.CreateDeviceConfigRequest, security: operations.CreateDeviceConfigSecurity, server_url: Optional[str] = None) -> operations.CreateDeviceConfigResponse:
        r"""Create a config for a Microvisor Device."""
        base_url = operations.CREATE_DEVICE_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateDeviceConfigRequest, base_url, '/v1/Devices/{DeviceSid}/Configs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDeviceConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1DeviceDeviceConfig])
                res.microvisor_v1_device_device_config = out

        return res

    def create_device_secret(self, request: operations.CreateDeviceSecretRequest, security: operations.CreateDeviceSecretSecurity, server_url: Optional[str] = None) -> operations.CreateDeviceSecretResponse:
        r"""Create a secret for a Microvisor Device."""
        base_url = operations.CREATE_DEVICE_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateDeviceSecretRequest, base_url, '/v1/Devices/{DeviceSid}/Secrets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateDeviceSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1DeviceDeviceSecret])
                res.microvisor_v1_device_device_secret = out

        return res

    def delete_account_config(self, request: operations.DeleteAccountConfigRequest, security: operations.DeleteAccountConfigSecurity, server_url: Optional[str] = None) -> operations.DeleteAccountConfigResponse:
        r"""Delete a config for an Account."""
        base_url = operations.DELETE_ACCOUNT_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteAccountConfigRequest, base_url, '/v1/Configs/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAccountConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_account_secret(self, request: operations.DeleteAccountSecretRequest, security: operations.DeleteAccountSecretSecurity, server_url: Optional[str] = None) -> operations.DeleteAccountSecretResponse:
        r"""Delete a secret for an Account."""
        base_url = operations.DELETE_ACCOUNT_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteAccountSecretRequest, base_url, '/v1/Secrets/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAccountSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_app(self, request: operations.DeleteAppRequest, security: operations.DeleteAppSecurity, server_url: Optional[str] = None) -> operations.DeleteAppResponse:
        r"""Delete a specific App."""
        base_url = operations.DELETE_APP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteAppRequest, base_url, '/v1/Apps/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAppResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_device_config(self, request: operations.DeleteDeviceConfigRequest, security: operations.DeleteDeviceConfigSecurity, server_url: Optional[str] = None) -> operations.DeleteDeviceConfigResponse:
        r"""Delete a config for a Microvisor Device."""
        base_url = operations.DELETE_DEVICE_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteDeviceConfigRequest, base_url, '/v1/Devices/{DeviceSid}/Configs/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDeviceConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_device_secret(self, request: operations.DeleteDeviceSecretRequest, security: operations.DeleteDeviceSecretSecurity, server_url: Optional[str] = None) -> operations.DeleteDeviceSecretResponse:
        r"""Delete a secret for a Microvisor Device."""
        base_url = operations.DELETE_DEVICE_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteDeviceSecretRequest, base_url, '/v1/Devices/{DeviceSid}/Secrets/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDeviceSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_account_config(self, request: operations.FetchAccountConfigRequest, security: operations.FetchAccountConfigSecurity, server_url: Optional[str] = None) -> operations.FetchAccountConfigResponse:
        r"""Retrieve a Config for an Account."""
        base_url = operations.FETCH_ACCOUNT_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchAccountConfigRequest, base_url, '/v1/Configs/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAccountConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1AccountConfig])
                res.microvisor_v1_account_config = out

        return res

    def fetch_account_secret(self, request: operations.FetchAccountSecretRequest, security: operations.FetchAccountSecretSecurity, server_url: Optional[str] = None) -> operations.FetchAccountSecretResponse:
        r"""Retrieve a Secret for an Account."""
        base_url = operations.FETCH_ACCOUNT_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchAccountSecretRequest, base_url, '/v1/Secrets/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAccountSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1AccountSecret])
                res.microvisor_v1_account_secret = out

        return res

    def fetch_app(self, request: operations.FetchAppRequest, security: operations.FetchAppSecurity, server_url: Optional[str] = None) -> operations.FetchAppResponse:
        r"""Fetch a specific App."""
        base_url = operations.FETCH_APP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchAppRequest, base_url, '/v1/Apps/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAppResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1App])
                res.microvisor_v1_app = out

        return res

    def fetch_app_manifest(self, request: operations.FetchAppManifestRequest, security: operations.FetchAppManifestSecurity, server_url: Optional[str] = None) -> operations.FetchAppManifestResponse:
        r"""Retrieve the Manifest for an App."""
        base_url = operations.FETCH_APP_MANIFEST_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchAppManifestRequest, base_url, '/v1/Apps/{AppSid}/Manifest', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAppManifestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1AppAppManifest])
                res.microvisor_v1_app_app_manifest = out

        return res

    def fetch_device(self, request: operations.FetchDeviceRequest, security: operations.FetchDeviceSecurity, server_url: Optional[str] = None) -> operations.FetchDeviceResponse:
        r"""Fetch a specific Device."""
        base_url = operations.FETCH_DEVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDeviceRequest, base_url, '/v1/Devices/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1Device])
                res.microvisor_v1_device = out

        return res

    def fetch_device_config(self, request: operations.FetchDeviceConfigRequest, security: operations.FetchDeviceConfigSecurity, server_url: Optional[str] = None) -> operations.FetchDeviceConfigResponse:
        r"""Retrieve a Config for a Device."""
        base_url = operations.FETCH_DEVICE_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDeviceConfigRequest, base_url, '/v1/Devices/{DeviceSid}/Configs/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDeviceConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1DeviceDeviceConfig])
                res.microvisor_v1_device_device_config = out

        return res

    def fetch_device_secret(self, request: operations.FetchDeviceSecretRequest, security: operations.FetchDeviceSecretSecurity, server_url: Optional[str] = None) -> operations.FetchDeviceSecretResponse:
        r"""Retrieve a Secret for a Device."""
        base_url = operations.FETCH_DEVICE_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDeviceSecretRequest, base_url, '/v1/Devices/{DeviceSid}/Secrets/{Key}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDeviceSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1DeviceDeviceSecret])
                res.microvisor_v1_device_device_secret = out

        return res

    def list_account_config(self, request: operations.ListAccountConfigRequest, security: operations.ListAccountConfigSecurity, server_url: Optional[str] = None) -> operations.ListAccountConfigResponse:
        r"""Retrieve a list of all Configs for an Account."""
        base_url = operations.LIST_ACCOUNT_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Configs'
        
        query_params = utils.get_query_params(operations.ListAccountConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAccountConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAccountConfigListAccountConfigResponse])
                res.list_account_config_response = out

        return res

    def list_account_secret(self, request: operations.ListAccountSecretRequest, security: operations.ListAccountSecretSecurity, server_url: Optional[str] = None) -> operations.ListAccountSecretResponse:
        r"""Retrieve a list of all Secrets for an Account."""
        base_url = operations.LIST_ACCOUNT_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Secrets'
        
        query_params = utils.get_query_params(operations.ListAccountSecretRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAccountSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAccountSecretListAccountSecretResponse])
                res.list_account_secret_response = out

        return res

    def list_app(self, request: operations.ListAppRequest, security: operations.ListAppSecurity, server_url: Optional[str] = None) -> operations.ListAppResponse:
        r"""Retrieve a list of all Apps for an Account."""
        base_url = operations.LIST_APP_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Apps'
        
        query_params = utils.get_query_params(operations.ListAppRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAppResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAppListAppResponse])
                res.list_app_response = out

        return res

    def list_device(self, request: operations.ListDeviceRequest, security: operations.ListDeviceSecurity, server_url: Optional[str] = None) -> operations.ListDeviceResponse:
        r"""Retrieve a list of all Devices registered with the Account."""
        base_url = operations.LIST_DEVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Devices'
        
        query_params = utils.get_query_params(operations.ListDeviceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListDeviceListDeviceResponse])
                res.list_device_response = out

        return res

    def list_device_config(self, request: operations.ListDeviceConfigRequest, security: operations.ListDeviceConfigSecurity, server_url: Optional[str] = None) -> operations.ListDeviceConfigResponse:
        r"""Retrieve a list of all Configs for a Device."""
        base_url = operations.LIST_DEVICE_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListDeviceConfigRequest, base_url, '/v1/Devices/{DeviceSid}/Configs', request)
        
        query_params = utils.get_query_params(operations.ListDeviceConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDeviceConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListDeviceConfigListDeviceConfigResponse])
                res.list_device_config_response = out

        return res

    def list_device_secret(self, request: operations.ListDeviceSecretRequest, security: operations.ListDeviceSecretSecurity, server_url: Optional[str] = None) -> operations.ListDeviceSecretResponse:
        r"""Retrieve a list of all Secrets for a Device."""
        base_url = operations.LIST_DEVICE_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListDeviceSecretRequest, base_url, '/v1/Devices/{DeviceSid}/Secrets', request)
        
        query_params = utils.get_query_params(operations.ListDeviceSecretRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListDeviceSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListDeviceSecretListDeviceSecretResponse])
                res.list_device_secret_response = out

        return res

    def update_account_config(self, request: operations.UpdateAccountConfigRequest, security: operations.UpdateAccountConfigSecurity, server_url: Optional[str] = None) -> operations.UpdateAccountConfigResponse:
        r"""Update a config for an Account."""
        base_url = operations.UPDATE_ACCOUNT_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateAccountConfigRequest, base_url, '/v1/Configs/{Key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1AccountConfig])
                res.microvisor_v1_account_config = out

        return res

    def update_account_secret(self, request: operations.UpdateAccountSecretRequest, security: operations.UpdateAccountSecretSecurity, server_url: Optional[str] = None) -> operations.UpdateAccountSecretResponse:
        r"""Update a secret for an Account."""
        base_url = operations.UPDATE_ACCOUNT_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateAccountSecretRequest, base_url, '/v1/Secrets/{Key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAccountSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1AccountSecret])
                res.microvisor_v1_account_secret = out

        return res

    def update_device(self, request: operations.UpdateDeviceRequest, security: operations.UpdateDeviceSecurity, server_url: Optional[str] = None) -> operations.UpdateDeviceResponse:
        r"""Update a specific Device."""
        base_url = operations.UPDATE_DEVICE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateDeviceRequest, base_url, '/v1/Devices/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1Device])
                res.microvisor_v1_device = out

        return res

    def update_device_config(self, request: operations.UpdateDeviceConfigRequest, security: operations.UpdateDeviceConfigSecurity, server_url: Optional[str] = None) -> operations.UpdateDeviceConfigResponse:
        r"""Update a config for a Microvisor Device."""
        base_url = operations.UPDATE_DEVICE_CONFIG_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateDeviceConfigRequest, base_url, '/v1/Devices/{DeviceSid}/Configs/{Key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1DeviceDeviceConfig])
                res.microvisor_v1_device_device_config = out

        return res

    def update_device_secret(self, request: operations.UpdateDeviceSecretRequest, security: operations.UpdateDeviceSecretSecurity, server_url: Optional[str] = None) -> operations.UpdateDeviceSecretResponse:
        r"""Update a secret for a Microvisor Device."""
        base_url = operations.UPDATE_DEVICE_SECRET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateDeviceSecretRequest, base_url, '/v1/Devices/{DeviceSid}/Secrets/{Key}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDeviceSecretResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MicrovisorV1DeviceDeviceSecret])
                res.microvisor_v1_device_device_secret = out

        return res

    