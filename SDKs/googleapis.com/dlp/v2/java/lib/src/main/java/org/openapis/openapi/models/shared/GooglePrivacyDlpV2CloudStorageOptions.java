/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2CloudStorageOptions - Options defining a file or a set of files within a Cloud Storage bucket.
 */
public class GooglePrivacyDlpV2CloudStorageOptions {
    /**
     * Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bytesLimitPerFile")
    public String bytesLimitPerFile;

    public GooglePrivacyDlpV2CloudStorageOptions withBytesLimitPerFile(String bytesLimitPerFile) {
        this.bytesLimitPerFile = bytesLimitPerFile;
        return this;
    }
    
    /**
     * Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. Cannot be set if de-identification is requested.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bytesLimitPerFilePercent")
    public Integer bytesLimitPerFilePercent;

    public GooglePrivacyDlpV2CloudStorageOptions withBytesLimitPerFilePercent(Integer bytesLimitPerFilePercent) {
        this.bytesLimitPerFilePercent = bytesLimitPerFilePercent;
        return this;
    }
    
    /**
     * Set of files to scan.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileSet")
    public GooglePrivacyDlpV2FileSet fileSet;

    public GooglePrivacyDlpV2CloudStorageOptions withFileSet(GooglePrivacyDlpV2FileSet fileSet) {
        this.fileSet = fileSet;
        return this;
    }
    
    /**
     * List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileTypes")
    public GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum[] fileTypes;

    public GooglePrivacyDlpV2CloudStorageOptions withFileTypes(GooglePrivacyDlpV2CloudStorageOptionsFileTypesEnum[] fileTypes) {
        this.fileTypes = fileTypes;
        return this;
    }
    
    /**
     * Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filesLimitPercent")
    public Integer filesLimitPercent;

    public GooglePrivacyDlpV2CloudStorageOptions withFilesLimitPercent(Integer filesLimitPercent) {
        this.filesLimitPercent = filesLimitPercent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sampleMethod")
    public GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum sampleMethod;

    public GooglePrivacyDlpV2CloudStorageOptions withSampleMethod(GooglePrivacyDlpV2CloudStorageOptionsSampleMethodEnum sampleMethod) {
        this.sampleMethod = sampleMethod;
        return this;
    }
    
    public GooglePrivacyDlpV2CloudStorageOptions(){}
}
