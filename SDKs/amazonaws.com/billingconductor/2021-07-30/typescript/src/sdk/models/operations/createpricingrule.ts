/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  The scope of pricing rule that indicates if it's globally applicable, or it's service-specific.
 */
export enum CreatePricingRuleRequestBodyScopeEnum {
  Global = "GLOBAL",
  Service = "SERVICE",
  BillingEntity = "BILLING_ENTITY",
  Sku = "SKU",
}

/**
 *  The set of tiering configurations for the pricing rule.
 */
export class CreatePricingRuleRequestBodyTiering extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "FreeTier" })
  @Type(() => shared.CreateFreeTierConfig)
  freeTier?: shared.CreateFreeTierConfig;
}

/**
 *  The type of pricing rule.
 */
export enum CreatePricingRuleRequestBodyTypeEnum {
  Markup = "MARKUP",
  Discount = "DISCOUNT",
  Tiering = "TIERING",
}

export class CreatePricingRuleRequestBody extends SpeakeasyBase {
  /**
   *  The seller of services provided by Amazon Web Services, their affiliates, or third-party providers selling services via Amazon Web Services Marketplace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BillingEntity" })
  billingEntity?: string;

  /**
   *  The pricing rule description.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  /**
   *  A percentage modifier that's applied on the public pricing rates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ModifierPercentage" })
  modifierPercentage?: number;

  /**
   *  The pricing rule name. The names must be unique to each pricing rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;

  /**
   * <p> Operation is the specific Amazon Web Services action covered by this line item. This describes the specific usage of the line item.</p> <p> If the <code>Scope</code> attribute is set to <code>SKU</code>, this attribute indicates which operation the <code>PricingRule</code> is modifying. For example, a value of <code>RunInstances:0202</code> indicates the operation of running an Amazon EC2 instance.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Operation" })
  operation?: string;

  /**
   *  The scope of pricing rule that indicates if it's globally applicable, or it's service-specific.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Scope" })
  scope: CreatePricingRuleRequestBodyScopeEnum;

  /**
   *  If the <code>Scope</code> attribute is set to <code>SERVICE</code> or <code>SKU</code>, the attribute indicates which service the <code>PricingRule</code> is applicable for.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Service" })
  service?: string;

  /**
   *  A map that contains tag keys and tag values that are attached to a pricing rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;

  /**
   *  The set of tiering configurations for the pricing rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Tiering" })
  @Type(() => CreatePricingRuleRequestBodyTiering)
  tiering?: CreatePricingRuleRequestBodyTiering;

  /**
   *  The type of pricing rule.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Type" })
  type: CreatePricingRuleRequestBodyTypeEnum;

  /**
   * <p> Usage type is the unit that each service uses to measure the usage of a specific type of resource.</p> <p>If the <code>Scope</code> attribute is set to <code>SKU</code>, this attribute indicates which usage type the <code>PricingRule</code> is modifying. For example, <code>USW2-BoxUsage:m2.2xlarge</code> describes an<code> M2 High Memory Double Extra Large</code> instance in the US West (Oregon) Region. <pre><code>&lt;/p&gt; </code></pre>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UsageType" })
  usageType?: string;
}

export class CreatePricingRuleRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreatePricingRuleRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   *  The token that's needed to support idempotency. Idempotency isn't currently supported, but will be implemented in a future update.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amzn-Client-Token",
  })
  xAmznClientToken?: string;
}

export class CreatePricingRuleResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createPricingRuleOutput?: shared.CreatePricingRuleOutput;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ServiceLimitExceededException
   */
  @SpeakeasyMetadata()
  serviceLimitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
