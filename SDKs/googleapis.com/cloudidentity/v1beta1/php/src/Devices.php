<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Devices 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateResponse
     */
	public function cloudidentityDevicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/devices');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createDeviceRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Approves device to access user data.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveResponse
     */
	public function cloudidentityDevicesDeviceUsersApprove(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:approve', \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "approveDeviceUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Blocks device from accessing user data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockResponse
     */
	public function cloudidentityDevicesDeviceUsersBlock(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:block', \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "blockDeviceUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersBlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeResponse
     */
	public function cloudidentityDevicesDeviceUsersCancelWipe(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancelWipe', \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cancelWipeDeviceUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersCancelWipeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists/Searches DeviceUsers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListResponse
     */
	public function cloudidentityDevicesDeviceUsersList(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/deviceUsers', \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDeviceUsersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDeviceUsersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupResponse
     */
	public function cloudidentityDevicesDeviceUsersLookup(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}:lookup', \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersLookupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lookupSelfDeviceUsersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LookupSelfDeviceUsersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Wipes the user's account on a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeResponse
     */
	public function cloudidentityDevicesDeviceUsersWipe(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:wipe', \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "wipeDeviceUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesDeviceUsersWipeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists/Searches devices.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListResponse
     */
	public function cloudidentityDevicesList(
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/devices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloudidentityDevicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDevicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDevicesResponse', 'json');
            }
        }

        return $response;
    }
}