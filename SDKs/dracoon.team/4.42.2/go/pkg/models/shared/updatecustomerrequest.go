// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateCustomerRequestCustomerContractTypeEnum - Customer type
type UpdateCustomerRequestCustomerContractTypeEnum string

const (
	UpdateCustomerRequestCustomerContractTypeEnumDemo UpdateCustomerRequestCustomerContractTypeEnum = "demo"
	UpdateCustomerRequestCustomerContractTypeEnumFree UpdateCustomerRequestCustomerContractTypeEnum = "free"
	UpdateCustomerRequestCustomerContractTypeEnumPay  UpdateCustomerRequestCustomerContractTypeEnum = "pay"
)

func (e *UpdateCustomerRequestCustomerContractTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "demo":
		fallthrough
	case "free":
		fallthrough
	case "pay":
		*e = UpdateCustomerRequestCustomerContractTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomerRequestCustomerContractTypeEnum: %s", s)
	}
}

// UpdateCustomerRequest - Request model for updating a customer
type UpdateCustomerRequest struct {
	// Company name
	CompanyName *string `json:"companyName,omitempty"`
	// Customer type
	CustomerContractType UpdateCustomerRequestCustomerContractTypeEnum `json:"customerContractType"`
	// Customer is locked:
	//
	// * `false` - unlocked
	//
	// * `true` - locked
	//
	//
	//
	// All users of this customer will be blocked and can not login anymore.
	IsLocked *bool `json:"isLocked,omitempty"`
	// &#128679; Deprecated since v4.7.0
	//
	// Customer lock status:
	//
	// * `false` - unlocked
	//
	// * `true` - locked
	//
	//
	//
	// Please use `isLocked` instead.
	//
	// All users of this customer will be blocked and can not login anymore.
	LockStatus *bool `json:"lockStatus,omitempty"`
	// Provider customer ID
	ProviderCustomerID *string `json:"providerCustomerId,omitempty"`
	// Maximal disc space which can be allocated by customer in bytes. -1 for unlimited
	QuotaMax *int64 `json:"quotaMax,omitempty"`
	// Maximal number of users
	UserMax *int `json:"userMax,omitempty"`
	// &#128640; Since v4.19.0
	//
	// Maximal number of webhooks
	WebhooksMax *int64 `json:"webhooksMax,omitempty"`
}
