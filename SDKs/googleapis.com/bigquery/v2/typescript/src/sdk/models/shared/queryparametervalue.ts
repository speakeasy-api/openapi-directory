/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class QueryParameterValue extends SpeakeasyBase {
  /**
   * [Optional] The array values, if this is an array type.
   */
  @SpeakeasyMetadata({ elemType: QueryParameterValue })
  @Expose({ name: "arrayValues" })
  @Type(() => QueryParameterValue)
  arrayValues?: QueryParameterValue[];

  /**
   * [Optional] The struct field values, in order of the struct type's declaration.
   */
  @SpeakeasyMetadata({ elemType: QueryParameterValue })
  @Expose({ name: "structValues" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, QueryParameterValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], QueryParameterValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  structValues?: Record<string, QueryParameterValue>;

  /**
   * [Optional] The value of this value, if a simple scalar type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}
