/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * FileList - A list of files.
 */
public class FileList {
    /**
     * The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("files")
    public File[] files;
    public FileList withFiles(File[] files) {
        this.files = files;
        return this;
    }
    
    /**
     * Whether the search process was incomplete. If true, then some search results may be missing, since all documents were not searched. This may occur when searching multiple drives with the "allDrives" corpora, but all corpora could not be searched. When this happens, it is suggested that clients narrow their query by choosing a different corpus such as "user" or "drive".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("incompleteSearch")
    public Boolean incompleteSearch;
    public FileList withIncompleteSearch(Boolean incompleteSearch) {
        this.incompleteSearch = incompleteSearch;
        return this;
    }
    
    /**
     * Identifies what kind of resource this is. Value: the fixed string "drive#fileList".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public FileList withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextPageToken")
    public String nextPageToken;
    public FileList withNextPageToken(String nextPageToken) {
        this.nextPageToken = nextPageToken;
        return this;
    }
    
}
