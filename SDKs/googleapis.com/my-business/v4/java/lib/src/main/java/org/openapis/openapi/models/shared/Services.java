/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Services - Conveniences or help provided by the property to facilitate an easier, more comfortable stay.
 */
public class Services {
    /**
     * Baggage storage. A provision for guests to leave their bags at the hotel when they arrive for their stay before the official check-in time. May or may not apply for guests who wish to leave their bags after check-out and before departing the locale. Also known as bag dropoff.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baggageStorage")
    public Boolean baggageStorage;

    public Services withBaggageStorage(Boolean baggageStorage) {
        this.baggageStorage = baggageStorage;
        return this;
    }
    
    /**
     * Baggage storage exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baggageStorageException")
    public ServicesBaggageStorageExceptionEnum baggageStorageException;

    public Services withBaggageStorageException(ServicesBaggageStorageExceptionEnum baggageStorageException) {
        this.baggageStorageException = baggageStorageException;
        return this;
    }
    
    /**
     * Concierge. Hotel staff member(s) responsible for facilitating an easy, comfortable stay through making reservations for meals, sourcing theater tickets, arranging tours, finding a doctor, making recommendations, and answering questions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("concierge")
    public Boolean concierge;

    public Services withConcierge(Boolean concierge) {
        this.concierge = concierge;
        return this;
    }
    
    /**
     * Concierge exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conciergeException")
    public ServicesConciergeExceptionEnum conciergeException;

    public Services withConciergeException(ServicesConciergeExceptionEnum conciergeException) {
        this.conciergeException = conciergeException;
        return this;
    }
    
    /**
     * Convenience store. A shop at the hotel primarily selling snacks, drinks, non-prescription medicines, health and beauty aids, magazines and newspapers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convenienceStore")
    public Boolean convenienceStore;

    public Services withConvenienceStore(Boolean convenienceStore) {
        this.convenienceStore = convenienceStore;
        return this;
    }
    
    /**
     * Convenience store exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("convenienceStoreException")
    public ServicesConvenienceStoreExceptionEnum convenienceStoreException;

    public Services withConvenienceStoreException(ServicesConvenienceStoreExceptionEnum convenienceStoreException) {
        this.convenienceStoreException = convenienceStoreException;
        return this;
    }
    
    /**
     * Currency exchange. A staff member or automated machine tasked with the transaction of providing the native currency of the hotel's locale in exchange for the foreign currency provided by a guest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyExchange")
    public Boolean currencyExchange;

    public Services withCurrencyExchange(Boolean currencyExchange) {
        this.currencyExchange = currencyExchange;
        return this;
    }
    
    /**
     * Currency exchange exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currencyExchangeException")
    public ServicesCurrencyExchangeExceptionEnum currencyExchangeException;

    public Services withCurrencyExchangeException(ServicesCurrencyExchangeExceptionEnum currencyExchangeException) {
        this.currencyExchangeException = currencyExchangeException;
        return this;
    }
    
    /**
     * Elevator. A passenger elevator that transports guests from one story to another. Also known as lift.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elevator")
    public Boolean elevator;

    public Services withElevator(Boolean elevator) {
        this.elevator = elevator;
        return this;
    }
    
    /**
     * Elevator exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elevatorException")
    public ServicesElevatorExceptionEnum elevatorException;

    public Services withElevatorException(ServicesElevatorExceptionEnum elevatorException) {
        this.elevatorException = elevatorException;
        return this;
    }
    
    /**
     * Front desk. A counter or desk in the lobby or the immediate interior of the hotel where a member of the staff greets guests and processes the information related to their stay (including check-in and check-out). May or may not be manned and open 24/7.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frontDesk")
    public Boolean frontDesk;

    public Services withFrontDesk(Boolean frontDesk) {
        this.frontDesk = frontDesk;
        return this;
    }
    
    /**
     * Front desk exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frontDeskException")
    public ServicesFrontDeskExceptionEnum frontDeskException;

    public Services withFrontDeskException(ServicesFrontDeskExceptionEnum frontDeskException) {
        this.frontDeskException = frontDeskException;
        return this;
    }
    
    /**
     * Full service laundry. Laundry and dry cleaning facilitated and handled by the hotel on behalf of the guest. Does not include the provision for guests to do their own laundry in on-site machines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullServiceLaundry")
    public Boolean fullServiceLaundry;

    public Services withFullServiceLaundry(Boolean fullServiceLaundry) {
        this.fullServiceLaundry = fullServiceLaundry;
        return this;
    }
    
    /**
     * Full service laundry exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fullServiceLaundryException")
    public ServicesFullServiceLaundryExceptionEnum fullServiceLaundryException;

    public Services withFullServiceLaundryException(ServicesFullServiceLaundryExceptionEnum fullServiceLaundryException) {
        this.fullServiceLaundryException = fullServiceLaundryException;
        return this;
    }
    
    /**
     * Gift shop. An on-site store primarily selling souvenirs, mementos and other gift items. May or may not also sell sundries, magazines and newspapers, clothing, or snacks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("giftShop")
    public Boolean giftShop;

    public Services withGiftShop(Boolean giftShop) {
        this.giftShop = giftShop;
        return this;
    }
    
    /**
     * Gift shop exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("giftShopException")
    public ServicesGiftShopExceptionEnum giftShopException;

    public Services withGiftShopException(ServicesGiftShopExceptionEnum giftShopException) {
        this.giftShopException = giftShopException;
        return this;
    }
    
    /**
     * Languages spoken by at least one staff member.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languagesSpoken")
    public LanguagesSpoken languagesSpoken;

    public Services withLanguagesSpoken(LanguagesSpoken languagesSpoken) {
        this.languagesSpoken = languagesSpoken;
        return this;
    }
    
    /**
     * Self service laundry. On-site clothes washers and dryers accessible to guests for the purpose of washing and drying their own clothes. May or may not require payment to use the machines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfServiceLaundry")
    public Boolean selfServiceLaundry;

    public Services withSelfServiceLaundry(Boolean selfServiceLaundry) {
        this.selfServiceLaundry = selfServiceLaundry;
        return this;
    }
    
    /**
     * Self service laundry exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfServiceLaundryException")
    public ServicesSelfServiceLaundryExceptionEnum selfServiceLaundryException;

    public Services withSelfServiceLaundryException(ServicesSelfServiceLaundryExceptionEnum selfServiceLaundryException) {
        this.selfServiceLaundryException = selfServiceLaundryException;
        return this;
    }
    
    /**
     * Social hour. A reception with complimentary soft drinks, tea, coffee, wine and/or cocktails in the afternoon or evening. Can be hosted by hotel staff or guests may serve themselves. Also known as wine hour. The availability of coffee/tea in the lobby throughout the day does not constitute a social or wine hour.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("socialHour")
    public Boolean socialHour;

    public Services withSocialHour(Boolean socialHour) {
        this.socialHour = socialHour;
        return this;
    }
    
    /**
     * Social hour exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("socialHourException")
    public ServicesSocialHourExceptionEnum socialHourException;

    public Services withSocialHourException(ServicesSocialHourExceptionEnum socialHourException) {
        this.socialHourException = socialHourException;
        return this;
    }
    
    /**
     * 24hr front desk. Front desk is staffed 24 hours a day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twentyFourHourFrontDesk")
    public Boolean twentyFourHourFrontDesk;

    public Services withTwentyFourHourFrontDesk(Boolean twentyFourHourFrontDesk) {
        this.twentyFourHourFrontDesk = twentyFourHourFrontDesk;
        return this;
    }
    
    /**
     * 24hr front desk exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twentyFourHourFrontDeskException")
    public ServicesTwentyFourHourFrontDeskExceptionEnum twentyFourHourFrontDeskException;

    public Services withTwentyFourHourFrontDeskException(ServicesTwentyFourHourFrontDeskExceptionEnum twentyFourHourFrontDeskException) {
        this.twentyFourHourFrontDeskException = twentyFourHourFrontDeskException;
        return this;
    }
    
    /**
     * Wake up calls. By direction of the guest, a hotel staff member will phone the guest unit at the requested hour. Also known as morning call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wakeUpCalls")
    public Boolean wakeUpCalls;

    public Services withWakeUpCalls(Boolean wakeUpCalls) {
        this.wakeUpCalls = wakeUpCalls;
        return this;
    }
    
    /**
     * Wake up calls exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wakeUpCallsException")
    public ServicesWakeUpCallsExceptionEnum wakeUpCallsException;

    public Services withWakeUpCallsException(ServicesWakeUpCallsExceptionEnum wakeUpCallsException) {
        this.wakeUpCallsException = wakeUpCallsException;
        return this;
    }
    
    public Services(){}
}
