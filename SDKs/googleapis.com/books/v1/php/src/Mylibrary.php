<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Mylibrary 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Deletes an annotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteResponse
     */
	public function booksMylibraryAnnotationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/annotations/{annotationId}', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Inserts a new annotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertResponse
     */
	public function booksMylibraryAnnotationsInsert(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/annotations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "annotation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->annotation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Annotation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of annotations, possibly filtered.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListResponse
     */
	public function booksMylibraryAnnotationsList(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/annotations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->annotations = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Annotations', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the summary of specified layers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummarySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummaryResponse
     */
	public function booksMylibraryAnnotationsSummary(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummarySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummaryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/annotations/summary');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummaryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->annotationsSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AnnotationsSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing annotation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateResponse
     */
	public function booksMylibraryAnnotationsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/annotations/{annotationId}', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "annotation", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryAnnotationsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->annotation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Annotation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a volume to a bookshelf.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeResponse
     */
	public function booksMylibraryBookshelvesAddVolume(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/bookshelves/{shelf}/addVolume', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesAddVolumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clears all volumes from a bookshelf.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesResponse
     */
	public function booksMylibraryBookshelvesClearVolumes(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/bookshelves/{shelf}/clearVolumes', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesClearVolumesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves metadata for a specific bookshelf belonging to the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetResponse
     */
	public function booksMylibraryBookshelvesGet(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/bookshelves/{shelf}', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bookshelf = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bookshelf', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of bookshelves belonging to the authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListResponse
     */
	public function booksMylibraryBookshelvesList(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/bookshelves');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bookshelves = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Bookshelves', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a volume within a bookshelf.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeResponse
     */
	public function booksMylibraryBookshelvesMoveVolume(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/bookshelves/{shelf}/moveVolume', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesMoveVolumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a volume from a bookshelf.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeResponse
     */
	public function booksMylibraryBookshelvesRemoveVolume(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/bookshelves/{shelf}/removeVolume', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesRemoveVolumeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets volume information for volumes on a bookshelf.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListResponse
     */
	public function booksMylibraryBookshelvesVolumesList(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/bookshelves/{shelf}/volumes', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryBookshelvesVolumesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumes = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Volumes', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves my reading position information for a volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetResponse
     */
	public function booksMylibraryReadingpositionsGet(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/readingpositions/{volumeId}', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readingPosition = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReadingPosition', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets my reading position information for a volume.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionResponse
     */
	public function booksMylibraryReadingpositionsSetPosition(
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/books/v1/mylibrary/readingpositions/{volumeId}/setPosition', \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BooksMylibraryReadingpositionsSetPositionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}