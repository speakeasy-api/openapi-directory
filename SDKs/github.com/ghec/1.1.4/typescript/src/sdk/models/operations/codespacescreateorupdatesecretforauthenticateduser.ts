/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestBody extends SpeakeasyBase {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encrypted_value" })
  encryptedValue?: string;

  /**
   * ID of the key you used to encrypt the secret.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key_id" })
  keyId: string;

  /**
   * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/enterprise-cloud@latest//rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selected_repository_ids" })
  selectedRepositoryIds?: any[];
}

export class CodespacesCreateOrUpdateSecretForAuthenticatedUserRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CodespacesCreateOrUpdateSecretForAuthenticatedUserRequestBody;

  /**
   * The name of the secret.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=secret_name",
  })
  secretName: string;
}

export class CodespacesCreateOrUpdateSecretForAuthenticatedUserResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response after successfully creating a secret
   */
  @SpeakeasyMetadata()
  emptyObject?: Record<string, any>;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
