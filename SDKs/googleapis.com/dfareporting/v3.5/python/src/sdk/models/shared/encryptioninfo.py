"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EncryptionInfoEncryptionEntityTypeEnum(str, Enum):
    r"""The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer."""
    ENCRYPTION_ENTITY_TYPE_UNKNOWN = 'ENCRYPTION_ENTITY_TYPE_UNKNOWN'
    DCM_ACCOUNT = 'DCM_ACCOUNT'
    DCM_ADVERTISER = 'DCM_ADVERTISER'
    DBM_PARTNER = 'DBM_PARTNER'
    DBM_ADVERTISER = 'DBM_ADVERTISER'
    ADWORDS_CUSTOMER = 'ADWORDS_CUSTOMER'
    DFP_NETWORK_CODE = 'DFP_NETWORK_CODE'

class EncryptionInfoEncryptionSourceEnum(str, Enum):
    r"""Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer."""
    ENCRYPTION_SCOPE_UNKNOWN = 'ENCRYPTION_SCOPE_UNKNOWN'
    AD_SERVING = 'AD_SERVING'
    DATA_TRANSFER = 'DATA_TRANSFER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EncryptionInfo:
    r"""A description of how user IDs are encrypted."""
    
    encryption_entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionEntityId'), 'exclude': lambda f: f is None }})
    r"""The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer."""  
    encryption_entity_type: Optional[EncryptionInfoEncryptionEntityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionEntityType'), 'exclude': lambda f: f is None }})
    r"""The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer."""  
    encryption_source: Optional[EncryptionInfoEncryptionSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptionSource'), 'exclude': lambda f: f is None }})
    r"""Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"dfareporting#encryptionInfo\\"."""  
    