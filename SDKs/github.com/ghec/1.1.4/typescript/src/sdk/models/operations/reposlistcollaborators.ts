/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
 */
export enum ReposListCollaboratorsAffiliationEnum {
  Outside = "outside",
  Direct = "direct",
  All = "all",
}

/**
 * Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
 */
export enum ReposListCollaboratorsPermissionEnum {
  Pull = "pull",
  Triage = "triage",
  Push = "push",
  Maintain = "maintain",
  Admin = "admin",
}

export class ReposListCollaboratorsRequest extends SpeakeasyBase {
  /**
   * Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=affiliation",
  })
  affiliation?: ReposListCollaboratorsAffiliationEnum;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=permission",
  })
  permission?: ReposListCollaboratorsPermissionEnum;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class ReposListCollaboratorsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Resource not found
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.Collaborator })
  collaborators?: shared.Collaborator[];
}
