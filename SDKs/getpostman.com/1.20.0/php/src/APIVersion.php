<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class APIVersion 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create API Version
     * 
     * This call creates a new API version in the specified API.  
     * 
     * Request body should contain a `version` object which should have fields:
     * 
     * <table>
     * <tr>
     * 	<td>name</td>
     * 	<td>Required. Name of the API Version</td>
     * </tr>
     * <tr>
     * 	<td>source</td>
     * 	<td>
     * 		If specified, it will copy the contents of the specified api version to create a new api verison.
     * 		<table>
     * 			<tr>
     * 				<td>id</td>
     * 				<td>Required. Id of the apiversion from where the details are to be copied</td>
     * 			</tr>
     * 			<tr>
     * 				<td>schema</td>
     * 				<td>Boolean. If true then copies the schema from the specified api version</td>
     * 			</tr>
     * 			<tr>
     * 				<td>relations</td>
     * 				<td>Object. {"&lt;relationType&gt;": true/false}.  
     * 					Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`
     * 				Relation types which should be copied over to the new api verison</td>
     * 			</tr>
     * 		</table>
     * 	</td>
     * </tr>
     * </table>
     * 
     * Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApiVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateApiVersionResponse
     */
	public function createApiVersion(
        \OpenAPI\OpenAPI\Models\Operations\CreateApiVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateApiVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions', \OpenAPI\OpenAPI\Models\Operations\CreateApiVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateApiVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createApiVersion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateApiVersion200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an API Version
     * 
     * This call deletes an existing API Version having the specified id.  
     * 
     * Response contains an `version` object with `id` of the API Version which was deleted.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAnApiVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAnApiVersionResponse
     */
	public function deleteAnApiVersion(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAnApiVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAnApiVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions/{apiVersionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteAnApiVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAnApiVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteAnApiVersion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\DeleteAnApiVersion200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All API Versions
     * 
     * This call fetches details about the all the API Versions in the specified API.
     * 
     * The response will contain an array `versions` object which would be a list of all the API Version along with their details.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllApiVersionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllApiVersionsResponse
     */
	public function getAllApiVersions(
        \OpenAPI\OpenAPI\Models\Operations\GetAllApiVersionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllApiVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions', \OpenAPI\OpenAPI\Models\Operations\GetAllApiVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllApiVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllApiVersions200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAllApiVersions200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an API Version
     * 
     * This call fetches details about the specified API Version.
     * 
     * The response will contain a `version` object which would contain all the details of the API Version.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAnApiVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAnApiVersionResponse
     */
	public function getAnApiVersion(
        \OpenAPI\OpenAPI\Models\Operations\GetAnApiVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAnApiVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions/{apiVersionId}', \OpenAPI\OpenAPI\Models\Operations\GetAnApiVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAnApiVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAnApiVersion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetAnApiVersion200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an API Version
     * 
     * This call updates an existing API Version.  
     * 
     * Request body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.
     * 
     * Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.
     * 
     * > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAnApiVersionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAnApiVersionResponse
     */
	public function updateAnApiVersion(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAnApiVersionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAnApiVersionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/apis/{apiId}/versions/{apiVersionId}', \OpenAPI\OpenAPI\Models\Operations\UpdateAnApiVersionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAnApiVersionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateAnApiVersion200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateAnApiVersion200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}