<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VerifyPasswordResponse - Request of verifying the password.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VerifyPasswordResponse
{
    /**
     * The name of the user.
     * 
     * @var ?string $displayName
     */
	#[\JMS\Serializer\Annotation\SerializedName('displayName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $displayName = null;
    
    /**
     * The email returned by the IdP. NOTE: The federated login user may not own the email.
     * 
     * @var ?string $email
     */
	#[\JMS\Serializer\Annotation\SerializedName('email')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $email = null;
    
    /**
     * If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
     * 
     * @var ?string $expiresIn
     */
	#[\JMS\Serializer\Annotation\SerializedName('expiresIn')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $expiresIn = null;
    
    /**
     * The GITKit token for authenticated user.
     * 
     * @var ?string $idToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('idToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $idToken = null;
    
    /**
     * The fixed string "identitytoolkit#VerifyPasswordResponse".
     * 
     * @var ?string $kind
     */
	#[\JMS\Serializer\Annotation\SerializedName('kind')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kind = null;
    
    /**
     * The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
     * 
     * @var ?string $localId
     */
	#[\JMS\Serializer\Annotation\SerializedName('localId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $localId = null;
    
    /**
     * The OAuth2 access token.
     * 
     * @var ?string $oauthAccessToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauthAccessToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthAccessToken = null;
    
    /**
     * The OAuth2 authorization code.
     * 
     * @var ?string $oauthAuthorizationCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauthAuthorizationCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $oauthAuthorizationCode = null;
    
    /**
     * The lifetime in seconds of the OAuth2 access token.
     * 
     * @var ?int $oauthExpireIn
     */
	#[\JMS\Serializer\Annotation\SerializedName('oauthExpireIn')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $oauthExpireIn = null;
    
    /**
     * The URI of the user's photo at IdP
     * 
     * @var ?string $photoUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('photoUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $photoUrl = null;
    
    /**
     * If idToken is STS id token, then this field will be refresh token.
     * 
     * @var ?string $refreshToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('refreshToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $refreshToken = null;
    
    /**
     * Whether the email is registered.
     * 
     * @var ?bool $registered
     */
	#[\JMS\Serializer\Annotation\SerializedName('registered')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $registered = null;
    
	public function __construct()
	{
		$this->displayName = null;
		$this->email = null;
		$this->expiresIn = null;
		$this->idToken = null;
		$this->kind = null;
		$this->localId = null;
		$this->oauthAccessToken = null;
		$this->oauthAuthorizationCode = null;
		$this->oauthExpireIn = null;
		$this->photoUrl = null;
		$this->refreshToken = null;
		$this->registered = null;
	}
}
