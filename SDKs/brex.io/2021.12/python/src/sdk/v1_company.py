"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class V1Company:
    r"""Company Search methods"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def company_alternative_search(self, request: operations.CompanyAlternativeSearchRequest, security: operations.CompanyAlternativeSearchSecurity) -> operations.CompanyAlternativeSearchResponse:
        r"""Retrieves a list of companies from the KYC API company index
        KYC API company index lookup by country and mixed parameters. This function requires a country code then a mixture of name
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyAlternativeSearchRequest, base_url, '/api/v1/company/search/{country}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyAlternativeSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyAlternativeSearch200ApplicationJSON]])
                res.company_alternative_search_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyAlternativeSearchDefaultApplicationJSON])
                res.company_alternative_search_default_application_json_object = out

        return res

    def company_announcement(self, request: operations.CompanyAnnouncementRequest, security: operations.CompanyAnnouncementSecurity) -> operations.CompanyAnnouncementResponse:
        r"""Retrieves announcement data
        Request full announcement data identified by announcement id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyAnnouncementRequest, base_url, '/api/v1/company/announcement/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyAnnouncementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyAnnouncement200ApplicationJSON]])
                res.company_announcement_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyAnnouncementDefaultApplicationJSON])
                res.company_announcement_default_application_json_object = out

        return res

    def company_deepsearch_isin(self, request: operations.CompanyDeepsearchISINRequestBody, security: operations.CompanyDeepsearchISINSecurity) -> operations.CompanyDeepsearchISINResponse:
        r"""Retrieves a list of stock exchange listings
        Lookup stock exchange listings identified by an ISIN (International Securities Identification Number) number. Search is forwarded to a provider.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/company/deepsearch/isin'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyDeepsearchISINResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyDeepsearchISIN200ApplicationJSON]])
                res.company_deepsearch_isin_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyDeepsearchISINDefaultApplicationJSON])
                res.company_deepsearch_isin_default_application_json_object = out

        return res

    def company_deepsearch_lei(self, request: operations.CompanyDeepsearchLEIRequest, security: operations.CompanyDeepsearchLEISecurity) -> operations.CompanyDeepsearchLEIResponse:
        r"""Retrieves a list of companies
        Lookup companies identified by a LEI (Legal Entity Identifier) number. Search is forwarded to a provider.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyDeepsearchLEIRequest, base_url, '/api/v1/company/deepsearch/lei/{number}', request)
        
        query_params = utils.get_query_params(operations.CompanyDeepsearchLEIRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyDeepsearchLEIResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyDeepsearchLEI200ApplicationJSON])
                res.company_deepsearch_lei_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyDeepsearchLEIDefaultApplicationJSON])
                res.company_deepsearch_lei_default_application_json_object = out

        return res

    def company_deepsearch_name(self, request: operations.CompanyDeepsearchNameRequest, security: operations.CompanyDeepsearchNameSecurity) -> operations.CompanyDeepsearchNameResponse:
        r"""Retrieves a list of companies from the official business register
        Search for companies with a certain name. Search is forwarded to the respective business register of the country.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyDeepsearchNameRequest, base_url, '/api/v1/company/deepsearch/name/{country}/{name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyDeepsearchNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyDeepsearchName200ApplicationJSON]])
                res.company_deepsearch_name_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyDeepsearchNameDefaultApplicationJSON])
                res.company_deepsearch_name_default_application_json_object = out

        return res

    def company_deepsearch_number(self, request: operations.CompanyDeepsearchNumberRequest, security: operations.CompanyDeepsearchNumberSecurity) -> operations.CompanyDeepsearchNumberResponse:
        r"""Retrieves a list of companies from the official business register
        Search for companies with a certain register number. Search is forwarded to the respective business register of the country.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyDeepsearchNumberRequest, base_url, '/api/v1/company/deepsearch/number/{country}/{number}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyDeepsearchNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyDeepsearchNumber200ApplicationJSON]])
                res.company_deepsearch_number_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyDeepsearchNumberDefaultApplicationJSON])
                res.company_deepsearch_number_default_application_json_object = out

        return res

    def company_id_announcements(self, request: operations.CompanyIDAnnouncementsRequest, security: operations.CompanyIDAnnouncementsSecurity) -> operations.CompanyIDAnnouncementsResponse:
        r"""Retrieves company announcements
        Search announcements filed to the business register from a company identified by an id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyIDAnnouncementsRequest, base_url, '/api/v1/company/{id}/announcements', request)
        
        query_params = utils.get_query_params(operations.CompanyIDAnnouncementsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyIDAnnouncementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyIDAnnouncements200ApplicationJSON]])
                res.company_id_announcements_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyIDAnnouncementsDefaultApplicationJSON])
                res.company_id_announcements_default_application_json_object = out

        return res

    def company_id_dataset(self, request: operations.CompanyIDDatasetRequest, security: operations.CompanyIDDatasetSecurity) -> operations.CompanyIDDatasetResponse:
        r"""Retrieves company details
        Get company details by id. The level of details is defined by the dataset parameter
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyIDDatasetRequest, base_url, '/api/v1/company/{id}/{dataset}', request)
        
        query_params = utils.get_query_params(operations.CompanyIDDatasetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyIDDatasetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Oneapi1v11company1deepsearch1lei1Percent7BnumberPercent7DGetResponses200ContentApplication1jsonSchemaPropertiesCompany])
                res.oneapi_1v1_1company_1deepsearch_1lei_1_percent_7_bnumber_percent_7_d_get_responses_200_content_application_1json_schema_properties_company = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyIDDatasetDefaultApplicationJSON])
                res.company_id_dataset_default_application_json_object = out

        return res

    def company_id_super(self, request: operations.CompanyIDSuperRequest, security: operations.CompanyIDSuperSecurity) -> operations.CompanyIDSuperResponse:
        r"""Retrieves structured data extracted from a company document
        Request company superdata identified by company id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyIDSuperRequest, base_url, '/api/v1/company/{id}/super/{country}', request)
        
        query_params = utils.get_query_params(operations.CompanyIDSuperRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyIDSuperResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyIDSuper200ApplicationJSON]])
                res.company_id_super_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyIDSuperDefaultApplicationJSON])
                res.company_id_super_default_application_json_object = out

        return res

    def company_monitor_change_types_list(self) -> operations.CompanyMonitorChangeTypesListResponse:
        r"""Get available ChangeTypes
        Get current list of available ChangeTypes to subscribe to
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/company/monitoring/changeTypes'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyMonitorChangeTypesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[str]])
                res.company_monitor_change_types_list_200_application_json_strings = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyMonitorChangeTypesListDefaultApplicationJSON])
                res.company_monitor_change_types_list_default_application_json_object = out

        return res

    def company_monitor_id(self, request: operations.CompanyMonitorIDRequest, security: operations.CompanyMonitorIDSecurity) -> operations.CompanyMonitorIDResponse:
        r"""Get monitor status for specific company id
        Query status of registered monitors for a specific company identified by a company id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyMonitorIDRequest, base_url, '/api/v1/company/monitoring/list/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyMonitorIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyMonitorID200ApplicationJSON]])
                res.company_monitor_id_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyMonitorIDDefaultApplicationJSON])
                res.company_monitor_id_default_application_json_object = out

        return res

    def company_monitor_list(self) -> operations.CompanyMonitorListResponse:
        r"""Retrieves a list of registered monitors
        Query list of all registered monitors for logged in user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/company/monitoring/list'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyMonitorListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyMonitorList200ApplicationJSON]])
                res.company_monitor_list_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyMonitorListDefaultApplicationJSON])
                res.company_monitor_list_default_application_json_object = out

        return res

    def company_monitor_register(self, request: operations.CompanyMonitorRegisterRequest, security: operations.CompanyMonitorRegisterSecurity) -> operations.CompanyMonitorRegisterResponse:
        r"""Register a Company for monitoring
        Add a company to your perpetual monitoring list and register a callback URL to get monitoring alerts.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyMonitorRegisterRequest, base_url, '/api/v1/company/monitoring/register/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyMonitorRegisterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyMonitorRegister200ApplicationJSON])
                res.company_monitor_register_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyMonitorRegisterDefaultApplicationJSON])
                res.company_monitor_register_default_application_json_object = out

        return res

    def company_monitor_unregister(self, request: operations.CompanyMonitorUnregisterRequest, security: operations.CompanyMonitorUnregisterSecurity) -> operations.CompanyMonitorUnregisterResponse:
        r"""Deactivates an active notification
        Deactivate a previously registered company monitor identified by the notifier id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyMonitorUnregisterRequest, base_url, '/api/v1/company/monitoring/unregister/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyMonitorUnregisterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyMonitorUnregisterDefaultApplicationJSON])
                res.company_monitor_unregister_default_application_json_object = out

        return res

    def company_notification_id(self, request: operations.CompanyNotificationIDRequest, security: operations.CompanyNotificationIDSecurity) -> operations.CompanyNotificationIDResponse:
        r"""Retrieves a list of registered notifications
        Query list of registered notifications for a specific company identified by a company id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyNotificationIDRequest, base_url, '/api/v1/company/notification/list/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyNotificationIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyNotificationID200ApplicationJSON]])
                res.company_notification_id_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyNotificationIDDefaultApplicationJSON])
                res.company_notification_id_default_application_json_object = out

        return res

    def company_notification_list(self) -> operations.CompanyNotificationListResponse:
        r"""Retrieves a list of registered notifications
        Query list of registered callback URLs for logged in user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/company/notification/list'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyNotificationListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanyNotificationList200ApplicationJSON]])
                res.company_notification_list_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyNotificationListDefaultApplicationJSON])
                res.company_notification_list_default_application_json_object = out

        return res

    def company_notification_register(self, request: operations.CompanyNotificationRegisterRequest, security: operations.CompanyNotificationRegisterSecurity) -> operations.CompanyNotificationRegisterResponse:
        r"""Creates a new notification
        Register a new callback URL to get notifications about companies.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyNotificationRegisterRequest, base_url, '/api/v1/company/notification/register/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyNotificationRegisterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyNotificationRegister200ApplicationJSON])
                res.company_notification_register_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyNotificationRegisterDefaultApplicationJSON])
                res.company_notification_register_default_application_json_object = out

        return res

    def company_notification_unregister(self, request: operations.CompanyNotificationUnregisterRequest, security: operations.CompanyNotificationUnregisterSecurity) -> operations.CompanyNotificationUnregisterResponse:
        r"""Unregister a company from Monitoring
        Deactivate a previously registered company monitor identified by the notifier id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanyNotificationUnregisterRequest, base_url, '/api/v1/company/notification/unregister/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanyNotificationUnregisterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanyNotificationUnregisterDefaultApplicationJSON])
                res.company_notification_unregister_default_application_json_object = out

        return res

    def company_search_name(self, request: operations.CompanySearchNameRequest, security: operations.CompanySearchNameSecurity) -> operations.CompanySearchNameResponse:
        r"""Retrieves a list of companies from the KYC API company index
        KYC API company index lookup for companies with a certain name in a country.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanySearchNameRequest, base_url, '/api/v1/company/search/name/{country}/{name}', request)
        
        query_params = utils.get_query_params(operations.CompanySearchNameRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanySearchNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanySearchName200ApplicationJSON]])
                res.company_search_name_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanySearchNameDefaultApplicationJSON])
                res.company_search_name_default_application_json_object = out

        return res

    def company_search_number(self, request: operations.CompanySearchNumberRequest, security: operations.CompanySearchNumberSecurity) -> operations.CompanySearchNumberResponse:
        r"""Retrieves a list of companies from the KYC API company index
        KYC API company index lookup for companies with a certain register number in a country.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CompanySearchNumberRequest, base_url, '/api/v1/company/search/number/{country}/{number}', request)
        
        query_params = utils.get_query_params(operations.CompanySearchNumberRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CompanySearchNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CompanySearchNumber200ApplicationJSON]])
                res.company_search_number_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CompanySearchNumberDefaultApplicationJSON])
                res.company_search_number_default_application_json_object = out

        return res

    