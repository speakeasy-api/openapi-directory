/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { GoogleCloudContactcenterinsightsV1CallAnnotation } from "./googlecloudcontactcenterinsightsv1callannotation";
import { GoogleCloudContactcenterinsightsV1ConversationLevelSentiment } from "./googlecloudcontactcenterinsightsv1conversationlevelsentiment";
import { GoogleCloudContactcenterinsightsV1Entity } from "./googlecloudcontactcenterinsightsv1entity";
import { GoogleCloudContactcenterinsightsV1Intent } from "./googlecloudcontactcenterinsightsv1intent";
import { GoogleCloudContactcenterinsightsV1IssueModelResult } from "./googlecloudcontactcenterinsightsv1issuemodelresult";
import { GoogleCloudContactcenterinsightsV1PhraseMatchData } from "./googlecloudcontactcenterinsightsv1phrasematchdata";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Call-specific metadata created during analysis.
 */
export class GoogleCloudContactcenterinsightsV1AnalysisResultCallAnalysisMetadata extends SpeakeasyBase {
  /**
   * A list of call annotations that apply to this call.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudContactcenterinsightsV1CallAnnotation,
  })
  @Expose({ name: "annotations" })
  @Type(() => GoogleCloudContactcenterinsightsV1CallAnnotation)
  annotations?: GoogleCloudContactcenterinsightsV1CallAnnotation[];

  /**
   * All the entities in the call.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudContactcenterinsightsV1Entity })
  @Expose({ name: "entities" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GoogleCloudContactcenterinsightsV1Entity> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          GoogleCloudContactcenterinsightsV1Entity
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  entities?: Record<string, GoogleCloudContactcenterinsightsV1Entity>;

  /**
   * All the matched intents in the call.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudContactcenterinsightsV1Intent })
  @Expose({ name: "intents" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GoogleCloudContactcenterinsightsV1Intent> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          GoogleCloudContactcenterinsightsV1Intent
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  intents?: Record<string, GoogleCloudContactcenterinsightsV1Intent>;

  /**
   * Issue Modeling result on a conversation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issueModelResult" })
  @Type(() => GoogleCloudContactcenterinsightsV1IssueModelResult)
  issueModelResult?: GoogleCloudContactcenterinsightsV1IssueModelResult;

  /**
   * All the matched phrase matchers in the call.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudContactcenterinsightsV1PhraseMatchData,
  })
  @Expose({ name: "phraseMatchers" })
  @Transform(
    ({ value }) => {
      const obj: Record<
        string,
        GoogleCloudContactcenterinsightsV1PhraseMatchData
      > = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          GoogleCloudContactcenterinsightsV1PhraseMatchData
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  phraseMatchers?: Record<
    string,
    GoogleCloudContactcenterinsightsV1PhraseMatchData
  >;

  /**
   * Overall conversation-level sentiment for each channel of the call.
   */
  @SpeakeasyMetadata({
    elemType: GoogleCloudContactcenterinsightsV1ConversationLevelSentiment,
  })
  @Expose({ name: "sentiments" })
  @Type(() => GoogleCloudContactcenterinsightsV1ConversationLevelSentiment)
  sentiments?: GoogleCloudContactcenterinsightsV1ConversationLevelSentiment[];
}
