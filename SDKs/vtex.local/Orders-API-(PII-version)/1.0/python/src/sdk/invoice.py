"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Invoice:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def invoice_notification2(self, request: operations.InvoiceNotification2Request) -> operations.InvoiceNotification2Response:
        r"""Order invoice notification
        Once the order is invoiced, the seller should use this request to send the invoice information to the marketplace.
        
        We strongly recommend that you always send the object of the invoiced items. With this practice, rounding errors will be avoided.
        
        It is not allowed to use the same `invoiceNumber` in more than one request to the Order Invoice Notification endpoint.
        
        Be aware that this endpoint is also used by the seller to send the order tracking information. This, however, should be done in a separate moment, once the seller has the tracking information.
        
        
        > The `Notify invoice` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InvoiceNotification2Request, base_url, '/api/orders/pvt/document/{orderId}/invoices', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "invoice_notification_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvoiceNotification2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.InvoiceNotification2200ApplicationJSON])
                res.invoice_notification2_200_application_json_object = out
        elif http_res.status_code in [403, 404, 429]:
            pass

        return res

    