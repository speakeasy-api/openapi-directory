// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableRearPortTypeEnum string

const (
	WritableRearPortTypeEnumEightp8c              WritableRearPortTypeEnum = "8p8c"
	WritableRearPortTypeEnumOneHundredAndTenPunch WritableRearPortTypeEnum = "110-punch"
	WritableRearPortTypeEnumBnc                   WritableRearPortTypeEnum = "bnc"
	WritableRearPortTypeEnumMrj21                 WritableRearPortTypeEnum = "mrj21"
	WritableRearPortTypeEnumFc                    WritableRearPortTypeEnum = "fc"
	WritableRearPortTypeEnumLc                    WritableRearPortTypeEnum = "lc"
	WritableRearPortTypeEnumLcApc                 WritableRearPortTypeEnum = "lc-apc"
	WritableRearPortTypeEnumLsh                   WritableRearPortTypeEnum = "lsh"
	WritableRearPortTypeEnumLshApc                WritableRearPortTypeEnum = "lsh-apc"
	WritableRearPortTypeEnumMpo                   WritableRearPortTypeEnum = "mpo"
	WritableRearPortTypeEnumMtrj                  WritableRearPortTypeEnum = "mtrj"
	WritableRearPortTypeEnumSc                    WritableRearPortTypeEnum = "sc"
	WritableRearPortTypeEnumScApc                 WritableRearPortTypeEnum = "sc-apc"
	WritableRearPortTypeEnumSt                    WritableRearPortTypeEnum = "st"
)

func (e *WritableRearPortTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "8p8c":
		fallthrough
	case "110-punch":
		fallthrough
	case "bnc":
		fallthrough
	case "mrj21":
		fallthrough
	case "fc":
		fallthrough
	case "lc":
		fallthrough
	case "lc-apc":
		fallthrough
	case "lsh":
		fallthrough
	case "lsh-apc":
		fallthrough
	case "mpo":
		fallthrough
	case "mtrj":
		fallthrough
	case "sc":
		fallthrough
	case "sc-apc":
		fallthrough
	case "st":
		*e = WritableRearPortTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableRearPortTypeEnum: %s", s)
	}
}

type WritableRearPortInput struct {
	Cable       *NestedCableInput        `json:"cable,omitempty"`
	Description *string                  `json:"description,omitempty"`
	Device      int64                    `json:"device"`
	Name        string                   `json:"name"`
	Positions   *int64                   `json:"positions,omitempty"`
	Tags        []string                 `json:"tags,omitempty"`
	Type        WritableRearPortTypeEnum `json:"type"`
}
