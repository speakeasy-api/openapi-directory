"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class UserStorageProvider:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_id_name(self, request: operations.GetIDNameRequest) -> operations.GetIDNameResponse:
        r"""Need this for admin console to display simple name of provider when displaying client detail   KEYCLOAK-4328"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetIDNameRequest, base_url, '/{id}/name', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetIDNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_id_name_2_xx_application_json_object = out

        return res

    def get_realm_user_storage_id_name(self, request: operations.GetRealmUserStorageIDNameRequest) -> operations.GetRealmUserStorageIDNameResponse:
        r"""Need this for admin console to display simple name of provider when displaying user detail   KEYCLOAK-4328"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRealmUserStorageIDNameRequest, base_url, '/{realm}/user-storage/{id}/name', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRealmUserStorageIDNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_realm_user_storage_id_name_2_xx_application_json_object = out

        return res

    def post_realm_user_storage_id_remove_imported_users(self, request: operations.PostRealmUserStorageIDRemoveImportedUsersRequest) -> operations.PostRealmUserStorageIDRemoveImportedUsersResponse:
        r"""Remove imported users"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmUserStorageIDRemoveImportedUsersRequest, base_url, '/{realm}/user-storage/{id}/remove-imported-users', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmUserStorageIDRemoveImportedUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_user_storage_id_sync(self, request: operations.PostRealmUserStorageIDSyncRequest) -> operations.PostRealmUserStorageIDSyncResponse:
        r"""Trigger sync of users   Action can be \\"triggerFullSync\\" or \\"triggerChangedUsersSync\\" """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmUserStorageIDSyncRequest, base_url, '/{realm}/user-storage/{id}/sync', request)
        
        query_params = utils.get_query_params(operations.PostRealmUserStorageIDSyncRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmUserStorageIDSyncResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SynchronizationResult])
                res.synchronization_result = out

        return res

    def post_realm_user_storage_id_unlink_users(self, request: operations.PostRealmUserStorageIDUnlinkUsersRequest) -> operations.PostRealmUserStorageIDUnlinkUsersResponse:
        r"""Unlink imported users from a storage provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmUserStorageIDUnlinkUsersRequest, base_url, '/{realm}/user-storage/{id}/unlink-users', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmUserStorageIDUnlinkUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_realm_user_storage_parent_id_mappers_id_sync(self, request: operations.PostRealmUserStorageParentIDMappersIDSyncRequest) -> operations.PostRealmUserStorageParentIDMappersIDSyncResponse:
        r"""Trigger sync of mapper data related to ldap mapper (roles, groups, â€¦\u200B)   direction is \\"fedToKeycloak\\" or \\"keycloakToFed\\" """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostRealmUserStorageParentIDMappersIDSyncRequest, base_url, '/{realm}/user-storage/{parentId}/mappers/{id}/sync', request)
        
        query_params = utils.get_query_params(operations.PostRealmUserStorageParentIDMappersIDSyncRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRealmUserStorageParentIDMappersIDSyncResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code >= 200 and http_res.status_code < 300:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SynchronizationResult])
                res.synchronization_result = out

        return res

    