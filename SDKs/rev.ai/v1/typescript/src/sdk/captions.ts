/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Captions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get Captions
   *
   * @remarks
   * Returns the caption output for a transcription job. We currently support SubRip (SRT) and Web Video Text Tracks (VTT) output.
   * Caption output format can be specified in the `Accept` header. Returns SRT by default.
   * ***
   * Note: For streaming jobs, transient failure of our storage during a live session may prevent the final hypothesis elements from saving properly, resulting in an incomplete caption file. This is rare, but not impossible.
   *
   */
  getCaptions(
    req: operations.GetCaptionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCaptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCaptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/jobs/{id}/captions", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCaptionsResponse =
        new operations.GetCaptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/x-subrip`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/vtt`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getCaptions401ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCaptions401ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getCaptions404ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCaptions404ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getCaptions405ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCaptions405ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getCaptions406ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCaptions406ApplicationProblemPlusJson
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.getCaptions409ApplicationProblemPlusJsonObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetCaptions409ApplicationProblemPlusJson
              );
          }
          break;
      }

      return res;
    });
  }
}
