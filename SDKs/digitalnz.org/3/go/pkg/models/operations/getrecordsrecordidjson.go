// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetRecordsRecordIDJSONPathParams struct {
	// Every record has a unique, persistent *record_id*.
	RecordID int64 `pathParam:"style=simple,explode=false,name=record_id"`
}

// GetRecordsRecordIDJSONFormatEnum - Note - There is a small difference with some field names in the response between JSON and XML.
// When a field name has more than one word, JSON format will separate the words with an underscore, eg. "content_partner", whereas XML uses a hyphenated naming convention, eg. "content-partner".
type GetRecordsRecordIDJSONFormatEnum string

const (
	GetRecordsRecordIDJSONFormatEnumJSON GetRecordsRecordIDJSONFormatEnum = "json"
	GetRecordsRecordIDJSONFormatEnumXML  GetRecordsRecordIDJSONFormatEnum = "xml"
)

func (e *GetRecordsRecordIDJSONFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "json":
		fallthrough
	case "xml":
		*e = GetRecordsRecordIDJSONFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRecordsRecordIDJSONFormatEnum: %s", s)
	}
}

type GetRecordsRecordIDJSONQueryParams struct {
	// To access the API you will need your own DigitalNZ account and [API key](https://digitalnz.org/api_keys/edit).
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Comma-separated whitelist of fields to be returned. The syntax *"&fields=verbose"* can be used to return the bulk of the fields, or you can customise which fields you are interested in, eg. *"&fields=id,title,subject,collection,landing_url,locations"*.
	//
	Fields *string `queryParam:"style=form,explode=false,name=fields"`
	// Note - There is a small difference with some field names in the response between JSON and XML.
	// When a field name has more than one word, JSON format will separate the words with an underscore, eg. "content_partner", whereas XML uses a hyphenated naming convention, eg. "content-partner".
	//
	Format GetRecordsRecordIDJSONFormatEnum `queryParam:"style=form,explode=true,name=format"`
}

type GetRecordsRecordIDJSONRequest struct {
	PathParams  GetRecordsRecordIDJSONPathParams
	QueryParams GetRecordsRecordIDJSONQueryParams
}

type GetRecordsRecordIDJSONResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// API Key is missing or invalid.
	GetRecordsRecordIDJSON403ApplicationJSONObject map[string]interface{}
	// Resource not found
	GetRecordsRecordIDJSON404ApplicationJSONObject map[string]interface{}
	// ok
	Record *shared.Record
}
