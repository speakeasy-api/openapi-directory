/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Suppliers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Removes an existing Supplier.
   */
  suppliersDelete(
    req: operations.SuppliersDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SuppliersDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/suppliers/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersDeleteResponse =
        new operations.SuppliersDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.suppliersDelete200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of company's Suppliers. Supports OData querying protocol.
   * Filtering is forbidden.
   * Ordering is allowed by "id" and "code" fields.
   */
  suppliersGet(
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersGetResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/suppliers";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersGetResponse =
        new operations.SuppliersGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.pageResultSupplierQueryDto = utils.objectToClass(
              httpRes?.data,
              shared.PageResultSupplierQueryDto
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of Supplier's account transactions.
   */
  suppliersGetAccountTrans(
    req: operations.SuppliersGetAccountTransRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersGetAccountTransResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SuppliersGetAccountTransRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/suppliers/{itemId}/accountTrans",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersGetAccountTransResponse =
        new operations.SuppliersGetAccountTransResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.accountTranDtos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.accountTranDtos = utils.objectToClass(
              httpRes?.data,
              shared.AccountTranDto,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a Supplier's opening balances, calculated for the next periods: current month, one month old, two months old, three and more months old.
   */
  suppliersGetOpeningBalance(
    req: operations.SuppliersGetOpeningBalanceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersGetOpeningBalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SuppliersGetOpeningBalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/suppliers/{itemId}/openingBalance",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersGetOpeningBalanceResponse =
        new operations.SuppliersGetOpeningBalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ownerOpeningBalanceInPeriodsDto = utils.objectToClass(
              httpRes?.data,
              shared.OwnerOpeningBalanceInPeriodsDto
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of Supplier's opening balance transactions.
   */
  suppliersGetOpeningBalanceList(
    req: operations.SuppliersGetOpeningBalanceListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersGetOpeningBalanceListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SuppliersGetOpeningBalanceListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/suppliers/{itemId}/openingBalanceList",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersGetOpeningBalanceListResponse =
        new operations.SuppliersGetOpeningBalanceListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ownerOpeningBalanceDtos = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.ownerOpeningBalanceDtos = utils.objectToClass(
              httpRes?.data,
              shared.OwnerOpeningBalanceDto,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new Supplier.
   */
  suppliersPost(
    req: shared.SupplierDto,
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SupplierDto(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/suppliers";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersPostResponse =
        new operations.SuppliersPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.suppliersPost200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Processes a batch of Suppliers.
   */
  suppliersProcessBatch(
    req: shared.BatchItemSupplierDto[],
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersProcessBatchResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/suppliers/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersProcessBatchResponse =
        new operations.SuppliersProcessBatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.suppliersProcessBatch200ApplicationJSONObject =
              utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing Supplier.
   */
  suppliersPut(
    req: operations.SuppliersPutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SuppliersPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SuppliersPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/suppliers/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "supplierDto",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SuppliersPutResponse =
        new operations.SuppliersPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.suppliersPut200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns information about a single Supplier. You may specify that Supplier's ledger balance should be calculated.
   */
  getV1SuppliersId(
    req: operations.GetV1SuppliersIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetV1SuppliersIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetV1SuppliersIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/suppliers/{id}", req);

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetV1SuppliersIdResponse =
        new operations.GetV1SuppliersIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.supplierDto = utils.objectToClass(
              httpRes?.data,
              shared.SupplierDto
            );
          }
          break;
      }

      return res;
    });
  }
}
