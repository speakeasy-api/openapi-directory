"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Crash:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def crash_groups_get(self, request: operations.CrashGroupsGetRequest, security: operations.CrashGroupsGetSecurity) -> operations.CrashGroupsGetResponse:
        r"""Gets a specific group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashGroupsGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashGroupsGet200ApplicationJSON])
                res.crash_groups_get_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashGroupsGetDefaultApplicationJSON])
                res.crash_groups_get_default_application_json_object = out

        return res

    def crash_groups_get_stacktrace(self, request: operations.CrashGroupsGetStacktraceRequest, security: operations.CrashGroupsGetStacktraceSecurity) -> operations.CrashGroupsGetStacktraceResponse:
        r"""Gets a stacktrace for a specific crash."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashGroupsGetStacktraceRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/stacktrace', request)
        
        query_params = utils.get_query_params(operations.CrashGroupsGetStacktraceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashGroupsGetStacktraceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Stacktrace])
                res.stacktrace = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashGroupsGetStacktraceDefaultApplicationJSON])
                res.crash_groups_get_stacktrace_default_application_json_object = out

        return res

    def crash_groups_list(self, request: operations.CrashGroupsListRequest, security: operations.CrashGroupsListSecurity) -> operations.CrashGroupsListResponse:
        r"""Gets a list of crash groups and whether the list contains all available groups."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashGroupsListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups', request)
        
        query_params = utils.get_query_params(operations.CrashGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashGroupsList200ApplicationJSON])
                res.crash_groups_list_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashGroupsListDefaultApplicationJSON])
                res.crash_groups_list_default_application_json_object = out

        return res

    def crash_groups_update(self, request: operations.CrashGroupsUpdateRequest, security: operations.CrashGroupsUpdateSecurity) -> operations.CrashGroupsUpdateResponse:
        r"""Updates a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashGroupsUpdateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashGroupsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashGroupsUpdate200ApplicationJSON])
                res.crash_groups_update_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashGroupsUpdateDefaultApplicationJSON])
                res.crash_groups_update_default_application_json_object = out

        return res

    def crashes_delete(self, request: operations.CrashesDeleteRequest, security: operations.CrashesDeleteSecurity) -> operations.CrashesDeleteResponse:
        r"""Delete a specific crash and related attachments and blobs for an app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesDeleteRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', request)
        
        query_params = utils.get_query_params(operations.CrashesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesDelete200ApplicationJSON])
                res.crashes_delete_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesDeleteDefaultApplicationJSON])
                res.crashes_delete_default_application_json_object = out

        return res

    def crashes_get(self, request: operations.CrashesGetRequest, security: operations.CrashesGetSecurity) -> operations.CrashesGetResponse:
        r"""Gets a specific crash for an app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}', request)
        
        query_params = utils.get_query_params(operations.CrashesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Crash])
                res.crash = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetDefaultApplicationJSON])
                res.crashes_get_default_application_json_object = out

        return res

    def crashes_get_app_crashes_info(self, request: operations.CrashesGetAppCrashesInfoRequest, security: operations.CrashesGetAppCrashesInfoSecurity) -> operations.CrashesGetAppCrashesInfoResponse:
        r"""Gets whether the application has any crashes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetAppCrashesInfoRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crashes_info', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetAppCrashesInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetAppCrashesInfo200ApplicationJSON])
                res.crashes_get_app_crashes_info_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetAppCrashesInfoDefaultApplicationJSON])
                res.crashes_get_app_crashes_info_default_application_json_object = out

        return res

    def crashes_get_app_versions(self, request: operations.CrashesGetAppVersionsRequest, security: operations.CrashesGetAppVersionsSecurity) -> operations.CrashesGetAppVersionsResponse:
        r"""Gets a list of application versions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetAppVersionsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/versions', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetAppVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CrashesGetAppVersions200ApplicationJSON]])
                res.crashes_get_app_versions_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetAppVersionsDefaultApplicationJSON])
                res.crashes_get_app_versions_default_application_json_object = out

        return res

    def crashes_get_crash_attachment_location(self, request: operations.CrashesGetCrashAttachmentLocationRequest, security: operations.CrashesGetCrashAttachmentLocationSecurity) -> operations.CrashesGetCrashAttachmentLocationResponse:
        r"""Gets the URI location to download crash attachment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetCrashAttachmentLocationRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/location', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetCrashAttachmentLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetCrashAttachmentLocation200ApplicationJSON])
                res.crashes_get_crash_attachment_location_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetCrashAttachmentLocationDefaultApplicationJSON])
                res.crashes_get_crash_attachment_location_default_application_json_object = out

        return res

    def crashes_get_crash_text_attachment_content(self, request: operations.CrashesGetCrashTextAttachmentContentRequest, security: operations.CrashesGetCrashTextAttachmentContentSecurity) -> operations.CrashesGetCrashTextAttachmentContentResponse:
        r"""Gets content of the text attachment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetCrashTextAttachmentContentRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments/{attachment_id}/text', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetCrashTextAttachmentContentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.crashes_get_crash_text_attachment_content_200_application_json_string = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetCrashTextAttachmentContentDefaultApplicationJSON])
                res.crashes_get_crash_text_attachment_content_default_application_json_object = out

        return res

    def crashes_get_native_crash(self, request: operations.CrashesGetNativeCrashRequest, security: operations.CrashesGetNativeCrashSecurity) -> operations.CrashesGetNativeCrashResponse:
        r"""Gets the native log of a specific crash."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetNativeCrashRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetNativeCrashResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.crashes_get_native_crash_200_application_json_string = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetNativeCrashDefaultApplicationJSON])
                res.crashes_get_native_crash_default_application_json_object = out

        return res

    def crashes_get_native_crash_download(self, request: operations.CrashesGetNativeCrashDownloadRequest, security: operations.CrashesGetNativeCrashDownloadSecurity) -> operations.CrashesGetNativeCrashDownloadResponse:
        r"""Gets the native log of a specific crash as a text attachment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetNativeCrashDownloadRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/native/download', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetNativeCrashDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.crashes_get_native_crash_download_200_application_json_string = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetNativeCrashDownloadDefaultApplicationJSON])
                res.crashes_get_native_crash_download_default_application_json_object = out

        return res

    def crashes_get_raw_crash_location(self, request: operations.CrashesGetRawCrashLocationRequest, security: operations.CrashesGetRawCrashLocationSecurity) -> operations.CrashesGetRawCrashLocationResponse:
        r"""Gets the URI location to download json of a specific crash."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetRawCrashLocationRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/raw/location', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetRawCrashLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetRawCrashLocation200ApplicationJSON])
                res.crashes_get_raw_crash_location_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetRawCrashLocationDefaultApplicationJSON])
                res.crashes_get_raw_crash_location_default_application_json_object = out

        return res

    def crashes_get_stacktrace(self, request: operations.CrashesGetStacktraceRequest, security: operations.CrashesGetStacktraceSecurity) -> operations.CrashesGetStacktraceResponse:
        r"""Gets a stacktrace for a specific crash."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesGetStacktraceRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes/{crash_id}/stacktrace', request)
        
        query_params = utils.get_query_params(operations.CrashesGetStacktraceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesGetStacktraceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Stacktrace])
                res.stacktrace = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesGetStacktraceDefaultApplicationJSON])
                res.crashes_get_stacktrace_default_application_json_object = out

        return res

    def crashes_list(self, request: operations.CrashesListRequest, security: operations.CrashesListSecurity) -> operations.CrashesListResponse:
        r"""Gets all crashes of a group."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crash_groups/{crash_group_id}/crashes', request)
        
        query_params = utils.get_query_params(operations.CrashesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Crash]])
                res.crashes = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesListDefaultApplicationJSON])
                res.crashes_list_default_application_json_object = out

        return res

    def crashes_list_attachments(self, request: operations.CrashesListAttachmentsRequest, security: operations.CrashesListAttachmentsSecurity) -> operations.CrashesListAttachmentsResponse:
        r"""Gets all attachments for a specific crash."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CrashesListAttachmentsRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/attachments', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CrashesListAttachmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.CrashesListAttachments200ApplicationJSON]])
                res.crashes_list_attachments_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CrashesListAttachmentsDefaultApplicationJSON])
                res.crashes_list_attachments_default_application_json_object = out

        return res

    def missing_symbol_groups_get(self, request: operations.MissingSymbolGroupsGetRequest, security: operations.MissingSymbolGroupsGetSecurity) -> operations.MissingSymbolGroupsGetResponse:
        r"""Gets missing symbol crash group by its id
        Gets missing symbol crash group by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MissingSymbolGroupsGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups/{symbol_group_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MissingSymbolGroupsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MissingSymbolGroupsGet200ApplicationJSON])
                res.missing_symbol_groups_get_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MissingSymbolGroupsGetDefaultApplicationJSON])
                res.missing_symbol_groups_get_default_application_json_object = out

        return res

    def missing_symbol_groups_info(self, request: operations.MissingSymbolGroupsInfoRequest, security: operations.MissingSymbolGroupsInfoSecurity) -> operations.MissingSymbolGroupsInfoResponse:
        r"""Gets application level statistics for all missing symbol groups
        Gets application level statistics for all missing symbol groups
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MissingSymbolGroupsInfoRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups_info', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MissingSymbolGroupsInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MissingSymbolGroupsInfo200ApplicationJSON])
                res.missing_symbol_groups_info_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MissingSymbolGroupsInfoDefaultApplicationJSON])
                res.missing_symbol_groups_info_default_application_json_object = out

        return res

    def missing_symbol_groups_list(self, request: operations.MissingSymbolGroupsListRequest, security: operations.MissingSymbolGroupsListSecurity) -> operations.MissingSymbolGroupsListResponse:
        r"""Gets top N (ordered by crash count) of crash groups by missing symbol
        Gets top N (ordered by crash count) of crash groups by missing symbol
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.MissingSymbolGroupsListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/diagnostics/symbol_groups', request)
        
        query_params = utils.get_query_params(operations.MissingSymbolGroupsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MissingSymbolGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MissingSymbolGroupsList200ApplicationJSON])
                res.missing_symbol_groups_list_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.MissingSymbolGroupsListDefaultApplicationJSON])
                res.missing_symbol_groups_list_default_application_json_object = out

        return res

    def symbol_uploads_complete(self, request: operations.SymbolUploadsCompleteRequest, security: operations.SymbolUploadsCompleteSecurity) -> operations.SymbolUploadsCompleteResponse:
        r"""Commits or aborts the symbol upload process for a new set of symbols for the specified application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolUploadsCompleteRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolUploadsCompleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsComplete200ApplicationJSON])
                res.symbol_uploads_complete_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsComplete400ApplicationJSON])
                res.symbol_uploads_complete_400_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsComplete403ApplicationJSON])
                res.symbol_uploads_complete_403_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsComplete500ApplicationJSON])
                res.symbol_uploads_complete_500_application_json_object = out

        return res

    def symbol_uploads_create(self, request: operations.SymbolUploadsCreateRequest, security: operations.SymbolUploadsCreateSecurity) -> operations.SymbolUploadsCreateResponse:
        r"""Begins the symbol upload process for a new set of symbols for the specified application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolUploadsCreateRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolUploadsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsCreate200ApplicationJSON])
                res.symbol_uploads_create_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsCreate400ApplicationJSON])
                res.symbol_uploads_create_400_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsCreate403ApplicationJSON])
                res.symbol_uploads_create_403_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsCreate500ApplicationJSON])
                res.symbol_uploads_create_500_application_json_object = out

        return res

    def symbol_uploads_delete(self, request: operations.SymbolUploadsDeleteRequest, security: operations.SymbolUploadsDeleteSecurity) -> operations.SymbolUploadsDeleteResponse:
        r"""Deletes a symbol upload by id for the specified application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolUploadsDeleteRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolUploadsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsDelete200ApplicationJSON])
                res.symbol_uploads_delete_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsDelete403ApplicationJSON])
                res.symbol_uploads_delete_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsDelete404ApplicationJSON])
                res.symbol_uploads_delete_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsDelete500ApplicationJSON])
                res.symbol_uploads_delete_500_application_json_object = out

        return res

    def symbol_uploads_get(self, request: operations.SymbolUploadsGetRequest, security: operations.SymbolUploadsGetSecurity) -> operations.SymbolUploadsGetResponse:
        r"""Gets a symbol upload by id for the specified application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolUploadsGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolUploadsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGet200ApplicationJSON])
                res.symbol_uploads_get_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGet403ApplicationJSON])
                res.symbol_uploads_get_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGet404ApplicationJSON])
                res.symbol_uploads_get_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGet500ApplicationJSON])
                res.symbol_uploads_get_500_application_json_object = out

        return res

    def symbol_uploads_get_location(self, request: operations.SymbolUploadsGetLocationRequest, security: operations.SymbolUploadsGetLocationSecurity) -> operations.SymbolUploadsGetLocationResponse:
        r"""Gets the URL to download the symbol upload"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolUploadsGetLocationRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads/{symbol_upload_id}/location', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolUploadsGetLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGetLocation200ApplicationJSON])
                res.symbol_uploads_get_location_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGetLocation403ApplicationJSON])
                res.symbol_uploads_get_location_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGetLocation404ApplicationJSON])
                res.symbol_uploads_get_location_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsGetLocation500ApplicationJSON])
                res.symbol_uploads_get_location_500_application_json_object = out

        return res

    def symbol_uploads_list(self, request: operations.SymbolUploadsListRequest, security: operations.SymbolUploadsListSecurity) -> operations.SymbolUploadsListResponse:
        r"""Gets a list of all uploads for the specified application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolUploadsListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbol_uploads', request)
        
        query_params = utils.get_query_params(operations.SymbolUploadsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolUploadsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.SymbolUploadsList200ApplicationJSON]])
                res.symbol_uploads_list_200_application_json_objects = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsList403ApplicationJSON])
                res.symbol_uploads_list_403_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolUploadsList500ApplicationJSON])
                res.symbol_uploads_list_500_application_json_object = out

        return res

    def symbols_get(self, request: operations.SymbolsGetRequest, security: operations.SymbolsGetSecurity) -> operations.SymbolsGetResponse:
        r"""Returns a particular symbol by id (uuid) for the provided application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolsGetRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGet200ApplicationJSON])
                res.symbols_get_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGet403ApplicationJSON])
                res.symbols_get_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGet404ApplicationJSON])
                res.symbols_get_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGet500ApplicationJSON])
                res.symbols_get_500_application_json_object = out

        return res

    def symbols_get_location(self, request: operations.SymbolsGetLocationRequest, security: operations.SymbolsGetLocationSecurity) -> operations.SymbolsGetLocationResponse:
        r"""Gets the URL to download the symbol"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolsGetLocationRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/location', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolsGetLocationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetLocation200ApplicationJSON])
                res.symbols_get_location_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetLocation403ApplicationJSON])
                res.symbols_get_location_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetLocation404ApplicationJSON])
                res.symbols_get_location_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetLocation500ApplicationJSON])
                res.symbols_get_location_500_application_json_object = out

        return res

    def symbols_get_status(self, request: operations.SymbolsGetStatusRequest, security: operations.SymbolsGetStatusSecurity) -> operations.SymbolsGetStatusResponse:
        r"""Returns a particular symbol by id (uuid) for the provided application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolsGetStatusRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/status', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolsGetStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetStatus200ApplicationJSON])
                res.symbols_get_status_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetStatus403ApplicationJSON])
                res.symbols_get_status_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetStatus404ApplicationJSON])
                res.symbols_get_status_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsGetStatus500ApplicationJSON])
                res.symbols_get_status_500_application_json_object = out

        return res

    def symbols_ignore(self, request: operations.SymbolsIgnoreRequest, security: operations.SymbolsIgnoreSecurity) -> operations.SymbolsIgnoreResponse:
        r"""Marks a symbol by id (uuid) as ignored"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolsIgnoreRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbols/{symbol_id}/ignore', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolsIgnoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsIgnore200ApplicationJSON])
                res.symbols_ignore_200_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsIgnore403ApplicationJSON])
                res.symbols_ignore_403_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsIgnore404ApplicationJSON])
                res.symbols_ignore_404_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsIgnore500ApplicationJSON])
                res.symbols_ignore_500_application_json_object = out

        return res

    def symbols_list(self, request: operations.SymbolsListRequest, security: operations.SymbolsListSecurity) -> operations.SymbolsListResponse:
        r"""Returns the list of all symbols for the provided application"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SymbolsListRequest, base_url, '/v0.1/apps/{owner_name}/{app_name}/symbols', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SymbolsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.SymbolsList200ApplicationJSON]])
                res.symbols_list_200_application_json_objects = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsList403ApplicationJSON])
                res.symbols_list_403_application_json_object = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.SymbolsList500ApplicationJSON])
                res.symbols_list_500_application_json_object = out

        return res

    