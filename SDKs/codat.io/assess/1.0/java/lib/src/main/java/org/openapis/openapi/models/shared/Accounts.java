/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class Accounts {
    /**
     * The name of the account according to the provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountName")
    public String accountName;

    public Accounts withAccountName(String accountName) {
        this.accountName = accountName;
        return this;
    }
    
    /**
     * The bank or other financial institution providing the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountProvider")
    public String accountProvider;

    public Accounts withAccountProvider(String accountProvider) {
        this.accountProvider = accountProvider;
        return this;
    }
    
    /**
     * The type of banking account, e.g. credit or debit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountType")
    public String accountType;

    public Accounts withAccountType(String accountType) {
        this.accountType = accountType;
        return this;
    }
    
    /**
     * The currency data type in Codat is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, e.g. _GBP_.
     * 
     * ## Unknown currencies
     * 
     * In line with the ISO 4217 specification, the code _XXX_ is used when the data source does not return a currency for a transaction. 
     * 
     * There are only a very small number of edge cases where this currency code is returned by the Codat system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;

    public Accounts withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The balance of the bank account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentBalance")
    public Double currentBalance;

    public Accounts withCurrentBalance(Double currentBalance) {
        this.currentBalance = currentBalance;
        return this;
    }
    
    /**
     * Name of the banking data source, e.g. "Plaid".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformName")
    public String platformName;

    public Accounts withPlatformName(String platformName) {
        this.platformName = platformName;
        return this;
    }
    
    /**
     * A source reference containing the `sourceType` object "Banking".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceRef")
    public SourceRef sourceRef;

    public Accounts withSourceRef(SourceRef sourceRef) {
        this.sourceRef = sourceRef;
        return this;
    }
    
    public Accounts(){}
}
