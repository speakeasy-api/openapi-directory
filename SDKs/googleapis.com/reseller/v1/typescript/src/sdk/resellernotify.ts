/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Resellernotify {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns all the details of the watch corresponding to the reseller.
   */
  resellerResellernotifyGetwatchdetails(
    req: operations.ResellerResellernotifyGetwatchdetailsRequest,
    security: operations.ResellerResellernotifyGetwatchdetailsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResellerResellernotifyGetwatchdetailsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResellerResellernotifyGetwatchdetailsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/apps/reseller/v1/resellernotify/getwatchdetails";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResellerResellernotifyGetwatchdetailsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResellerResellernotifyGetwatchdetailsResponse =
        new operations.ResellerResellernotifyGetwatchdetailsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resellernotifyGetwatchdetailsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ResellernotifyGetwatchdetailsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Registers a Reseller for receiving notifications.
   */
  resellerResellernotifyRegister(
    req: operations.ResellerResellernotifyRegisterRequest,
    security: operations.ResellerResellernotifyRegisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResellerResellernotifyRegisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResellerResellernotifyRegisterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/apps/reseller/v1/resellernotify/register";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResellerResellernotifyRegisterSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResellerResellernotifyRegisterResponse =
        new operations.ResellerResellernotifyRegisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resellernotifyResource = utils.objectToClass(
              httpRes?.data,
              shared.ResellernotifyResource
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unregisters a Reseller for receiving notifications.
   */
  resellerResellernotifyUnregister(
    req: operations.ResellerResellernotifyUnregisterRequest,
    security: operations.ResellerResellernotifyUnregisterSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResellerResellernotifyUnregisterResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResellerResellernotifyUnregisterRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/apps/reseller/v1/resellernotify/unregister";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResellerResellernotifyUnregisterSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResellerResellernotifyUnregisterResponse =
        new operations.ResellerResellernotifyUnregisterResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.resellernotifyResource = utils.objectToClass(
              httpRes?.data,
              shared.ResellernotifyResource
            );
          }
          break;
      }

      return res;
    });
  }
}
