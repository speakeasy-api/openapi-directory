// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ServingConfigAppAssociationEnum - How to handle well known App Association files.
type ServingConfigAppAssociationEnum string

const (
	ServingConfigAppAssociationEnumAuto ServingConfigAppAssociationEnum = "AUTO"
	ServingConfigAppAssociationEnumNone ServingConfigAppAssociationEnum = "NONE"
)

func (e ServingConfigAppAssociationEnum) ToPointer() *ServingConfigAppAssociationEnum {
	return &e
}

func (e *ServingConfigAppAssociationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTO":
		fallthrough
	case "NONE":
		*e = ServingConfigAppAssociationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServingConfigAppAssociationEnum: %v", v)
	}
}

// ServingConfigTrailingSlashBehaviorEnum - Defines how to handle a trailing slash in the URL path.
type ServingConfigTrailingSlashBehaviorEnum string

const (
	ServingConfigTrailingSlashBehaviorEnumTrailingSlashBehaviorUnspecified ServingConfigTrailingSlashBehaviorEnum = "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED"
	ServingConfigTrailingSlashBehaviorEnumAdd                              ServingConfigTrailingSlashBehaviorEnum = "ADD"
	ServingConfigTrailingSlashBehaviorEnumRemove                           ServingConfigTrailingSlashBehaviorEnum = "REMOVE"
)

func (e ServingConfigTrailingSlashBehaviorEnum) ToPointer() *ServingConfigTrailingSlashBehaviorEnum {
	return &e
}

func (e *ServingConfigTrailingSlashBehaviorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED":
		fallthrough
	case "ADD":
		fallthrough
	case "REMOVE":
		*e = ServingConfigTrailingSlashBehaviorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ServingConfigTrailingSlashBehaviorEnum: %v", v)
	}
}

// ServingConfig - The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
type ServingConfig struct {
	// How to handle well known App Association files.
	AppAssociation *ServingConfigAppAssociationEnum `json:"appAssociation,omitempty"`
	// Defines whether to drop the file extension from uploaded files.
	CleanUrls *bool `json:"cleanUrls,omitempty"`
	// An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
	Headers []Header `json:"headers,omitempty"`
	// If provided, i18n rewrites are enabled.
	I18n *I18nConfig `json:"i18n,omitempty"`
	// An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
	Redirects []Redirect `json:"redirects,omitempty"`
	// An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
	Rewrites []Rewrite `json:"rewrites,omitempty"`
	// Defines how to handle a trailing slash in the URL path.
	TrailingSlashBehavior *ServingConfigTrailingSlashBehaviorEnum `json:"trailingSlashBehavior,omitempty"`
}
