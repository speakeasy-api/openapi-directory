/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class GetImagesRequestBody {
    /**
     * The end timestamp for the range of images to be generated.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("EndTimestamp")
    public OffsetDateTime endTimestamp;
    public GetImagesRequestBody withEndTimestamp(OffsetDateTime endTimestamp) {
        this.endTimestamp = endTimestamp;
        return this;
    }
    
    /**
     * The format that will be used to encode the image.
     */
    @JsonProperty("Format")
    public GetImagesRequestBodyFormatEnum format;
    public GetImagesRequestBody withFormat(GetImagesRequestBodyFormatEnum format) {
        this.format = format;
        return this;
    }
    
    /**
     * The list of a key-value pair structure that contains extra parameters that can be applied when the image is generated. The &lt;code&gt;FormatConfig&lt;/code&gt; key is the &lt;code&gt;JPEGQuality&lt;/code&gt;, which indicates the JPEG quality key to be used to generate the image. The &lt;code&gt;FormatConfig&lt;/code&gt; value accepts ints from 1 to 100. If the value is 1, the image will be generated with less quality and the best compression. If the value is 100, the image will be generated with the best quality and less compression. If no value is provided, the default value of the &lt;code&gt;JPEGQuality&lt;/code&gt; key will be set to 80.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FormatConfig")
    public java.util.Map<String, String> formatConfig;
    public GetImagesRequestBody withFormatConfig(java.util.Map<String, String> formatConfig) {
        this.formatConfig = formatConfig;
        return this;
    }
    
    /**
     * The height of the output image that is used in conjunction with the &lt;code&gt;WidthPixels&lt;/code&gt; parameter. When both &lt;code&gt;HeightPixels&lt;/code&gt; and &lt;code&gt;WidthPixels&lt;/code&gt; parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the &lt;code&gt;HeightPixels&lt;/code&gt; parameter is provided, its original aspect ratio will be used to calculate the &lt;code&gt;WidthPixels&lt;/code&gt; ratio. If neither parameter is provided, the original image size will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("HeightPixels")
    public Long heightPixels;
    public GetImagesRequestBody withHeightPixels(Long heightPixels) {
        this.heightPixels = heightPixels;
        return this;
    }
    
    /**
     * The origin of the Server or Producer timestamps to use to generate the images.
     */
    @JsonProperty("ImageSelectorType")
    public GetImagesRequestBodyImageSelectorTypeEnum imageSelectorType;
    public GetImagesRequestBody withImageSelectorType(GetImagesRequestBodyImageSelectorTypeEnum imageSelectorType) {
        this.imageSelectorType = imageSelectorType;
        return this;
    }
    
    /**
     * &lt;p&gt;The maximum number of images to be returned by the API. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The default limit is 100 images per API response. The additional results will be paginated. &lt;/p&gt; &lt;/note&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MaxResults")
    public Long maxResults;
    public GetImagesRequestBody withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * A token that specifies where to start paginating the next set of Images. This is the &lt;code&gt;GetImages:NextToken&lt;/code&gt; from a previously truncated response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("NextToken")
    public String nextToken;
    public GetImagesRequestBody withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * &lt;p&gt;The time interval in milliseconds (ms) at which the images need to be generated from the stream. The minimum value that can be provided is 3000 ms. If the timestamp range is less than the sampling interval, the Image from the &lt;code&gt;startTimestamp&lt;/code&gt; will be returned if available. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The minimum value of 3000 ms is a soft limit. If needed, a lower sampling frequency can be requested.&lt;/p&gt; &lt;/note&gt;
     */
    @JsonProperty("SamplingInterval")
    public Long samplingInterval;
    public GetImagesRequestBody withSamplingInterval(Long samplingInterval) {
        this.samplingInterval = samplingInterval;
        return this;
    }
    
    /**
     * The starting point from which the images should be generated. This &lt;code&gt;StartTimestamp&lt;/code&gt; must be within an inclusive range of timestamps for an image to be returned.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("StartTimestamp")
    public OffsetDateTime startTimestamp;
    public GetImagesRequestBody withStartTimestamp(OffsetDateTime startTimestamp) {
        this.startTimestamp = startTimestamp;
        return this;
    }
    
    /**
     * The Amazon Resource Name (ARN) of the stream from which to retrieve the images. You must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreamARN")
    public String streamARN;
    public GetImagesRequestBody withStreamARN(String streamARN) {
        this.streamARN = streamARN;
        return this;
    }
    
    /**
     * The name of the stream from which to retrieve the images. You must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StreamName")
    public String streamName;
    public GetImagesRequestBody withStreamName(String streamName) {
        this.streamName = streamName;
        return this;
    }
    
    /**
     * The width of the output image that is used in conjunction with the &lt;code&gt;HeightPixels&lt;/code&gt; parameter. When both &lt;code&gt;WidthPixels&lt;/code&gt; and &lt;code&gt;HeightPixels&lt;/code&gt; parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the &lt;code&gt;WidthPixels&lt;/code&gt; parameter is provided or if only the &lt;code&gt;HeightPixels&lt;/code&gt; is provided, a &lt;code&gt;ValidationException&lt;/code&gt; will be thrown. If neither parameter is provided, the original image size from the stream will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WidthPixels")
    public Long widthPixels;
    public GetImagesRequestBody withWidthPixels(Long widthPixels) {
        this.widthPixels = widthPixels;
        return this;
    }
    
}
