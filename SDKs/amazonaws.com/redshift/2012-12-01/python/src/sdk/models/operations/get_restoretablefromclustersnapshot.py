"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETRestoreTableFromClusterSnapshotActionEnum(str, Enum):
    RESTORE_TABLE_FROM_CLUSTER_SNAPSHOT = 'RestoreTableFromClusterSnapshot'

class GETRestoreTableFromClusterSnapshotVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TWELVE_12_01 = '2012-12-01'


@dataclasses.dataclass
class GETRestoreTableFromClusterSnapshotRequest:
    
    action: GETRestoreTableFromClusterSnapshotActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    cluster_identifier: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ClusterIdentifier', 'style': 'form', 'explode': True }})
    r"""The identifier of the Amazon Redshift cluster to restore the table to."""  
    new_table_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'NewTableName', 'style': 'form', 'explode': True }})
    r"""The name of the table to create as a result of the current request."""  
    snapshot_identifier: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SnapshotIdentifier', 'style': 'form', 'explode': True }})
    r"""The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter."""  
    source_database_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SourceDatabaseName', 'style': 'form', 'explode': True }})
    r"""The name of the source database that contains the table to restore from."""  
    source_table_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'SourceTableName', 'style': 'form', 'explode': True }})
    r"""The name of the source table to restore from."""  
    version: GETRestoreTableFromClusterSnapshotVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    enable_case_sensitive_identifier: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EnableCaseSensitiveIdentifier', 'style': 'form', 'explode': True }})
    r"""Indicates whether name identifiers for database, schema, and table are case sensitive. If <code>true</code>, the names are case sensitive. If <code>false</code> (default), the names are not case sensitive."""  
    source_schema_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SourceSchemaName', 'style': 'form', 'explode': True }})
    r"""The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>."""  
    target_database_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TargetDatabaseName', 'style': 'form', 'explode': True }})
    r"""The name of the database to restore the table to."""  
    target_schema_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TargetSchemaName', 'style': 'form', 'explode': True }})
    r"""The name of the schema to restore the table to."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETRestoreTableFromClusterSnapshotResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    