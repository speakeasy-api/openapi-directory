// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DeviceDetailsFormFactorEnum - Form factor of the push device.
type DeviceDetailsFormFactorEnum string

const (
	DeviceDetailsFormFactorEnumPhone    DeviceDetailsFormFactorEnum = "phone"
	DeviceDetailsFormFactorEnumTablet   DeviceDetailsFormFactorEnum = "tablet"
	DeviceDetailsFormFactorEnumDesktop  DeviceDetailsFormFactorEnum = "desktop"
	DeviceDetailsFormFactorEnumTv       DeviceDetailsFormFactorEnum = "tv"
	DeviceDetailsFormFactorEnumWatch    DeviceDetailsFormFactorEnum = "watch"
	DeviceDetailsFormFactorEnumCar      DeviceDetailsFormFactorEnum = "car"
	DeviceDetailsFormFactorEnumEmbedded DeviceDetailsFormFactorEnum = "embedded"
)

func (e *DeviceDetailsFormFactorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "phone":
		fallthrough
	case "tablet":
		fallthrough
	case "desktop":
		fallthrough
	case "tv":
		fallthrough
	case "watch":
		fallthrough
	case "car":
		fallthrough
	case "embedded":
		*e = DeviceDetailsFormFactorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceDetailsFormFactorEnum: %s", s)
	}
}

// DeviceDetailsPlatformEnum - Platform of the push device.
type DeviceDetailsPlatformEnum string

const (
	DeviceDetailsPlatformEnumIos     DeviceDetailsPlatformEnum = "ios"
	DeviceDetailsPlatformEnumAndroid DeviceDetailsPlatformEnum = "android"
)

func (e *DeviceDetailsPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ios":
		fallthrough
	case "android":
		*e = DeviceDetailsPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceDetailsPlatformEnum: %s", s)
	}
}

// DeviceDetailsPushStateEnum - the current state of the push device.
type DeviceDetailsPushStateEnum string

const (
	DeviceDetailsPushStateEnumActive  DeviceDetailsPushStateEnum = "Active"
	DeviceDetailsPushStateEnumFailing DeviceDetailsPushStateEnum = "Failing"
	DeviceDetailsPushStateEnumFailed  DeviceDetailsPushStateEnum = "Failed"
)

func (e *DeviceDetailsPushStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Active":
		fallthrough
	case "Failing":
		fallthrough
	case "Failed":
		*e = DeviceDetailsPushStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceDetailsPushStateEnum: %s", s)
	}
}

// DeviceDetailsOutput - OK
type DeviceDetailsOutput struct {
	// Optional trusted client identifier for the device.
	ClientID *string `json:"clientId,omitempty"`
	// Secret value for the device.
	DeviceSecret *string `json:"deviceSecret,omitempty"`
	// Form factor of the push device.
	FormFactor *DeviceDetailsFormFactorEnum `json:"formFactor,omitempty"`
	// Unique identifier for the device generated by the device itself.
	ID *string `json:"id,omitempty"`
	// Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// Platform of the push device.
	Platform *DeviceDetailsPlatformEnum `json:"platform,omitempty"`
	// Push recipient details for a device.
	PushRecipient *RecipientOutput `json:"push.recipient,omitempty"`
	// the current state of the push device.
	PushState *DeviceDetailsPushStateEnum `json:"push.state,omitempty"`
}

type DeviceDetailsInput struct {
	// Optional trusted client identifier for the device.
	ClientID *string `json:"clientId,omitempty" form:"name=clientId"`
	// Secret value for the device.
	DeviceSecret *string `json:"deviceSecret,omitempty" form:"name=deviceSecret"`
	// Form factor of the push device.
	FormFactor *DeviceDetailsFormFactorEnum `json:"formFactor,omitempty" form:"name=formFactor"`
	// Unique identifier for the device generated by the device itself.
	ID *string `json:"id,omitempty" form:"name=id"`
	// Optional metadata object for this device. The metadata for a device may only be set by clients with push-admin privileges and will be used more extensively in the future with smart notifications.
	Metadata map[string]interface{} `json:"metadata,omitempty" form:"name=metadata,json"`
	// Platform of the push device.
	Platform *DeviceDetailsPlatformEnum `json:"platform,omitempty" form:"name=platform"`
	// Push recipient details for a device.
	PushRecipient *Recipient `json:"push.recipient,omitempty" form:"name=push.recipient,json"`
}
