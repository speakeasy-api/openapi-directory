<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class IntegrationLinks 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add or update Integration link
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateIntegrationLinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateIntegrationLinkResponse
     */
	public function addOrUpdateIntegrationLink(
        \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateIntegrationLinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateIntegrationLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}', \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateIntegrationLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addOrUpdateIntegrationLinkModel", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddOrUpdateIntegrationLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integrationLinkModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IntegrationLinkModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integrationLinkModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IntegrationLinkModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Delete Integration link
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIntegrationLinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteIntegrationLinkResponse
     */
	public function deleteIntegrationLink(
        \OpenAPI\OpenAPI\Models\Operations\DeleteIntegrationLinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteIntegrationLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/environments/{environmentId}/settings/{settingId}/integrationLinks/{integrationLinkType}/{key}', \OpenAPI\OpenAPI\Models\Operations\DeleteIntegrationLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteIntegrationLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteIntegrationLinkModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteIntegrationLinkModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteIntegrationLinkModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteIntegrationLinkModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * Get Integration link
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIntegrationLinkDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIntegrationLinkDetailsResponse
     */
	public function getIntegrationLinkDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetIntegrationLinkDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIntegrationLinkDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/integrationLink/{integrationLinkType}/{key}/details', \OpenAPI\OpenAPI\Models\Operations\GetIntegrationLinkDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIntegrationLinkDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integrationLinkDetailsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IntegrationLinkDetailsModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integrationLinkDetailsModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IntegrationLinkDetailsModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * jiraAddOrUpdateIntegrationLink
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\JiraAddOrUpdateIntegrationLinkRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\JiraAddOrUpdateIntegrationLinkResponse
     */
	public function jiraAddOrUpdateIntegrationLink(
        \OpenAPI\OpenAPI\Models\Operations\JiraAddOrUpdateIntegrationLinkRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\JiraAddOrUpdateIntegrationLinkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jira/environments/{environmentId}/settings/{settingId}/integrationLinks/{key}', \OpenAPI\OpenAPI\Models\Operations\JiraAddOrUpdateIntegrationLinkRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addOrUpdateJiraIntegrationLinkModel", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\JiraAddOrUpdateIntegrationLinkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/hal+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integrationLinkModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IntegrationLinkModel', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->integrationLinkModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IntegrationLinkModel', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
	
    /**
     * postV1JiraConnect
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ConnectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostV1JiraConnectResponse
     */
	public function postV1JiraConnect(
        \OpenAPI\OpenAPI\Models\Shared\ConnectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostV1JiraConnectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/jira/Connect');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostV1JiraConnectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 429) {
        }

        return $response;
    }
}