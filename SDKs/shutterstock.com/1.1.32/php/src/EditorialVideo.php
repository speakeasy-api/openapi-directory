<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EditorialVideo 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get editorial video content details
     * 
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoResponse
     */
	public function getEditorialVideo(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/videos/{id}', \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialVideoContent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialVideoContent', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
	
    /**
     * List editorial video licenses
     * 
     * This endpoint lists existing editorial video licenses.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListResponse
     */
	public function getEditorialVideoLicenseList(
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/videos/licenses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEditorialVideoLicenseListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->downloadHistoryDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DownloadHistoryDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * License editorial video content
     * 
     * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\LicenseEditorialVideoContentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialVideoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialVideoResponse
     */
	public function licenseEditorialVideo(
        \OpenAPI\OpenAPI\Models\Shared\LicenseEditorialVideoContentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialVideoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialVideoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/videos/licenses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LicenseEditorialVideoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->licenseEditorialContentResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LicenseEditorialContentResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * List editorial video categories
     * 
     * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEditorialVideoCategoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEditorialVideoCategoriesResponse
     */
	public function listEditorialVideoCategories(
        \OpenAPI\OpenAPI\Models\Operations\ListEditorialVideoCategoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEditorialVideoCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/videos/categories');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEditorialVideoCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialVideoCategoryResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialVideoCategoryResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Search editorial video content
     * 
     * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to "Alone,Performing" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosResponse
     */
	public function searchEditorialVideos(
        \OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/editorial/videos/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchEditorialVideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editorialVideoSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EditorialVideoSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 406) {
        }

        return $response;
    }
}