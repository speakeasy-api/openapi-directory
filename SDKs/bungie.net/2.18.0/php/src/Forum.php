<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Forum 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets a listing of all topics marked as part of the core group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetCoreTopicsPagedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetCoreTopicsPagedResponse
     */
	public function forumGetCoreTopicsPaged(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetCoreTopicsPagedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetCoreTopicsPagedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetCoreTopicsPagedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForumGetCoreTopicsPagedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetCoreTopicsPagedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetForumTagSuggestionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetForumTagSuggestionsResponse
     */
	public function forumGetForumTagSuggestions(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetForumTagSuggestionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetForumTagSuggestionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetForumTagSuggestions/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForumGetForumTagSuggestionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetForumTagSuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets the specified forum poll.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetPollRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetPollResponse
     */
	public function forumGetPoll(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetPollRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetPollResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/Poll/{topicId}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetPollRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetPollResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the post specified and its immediate parent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentResponse
     */
	public function forumGetPostAndParent(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetPostAndParent/{childPostId}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns the post specified and its immediate parent of posts that are awaiting approval.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentAwaitingApprovalRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentAwaitingApprovalResponse
     */
	public function forumGetPostAndParentAwaitingApproval(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentAwaitingApprovalRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentAwaitingApprovalResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentAwaitingApprovalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentAwaitingApprovalRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetPostAndParentAwaitingApprovalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedResponse
     */
	public function forumGetPostsThreadedPaged(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedFromChildRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedFromChildResponse
     */
	public function forumGetPostsThreadedPagedFromChild(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedFromChildRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedFromChildResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedFromChildRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedFromChildRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetPostsThreadedPagedFromChildResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Allows the caller to get a list of to 25 recruitment thread summary information objects.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetRecruitmentThreadSummariesResponse
     */
	public function forumGetRecruitmentThreadSummaries(
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetRecruitmentThreadSummariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/Recruit/Summaries/');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetRecruitmentThreadSummariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Gets the post Id for the given content item's comments, if it exists.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicForContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicForContentResponse
     */
	public function forumGetTopicForContent(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicForContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicForContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetTopicForContent/{contentId}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicForContentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicForContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get topics from any forum.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicsPagedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicsPagedResponse
     */
	public function forumGetTopicsPaged(
        \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicsPagedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicsPagedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/', \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicsPagedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForumGetTopicsPagedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForumGetTopicsPagedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}