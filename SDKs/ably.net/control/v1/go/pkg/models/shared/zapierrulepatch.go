// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ZapierRulePatchRuleTypeEnum string

const (
	ZapierRulePatchRuleTypeEnumHTTPZapier ZapierRulePatchRuleTypeEnum = "http/zapier"
)

func (e ZapierRulePatchRuleTypeEnum) ToPointer() *ZapierRulePatchRuleTypeEnum {
	return &e
}

func (e *ZapierRulePatchRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http/zapier":
		*e = ZapierRulePatchRuleTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ZapierRulePatchRuleTypeEnum: %v", v)
	}
}

type ZapierRulePatchTargetHeaders struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
}

type ZapierRulePatchTarget struct {
	Headers      []ZapierRulePatchTargetHeaders `json:"headers,omitempty"`
	SigningKeyID *string                        `json:"signingKeyId,omitempty"`
	URL          *string                        `json:"url,omitempty"`
}

type ZapierRulePatch struct {
	RequestMode *string                     `json:"requestMode,omitempty"`
	RuleType    ZapierRulePatchRuleTypeEnum `json:"ruleType"`
	Source      *RuleSourcePatch            `json:"source,omitempty"`
	Status      *string                     `json:"status,omitempty"`
	Target      *ZapierRulePatchTarget      `json:"target,omitempty"`
}
