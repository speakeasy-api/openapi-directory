// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateForecastXAmzTargetEnum
type CreateForecastXAmzTargetEnum string

const (
	CreateForecastXAmzTargetEnumAmazonForecastCreateForecast CreateForecastXAmzTargetEnum = "AmazonForecast.CreateForecast"
)

func (e *CreateForecastXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonForecast.CreateForecast":
		*e = CreateForecastXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateForecastXAmzTargetEnum: %s", s)
	}
}

type CreateForecastRequest struct {
	CreateForecastRequest shared.CreateForecastRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateForecastXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateForecastResponse struct {
	ContentType string
	// Success
	CreateForecastResponse *shared.CreateForecastResponse
	// InvalidInputException
	InvalidInputException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
