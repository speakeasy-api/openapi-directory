"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "http://cloudcontrolapi.{region}.amazonaws.com",
    r"""The CloudControlApi multi-region endpoint"""
    "https://cloudcontrolapi.{region}.amazonaws.com",
    r"""The CloudControlApi multi-region endpoint"""
    "http://cloudcontrolapi.{region}.amazonaws.com.cn",
    r"""The CloudControlApi endpoint for China (Beijing) and China (Ningxia)"""
    "https://cloudcontrolapi.{region}.amazonaws.com.cn",
    r"""The CloudControlApi endpoint for China (Beijing) and China (Ningxia)"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""For more information about Amazon Web Services Cloud Control API, see the <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/what-is-cloudcontrolapi.html\\">Amazon Web Services Cloud Control API User Guide</a>.
    https://docs.aws.amazon.com/cloudcontrolapi/ - Amazon Web Services documentation
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def cancel_resource_request(self, request: operations.CancelResourceRequestRequest) -> operations.CancelResourceRequestResponse:
        r"""<p>Cancels the specified resource operation request. For more information, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html#resource-operations-manage-requests-cancel\\">Canceling resource operation requests</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>Only resource operations requests with a status of <code>PENDING</code> or <code>IN_PROGRESS</code> can be canceled.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.CancelResourceRequest'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "cancel_resource_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelResourceRequestResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CancelResourceRequestOutput])
                res.cancel_resource_request_output = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.concurrent_modification_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.request_token_not_found_exception = out

        return res

    def create_resource(self, request: operations.CreateResourceRequest) -> operations.CreateResourceResponse:
        r"""<p>Creates the specified resource. For more information, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-create.html\\">Creating a resource</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>After you have initiated a resource creation request, you can monitor the progress of your request by calling <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html\\">GetResourceRequestStatus</a> using the <code>RequestToken</code> of the <code>ProgressEvent</code> type returned by <code>CreateResource</code>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.CreateResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "create_resource_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateResourceOutput])
                res.create_resource_output = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.already_exists_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_internal_failure_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.general_service_exception = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_updatable_exception = out
        elif http_res.status_code == 484:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.type_not_found_exception = out
        elif http_res.status_code == 485:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.concurrent_operation_exception = out
        elif http_res.status_code == 486:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 487:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.private_type_exception = out
        elif http_res.status_code == 488:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 489:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.network_failure_exception = out
        elif http_res.status_code == 490:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.unsupported_action_exception = out
        elif http_res.status_code == 491:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_stabilized_exception = out
        elif http_res.status_code == 492:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_internal_error_exception = out
        elif http_res.status_code == 493:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_failure_exception = out
        elif http_res.status_code == 494:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_limit_exceeded_exception = out
        elif http_res.status_code == 495:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_credentials_exception = out
        elif http_res.status_code == 496:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_conflict_exception = out
        elif http_res.status_code == 497:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.client_token_conflict_exception = out
        elif http_res.status_code == 498:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.throttling_exception = out

        return res

    def delete_resource(self, request: operations.DeleteResourceRequest) -> operations.DeleteResourceResponse:
        r"""<p>Deletes the specified resource. For details, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-delete.html\\">Deleting a resource</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>After you have initiated a resource deletion request, you can monitor the progress of your request by calling <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html\\">GetResourceRequestStatus</a> using the <code>RequestToken</code> of the <code>ProgressEvent</code> returned by <code>DeleteResource</code>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.DeleteResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "delete_resource_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteResourceOutput])
                res.delete_resource_output = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.already_exists_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_internal_failure_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.general_service_exception = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_updatable_exception = out
        elif http_res.status_code == 484:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.type_not_found_exception = out
        elif http_res.status_code == 485:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.concurrent_operation_exception = out
        elif http_res.status_code == 486:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 487:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.private_type_exception = out
        elif http_res.status_code == 488:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 489:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.network_failure_exception = out
        elif http_res.status_code == 490:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.unsupported_action_exception = out
        elif http_res.status_code == 491:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_stabilized_exception = out
        elif http_res.status_code == 492:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_internal_error_exception = out
        elif http_res.status_code == 493:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_failure_exception = out
        elif http_res.status_code == 494:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_limit_exceeded_exception = out
        elif http_res.status_code == 495:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_credentials_exception = out
        elif http_res.status_code == 496:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_conflict_exception = out
        elif http_res.status_code == 497:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.client_token_conflict_exception = out
        elif http_res.status_code == 498:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.throttling_exception = out

        return res

    def get_resource(self, request: operations.GetResourceRequest) -> operations.GetResourceResponse:
        r"""<p>Returns information about the current state of the specified resource. For details, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-read.html\\">Reading a resource's current state</a>.</p> <p>You can use this action to return information about an existing resource in your account and Amazon Web Services Region, whether those resources were provisioned using Cloud Control API.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.GetResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_resource_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetResourceOutput])
                res.get_resource_output = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.already_exists_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_internal_failure_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.general_service_exception = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_updatable_exception = out
        elif http_res.status_code == 484:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.type_not_found_exception = out
        elif http_res.status_code == 485:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 486:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.private_type_exception = out
        elif http_res.status_code == 487:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 488:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.network_failure_exception = out
        elif http_res.status_code == 489:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.unsupported_action_exception = out
        elif http_res.status_code == 490:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_stabilized_exception = out
        elif http_res.status_code == 491:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_internal_error_exception = out
        elif http_res.status_code == 492:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_failure_exception = out
        elif http_res.status_code == 493:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_limit_exceeded_exception = out
        elif http_res.status_code == 494:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_credentials_exception = out
        elif http_res.status_code == 495:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_conflict_exception = out
        elif http_res.status_code == 496:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.throttling_exception = out

        return res

    def get_resource_request_status(self, request: operations.GetResourceRequestStatusRequest) -> operations.GetResourceRequestStatusResponse:
        r"""Returns the current status of a resource operation request. For more information, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html#resource-operations-manage-requests-track\\">Tracking the progress of resource operation requests</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.GetResourceRequestStatus'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "get_resource_request_status_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResourceRequestStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetResourceRequestStatusOutput])
                res.get_resource_request_status_output = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.request_token_not_found_exception = out

        return res

    def list_resource_requests(self, request: operations.ListResourceRequestsRequest) -> operations.ListResourceRequestsResponse:
        r"""<p>Returns existing resource operation requests. This includes requests of all status types. For more information, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-manage-requests.html#resource-operations-manage-requests-list\\">Listing active resource operation requests</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <note> <p>Resource operation requests expire after 7 days.</p> </note>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.ListResourceRequests'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "list_resource_requests_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ListResourceRequestsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListResourceRequestsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResourceRequestsOutput])
                res.list_resource_requests_output = out

        return res

    def list_resources(self, request: operations.ListResourcesRequest) -> operations.ListResourcesResponse:
        r"""<p>Returns information about the specified resources. For more information, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-list.html\\">Discovering resources</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>You can use this action to return information about existing resources in your account and Amazon Web Services Region, whether those resources were provisioned using Cloud Control API.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.ListResources'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "list_resources_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.ListResourcesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListResourcesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListResourcesOutput])
                res.list_resources_output = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.already_exists_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_internal_failure_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.general_service_exception = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_updatable_exception = out
        elif http_res.status_code == 484:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.type_not_found_exception = out
        elif http_res.status_code == 485:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 486:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.private_type_exception = out
        elif http_res.status_code == 487:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 488:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.network_failure_exception = out
        elif http_res.status_code == 489:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.unsupported_action_exception = out
        elif http_res.status_code == 490:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_stabilized_exception = out
        elif http_res.status_code == 491:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_internal_error_exception = out
        elif http_res.status_code == 492:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_failure_exception = out
        elif http_res.status_code == 493:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_limit_exceeded_exception = out
        elif http_res.status_code == 494:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_credentials_exception = out
        elif http_res.status_code == 495:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_conflict_exception = out
        elif http_res.status_code == 496:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.throttling_exception = out

        return res

    def update_resource(self, request: operations.UpdateResourceRequest) -> operations.UpdateResourceResponse:
        r"""<p>Updates the specified property values in the resource.</p> <p>You specify your resource property updates as a list of patch operations contained in a JSON patch document that adheres to the <a href=\\"https://datatracker.ietf.org/doc/html/rfc6902\\"> <i>RFC 6902 - JavaScript Object Notation (JSON) Patch</i> </a> standard.</p> <p>For details on how Cloud Control API performs resource update operations, see <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/userguide/resource-operations-update.html\\">Updating a resource</a> in the <i>Amazon Web Services Cloud Control API User Guide</i>.</p> <p>After you have initiated a resource update request, you can monitor the progress of your request by calling <a href=\\"https://docs.aws.amazon.com/cloudcontrolapi/latest/APIReference/API_GetResourceRequestStatus.html\\">GetResourceRequestStatus</a> using the <code>RequestToken</code> of the <code>ProgressEvent</code> returned by <code>UpdateResource</code>.</p> <p>For more information about the properties of a specific resource, refer to the related topic for the resource in the <a href=\\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html\\">Resource and property types reference</a> in the <i>CloudFormation Users Guide</i>.</p>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/#X-Amz-Target=CloudApiService.UpdateResource'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_resource_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateResourceOutput])
                res.update_resource_output = out
        elif http_res.status_code == 480:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.already_exists_exception = out
        elif http_res.status_code == 481:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_internal_failure_exception = out
        elif http_res.status_code == 482:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.general_service_exception = out
        elif http_res.status_code == 483:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_updatable_exception = out
        elif http_res.status_code == 484:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.type_not_found_exception = out
        elif http_res.status_code == 485:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.concurrent_operation_exception = out
        elif http_res.status_code == 486:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_request_exception = out
        elif http_res.status_code == 487:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.private_type_exception = out
        elif http_res.status_code == 488:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_not_found_exception = out
        elif http_res.status_code == 489:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.network_failure_exception = out
        elif http_res.status_code == 490:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.unsupported_action_exception = out
        elif http_res.status_code == 491:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.not_stabilized_exception = out
        elif http_res.status_code == 492:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_internal_error_exception = out
        elif http_res.status_code == 493:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.handler_failure_exception = out
        elif http_res.status_code == 494:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.service_limit_exceeded_exception = out
        elif http_res.status_code == 495:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.invalid_credentials_exception = out
        elif http_res.status_code == 496:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.resource_conflict_exception = out
        elif http_res.status_code == 497:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.client_token_conflict_exception = out
        elif http_res.status_code == 498:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.throttling_exception = out

        return res

    