<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes an alias.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteResponse
     */
	public function directoryUsersAliasesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/aliases/{alias}', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Adds an alias.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertResponse
     */
	public function directoryUsersAliasesInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/aliases', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "alias", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->alias = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Alias', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all aliases for a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListResponse
     */
	public function directoryUsersAliasesList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/aliases', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->aliases = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Aliases', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watches for changes in users list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchResponse
     */
	public function directoryUsersAliasesWatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/aliases/watch', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersAliasesWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteResponse
     */
	public function directoryUsersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetResponse
     */
	public function directoryUsersGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertResponse
     */
	public function directoryUsersInsert(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a paginated list of either deleted users or all users in a domain.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListResponse
     */
	public function directoryUsersList(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->users = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Users', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Makes a user a super administrator.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminResponse
     */
	public function directoryUsersMakeAdmin(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/makeAdmin', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userMakeAdmin", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersMakeAdminResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Updates a user using patch semantics. The update method should be used instead, because it also supports patch semantics and has better performance. If you're mapping an external identity to a Google identity, use the [`update`](https://developers.google.com/admin-sdk/directory/v1/reference/users/update) method instead of the `patch` method. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchResponse
     */
	public function directoryUsersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the user's photo.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteResponse
     */
	public function directoryUsersPhotosDelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/photos/thumbnail', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves the user's photo.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetResponse
     */
	public function directoryUsersPhotosGet(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/photos/thumbnail', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userPhoto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserPhoto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchResponse
     */
	public function directoryUsersPhotosPatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/photos/thumbnail', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userPhoto", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userPhoto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserPhoto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Adds a photo for the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateResponse
     */
	public function directoryUsersPhotosUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/photos/thumbnail', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userPhoto", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersPhotosUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userPhoto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserPhoto', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutResponse
     */
	public function directoryUsersSignOut(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/signOut', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersSignOutResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Undeletes a deleted user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteResponse
     */
	public function directoryUsersUndelete(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}/undelete', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userUndelete", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUndeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Updates a user. This method supports patch semantics, meaning that you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared. For repeating fields that contain arrays, individual items in the array can't be patched piecemeal; they must be supplied in the request body with the desired values for all items. See the [user accounts guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user) for more information.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateResponse
     */
	public function directoryUsersUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/{userKey}', \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watches for changes in users list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchResponse
     */
	public function directoryUsersWatch(
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/admin/directory/v1/users/watch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DirectoryUsersWatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
}