"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class GroupCoverages:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_group_coverage(self, request: operations.CreateGroupCoverageRequest) -> operations.CreateGroupCoverageResponse:
        r"""Create new Group Coverage
        Here youâ€™ll be able to add the lines of coverage for your group, including type of coverage and the requested effective date.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateGroupCoverageRequest, base_url, '/api/v1/applications/{application_id}/group_coverages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group_coverage_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupCoverageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupCoverageResult])
                res.group_coverage_result = out

        return res

    def edit_group_coverage(self, request: operations.EditGroupCoverageRequest) -> operations.EditGroupCoverageResponse:
        r"""Edit a Group Coverage
        Edit a group coverage based on the ID provided. The version parameter must match the latest group coverage version.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditGroupCoverageRequest, base_url, '/api/v1/group_coverages/{group_coverage_id}/{version}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group_coverage_edit_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditGroupCoverageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupCoverageResult])
                res.group_coverage_result = out

        return res

    def get_application_group_coverages(self, request: operations.GetApplicationGroupCoveragesRequest) -> operations.GetApplicationGroupCoveragesResponse:
        r"""Get all Application Group Coverages
        Returns a list of all group coverages for a given application
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetApplicationGroupCoveragesRequest, base_url, '/api/v1/applications/{application_id}/group_coverages', request)
        
        query_params = utils.get_query_params(operations.GetApplicationGroupCoveragesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetApplicationGroupCoveragesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedGroupCoverageResult])
                res.paginated_group_coverage_result = out

        return res

    def get_group_coverage(self, request: operations.GetGroupCoverageRequest) -> operations.GetGroupCoverageResponse:
        r"""Get Group Coverage
        Returns the latest version of a single group coverage based on the ID provided.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupCoverageRequest, base_url, '/api/v1/group_coverages/{group_coverage_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupCoverageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupCoverageResult])
                res.group_coverage_result = out

        return res

    