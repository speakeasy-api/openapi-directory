<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ComputeNodes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Adds a user account to the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeAddUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeAddUserResponse
     */
	public function computeNodeAddUser(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeAddUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeAddUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/users', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeAddUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "computeNodeUser", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeAddUserRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeAddUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a user account from the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDeleteUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDeleteUserResponse
     */
	public function computeNodeDeleteUser(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDeleteUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDeleteUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/users/{userName}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDeleteUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeDeleteUserRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDeleteUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable task scheduling of the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDisableSchedulingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDisableSchedulingResponse
     */
	public function computeNodeDisableScheduling(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDisableSchedulingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDisableSchedulingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/disablescheduling', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDisableSchedulingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeDisableSchedulingParameter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeDisableSchedulingRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeDisableSchedulingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enable task scheduling of the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeEnableSchedulingRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeEnableSchedulingResponse
     */
	public function computeNodeEnableScheduling(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeEnableSchedulingRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeEnableSchedulingResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/enablescheduling', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeEnableSchedulingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeEnableSchedulingRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeEnableSchedulingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetResponse
     */
	public function computeNodeGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->computeNode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComputeNode', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the Remote Desktop Protocol file for the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteDesktopRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteDesktopResponse
     */
	public function computeNodeGetRemoteDesktop(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteDesktopRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteDesktopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/rdp', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteDesktopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteDesktopRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteDesktopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->computeNodeGetRemoteDesktop200ApplicationJSONBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the settings required for remote login to a compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteLoginSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteLoginSettingsResponse
     */
	public function computeNodeGetRemoteLoginSettings(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteLoginSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteLoginSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/remoteloginsettings', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteLoginSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteLoginSettingsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeGetRemoteLoginSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->computeNodeGetRemoteLoginSettingsResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComputeNodeGetRemoteLoginSettingsResult', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the compute nodes in the specified pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeListResponse
     */
	public function computeNodeList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->computeNodeListResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ComputeNodeListResult', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restarts the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeRebootRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeRebootResponse
     */
	public function computeNodeReboot(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeRebootRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeRebootResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/reboot', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeRebootRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeRebootParameter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeRebootRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeRebootResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reinstalls the operating system on the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeReimageRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeReimageResponse
     */
	public function computeNodeReimage(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeReimageRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeReimageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/reimage', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeReimageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeReimageParameter", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeReimageRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeReimageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the password or expiration time of a user account on the specified compute node.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeNodeUpdateUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeNodeUpdateUserResponse
     */
	public function computeNodeUpdateUser(
        \OpenAPI\OpenAPI\Models\Operations\ComputeNodeUpdateUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeNodeUpdateUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/nodes/{nodeId}/users/{userName}', \OpenAPI\OpenAPI\Models\Operations\ComputeNodeUpdateUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeUpdateUserParameter", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeNodeUpdateUserRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeNodeUpdateUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes compute nodes from the specified pool.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PoolRemoveNodesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PoolRemoveNodesResponse
     */
	public function poolRemoveNodes(
        \OpenAPI\OpenAPI\Models\Operations\PoolRemoveNodesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PoolRemoveNodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/pools/{poolId}/removenodes', \OpenAPI\OpenAPI\Models\Operations\PoolRemoveNodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "nodeRemoveParameter", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PoolRemoveNodesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PoolRemoveNodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            $response->headers = $httpResponse->getHeaders();
            
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchError', 'json');
            }
        }

        return $response;
    }
}