/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



/**
 * RegistrationsLogsListLogAttributesLogParams - The type of action performed on the OSF. See description for full list of possible actions.
 */
public class RegistrationsLogsListLogAttributesLogParams {
    /**
     * The addon associated with the connected node.
     */
    
    public String addon;
    public RegistrationsLogsListLogAttributesLogParams withAddon(String addon) {
        this.addon = addon;
        return this;
    }
    
    /**
     * The view only link added to the node was anonymous.
     */
    
    public Boolean anonymousLink;
    public RegistrationsLogsListLogAttributesLogParams withAnonymousLink(Boolean anonymousLink) {
        this.anonymousLink = anonymousLink;
        return this;
    }
    
    /**
     * The Amazon s3 bucket connected to the connected node.
     */
    
    public String bucket;
    public RegistrationsLogsListLogAttributesLogParams withBucket(String bucket) {
        this.bucket = bucket;
        return this;
    }
    
    /**
     * Name of citation associated with the connected node.
     */
    
    public String citationName;
    public RegistrationsLogsListLogAttributesLogParams withCitationName(String citationName) {
        this.citationName = citationName;
        return this;
    }
    
    /**
     * List of contributors on the connected node involved in the action represented by this node log.
     */
    
    public String contributors;
    public RegistrationsLogsListLogAttributesLogParams withContributors(String contributors) {
        this.contributors = contributors;
        return this;
    }
    
    /**
     * The dataset associated with the connected node.
     */
    
    public String dataSet;
    public RegistrationsLogsListLogAttributesLogParams withDataSet(String dataSet) {
        this.dataSet = dataSet;
        return this;
    }
    
    /**
     * A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title.
     */
    
    public String destination;
    public RegistrationsLogsListLogAttributesLogParams withDestination(String destination) {
        this.destination = destination;
        return this;
    }
    
    /**
     * Title of the fighshare project associated with this node log
     */
    
    public String figshareTitle;
    public RegistrationsLogsListLogAttributesLogParams withFigshareTitle(String figshareTitle) {
        this.figshareTitle = figshareTitle;
        return this;
    }
    
    /**
     * Dictionary with information about the file involved with the log.
     */
    
    public String file;
    public RegistrationsLogsListLogAttributesLogParams withFile(String file) {
        this.file = file;
        return this;
    }
    
    /**
     * Filename for the file associated with the log.
     */
    
    public String filename;
    public RegistrationsLogsListLogAttributesLogParams withFilename(String filename) {
        this.filename = filename;
        return this;
    }
    
    /**
     * Folder associated with the log.
     */
    
    public String folder;
    public RegistrationsLogsListLogAttributesLogParams withFolder(String folder) {
        this.folder = folder;
        return this;
    }
    
    /**
     * Name of the folder associated with the log.
     */
    
    public String folderName;
    public RegistrationsLogsListLogAttributesLogParams withFolderName(String folderName) {
        this.folderName = folderName;
        return this;
    }
    
    /**
     * URL that the connected node forwards to.
     */
    
    public String forwardUrl;
    public RegistrationsLogsListLogAttributesLogParams withForwardUrl(String forwardUrl) {
        this.forwardUrl = forwardUrl;
        return this;
    }
    
    /**
     * The github repository involved with the action represented by this node log.
     */
    
    public String githubRepo;
    public RegistrationsLogsListLogAttributesLogParams withGithubRepo(String githubRepo) {
        this.githubRepo = githubRepo;
        return this;
    }
    
    /**
     * The github user involved with the action represented by this node log.
     */
    
    public String githubUser;
    public RegistrationsLogsListLogAttributesLogParams withGithubUser(String githubUser) {
        this.githubUser = githubUser;
        return this;
    }
    
    /**
     * Dictionary containing the DOI and ARK ID for a preprint associated with the log.
     */
    
    public String identifiers;
    public RegistrationsLogsListLogAttributesLogParams withIdentifiers(String identifiers) {
        this.identifiers = identifiers;
        return this;
    }
    
    /**
     * Dictionary containing the ID and Name of the institution associated with the log.
     */
    
    public String institution;
    public RegistrationsLogsListLogAttributesLogParams withInstitution(String institution) {
        this.institution = institution;
        return this;
    }
    
    /**
     * Kind of the object associated with the log.
     */
    
    public String kind;
    public RegistrationsLogsListLogAttributesLogParams withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * License for the associated node.
     */
    
    public String license;
    public RegistrationsLogsListLogAttributesLogParams withLicense(String license) {
        this.license = license;
        return this;
    }
    
    /**
     * Old name of wiki page for a wiki rename log action.
     */
    
    public String oldPage;
    public RegistrationsLogsListLogAttributesLogParams withOldPage(String oldPage) {
        this.oldPage = oldPage;
        return this;
    }
    
    /**
     * Current name of wiki page for rename log action.
     */
    
    public String page;
    public RegistrationsLogsListLogAttributesLogParams withPage(String page) {
        this.page = page;
        return this;
    }
    
    /**
     * Primary key of the wiki page associated with the log.
     */
    
    public String pageId;
    public RegistrationsLogsListLogAttributesLogParams withPageId(String pageId) {
        this.pageId = pageId;
        return this;
    }
    
    /**
     * Node that is refered to in the params of the log.
     */
    
    public String paramsNode;
    public RegistrationsLogsListLogAttributesLogParams withParamsNode(String paramsNode) {
        this.paramsNode = paramsNode;
        return this;
    }
    
    /**
     * Project that is refered to in the params of the log.
     */
    
    public String paramsProject;
    public RegistrationsLogsListLogAttributesLogParams withParamsProject(String paramsProject) {
        this.paramsProject = paramsProject;
        return this;
    }
    
    /**
     * Path for a file associated with the log.
     */
    
    public String path;
    public RegistrationsLogsListLogAttributesLogParams withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * A dictionary with information about the node that is linked to the associated node.
     */
    
    public String pointer;
    public RegistrationsLogsListLogAttributesLogParams withPointer(String pointer) {
        this.pointer = pointer;
        return this;
    }
    
    /**
     * Preprint related to the associated node.
     */
    
    public String preprint;
    public RegistrationsLogsListLogAttributesLogParams withPreprint(String preprint) {
        this.preprint = preprint;
        return this;
    }
    
    /**
     * Preprint provider for the associated node.
     */
    
    public String preprintProvider;
    public RegistrationsLogsListLogAttributesLogParams withPreprintProvider(String preprintProvider) {
        this.preprintProvider = preprintProvider;
        return this;
    }
    
    /**
     * If a primary institution for the associated node is changed, this will show the previous institution.
     */
    
    public String previousInstitution;
    public RegistrationsLogsListLogAttributesLogParams withPreviousInstitution(String previousInstitution) {
        this.previousInstitution = previousInstitution;
        return this;
    }
    
    /**
     * A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title.
     */
    
    public String source;
    public RegistrationsLogsListLogAttributesLogParams withSource(String source) {
        this.source = source;
        return this;
    }
    
    /**
     * Dataverse study linked to the associated node.
     */
    
    public String study;
    public RegistrationsLogsListLogAttributesLogParams withStudy(String study) {
        this.study = study;
        return this;
    }
    
    /**
     * Tag associated with the associated node.
     */
    
    public String tag;
    public RegistrationsLogsListLogAttributesLogParams withTag(String tag) {
        this.tag = tag;
        return this;
    }
    
    /**
     * Tags associated with the associated node.
     */
    
    public String tags;
    public RegistrationsLogsListLogAttributesLogParams withTags(String tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title.
     */
    
    public String target;
    public RegistrationsLogsListLogAttributesLogParams withTarget(String target) {
        this.target = target;
        return this;
    }
    
    /**
     * A dictionary containing information about the node that was used as a template for the associated node.
     */
    
    public String templateNode;
    public RegistrationsLogsListLogAttributesLogParams withTemplateNode(String templateNode) {
        this.templateNode = templateNode;
        return this;
    }
    
    /**
     * The new title for the associated node.
     */
    
    public String titleNew;
    public RegistrationsLogsListLogAttributesLogParams withTitleNew(String titleNew) {
        this.titleNew = titleNew;
        return this;
    }
    
    /**
     * The original title for the associated node
     */
    
    public String titleOriginal;
    public RegistrationsLogsListLogAttributesLogParams withTitleOriginal(String titleOriginal) {
        this.titleOriginal = titleOriginal;
        return this;
    }
    
    /**
     * A dictionary containing all of the fields updated on the associated node.
     */
    
    public String updatedFields;
    public RegistrationsLogsListLogAttributesLogParams withUpdatedFields(String updatedFields) {
        this.updatedFields = updatedFields;
        return this;
    }
    
    /**
     * Links to access information about the file associated with this log.
     */
    
    public String urls;
    public RegistrationsLogsListLogAttributesLogParams withUrls(String urls) {
        this.urls = urls;
        return this;
    }
    
    /**
     * Version of the wiki page associated with this log.
     */
    
    public String version;
    public RegistrationsLogsListLogAttributesLogParams withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * A dictionary with information about the wiki page associated with the log.
     */
    
    public String wiki;
    public RegistrationsLogsListLogAttributesLogParams withWiki(String wiki) {
        this.wiki = wiki;
        return this;
    }
    
}
