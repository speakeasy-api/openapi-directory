// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type AggregateFamilyLabelEnum string

const (
	AggregateFamilyLabelEnumIPv4 AggregateFamilyLabelEnum = "IPv4"
	AggregateFamilyLabelEnumIPv6 AggregateFamilyLabelEnum = "IPv6"
)

func (e *AggregateFamilyLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "IPv4":
		fallthrough
	case "IPv6":
		*e = AggregateFamilyLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregateFamilyLabelEnum: %s", s)
	}
}

type AggregateFamilyValueEnum string

const (
	AggregateFamilyValueEnumFour AggregateFamilyValueEnum = "4"
	AggregateFamilyValueEnumSix  AggregateFamilyValueEnum = "6"
)

func (e *AggregateFamilyValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "4":
		fallthrough
	case "6":
		*e = AggregateFamilyValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregateFamilyValueEnum: %s", s)
	}
}

type AggregateFamily struct {
	Label AggregateFamilyLabelEnum `json:"label"`
	Value AggregateFamilyValueEnum `json:"value"`
}

type Aggregate struct {
	Created      *types.Date            `json:"created,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	DateAdded    *types.Date            `json:"date_added,omitempty"`
	Description  *string                `json:"description,omitempty"`
	Family       *AggregateFamily       `json:"family,omitempty"`
	ID           *int64                 `json:"id,omitempty"`
	LastUpdated  *time.Time             `json:"last_updated,omitempty"`
	Prefix       string                 `json:"prefix"`
	Rir          NestedRIR              `json:"rir"`
	Tags         []string               `json:"tags,omitempty"`
}
