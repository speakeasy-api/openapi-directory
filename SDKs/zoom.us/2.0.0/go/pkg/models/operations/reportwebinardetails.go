// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ReportWebinarDetailsSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type ReportWebinarDetailsPathParams struct {
	// The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	WebinarID string `pathParam:"style=simple,explode=false,name=webinarId"`
}

type ReportWebinarDetailsRequest struct {
	PathParams ReportWebinarDetailsPathParams
	Security   ReportWebinarDetailsSecurity
}

type ReportWebinarDetails200ApplicationXMLCustomKeys struct {
	// Custom key associated with the user.
	Key *string
	// Value of the custom key associated with the user.
	Value *string
}

type ReportWebinarDetails200ApplicationXMLTrackingFields struct {
	// Tracking fields type.
	Field *string
	// Tracking fields value.
	Value *string
}

// ReportWebinarDetails200ApplicationXML - **HTTP Status Code:** `200`<br>
// Webinar details returned.<br>
// This is only available for paid account:{accountId}.
type ReportWebinarDetails200ApplicationXML struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []ReportWebinarDetails200ApplicationXMLCustomKeys
	// Department of the host.
	Dept *string
	// Meeting duration.
	Duration *int64
	// Meeting end time.
	EndTime *time.Time
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64
	// Number of meeting participants.
	ParticipantsCount *int64
	// Meeting start time.
	StartTime *time.Time
	// Meeting topic.
	Topic *string
	// Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
	//
	// **total_minutes** = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
	TotalMinutes *int64
	// Tracking fields.
	TrackingFields []ReportWebinarDetails200ApplicationXMLTrackingFields
	// Meeting type.
	Type *int64
	// User email.
	UserEmail *string
	// User display name.
	UserName *string
	// Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). Double encode the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string
}

type ReportWebinarDetails200ApplicationJSONCustomKeys struct {
	// Custom key associated with the user.
	Key *string `json:"key,omitempty"`
	// Value of the custom key associated with the user.
	Value *string `json:"value,omitempty"`
}

type ReportWebinarDetails200ApplicationJSONTrackingFields struct {
	// Tracking fields type.
	Field *string `json:"field,omitempty"`
	// Tracking fields value.
	Value *string `json:"value,omitempty"`
}

// ReportWebinarDetails200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Webinar details returned.<br>
// This is only available for paid account:{accountId}.
type ReportWebinarDetails200ApplicationJSON struct {
	// Custom keys and values assigned to the meeting.
	CustomKeys []ReportWebinarDetails200ApplicationJSONCustomKeys `json:"custom_keys,omitempty"`
	// Department of the host.
	Dept *string `json:"dept,omitempty"`
	// Meeting duration.
	Duration *int64 `json:"duration,omitempty"`
	// Meeting end time.
	EndTime *time.Time `json:"end_time,omitempty"`
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// Number of meeting participants.
	ParticipantsCount *int64 `json:"participants_count,omitempty"`
	// Meeting start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Meeting topic.
	Topic *string `json:"topic,omitempty"`
	// Number of Webinar minutes. This represents the total amount of Webinar minutes attended by each participant including the host, for a Webinar hosted by the user. For instance if there were one host(named A) and one participant(named B) in a Webinar, the value of total_minutes would be calculated as below:
	//
	// **total_minutes** = Total Webinar Attendance Minutes of A + Total Webinar Attendance Minutes of B
	TotalMinutes *int64 `json:"total_minutes,omitempty"`
	// Tracking fields.
	TrackingFields []ReportWebinarDetails200ApplicationJSONTrackingFields `json:"tracking_fields,omitempty"`
	// Meeting type.
	Type *int64 `json:"type,omitempty"`
	// User email.
	UserEmail *string `json:"user_email,omitempty"`
	// User display name.
	UserName *string `json:"user_name,omitempty"`
	// Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a meeting ends, a new UUID will be generated when the next instance of the webinar starts). Double encode the UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

type ReportWebinarDetailsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Webinar details returned.<br>
	// This is only available for paid account:{accountId}.
	ReportWebinarDetails200ApplicationJSONObject *ReportWebinarDetails200ApplicationJSON
}
