"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nullable_git_user as shared_nullable_git_user
from ..shared import nullable_simple_user as shared_nullable_simple_user
from ..shared import verification as shared_verification
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitCommitTree:
    
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitCommit:
    
    author: shared_nullable_git_user.NullableGitUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author') }})
    r"""Metaproperties for Git author/committer information."""  
    comment_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment_count') }})  
    committer: shared_nullable_git_user.NullableGitUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committer') }})
    r"""Metaproperties for Git author/committer information."""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    tree: CommitCommitTree = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tree') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    verification: Optional[shared_verification.Verification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitFiles:
    
    additions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additions'), 'exclude': lambda f: f is None }})  
    blob_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blob_url'), 'exclude': lambda f: f is None }})  
    changes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('changes'), 'exclude': lambda f: f is None }})  
    contents_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents_url'), 'exclude': lambda f: f is None }})  
    deletions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletions'), 'exclude': lambda f: f is None }})  
    filename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filename'), 'exclude': lambda f: f is None }})  
    patch: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patch'), 'exclude': lambda f: f is None }})  
    previous_filename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_filename'), 'exclude': lambda f: f is None }})  
    raw_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw_url'), 'exclude': lambda f: f is None }})  
    sha: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitParents:
    
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    html_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CommitStats:
    
    additions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additions'), 'exclude': lambda f: f is None }})  
    deletions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deletions'), 'exclude': lambda f: f is None }})  
    total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Commit:
    r"""Commit"""
    
    author: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('author') }})
    r"""Simple User"""  
    comments_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments_url') }})  
    commit: CommitCommit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit') }})  
    committer: shared_nullable_simple_user.NullableSimpleUser = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('committer') }})
    r"""Simple User"""  
    html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('html_url') }})  
    node_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('node_id') }})  
    parents: list[CommitParents] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parents') }})  
    sha: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha') }})  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})  
    files: Optional[list[CommitFiles]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files'), 'exclude': lambda f: f is None }})  
    stats: Optional[CommitStats] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats'), 'exclude': lambda f: f is None }})  
    