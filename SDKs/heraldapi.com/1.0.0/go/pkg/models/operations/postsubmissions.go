// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type PostSubmissionsRequestBodyApplicationType string

const (
	PostSubmissionsRequestBodyApplicationTypeApplicationWriteV1 PostSubmissionsRequestBodyApplicationType = "ApplicationWrite.v1"
	PostSubmissionsRequestBodyApplicationTypeApplicationIDV1    PostSubmissionsRequestBodyApplicationType = "ApplicationID.v1"
)

type PostSubmissionsRequestBodyApplication struct {
	ApplicationWriteV1 *shared.ApplicationWriteV1
	ApplicationIDV1    *shared.ApplicationIDV1

	Type PostSubmissionsRequestBodyApplicationType
}

func CreatePostSubmissionsRequestBodyApplicationApplicationWriteV1(applicationWriteV1 shared.ApplicationWriteV1) PostSubmissionsRequestBodyApplication {
	typ := PostSubmissionsRequestBodyApplicationTypeApplicationWriteV1

	return PostSubmissionsRequestBodyApplication{
		ApplicationWriteV1: &applicationWriteV1,
		Type:               typ,
	}
}

func CreatePostSubmissionsRequestBodyApplicationApplicationIDV1(applicationIDV1 shared.ApplicationIDV1) PostSubmissionsRequestBodyApplication {
	typ := PostSubmissionsRequestBodyApplicationTypeApplicationIDV1

	return PostSubmissionsRequestBodyApplication{
		ApplicationIDV1: &applicationIDV1,
		Type:            typ,
	}
}

func (u *PostSubmissionsRequestBodyApplication) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	applicationWriteV1 := new(shared.ApplicationWriteV1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&applicationWriteV1); err == nil {
		u.ApplicationWriteV1 = applicationWriteV1
		u.Type = PostSubmissionsRequestBodyApplicationTypeApplicationWriteV1
		return nil
	}

	applicationIDV1 := new(shared.ApplicationIDV1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&applicationIDV1); err == nil {
		u.ApplicationIDV1 = applicationIDV1
		u.Type = PostSubmissionsRequestBodyApplicationTypeApplicationIDV1
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSubmissionsRequestBodyApplication) MarshalJSON() ([]byte, error) {
	if u.ApplicationWriteV1 != nil {
		return json.Marshal(u.ApplicationWriteV1)
	}

	if u.ApplicationIDV1 != nil {
		return json.Marshal(u.ApplicationIDV1)
	}

	return nil, nil
}

type PostSubmissionsRequestBody struct {
	Application PostSubmissionsRequestBodyApplication `json:"application"`
	ProducerID  string                                `json:"producer_id"`
}

type PostSubmissionsRequest struct {
	Request *PostSubmissionsRequestBody `request:"mediaType=application/json"`
}

// PostSubmissions400ApplicationJSON - Bad Request: something was wrong with the submission
type PostSubmissions400ApplicationJSON struct {
	Errors []shared.ErrorV1 `json:"errors,omitempty"`
}

// PostSubmissions200ApplicationJSON - OK
type PostSubmissions200ApplicationJSON struct {
	// A submission is a set of information submitted by a producer to institutions in order to get quotes.
	Submission *shared.SubmissionV1 `json:"submission,omitempty"`
}

type PostSubmissionsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	PostSubmissions200ApplicationJSONObject *PostSubmissions200ApplicationJSON
	// Bad Request: something was wrong with the submission
	PostSubmissions400ApplicationJSONObject *PostSubmissions400ApplicationJSON
}
