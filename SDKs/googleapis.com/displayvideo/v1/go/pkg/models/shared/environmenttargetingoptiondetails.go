// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnvironmentTargetingOptionDetailsEnvironmentEnum - Output only. The serving environment.
type EnvironmentTargetingOptionDetailsEnvironmentEnum string

const (
	EnvironmentTargetingOptionDetailsEnvironmentEnumEnvironmentUnspecified     EnvironmentTargetingOptionDetailsEnvironmentEnum = "ENVIRONMENT_UNSPECIFIED"
	EnvironmentTargetingOptionDetailsEnvironmentEnumEnvironmentWebOptimized    EnvironmentTargetingOptionDetailsEnvironmentEnum = "ENVIRONMENT_WEB_OPTIMIZED"
	EnvironmentTargetingOptionDetailsEnvironmentEnumEnvironmentWebNotOptimized EnvironmentTargetingOptionDetailsEnvironmentEnum = "ENVIRONMENT_WEB_NOT_OPTIMIZED"
	EnvironmentTargetingOptionDetailsEnvironmentEnumEnvironmentApp             EnvironmentTargetingOptionDetailsEnvironmentEnum = "ENVIRONMENT_APP"
)

func (e *EnvironmentTargetingOptionDetailsEnvironmentEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENVIRONMENT_UNSPECIFIED":
		fallthrough
	case "ENVIRONMENT_WEB_OPTIMIZED":
		fallthrough
	case "ENVIRONMENT_WEB_NOT_OPTIMIZED":
		fallthrough
	case "ENVIRONMENT_APP":
		*e = EnvironmentTargetingOptionDetailsEnvironmentEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvironmentTargetingOptionDetailsEnvironmentEnum: %s", s)
	}
}

// EnvironmentTargetingOptionDetails - Represents a targetable environment. This will be populated in the environment_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`.
type EnvironmentTargetingOptionDetails struct {
	// Output only. The serving environment.
	Environment *EnvironmentTargetingOptionDetailsEnvironmentEnum `json:"environment,omitempty"`
}
