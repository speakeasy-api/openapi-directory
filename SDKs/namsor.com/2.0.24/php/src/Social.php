<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Social 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, given a personal name and formatted / unformatted phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneCodeResponse
     */
	public function phoneCode(
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/phoneCode/{firstName}/{lastName}/{phoneNumber}', \OpenAPI\OpenAPI\Models\Operations\PhoneCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNamePhoneCodedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNamePhoneCodedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, detecting automatically the local context given a name and formatted / unformatted phone number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNamePhoneNumberIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneCodeBatchResponse
     */
	public function phoneCodeBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNamePhoneNumberIn $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneCodeBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/phoneCodeBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneCodeBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNamePhoneCodedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNamePhoneCodedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 11 UNITS PER NAME] Infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoResponse
     */
	public function phoneCodeGeo(
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/phoneCodeGeo/{firstName}/{lastName}/{phoneNumber}/{countryIso2}', \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNamePhoneCodedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNamePhoneCodedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 11 UNITS PER NAME] Infer the likely country and phone prefix, of up to 100 personal names, with a local context (ISO2 country of residence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNamePhoneNumberGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoBatchResponse
     */
	public function phoneCodeGeoBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNamePhoneNumberGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/phoneCodeGeoBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNamePhoneCodedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNamePhoneCodedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [CREDITS 1 UNIT] Feedback loop to better infer the likely phone prefix, given a personal name and formatted / unformatted phone number, with a local context (ISO2 country of residence).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopResponse
     */
	public function phoneCodeGeoFeedbackLoop(
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/phoneCodeGeoFeedbackLoop/{firstName}/{lastName}/{phoneNumber}/{phoneNumberE164}/{countryIso2}', \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PhoneCodeGeoFeedbackLoopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNamePhoneCodedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNamePhoneCodedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}