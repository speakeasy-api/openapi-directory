/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Confirmation of Funds Service (PIIS) returns a confirmation of funds request at the ASPSP.
 *
 * @remarks
 *
 */
export class ConfirmationOfFundsServicePIIS {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Confirmation of funds request
   *
   * @remarks
   * Creates a confirmation of funds request at the ASPSP. Checks whether a specific amount is available at point of time of the request on an account linked to a given tuple card issuer(TPP)/card number, or addressed by IBAN and TPP respectively.
   * If the related extended services are used a conditional Consent-ID is contained in the header. This field is contained but commented out in this specification.
   */
  checkAvailabilityOfFunds(
    req: operations.CheckAvailabilityOfFundsRequest,
    security: operations.CheckAvailabilityOfFundsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CheckAvailabilityOfFundsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CheckAvailabilityOfFundsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/funds-confirmations";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "confirmationOfFunds",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CheckAvailabilityOfFundsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CheckAvailabilityOfFundsResponse =
        new operations.CheckAvailabilityOfFundsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.checkAvailabilityOfFunds200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CheckAvailabilityOfFunds200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error400NGAIS = utils.objectToClass(
              httpRes?.data,
              shared.Error400NGAIS
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.error400AIS = utils.objectToClass(
              httpRes?.data,
              shared.Error400AIS
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error401NGPIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error401NGPIIS
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.error401PIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error401PIIS
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error403NGPIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error403NGPIIS
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.error403PIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error403PIIS
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error404NGPIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error404NGPIIS
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.error404PIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error404PIIS
            );
          }
          break;
        case httpRes?.status == 405:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error405NGPIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error405NGPIIS
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.error405PIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error405PIIS
            );
          }
          break;
        case [406, 408, 415, 429, 500, 503].includes(httpRes?.status):
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error409NGPIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error409NGPIIS
            );
          }
          if (utils.matchContentType(contentType, `application/problem+json`)) {
            res.error409PIIS = utils.objectToClass(
              httpRes?.data,
              shared.Error409PIIS
            );
          }
          break;
      }

      return res;
    });
  }
}
