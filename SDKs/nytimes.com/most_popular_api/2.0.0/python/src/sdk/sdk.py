"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

SERVERS = [
    "http://api.nytimes.com/svc/mostpopular/v2",
    "https://api.nytimes.com/svc/mostpopular/v2",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Get lists of NYT Articles based on shares, emails, and views.
    http://developer.nytimes.com/
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def get_mostemailed_section_time_period_json(self, request: operations.GETMostemailedSectionTimePeriodJSONRequest, security: operations.GETMostemailedSectionTimePeriodJSONSecurity) -> operations.GETMostemailedSectionTimePeriodJSONResponse:
        r"""Most Emailed by Section & Time Period"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETMostemailedSectionTimePeriodJSONRequest, base_url, '/mostemailed/{section}/{time-period}.json', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETMostemailedSectionTimePeriodJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETMostemailedSectionTimePeriodJSON200ApplicationJSON])
                res.get_mostemailed_section_time_period_json_200_application_json_object = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETMostemailedSectionTimePeriodJSON400ApplicationJSON])
                res.get_mostemailed_section_time_period_json_400_application_json_object = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_mostemailed_section_time_period_json_403_application_json_object = out

        return res

    def get_mostshared_section_time_period_json(self, request: operations.GETMostsharedSectionTimePeriodJSONRequest, security: operations.GETMostsharedSectionTimePeriodJSONSecurity) -> operations.GETMostsharedSectionTimePeriodJSONResponse:
        r"""Most Shared by Section & Time Period"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETMostsharedSectionTimePeriodJSONRequest, base_url, '/mostshared/{section}/{time-period}.json', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETMostsharedSectionTimePeriodJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETMostsharedSectionTimePeriodJSON200ApplicationJSON])
                res.get_mostshared_section_time_period_json_200_application_json_object = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETMostsharedSectionTimePeriodJSON400ApplicationJSON])
                res.get_mostshared_section_time_period_json_400_application_json_object = out

        return res

    def get_mostviewed_section_time_period_json(self, request: operations.GETMostviewedSectionTimePeriodJSONRequest, security: operations.GETMostviewedSectionTimePeriodJSONSecurity) -> operations.GETMostviewedSectionTimePeriodJSONResponse:
        r"""Most Viewed by Section & Time Period"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETMostviewedSectionTimePeriodJSONRequest, base_url, '/mostviewed/{section}/{time-period}.json', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETMostviewedSectionTimePeriodJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GETMostviewedSectionTimePeriodJSON200ApplicationJSON])
                res.get_mostviewed_section_time_period_json_200_application_json_object = out

        return res

    