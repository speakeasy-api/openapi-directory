"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TerminalActionsCompanyLevel:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_companies_company_id_android_apps(self, request: operations.GetCompaniesCompanyIDAndroidAppsRequest, security: operations.GetCompaniesCompanyIDAndroidAppsSecurity) -> operations.GetCompaniesCompanyIDAndroidAppsResponse:
        r"""Get a list of Android apps
        Returns a list of the Android apps that are available for the company identified in the path. 
        These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal actions read
        * Management API—Terminal actions read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDAndroidAppsRequest, base_url, '/companies/{companyId}/androidApps', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDAndroidAppsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDAndroidAppsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AndroidAppsResponse])
                res.android_apps_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_android_certificates(self, request: operations.GetCompaniesCompanyIDAndroidCertificatesRequest, security: operations.GetCompaniesCompanyIDAndroidCertificatesSecurity) -> operations.GetCompaniesCompanyIDAndroidCertificatesResponse:
        r"""Get a list of Android certificates
        Returns a list of the Android certificates that are available for the company identified in the path.
        Typically, these certificates enable running apps on Android payment terminals. The certifcates in the list have been uploaded to Adyen and can be installed or uninstalled on Android terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).
        
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal actions read
        * Management API—Terminal actions read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDAndroidCertificatesRequest, base_url, '/companies/{companyId}/androidCertificates', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDAndroidCertificatesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDAndroidCertificatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AndroidCertificatesResponse])
                res.android_certificates_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_terminal_actions(self, request: operations.GetCompaniesCompanyIDTerminalActionsRequest, security: operations.GetCompaniesCompanyIDTerminalActionsSecurity) -> operations.GetCompaniesCompanyIDTerminalActionsResponse:
        r"""Get a list of terminal actions
        Returns the [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) that have been scheduled for the company identified in the path.The response doesn't include actions that are scheduled by Adyen.
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal actions read
        * Management API—Terminal actions read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalActionsRequest, base_url, '/companies/{companyId}/terminalActions', request)
        
        query_params = utils.get_query_params(operations.GetCompaniesCompanyIDTerminalActionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListExternalTerminalActionsResponse])
                res.list_external_terminal_actions_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_companies_company_id_terminal_actions_action_id(self, request: operations.GetCompaniesCompanyIDTerminalActionsActionIDRequest, security: operations.GetCompaniesCompanyIDTerminalActionsActionIDSecurity) -> operations.GetCompaniesCompanyIDTerminalActionsActionIDResponse:
        r"""Get terminal action
        Returns the details of the [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) identified in the path.
        To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
        * Management API—Terminal actions read
        * Management API—Terminal actions read and write
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCompaniesCompanyIDTerminalActionsActionIDRequest, base_url, '/companies/{companyId}/terminalActions/{actionId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCompaniesCompanyIDTerminalActionsActionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExternalTerminalAction])
                res.external_terminal_action = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    