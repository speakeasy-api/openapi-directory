// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CapabilityProblemEntityTypeEnum string

const (
	CapabilityProblemEntityTypeEnumBankAccount CapabilityProblemEntityTypeEnum = "BankAccount"
	CapabilityProblemEntityTypeEnumDocument    CapabilityProblemEntityTypeEnum = "Document"
	CapabilityProblemEntityTypeEnumLegalEntity CapabilityProblemEntityTypeEnum = "LegalEntity"
)

func (e CapabilityProblemEntityTypeEnum) ToPointer() *CapabilityProblemEntityTypeEnum {
	return &e
}

func (e *CapabilityProblemEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BankAccount":
		fallthrough
	case "Document":
		fallthrough
	case "LegalEntity":
		*e = CapabilityProblemEntityTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CapabilityProblemEntityTypeEnum: %v", v)
	}
}

type CapabilityProblemEntity struct {
	// List of document IDs corresponding to the verification errors from capabilities.
	Documents []string                          `json:"documents,omitempty"`
	ID        *string                           `json:"id,omitempty"`
	Owner     *CapabilityProblemEntityRecursive `json:"owner,omitempty"`
	Type      *CapabilityProblemEntityTypeEnum  `json:"type,omitempty"`
}
