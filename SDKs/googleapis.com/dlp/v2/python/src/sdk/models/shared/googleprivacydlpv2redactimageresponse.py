"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleprivacydlpv2inspectresult as shared_googleprivacydlpv2inspectresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GooglePrivacyDlpV2RedactImageResponse:
    r"""Results of redacting an image."""
    
    extracted_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extractedText'), 'exclude': lambda f: f is None }})
    r"""If an image was being inspected and the InspectConfig's include_quote was set to true, then this field will include all text, if any, that was found in the image."""  
    inspect_result: Optional[shared_googleprivacydlpv2inspectresult.GooglePrivacyDlpV2InspectResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inspectResult'), 'exclude': lambda f: f is None }})
    r"""All the findings for a single scanned item."""  
    redacted_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redactedImage'), 'exclude': lambda f: f is None }})
    r"""The redacted image. The type will be the same as the original image."""  
    