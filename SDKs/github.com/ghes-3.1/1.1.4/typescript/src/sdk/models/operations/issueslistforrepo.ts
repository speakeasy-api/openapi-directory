/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * What to sort results by. Can be either `created`, `updated`, `comments`.
 */
export enum IssuesListForRepoSortEnum {
  Created = "created",
  Updated = "updated",
  Comments = "comments",
}

/**
 * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
 */
export enum IssuesListForRepoStateEnum {
  Open = "open",
  Closed = "closed",
  All = "all",
}

export class IssuesListForRepoRequest extends SpeakeasyBase {
  /**
   * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=assignee",
  })
  assignee?: string;

  /**
   * The user that created the issue.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=creator",
  })
  creator?: string;

  /**
   * The direction to sort the results by.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=direction",
  })
  direction?: shared.DirectionEnum;

  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=labels",
  })
  labels?: string;

  /**
   * A user that's mentioned in the issue.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=mentioned",
  })
  mentioned?: string;

  /**
   * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=milestone",
  })
  milestone?: string;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * The number of results per page (max 100).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=since;dateTimeFormat=YYYY-MM-DDThh:mm:ss.sssZ",
  })
  since?: Date;

  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: IssuesListForRepoSortEnum;

  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: IssuesListForRepoStateEnum;
}

export class IssuesListForRepoResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Moved permanently
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.Issue })
  issues?: shared.Issue[];

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
