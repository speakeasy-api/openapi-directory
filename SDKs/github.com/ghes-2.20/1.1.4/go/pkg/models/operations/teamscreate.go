// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// TeamsCreateRequestBodyPermissionEnum - **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
// \* `push` - team members can pull and push, but not administer newly-added repositories.
// \* `admin` - team members can pull, push and administer newly-added repositories.
type TeamsCreateRequestBodyPermissionEnum string

const (
	TeamsCreateRequestBodyPermissionEnumPull  TeamsCreateRequestBodyPermissionEnum = "pull"
	TeamsCreateRequestBodyPermissionEnumPush  TeamsCreateRequestBodyPermissionEnum = "push"
	TeamsCreateRequestBodyPermissionEnumAdmin TeamsCreateRequestBodyPermissionEnum = "admin"
)

func (e TeamsCreateRequestBodyPermissionEnum) ToPointer() *TeamsCreateRequestBodyPermissionEnum {
	return &e
}

func (e *TeamsCreateRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pull":
		fallthrough
	case "push":
		fallthrough
	case "admin":
		*e = TeamsCreateRequestBodyPermissionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsCreateRequestBodyPermissionEnum: %v", v)
	}
}

// TeamsCreateRequestBodyPrivacyEnum - The level of privacy this team should have. The options are:
// **For a non-nested team:**
// \* `secret` - only visible to organization owners and members of this team.
// \* `closed` - visible to all members of this organization.
// Default: `secret`
// **For a parent or child team:**
// \* `closed` - visible to all members of this organization.
// Default for child team: `closed`
type TeamsCreateRequestBodyPrivacyEnum string

const (
	TeamsCreateRequestBodyPrivacyEnumSecret TeamsCreateRequestBodyPrivacyEnum = "secret"
	TeamsCreateRequestBodyPrivacyEnumClosed TeamsCreateRequestBodyPrivacyEnum = "closed"
)

func (e TeamsCreateRequestBodyPrivacyEnum) ToPointer() *TeamsCreateRequestBodyPrivacyEnum {
	return &e
}

func (e *TeamsCreateRequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "closed":
		*e = TeamsCreateRequestBodyPrivacyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsCreateRequestBodyPrivacyEnum: %v", v)
	}
}

type TeamsCreateRequestBody struct {
	// The description of the team.
	Description *string `json:"description,omitempty"`
	// List GitHub IDs for organization members who will become team maintainers.
	Maintainers []string `json:"maintainers,omitempty"`
	// The name of the team.
	Name string `json:"name"`
	// The ID of a team to set as the parent team.
	ParentTeamID *int64 `json:"parent_team_id,omitempty"`
	// **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
	// \* `pull` - team members can pull, but not push to or administer newly-added repositories.
	// \* `push` - team members can pull and push, but not administer newly-added repositories.
	// \* `admin` - team members can pull, push and administer newly-added repositories.
	Permission *TeamsCreateRequestBodyPermissionEnum `json:"permission,omitempty"`
	// The level of privacy this team should have. The options are:
	// **For a non-nested team:**
	// \* `secret` - only visible to organization owners and members of this team.
	// \* `closed` - visible to all members of this organization.
	// Default: `secret`
	// **For a parent or child team:**
	// \* `closed` - visible to all members of this organization.
	// Default for child team: `closed`
	Privacy *TeamsCreateRequestBodyPrivacyEnum `json:"privacy,omitempty"`
	// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
	RepoNames []string `json:"repo_names,omitempty"`
}

type TeamsCreateRequest struct {
	RequestBody TeamsCreateRequestBody `request:"mediaType=application/json"`
	Org         string                 `pathParam:"style=simple,explode=false,name=org"`
}

type TeamsCreateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response
	TeamFull *shared.TeamFull
	// Validation failed
	ValidationError *shared.ValidationError
}
