"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetV2ActivitiesEmailsJSONRequest:
    
    action_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'action_id', 'style': 'form', 'explode': False }})
    r"""Filters emails by action_id. Multiple action ids can be applied"""  
    bounced: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bounced', 'style': 'form', 'explode': True }})
    r"""Filters emails by whether they have bounced or not"""  
    cadence_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cadence_id', 'style': 'form', 'explode': False }})
    r"""Filters emails by cadence. Multiple cadence ids can be applied"""  
    crm_activity_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'crm_activity_id', 'style': 'form', 'explode': False }})
    r"""Filters emails by crm_activity_id. Multiple crm activty ids can be applied"""  
    email_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email_addresses', 'style': 'form', 'explode': False }})
    r"""Filters emails by recipient email address. Multiple emails can be applied."""  
    ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids', 'style': 'form', 'explode': False }})
    r"""IDs of emails to fetch. If a record can't be found, that record won't be returned and your request will be successful"""  
    include_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_paging_counts', 'style': 'form', 'explode': True }})
    r"""Whether to include total_pages and total_count in the metadata. Defaults to false"""  
    limit_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit_paging_counts', 'style': 'form', 'explode': True }})
    r"""Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"""  
    one_off: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'one_off', 'style': 'form', 'explode': True }})
    r"""Filters emails by one-off only"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The current page to fetch results from. Defaults to 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""How many records to show per page in the range [1, 100]. Defaults to 25"""  
    person_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'person_id', 'style': 'form', 'explode': False }})
    r"""Filters emails by person_id. Multiple person ids can be applied"""  
    personalization: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'personalization', 'style': 'form', 'explode': False }})
    r"""Filters emails by personalization score"""  
    scoped_fields: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scoped_fields', 'style': 'form', 'explode': False }})
    r"""Specify explicit scoped fields desired on the Email Resource."""  
    sent_at: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sent_at', 'style': 'form', 'explode': False }})
    r"""Equality filters that are applied to the sent_at field. A single filter can be used by itself or combined with other filters to create a range.
    
    ---CUSTOM---
    {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}
    """  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""Key to sort on, must be one of: updated_at, send_time. Defaults to updated_at"""  
    sort_direction: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_direction', 'style': 'form', 'explode': True }})
    r"""Direction to sort in, must be one of: ASC, DESC. Defaults to DESC"""  
    status: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': False }})
    r"""Filters emails by status. Multiple status can be applied, possible values are sent, sent_from_gmail, sent_from_external, pending, pending_reply_check, scheduled, sending, delivering, failed, cancelled, pending_through_gmail, pending_through_external"""  
    step_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'step_id', 'style': 'form', 'explode': False }})
    r"""Filters emails by step. Multiple step ids can be applied"""  
    updated_at: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated_at', 'style': 'form', 'explode': False }})
    r"""Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
    
    ---CUSTOM---
    {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}
    """  
    user_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user_id', 'style': 'form', 'explode': False }})
    r"""Filters emails by user_id. Multiple User ids can be applied"""  
    

@dataclasses.dataclass
class GetV2ActivitiesEmailsJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    