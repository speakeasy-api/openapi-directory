"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChargingLocations:
    r"""Charging Locations are created by a user to denote locations where they pay for the power used to charge their vehicle. Smart Charging is active at these locations only."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_charginglocations_charginglocationid(self, request: operations.DeleteCharginglocationsCharginglocationidRequest, security: operations.DeleteCharginglocationsCharginglocationidSecurity) -> operations.DeleteCharginglocationsCharginglocationidResponse:
        r"""Delete Charging Location
        Delete a Charging Location
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCharginglocationsCharginglocationidRequest, base_url, '/charging-locations/{chargingLocationId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCharginglocationsCharginglocationidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_charginglocations(self) -> operations.GetCharginglocationsResponse:
        r"""List Charging Locations
        Returns a list of Charging Locations registered to the User
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/charging-locations'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCharginglocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema]])
                res.onecharging_locations_post_request_body_content_application_1json_schemas = out

        return res

    def get_charginglocations_charginglocationid(self, request: operations.GetCharginglocationsCharginglocationidRequest, security: operations.GetCharginglocationsCharginglocationidSecurity) -> operations.GetCharginglocationsCharginglocationidResponse:
        r"""Get Charging Location"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCharginglocationsCharginglocationidRequest, base_url, '/charging-locations/{chargingLocationId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCharginglocationsCharginglocationidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema])
                res.onecharging_locations_post_request_body_content_application_1json_schema = out

        return res

    def post_charginglocations(self, request: operations.PostCharginglocationsRequestBodyInput, security: operations.PostCharginglocationsSecurity) -> operations.PostCharginglocationsResponse:
        r"""Create Charging Location"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/charging-locations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCharginglocationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema])
                res.onecharging_locations_post_request_body_content_application_1json_schema = out

        return res

    def put_charginglocations_charginglocationid(self, request: operations.PutCharginglocationsCharginglocationidRequest, security: operations.PutCharginglocationsCharginglocationidSecurity) -> operations.PutCharginglocationsCharginglocationidResponse:
        r"""Update Charging Location
        Updates a charging location with new configuration
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutCharginglocationsCharginglocationidRequest, base_url, '/charging-locations/{chargingLocationId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "onecharging_locations_post_request_body_content_application_1json_schema_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutCharginglocationsCharginglocationidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OnechargingLocationsPostRequestBodyContentApplication1jsonSchema])
                res.onecharging_locations_post_request_body_content_application_1json_schema = out

        return res

    