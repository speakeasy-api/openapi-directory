/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export enum GETDecreaseNodeGroupsInGlobalReplicationGroupActionEnum {
  DecreaseNodeGroupsInGlobalReplicationGroup = "DecreaseNodeGroupsInGlobalReplicationGroup",
}

export enum GETDecreaseNodeGroupsInGlobalReplicationGroupVersionEnum {
  TwoThousandAndFifteen0202 = "2015-02-02",
}

export class GETDecreaseNodeGroupsInGlobalReplicationGroupRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETDecreaseNodeGroupsInGlobalReplicationGroupActionEnum;

  /**
   * Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ApplyImmediately",
  })
  applyImmediately: boolean;

  /**
   * If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=GlobalNodeGroupsToRemove",
  })
  globalNodeGroupsToRemove?: string[];

  /**
   * If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=GlobalNodeGroupsToRetain",
  })
  globalNodeGroupsToRetain?: string[];

  /**
   * The name of the Global datastore
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=GlobalReplicationGroupId",
  })
  globalReplicationGroupId: string;

  /**
   * The number of node groups (shards) that results from the modification of the shard configuration
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NodeGroupCount",
  })
  nodeGroupCount: number;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETDecreaseNodeGroupsInGlobalReplicationGroupVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETDecreaseNodeGroupsInGlobalReplicationGroupResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
