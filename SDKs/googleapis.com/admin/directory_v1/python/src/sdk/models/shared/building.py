"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import buildingaddress as shared_buildingaddress
from ..shared import buildingcoordinates as shared_buildingcoordinates
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Building:
    r"""Public API: Resources.buildings"""
    
    address: Optional[shared_buildingaddress.BuildingAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})
    r"""Public API: Resources.buildings"""  
    building_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildingId'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the building. The maximum length is 100 characters."""  
    building_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buildingName'), 'exclude': lambda f: f is None }})
    r"""The building name as seen by users in Calendar. Must be unique for the customer. For example, \\"NYC-CHEL\\". The maximum length is 100 characters."""  
    coordinates: Optional[shared_buildingcoordinates.BuildingCoordinates] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coordinates'), 'exclude': lambda f: f is None }})
    r"""Public API: Resources.buildings"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A brief description of the building. For example, \\"Chelsea Market\\"."""  
    etags: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etags'), 'exclude': lambda f: f is None }})
    r"""ETag of the resource."""  
    floor_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('floorNames'), 'exclude': lambda f: f is None }})
    r"""The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\\"B2\\", \\"B1\\", \\"L\\", \\"1\\", \\"2\\", \\"2M\\", \\"3\\", \\"PH\\"] Must contain at least one entry."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Kind of resource this is."""  
    