"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPostReviewRequestBody:
    r"""The user_email must use a professional domain, free domains are not supported."""
    
    rating: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rating') }})  
    user_email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_email') }})  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})  
    
class PostPostReviewRatingEnum(str, Enum):
    r"""The user's star rating, must be a single integer from [1, 2, 3, 4, 5]"""
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'
    FIVE = '5'


@dataclasses.dataclass
class PostPostReviewRequest:
    
    rating: PostPostReviewRatingEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'rating', 'style': 'form', 'explode': True }})
    r"""The user's star rating, must be a single integer from [1, 2, 3, 4, 5]"""  
    request_body: PostPostReviewRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The request body requires the user_email and rating. The parameter use_name is optional."""  
    user_email: str = dataclasses.field(metadata={'query_param': { 'field_name': 'user_email', 'style': 'form', 'explode': True }})
    r"""User's email to which the review verification will be sent."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user_name', 'style': 'form', 'explode': True }})
    r"""The user's name, defaults to empty string \\"\\".  Thus, if this is omitted, the email to the user will not use the user's name."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPostReview403ApplicationJSON:
    r"""The 403 response can have many detailed response messages related to the user's email address validation"""
    
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPostReview401ApplicationJSON:
    r"""This can appear because the authorization header is missing or malformed, or becuse the auth email and key pair is not authorized."""
    
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPostReview400ApplicationJSON:
    r"""A status code of 400 is returned when a required parameter is mising, such as 'rating' or 'user_email'."""
    
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPostReview200ApplicationJSON:
    r"""A response code of 200 means the request was succesful, and the user has been sent an email confirming their review."""
    
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostPostReviewResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_post_review_200_application_json_object: Optional[PostPostReview200ApplicationJSON] = dataclasses.field(default=None)
    r"""A response code of 200 means the request was succesful, and the user has been sent an email confirming their review."""  
    post_post_review_400_application_json_object: Optional[PostPostReview400ApplicationJSON] = dataclasses.field(default=None)
    r"""A status code of 400 is returned when a required parameter is mising, such as 'rating' or 'user_email'."""  
    post_post_review_401_application_json_object: Optional[PostPostReview401ApplicationJSON] = dataclasses.field(default=None)
    r"""This can appear because the authorization header is missing or malformed, or because the auth email and key pair is not authorized."""  
    post_post_review_403_application_json_object: Optional[PostPostReview403ApplicationJSON] = dataclasses.field(default=None)
    r"""The 403 response can have many detailed response messages related to the user's email address validation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    