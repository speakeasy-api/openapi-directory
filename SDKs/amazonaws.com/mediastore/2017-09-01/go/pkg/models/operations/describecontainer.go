// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeContainerXAmzTargetEnum
type DescribeContainerXAmzTargetEnum string

const (
	DescribeContainerXAmzTargetEnumMediaStore20170901DescribeContainer DescribeContainerXAmzTargetEnum = "MediaStore_20170901.DescribeContainer"
)

func (e *DescribeContainerXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "MediaStore_20170901.DescribeContainer":
		*e = DescribeContainerXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeContainerXAmzTargetEnum: %s", s)
	}
}

type DescribeContainerRequest struct {
	DescribeContainerInput shared.DescribeContainerInput   `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             DescribeContainerXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeContainerResponse struct {
	// ContainerNotFoundException
	ContainerNotFoundException interface{}
	ContentType                string
	// Success
	DescribeContainerOutput *shared.DescribeContainerOutput
	// InternalServerError
	InternalServerError interface{}
	StatusCode          int
	RawResponse         *http.Response
}
