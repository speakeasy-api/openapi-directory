/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum PutInventoryXAmzTargetEnum {
  AmazonSSMPutInventory = "AmazonSSM.PutInventory",
}

export class PutInventoryRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  putInventoryRequest: shared.PutInventoryRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: PutInventoryXAmzTargetEnum;
}

export class PutInventoryResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * CustomSchemaCountLimitExceededException
   */
  @SpeakeasyMetadata()
  customSchemaCountLimitExceededException?: any;

  /**
   * InternalServerError
   */
  @SpeakeasyMetadata()
  internalServerError?: any;

  /**
   * InvalidInstanceId
   */
  @SpeakeasyMetadata()
  invalidInstanceId?: any;

  /**
   * InvalidInventoryItemContextException
   */
  @SpeakeasyMetadata()
  invalidInventoryItemContextException?: any;

  /**
   * InvalidItemContentException
   */
  @SpeakeasyMetadata()
  invalidItemContentException?: any;

  /**
   * InvalidTypeNameException
   */
  @SpeakeasyMetadata()
  invalidTypeNameException?: any;

  /**
   * ItemContentMismatchException
   */
  @SpeakeasyMetadata()
  itemContentMismatchException?: any;

  /**
   * ItemSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  itemSizeLimitExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putInventoryResult?: shared.PutInventoryResult;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * SubTypeCountLimitExceededException
   */
  @SpeakeasyMetadata()
  subTypeCountLimitExceededException?: any;

  /**
   * TotalSizeLimitExceededException
   */
  @SpeakeasyMetadata()
  totalSizeLimitExceededException?: any;

  /**
   * UnsupportedInventoryItemContextException
   */
  @SpeakeasyMetadata()
  unsupportedInventoryItemContextException?: any;

  /**
   * UnsupportedInventorySchemaVersionException
   */
  @SpeakeasyMetadata()
  unsupportedInventorySchemaVersionException?: any;
}
