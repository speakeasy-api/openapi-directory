// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListDeploymentTargetsXAmzTargetEnum
type ListDeploymentTargetsXAmzTargetEnum string

const (
	ListDeploymentTargetsXAmzTargetEnumCodeDeploy20141006ListDeploymentTargets ListDeploymentTargetsXAmzTargetEnum = "CodeDeploy_20141006.ListDeploymentTargets"
)

func (e ListDeploymentTargetsXAmzTargetEnum) ToPointer() *ListDeploymentTargetsXAmzTargetEnum {
	return &e
}

func (e *ListDeploymentTargetsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeDeploy_20141006.ListDeploymentTargets":
		*e = ListDeploymentTargetsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDeploymentTargetsXAmzTargetEnum: %v", v)
	}
}

type ListDeploymentTargetsRequest struct {
	ListDeploymentTargetsInput shared.ListDeploymentTargetsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 ListDeploymentTargetsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListDeploymentTargetsResponse struct {
	ContentType string
	// DeploymentDoesNotExistException
	DeploymentDoesNotExistException interface{}
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// DeploymentNotStartedException
	DeploymentNotStartedException interface{}
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	// InvalidDeploymentInstanceTypeException
	InvalidDeploymentInstanceTypeException interface{}
	// InvalidInstanceStatusException
	InvalidInstanceStatusException interface{}
	// InvalidInstanceTypeException
	InvalidInstanceTypeException interface{}
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListDeploymentTargetsOutput *shared.ListDeploymentTargetsOutput
	StatusCode                  int
	RawResponse                 *http.Response
}
