/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class IssuesUpdateRequestBodyLabels2 extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "color" })
  color?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * The open or closed state of the issue.
 */
export enum IssuesUpdateRequestBodyStateEnum {
  Open = "open",
  Closed = "closed",
}

/**
 * The reason for the state change. Ignored unless `state` is changed.
 */
export enum IssuesUpdateRequestBodyStateReasonEnum {
  Completed = "completed",
  NotPlanned = "not_planned",
  Reopened = "reopened",
}

export class IssuesUpdateRequestBody extends SpeakeasyBase {
  /**
   * Username to assign to this issue. **This field is deprecated.**
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee" })
  assignee?: string;

  /**
   * Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignees" })
  assignees?: string[];

  /**
   * The contents of the issue.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "body" })
  body?: string;

  /**
   * Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: any[];

  @SpeakeasyMetadata()
  @Expose({ name: "milestone" })
  milestone?: any;

  /**
   * The open or closed state of the issue.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: IssuesUpdateRequestBodyStateEnum;

  /**
   * The reason for the state change. Ignored unless `state` is changed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state_reason" })
  stateReason?: IssuesUpdateRequestBodyStateReasonEnum;

  /**
   * The title of the issue.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: any;
}

export class IssuesUpdateRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: IssuesUpdateRequestBody;

  /**
   * The number that identifies the issue.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=issue_number",
  })
  issueNumber: number;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

/**
 * Service unavailable
 */
export class IssuesUpdate503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class IssuesUpdateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Moved permanently
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  issue?: shared.Issue;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  issuesUpdate503ApplicationJSONObject?: IssuesUpdate503ApplicationJSON;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
