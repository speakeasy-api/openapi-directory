// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type NotificationsGetUserEmailSettingsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum - The status code return by the API. It can be 400 or 404 or 409 or 500.
type NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum int64

const (
	NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnumFourHundred        NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum = 400
	NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnumFourHundredAndFour NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum = 404
	NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnumFourHundredAndNine NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum = 409
	NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnumFiveHundred        NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum = 500
)

func (e NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum) ToPointer() *NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum {
	return &e
}

func (e *NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 404:
		fallthrough
	case 409:
		fallthrough
	case 500:
		*e = NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum: %v", v)
	}
}

// NotificationsGetUserEmailSettingsDefaultApplicationJSON - Generic result for any alerting API operation
type NotificationsGetUserEmailSettingsDefaultApplicationJSON struct {
	// The status code return by the API. It can be 400 or 404 or 409 or 500.
	Code NotificationsGetUserEmailSettingsDefaultApplicationJSONCodeEnum `json:"code"`
	// The reason for the request failed
	Message *string `json:"message,omitempty"`
	// Unique request identifier for tracking
	RequestID string `json:"request_id"`
}

// NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum - Default frequency of event
type NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum string

const (
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnumDisabled           NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "Disabled"
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnumIndividual         NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "Individual"
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnumDaily              NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "Daily"
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnumDailyAndIndividual NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "DailyAndIndividual"
)

func (e NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum) ToPointer() *NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum {
	return &e
}

func (e *NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Individual":
		fallthrough
	case "Daily":
		fallthrough
	case "DailyAndIndividual":
		*e = NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum: %v", v)
	}
}

// NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum - Event Name
type NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum string

const (
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnumCrashNewCrashGroupCreated NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum = "crash_newCrashGroupCreated"
)

func (e NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum) ToPointer() *NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum {
	return &e
}

func (e *NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crash_newCrashGroupCreated":
		*e = NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum: %v", v)
	}
}

// NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum - Frequency of event
type NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum string

const (
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnumDisabled           NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum = "Disabled"
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnumIndividual         NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum = "Individual"
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnumDaily              NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum = "Daily"
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnumDailyAndIndividual NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum = "DailyAndIndividual"
	NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnumDefault            NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum = "Default"
)

func (e NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum) ToPointer() *NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum {
	return &e
}

func (e *NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Individual":
		fallthrough
	case "Daily":
		fallthrough
	case "DailyAndIndividual":
		fallthrough
	case "Default":
		*e = NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum: %v", v)
	}
}

// NotificationsGetUserEmailSettings200ApplicationJSONSettings - Event Setting
type NotificationsGetUserEmailSettings200ApplicationJSONSettings struct {
	// Default frequency of event
	DefaultValue *NotificationsGetUserEmailSettings200ApplicationJSONSettingsDefaultValueEnum `json:"default_value,omitempty"`
	// Event Name
	EventType NotificationsGetUserEmailSettings200ApplicationJSONSettingsEventTypeEnum `json:"event_type"`
	// Frequency of event
	Value NotificationsGetUserEmailSettings200ApplicationJSONSettingsValueEnum `json:"value"`
}

// NotificationsGetUserEmailSettings200ApplicationJSON - Generic result for any alerting API operation
type NotificationsGetUserEmailSettings200ApplicationJSON struct {
	// The ETag of the entity
	ETag *string `json:"eTag,omitempty"`
	// Allows to forcefully disable emails on app or user level
	Enabled bool `json:"enabled"`
	// Unique request identifier for tracking
	RequestID string `json:"request_id"`
	// The settings the user has for the app
	Settings []NotificationsGetUserEmailSettings200ApplicationJSONSettings `json:"settings"`
	// The unique id (UUID) of the user
	UserID *string `json:"userId,omitempty"`
}

type NotificationsGetUserEmailSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	NotificationsGetUserEmailSettings200ApplicationJSONObject *NotificationsGetUserEmailSettings200ApplicationJSON
	// Error code with reason
	NotificationsGetUserEmailSettingsDefaultApplicationJSONObject *NotificationsGetUserEmailSettingsDefaultApplicationJSON
}
