"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Any, Optional

class As2IncomingMessageEntityProcessingResultEnum(str, Enum):
    r"""Result of processing."""
    NOT_STARTED = 'not_started'
    UNABLE_TO_FIND_STATION = 'unable_to_find_station'
    UNABLE_TO_FIND_PARTNER = 'unable_to_find_partner'
    UNABLE_TO_VALIDATE_SIGNATURE = 'unable_to_validate_signature'
    DECRYPT_FAIL = 'decrypt_fail'
    FILE_SAVE_FAIL = 'file_save_fail'
    SUCCESS = 'success'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class As2IncomingMessageEntity:
    r"""List As2 Incoming Messages"""
    
    activity_log: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity_log'), 'exclude': lambda f: f is None }})
    r"""JSON Structure of the activity log."""  
    as2_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_from'), 'exclude': lambda f: f is None }})
    r"""AS2 FROM header of message"""  
    as2_partner_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_partner_id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Partner associated with this message."""  
    as2_station_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_station_id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Station associated with this message."""  
    as2_to: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as2_to'), 'exclude': lambda f: f is None }})
    r"""AS2 TO header of message"""  
    attachment_filename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachment_filename'), 'exclude': lambda f: f is None }})
    r"""Filename of the file being received."""  
    body_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_size'), 'exclude': lambda f: f is None }})
    r"""Encrypted Payload Body Size"""  
    content_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content_type'), 'exclude': lambda f: f is None }})
    r"""Content Type header of the incoming message."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Message creation date/time"""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""Date Header"""  
    encrypted_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encrypted_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the encrypted signed smime that is to sent as AS2 body"""  
    hex_recipient_serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hex_recipient_serial'), 'exclude': lambda f: f is None }})
    r"""Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial in hex format."""  
    http_headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_headers'), 'exclude': lambda f: f is None }})
    r"""HTTP Headers sent with this message."""  
    http_response_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_response_code'), 'exclude': lambda f: f is None }})
    r"""HTTP Response Code sent for this message"""  
    http_response_headers: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http_response_headers'), 'exclude': lambda f: f is None }})
    r"""HTTP Headers sent for this message."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the AS2 Partner."""  
    ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip'), 'exclude': lambda f: f is None }})
    r"""IP Address of the Sender"""  
    mdn_response_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mdn_response_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the http response body"""  
    message_decrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_decrypted'), 'exclude': lambda f: f is None }})
    r"""Message decrypted successfully?"""  
    message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id'), 'exclude': lambda f: f is None }})
    r"""AS2 Message Id"""  
    message_mdn_returned: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_mdn_returned'), 'exclude': lambda f: f is None }})
    r"""MDN returned?"""  
    message_processing_success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_processing_success'), 'exclude': lambda f: f is None }})
    r"""Message processed successfully?"""  
    message_received: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_received'), 'exclude': lambda f: f is None }})
    r"""Message body received?"""  
    message_signature_verified: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_signature_verified'), 'exclude': lambda f: f is None }})
    r"""Message signature verified?"""  
    mic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mic'), 'exclude': lambda f: f is None }})
    r"""AS2 Message Integrity Check"""  
    mic_algo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mic_algo'), 'exclude': lambda f: f is None }})
    r"""AS2 Message Integrity Check Algorithm Used"""  
    processing_result: Optional[As2IncomingMessageEntityProcessingResultEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_result'), 'exclude': lambda f: f is None }})
    r"""Result of processing."""  
    processing_result_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_result_description'), 'exclude': lambda f: f is None }})
    r"""Result of processing description."""  
    raw_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('raw_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the original file contents"""  
    recipient_issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_issuer'), 'exclude': lambda f: f is None }})
    r"""Incoming Message Recipient(the Client Cert used to encrypt this message)'s issuer"""  
    recipient_serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipient_serial'), 'exclude': lambda f: f is None }})
    r"""Incoming Message Recipient(the Client Cert used to encrypt this message)'s serial"""  
    smime_signed_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smime_signed_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the file contents as smime with signature"""  
    smime_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smime_uri'), 'exclude': lambda f: f is None }})
    r"""URL to download the file contents encoded as smime"""  
    subject: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subject'), 'exclude': lambda f: f is None }})
    r"""AS2 Subject Header"""  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uuid'), 'exclude': lambda f: f is None }})
    r"""UUID assigned to this message."""  
    