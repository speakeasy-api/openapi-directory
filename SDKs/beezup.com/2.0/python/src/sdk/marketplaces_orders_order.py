"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class MarketplacesOrdersOrder:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def change_order(self, request: operations.ChangeOrderRequest) -> operations.ChangeOrderResponse:
        r"""[DEPRECATED] Change your marketplace Order Information (accept, ship, etc.)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ChangeOrderRequest, base_url, '/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/{changeOrderType}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ChangeOrderRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ChangeOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 409:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out
        elif http_res.status_code == 412:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def clear_merchant_order_info(self, request: operations.ClearMerchantOrderInfoRequest) -> operations.ClearMerchantOrderInfoResponse:
        r"""[DEPRECATED] Clear an Order's merchant information"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ClearMerchantOrderInfoRequest, base_url, '/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/clearMerchantOrderInfo', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ClearMerchantOrderInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_order(self, request: operations.GetOrderRequest) -> operations.GetOrderResponse:
        r"""[DEPRECATED] DEPRECATED - Get full Order and Order Item(s) properties
        DEPRECATED - Use /orders/v3 instead
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrderRequest, base_url, '/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Order])
                res.order = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def get_order_history(self, request: operations.GetOrderHistoryRequest) -> operations.GetOrderHistoryResponse:
        r"""[DEPRECATED] Get an Order's harvest and change history"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrderHistoryRequest, base_url, '/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/history', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrderHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrderHistory])
                res.order_history = out
        elif http_res.status_code == 304:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def harvest_order(self, request: operations.HarvestOrderRequest) -> operations.HarvestOrderResponse:
        r"""[DEPRECATED] Send harvest request for a single Order"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.HarvestOrderRequest, base_url, '/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/harvest', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HarvestOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            res.headers = http_res.headers
            
        elif http_res.status_code == 409:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def head_order(self, request: operations.HeadOrderRequest) -> operations.HeadOrderResponse:
        r"""[DEPRECATED] DEPRECATED - Get the meta information about the order (ETag, Last-Modified)
        DEPRECATED - Use /orders/v3 instead
        The purpose of this operation is to reduce the bandwith usage by getting just the meta information about the order (ETag, Last-Modified) with the body.
        This could be useful
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.HeadOrderRequest, base_url, '/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('HEAD', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.HeadOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 304]:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def set_merchant_order_info(self, request: operations.SetMerchantOrderInfoRequest) -> operations.SetMerchantOrderInfoResponse:
        r"""[DEPRECATED] Set an Order's merchant information"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SetMerchantOrderInfoRequest, base_url, '/v2/user/marketplaces/orders/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderId}/setMerchantOrderInfo', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_merchant_order_info_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SetMerchantOrderInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    