/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The state of the CIDR block.
 */
export enum CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum {
  Associating = "associating",
  Associated = "associated",
  Disassociating = "disassociating",
  Disassociated = "disassociated",
  Failing = "failing",
  Failed = "failed",
}

/**
 * Information about the state of the CIDR block.
 */
export class CreateVpcResultVpcCidrBlockAssociationSetCidrBlockState extends SpeakeasyBase {
  @SpeakeasyMetadata()
  state?: CreateVpcResultVpcCidrBlockAssociationSetCidrBlockStateStateEnum;

  @SpeakeasyMetadata()
  statusMessage?: string;
}

/**
 * Describes an IPv4 CIDR block associated with a VPC.
 */
export class CreateVpcResultVpcCidrBlockAssociationSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  associationId?: string;

  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata()
  cidrBlockState?: CreateVpcResultVpcCidrBlockAssociationSetCidrBlockState;
}

/**
 * The allowed tenancy of instances launched into the VPC.
 */
export enum CreateVpcResultVpcInstanceTenancyEnum {
  Default = "default",
  Dedicated = "dedicated",
  Host = "host",
}

/**
 * The state of the CIDR block.
 */
export enum CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum {
  Associating = "associating",
  Associated = "associated",
  Disassociating = "disassociating",
  Disassociated = "disassociated",
  Failing = "failing",
  Failed = "failed",
}

/**
 * Information about the state of the CIDR block.
 */
export class CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockState extends SpeakeasyBase {
  @SpeakeasyMetadata()
  state?: CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockStateStateEnum;

  @SpeakeasyMetadata()
  statusMessage?: string;
}

/**
 * Describes an IPv6 CIDR block associated with a VPC.
 */
export class CreateVpcResultVpcIpv6CidrBlockAssociationSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  associationId?: string;

  @SpeakeasyMetadata()
  ipv6CidrBlock?: string;

  @SpeakeasyMetadata()
  ipv6CidrBlockState?: CreateVpcResultVpcIpv6CidrBlockAssociationSetIpv6CidrBlockState;

  @SpeakeasyMetadata()
  ipv6Pool?: string;

  @SpeakeasyMetadata()
  networkBorderGroup?: string;
}

/**
 * The current state of the VPC.
 */
export enum CreateVpcResultVpcStateEnum {
  Pending = "pending",
  Available = "available",
}

/**
 * Describes a tag.
 */
export class CreateVpcResultVpcTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the VPC.
 */
export class CreateVpcResultVpc extends SpeakeasyBase {
  @SpeakeasyMetadata()
  cidrBlock?: string;

  @SpeakeasyMetadata({ elemType: CreateVpcResultVpcCidrBlockAssociationSet })
  cidrBlockAssociationSet?: CreateVpcResultVpcCidrBlockAssociationSet[];

  @SpeakeasyMetadata()
  dhcpOptionsId?: string;

  @SpeakeasyMetadata()
  instanceTenancy?: CreateVpcResultVpcInstanceTenancyEnum;

  @SpeakeasyMetadata({
    elemType: CreateVpcResultVpcIpv6CidrBlockAssociationSet,
  })
  ipv6CidrBlockAssociationSet?: CreateVpcResultVpcIpv6CidrBlockAssociationSet[];

  @SpeakeasyMetadata()
  isDefault?: boolean;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  state?: CreateVpcResultVpcStateEnum;

  @SpeakeasyMetadata({ elemType: CreateVpcResultVpcTags })
  tags?: CreateVpcResultVpcTags[];

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Success
 */
export class CreateVpcResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  vpc?: CreateVpcResultVpc;
}
