// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TwipcSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type TwipcRequestBodyCertificateParameters struct {
	// PolicyNo
	PolicyNo string `json:"PolicyNo"`
	// Enter Value
	Val string `json:"Val"`
	// Verification Field
	Verification string `json:"Verification"`
}

// TwipcRequestBodyFormatEnum - The format of the certificate in response.
type TwipcRequestBodyFormatEnum string

const (
	TwipcRequestBodyFormatEnumPdf TwipcRequestBodyFormatEnum = "pdf"
)

func (e *TwipcRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = TwipcRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TwipcRequestBodyFormatEnum: %s", s)
	}
}

// TwipcRequestBody - Request format
type TwipcRequestBody struct {
	CertificateParameters *TwipcRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format TwipcRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type TwipcRequest struct {
	// Request format
	Request  *TwipcRequestBody `request:"mediaType=application/json"`
	Security TwipcSecurity
}

type Twipc504ApplicationJSONErrorEnum string

const (
	Twipc504ApplicationJSONErrorEnumGatewayTimeout Twipc504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Twipc504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Twipc504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc504ApplicationJSONErrorEnum: %s", s)
	}
}

type Twipc504ApplicationJSONErrorDescriptionEnum string

const (
	Twipc504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Twipc504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Twipc504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Twipc504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Twipc504ApplicationJSON - Gateway timeout
type Twipc504ApplicationJSON struct {
	Error            *Twipc504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Twipc504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Twipc503ApplicationJSONErrorEnum string

const (
	Twipc503ApplicationJSONErrorEnumServiceUnavailable Twipc503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Twipc503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Twipc503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc503ApplicationJSONErrorEnum: %s", s)
	}
}

type Twipc503ApplicationJSONErrorDescriptionEnum string

const (
	Twipc503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Twipc503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Twipc503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Twipc503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Twipc503ApplicationJSON - Service unavailable
type Twipc503ApplicationJSON struct {
	Error            *Twipc503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Twipc503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Twipc502ApplicationJSONErrorEnum string

const (
	Twipc502ApplicationJSONErrorEnumBadGatewy Twipc502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Twipc502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Twipc502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc502ApplicationJSONErrorEnum: %s", s)
	}
}

type Twipc502ApplicationJSONErrorDescriptionEnum string

const (
	Twipc502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Twipc502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Twipc502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Twipc502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Twipc502ApplicationJSON - Bad gateway
type Twipc502ApplicationJSON struct {
	Error            *Twipc502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Twipc502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Twipc500ApplicationJSONErrorEnum string

const (
	Twipc500ApplicationJSONErrorEnumInternalServerError Twipc500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Twipc500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Twipc500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc500ApplicationJSONErrorEnum: %s", s)
	}
}

type Twipc500ApplicationJSONErrorDescriptionEnum string

const (
	Twipc500ApplicationJSONErrorDescriptionEnumInternalServerError Twipc500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Twipc500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Twipc500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Twipc500ApplicationJSON - Internal server error
type Twipc500ApplicationJSON struct {
	Error            *Twipc500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Twipc500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Twipc404ApplicationJSONErrorEnum string

const (
	Twipc404ApplicationJSONErrorEnumRecordNotFound Twipc404ApplicationJSONErrorEnum = "record_not_found"
	Twipc404ApplicationJSONErrorEnumURLNotFound    Twipc404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Twipc404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Twipc404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc404ApplicationJSONErrorEnum: %s", s)
	}
}

type Twipc404ApplicationJSONErrorDescriptionEnum string

const (
	Twipc404ApplicationJSONErrorDescriptionEnumNoRecordFound               Twipc404ApplicationJSONErrorDescriptionEnum = "No record found"
	Twipc404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Twipc404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Twipc404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Twipc404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Twipc404ApplicationJSON - No record found
type Twipc404ApplicationJSON struct {
	Error            *Twipc404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Twipc404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Twipc401ApplicationJSONErrorEnum string

const (
	Twipc401ApplicationJSONErrorEnumInvalidAuthentication Twipc401ApplicationJSONErrorEnum = "invalid_authentication"
	Twipc401ApplicationJSONErrorEnumInvalidAuthorization  Twipc401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Twipc401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Twipc401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc401ApplicationJSONErrorEnum: %s", s)
	}
}

type Twipc401ApplicationJSONErrorDescriptionEnum string

const (
	Twipc401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Twipc401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Twipc401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Twipc401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Twipc401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Twipc401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Twipc401ApplicationJSON - Unauthorized access
type Twipc401ApplicationJSON struct {
	Error            *Twipc401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Twipc401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Twipc400ApplicationJSONErrorEnum string

const (
	Twipc400ApplicationJSONErrorEnumMissingParameter Twipc400ApplicationJSONErrorEnum = "missing_parameter"
	Twipc400ApplicationJSONErrorEnumInvalidParameter Twipc400ApplicationJSONErrorEnum = "invalid_parameter"
	Twipc400ApplicationJSONErrorEnumInvalidFormat    Twipc400ApplicationJSONErrorEnum = "invalid_format"
	Twipc400ApplicationJSONErrorEnumInvalidTxnid     Twipc400ApplicationJSONErrorEnum = "invalid_txnid"
	Twipc400ApplicationJSONErrorEnumInvalidConsentid Twipc400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Twipc400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Twipc400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc400ApplicationJSONErrorEnum: %s", s)
	}
}

type Twipc400ApplicationJSONErrorDescriptionEnum string

const (
	Twipc400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Twipc400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Twipc400ApplicationJSONErrorDescriptionEnumBadRequest                              Twipc400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Twipc400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Twipc400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Twipc400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Twipc400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Twipc400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Twipc400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Twipc400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Twipc400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Twipc400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Twipc400ApplicationJSON - Bad request
type Twipc400ApplicationJSON struct {
	Error            *Twipc400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Twipc400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type TwipcResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Twipc400ApplicationJSONObject *Twipc400ApplicationJSON
	// Unauthorized access
	Twipc401ApplicationJSONObject *Twipc401ApplicationJSON
	// No record found
	Twipc404ApplicationJSONObject *Twipc404ApplicationJSON
	// Internal server error
	Twipc500ApplicationJSONObject *Twipc500ApplicationJSON
	// Bad gateway
	Twipc502ApplicationJSONObject *Twipc502ApplicationJSON
	// Service unavailable
	Twipc503ApplicationJSONObject *Twipc503ApplicationJSON
	// Gateway timeout
	Twipc504ApplicationJSONObject *Twipc504ApplicationJSON
}
