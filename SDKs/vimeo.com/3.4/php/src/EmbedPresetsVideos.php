<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EmbedPresetsVideos 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add an embed preset to a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetResponse
     */
	public function addVideoEmbedPreset(
        \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/presets/{preset_id}', \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddVideoEmbedPresetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Add a new custom logo to a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoResponse
     */
	public function createVideoCustomLogo(
        \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/timelinethumbnails', \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateVideoCustomLogoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an embed preset from a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetResponse
     */
	public function deleteVideoEmbedPreset(
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/presets/{preset_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteVideoEmbedPresetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos that have been added to an embed preset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosResponse
     */
	public function getEmbedPresetVideos(
        \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user_id}/presets/{preset_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all the videos that have been added to an embed preset
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosAlt1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosAlt1Response
     */
	public function getEmbedPresetVideosAlt1(
        \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosAlt1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosAlt1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/me/presets/{preset_id}/videos', \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosAlt1Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosAlt1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEmbedPresetVideosAlt1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.video+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->videos = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Video>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a custom video logo
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoCustomLogoRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoCustomLogoResponse
     */
	public function getVideoCustomLogo(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoCustomLogoRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoCustomLogoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/timelinethumbnails/{thumbnail_id}', \OpenAPI\OpenAPI\Models\Operations\GetVideoCustomLogoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoCustomLogoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->picture = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Picture', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 403) {
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.vimeo.picture+json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check if an embed preset has been added to a video
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVideoEmbedPresetRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVideoEmbedPresetResponse
     */
	public function getVideoEmbedPreset(
        \OpenAPI\OpenAPI\Models\Operations\GetVideoEmbedPresetRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVideoEmbedPresetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/videos/{video_id}/presets/{preset_id}', \OpenAPI\OpenAPI\Models\Operations\GetVideoEmbedPresetRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVideoEmbedPresetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->legacyError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LegacyError', 'json');
            }
        }

        return $response;
    }
}