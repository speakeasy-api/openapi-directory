// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SymptomSymptomTypeEnum - Type of the Symptom.
type SymptomSymptomTypeEnum string

const (
	SymptomSymptomTypeEnumSymptomTypeUnspecified SymptomSymptomTypeEnum = "SYMPTOM_TYPE_UNSPECIFIED"
	SymptomSymptomTypeEnumLowMemory              SymptomSymptomTypeEnum = "LOW_MEMORY"
	SymptomSymptomTypeEnumOutOfMemory            SymptomSymptomTypeEnum = "OUT_OF_MEMORY"
	SymptomSymptomTypeEnumExecuteTimedOut        SymptomSymptomTypeEnum = "EXECUTE_TIMED_OUT"
	SymptomSymptomTypeEnumMeshBuildFail          SymptomSymptomTypeEnum = "MESH_BUILD_FAIL"
	SymptomSymptomTypeEnumHbmOutOfMemory         SymptomSymptomTypeEnum = "HBM_OUT_OF_MEMORY"
	SymptomSymptomTypeEnumProjectAbuse           SymptomSymptomTypeEnum = "PROJECT_ABUSE"
)

func (e SymptomSymptomTypeEnum) ToPointer() *SymptomSymptomTypeEnum {
	return &e
}

func (e *SymptomSymptomTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SYMPTOM_TYPE_UNSPECIFIED":
		fallthrough
	case "LOW_MEMORY":
		fallthrough
	case "OUT_OF_MEMORY":
		fallthrough
	case "EXECUTE_TIMED_OUT":
		fallthrough
	case "MESH_BUILD_FAIL":
		fallthrough
	case "HBM_OUT_OF_MEMORY":
		fallthrough
	case "PROJECT_ABUSE":
		*e = SymptomSymptomTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SymptomSymptomTypeEnum: %v", v)
	}
}

// Symptom - A Symptom instance.
type Symptom struct {
	// Timestamp when the Symptom is created.
	CreateTime *string `json:"createTime,omitempty"`
	// Detailed information of the current Symptom.
	Details *string `json:"details,omitempty"`
	// Type of the Symptom.
	SymptomType *SymptomSymptomTypeEnum `json:"symptomType,omitempty"`
	// A string used to uniquely distinguish a worker within a TPU node.
	WorkerID *string `json:"workerId,omitempty"`
}
