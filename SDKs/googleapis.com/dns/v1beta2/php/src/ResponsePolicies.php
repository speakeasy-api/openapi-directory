<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ResponsePolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new Response Policy
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateResponse
     */
	public function dnsResponsePoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/responsePolicies', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "responsePolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteResponse
     */
	public function dnsResponsePoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Fetches the representation of an existing Response Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetResponse
     */
	public function dnsResponsePoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enumerates all Response Policies associated with a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListResponse
     */
	public function dnsResponsePoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/responsePolicies', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePoliciesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePoliciesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Applies a partial update to an existing Response Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchResponse
     */
	public function dnsResponsePoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "responsePolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePoliciesPatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePoliciesPatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing Response Policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateResponse
     */
	public function dnsResponsePoliciesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}', \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "responsePolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DnsResponsePoliciesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->responsePoliciesUpdateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResponsePoliciesUpdateResponse', 'json');
            }
        }

        return $response;
    }
}