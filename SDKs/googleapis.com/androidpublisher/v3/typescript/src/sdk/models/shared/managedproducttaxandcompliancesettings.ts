/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { RegionalTaxRateInfo } from "./regionaltaxrateinfo";
import { Expose, Transform } from "class-transformer";

/**
 * Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
 */
export enum ManagedProductTaxAndComplianceSettingsEeaWithdrawalRightTypeEnum {
  WithdrawalRightTypeUnspecified = "WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED",
  WithdrawalRightDigitalContent = "WITHDRAWAL_RIGHT_DIGITAL_CONTENT",
  WithdrawalRightService = "WITHDRAWAL_RIGHT_SERVICE",
}

/**
 * Details about taxation and legal compliance for managed products.
 */
export class ManagedProductTaxAndComplianceSettings extends SpeakeasyBase {
  /**
   * Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eeaWithdrawalRightType" })
  eeaWithdrawalRightType?: ManagedProductTaxAndComplianceSettingsEeaWithdrawalRightTypeEnum;

  /**
   * A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's "CLDR".
   */
  @SpeakeasyMetadata({ elemType: RegionalTaxRateInfo })
  @Expose({ name: "taxRateInfoByRegionCode" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RegionalTaxRateInfo> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RegionalTaxRateInfo);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  taxRateInfoByRegionCode?: Record<string, RegionalTaxRateInfo>;
}
