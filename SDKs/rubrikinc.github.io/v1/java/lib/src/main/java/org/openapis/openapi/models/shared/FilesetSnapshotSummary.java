/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class FilesetSnapshotSummary {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archivalLocationIds")
    public String[] archivalLocationIds;

    public FilesetSnapshotSummary withArchivalLocationIds(String[] archivalLocationIds) {
        this.archivalLocationIds = archivalLocationIds;
        return this;
    }
    
    /**
     * Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudState")
    public Long cloudState;

    public FilesetSnapshotSummary withCloudState(Long cloudState) {
        this.cloudState = cloudState;
        return this;
    }
    
    /**
     * The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, AzureArchive (with Azure locations), Glacier, and GlacierDeepArchive (for AWS S3 locations). The value Cold has been deprecated in favor of AzureArchive, which is the recommended replacement value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudStorageTier")
    public SnapshotCloudStorageTierEnum cloudStorageTier;

    public FilesetSnapshotSummary withCloudStorageTier(SnapshotCloudStorageTierEnum cloudStorageTier) {
        this.cloudStorageTier = cloudStorageTier;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consistencyLevel")
    public String consistencyLevel;

    public FilesetSnapshotSummary withConsistencyLevel(String consistencyLevel) {
        this.consistencyLevel = consistencyLevel;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date")
    public OffsetDateTime date;

    public FilesetSnapshotSummary withDate(OffsetDateTime date) {
        this.date = date;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expirationDate")
    public OffsetDateTime expirationDate;

    public FilesetSnapshotSummary withExpirationDate(OffsetDateTime expirationDate) {
        this.expirationDate = expirationDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileCount")
    public Long fileCount;

    public FilesetSnapshotSummary withFileCount(Long fileCount) {
        this.fileCount = fileCount;
        return this;
    }
    
    @JsonProperty("filesetName")
    public String filesetName;

    public FilesetSnapshotSummary withFilesetName(String filesetName) {
        this.filesetName = filesetName;
        return this;
    }
    
    @JsonProperty("id")
    public String id;

    public FilesetSnapshotSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexState")
    public Long indexState;

    public FilesetSnapshotSummary withIndexState(Long indexState) {
        this.indexState = indexState;
        return this;
    }
    
    /**
     * A Boolean that indicates whether or not custom retention is applied to the snapshot.
     * 
     */
    @JsonProperty("isCustomRetentionApplied")
    public Boolean isCustomRetentionApplied;

    public FilesetSnapshotSummary withIsCustomRetentionApplied(Boolean isCustomRetentionApplied) {
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        return this;
    }
    
    @JsonProperty("isOnDemandSnapshot")
    public Boolean isOnDemandSnapshot;

    public FilesetSnapshotSummary withIsOnDemandSnapshot(Boolean isOnDemandSnapshot) {
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        return this;
    }
    
    /**
     * A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isPlacedOnLegalHold")
    public Boolean isPlacedOnLegalHold;

    public FilesetSnapshotSummary withIsPlacedOnLegalHold(Boolean isPlacedOnLegalHold) {
        this.isPlacedOnLegalHold = isPlacedOnLegalHold;
        return this;
    }
    
    /**
     * A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isRetainedByRetentionLockSla")
    public Boolean isRetainedByRetentionLockSla;

    public FilesetSnapshotSummary withIsRetainedByRetentionLockSla(Boolean isRetainedByRetentionLockSla) {
        this.isRetainedByRetentionLockSla = isRetainedByRetentionLockSla;
        return this;
    }
    
    /**
     * ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentSnapshotId")
    public String parentSnapshotId;

    public FilesetSnapshotSummary withParentSnapshotId(String parentSnapshotId) {
        this.parentSnapshotId = parentSnapshotId;
        return this;
    }
    
    @JsonProperty("replicationLocationIds")
    public String[] replicationLocationIds;

    public FilesetSnapshotSummary withReplicationLocationIds(String[] replicationLocationIds) {
        this.replicationLocationIds = replicationLocationIds;
        return this;
    }
    
    /**
     * (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
     */
    @JsonProperty("slaId")
    public String slaId;

    public FilesetSnapshotSummary withSlaId(String slaId) {
        this.slaId = slaId;
        return this;
    }
    
    /**
     * (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
     */
    @JsonProperty("slaName")
    public String slaName;

    public FilesetSnapshotSummary withSlaName(String slaName) {
        this.slaName = slaName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapdiffUsed")
    public Boolean snapdiffUsed;

    public FilesetSnapshotSummary withSnapdiffUsed(Boolean snapdiffUsed) {
        this.snapdiffUsed = snapdiffUsed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("snapshotRetentionInfo")
    public SnapshotRetentionInfo snapshotRetentionInfo;

    public FilesetSnapshotSummary withSnapshotRetentionInfo(SnapshotRetentionInfo snapshotRetentionInfo) {
        this.snapshotRetentionInfo = snapshotRetentionInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceObjectType")
    public String sourceObjectType;

    public FilesetSnapshotSummary withSourceObjectType(String sourceObjectType) {
        this.sourceObjectType = sourceObjectType;
        return this;
    }
    
    public FilesetSnapshotSummary(@JsonProperty("date") OffsetDateTime date, @JsonProperty("filesetName") String filesetName, @JsonProperty("id") String id, @JsonProperty("isCustomRetentionApplied") Boolean isCustomRetentionApplied, @JsonProperty("isOnDemandSnapshot") Boolean isOnDemandSnapshot, @JsonProperty("replicationLocationIds") String[] replicationLocationIds, @JsonProperty("slaId") String slaId, @JsonProperty("slaName") String slaName) {
        this.date = date;
        this.filesetName = filesetName;
        this.id = id;
        this.isCustomRetentionApplied = isCustomRetentionApplied;
        this.isOnDemandSnapshot = isOnDemandSnapshot;
        this.replicationLocationIds = replicationLocationIds;
        this.slaId = slaId;
        this.slaName = slaName;
  }
}
