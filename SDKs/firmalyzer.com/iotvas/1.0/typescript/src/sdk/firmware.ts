/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Firmware {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get default accounts and password hashes of a firmware
   */
  getAccounts(
    req: operations.GetAccountsRequest,
    security: operations.GetAccountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAccountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firmware/{firmware_hash}/accounts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAccountsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAccountsResponse =
        new operations.GetAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.defaultAccounts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.defaultAccounts = utils.objectToClass(
              httpRes?.data,
              shared.DefaultAccount,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get default OS configuration issues of a device firmware
   */
  getConfigIssues(
    req: operations.GetConfigIssuesRequest,
    security: operations.GetConfigIssuesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetConfigIssuesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetConfigIssuesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firmware/{firmware_hash}/config-issues",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetConfigIssuesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetConfigIssuesResponse =
        new operations.GetConfigIssuesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.configIssues = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.configIssues = utils.objectToClass(
              httpRes?.data,
              shared.ConfigIssue,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get expired digital certificates embedded in a device firmware
   */
  getExpiredCerts(
    req: operations.GetExpiredCertsRequest,
    security: operations.GetExpiredCertsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetExpiredCertsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetExpiredCertsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firmware/{firmware_hash}/expired-certs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetExpiredCertsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetExpiredCertsResponse =
        new operations.GetExpiredCertsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.expiredCerts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.expiredCerts = utils.objectToClass(
              httpRes?.data,
              shared.ExpiredCert,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get private crypto keys embedded in a device firmware
   */
  getPrivateKeys(
    req: operations.GetPrivateKeysRequest,
    security: operations.GetPrivateKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPrivateKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPrivateKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firmware/{firmware_hash}/private-keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetPrivateKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPrivateKeysResponse =
        new operations.GetPrivateKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cryptoKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.cryptoKeys = utils.objectToClass(
              httpRes?.data,
              shared.CryptoKey,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get iot device firmware risk analysis
   */
  getRisk(
    req: operations.GetRiskRequest,
    security: operations.GetRiskSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetRiskResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetRiskRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firmware/{firmware_hash}/risk",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetRiskSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetRiskResponse = new operations.GetRiskResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.firmwareRisk = utils.objectToClass(
              httpRes?.data,
              shared.FirmwareRisk
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get certificates with weak fingerprinting algorithms that are mebedded in a device firmware
   */
  getWeakCerts(
    req: operations.GetWeakCertsRequest,
    security: operations.GetWeakCertsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWeakCertsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWeakCertsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firmware/{firmware_hash}/weak-certs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWeakCertsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWeakCertsResponse =
        new operations.GetWeakCertsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.weakCerts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.weakCerts = utils.objectToClass(
              httpRes?.data,
              shared.WeakCert,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get weak crypto keys with short length
   */
  getWeakKeys(
    req: operations.GetWeakKeysRequest,
    security: operations.GetWeakKeysSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWeakKeysResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWeakKeysRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/firmware/{firmware_hash}/weak-keys",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWeakKeysSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWeakKeysResponse =
        new operations.GetWeakKeysResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.cryptoKeys = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.cryptoKeys = utils.objectToClass(
              httpRes?.data,
              shared.CryptoKey,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }
}
