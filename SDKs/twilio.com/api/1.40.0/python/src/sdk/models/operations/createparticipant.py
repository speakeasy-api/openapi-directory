"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_v2010_account_conference_participant as shared_api_v2010_account_conference_participant
from enum import Enum
from typing import Optional

CREATE_PARTICIPANT_SERVERS = [
	"https://api.twilio.com",
]


@dataclasses.dataclass
class CreateParticipantSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'

class CreateParticipantCreateParticipantRequestWaitMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateParticipantCreateParticipantRequest:
    
    from_: str = dataclasses.field(metadata={'form': { 'field_name': 'From' }})
    r"""The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint."""  
    to: str = dataclasses.field(metadata={'form': { 'field_name': 'To' }})
    r"""The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified."""  
    amd_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AmdStatusCallback' }})
    r"""The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax."""  
    amd_status_callback_method: Optional[CreateParticipantCreateParticipantRequestAmdStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'AmdStatusCallbackMethod' }})
    r"""The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`."""  
    beep: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Beep' }})
    r"""Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`."""  
    byoc: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Byoc' }})
    r"""The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)"""  
    caller_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallerId' }})
    r"""The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint."""  
    call_reason: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallReason' }})
    r"""The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)"""  
    call_sid_to_coach: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallSidToCoach' }})
    r"""The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`."""  
    coaching: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Coaching' }})
    r"""Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined."""  
    conference_record: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceRecord' }})
    r"""Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`."""  
    conference_recording_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceRecordingStatusCallback' }})
    r"""The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available."""  
    conference_recording_status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceRecordingStatusCallbackEvent' }})
    r"""The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`"""  
    conference_recording_status_callback_method: Optional[CreateParticipantCreateParticipantRequestConferenceRecordingStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceRecordingStatusCallbackMethod' }})
    r"""The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""  
    conference_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceStatusCallback' }})
    r"""The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored."""  
    conference_status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceStatusCallbackEvent' }})
    r"""The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`."""  
    conference_status_callback_method: Optional[CreateParticipantCreateParticipantRequestConferenceStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceStatusCallbackMethod' }})
    r"""The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""  
    conference_trim: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'ConferenceTrim' }})
    r"""Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`."""  
    early_media: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EarlyMedia' }})
    r"""Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`."""  
    end_conference_on_exit: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'EndConferenceOnExit' }})
    r"""Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`."""  
    jitter_buffer_size: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'JitterBufferSize' }})
    r"""Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`."""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Label' }})
    r"""A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant."""  
    machine_detection: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetection' }})
    r"""Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection)."""  
    machine_detection_silence_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionSilenceTimeout' }})
    r"""The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000."""  
    machine_detection_speech_end_threshold: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionSpeechEndThreshold' }})
    r"""The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200."""  
    machine_detection_speech_threshold: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionSpeechThreshold' }})
    r"""The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400."""  
    machine_detection_timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MachineDetectionTimeout' }})
    r"""The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds."""  
    max_participants: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'MaxParticipants' }})
    r"""The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`."""  
    muted: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Muted' }})
    r"""Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`."""  
    record: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Record' }})
    r"""Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`."""  
    recording_channels: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingChannels' }})
    r"""The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`."""  
    recording_status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallback' }})
    r"""The URL that we should call using the `recording_status_callback_method` when the recording status changes."""  
    recording_status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallbackEvent' }})
    r"""The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`."""  
    recording_status_callback_method: Optional[CreateParticipantCreateParticipantRequestRecordingStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingStatusCallbackMethod' }})
    r"""The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`."""  
    recording_track: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'RecordingTrack' }})
    r"""The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio."""  
    region: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Region' }})
    r"""The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`."""  
    sip_auth_password: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SipAuthPassword' }})
    r"""The SIP password for authentication."""  
    sip_auth_username: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'SipAuthUsername' }})
    r"""The SIP username used for authentication."""  
    start_conference_on_enter: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StartConferenceOnEnter' }})
    r"""Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference."""  
    status_callback: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallback' }})
    r"""The URL we should call using the `status_callback_method` to send status information to your application."""  
    status_callback_event: Optional[list[str]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackEvent' }})
    r"""The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`."""  
    status_callback_method: Optional[CreateParticipantCreateParticipantRequestStatusCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'StatusCallbackMethod' }})
    r"""The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`."""  
    time_limit: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'TimeLimit' }})
    r"""The maximum duration of the call in seconds. Constraints depend on account and configuration."""  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'Timeout' }})
    r"""The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds."""  
    wait_method: Optional[CreateParticipantCreateParticipantRequestWaitMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WaitMethod' }})
    r"""The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file."""  
    wait_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'WaitUrl' }})
    r"""The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic)."""  
    

@dataclasses.dataclass
class CreateParticipantRequest:
    
    account_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'AccountSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource."""  
    conference_sid: str = dataclasses.field(metadata={'path_param': { 'field_name': 'ConferenceSid', 'style': 'simple', 'explode': False }})
    r"""The SID of the participant's conference."""  
    request_body: Optional[CreateParticipantCreateParticipantRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class CreateParticipantResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_v2010_account_conference_participant: Optional[shared_api_v2010_account_conference_participant.APIV2010AccountConferenceParticipant] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    