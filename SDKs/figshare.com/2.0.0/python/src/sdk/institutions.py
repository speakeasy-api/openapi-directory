"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Institutions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def account_institution_curation(self, request: operations.AccountInstitutionCurationRequest, security: operations.AccountInstitutionCurationSecurity) -> operations.AccountInstitutionCurationResponse:
        r"""Institution Curation Review
        Retrieve a certain curation review by its ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountInstitutionCurationRequest, base_url, '/account/institution/review/{curation_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountInstitutionCurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CurationDetail])
                res.curation_detail = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def account_institution_curation_comments(self, request: operations.AccountInstitutionCurationCommentsRequest, security: operations.AccountInstitutionCurationCommentsSecurity) -> operations.AccountInstitutionCurationCommentsResponse:
        r"""Institution Curation Review Comments
        Retrieve a certain curation review's comments.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AccountInstitutionCurationCommentsRequest, base_url, '/account/institution/review/{curation_id}/comments', request)
        
        query_params = utils.get_query_params(operations.AccountInstitutionCurationCommentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountInstitutionCurationCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CurationComment])
                res.curation_comment = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def account_institution_curations(self, request: operations.AccountInstitutionCurationsRequest, security: operations.AccountInstitutionCurationsSecurity) -> operations.AccountInstitutionCurationsResponse:
        r"""Institution Curation Reviews
        Retrieve a list of curation reviews for this institution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/reviews'
        
        query_params = utils.get_query_params(operations.AccountInstitutionCurationsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AccountInstitutionCurationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Curation])
                res.curation = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def custom_fields_list(self, request: operations.CustomFieldsListRequest, security: operations.CustomFieldsListSecurity) -> operations.CustomFieldsListResponse:
        r"""Private account institution group custom fields
        Returns the custom fields in the group the user belongs to, or the ones in the group specified, if the user has access.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/custom_fields'
        
        query_params = utils.get_query_params(operations.CustomFieldsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomFieldsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ShortCustomField]])
                res.short_custom_fields = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def custom_fields_upload(self, request: operations.CustomFieldsUploadRequest, security: operations.CustomFieldsUploadSecurity) -> operations.CustomFieldsUploadResponse:
        r"""Custom fields values files upload
        Uploads a CSV containing values for a specific custom field of type <b>dropdown_large_list</b>. More details in the <a href=\"#custom_fields\">Custom Fields section</a>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CustomFieldsUploadRequest, base_url, '/account/institution/custom_fields/{custom_field_id}/items/upload', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CustomFieldsUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.custom_fields_upload_200_application_json_object = out
        elif http_res.status_code in [400, 409, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def institution_articles(self, request: operations.InstitutionArticlesRequest) -> operations.InstitutionArticlesResponse:
        r"""Public Licenses
        Returns a list of articles belonging to the institution
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InstitutionArticlesRequest, base_url, '/institutions/{institution_string_id}/articles/filter-by', request)
        
        query_params = utils.get_query_params(operations.InstitutionArticlesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InstitutionArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Article]])
                res.articles = out
        elif http_res.status_code == 500:
            pass

        return res

    def institution_hrfeed_upload(self, request: operations.InstitutionHrfeedUploadRequestBody, security: operations.InstitutionHrfeedUploadSecurity) -> operations.InstitutionHrfeedUploadResponse:
        r"""Private Institution HRfeed Upload
        More info in the <a href=\"#hr_feed\">HR Feed section</a>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/institution/hrfeed/upload'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InstitutionHrfeedUploadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponseMessage])
                res.response_message = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def post_account_institution_review_curation_id_comments(self, request: operations.PostAccountInstitutionReviewCurationIDCommentsRequest, security: operations.PostAccountInstitutionReviewCurationIDCommentsSecurity) -> operations.PostAccountInstitutionReviewCurationIDCommentsResponse:
        r"""POST Institution Curation Review Comment
        Add a new comment to the review.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostAccountInstitutionReviewCurationIDCommentsRequest, base_url, '/account/institution/review/{curation_id}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "curation_comment_create", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAccountInstitutionReviewCurationIDCommentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_account_institution_user(self, request: operations.PrivateAccountInstitutionUserRequest, security: operations.PrivateAccountInstitutionUserSecurity) -> operations.PrivateAccountInstitutionUserResponse:
        r"""Private Account Institution User
        Retrieve institution user information using the account_id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateAccountInstitutionUserRequest, base_url, '/account/institution/users/{account_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateAccountInstitutionUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.User])
                res.user = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_categories_list(self) -> operations.PrivateCategoriesListResponse:
        r"""Private Account Categories
        List institution categories (including parent Categories)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/categories'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateCategoriesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Category]])
                res.categories = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_group_embargo_options_details(self, request: operations.PrivateGroupEmbargoOptionsDetailsRequest, security: operations.PrivateGroupEmbargoOptionsDetailsSecurity) -> operations.PrivateGroupEmbargoOptionsDetailsResponse:
        r"""Private Account Institution Group Embargo Options
        Account institution group embargo options details
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateGroupEmbargoOptionsDetailsRequest, base_url, '/account/institution/groups/{group_id}/embargo_options', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateGroupEmbargoOptionsDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GroupEmbargoOptions]])
                res.group_embargo_options = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_account_group_role_delete(self, request: operations.PrivateInstitutionAccountGroupRoleDeleteRequest, security: operations.PrivateInstitutionAccountGroupRoleDeleteSecurity) -> operations.PrivateInstitutionAccountGroupRoleDeleteResponse:
        r"""Delete Institution Account Group Role
        Delete Institution Account Group Role
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateInstitutionAccountGroupRoleDeleteRequest, base_url, '/account/institution/roles/{account_id}/{group_id}/{role_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionAccountGroupRoleDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_account_group_roles(self, request: operations.PrivateInstitutionAccountGroupRolesRequest, security: operations.PrivateInstitutionAccountGroupRolesSecurity) -> operations.PrivateInstitutionAccountGroupRolesResponse:
        r"""List Institution Account Group Roles
        List Institution Account Group Roles
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateInstitutionAccountGroupRolesRequest, base_url, '/account/institution/roles/{account_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionAccountGroupRolesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.account_group_roles = out
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_account_group_roles_create(self, request: operations.PrivateInstitutionAccountGroupRolesCreateRequest, security: operations.PrivateInstitutionAccountGroupRolesCreateSecurity) -> operations.PrivateInstitutionAccountGroupRolesCreateResponse:
        r"""Add Institution Account Group Roles
        Add Institution Account Group Roles
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateInstitutionAccountGroupRolesCreateRequest, base_url, '/account/institution/roles/{account_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionAccountGroupRolesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_accounts_create(self, request: shared.AccountCreate, security: operations.PrivateInstitutionAccountsCreateSecurity) -> operations.PrivateInstitutionAccountsCreateResponse:
        r"""Create new Institution Account
        Create a new Account by sending account information
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/accounts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionAccountsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [201, 400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_accounts_list(self, request: operations.PrivateInstitutionAccountsListRequest, security: operations.PrivateInstitutionAccountsListSecurity) -> operations.PrivateInstitutionAccountsListResponse:
        r"""Private Account Institution Accounts
        Returns the accounts for which the account has administrative privileges (assigned and inherited).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/accounts'
        
        query_params = utils.get_query_params(operations.PrivateInstitutionAccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ShortAccount]])
                res.short_accounts = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_accounts_search(self, request: shared.InstitutionAccountsSearch, security: operations.PrivateInstitutionAccountsSearchSecurity) -> operations.PrivateInstitutionAccountsSearchResponse:
        r"""Private Account Institution Accounts Search
        Returns the accounts for which the account has administrative privileges (assigned and inherited).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/accounts/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionAccountsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ShortAccount]])
                res.short_accounts = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_accounts_update(self, request: operations.PrivateInstitutionAccountsUpdateRequest, security: operations.PrivateInstitutionAccountsUpdateSecurity) -> operations.PrivateInstitutionAccountsUpdateResponse:
        r"""Update Institution Account
        Update Institution Account
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PrivateInstitutionAccountsUpdateRequest, base_url, '/account/institution/accounts/{account_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "account_update", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionAccountsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 205:
            res.headers = http_res.headers
            
        elif http_res.status_code in [400, 404, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_articles(self, request: operations.PrivateInstitutionArticlesRequest, security: operations.PrivateInstitutionArticlesSecurity) -> operations.PrivateInstitutionArticlesResponse:
        r"""Private Institution Articles
        Get Articles from own institution. User must be administrator of the institution
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/articles'
        
        query_params = utils.get_query_params(operations.PrivateInstitutionArticlesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Article]])
                res.articles = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_details(self) -> operations.PrivateInstitutionDetailsResponse:
        r"""Private Account Institutions
        Account institution details
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Institution])
                res.institution = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_embargo_options_details(self) -> operations.PrivateInstitutionEmbargoOptionsDetailsResponse:
        r"""Private Account Institution embargo options
        Account institution embargo options details
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/embargo_options'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionEmbargoOptionsDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.GroupEmbargoOptions]])
                res.group_embargo_options = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_groups_list(self) -> operations.PrivateInstitutionGroupsListResponse:
        r"""Private Account Institution Groups
        Returns the groups for which the account has administrative privileges (assigned and inherited).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/groups'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionGroupsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Group]])
                res.groups = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    def private_institution_roles_list(self) -> operations.PrivateInstitutionRolesListResponse:
        r"""Private Account Institution Roles
        Returns the roles available for groups and the institution group.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/account/institution/roles'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PrivateInstitutionRolesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Role]])
                res.roles = out
        elif http_res.status_code in [400, 500]:
            pass
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorMessage])
                res.error_message = out

        return res

    