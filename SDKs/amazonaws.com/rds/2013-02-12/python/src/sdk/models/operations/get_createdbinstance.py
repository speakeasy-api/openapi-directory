"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETCreateDBInstanceActionEnum(str, Enum):
    CREATE_DB_INSTANCE = 'CreateDBInstance'

class GETCreateDBInstanceVersionEnum(str, Enum):
    TWO_THOUSAND_AND_THIRTEEN_02_12 = '2013-02-12'


@dataclasses.dataclass
class GETCreateDBInstanceRequest:
    
    action: GETCreateDBInstanceActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    allocated_storage: int = dataclasses.field(metadata={'query_param': { 'field_name': 'AllocatedStorage', 'style': 'form', 'explode': True }})  
    db_instance_class: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DBInstanceClass', 'style': 'form', 'explode': True }})  
    db_instance_identifier: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DBInstanceIdentifier', 'style': 'form', 'explode': True }})  
    engine: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Engine', 'style': 'form', 'explode': True }})  
    master_username: str = dataclasses.field(metadata={'query_param': { 'field_name': 'MasterUsername', 'style': 'form', 'explode': True }})  
    master_user_password: str = dataclasses.field(metadata={'query_param': { 'field_name': 'MasterUserPassword', 'style': 'form', 'explode': True }})  
    version: GETCreateDBInstanceVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    auto_minor_version_upgrade: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AutoMinorVersionUpgrade', 'style': 'form', 'explode': True }})  
    availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AvailabilityZone', 'style': 'form', 'explode': True }})  
    backup_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'BackupRetentionPeriod', 'style': 'form', 'explode': True }})  
    character_set_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CharacterSetName', 'style': 'form', 'explode': True }})  
    db_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DBName', 'style': 'form', 'explode': True }})  
    db_parameter_group_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DBParameterGroupName', 'style': 'form', 'explode': True }})  
    db_security_groups: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DBSecurityGroups', 'style': 'form', 'explode': True }})  
    db_subnet_group_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DBSubnetGroupName', 'style': 'form', 'explode': True }})  
    engine_version: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EngineVersion', 'style': 'form', 'explode': True }})  
    iops: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Iops', 'style': 'form', 'explode': True }})  
    license_model: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LicenseModel', 'style': 'form', 'explode': True }})  
    multi_az: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MultiAZ', 'style': 'form', 'explode': True }})  
    option_group_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'OptionGroupName', 'style': 'form', 'explode': True }})  
    port: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Port', 'style': 'form', 'explode': True }})  
    preferred_backup_window: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PreferredBackupWindow', 'style': 'form', 'explode': True }})  
    preferred_maintenance_window: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PreferredMaintenanceWindow', 'style': 'form', 'explode': True }})  
    publicly_accessible: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PubliclyAccessible', 'style': 'form', 'explode': True }})  
    vpc_security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VpcSecurityGroupIds', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETCreateDBInstanceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    