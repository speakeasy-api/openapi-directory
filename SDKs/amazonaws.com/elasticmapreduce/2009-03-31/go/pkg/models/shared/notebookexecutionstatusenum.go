// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NotebookExecutionStatusEnum string

const (
	NotebookExecutionStatusEnumStartPending NotebookExecutionStatusEnum = "START_PENDING"
	NotebookExecutionStatusEnumStarting     NotebookExecutionStatusEnum = "STARTING"
	NotebookExecutionStatusEnumRunning      NotebookExecutionStatusEnum = "RUNNING"
	NotebookExecutionStatusEnumFinishing    NotebookExecutionStatusEnum = "FINISHING"
	NotebookExecutionStatusEnumFinished     NotebookExecutionStatusEnum = "FINISHED"
	NotebookExecutionStatusEnumFailing      NotebookExecutionStatusEnum = "FAILING"
	NotebookExecutionStatusEnumFailed       NotebookExecutionStatusEnum = "FAILED"
	NotebookExecutionStatusEnumStopPending  NotebookExecutionStatusEnum = "STOP_PENDING"
	NotebookExecutionStatusEnumStopping     NotebookExecutionStatusEnum = "STOPPING"
	NotebookExecutionStatusEnumStopped      NotebookExecutionStatusEnum = "STOPPED"
)

func (e NotebookExecutionStatusEnum) ToPointer() *NotebookExecutionStatusEnum {
	return &e
}

func (e *NotebookExecutionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "START_PENDING":
		fallthrough
	case "STARTING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "FINISHING":
		fallthrough
	case "FINISHED":
		fallthrough
	case "FAILING":
		fallthrough
	case "FAILED":
		fallthrough
	case "STOP_PENDING":
		fallthrough
	case "STOPPING":
		fallthrough
	case "STOPPED":
		*e = NotebookExecutionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotebookExecutionStatusEnum: %v", v)
	}
}
