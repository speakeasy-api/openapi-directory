"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETDisableAwsNetworkPerformanceMetricSubscriptionActionEnum(str, Enum):
    DISABLE_AWS_NETWORK_PERFORMANCE_METRIC_SUBSCRIPTION = 'DisableAwsNetworkPerformanceMetricSubscription'

class GETDisableAwsNetworkPerformanceMetricSubscriptionMetricEnum(str, Enum):
    r"""The metric used for the disabled subscription."""
    AGGREGATE_LATENCY = 'aggregate-latency'

class GETDisableAwsNetworkPerformanceMetricSubscriptionStatisticEnum(str, Enum):
    r"""The statistic used for the disabled subscription."""
    P50 = 'p50'

class GETDisableAwsNetworkPerformanceMetricSubscriptionVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETDisableAwsNetworkPerformanceMetricSubscriptionRequest:
    
    action: GETDisableAwsNetworkPerformanceMetricSubscriptionActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    version: GETDisableAwsNetworkPerformanceMetricSubscriptionVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    destination: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Destination', 'style': 'form', 'explode': True }})
    r"""The target Region or Availability Zone that the metric subscription is disabled for. For example, <code>eu-north-1</code>."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    metric: Optional[GETDisableAwsNetworkPerformanceMetricSubscriptionMetricEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Metric', 'style': 'form', 'explode': True }})
    r"""The metric used for the disabled subscription."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Source', 'style': 'form', 'explode': True }})
    r"""The source Region or Availability Zone that the metric subscription is disabled for. For example, <code>us-east-1</code>."""  
    statistic: Optional[GETDisableAwsNetworkPerformanceMetricSubscriptionStatisticEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Statistic', 'style': 'form', 'explode': True }})
    r"""The statistic used for the disabled subscription."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDisableAwsNetworkPerformanceMetricSubscriptionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    