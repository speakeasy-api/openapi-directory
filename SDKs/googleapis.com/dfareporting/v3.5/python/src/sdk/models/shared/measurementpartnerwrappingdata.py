"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MeasurementPartnerWrappingDataLinkStatusEnum(str, Enum):
    r"""Placement wrapping status."""
    MEASUREMENT_PARTNER_UNLINKED = 'MEASUREMENT_PARTNER_UNLINKED'
    MEASUREMENT_PARTNER_LINKED = 'MEASUREMENT_PARTNER_LINKED'
    MEASUREMENT_PARTNER_LINK_PENDING = 'MEASUREMENT_PARTNER_LINK_PENDING'
    MEASUREMENT_PARTNER_LINK_FAILURE = 'MEASUREMENT_PARTNER_LINK_FAILURE'
    MEASUREMENT_PARTNER_LINK_OPT_OUT = 'MEASUREMENT_PARTNER_LINK_OPT_OUT'
    MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING = 'MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING'
    MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING = 'MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING'
    MEASUREMENT_PARTNER_MODE_CHANGE_PENDING = 'MEASUREMENT_PARTNER_MODE_CHANGE_PENDING'

class MeasurementPartnerWrappingDataMeasurementPartnerEnum(str, Enum):
    r"""Measurement partner used for wrapping the placement."""
    NONE = 'NONE'
    INTEGRAL_AD_SCIENCE = 'INTEGRAL_AD_SCIENCE'
    DOUBLE_VERIFY = 'DOUBLE_VERIFY'

class MeasurementPartnerWrappingDataTagWrappingModeEnum(str, Enum):
    r"""Measurement mode for the wrapped placement."""
    NONE = 'NONE'
    BLOCKING = 'BLOCKING'
    MONITORING = 'MONITORING'
    MONITORING_ONLY = 'MONITORING_ONLY'
    VIDEO_PIXEL_MONITORING = 'VIDEO_PIXEL_MONITORING'
    TRACKING = 'TRACKING'
    VPAID_MONITORING = 'VPAID_MONITORING'
    VPAID_BLOCKING = 'VPAID_BLOCKING'
    NON_VPAID_MONITORING = 'NON_VPAID_MONITORING'
    VPAID_ONLY_MONITORING = 'VPAID_ONLY_MONITORING'
    VPAID_ONLY_BLOCKING = 'VPAID_ONLY_BLOCKING'
    VPAID_ONLY_FILTERING = 'VPAID_ONLY_FILTERING'
    VPAID_FILTERING = 'VPAID_FILTERING'
    NON_VPAID_FILTERING = 'NON_VPAID_FILTERING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MeasurementPartnerWrappingData:
    r"""Placement tag wrapping"""
    
    link_status: Optional[MeasurementPartnerWrappingDataLinkStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkStatus'), 'exclude': lambda f: f is None }})
    r"""Placement wrapping status."""  
    measurement_partner: Optional[MeasurementPartnerWrappingDataMeasurementPartnerEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementPartner'), 'exclude': lambda f: f is None }})
    r"""Measurement partner used for wrapping the placement."""  
    tag_wrapping_mode: Optional[MeasurementPartnerWrappingDataTagWrappingModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagWrappingMode'), 'exclude': lambda f: f is None }})
    r"""Measurement mode for the wrapped placement."""  
    wrapped_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrappedTag'), 'exclude': lambda f: f is None }})
    r"""Tag provided by the measurement partner during wrapping."""  
    