"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bufferinghints as shared_bufferinghints
from ..shared import cloudwatchloggingoptions as shared_cloudwatchloggingoptions
from ..shared import compressionformat_enum as shared_compressionformat_enum
from ..shared import encryptionconfiguration as shared_encryptionconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class S3DestinationDescription:
    r"""Describes a destination in Amazon S3."""
    
    bucket_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BucketARN') }})  
    buffering_hints: shared_bufferinghints.BufferingHints = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BufferingHints') }})  
    compression_format: shared_compressionformat_enum.CompressionFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompressionFormat') }})  
    encryption_configuration: shared_encryptionconfiguration.EncryptionConfiguration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EncryptionConfiguration') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleARN') }})  
    cloud_watch_logging_options: Optional[shared_cloudwatchloggingoptions.CloudWatchLoggingOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLoggingOptions'), 'exclude': lambda f: f is None }})  
    error_output_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ErrorOutputPrefix'), 'exclude': lambda f: f is None }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Prefix'), 'exclude': lambda f: f is None }})  
    