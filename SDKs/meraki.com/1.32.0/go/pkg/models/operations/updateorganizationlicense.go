// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateOrganizationLicenseRequestBody struct {
	// The serial number of the device to assign this license to. Set this to  null to unassign the license. If a different license is already active on the device, this parameter will control queueing/dequeuing this license.
	DeviceSerial *string `json:"deviceSerial,omitempty"`
}

type UpdateOrganizationLicenseRequest struct {
	RequestBody    *UpdateOrganizationLicenseRequestBody `request:"mediaType=application/json"`
	LicenseID      string                                `pathParam:"style=simple,explode=false,name=licenseId"`
	OrganizationID string                                `pathParam:"style=simple,explode=false,name=organizationId"`
}

type UpdateOrganizationLicense200ApplicationJSONPermanentlyQueuedLicenses struct {
	// The duration of the individual license
	DurationInDays *int64 `json:"durationInDays,omitempty"`
	// Permanently queued license ID
	ID *string `json:"id,omitempty"`
	// License key
	LicenseKey *string `json:"licenseKey,omitempty"`
	// License type
	LicenseType *string `json:"licenseType,omitempty"`
	// Order number
	OrderNumber *string `json:"orderNumber,omitempty"`
}

// UpdateOrganizationLicense200ApplicationJSONStateEnum - The state of the license. All queued licenses have a status of `recentlyQueued`.
type UpdateOrganizationLicense200ApplicationJSONStateEnum string

const (
	UpdateOrganizationLicense200ApplicationJSONStateEnumActive         UpdateOrganizationLicense200ApplicationJSONStateEnum = "active"
	UpdateOrganizationLicense200ApplicationJSONStateEnumExpired        UpdateOrganizationLicense200ApplicationJSONStateEnum = "expired"
	UpdateOrganizationLicense200ApplicationJSONStateEnumExpiring       UpdateOrganizationLicense200ApplicationJSONStateEnum = "expiring"
	UpdateOrganizationLicense200ApplicationJSONStateEnumRecentlyQueued UpdateOrganizationLicense200ApplicationJSONStateEnum = "recentlyQueued"
	UpdateOrganizationLicense200ApplicationJSONStateEnumUnused         UpdateOrganizationLicense200ApplicationJSONStateEnum = "unused"
	UpdateOrganizationLicense200ApplicationJSONStateEnumUnusedActive   UpdateOrganizationLicense200ApplicationJSONStateEnum = "unusedActive"
)

func (e UpdateOrganizationLicense200ApplicationJSONStateEnum) ToPointer() *UpdateOrganizationLicense200ApplicationJSONStateEnum {
	return &e
}

func (e *UpdateOrganizationLicense200ApplicationJSONStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "expired":
		fallthrough
	case "expiring":
		fallthrough
	case "recentlyQueued":
		fallthrough
	case "unused":
		fallthrough
	case "unusedActive":
		*e = UpdateOrganizationLicense200ApplicationJSONStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationLicense200ApplicationJSONStateEnum: %v", v)
	}
}

// UpdateOrganizationLicense200ApplicationJSON - Successful operation
type UpdateOrganizationLicense200ApplicationJSON struct {
	// The date the license started burning
	ActivationDate *string `json:"activationDate,omitempty"`
	// The date the license was claimed into the organization
	ClaimDate *string `json:"claimDate,omitempty"`
	// Serial number of the device the license is assigned to
	DeviceSerial *string `json:"deviceSerial,omitempty"`
	// The duration of the individual license
	DurationInDays *int64 `json:"durationInDays,omitempty"`
	// The date the license will expire
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// The id of the head license this license is queued behind. If there is no head license, it returns nil.
	HeadLicenseID *string `json:"headLicenseId,omitempty"`
	// License ID
	ID *string `json:"id,omitempty"`
	// License key
	LicenseKey *string `json:"licenseKey,omitempty"`
	// License type
	LicenseType *string `json:"licenseType,omitempty"`
	// ID of the network the license is assigned to
	NetworkID *string `json:"networkId,omitempty"`
	// Order number
	OrderNumber *string `json:"orderNumber,omitempty"`
	// DEPRECATED List of permanently queued licenses attached to the license. Instead, use /organizations/{organizationId}/licenses?deviceSerial= to retrieved queued licenses for a given device.
	PermanentlyQueuedLicenses []UpdateOrganizationLicense200ApplicationJSONPermanentlyQueuedLicenses `json:"permanentlyQueuedLicenses,omitempty"`
	// The number of seats of the license. Only applicable to SM licenses.
	SeatCount *int64 `json:"seatCount,omitempty"`
	// The state of the license. All queued licenses have a status of `recentlyQueued`.
	State *UpdateOrganizationLicense200ApplicationJSONStateEnum `json:"state,omitempty"`
	// The duration of the license plus all permanently queued licenses associated with it
	TotalDurationInDays *int64 `json:"totalDurationInDays,omitempty"`
}

type UpdateOrganizationLicenseResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateOrganizationLicense200ApplicationJSONObject *UpdateOrganizationLicense200ApplicationJSON
}
