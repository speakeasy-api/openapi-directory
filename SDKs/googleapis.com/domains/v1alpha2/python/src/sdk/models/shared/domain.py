"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class DomainResourceStateEnum(str, Enum):
    r"""The state of this domain as a `Registration` resource."""
    RESOURCE_STATE_UNSPECIFIED = 'RESOURCE_STATE_UNSPECIFIED'
    IMPORTABLE = 'IMPORTABLE'
    UNSUPPORTED = 'UNSUPPORTED'
    SUSPENDED = 'SUSPENDED'
    EXPIRED = 'EXPIRED'
    DELETED = 'DELETED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Domain:
    r"""A domain that the calling user manages in Google Domains."""
    
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainName'), 'exclude': lambda f: f is None }})
    r"""The domain name. Unicode domain names are expressed in Punycode format."""  
    resource_state: Optional[DomainResourceStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceState'), 'exclude': lambda f: f is None }})
    r"""The state of this domain as a `Registration` resource."""  
    yearly_price: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yearlyPrice'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money with its currency type."""  
    