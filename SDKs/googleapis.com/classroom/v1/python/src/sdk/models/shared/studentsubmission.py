"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import assignmentsubmission as shared_assignmentsubmission
from ..shared import multiplechoicesubmission as shared_multiplechoicesubmission
from ..shared import shortanswersubmission as shared_shortanswersubmission
from ..shared import submissionhistory as shared_submissionhistory
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StudentSubmissionCourseWorkTypeEnum(str, Enum):
    r"""Type of course work this submission is for. Read-only."""
    COURSE_WORK_TYPE_UNSPECIFIED = 'COURSE_WORK_TYPE_UNSPECIFIED'
    ASSIGNMENT = 'ASSIGNMENT'
    SHORT_ANSWER_QUESTION = 'SHORT_ANSWER_QUESTION'
    MULTIPLE_CHOICE_QUESTION = 'MULTIPLE_CHOICE_QUESTION'

class StudentSubmissionStateEnum(str, Enum):
    r"""State of this submission. Read-only."""
    SUBMISSION_STATE_UNSPECIFIED = 'SUBMISSION_STATE_UNSPECIFIED'
    NEW = 'NEW'
    CREATED = 'CREATED'
    TURNED_IN = 'TURNED_IN'
    RETURNED = 'RETURNED'
    RECLAIMED_BY_STUDENT = 'RECLAIMED_BY_STUDENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StudentSubmission:
    r"""Student submission for course work. StudentSubmission items are generated when a CourseWork item is created. StudentSubmissions that have never been accessed (i.e. with `state` = NEW) may not have a creation time or update time."""
    
    alternate_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alternateLink'), 'exclude': lambda f: f is None }})
    r"""Absolute link to the submission in the Classroom web UI. Read-only."""  
    assigned_grade: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignedGrade'), 'exclude': lambda f: f is None }})
    r"""Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers."""  
    assignment_submission: Optional[shared_assignmentsubmission.AssignmentSubmission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assignmentSubmission'), 'exclude': lambda f: f is None }})
    r"""Student work for an assignment."""  
    associated_with_developer: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('associatedWithDeveloper'), 'exclude': lambda f: f is None }})
    r"""Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only."""  
    course_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courseId'), 'exclude': lambda f: f is None }})
    r"""Identifier of the course. Read-only."""  
    course_work_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courseWorkId'), 'exclude': lambda f: f is None }})
    r"""Identifier for the course work this corresponds to. Read-only."""  
    course_work_type: Optional[StudentSubmissionCourseWorkTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('courseWorkType'), 'exclude': lambda f: f is None }})
    r"""Type of course work this submission is for. Read-only."""  
    creation_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creationTime'), 'exclude': lambda f: f is None }})
    r"""Creation time of this submission. This may be unset if the student has not accessed this item. Read-only."""  
    draft_grade: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draftGrade'), 'exclude': lambda f: f is None }})
    r"""Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only."""  
    late: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('late'), 'exclude': lambda f: f is None }})
    r"""Whether this submission is late. Read-only."""  
    multiple_choice_submission: Optional[shared_multiplechoicesubmission.MultipleChoiceSubmission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('multipleChoiceSubmission'), 'exclude': lambda f: f is None }})
    r"""Student work for a multiple-choice question."""  
    short_answer_submission: Optional[shared_shortanswersubmission.ShortAnswerSubmission] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shortAnswerSubmission'), 'exclude': lambda f: f is None }})
    r"""Student work for a short answer question."""  
    state: Optional[StudentSubmissionStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of this submission. Read-only."""  
    submission_history: Optional[list[shared_submissionhistory.SubmissionHistory]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submissionHistory'), 'exclude': lambda f: f is None }})
    r"""The history of the submission (includes state and grade histories). Read-only."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Last update time of this submission. This may be unset if the student has not accessed this item. Read-only."""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""Identifier for the student that owns this submission. Read-only."""  
    