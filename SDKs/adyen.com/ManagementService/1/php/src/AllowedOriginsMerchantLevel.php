<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AllowedOriginsMerchantLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete an allowed origin
     * 
     * Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) identified in the path. As soon as an allowed origin is removed, we no longer accept client-side requests from that domain.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—API credentials read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdResponse
     */
	public function deleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}', \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of allowed origins
     * 
     * Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) for the API credential identified in the path.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—API credentials read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsResponse
     */
	public function getMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOrigins(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allowedOriginsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllowedOriginsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an allowed origin
     * 
     * Returns the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) identified in the path.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—API credentials read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdResponse
     */
	public function getMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginId(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsOriginIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allowedOrigin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllowedOrigin', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an allowed origin
     * 
     * Adds a new [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) to the API credential's list of allowed origins.
     * 
     * To make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—API credentials read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsResponse
     */
	public function postMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOrigins(
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins', \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "allowedOrigin", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdApiCredentialsApiCredentialIdAllowedOriginsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->allowedOriginsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AllowedOriginsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}