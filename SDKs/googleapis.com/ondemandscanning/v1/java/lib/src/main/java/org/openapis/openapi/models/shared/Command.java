/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Command - Command describes a step performed as part of the build pipeline.
 */
public class Command {
    /**
     * Command-line arguments used when executing this command.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("args")
    public String[] args;

    public Command withArgs(String[] args) {
        this.args = args;
        return this;
    }
    
    /**
     * Working directory (relative to project source root) used when running this command.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dir")
    public String dir;

    public Command withDir(String dir) {
        this.dir = dir;
        return this;
    }
    
    /**
     * Environment variables set before running this command.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("env")
    public String[] env;

    public Command withEnv(String[] env) {
        this.env = env;
        return this;
    }
    
    /**
     * Optional unique identifier for this command, used in wait_for to reference this command as a dependency.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Command withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Command withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The ID(s) of the command(s) that this command depends on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("waitFor")
    public String[] waitFor;

    public Command withWaitFor(String[] waitFor) {
        this.waitFor = waitFor;
        return this;
    }
    
    public Command(){}
}
