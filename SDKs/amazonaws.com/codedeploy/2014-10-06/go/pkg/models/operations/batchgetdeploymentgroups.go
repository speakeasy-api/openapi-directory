// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetDeploymentGroupsXAmzTargetEnum
type BatchGetDeploymentGroupsXAmzTargetEnum string

const (
	BatchGetDeploymentGroupsXAmzTargetEnumCodeDeploy20141006BatchGetDeploymentGroups BatchGetDeploymentGroupsXAmzTargetEnum = "CodeDeploy_20141006.BatchGetDeploymentGroups"
)

func (e *BatchGetDeploymentGroupsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.BatchGetDeploymentGroups":
		*e = BatchGetDeploymentGroupsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetDeploymentGroupsXAmzTargetEnum: %s", s)
	}
}

type BatchGetDeploymentGroupsRequest struct {
	BatchGetDeploymentGroupsInput shared.BatchGetDeploymentGroupsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm                 *string                                `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256             *string                                `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                *string                                `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                      *string                                `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken             *string                                `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                 *string                                `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders             *string                                `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                    BatchGetDeploymentGroupsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetDeploymentGroupsResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	// Success
	BatchGetDeploymentGroupsOutput *shared.BatchGetDeploymentGroupsOutput
	// BatchLimitExceededException
	BatchLimitExceededException interface{}
	ContentType                 string
	// DeploymentConfigDoesNotExistException
	DeploymentConfigDoesNotExistException interface{}
	// DeploymentGroupNameRequiredException
	DeploymentGroupNameRequiredException interface{}
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidDeploymentGroupNameException
	InvalidDeploymentGroupNameException interface{}
	StatusCode                          int
	RawResponse                         *http.Response
}
