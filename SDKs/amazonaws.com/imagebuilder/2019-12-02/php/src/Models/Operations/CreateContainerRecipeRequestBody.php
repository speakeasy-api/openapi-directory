<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateContainerRecipeRequestBody
{
    /**
     * The client token used to make this request idempotent.
     * 
     * @var string $clientToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientToken;
    
    /**
     * Components for build and test that are included in the container recipe. Recipes require a minimum of one build component, and can have a maximum of 20 build and test components in any combination.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\ComponentConfiguration> $components
     */
	#[\JMS\Serializer\Annotation\SerializedName('components')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ComponentConfiguration>')]
    public array $components;
    
    /**
     * The type of container to create.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyContainerTypeEnum $containerType
     */
	#[\JMS\Serializer\Annotation\SerializedName('containerType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyContainerTypeEnum>')]
    public CreateContainerRecipeRequestBodyContainerTypeEnum $containerType;
    
    /**
     * The description of the container recipe.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The Dockerfile template used to build your image as an inline data blob.
     * 
     * @var ?string $dockerfileTemplateData
     */
	#[\JMS\Serializer\Annotation\SerializedName('dockerfileTemplateData')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dockerfileTemplateData = null;
    
    /**
     * The Amazon S3 URI for the Dockerfile that will be used to build your container image.
     * 
     * @var ?string $dockerfileTemplateUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('dockerfileTemplateUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $dockerfileTemplateUri = null;
    
    /**
     * Specifies the operating system version for the base image.
     * 
     * @var ?string $imageOsVersionOverride
     */
	#[\JMS\Serializer\Annotation\SerializedName('imageOsVersionOverride')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $imageOsVersionOverride = null;
    
    /**
     * Defines a custom base AMI and block device mapping configurations of an instance used for building and testing container images.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyInstanceConfiguration $instanceConfiguration
     */
	#[\JMS\Serializer\Annotation\SerializedName('instanceConfiguration')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyInstanceConfiguration')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateContainerRecipeRequestBodyInstanceConfiguration $instanceConfiguration = null;
    
    /**
     * Identifies which KMS key is used to encrypt the container image.
     * 
     * @var ?string $kmsKeyId
     */
	#[\JMS\Serializer\Annotation\SerializedName('kmsKeyId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kmsKeyId = null;
    
    /**
     * The name of the container recipe.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The base image for the container recipe.
     * 
     * @var string $parentImage
     */
	#[\JMS\Serializer\Annotation\SerializedName('parentImage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $parentImage;
    
    /**
     * Specifies the operating system platform when you use a custom base image.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyPlatformOverrideEnum $platformOverride
     */
	#[\JMS\Serializer\Annotation\SerializedName('platformOverride')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyPlatformOverrideEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CreateContainerRecipeRequestBodyPlatformOverrideEnum $platformOverride = null;
    
    /**
     * <p>The semantic version of the container recipe. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
     * 
     * @var string $semanticVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('semanticVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $semanticVersion;
    
    /**
     * Tags that are attached to the container recipe.
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
    /**
     * The container repository where the output container image is stored.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyTargetRepository $targetRepository
     */
	#[\JMS\Serializer\Annotation\SerializedName('targetRepository')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyTargetRepository')]
    public CreateContainerRecipeRequestBodyTargetRepository $targetRepository;
    
    /**
     * The working directory for use during build and test workflows.
     * 
     * @var ?string $workingDirectory
     */
	#[\JMS\Serializer\Annotation\SerializedName('workingDirectory')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $workingDirectory = null;
    
	public function __construct()
	{
		$this->clientToken = "";
		$this->components = [];
		$this->containerType = \OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyContainerTypeEnum::DOCKER;
		$this->description = null;
		$this->dockerfileTemplateData = null;
		$this->dockerfileTemplateUri = null;
		$this->imageOsVersionOverride = null;
		$this->instanceConfiguration = null;
		$this->kmsKeyId = null;
		$this->name = "";
		$this->parentImage = "";
		$this->platformOverride = null;
		$this->semanticVersion = "";
		$this->tags = null;
		$this->targetRepository = new \OpenAPI\OpenAPI\Models\Operations\CreateContainerRecipeRequestBodyTargetRepository();
		$this->workingDirectory = null;
	}
}
