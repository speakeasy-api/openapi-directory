/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CodeGenConfigurationNode -  &lt;code&gt;CodeGenConfigurationNode&lt;/code&gt; enumerates all valid Node types. One and only one of its member variables can be populated.
 */
public class CodeGenConfigurationNode {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Aggregate")
    public Aggregate aggregate;

    public CodeGenConfigurationNode withAggregate(Aggregate aggregate) {
        this.aggregate = aggregate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ApplyMapping")
    public ApplyMapping applyMapping;

    public CodeGenConfigurationNode withApplyMapping(ApplyMapping applyMapping) {
        this.applyMapping = applyMapping;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AthenaConnectorSource")
    public AthenaConnectorSource athenaConnectorSource;

    public CodeGenConfigurationNode withAthenaConnectorSource(AthenaConnectorSource athenaConnectorSource) {
        this.athenaConnectorSource = athenaConnectorSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CatalogDeltaSource")
    public CatalogDeltaSource catalogDeltaSource;

    public CodeGenConfigurationNode withCatalogDeltaSource(CatalogDeltaSource catalogDeltaSource) {
        this.catalogDeltaSource = catalogDeltaSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CatalogHudiSource")
    public CatalogHudiSource catalogHudiSource;

    public CodeGenConfigurationNode withCatalogHudiSource(CatalogHudiSource catalogHudiSource) {
        this.catalogHudiSource = catalogHudiSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CatalogKafkaSource")
    public CatalogKafkaSource catalogKafkaSource;

    public CodeGenConfigurationNode withCatalogKafkaSource(CatalogKafkaSource catalogKafkaSource) {
        this.catalogKafkaSource = catalogKafkaSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CatalogKinesisSource")
    public CatalogKinesisSource catalogKinesisSource;

    public CodeGenConfigurationNode withCatalogKinesisSource(CatalogKinesisSource catalogKinesisSource) {
        this.catalogKinesisSource = catalogKinesisSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CatalogSource")
    public CatalogSource catalogSource;

    public CodeGenConfigurationNode withCatalogSource(CatalogSource catalogSource) {
        this.catalogSource = catalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CatalogTarget")
    public BasicCatalogTarget catalogTarget;

    public CodeGenConfigurationNode withCatalogTarget(BasicCatalogTarget catalogTarget) {
        this.catalogTarget = catalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CustomCode")
    public CustomCode customCode;

    public CodeGenConfigurationNode withCustomCode(CustomCode customCode) {
        this.customCode = customCode;
        return this;
    }
    
    /**
     * Specifies the direct JDBC source connection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DirectJDBCSource")
    public DirectJDBCSource directJDBCSource;

    public CodeGenConfigurationNode withDirectJDBCSource(DirectJDBCSource directJDBCSource) {
        this.directJDBCSource = directJDBCSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DirectKafkaSource")
    public DirectKafkaSource directKafkaSource;

    public CodeGenConfigurationNode withDirectKafkaSource(DirectKafkaSource directKafkaSource) {
        this.directKafkaSource = directKafkaSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DirectKinesisSource")
    public DirectKinesisSource directKinesisSource;

    public CodeGenConfigurationNode withDirectKinesisSource(DirectKinesisSource directKinesisSource) {
        this.directKinesisSource = directKinesisSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DropDuplicates")
    public DropDuplicates dropDuplicates;

    public CodeGenConfigurationNode withDropDuplicates(DropDuplicates dropDuplicates) {
        this.dropDuplicates = dropDuplicates;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DropFields")
    public DropFields dropFields;

    public CodeGenConfigurationNode withDropFields(DropFields dropFields) {
        this.dropFields = dropFields;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DropNullFields")
    public DropNullFields dropNullFields;

    public CodeGenConfigurationNode withDropNullFields(DropNullFields dropNullFields) {
        this.dropNullFields = dropNullFields;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DynamicTransform")
    public DynamicTransform dynamicTransform;

    public CodeGenConfigurationNode withDynamicTransform(DynamicTransform dynamicTransform) {
        this.dynamicTransform = dynamicTransform;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("DynamoDBCatalogSource")
    public DynamoDBCatalogSource dynamoDBCatalogSource;

    public CodeGenConfigurationNode withDynamoDBCatalogSource(DynamoDBCatalogSource dynamoDBCatalogSource) {
        this.dynamoDBCatalogSource = dynamoDBCatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EvaluateDataQuality")
    public EvaluateDataQuality evaluateDataQuality;

    public CodeGenConfigurationNode withEvaluateDataQuality(EvaluateDataQuality evaluateDataQuality) {
        this.evaluateDataQuality = evaluateDataQuality;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FillMissingValues")
    public FillMissingValues fillMissingValues;

    public CodeGenConfigurationNode withFillMissingValues(FillMissingValues fillMissingValues) {
        this.fillMissingValues = fillMissingValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Filter")
    public Filter filter;

    public CodeGenConfigurationNode withFilter(Filter filter) {
        this.filter = filter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GovernedCatalogSource")
    public GovernedCatalogSource governedCatalogSource;

    public CodeGenConfigurationNode withGovernedCatalogSource(GovernedCatalogSource governedCatalogSource) {
        this.governedCatalogSource = governedCatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GovernedCatalogTarget")
    public GovernedCatalogTarget governedCatalogTarget;

    public CodeGenConfigurationNode withGovernedCatalogTarget(GovernedCatalogTarget governedCatalogTarget) {
        this.governedCatalogTarget = governedCatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("JDBCConnectorSource")
    public JDBCConnectorSource jdbcConnectorSource;

    public CodeGenConfigurationNode withJDBCConnectorSource(JDBCConnectorSource jdbcConnectorSource) {
        this.jdbcConnectorSource = jdbcConnectorSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("JDBCConnectorTarget")
    public JDBCConnectorTarget jdbcConnectorTarget;

    public CodeGenConfigurationNode withJDBCConnectorTarget(JDBCConnectorTarget jdbcConnectorTarget) {
        this.jdbcConnectorTarget = jdbcConnectorTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Join")
    public Join join;

    public CodeGenConfigurationNode withJoin(Join join) {
        this.join = join;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Merge")
    public Merge merge;

    public CodeGenConfigurationNode withMerge(Merge merge) {
        this.merge = merge;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MicrosoftSQLServerCatalogSource")
    public MicrosoftSQLServerCatalogSource microsoftSQLServerCatalogSource;

    public CodeGenConfigurationNode withMicrosoftSQLServerCatalogSource(MicrosoftSQLServerCatalogSource microsoftSQLServerCatalogSource) {
        this.microsoftSQLServerCatalogSource = microsoftSQLServerCatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MicrosoftSQLServerCatalogTarget")
    public MicrosoftSQLServerCatalogTarget microsoftSQLServerCatalogTarget;

    public CodeGenConfigurationNode withMicrosoftSQLServerCatalogTarget(MicrosoftSQLServerCatalogTarget microsoftSQLServerCatalogTarget) {
        this.microsoftSQLServerCatalogTarget = microsoftSQLServerCatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MySQLCatalogSource")
    public MySQLCatalogSource mySQLCatalogSource;

    public CodeGenConfigurationNode withMySQLCatalogSource(MySQLCatalogSource mySQLCatalogSource) {
        this.mySQLCatalogSource = mySQLCatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MySQLCatalogTarget")
    public MySQLCatalogTarget mySQLCatalogTarget;

    public CodeGenConfigurationNode withMySQLCatalogTarget(MySQLCatalogTarget mySQLCatalogTarget) {
        this.mySQLCatalogTarget = mySQLCatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OracleSQLCatalogSource")
    public OracleSQLCatalogSource oracleSQLCatalogSource;

    public CodeGenConfigurationNode withOracleSQLCatalogSource(OracleSQLCatalogSource oracleSQLCatalogSource) {
        this.oracleSQLCatalogSource = oracleSQLCatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OracleSQLCatalogTarget")
    public OracleSQLCatalogTarget oracleSQLCatalogTarget;

    public CodeGenConfigurationNode withOracleSQLCatalogTarget(OracleSQLCatalogTarget oracleSQLCatalogTarget) {
        this.oracleSQLCatalogTarget = oracleSQLCatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PIIDetection")
    public PIIDetection piiDetection;

    public CodeGenConfigurationNode withPIIDetection(PIIDetection piiDetection) {
        this.piiDetection = piiDetection;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostgreSQLCatalogSource")
    public PostgreSQLCatalogSource postgreSQLCatalogSource;

    public CodeGenConfigurationNode withPostgreSQLCatalogSource(PostgreSQLCatalogSource postgreSQLCatalogSource) {
        this.postgreSQLCatalogSource = postgreSQLCatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostgreSQLCatalogTarget")
    public PostgreSQLCatalogTarget postgreSQLCatalogTarget;

    public CodeGenConfigurationNode withPostgreSQLCatalogTarget(PostgreSQLCatalogTarget postgreSQLCatalogTarget) {
        this.postgreSQLCatalogTarget = postgreSQLCatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RedshiftSource")
    public RedshiftSource redshiftSource;

    public CodeGenConfigurationNode withRedshiftSource(RedshiftSource redshiftSource) {
        this.redshiftSource = redshiftSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RedshiftTarget")
    public RedshiftTarget redshiftTarget;

    public CodeGenConfigurationNode withRedshiftTarget(RedshiftTarget redshiftTarget) {
        this.redshiftTarget = redshiftTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RelationalCatalogSource")
    public RelationalCatalogSource relationalCatalogSource;

    public CodeGenConfigurationNode withRelationalCatalogSource(RelationalCatalogSource relationalCatalogSource) {
        this.relationalCatalogSource = relationalCatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RenameField")
    public RenameField renameField;

    public CodeGenConfigurationNode withRenameField(RenameField renameField) {
        this.renameField = renameField;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3CatalogDeltaSource")
    public S3CatalogDeltaSource s3CatalogDeltaSource;

    public CodeGenConfigurationNode withS3CatalogDeltaSource(S3CatalogDeltaSource s3CatalogDeltaSource) {
        this.s3CatalogDeltaSource = s3CatalogDeltaSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3CatalogHudiSource")
    public S3CatalogHudiSource s3CatalogHudiSource;

    public CodeGenConfigurationNode withS3CatalogHudiSource(S3CatalogHudiSource s3CatalogHudiSource) {
        this.s3CatalogHudiSource = s3CatalogHudiSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3CatalogSource")
    public S3CatalogSource s3CatalogSource;

    public CodeGenConfigurationNode withS3CatalogSource(S3CatalogSource s3CatalogSource) {
        this.s3CatalogSource = s3CatalogSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3CatalogTarget")
    public S3CatalogTarget s3CatalogTarget;

    public CodeGenConfigurationNode withS3CatalogTarget(S3CatalogTarget s3CatalogTarget) {
        this.s3CatalogTarget = s3CatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3CsvSource")
    public S3CsvSource s3CsvSource;

    public CodeGenConfigurationNode withS3CsvSource(S3CsvSource s3CsvSource) {
        this.s3CsvSource = s3CsvSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3DeltaCatalogTarget")
    public S3DeltaCatalogTarget s3DeltaCatalogTarget;

    public CodeGenConfigurationNode withS3DeltaCatalogTarget(S3DeltaCatalogTarget s3DeltaCatalogTarget) {
        this.s3DeltaCatalogTarget = s3DeltaCatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3DeltaDirectTarget")
    public S3DeltaDirectTarget s3DeltaDirectTarget;

    public CodeGenConfigurationNode withS3DeltaDirectTarget(S3DeltaDirectTarget s3DeltaDirectTarget) {
        this.s3DeltaDirectTarget = s3DeltaDirectTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3DeltaSource")
    public S3DeltaSource s3DeltaSource;

    public CodeGenConfigurationNode withS3DeltaSource(S3DeltaSource s3DeltaSource) {
        this.s3DeltaSource = s3DeltaSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3DirectTarget")
    public S3DirectTarget s3DirectTarget;

    public CodeGenConfigurationNode withS3DirectTarget(S3DirectTarget s3DirectTarget) {
        this.s3DirectTarget = s3DirectTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3GlueParquetTarget")
    public S3GlueParquetTarget s3GlueParquetTarget;

    public CodeGenConfigurationNode withS3GlueParquetTarget(S3GlueParquetTarget s3GlueParquetTarget) {
        this.s3GlueParquetTarget = s3GlueParquetTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3HudiCatalogTarget")
    public S3HudiCatalogTarget s3HudiCatalogTarget;

    public CodeGenConfigurationNode withS3HudiCatalogTarget(S3HudiCatalogTarget s3HudiCatalogTarget) {
        this.s3HudiCatalogTarget = s3HudiCatalogTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3HudiDirectTarget")
    public S3HudiDirectTarget s3HudiDirectTarget;

    public CodeGenConfigurationNode withS3HudiDirectTarget(S3HudiDirectTarget s3HudiDirectTarget) {
        this.s3HudiDirectTarget = s3HudiDirectTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3HudiSource")
    public S3HudiSource s3HudiSource;

    public CodeGenConfigurationNode withS3HudiSource(S3HudiSource s3HudiSource) {
        this.s3HudiSource = s3HudiSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3JsonSource")
    public S3JsonSource s3JsonSource;

    public CodeGenConfigurationNode withS3JsonSource(S3JsonSource s3JsonSource) {
        this.s3JsonSource = s3JsonSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("S3ParquetSource")
    public S3ParquetSource s3ParquetSource;

    public CodeGenConfigurationNode withS3ParquetSource(S3ParquetSource s3ParquetSource) {
        this.s3ParquetSource = s3ParquetSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SelectFields")
    public SelectFields selectFields;

    public CodeGenConfigurationNode withSelectFields(SelectFields selectFields) {
        this.selectFields = selectFields;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SelectFromCollection")
    public SelectFromCollection selectFromCollection;

    public CodeGenConfigurationNode withSelectFromCollection(SelectFromCollection selectFromCollection) {
        this.selectFromCollection = selectFromCollection;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SparkConnectorSource")
    public SparkConnectorSource sparkConnectorSource;

    public CodeGenConfigurationNode withSparkConnectorSource(SparkConnectorSource sparkConnectorSource) {
        this.sparkConnectorSource = sparkConnectorSource;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SparkConnectorTarget")
    public SparkConnectorTarget sparkConnectorTarget;

    public CodeGenConfigurationNode withSparkConnectorTarget(SparkConnectorTarget sparkConnectorTarget) {
        this.sparkConnectorTarget = sparkConnectorTarget;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SparkSQL")
    public SparkSQL sparkSQL;

    public CodeGenConfigurationNode withSparkSQL(SparkSQL sparkSQL) {
        this.sparkSQL = sparkSQL;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Spigot")
    public Spigot spigot;

    public CodeGenConfigurationNode withSpigot(Spigot spigot) {
        this.spigot = spigot;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SplitFields")
    public SplitFields splitFields;

    public CodeGenConfigurationNode withSplitFields(SplitFields splitFields) {
        this.splitFields = splitFields;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Union")
    public Union union;

    public CodeGenConfigurationNode withUnion(Union union) {
        this.union = union;
        return this;
    }
    
    public CodeGenConfigurationNode(){}
}
