/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GetQueryResultsResponse - Successful response
 */
public class GetQueryResultsResponse {
    /**
     * Whether the query result was fetched from the query cache.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheHit")
    public Boolean cacheHit;

    public GetQueryResultsResponse withCacheHit(Boolean cacheHit) {
        this.cacheHit = cacheHit;
        return this;
    }
    
    /**
     * [Output-only] The first errors or warnings encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has completed or was unsuccessful.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    public ErrorProto[] errors;

    public GetQueryResultsResponse withErrors(ErrorProto[] errors) {
        this.errors = errors;
        return this;
    }
    
    /**
     * A hash of this response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public GetQueryResultsResponse withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Whether the query has completed or not. If rows or totalRows are present, this will always be true. If this is false, totalRows will not be available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobComplete")
    public Boolean jobComplete;

    public GetQueryResultsResponse withJobComplete(Boolean jobComplete) {
        this.jobComplete = jobComplete;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobReference")
    public JobReference jobReference;

    public GetQueryResultsResponse withJobReference(JobReference jobReference) {
        this.jobReference = jobReference;
        return this;
    }
    
    /**
     * The resource type of the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;

    public GetQueryResultsResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * [Output-only] The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numDmlAffectedRows")
    public String numDmlAffectedRows;

    public GetQueryResultsResponse withNumDmlAffectedRows(String numDmlAffectedRows) {
        this.numDmlAffectedRows = numDmlAffectedRows;
        return this;
    }
    
    /**
     * A token used for paging results.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageToken")
    public String pageToken;

    public GetQueryResultsResponse withPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
    }
    
    /**
     * An object with as many results as can be contained within the maximum permitted reply size. To get any additional rows, you can call GetQueryResults and specify the jobReference returned above. Present only when the query completes successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rows")
    public TableRow[] rows;

    public GetQueryResultsResponse withRows(TableRow[] rows) {
        this.rows = rows;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    public TableSchema schema;

    public GetQueryResultsResponse withSchema(TableSchema schema) {
        this.schema = schema;
        return this;
    }
    
    /**
     * The total number of bytes processed for this query.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalBytesProcessed")
    public String totalBytesProcessed;

    public GetQueryResultsResponse withTotalBytesProcessed(String totalBytesProcessed) {
        this.totalBytesProcessed = totalBytesProcessed;
        return this;
    }
    
    /**
     * The total number of rows in the complete query result set, which can be more than the number of rows in this single page of results. Present only when the query completes successfully.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totalRows")
    public String totalRows;

    public GetQueryResultsResponse withTotalRows(String totalRows) {
        this.totalRows = totalRows;
        return this;
    }
    
    public GetQueryResultsResponse(){}
}
