"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Subscriptions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancel_subscriptionsby_subscription_id(self, request: operations.CancelSubscriptionsbySubscriptionIDRequest) -> operations.CancelSubscriptionsbySubscriptionIDResponse:
        r"""Cancel Subscriptions by SubscriptionId
        Cancels all Subscriptions of a subscription group. This operation does not have a rollback. Once cancelled, it cannot be re-activated
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelSubscriptionsbySubscriptionIDRequest, base_url, '/subscriptions/{subscriptionId}/cancel', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelSubscriptionsbySubscriptionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_subscription_list(self, request: operations.GetSubscriptionListRequest) -> operations.GetSubscriptionListResponse:
        r"""Get Subscription List
        Retrieves a list of Subscriptions linked to your store.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions/list'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSubscriptionListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getfrequencyoptionsbysubscription_id(self, request: operations.GetfrequencyoptionsbysubscriptionIDRequest) -> operations.GetfrequencyoptionsbysubscriptionIDResponse:
        r"""Get frequency options by subscriptionId
        Lists frequency options for the Subscription, filtering by `subscriptionId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetfrequencyoptionsbysubscriptionIDRequest, base_url, '/subscriptions/{subscriptionId}/frequency-options', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetfrequencyoptionsbysubscriptionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getsubscriptionby_id(self, request: operations.GetsubscriptionbyIDRequest) -> operations.GetsubscriptionbyIDResponse:
        r"""Retrieve subscription by ID
        Lists Subscription's details, searching by `subscriptionId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetsubscriptionbyIDRequest, base_url, '/subscriptions/{subscriptionId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetsubscriptionbyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def getsubscriptionstocustomer(self, request: operations.GetsubscriptionstocustomerRequest) -> operations.GetsubscriptionstocustomerResponse:
        r"""Retrieve customer's subscriptions
        Retrieves details of a given customer's subscriptions, searching by that customer's `customerId`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/subscriptions'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetsubscriptionstocustomerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetsubscriptionstocustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def insert_addressesfor_subscription(self, request: operations.InsertAddressesforSubscriptionRequest) -> operations.InsertAddressesforSubscriptionResponse:
        r"""Insert Addresses for Subscription
        Inserts address's information to complement the Subscription details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InsertAddressesforSubscriptionRequest, base_url, '/subscriptions/{subscriptionId}/addresses', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InsertAddressesforSubscriptionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def update_subscriptionsby_subscription_id(self, request: operations.UpdateSubscriptionsbySubscriptionIDRequest) -> operations.UpdateSubscriptionsbySubscriptionIDResponse:
        r"""Update Subscriptions by SubscriptionId
        Update, add or alter information of a given Subscription, filtering by `subscriptionId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSubscriptionsbySubscriptionIDRequest, base_url, '/subscriptions/{subscriptionId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "update_subscriptionsby_subscription_id_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSubscriptionsbySubscriptionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    