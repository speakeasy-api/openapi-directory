"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1BatterySampleReport:
    r"""Sampling data for battery. * This field is telemetry information and this will change over time as the device is utilized. * Data for this field is controlled via policy: [ReportDevicePowerStatus](https://chromeenterprise.google/policies/#ReportDevicePowerStatus) * Data Collection Frequency: Only at Upload * Default Data Reporting Frequency: 3 hours - Policy Controlled: Yes * Cache: If the device is offline, the collected data is stored locally, and will be reported when the device is next online: No * Reported for affiliated users only: N/A"""
    
    charge_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeRate'), 'exclude': lambda f: f is None }})
    r"""Output only. Battery charge percentage."""  
    current: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current'), 'exclude': lambda f: f is None }})
    r"""Output only. Battery current (mA)."""  
    discharge_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dischargeRate'), 'exclude': lambda f: f is None }})
    r"""Output only. The battery discharge rate measured in mW. Positive if the battery is being discharged, negative if it's being charged."""  
    remaining_capacity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingCapacity'), 'exclude': lambda f: f is None }})
    r"""Output only. Battery remaining capacity (mAmpere-hours)."""  
    report_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reportTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp of when the sample was collected on device"""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Output only. Battery status read from sysfs. Example: Discharging"""  
    temperature: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature'), 'exclude': lambda f: f is None }})
    r"""Output only. Temperature in Celsius degrees."""  
    voltage: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voltage'), 'exclude': lambda f: f is None }})
    r"""Output only. Battery voltage (millivolt)."""  
    