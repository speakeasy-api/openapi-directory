"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InviteUserRequestMfaTypeEnum(str, Enum):
    r"""<p>The MFA type that the user will use</p>
    <p>The type may be conditional on the role(s) the user has</p>
    """
    SMS = 'SMS'
    YUBIKEY = 'YUBIKEY'
    TOTP = 'TOTP'

class InviteUserRequestUserTypeEnum(str, Enum):
    r"""Will default to PAYOR if not provided but entityId is provided"""
    BACKOFFICE = 'BACKOFFICE'
    PAYOR = 'PAYOR'
    PAYEE = 'PAYEE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InviteUserRequest:
    r"""Details of User to invite"""
    
    email: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email') }})
    r"""the email address of the invited user"""  
    mfa_type: InviteUserRequestMfaTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mfaType') }})
    r"""<p>The MFA type that the user will use</p>
    <p>The type may be conditional on the role(s) the user has</p>
    """  
    primary_contact_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryContactNumber') }})
    r"""The main contact number for the user"""  
    roles: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('roles') }})
    r"""The role(s) for the user
    The role must exist
    The role can be a custom role or a system role but the invoker must have the permissions to assign the role
    System roles are: velo.backoffice.admin, velo.payor.master_admin, velo.payor.admin, velo.payor.support, velo.payee.admin, velo.payee.support
    """  
    sms_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsNumber') }})
    r"""The phone number of a device that the user can receive sms messages on"""  
    entity_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityId'), 'exclude': lambda f: f is None }})
    r"""The payorId or payeeId or null if the user is a backoffice admin"""  
    first_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName'), 'exclude': lambda f: f is None }})  
    last_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName'), 'exclude': lambda f: f is None }})  
    secondary_contact_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secondaryContactNumber'), 'exclude': lambda f: f is None }})
    r"""The secondary contact number for the user"""  
    user_type: Optional[InviteUserRequestUserTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userType'), 'exclude': lambda f: f is None }})
    r"""Will default to PAYOR if not provided but entityId is provided"""  
    verification_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verificationCode'), 'exclude': lambda f: f is None }})
    r"""Optional property that MUST be suppied when manually verifying a user
    The user's smsNumber is registered via a separate endpoint and an OTP sent to them
    """  
    