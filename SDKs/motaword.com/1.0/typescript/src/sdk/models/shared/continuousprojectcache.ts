/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ContinuousProjectLanguageCache } from "./continuousprojectlanguagecache";
import { PagingMeta } from "./pagingmeta";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Continuous project cache for translations per target language.
 */
export class ContinuousProjectCache extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => PagingMeta)
  meta?: PagingMeta;

  @SpeakeasyMetadata({ elemType: ContinuousProjectLanguageCache })
  @Expose({ name: "translations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ContinuousProjectLanguageCache> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ContinuousProjectLanguageCache);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  translations?: Record<string, ContinuousProjectLanguageCache>;
}
