/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class BookingVoucherRequest extends SpeakeasyBase {
  /**
   * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=Accept-Language",
  })
  acceptLanguage: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=embeddedResources",
  })
  embeddedResources?: boolean;

  /**
   * **specifier**:
   *
   * @remarks
   * - set to `true` if you wish to retrieve the full HTML-formatted voucher
   * - set to `false` if you want the div fragment (optional)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fullHTML",
  })
  fullHTML?: boolean;

  /**
   * Booking-reference number generated by Viator
   *
   * @remarks
   *
   *   - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=itemId",
  })
  itemId?: number;

  /**
   * **surname** of *this* lead traveler
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=leadLastName",
  })
  leadLastName?: string;

  /**
   * **specifier**:
   *
   * @remarks
   * - if set to `true`, the service returns the mobile (cut down) HTML-formatted voucher
   * - if `false` the full voucher HTML is returned (ignoring `fullHTML`)
   * - default: `true`
   * - this field should only be enabled for products that have a `voucherOption` of `'VOUCHER_E'`
   * - do not enable `mobileVouchers` for paper vouchers (`voucherOption` of `'VOUCHER_PAPER_ONLY'`) as no barcode is returned
   * - the voucher information is available in the response from [/product](#operation/product), [/booking/book](#operation/bookingBook), [/booking/pastbooking](#operation/bookingPastbooking), [/booking/mybookings](#operation/bookingMybookings) (it is also displayed under the 'Redemption Info' heading in this service)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=mobileVoucher",
  })
  mobileVoucher?: boolean;

  /**
   * **identifier** for the voucher
   *
   * @remarks
   * - **note**: use &lt;u&gt;either&lt;/u&gt; `voucherKey` &lt;u&gt;or&lt;/u&gt; the three separate parameters
   * - if `voucherKey` is provided as well as the other parameters, then `voucherKey` overrides the other paramaters
   * - `voucherKey` is obtained from [/booking/mybookings](#operation/bookingMybookings) or in the response from [/booking/book](#operation/bookingBook) when you make a booking
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=voucherKey",
  })
  voucherKey?: string;
}

/**
 * Success
 */
export class BookingVoucher200ApplicationJSON extends SpeakeasyBase {
  /**
   * **HTML-formatted** voucher content
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data" })
  data?: string;

  /**
   * **timestamp** of *this* response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dateStamp" })
  dateStamp?: string;

  /**
   * **array** of error codes pertaining to *this* error
   *
   * @remarks
   * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorCodes" })
  errorCodes?: string[];

  /**
   * **array** of error message strings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessage" })
  errorMessage?: any[];

  /**
   * **array** of error message strings in plain text
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorMessageText" })
  errorMessageText?: string;

  /**
   * **name** of *this* type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorName" })
  errorName?: string;

  /**
   * **reference number** of *this* error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorReference" })
  errorReference?: string;

  /**
   * **code** specifying the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errorType" })
  errorType?: string;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraInfo" })
  extraInfo?: Record<string, any>;

  /**
   * ignore (Viator only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "extraObject" })
  extraObject?: Record<string, any>;

  /**
   * **boolean indicator** of *this* request's outcome
   *
   * @remarks
   * - `true`: the request was successful with no errors
   * - `false`: an error was encountered
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * **number** of results available for *this* service
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalCount" })
  totalCount?: number;

  /**
   * **unique numeric id** of the server that processed *this* request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vmid" })
  vmid?: string;
}

export class BookingVoucherResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  bookingVoucher200ApplicationJSONObject?: BookingVoucher200ApplicationJSON;
}
