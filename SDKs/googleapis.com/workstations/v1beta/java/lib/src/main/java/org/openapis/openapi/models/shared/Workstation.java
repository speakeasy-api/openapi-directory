/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Workstation - A single instance of a developer workstation with its own persistent storage.
 */
public class Workstation {
    /**
     * Client-specified annotations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public java.util.Map<String, String> annotations;
    public Workstation withAnnotations(java.util.Map<String, String> annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * Output only. Time when this resource was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;
    public Workstation withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Output only. Time when this resource was soft-deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTime")
    public String deleteTime;
    public Workstation withDeleteTime(String deleteTime) {
        this.deleteTime = deleteTime;
        return this;
    }
    
    /**
     * Human-readable name for this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public Workstation withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public Workstation withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Output only. Host to which clients can send HTTPS traffic that will be received by the workstation. Authorized traffic will be received to the workstation as HTTP on port 80. To send traffic to a different port, clients may prefix the host with the destination port in the format `{port}-{host}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;
    public Workstation withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * Client-specified labels that are applied to the resource and that are also propagated to the underlying Compute Engine resources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;
    public Workstation withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Full name of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Workstation withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Indicates whether this resource is currently being updated to match its intended state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reconciling")
    public Boolean reconciling;
    public Workstation withReconciling(Boolean reconciling) {
        this.reconciling = reconciling;
        return this;
    }
    
    /**
     * Output only. Current state of the workstation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public WorkstationStateEnum state;
    public Workstation withState(WorkstationStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Output only. A system-assigned unique identified for this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uid")
    public String uid;
    public Workstation withUid(String uid) {
        this.uid = uid;
        return this;
    }
    
    /**
     * Output only. Time when this resource was most recently updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;
    public Workstation withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
}
