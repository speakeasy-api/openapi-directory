"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import frauddetectionconfiguration as shared_frauddetectionconfiguration
from ..shared import frauddetectiondecision_enum as shared_frauddetectiondecision_enum
from ..shared import frauddetectionreason_enum as shared_frauddetectionreason_enum
from ..shared import fraudriskdetails as shared_fraudriskdetails
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FraudDetectionResult:
    r"""The fraud detection result produced by Voice ID, processed against the current session state and streamed audio of the speaker."""
    
    audio_aggregation_ended_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AudioAggregationEndedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    audio_aggregation_started_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AudioAggregationStartedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    configuration: Optional[shared_frauddetectionconfiguration.FraudDetectionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Configuration'), 'exclude': lambda f: f is None }})  
    decision: Optional[shared_frauddetectiondecision_enum.FraudDetectionDecisionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Decision'), 'exclude': lambda f: f is None }})  
    fraud_detection_result_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FraudDetectionResultId'), 'exclude': lambda f: f is None }})  
    reasons: Optional[list[shared_frauddetectionreason_enum.FraudDetectionReasonEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Reasons'), 'exclude': lambda f: f is None }})  
    risk_details: Optional[shared_fraudriskdetails.FraudRiskDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RiskDetails'), 'exclude': lambda f: f is None }})  
    