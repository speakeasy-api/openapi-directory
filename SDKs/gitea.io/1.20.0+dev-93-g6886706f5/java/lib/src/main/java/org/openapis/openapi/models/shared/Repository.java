/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Repository - Repository represents a repository
 */
public class Repository {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_merge_commits")
    public Boolean allowMergeCommits;
    public Repository withAllowMergeCommits(Boolean allowMergeCommits) {
        this.allowMergeCommits = allowMergeCommits;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_rebase")
    public Boolean allowRebase;
    public Repository withAllowRebase(Boolean allowRebase) {
        this.allowRebase = allowRebase;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_rebase_explicit")
    public Boolean allowRebaseExplicit;
    public Repository withAllowRebaseExplicit(Boolean allowRebaseExplicit) {
        this.allowRebaseExplicit = allowRebaseExplicit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_rebase_update")
    public Boolean allowRebaseUpdate;
    public Repository withAllowRebaseUpdate(Boolean allowRebaseUpdate) {
        this.allowRebaseUpdate = allowRebaseUpdate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_squash_merge")
    public Boolean allowSquashMerge;
    public Repository withAllowSquashMerge(Boolean allowSquashMerge) {
        this.allowSquashMerge = allowSquashMerge;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived")
    public Boolean archived;
    public Repository withArchived(Boolean archived) {
        this.archived = archived;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avatar_url")
    public String avatarUrl;
    public Repository withAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clone_url")
    public String cloneUrl;
    public Repository withCloneUrl(String cloneUrl) {
        this.cloneUrl = cloneUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Repository withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_allow_maintainer_edit")
    public Boolean defaultAllowMaintainerEdit;
    public Repository withDefaultAllowMaintainerEdit(Boolean defaultAllowMaintainerEdit) {
        this.defaultAllowMaintainerEdit = defaultAllowMaintainerEdit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_branch")
    public String defaultBranch;
    public Repository withDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_delete_branch_after_merge")
    public Boolean defaultDeleteBranchAfterMerge;
    public Repository withDefaultDeleteBranchAfterMerge(Boolean defaultDeleteBranchAfterMerge) {
        this.defaultDeleteBranchAfterMerge = defaultDeleteBranchAfterMerge;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_merge_style")
    public String defaultMergeStyle;
    public Repository withDefaultMergeStyle(String defaultMergeStyle) {
        this.defaultMergeStyle = defaultMergeStyle;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Repository withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("empty")
    public Boolean empty;
    public Repository withEmpty(Boolean empty) {
        this.empty = empty;
        return this;
    }
    
    /**
     * ExternalTracker represents settings for external tracker
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_tracker")
    public ExternalTracker externalTracker;
    public Repository withExternalTracker(ExternalTracker externalTracker) {
        this.externalTracker = externalTracker;
        return this;
    }
    
    /**
     * ExternalWiki represents setting for external wiki
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_wiki")
    public ExternalWiki externalWiki;
    public Repository withExternalWiki(ExternalWiki externalWiki) {
        this.externalWiki = externalWiki;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fork")
    public Boolean fork;
    public Repository withFork(Boolean fork) {
        this.fork = fork;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forks_count")
    public Long forksCount;
    public Repository withForksCount(Long forksCount) {
        this.forksCount = forksCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("full_name")
    public String fullName;
    public Repository withFullName(String fullName) {
        this.fullName = fullName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_issues")
    public Boolean hasIssues;
    public Repository withHasIssues(Boolean hasIssues) {
        this.hasIssues = hasIssues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_projects")
    public Boolean hasProjects;
    public Repository withHasProjects(Boolean hasProjects) {
        this.hasProjects = hasProjects;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_pull_requests")
    public Boolean hasPullRequests;
    public Repository withHasPullRequests(Boolean hasPullRequests) {
        this.hasPullRequests = hasPullRequests;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_wiki")
    public Boolean hasWiki;
    public Repository withHasWiki(Boolean hasWiki) {
        this.hasWiki = hasWiki;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_url")
    public String htmlUrl;
    public Repository withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public Repository withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore_whitespace_conflicts")
    public Boolean ignoreWhitespaceConflicts;
    public Repository withIgnoreWhitespaceConflicts(Boolean ignoreWhitespaceConflicts) {
        this.ignoreWhitespaceConflicts = ignoreWhitespaceConflicts;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal")
    public Boolean internal;
    public Repository withInternal(Boolean internal) {
        this.internal = internal;
        return this;
    }
    
    /**
     * InternalTracker represents settings for internal tracker
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("internal_tracker")
    public InternalTracker internalTracker;
    public Repository withInternalTracker(InternalTracker internalTracker) {
        this.internalTracker = internalTracker;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    public String language;
    public Repository withLanguage(String language) {
        this.language = language;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languages_url")
    public String languagesUrl;
    public Repository withLanguagesUrl(String languagesUrl) {
        this.languagesUrl = languagesUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    public String link;
    public Repository withLink(String link) {
        this.link = link;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mirror")
    public Boolean mirror;
    public Repository withMirror(Boolean mirror) {
        this.mirror = mirror;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mirror_interval")
    public String mirrorInterval;
    public Repository withMirrorInterval(String mirrorInterval) {
        this.mirrorInterval = mirrorInterval;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("mirror_updated")
    public OffsetDateTime mirrorUpdated;
    public Repository withMirrorUpdated(OffsetDateTime mirrorUpdated) {
        this.mirrorUpdated = mirrorUpdated;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Repository withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("open_issues_count")
    public Long openIssuesCount;
    public Repository withOpenIssuesCount(Long openIssuesCount) {
        this.openIssuesCount = openIssuesCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("open_pr_counter")
    public Long openPrCounter;
    public Repository withOpenPrCounter(Long openPrCounter) {
        this.openPrCounter = openPrCounter;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_url")
    public String originalUrl;
    public Repository withOriginalUrl(String originalUrl) {
        this.originalUrl = originalUrl;
        return this;
    }
    
    /**
     * User represents a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public User owner;
    public Repository withOwner(User owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * Repository represents a repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent")
    public Repository parent;
    public Repository withParent(Repository parent) {
        this.parent = parent;
        return this;
    }
    
    /**
     * Permission represents a set of permissions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("permissions")
    public Permission permissions;
    public Repository withPermissions(Permission permissions) {
        this.permissions = permissions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private")
    public Boolean private_;
    public Repository withPrivate(Boolean private_) {
        this.private_ = private_;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("release_counter")
    public Long releaseCounter;
    public Repository withReleaseCounter(Long releaseCounter) {
        this.releaseCounter = releaseCounter;
        return this;
    }
    
    /**
     * RepoTransfer represents a pending repo transfer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repo_transfer")
    public RepoTransfer repoTransfer;
    public Repository withRepoTransfer(RepoTransfer repoTransfer) {
        this.repoTransfer = repoTransfer;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Long size;
    public Repository withSize(Long size) {
        this.size = size;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssh_url")
    public String sshUrl;
    public Repository withSshUrl(String sshUrl) {
        this.sshUrl = sshUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stars_count")
    public Long starsCount;
    public Repository withStarsCount(Long starsCount) {
        this.starsCount = starsCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template")
    public Boolean template;
    public Repository withTemplate(Boolean template) {
        this.template = template;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Repository withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watchers_count")
    public Long watchersCount;
    public Repository withWatchersCount(Long watchersCount) {
        this.watchersCount = watchersCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    public String website;
    public Repository withWebsite(String website) {
        this.website = website;
        return this;
    }
    
}
