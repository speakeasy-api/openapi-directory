/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Secret - A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.
 */
public class Secret {
    /**
     * Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public java.util.Map<String, String> annotations;

    public Secret withAnnotations(java.util.Map<String, String> annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * Output only. The time at which the Secret was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTime")
    public String createTime;

    public Secret withCreateTime(String createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Optional. Etag of the currently stored Secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;

    public Secret withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expireTime")
    public String expireTime;

    public Secret withExpireTime(String expireTime) {
        this.expireTime = expireTime;
        return this;
    }
    
    /**
     * The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\p{Ll}\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\p{Ll}\p{Lo}\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public java.util.Map<String, String> labels;

    public Secret withLabels(java.util.Map<String, String> labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Output only. The resource name of the Secret in the format `projects/* /secrets/*`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public Secret withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A policy that defines the replication and encryption configuration of data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replication")
    public Replication replication;

    public Secret withReplication(Replication replication) {
        this.replication = replication;
        return this;
    }
    
    /**
     * The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rotation")
    public Rotation rotation;

    public Secret withRotation(Rotation rotation) {
        this.rotation = rotation;
        return this;
    }
    
    /**
     * Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topics")
    public Topic[] topics;

    public Secret withTopics(Topic[] topics) {
        this.topics = topics;
        return this;
    }
    
    /**
     * Input only. The TTL for the Secret.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ttl")
    public String ttl;

    public Secret withTtl(String ttl) {
        this.ttl = ttl;
        return this;
    }
    
    /**
     * Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. At launch Access by Allias will only be supported on GetSecretVersion and AccessSecretVersion.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("versionAliases")
    public java.util.Map<String, String> versionAliases;

    public Secret withVersionAliases(java.util.Map<String, String> versionAliases) {
        this.versionAliases = versionAliases;
        return this;
    }
    
    public Secret(){}
}
