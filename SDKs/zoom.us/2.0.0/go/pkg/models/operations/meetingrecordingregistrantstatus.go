// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type MeetingRecordingRegistrantStatusSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type MeetingRecordingRegistrantStatusApplicationJSONActionEnum string

const (
	MeetingRecordingRegistrantStatusApplicationJSONActionEnumApprove MeetingRecordingRegistrantStatusApplicationJSONActionEnum = "approve"
	MeetingRecordingRegistrantStatusApplicationJSONActionEnumDeny    MeetingRecordingRegistrantStatusApplicationJSONActionEnum = "deny"
)

func (e *MeetingRecordingRegistrantStatusApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "approve":
		fallthrough
	case "deny":
		*e = MeetingRecordingRegistrantStatusApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MeetingRecordingRegistrantStatusApplicationJSONActionEnum: %s", s)
	}
}

type MeetingRecordingRegistrantStatusApplicationJSONRegistrants struct {
	ID *string `json:"id,omitempty"`
}

// MeetingRecordingRegistrantStatusApplicationJSON - Registrant Status
type MeetingRecordingRegistrantStatusApplicationJSON struct {
	Action MeetingRecordingRegistrantStatusApplicationJSONActionEnum `json:"action"`
	// List of registrants
	Registrants []MeetingRecordingRegistrantStatusApplicationJSONRegistrants `json:"registrants,omitempty"`
}

type MeetingRecordingRegistrantStatusRequest struct {
	RequestBody MeetingRecordingRegistrantStatusApplicationJSON `request:"mediaType=application/json"`
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

type MeetingRecordingRegistrantStatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
