/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class TestPatchTestSeriesSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class TestPatchTestSeriesNameOfTheTestSeries extends SpeakeasyBase {
  /**
   * Name of the new test series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class TestPatchTestSeriesRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: TestPatchTestSeriesNameOfTheTestSeries;

  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The slug of the test series
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=test_series_slug",
  })
  testSeriesSlug: string;
}

/**
 * Most important information about a test run.
 */
export class TestPatchTestSeriesTestSeriesTestRunSummary extends SpeakeasyBase {
  /**
   * Tells whether the test run has completed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completed" })
  completed?: boolean;

  /**
   * Date of the test run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  date?: string;

  /**
   * Number of failed tests
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failed" })
  failed?: number;

  /**
   * Number of passed tests
   */
  @SpeakeasyMetadata()
  @Expose({ name: "passed" })
  passed?: number;

  /**
   * Human-readable status of the test run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "statusDescription" })
  statusDescription?: string;
}

/**
 * Summary of a single test series
 */
export class TestPatchTestSeriesTestSeries extends SpeakeasyBase {
  /**
   * Date of the latest test run that used this test series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "mostRecentActivity" })
  mostRecentActivity?: string;

  /**
   * Name of the test series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Unique, human-readable identifier of the test series
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug: string;

  /**
   * Most recent test runs
   */
  @SpeakeasyMetadata({ elemType: TestPatchTestSeriesTestSeriesTestRunSummary })
  @Expose({ name: "testRuns" })
  @Type(() => TestPatchTestSeriesTestSeriesTestRunSummary)
  testRuns?: TestPatchTestSeriesTestSeriesTestRunSummary[];
}

export class TestPatchTestSeriesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Test series was successfully patched
   */
  @SpeakeasyMetadata()
  testSeries?: TestPatchTestSeriesTestSeries;
}
