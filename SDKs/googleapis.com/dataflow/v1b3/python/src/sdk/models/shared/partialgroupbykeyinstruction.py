"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instructioninput as shared_instructioninput
from ..shared import sideinputinfo as shared_sideinputinfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PartialGroupByKeyInstruction:
    r"""An instruction that does a partial group-by-key. One input and one output."""
    
    input: Optional[shared_instructioninput.InstructionInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input'), 'exclude': lambda f: f is None }})
    r"""An input of an instruction, as a reference to an output of a producer instruction."""  
    input_element_codec: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inputElementCodec'), 'exclude': lambda f: f is None }})
    r"""The codec to use for interpreting an element in the input PTable."""  
    original_combine_values_input_store_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalCombineValuesInputStoreName'), 'exclude': lambda f: f is None }})
    r"""If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues."""  
    original_combine_values_step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('originalCombineValuesStepName'), 'exclude': lambda f: f is None }})
    r"""If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction."""  
    side_inputs: Optional[list[shared_sideinputinfo.SideInputInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sideInputs'), 'exclude': lambda f: f is None }})
    r"""Zero or more side inputs."""  
    value_combining_fn: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valueCombiningFn'), 'exclude': lambda f: f is None }})
    r"""The value combining function to invoke."""  
    