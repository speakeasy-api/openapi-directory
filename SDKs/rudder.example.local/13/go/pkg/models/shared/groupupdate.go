// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GroupUpdateQueryCompositionEnum - Boolean operator to use between each  `where` criteria.
type GroupUpdateQueryCompositionEnum string

const (
	GroupUpdateQueryCompositionEnumAnd GroupUpdateQueryCompositionEnum = "and"
	GroupUpdateQueryCompositionEnumOr  GroupUpdateQueryCompositionEnum = "or"
)

func (e *GroupUpdateQueryCompositionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "and":
		fallthrough
	case "or":
		*e = GroupUpdateQueryCompositionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupUpdateQueryCompositionEnum: %s", s)
	}
}

type GroupUpdateQueryWhere struct {
	// Attribute to compare
	Attribute *string `json:"attribute,omitempty"`
	// Comparator to use
	Comparator *string `json:"comparator,omitempty"`
	// Type of the object
	ObjectType *string `json:"objectType,omitempty"`
	// Value to compare against
	Value *string `json:"value,omitempty"`
}

// GroupUpdateQuery - The criteria defining the group. If not provided, the group will be empty.
type GroupUpdateQuery struct {
	// Boolean operator to use between each  `where` criteria.
	Composition *GroupUpdateQueryCompositionEnum `json:"composition,omitempty"`
	// What kind of data we want to include. Here we can get policy servers/relay by setting `nodeAndPolicyServer`. Only used if `where` is defined.
	Select *string `json:"select,omitempty"`
	// List of criteria
	Where []GroupUpdateQueryWhere `json:"where,omitempty"`
}

type GroupUpdate struct {
	// Id of the new group's category
	Category *string `json:"category,omitempty"`
	// Group description
	Description *string `json:"description,omitempty"`
	// Name of the group
	DisplayName *string `json:"displayName,omitempty"`
	// Should the group be dynamically refreshed (if not, it is a static group)
	Dynamic *bool `json:"dynamic,omitempty"`
	// Enable or disable the group
	Enabled *bool `json:"enabled,omitempty"`
	// The criteria defining the group. If not provided, the group will be empty.
	Query *GroupUpdateQuery `json:"query,omitempty"`
}
