import { SpeakeasyBase } from "../../../internal/utils";
import { ClientDetailsApiModel } from "./clientdetailsapimodel";
import { CurrencyDetailsApiModel } from "./currencydetailsapimodel";
import { EstimationActivityApiModel } from "./estimationactivityapimodel";
import { EstimationAttachmentApiModel } from "./estimationattachmentapimodel";
import { EstimationGatewayApiModel } from "./estimationgatewayapimodel";
import { EstimationItemApiModel } from "./estimationitemapimodel";
/**
 * Indicate the status of the estimation (paid/unpaid/overdue)
 */
export declare enum EstimationFullDetailsApiModelStatusEnum {
    Draft = "Draft",
    Accepted = "Accepted",
    Rejected = "Rejected"
}
/**
 * OK
 */
export declare class EstimationFullDetailsApiModel extends SpeakeasyBase {
    /**
     * Security access token used for accessing the estimation anonymously
     */
    accessToken?: string;
    /**
     * List of estimation activities. estimation audit log
     */
    activities?: EstimationActivityApiModel[];
    /**
     * List of estimation attachments
     */
    attachments?: EstimationAttachmentApiModel[];
    client?: ClientDetailsApiModel;
    /**
     * Indicate from which estimation this estimation has been cloned from
     */
    clonedFromId?: number;
    currency?: CurrencyDetailsApiModel;
    /**
     * Amount that goes as a discount
     */
    discountAmount?: number;
    /**
     * Indicates when the estimation will be proclamed as due
     */
    expiresOn?: Date;
    /**
     * Estimation id
     */
    id?: number;
    /**
     * Indicates when the estimation was issued
     */
    issuedOn?: Date;
    /**
     * List of estimation items
     */
    items?: EstimationItemApiModel[];
    /**
     * Internal note regarding the estimation
     */
    notes?: string;
    /**
     * Unique estimation number
     */
    number?: string;
    /**
     * List of enabled payment gateways for this estimation
     */
    paymentGateways?: EstimationGatewayApiModel[];
    /**
     * Unique number generated by the buyer
     */
    poNumber?: string;
    /**
     * Indicate the status of the estimation (paid/unpaid/overdue)
     */
    status?: EstimationFullDetailsApiModelStatusEnum;
    /**
     * Total amount of the estimation without tax
     */
    subTotalAmount?: number;
    /**
     * Amount that goes to the tax
     */
    taxAmount?: number;
    /**
     * Terms of agreement
     */
    terms?: string;
    /**
     * Total amount of the estimation with tax
     */
    totalAmount?: number;
}
