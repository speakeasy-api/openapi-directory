"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PromotionSummaryReport:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_promotion_summary_report(self, request: operations.GetPromotionSummaryReportRequest, security: operations.GetPromotionSummaryReportSecurity) -> operations.GetPromotionSummaryReportResponse:
        r"""This method generates a report that summarizes the seller's promotions for the specified eBay marketplace. The report returns information on <code>RUNNING</code>, <code>PAUSED</code>, and <code>ENDED</code> promotions (deleted reports are not returned) and summarizes the seller's campaign performance for all promotions on a given site.  <br><br>For information about summary reports, see <a href=\\"/api-docs/sell/static/marketing/pm-summary-report.html\\">Reading the item promotion Summary report</a>."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/promotion_summary_report'
        
        query_params = utils.get_query_params(operations.GetPromotionSummaryReportRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPromotionSummaryReportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SummaryReportResponse])
                res.summary_report_response = out
        elif http_res.status_code in [400, 404, 500]:
            pass

        return res

    