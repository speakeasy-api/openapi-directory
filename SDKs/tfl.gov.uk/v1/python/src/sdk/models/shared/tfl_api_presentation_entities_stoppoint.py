"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_additionalproperties as shared_tfl_api_presentation_entities_additionalproperties
from ..shared import tfl_api_presentation_entities_identifier as shared_tfl_api_presentation_entities_identifier
from ..shared import tfl_api_presentation_entities_linegroup as shared_tfl_api_presentation_entities_linegroup
from ..shared import tfl_api_presentation_entities_linemodegroup as shared_tfl_api_presentation_entities_linemodegroup
from ..shared import tfl_api_presentation_entities_place as shared_tfl_api_presentation_entities_place
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesStopPoint:
    
    accessibility_summary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessibilitySummary'), 'exclude': lambda f: f is None }})  
    additional_properties: Optional[list[shared_tfl_api_presentation_entities_additionalproperties.TflAPIPresentationEntitiesAdditionalProperties]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalProperties'), 'exclude': lambda f: f is None }})
    r"""A bag of additional key/value pairs with extra information about this place."""  
    children: Optional[list[shared_tfl_api_presentation_entities_place.TflAPIPresentationEntitiesPlace]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('children'), 'exclude': lambda f: f is None }})  
    children_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childrenUrls'), 'exclude': lambda f: f is None }})  
    common_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commonName'), 'exclude': lambda f: f is None }})
    r"""A human readable name."""  
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    r"""The distance of the place from its search point, if this is the result
                of a geographical search, otherwise zero.
    """  
    full_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullName'), 'exclude': lambda f: f is None }})  
    hub_naptan_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hubNaptanCode'), 'exclude': lambda f: f is None }})  
    ics_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('icsCode'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier."""  
    indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('indicator'), 'exclude': lambda f: f is None }})
    r"""The indicator of the stop point e.g. \\"Stop K\\" """  
    individual_stop_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualStopId'), 'exclude': lambda f: f is None }})  
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})
    r"""WGS84 latitude of the location."""  
    line_group: Optional[list[shared_tfl_api_presentation_entities_linegroup.TflAPIPresentationEntitiesLineGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineGroup'), 'exclude': lambda f: f is None }})  
    line_mode_groups: Optional[list[shared_tfl_api_presentation_entities_linemodegroup.TflAPIPresentationEntitiesLineModeGroup]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineModeGroups'), 'exclude': lambda f: f is None }})  
    lines: Optional[list[shared_tfl_api_presentation_entities_identifier.TflAPIPresentationEntitiesIdentifier]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lines'), 'exclude': lambda f: f is None }})  
    lon: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lon'), 'exclude': lambda f: f is None }})
    r"""WGS84 longitude of the location."""  
    modes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modes'), 'exclude': lambda f: f is None }})  
    naptan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('naptanId'), 'exclude': lambda f: f is None }})  
    naptan_mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('naptanMode'), 'exclude': lambda f: f is None }})  
    place_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placeType'), 'exclude': lambda f: f is None }})
    r"""The type of Place. See /Place/Meta/placeTypes for possible values."""  
    platform_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformName'), 'exclude': lambda f: f is None }})  
    sms_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smsCode'), 'exclude': lambda f: f is None }})  
    station_naptan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stationNaptan'), 'exclude': lambda f: f is None }})  
    status: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    stop_letter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopLetter'), 'exclude': lambda f: f is None }})
    r"""The stop letter, if it could be cleansed from the Indicator e.g. \\"K\\" """  
    stop_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopType'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The unique location of this resource."""  
    