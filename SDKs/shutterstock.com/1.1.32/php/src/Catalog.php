<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Catalog 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add items to catalog collections
     * 
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user's account's catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddToCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddToCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddToCollectionResponse
     */
	public function addToCollection(
        \OpenAPI\OpenAPI\Models\Operations\AddToCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddToCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddToCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/collections/{collection_id}/items', \OpenAPI\OpenAPI\Models\Operations\AddToCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createCatalogCollectionItems", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddToCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogCollection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create catalog collections
     * 
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateCatalogCollection $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
     */
	public function createCollection(
        \OpenAPI\OpenAPI\Models\Shared\CreateCatalogCollection $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/collections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogCollection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete catalog collections
     * 
     * This endpoint deletes a catalog collection. It does not remove the assets from the user's account's catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
     */
	public function deleteCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/collections/{collection_id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Remove items from catalog collection
     * 
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user's account's catalog.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionResponse
     */
	public function deleteFromCollection(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/collections/{collection_id}/items', \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "removeCatalogCollectionItems", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFromCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogCollection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List catalog collections
     * 
     * This endpoint returns a list of catalog collections.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCollectionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCollectionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCollectionsResponse
     */
	public function getCollections(
        \OpenAPI\OpenAPI\Models\Operations\GetCollectionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCollectionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCollectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/collections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCollectionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCollectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogCollectionDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogCollectionDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Search catalogs for assets
     * 
     * This endpoint searches for assets in the account's catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchCatalogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchCatalogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchCatalogResponse
     */
	public function searchCatalog(
        \OpenAPI\OpenAPI\Models\Operations\SearchCatalogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SearchCatalogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchCatalogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchCatalogRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchCatalogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogCollectionItemDataList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogCollectionItemDataList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Update collection metadata
     * 
     * This endpoint updates the metadata of a catalog collection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionResponse
     */
	public function updateCollection(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/catalog/collections/{collection_id}', \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateCatalogCollection", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCollectionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->catalogCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CatalogCollection', 'json');
            }
        }

        return $response;
    }
}