"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CustomErrorRule:
    r"""A custom error rule."""
    
    is_error_type: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isErrorType'), 'exclude': lambda f: f is None }})
    r"""Mark this message as possible payload in error response. Otherwise, objects of this type will be filtered when they appear in error payload."""  
    selector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selector'), 'exclude': lambda f: f is None }})
    r"""Selects messages to which this rule applies. Refer to selector for syntax details."""  
    