// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// IndexFacesXAmzTargetEnum
type IndexFacesXAmzTargetEnum string

const (
	IndexFacesXAmzTargetEnumRekognitionServiceIndexFaces IndexFacesXAmzTargetEnum = "RekognitionService.IndexFaces"
)

func (e IndexFacesXAmzTargetEnum) ToPointer() *IndexFacesXAmzTargetEnum {
	return &e
}

func (e *IndexFacesXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RekognitionService.IndexFaces":
		*e = IndexFacesXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IndexFacesXAmzTargetEnum: %v", v)
	}
}

type IndexFacesRequest struct {
	IndexFacesRequest shared.IndexFacesRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        IndexFacesXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type IndexFacesResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// ImageTooLargeException
	ImageTooLargeException interface{}
	// Success
	IndexFacesResponse *shared.IndexFacesResponse
	// InternalServerError
	InternalServerError interface{}
	// InvalidImageFormatException
	InvalidImageFormatException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidS3ObjectException
	InvalidS3ObjectException interface{}
	// ProvisionedThroughputExceededException
	ProvisionedThroughputExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	StatusCode                    int
	RawResponse                   *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
