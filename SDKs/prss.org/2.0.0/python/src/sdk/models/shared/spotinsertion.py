"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpotInsertionInput:
    r"""A spot insertion for playing a series of spots when a cue is received during a program."""
    
    broadcast_service_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('broadcastServiceId') }})
    r"""The ID of the broadcast service for the spot insertion."""  
    cue: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cue') }})
    r"""The cue that triggers the spot insertion."""  
    duration: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The duration of the spot insertion."""  
    end_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date the spot insertion ends. The time will be set to midnight Eastern Time."""  
    program_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('programId') }})
    r"""The ID of the program for the spot insertion."""  
    spots: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spots') }})
    r"""The ordered list of spot IDs to play."""  
    start_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date the spot insertion can start. The time will be set to midnight Eastern Time."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SpotInsertion:
    r"""A spot insertion for playing a series of spots when a cue is received during a program."""
    
    broadcast_service_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('broadcastServiceId') }})
    r"""The ID of the broadcast service for the spot insertion."""  
    cue: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cue') }})
    r"""The cue that triggers the spot insertion."""  
    duration: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration') }})
    r"""The duration of the spot insertion."""  
    end_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date the spot insertion ends. The time will be set to midnight Eastern Time."""  
    program_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('programId') }})
    r"""The ID of the program for the spot insertion."""  
    spots: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spots') }})
    r"""The ordered list of spot IDs to play."""  
    start_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The date the spot insertion can start. The time will be set to midnight Eastern Time."""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time the spot insertion was created. Generated at creation."""  
    customer_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customerId'), 'exclude': lambda f: f is None }})
    r"""The ID of the customer who owns the spot insertion. Set to the logged-in customer at creation."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The unique ID of the spot insertion. Generated at creation."""  
    