"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AssessmentGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_offerings_offering_id_groups_group_id_learners_user_email_(self, request: operations.DeleteOfferingsOfferingIDGroupsGroupIDLearnersUserEmailRequest) -> operations.DeleteOfferingsOfferingIDGroupsGroupIDLearnersUserEmailResponse:
        r"""Remove a learner from an assessment group
        Removes a learner from the specified assessment group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOfferingsOfferingIDGroupsGroupIDLearnersUserEmailRequest, base_url, '/offerings/{offeringId}/groups/{groupId}/learners/{userEmail}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOfferingsOfferingIDGroupsGroupIDLearnersUserEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_groups(self, request: operations.GetOfferingsOfferingIDGroupsRequest) -> operations.GetOfferingsOfferingIDGroupsResponse:
        r"""Find assessment groups
        Responds with a list of assessment groups in an offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDGroupsRequest, base_url, '/offerings/{offeringId}/groups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AssessmentGroupResponse]])
                res.assessment_group_responses = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_offerings_offering_id_groups_group_id_learners(self, request: operations.GetOfferingsOfferingIDGroupsGroupIDLearnersRequest) -> operations.GetOfferingsOfferingIDGroupsGroupIDLearnersResponse:
        r"""Find learners in an assessment group
        Responds with a list of learners in a specified assessment group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOfferingsOfferingIDGroupsGroupIDLearnersRequest, base_url, '/offerings/{offeringId}/groups/{groupId}/learners', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOfferingsOfferingIDGroupsGroupIDLearnersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserResponse]])
                res.user_responses = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_offerings_offering_id_groups(self, request: operations.PostOfferingsOfferingIDGroupsRequest) -> operations.PostOfferingsOfferingIDGroupsResponse:
        r"""Add an assessment group
        Creates a new assessment group in an offering.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOfferingsOfferingIDGroupsRequest, base_url, '/offerings/{offeringId}/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "assessment_group_required", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOfferingsOfferingIDGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AssessmentGroupResponse])
                res.assessment_group_response = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_offerings_offering_id_groups_group_id_learners(self, request: operations.PostOfferingsOfferingIDGroupsGroupIDLearnersRequest) -> operations.PostOfferingsOfferingIDGroupsGroupIDLearnersResponse:
        r"""Add a learner to an assessment group
        Adds a learner into the specified assessment group.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostOfferingsOfferingIDGroupsGroupIDLearnersRequest, base_url, '/offerings/{offeringId}/groups/{groupId}/learners', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostOfferingsOfferingIDGroupsGroupIDLearnersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserResponse])
                res.user_response = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    