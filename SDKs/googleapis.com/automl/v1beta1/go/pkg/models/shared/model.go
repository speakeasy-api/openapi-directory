// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ModelDeploymentStateEnum - Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
type ModelDeploymentStateEnum string

const (
	ModelDeploymentStateEnumDeploymentStateUnspecified ModelDeploymentStateEnum = "DEPLOYMENT_STATE_UNSPECIFIED"
	ModelDeploymentStateEnumDeployed                   ModelDeploymentStateEnum = "DEPLOYED"
	ModelDeploymentStateEnumUndeployed                 ModelDeploymentStateEnum = "UNDEPLOYED"
)

func (e *ModelDeploymentStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DEPLOYMENT_STATE_UNSPECIFIED":
		fallthrough
	case "DEPLOYED":
		fallthrough
	case "UNDEPLOYED":
		*e = ModelDeploymentStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ModelDeploymentStateEnum: %s", s)
	}
}

// Model - API proto representing a trained machine learning model.
type Model struct {
	// Output only. Timestamp when the model training finished and can be used for prediction.
	CreateTime *string `json:"createTime,omitempty"`
	// Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location.
	DatasetID *string `json:"datasetId,omitempty"`
	// Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
	DeploymentState *ModelDeploymentStateEnum `json:"deploymentState,omitempty"`
	// Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter.
	DisplayName *string `json:"displayName,omitempty"`
	// Model metadata for image classification.
	ImageClassificationModelMetadata *ImageClassificationModelMetadata `json:"imageClassificationModelMetadata,omitempty"`
	// Model metadata specific to image object detection.
	ImageObjectDetectionModelMetadata *ImageObjectDetectionModelMetadata `json:"imageObjectDetectionModelMetadata,omitempty"`
	// Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`
	Name *string `json:"name,omitempty"`
	// Model metadata specific to AutoML Tables.
	TablesModelMetadata *TablesModelMetadata `json:"tablesModelMetadata,omitempty"`
	// Model metadata that is specific to text classification.
	TextClassificationModelMetadata *TextClassificationModelMetadata `json:"textClassificationModelMetadata,omitempty"`
	// Model metadata that is specific to text extraction.
	TextExtractionModelMetadata *TextExtractionModelMetadata `json:"textExtractionModelMetadata,omitempty"`
	// Model metadata that is specific to text sentiment.
	TextSentimentModelMetadata map[string]interface{} `json:"textSentimentModelMetadata,omitempty"`
	// Output only. The number of examples in the training set used for the model creation.
	TrainExampleCount *int `json:"trainExampleCount,omitempty"`
	// Model metadata that is specific to translation.
	TranslationModelMetadata *TranslationModelMetadata `json:"translationModelMetadata,omitempty"`
	// Output only. Timestamp when this model was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
	// Output only. The number of examples in the validation set used for the model creation.
	ValidateExampleCount *int `json:"validateExampleCount,omitempty"`
	// Model metadata specific to video classification.
	VideoClassificationModelMetadata map[string]interface{} `json:"videoClassificationModelMetadata,omitempty"`
	// Model metadata specific to video object tracking.
	VideoObjectTrackingModelMetadata map[string]interface{} `json:"videoObjectTrackingModelMetadata,omitempty"`
}

// ModelInput - API proto representing a trained machine learning model.
type ModelInput struct {
	// Output only. Timestamp when the model training finished and can be used for prediction.
	CreateTime *string `json:"createTime,omitempty"`
	// Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location.
	DatasetID *string `json:"datasetId,omitempty"`
	// Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
	DeploymentState *ModelDeploymentStateEnum `json:"deploymentState,omitempty"`
	// Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter.
	DisplayName *string `json:"displayName,omitempty"`
	// Model metadata for image classification.
	ImageClassificationModelMetadata *ImageClassificationModelMetadata `json:"imageClassificationModelMetadata,omitempty"`
	// Model metadata specific to image object detection.
	ImageObjectDetectionModelMetadata *ImageObjectDetectionModelMetadata `json:"imageObjectDetectionModelMetadata,omitempty"`
	// Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`
	Name *string `json:"name,omitempty"`
	// Model metadata specific to AutoML Tables.
	TablesModelMetadata *TablesModelMetadata `json:"tablesModelMetadata,omitempty"`
	// Model metadata that is specific to text classification.
	TextClassificationModelMetadata *TextClassificationModelMetadata `json:"textClassificationModelMetadata,omitempty"`
	// Model metadata that is specific to text extraction.
	TextExtractionModelMetadata *TextExtractionModelMetadata `json:"textExtractionModelMetadata,omitempty"`
	// Model metadata that is specific to text sentiment.
	TextSentimentModelMetadata map[string]interface{} `json:"textSentimentModelMetadata,omitempty"`
	// Model metadata that is specific to translation.
	TranslationModelMetadata *TranslationModelMetadata `json:"translationModelMetadata,omitempty"`
	// Output only. Timestamp when this model was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
	// Model metadata specific to video classification.
	VideoClassificationModelMetadata map[string]interface{} `json:"videoClassificationModelMetadata,omitempty"`
	// Model metadata specific to video object tracking.
	VideoObjectTrackingModelMetadata map[string]interface{} `json:"videoObjectTrackingModelMetadata,omitempty"`
}
