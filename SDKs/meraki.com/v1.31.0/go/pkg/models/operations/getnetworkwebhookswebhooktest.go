// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkWebhooksWebhookTestPathParams struct {
	NetworkID     string `pathParam:"style=simple,explode=false,name=networkId"`
	WebhookTestID string `pathParam:"style=simple,explode=false,name=webhookTestId"`
}

type GetNetworkWebhooksWebhookTestRequest struct {
	PathParams GetNetworkWebhooksWebhookTestPathParams
}

// GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum - Current status of the webhook delivery
type GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum string

const (
	GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnumAbandoned  GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum = "abandoned"
	GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnumDelivered  GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum = "delivered"
	GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnumEnqueued   GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum = "enqueued"
	GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnumProcessing GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum = "processing"
	GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnumRetrying   GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum = "retrying"
)

func (e *GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "abandoned":
		fallthrough
	case "delivered":
		fallthrough
	case "enqueued":
		fallthrough
	case "processing":
		fallthrough
	case "retrying":
		*e = GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetNetworkWebhooksWebhookTest200ApplicationJSON - Successful operation
type GetNetworkWebhooksWebhookTest200ApplicationJSON struct {
	// Webhook delivery identifier
	ID *string `json:"id,omitempty"`
	// Current status of the webhook delivery
	Status *GetNetworkWebhooksWebhookTest200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// URL where the webhook was delivered
	URL *string `json:"url,omitempty"`
}

type GetNetworkWebhooksWebhookTestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkWebhooksWebhookTest200ApplicationJSONObject *GetNetworkWebhooksWebhookTest200ApplicationJSON
}
