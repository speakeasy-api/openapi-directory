<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Filters an organization's assets and groups them by their specified properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupResponse
     */
	public function securitycenterProjectsAssetsGroup(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/assets:group', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupAssetsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupAssetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupAssetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists an organization's assets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListResponse
     */
	public function securitycenterProjectsAssetsList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/assets', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsAssetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAssetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a BigQuery export.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateResponse
     */
	public function securitycenterProjectsBigQueryExportsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/bigQueryExports', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudSecuritycenterV1BigQueryExportInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1BigQueryExport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1BigQueryExport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListResponse
     */
	public function securitycenterProjectsBigQueryExportsList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/bigQueryExports', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsBigQueryExportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBigQueryExportsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBigQueryExportsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteResponse
     */
	public function securitycenterProjectsFindingsBulkMute(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/findings:bulkMute', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkMuteFindingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsFindingsBulkMuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a mute config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateResponse
     */
	public function securitycenterProjectsMuteConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/muteConfigs', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudSecuritycenterV1MuteConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1MuteConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1MuteConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists mute configs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListResponse
     */
	public function securitycenterProjectsMuteConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/muteConfigs', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsMuteConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMuteConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMuteConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a notification config.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateResponse
     */
	public function securitycenterProjectsNotificationConfigsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/notificationConfigs', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "notificationConfigInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NotificationConfig', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists notification configs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListResponse
     */
	public function securitycenterProjectsNotificationConfigsList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/notificationConfigs', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsNotificationConfigsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNotificationConfigsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNotificationConfigsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a resident SecurityHealthAnalyticsCustomModule at the scope of the given CRM parent, and also creates inherited SecurityHealthAnalyticsCustomModules for all CRM descendants of the given parent. These modules are enabled by default.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateResponse
     */
	public function securitycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreate(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/customModules', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudSecuritycenterV1SecurityHealthAnalyticsCustomModuleInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1SecurityHealthAnalyticsCustomModule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1SecurityHealthAnalyticsCustomModule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified SecurityHealthAnalyticsCustomModule and all of its descendants in the CRM hierarchy. This method is only supported for resident custom modules.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteResponse
     */
	public function securitycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDelete(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all SecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListResponse
     */
	public function securitycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/customModules', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSecurityHealthAnalyticsCustomModulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSecurityHealthAnalyticsCustomModulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all resident SecurityHealthAnalyticsCustomModules under the given CRM parent and all of the parent’s CRM descendants.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantResponse
     */
	public function securitycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendant(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/customModules:listDescendant', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsCustomModulesListDescendantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDescendantSecurityHealthAnalyticsCustomModulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListDescendantSecurityHealthAnalyticsCustomModulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an EffectiveSecurityHealthAnalyticsCustomModule.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetResponse
     */
	public function securitycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGet(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1EffectiveSecurityHealthAnalyticsCustomModule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1EffectiveSecurityHealthAnalyticsCustomModule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of all EffectiveSecurityHealthAnalyticsCustomModules for the given parent. This includes resident modules defined at the scope of the parent, and inherited modules, inherited from CRM ancestors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListResponse
     */
	public function securitycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/effectiveCustomModules', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSecurityHealthAnalyticsSettingsEffectiveCustomModulesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEffectiveSecurityHealthAnalyticsCustomModulesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListEffectiveSecurityHealthAnalyticsCustomModulesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates external system. This is for a given finding.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchResponse
     */
	public function securitycenterProjectsSourcesFindingsExternalSystemsPatch(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudSecuritycenterV1ExternalSystem", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsExternalSystemsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1ExternalSystem = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1ExternalSystem', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupResponse
     */
	public function securitycenterProjectsSourcesFindingsGroup(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/findings:group', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupFindingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupFindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupFindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListResponse
     */
	public function securitycenterProjectsSourcesFindingsList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/findings', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the mute state of a finding.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteResponse
     */
	public function securitycenterProjectsSourcesFindingsSetMute(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:setMute', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setMuteRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetMuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->finding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Finding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the state of a finding.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateResponse
     */
	public function securitycenterProjectsSourcesFindingsSetState(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:setState', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setFindingStateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesFindingsSetStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->finding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Finding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all sources belonging to an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListResponse
     */
	public function securitycenterProjectsSourcesList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/sources', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterProjectsSourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSourcesResponse', 'json');
            }
        }

        return $response;
    }
}