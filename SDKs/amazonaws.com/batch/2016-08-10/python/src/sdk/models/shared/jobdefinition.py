"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import containerproperties as shared_containerproperties
from ..shared import eksproperties as shared_eksproperties
from ..shared import jobtimeout as shared_jobtimeout
from ..shared import nodeproperties as shared_nodeproperties
from ..shared import orchestrationtype_enum as shared_orchestrationtype_enum
from ..shared import platformcapability_enum as shared_platformcapability_enum
from ..shared import retrystrategy as shared_retrystrategy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobDefinition:
    r"""An object that represents an Batch job definition."""
    
    job_definition_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobDefinitionArn') }})  
    job_definition_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jobDefinitionName') }})  
    revision: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revision') }})  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    container_orchestration_type: Optional[shared_orchestrationtype_enum.OrchestrationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerOrchestrationType'), 'exclude': lambda f: f is None }})  
    container_properties: Optional[shared_containerproperties.ContainerProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerProperties'), 'exclude': lambda f: f is None }})  
    eks_properties: Optional[shared_eksproperties.EksProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eksProperties'), 'exclude': lambda f: f is None }})  
    node_properties: Optional[shared_nodeproperties.NodeProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeProperties'), 'exclude': lambda f: f is None }})  
    parameters: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})  
    platform_capabilities: Optional[list[shared_platformcapability_enum.PlatformCapabilityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platformCapabilities'), 'exclude': lambda f: f is None }})  
    propagate_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propagateTags'), 'exclude': lambda f: f is None }})  
    retry_strategy: Optional[shared_retrystrategy.RetryStrategy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryStrategy'), 'exclude': lambda f: f is None }})  
    scheduling_priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedulingPriority'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    timeout: Optional[shared_jobtimeout.JobTimeout] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeout'), 'exclude': lambda f: f is None }})  
    