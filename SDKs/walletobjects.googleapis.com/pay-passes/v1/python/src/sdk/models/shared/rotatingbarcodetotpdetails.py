"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import rotatingbarcodetotpdetailstotpparameters as shared_rotatingbarcodetotpdetailstotpparameters
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RotatingBarcodeTotpDetailsAlgorithmEnum(str, Enum):
    r"""The TOTP algorithm used to generate the OTP."""
    TOTP_ALGORITHM_UNSPECIFIED = 'TOTP_ALGORITHM_UNSPECIFIED'
    TOTP_SHA1 = 'TOTP_SHA1'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RotatingBarcodeTotpDetails:
    r"""Configuration for the time-based OTP substitutions. See https://tools.ietf.org/html/rfc6238"""
    
    algorithm: Optional[RotatingBarcodeTotpDetailsAlgorithmEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('algorithm'), 'exclude': lambda f: f is None }})
    r"""The TOTP algorithm used to generate the OTP."""  
    parameters: Optional[list[shared_rotatingbarcodetotpdetailstotpparameters.RotatingBarcodeTotpDetailsTotpParameters]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters'), 'exclude': lambda f: f is None }})
    r"""The TOTP parameters for each of the {totp_value_*} substitutions. The TotpParameters at index n is used for the {totp_value_n} substitution."""  
    period_millis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('periodMillis'), 'exclude': lambda f: f is None }})
    r"""The time interval used for the TOTP value generation, in milliseconds."""  
    