// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddTagsXAmzTargetEnum
type AddTagsXAmzTargetEnum string

const (
	AddTagsXAmzTargetEnumSageMakerAddTags AddTagsXAmzTargetEnum = "SageMaker.AddTags"
)

func (e AddTagsXAmzTargetEnum) ToPointer() *AddTagsXAmzTargetEnum {
	return &e
}

func (e *AddTagsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.AddTags":
		*e = AddTagsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddTagsXAmzTargetEnum: %v", v)
	}
}

type AddTagsRequest struct {
	AddTagsInput      shared.AddTagsInput   `request:"mediaType=application/json"`
	XAmzAlgorithm     *string               `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string               `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string               `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string               `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string               `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string               `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string               `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AddTagsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddTagsResponse struct {
	// Success
	AddTagsOutput *shared.AddTagsOutput
	ContentType   string
	StatusCode    int
	RawResponse   *http.Response
}
