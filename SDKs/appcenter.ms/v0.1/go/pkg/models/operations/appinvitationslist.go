// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AppInvitationsListSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AppInvitationsListRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type AppInvitationsListDefaultApplicationJSONErrorCodeEnum string

const (
	AppInvitationsListDefaultApplicationJSONErrorCodeEnumBadRequest          AppInvitationsListDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	AppInvitationsListDefaultApplicationJSONErrorCodeEnumConflict            AppInvitationsListDefaultApplicationJSONErrorCodeEnum = "Conflict"
	AppInvitationsListDefaultApplicationJSONErrorCodeEnumNotAcceptable       AppInvitationsListDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	AppInvitationsListDefaultApplicationJSONErrorCodeEnumNotFound            AppInvitationsListDefaultApplicationJSONErrorCodeEnum = "NotFound"
	AppInvitationsListDefaultApplicationJSONErrorCodeEnumInternalServerError AppInvitationsListDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	AppInvitationsListDefaultApplicationJSONErrorCodeEnumUnauthorized        AppInvitationsListDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	AppInvitationsListDefaultApplicationJSONErrorCodeEnumTooManyRequests     AppInvitationsListDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e *AppInvitationsListDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = AppInvitationsListDefaultApplicationJSONErrorCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsListDefaultApplicationJSONErrorCodeEnum: %s", s)
	}
}

type AppInvitationsListDefaultApplicationJSONError struct {
	Code    AppInvitationsListDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                `json:"message"`
}

// AppInvitationsListDefaultApplicationJSON - Error
type AppInvitationsListDefaultApplicationJSON struct {
	Error AppInvitationsListDefaultApplicationJSONError `json:"error"`
}

type AppInvitationsList200ApplicationJSONAppAzureSubscription struct {
	// If the subscription can be used for billing
	IsBillable *bool `json:"is_billable,omitempty"`
	// If the subscription is used for billing
	IsBilling *bool `json:"is_billing,omitempty"`
	// If the subscription is internal Microsoft subscription
	IsMicrosoftInternal *bool `json:"is_microsoft_internal,omitempty"`
	// The azure subscription id
	SubscriptionID string `json:"subscription_id"`
	// The name of the azure subscription
	SubscriptionName string `json:"subscription_name"`
	// The tenant id of the azure subscription belongs to
	TenantID string `json:"tenant_id"`
}

type AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum string

const (
	AppInvitationsList200ApplicationJSONAppMemberPermissionsEnumManager   AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum = "manager"
	AppInvitationsList200ApplicationJSONAppMemberPermissionsEnumDeveloper AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum = "developer"
	AppInvitationsList200ApplicationJSONAppMemberPermissionsEnumViewer    AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum = "viewer"
	AppInvitationsList200ApplicationJSONAppMemberPermissionsEnumTester    AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum = "tester"
)

func (e *AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum: %s", s)
	}
}

// AppInvitationsList200ApplicationJSONAppOriginEnum - The creation origin of this app
type AppInvitationsList200ApplicationJSONAppOriginEnum string

const (
	AppInvitationsList200ApplicationJSONAppOriginEnumAppcenter AppInvitationsList200ApplicationJSONAppOriginEnum = "appcenter"
	AppInvitationsList200ApplicationJSONAppOriginEnumHockeyapp AppInvitationsList200ApplicationJSONAppOriginEnum = "hockeyapp"
	AppInvitationsList200ApplicationJSONAppOriginEnumCodepush  AppInvitationsList200ApplicationJSONAppOriginEnum = "codepush"
)

func (e *AppInvitationsList200ApplicationJSONAppOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppInvitationsList200ApplicationJSONAppOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONAppOriginEnum: %s", s)
	}
}

// AppInvitationsList200ApplicationJSONAppOsEnum - The OS the app will be running on
type AppInvitationsList200ApplicationJSONAppOsEnum string

const (
	AppInvitationsList200ApplicationJSONAppOsEnumAndroid AppInvitationsList200ApplicationJSONAppOsEnum = "Android"
	AppInvitationsList200ApplicationJSONAppOsEnumIOs     AppInvitationsList200ApplicationJSONAppOsEnum = "iOS"
	AppInvitationsList200ApplicationJSONAppOsEnumMacOs   AppInvitationsList200ApplicationJSONAppOsEnum = "macOS"
	AppInvitationsList200ApplicationJSONAppOsEnumTizen   AppInvitationsList200ApplicationJSONAppOsEnum = "Tizen"
	AppInvitationsList200ApplicationJSONAppOsEnumTvOs    AppInvitationsList200ApplicationJSONAppOsEnum = "tvOS"
	AppInvitationsList200ApplicationJSONAppOsEnumWindows AppInvitationsList200ApplicationJSONAppOsEnum = "Windows"
	AppInvitationsList200ApplicationJSONAppOsEnumLinux   AppInvitationsList200ApplicationJSONAppOsEnum = "Linux"
	AppInvitationsList200ApplicationJSONAppOsEnumCustom  AppInvitationsList200ApplicationJSONAppOsEnum = "Custom"
)

func (e *AppInvitationsList200ApplicationJSONAppOsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Android":
		fallthrough
	case "iOS":
		fallthrough
	case "macOS":
		fallthrough
	case "Tizen":
		fallthrough
	case "tvOS":
		fallthrough
	case "Windows":
		fallthrough
	case "Linux":
		fallthrough
	case "Custom":
		*e = AppInvitationsList200ApplicationJSONAppOsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONAppOsEnum: %s", s)
	}
}

// AppInvitationsList200ApplicationJSONAppOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppInvitationsList200ApplicationJSONAppOwnerTypeEnum string

const (
	AppInvitationsList200ApplicationJSONAppOwnerTypeEnumOrg  AppInvitationsList200ApplicationJSONAppOwnerTypeEnum = "org"
	AppInvitationsList200ApplicationJSONAppOwnerTypeEnumUser AppInvitationsList200ApplicationJSONAppOwnerTypeEnum = "user"
)

func (e *AppInvitationsList200ApplicationJSONAppOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = AppInvitationsList200ApplicationJSONAppOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONAppOwnerTypeEnum: %s", s)
	}
}

// AppInvitationsList200ApplicationJSONAppOwner - The information about the app's owner
type AppInvitationsList200ApplicationJSONAppOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppInvitationsList200ApplicationJSONAppOwnerTypeEnum `json:"type"`
}

// AppInvitationsList200ApplicationJSONAppPlatformEnum - The platform of the app
type AppInvitationsList200ApplicationJSONAppPlatformEnum string

const (
	AppInvitationsList200ApplicationJSONAppPlatformEnumJava            AppInvitationsList200ApplicationJSONAppPlatformEnum = "Java"
	AppInvitationsList200ApplicationJSONAppPlatformEnumObjectiveCSwift AppInvitationsList200ApplicationJSONAppPlatformEnum = "Objective-C-Swift"
	AppInvitationsList200ApplicationJSONAppPlatformEnumUwp             AppInvitationsList200ApplicationJSONAppPlatformEnum = "UWP"
	AppInvitationsList200ApplicationJSONAppPlatformEnumCordova         AppInvitationsList200ApplicationJSONAppPlatformEnum = "Cordova"
	AppInvitationsList200ApplicationJSONAppPlatformEnumReactNative     AppInvitationsList200ApplicationJSONAppPlatformEnum = "React-Native"
	AppInvitationsList200ApplicationJSONAppPlatformEnumUnity           AppInvitationsList200ApplicationJSONAppPlatformEnum = "Unity"
	AppInvitationsList200ApplicationJSONAppPlatformEnumElectron        AppInvitationsList200ApplicationJSONAppPlatformEnum = "Electron"
	AppInvitationsList200ApplicationJSONAppPlatformEnumXamarin         AppInvitationsList200ApplicationJSONAppPlatformEnum = "Xamarin"
	AppInvitationsList200ApplicationJSONAppPlatformEnumWpf             AppInvitationsList200ApplicationJSONAppPlatformEnum = "WPF"
	AppInvitationsList200ApplicationJSONAppPlatformEnumWinForms        AppInvitationsList200ApplicationJSONAppPlatformEnum = "WinForms"
	AppInvitationsList200ApplicationJSONAppPlatformEnumUnknown         AppInvitationsList200ApplicationJSONAppPlatformEnum = "Unknown"
	AppInvitationsList200ApplicationJSONAppPlatformEnumCustom          AppInvitationsList200ApplicationJSONAppPlatformEnum = "Custom"
)

func (e *AppInvitationsList200ApplicationJSONAppPlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Java":
		fallthrough
	case "Objective-C-Swift":
		fallthrough
	case "UWP":
		fallthrough
	case "Cordova":
		fallthrough
	case "React-Native":
		fallthrough
	case "Unity":
		fallthrough
	case "Electron":
		fallthrough
	case "Xamarin":
		fallthrough
	case "WPF":
		fallthrough
	case "WinForms":
		fallthrough
	case "Unknown":
		fallthrough
	case "Custom":
		*e = AppInvitationsList200ApplicationJSONAppPlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONAppPlatformEnum: %s", s)
	}
}

type AppInvitationsList200ApplicationJSONApp struct {
	// A unique and secret key used to identify the app in communication with the ingestion endpoint for crash reporting and analytics
	AppSecret         string                                                    `json:"app_secret"`
	AzureSubscription *AppInvitationsList200ApplicationJSONAppAzureSubscription `json:"azure_subscription,omitempty"`
	// The created date of this app
	CreatedAt *string `json:"created_at,omitempty"`
	// The description of the app
	Description *string `json:"description,omitempty"`
	// The display name of the app
	DisplayName string `json:"display_name"`
	// The string representation of the source of the app's icon
	IconSource *string `json:"icon_source,omitempty"`
	// The string representation of the URL pointing to the app's icon
	IconURL *string `json:"icon_url,omitempty"`
	// The unique ID (UUID) of the app
	ID string `json:"id"`
	// The permissions of the calling user
	MemberPermissions []AppInvitationsList200ApplicationJSONAppMemberPermissionsEnum `json:"member_permissions,omitempty"`
	// The name of the app used in URLs
	Name string `json:"name"`
	// The creation origin of this app
	Origin AppInvitationsList200ApplicationJSONAppOriginEnum `json:"origin"`
	// The OS the app will be running on
	Os AppInvitationsList200ApplicationJSONAppOsEnum `json:"os"`
	// The information about the app's owner
	Owner AppInvitationsList200ApplicationJSONAppOwner `json:"owner"`
	// The platform of the app
	Platform AppInvitationsList200ApplicationJSONAppPlatformEnum `json:"platform"`
	// A one-word descriptive release-type value that starts with a capital letter but is otherwise lowercase
	ReleaseType *string `json:"release_type,omitempty"`
	// The last updated date of this app
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum - The owner type. Can either be 'org' or 'user'
type AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum string

const (
	AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnumOrg  AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum = "org"
	AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnumUser AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum = "user"
)

func (e *AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "org":
		fallthrough
	case "user":
		*e = AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum: %s", s)
	}
}

// AppInvitationsList200ApplicationJSONDistributionGroupOwner - The information about the app's owner
type AppInvitationsList200ApplicationJSONDistributionGroupOwner struct {
	// The avatar URL of the owner
	AvatarURL *string `json:"avatar_url,omitempty"`
	// The owner's display name
	DisplayName string `json:"display_name"`
	// The owner's email address
	Email *string `json:"email,omitempty"`
	// The unique id (UUID) of the owner
	ID string `json:"id"`
	// The unique name that used to identify the owner
	Name string `json:"name"`
	// The owner type. Can either be 'org' or 'user'
	Type AppInvitationsList200ApplicationJSONDistributionGroupOwnerTypeEnum `json:"type"`
}

// AppInvitationsList200ApplicationJSONDistributionGroup - The organization that owns the distribution group, if it exists
type AppInvitationsList200ApplicationJSONDistributionGroup struct {
	// The information about the app's owner
	Owner *AppInvitationsList200ApplicationJSONDistributionGroupOwner `json:"owner,omitempty"`
}

// AppInvitationsList200ApplicationJSONInviteTypeEnum - The invitation type
type AppInvitationsList200ApplicationJSONInviteTypeEnum string

const (
	AppInvitationsList200ApplicationJSONInviteTypeEnumDeveloper AppInvitationsList200ApplicationJSONInviteTypeEnum = "developer"
	AppInvitationsList200ApplicationJSONInviteTypeEnumTester    AppInvitationsList200ApplicationJSONInviteTypeEnum = "tester"
)

func (e *AppInvitationsList200ApplicationJSONInviteTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "developer":
		fallthrough
	case "tester":
		*e = AppInvitationsList200ApplicationJSONInviteTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONInviteTypeEnum: %s", s)
	}
}

// AppInvitationsList200ApplicationJSONInvitedByOriginEnum - The creation origin of this user
type AppInvitationsList200ApplicationJSONInvitedByOriginEnum string

const (
	AppInvitationsList200ApplicationJSONInvitedByOriginEnumAppcenter AppInvitationsList200ApplicationJSONInvitedByOriginEnum = "appcenter"
	AppInvitationsList200ApplicationJSONInvitedByOriginEnumHockeyapp AppInvitationsList200ApplicationJSONInvitedByOriginEnum = "hockeyapp"
	AppInvitationsList200ApplicationJSONInvitedByOriginEnumCodepush  AppInvitationsList200ApplicationJSONInvitedByOriginEnum = "codepush"
)

func (e *AppInvitationsList200ApplicationJSONInvitedByOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		fallthrough
	case "codepush":
		*e = AppInvitationsList200ApplicationJSONInvitedByOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONInvitedByOriginEnum: %s", s)
	}
}

type AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum string

const (
	AppInvitationsList200ApplicationJSONInvitedByPermissionsEnumManager   AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum = "manager"
	AppInvitationsList200ApplicationJSONInvitedByPermissionsEnumDeveloper AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum = "developer"
	AppInvitationsList200ApplicationJSONInvitedByPermissionsEnumViewer    AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum = "viewer"
	AppInvitationsList200ApplicationJSONInvitedByPermissionsEnumTester    AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum = "tester"
)

func (e *AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum: %s", s)
	}
}

type AppInvitationsList200ApplicationJSONInvitedBy struct {
	// The avatar URL of the user
	AvatarURL *string `json:"avatar_url,omitempty"`
	// User is required to send an old password in order to change the password.
	CanChangePassword *bool `json:"can_change_password,omitempty"`
	// The full name of the user. Might for example be first and last name
	DisplayName string `json:"display_name"`
	// The email address of the user
	Email string `json:"email"`
	// The unique id (UUID) of the user
	ID string `json:"id"`
	// The unique name that is used to identify the user.
	Name string `json:"name"`
	// The creation origin of this user
	Origin AppInvitationsList200ApplicationJSONInvitedByOriginEnum `json:"origin"`
	// The permissions the user has for the app
	Permissions []AppInvitationsList200ApplicationJSONInvitedByPermissionsEnum `json:"permissions,omitempty"`
}

type AppInvitationsList200ApplicationJSONPermissionsEnum string

const (
	AppInvitationsList200ApplicationJSONPermissionsEnumManager   AppInvitationsList200ApplicationJSONPermissionsEnum = "manager"
	AppInvitationsList200ApplicationJSONPermissionsEnumDeveloper AppInvitationsList200ApplicationJSONPermissionsEnum = "developer"
	AppInvitationsList200ApplicationJSONPermissionsEnumViewer    AppInvitationsList200ApplicationJSONPermissionsEnum = "viewer"
	AppInvitationsList200ApplicationJSONPermissionsEnumTester    AppInvitationsList200ApplicationJSONPermissionsEnum = "tester"
)

func (e *AppInvitationsList200ApplicationJSONPermissionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "manager":
		fallthrough
	case "developer":
		fallthrough
	case "viewer":
		fallthrough
	case "tester":
		*e = AppInvitationsList200ApplicationJSONPermissionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AppInvitationsList200ApplicationJSONPermissionsEnum: %s", s)
	}
}

// AppInvitationsList200ApplicationJSON - Success
type AppInvitationsList200ApplicationJSON struct {
	App AppInvitationsList200ApplicationJSONApp `json:"app"`
	// The number of apps in the group
	AppCount *float64 `json:"app_count,omitempty"`
	// The organization that owns the distribution group, if it exists
	DistributionGroup *AppInvitationsList200ApplicationJSONDistributionGroup `json:"distribution_group,omitempty"`
	// The email address of the invited user
	Email string `json:"email"`
	// The unique ID (UUID) of the invitation
	ID string `json:"id"`
	// The invitation type
	InviteType AppInvitationsList200ApplicationJSONInviteTypeEnum `json:"invite_type"`
	InvitedBy  AppInvitationsList200ApplicationJSONInvitedBy      `json:"invited_by"`
	// Indicates whether the invited user already exists
	IsExistingUser bool `json:"is_existing_user"`
	// The permissions the user has for the app
	Permissions []AppInvitationsList200ApplicationJSONPermissionsEnum `json:"permissions,omitempty"`
}

type AppInvitationsListResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	AppInvitationsList200ApplicationJSONObject *AppInvitationsList200ApplicationJSON
	// Error
	AppInvitationsListDefaultApplicationJSONObject *AppInvitationsListDefaultApplicationJSON
}
