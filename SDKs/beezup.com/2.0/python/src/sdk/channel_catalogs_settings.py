"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ChannelCatalogsSettings:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def configure_channel_catalog_cost_settings(self, request: operations.ConfigureChannelCatalogCostSettingsRequest) -> operations.ConfigureChannelCatalogCostSettingsResponse:
        r"""Configure channel catalog cost settings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureChannelCatalogCostSettingsRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/settings/cost', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cost_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureChannelCatalogCostSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def configure_channel_catalog_general_settings(self, request: operations.ConfigureChannelCatalogGeneralSettingsRequest) -> operations.ConfigureChannelCatalogGeneralSettingsResponse:
        r"""Configure channel catalog general settings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureChannelCatalogGeneralSettingsRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/settings/general', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "general_settings", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureChannelCatalogGeneralSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def disable_channel_catalog(self, request: operations.DisableChannelCatalogRequest) -> operations.DisableChannelCatalogResponse:
        r"""Disable a channel catalog"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DisableChannelCatalogRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/disable', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DisableChannelCatalogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def enable_channel_catalog(self, request: operations.EnableChannelCatalogRequest) -> operations.EnableChannelCatalogResponse:
        r"""Enable a channel catalog"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnableChannelCatalogRequest, base_url, '/v2/user/channelCatalogs/{channelCatalogId}/enable', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnableChannelCatalogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 402:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpgradeOfferRequired])
                res.upgrade_offer_required = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    