"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import standardsqldatatype as shared_standardsqldatatype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ArgumentArgumentKindEnum(str, Enum):
    r"""Optional. Defaults to FIXED_TYPE."""
    ARGUMENT_KIND_UNSPECIFIED = 'ARGUMENT_KIND_UNSPECIFIED'
    FIXED_TYPE = 'FIXED_TYPE'
    ANY_TYPE = 'ANY_TYPE'

class ArgumentModeEnum(str, Enum):
    r"""Optional. Specifies whether the argument is input or output. Can be set for procedures only."""
    MODE_UNSPECIFIED = 'MODE_UNSPECIFIED'
    IN = 'IN'
    OUT = 'OUT'
    INOUT = 'INOUT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Argument:
    r"""Input/output argument of a function or a stored procedure."""
    
    argument_kind: Optional[ArgumentArgumentKindEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('argumentKind'), 'exclude': lambda f: f is None }})
    r"""Optional. Defaults to FIXED_TYPE."""  
    data_type: Optional[shared_standardsqldatatype.StandardSQLDataType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType'), 'exclude': lambda f: f is None }})
    r"""The data type of a variable such as a function argument. Examples include: * INT64: `{\\"typeKind\\": \\"INT64\\"}` * ARRAY: { \\"typeKind\\": \\"ARRAY\\", \\"arrayElementType\\": {\\"typeKind\\": \\"STRING\\"} } * STRUCT>: { \\"typeKind\\": \\"STRUCT\\", \\"structType\\": { \\"fields\\": [ { \\"name\\": \\"x\\", \\"type\\": {\\"typeKind\\": \\"STRING\\"} }, { \\"name\\": \\"y\\", \\"type\\": { \\"typeKind\\": \\"ARRAY\\", \\"arrayElementType\\": {\\"typeKind\\": \\"DATE\\"} } } ] } }"""  
    mode: Optional[ArgumentModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""Optional. Specifies whether the argument is input or output. Can be set for procedures only."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Optional. The name of this argument. Can be absent for function return argument."""  
    