"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import channel as shared_channel
from ..shared import legacy_error as shared_legacy_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class EditChannelSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class EditChannelRequestBodyPrivacyEnum(str, Enum):
    r"""The privacy level of the channel."""
    ANYBODY = 'anybody'
    MODERATORS = 'moderators'
    USERS = 'users'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditChannelRequestBody:
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the channel."""  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`. Submitting `\\"\\"` for this field removes the link alias."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the channel."""  
    privacy: Optional[EditChannelRequestBodyPrivacyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privacy'), 'exclude': lambda f: f is None }})
    r"""The privacy level of the channel."""  
    

@dataclasses.dataclass
class EditChannelRequest:
    
    channel_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'channel_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the channel."""  
    request_body: Optional[EditChannelRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/vnd.vimeo.channel+json' }})  
    

@dataclasses.dataclass
class EditChannelResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    channel: Optional[shared_channel.Channel] = dataclasses.field(default=None)
    r"""The channel was edited."""  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""A parameter is invalid."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    