<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Contest - Information about a contest that appears on a voter's ballot.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Contest
{
    /**
     * A number specifying the position of this contest on the voter's ballot.
     * 
     * @var ?string $ballotPlacement
     */
	#[\JMS\Serializer\Annotation\SerializedName('ballotPlacement')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ballotPlacement = null;
    
    /**
     * The official title on the ballot for this contest, only where available.
     * 
     * @var ?string $ballotTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('ballotTitle')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ballotTitle = null;
    
    /**
     * The candidate choices for this contest.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Candidate> $candidates
     */
	#[\JMS\Serializer\Annotation\SerializedName('candidates')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Candidate>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $candidates = null;
    
    /**
     * Describes the geographic scope of a contest.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ElectoralDistrict $district
     */
	#[\JMS\Serializer\Annotation\SerializedName('district')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ElectoralDistrict')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ElectoralDistrict $district = null;
    
    /**
     * A description of any additional eligibility requirements for voting in this contest.
     * 
     * @var ?string $electorateSpecifications
     */
	#[\JMS\Serializer\Annotation\SerializedName('electorateSpecifications')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $electorateSpecifications = null;
    
    /**
     * The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at "locality" level, but also effectively at both "administrative-area-2" and "administrative-area-1".
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ContestLevelEnum> $level
     */
	#[\JMS\Serializer\Annotation\SerializedName('level')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\ContestLevelEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $level = null;
    
    /**
     * The number of candidates that will be elected to office in this contest.
     * 
     * @var ?string $numberElected
     */
	#[\JMS\Serializer\Annotation\SerializedName('numberElected')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $numberElected = null;
    
    /**
     * The number of candidates that a voter may vote for in this contest.
     * 
     * @var ?string $numberVotingFor
     */
	#[\JMS\Serializer\Annotation\SerializedName('numberVotingFor')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $numberVotingFor = null;
    
    /**
     * The name of the office for this contest.
     * 
     * @var ?string $office
     */
	#[\JMS\Serializer\Annotation\SerializedName('office')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $office = null;
    
    /**
     * If this is a partisan election, the name of the party/parties it is for.
     * 
     * @var ?array<string> $primaryParties
     */
	#[\JMS\Serializer\Annotation\SerializedName('primaryParties')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $primaryParties = null;
    
    /**
     * The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include "yes" or "no" for referenda. This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?array<string> $referendumBallotResponses
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumBallotResponses')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $referendumBallotResponses = null;
    
    /**
     * Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumBrief
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumBrief')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumBrief = null;
    
    /**
     * A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumConStatement
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumConStatement')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumConStatement = null;
    
    /**
     * Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumEffectOfAbstain
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumEffectOfAbstain')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumEffectOfAbstain = null;
    
    /**
     * The threshold of votes that the referendum needs in order to pass, e.g. "two-thirds". This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumPassageThreshold
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumPassageThreshold')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumPassageThreshold = null;
    
    /**
     * A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumProStatement
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumProStatement')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumProStatement = null;
    
    /**
     * A brief description of the referendum. This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumSubtitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumSubtitle')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumSubtitle = null;
    
    /**
     * The full text of the referendum. This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumText
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumText')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumText = null;
    
    /**
     * The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumTitle')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumTitle = null;
    
    /**
     * A link to the referendum. This field is only populated for contests of type 'Referendum'.
     * 
     * @var ?string $referendumUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('referendumUrl')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $referendumUrl = null;
    
    /**
     * The roles which this office fulfills.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\ContestRolesEnum> $roles
     */
	#[\JMS\Serializer\Annotation\SerializedName('roles')]
    #[\JMS\Serializer\Annotation\Type('array<enum<OpenAPI\OpenAPI\Models\Shared\ContestRolesEnum>>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $roles = null;
    
    /**
     * A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Source> $sources
     */
	#[\JMS\Serializer\Annotation\SerializedName('sources')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Source>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $sources = null;
    
    /**
     * "Yes" or "No" depending on whether this a contest being held outside the normal election cycle.
     * 
     * @var ?string $special
     */
	#[\JMS\Serializer\Annotation\SerializedName('special')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $special = null;
    
    /**
     * The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.
     * 
     * @var ?string $type
     */
	#[\JMS\Serializer\Annotation\SerializedName('type')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $type = null;
    
	public function __construct()
	{
		$this->ballotPlacement = null;
		$this->ballotTitle = null;
		$this->candidates = null;
		$this->district = null;
		$this->electorateSpecifications = null;
		$this->level = null;
		$this->numberElected = null;
		$this->numberVotingFor = null;
		$this->office = null;
		$this->primaryParties = null;
		$this->referendumBallotResponses = null;
		$this->referendumBrief = null;
		$this->referendumConStatement = null;
		$this->referendumEffectOfAbstain = null;
		$this->referendumPassageThreshold = null;
		$this->referendumProStatement = null;
		$this->referendumSubtitle = null;
		$this->referendumText = null;
		$this->referendumTitle = null;
		$this->referendumUrl = null;
		$this->roles = null;
		$this->sources = null;
		$this->special = null;
		$this->type = null;
	}
}
