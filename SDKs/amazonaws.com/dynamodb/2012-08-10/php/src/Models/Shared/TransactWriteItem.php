<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TransactWriteItem - A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TransactWriteItem
{
	#[\JMS\Serializer\Annotation\SerializedName('ConditionCheck')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ConditionCheck')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ConditionCheck $conditionCheck = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Delete')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Delete')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Delete $delete = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Put')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Put')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Put $put = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Update')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Update')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Update $update = null;
    
	public function __construct()
	{
		$this->conditionCheck = null;
		$this->delete = null;
		$this->put = null;
		$this->update = null;
	}
}
