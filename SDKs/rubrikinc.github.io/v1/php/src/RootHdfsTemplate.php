<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RootHdfsTemplate 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a HDFS directory template
     * 
     * Create a HDFS directory template. The template is applied to the host.  Each template is a set of paths on the host.
     * A template uses full paths and wildcards to define the objects to include, exclude, and exempt from exclusion.
     * The **_exceptions_** value specifies paths that should not be excluded from the HDFS directory by the **_exclude_** value.
     * Specify an array of full path descriptions for each property **_include_**, **_exclude_**, and **_exceptions_**.
     * Acceptable wildcard characters are.
     * + **_\*_** Single asterisk matches zero or more characters up to a path deliminator.
     * + **_\*\*_** Double asterisk matches zero or more characters.
     * The following rules apply to path descriptions.
     * + Accepts UTF-8 characters.
     * + Case sensitive.
     * + Forward slash character **_/_** is the path deliminator.
     * + Symbolic links must point to a subset of a non symbolic link path.
     * + Paths that do not start with **_/_** are modified to start with **_\*\* /_**.
     * + Paths that do not end with **_\*_** are modified to end with **_/\*\*_**.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\HdfsTemplateCreate $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateHdfsTemplateResponse
     */
	public function createHdfsTemplate(
        \OpenAPI\OpenAPI\Models\Shared\HdfsTemplateCreate $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateHdfsTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs_template');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateHdfsTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsTemplateDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsTemplateDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a HDFS directory template
     * 
     * Deletes the specfied HDFS directory template. All associated HDFS directories are deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsTemplateResponse
     */
	public function deleteHdfsTemplate(
        \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs_template/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteHdfsTemplateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteHdfsTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Get information for a HDFS directory template
     * 
     * Retrieve summary information for a specified HDFS directory template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetHdfsTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetHdfsTemplateResponse
     */
	public function getHdfsTemplate(
        \OpenAPI\OpenAPI\Models\Operations\GetHdfsTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetHdfsTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs_template/{id}', \OpenAPI\OpenAPI\Models\Operations\GetHdfsTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetHdfsTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsTemplateDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsTemplateDetail', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get summary information for all HDFS directory templates
     * 
     * Retrieve summary information for all HDFS directory templates, including: ID and name of the HDFS directory template, HDFS directory template creation timestamp, array of the included filepaths, array of the excluded filepaths.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QueryHdfsTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QueryHdfsTemplateResponse
     */
	public function queryHdfsTemplate(
        \OpenAPI\OpenAPI\Models\Operations\QueryHdfsTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QueryHdfsTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs_template');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QueryHdfsTemplateRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QueryHdfsTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsTemplateDetailListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsTemplateDetailListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify a HDFS directory template
     * 
     * Modify the values of specified HDFS directory template.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsTemplateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsTemplateResponse
     */
	public function updateHdfsTemplate(
        \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsTemplateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsTemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/hdfs_template/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsTemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "hdfsTemplatePatch", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateHdfsTemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->hdfsTemplateDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\HdfsTemplateDetail', 'json');
            }
        }

        return $response;
    }
}