/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CreateOrderChargeOverride - Charge associated with a rate plan.
 * 
 */
public class CreateOrderChargeOverride {
    /**
     * Billing information about the charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing")
    public CreateOrderChargeOverrideBilling billing;
    public CreateOrderChargeOverride withBilling(CreateOrderChargeOverrideBilling billing) {
        this.billing = billing;
        return this;
    }
    
    /**
     * Charge number of the charge. For example, C-00000307.
     * 
     * If you do not set this field, Zuora will generate the charge number.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeNumber")
    public String chargeNumber;
    public CreateOrderChargeOverride withChargeNumber(String chargeNumber) {
        this.chargeNumber = chargeNumber;
        return this;
    }
    
    /**
     * Container for custom fields of a Rate Plan Charge object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public CreateOrderChargeOverride withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * Description of the charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public CreateOrderChargeOverride withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Specifies when a charge becomes inactive.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    public EndConditions endDate;
    public CreateOrderChargeOverride withEndDate(EndConditions endDate) {
        this.endDate = endDate;
        return this;
    }
    
    /**
     * Pricing information about the charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricing")
    public CreateOrderChargeOverridePricing pricing;
    public CreateOrderChargeOverride withPricing(CreateOrderChargeOverridePricing pricing) {
        this.pricing = pricing;
        return this;
    }
    
    /**
     * Internal identifier of the product rate plan charge that the charge is based on.
     * 
     */
    @JsonProperty("productRatePlanChargeId")
    public String productRatePlanChargeId;
    public CreateOrderChargeOverride withProductRatePlanChargeId(String productRatePlanChargeId) {
        this.productRatePlanChargeId = productRatePlanChargeId;
        return this;
    }
    
    /**
     * Revenue Recognition Code
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revRecCode")
    public String revRecCode;
    public CreateOrderChargeOverride withRevRecCode(String revRecCode) {
        this.revRecCode = revRecCode;
        return this;
    }
    
    /**
     * Specifies the revenue recognition trigger condition.
     * 
     *   * `Contract Effective Date` 
     *   * `Service Activation Date`
     *   * `Customer Acceptance Date`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revRecTriggerCondition")
    public CreateOrderChargeOverrideRevRecTriggerConditionEnum revRecTriggerCondition;
    public CreateOrderChargeOverride withRevRecTriggerCondition(CreateOrderChargeOverrideRevRecTriggerConditionEnum revRecTriggerCondition) {
        this.revRecTriggerCondition = revRecTriggerCondition;
        return this;
    }
    
    /**
     * Specifies the revenue recognition rule.
     * 
     *   * `Recognize upon invoicing` 
     *   * `Recognize daily over time`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revenueRecognitionRuleName")
    public CreateOrderChargeOverrideRevenueRecognitionRuleNameEnum revenueRecognitionRuleName;
    public CreateOrderChargeOverride withRevenueRecognitionRuleName(CreateOrderChargeOverrideRevenueRecognitionRuleNameEnum revenueRecognitionRuleName) {
        this.revenueRecognitionRuleName = revenueRecognitionRuleName;
        return this;
    }
    
    /**
     * Specifies when a charge becomes active.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    public CreateOrderTriggerParams startDate;
    public CreateOrderChargeOverride withStartDate(CreateOrderTriggerParams startDate) {
        this.startDate = startDate;
        return this;
    }
    
    /**
     * Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.
     * 
     * For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uniqueToken")
    public String uniqueToken;
    public CreateOrderChargeOverride withUniqueToken(String uniqueToken) {
        this.uniqueToken = uniqueToken;
        return this;
    }
    
}
