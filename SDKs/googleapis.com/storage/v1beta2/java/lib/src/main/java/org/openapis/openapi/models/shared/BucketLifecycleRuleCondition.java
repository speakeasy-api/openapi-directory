/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * BucketLifecycleRuleCondition - The condition(s) under which the action will be taken.
 */
public class BucketLifecycleRuleCondition {
    /**
     * Age of an object (in days). This condition is satisfied when an object reaches the specified age.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("age")
    public Integer age;

    public BucketLifecycleRuleCondition withAge(Integer age) {
        this.age = age;
        return this;
    }
    
    /**
     * A date in RFC 3339 format with only the date part, e.g. "2013-01-15". This condition is satisfied when an object is created before midnight of the specified date in UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("createdBefore")
    public LocalDate createdBefore;

    public BucketLifecycleRuleCondition withCreatedBefore(LocalDate createdBefore) {
        this.createdBefore = createdBefore;
        return this;
    }
    
    /**
     * Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isLive")
    public Boolean isLive;

    public BucketLifecycleRuleCondition withIsLive(Boolean isLive) {
        this.isLive = isLive;
        return this;
    }
    
    /**
     * Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numNewerVersions")
    public Integer numNewerVersions;

    public BucketLifecycleRuleCondition withNumNewerVersions(Integer numNewerVersions) {
        this.numNewerVersions = numNewerVersions;
        return this;
    }
    
    public BucketLifecycleRuleCondition(){}
}
