// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AggregationInfoAggregationIntervalEnum string

const (
	AggregationInfoAggregationIntervalEnumAggregationIntervalUnspecified AggregationInfoAggregationIntervalEnum = "AGGREGATION_INTERVAL_UNSPECIFIED"
	AggregationInfoAggregationIntervalEnumDaily                          AggregationInfoAggregationIntervalEnum = "DAILY"
	AggregationInfoAggregationIntervalEnumMonthly                        AggregationInfoAggregationIntervalEnum = "MONTHLY"
)

func (e AggregationInfoAggregationIntervalEnum) ToPointer() *AggregationInfoAggregationIntervalEnum {
	return &e
}

func (e *AggregationInfoAggregationIntervalEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AGGREGATION_INTERVAL_UNSPECIFIED":
		fallthrough
	case "DAILY":
		fallthrough
	case "MONTHLY":
		*e = AggregationInfoAggregationIntervalEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregationInfoAggregationIntervalEnum: %v", v)
	}
}

type AggregationInfoAggregationLevelEnum string

const (
	AggregationInfoAggregationLevelEnumAggregationLevelUnspecified AggregationInfoAggregationLevelEnum = "AGGREGATION_LEVEL_UNSPECIFIED"
	AggregationInfoAggregationLevelEnumAccount                     AggregationInfoAggregationLevelEnum = "ACCOUNT"
	AggregationInfoAggregationLevelEnumProject                     AggregationInfoAggregationLevelEnum = "PROJECT"
)

func (e AggregationInfoAggregationLevelEnum) ToPointer() *AggregationInfoAggregationLevelEnum {
	return &e
}

func (e *AggregationInfoAggregationLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AGGREGATION_LEVEL_UNSPECIFIED":
		fallthrough
	case "ACCOUNT":
		fallthrough
	case "PROJECT":
		*e = AggregationInfoAggregationLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AggregationInfoAggregationLevelEnum: %v", v)
	}
}

// AggregationInfo - Represents the aggregation level and interval for pricing of a single SKU.
type AggregationInfo struct {
	// The number of intervals to aggregate over. Example: If aggregation_level is "DAILY" and aggregation_count is 14, aggregation will be over 14 days.
	AggregationCount    *int                                    `json:"aggregationCount,omitempty"`
	AggregationInterval *AggregationInfoAggregationIntervalEnum `json:"aggregationInterval,omitempty"`
	AggregationLevel    *AggregationInfoAggregationLevelEnum    `json:"aggregationLevel,omitempty"`
}
