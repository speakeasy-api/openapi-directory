/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * You can use amendments to modify subscriptions. However, Zuora recommends you to use [Update subscription](https://www.zuora.com/developer/api-reference/#operation/PUT_Subscription) (recommended) or [Amend](https://www.zuora.com/developer/api-reference/#operation/Action_POSTamend) to do so.
 *
 * @remarks
 *
 */
export class Amendments {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve an amendment
   *
   * @remarks
   * Retrieves detailed information about the specified subscription amendment.
   */
  getAmendmentsByKey(
    req: operations.GETAmendmentsByKeyRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAmendmentsByKeyResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAmendmentsByKeyRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/amendments/{amendment-key}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAmendmentsByKeyResponse =
        new operations.GETAmendmentsByKeyResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getAmendmentType = utils.objectToClass(
              httpRes?.data,
              shared.GETAmendmentType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List all amendments of a subscription
   *
   * @remarks
   * Retrieves detailed information about the amendment with the specified subscription.
   */
  getAmendmentsBySubscriptionID(
    req: operations.GETAmendmentsBySubscriptionIDRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GETAmendmentsBySubscriptionIDResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GETAmendmentsBySubscriptionIDRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/amendments/subscriptions/{subscription-id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GETAmendmentsBySubscriptionIDResponse =
        new operations.GETAmendmentsBySubscriptionIDResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.getAmendmentType = utils.objectToClass(
              httpRes?.data,
              shared.GETAmendmentType
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CRUD: Delete an amendment
   *
   * @remarks
   *
   * Invoiced amendments cannot usually be deleted. One exception to this rule is auto-renew amendments. You can delete the last auto-renew amendment even if an invoice has been generated.
   *
   */
  objectDELETEAmendment(
    req: operations.ObjectDELETEAmendmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObjectDELETEAmendmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObjectDELETEAmendmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/object/amendment/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObjectDELETEAmendmentResponse =
        new operations.ObjectDELETEAmendmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyDeleteResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyDeleteResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyUnauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyUnauthorizedResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CRUD: Retrieve an amendment
   */
  objectGETAmendment(
    req: operations.ObjectGETAmendmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObjectGETAmendmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObjectGETAmendmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/object/amendment/{id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObjectGETAmendmentResponse =
        new operations.ObjectGETAmendmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyGetAmendment = utils.objectToClass(
              httpRes?.data,
              shared.ProxyGetAmendment
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyUnauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyUnauthorizedResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyNoDataResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyNoDataResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CRUD: Update an amendment
   */
  objectPUTAmendment(
    req: operations.ObjectPUTAmendmentRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ObjectPUTAmendmentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ObjectPUTAmendmentRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/object/amendment/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "proxyModifyAmendment",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ObjectPUTAmendmentResponse =
        new operations.ObjectPUTAmendmentResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyCreateOrModifyResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyCreateOrModifyResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (
            utils.matchContentType(
              contentType,
              `application/json; charset=utf-8`
            )
          ) {
            res.proxyUnauthorizedResponse = utils.objectToClass(
              httpRes?.data,
              shared.ProxyUnauthorizedResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
