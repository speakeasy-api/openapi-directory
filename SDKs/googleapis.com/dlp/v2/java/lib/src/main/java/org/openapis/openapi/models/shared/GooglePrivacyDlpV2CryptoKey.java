/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2CryptoKey - This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.
 */
public class GooglePrivacyDlpV2CryptoKey {
    /**
     * Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kmsWrapped")
    public GooglePrivacyDlpV2KmsWrappedCryptoKey kmsWrapped;
    public GooglePrivacyDlpV2CryptoKey withKmsWrapped(GooglePrivacyDlpV2KmsWrappedCryptoKey kmsWrapped) {
        this.kmsWrapped = kmsWrapped;
        return this;
    }
    
    /**
     * Use this to have a random data crypto key generated. It will be discarded after the request finishes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transient")
    public GooglePrivacyDlpV2TransientCryptoKey transient_;
    public GooglePrivacyDlpV2CryptoKey withTransient(GooglePrivacyDlpV2TransientCryptoKey transient_) {
        this.transient_ = transient_;
        return this;
    }
    
    /**
     * Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unwrapped")
    public GooglePrivacyDlpV2UnwrappedCryptoKey unwrapped;
    public GooglePrivacyDlpV2CryptoKey withUnwrapped(GooglePrivacyDlpV2UnwrappedCryptoKey unwrapped) {
        this.unwrapped = unwrapped;
        return this;
    }
    
}
