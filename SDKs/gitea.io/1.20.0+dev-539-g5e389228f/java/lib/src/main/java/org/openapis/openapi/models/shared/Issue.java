/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Issue - Issue represents an issue in a repository
 */
public class Issue {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assets")
    public Attachment[] assets;

    public Issue withAssets(Attachment[] assets) {
        this.assets = assets;
        return this;
    }
    
    /**
     * User represents a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignee")
    public User assignee;

    public Issue withAssignee(User assignee) {
        this.assignee = assignee;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    public User[] assignees;

    public Issue withAssignees(User[] assignees) {
        this.assignees = assignees;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;

    public Issue withBody(String body) {
        this.body = body;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("closed_at")
    public OffsetDateTime closedAt;

    public Issue withClosedAt(OffsetDateTime closedAt) {
        this.closedAt = closedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    public Long comments;

    public Issue withComments(Long comments) {
        this.comments = comments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Issue withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("due_date")
    public OffsetDateTime dueDate;

    public Issue withDueDate(OffsetDateTime dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("html_url")
    public String htmlUrl;

    public Issue withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Issue withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_locked")
    public Boolean isLocked;

    public Issue withIsLocked(Boolean isLocked) {
        this.isLocked = isLocked;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public Label[] labels;

    public Issue withLabels(Label[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Milestone milestone is a collection of issues on one repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("milestone")
    public Milestone milestone;

    public Issue withMilestone(Milestone milestone) {
        this.milestone = milestone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public Long number;

    public Issue withNumber(Long number) {
        this.number = number;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_author")
    public String originalAuthor;

    public Issue withOriginalAuthor(String originalAuthor) {
        this.originalAuthor = originalAuthor;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_author_id")
    public Long originalAuthorId;

    public Issue withOriginalAuthorId(Long originalAuthorId) {
        this.originalAuthorId = originalAuthorId;
        return this;
    }
    
    /**
     * PullRequestMeta PR info if an issue is a PR
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pull_request")
    public PullRequestMeta pullRequest;

    public Issue withPullRequest(PullRequestMeta pullRequest) {
        this.pullRequest = pullRequest;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ref")
    public String ref;

    public Issue withRef(String ref) {
        this.ref = ref;
        return this;
    }
    
    /**
     * RepositoryMeta basic repository information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repository")
    public RepositoryMeta repository;

    public Issue withRepository(RepositoryMeta repository) {
        this.repository = repository;
        return this;
    }
    
    /**
     * StateType issue state type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public Issue withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public Issue withTitle(String title) {
        this.title = title;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public Issue withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public Issue withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * User represents a user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public User user;

    public Issue withUser(User user) {
        this.user = user;
        return this;
    }
    
    public Issue(){}
}
