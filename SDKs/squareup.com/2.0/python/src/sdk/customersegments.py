"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CustomerSegments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def list_customer_segments(self, request: operations.ListCustomerSegmentsRequest, security: operations.ListCustomerSegmentsSecurity) -> operations.ListCustomerSegmentsResponse:
        r"""ListCustomerSegments
        Retrieves the list of customer segments of a business.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/customers/segments'
        
        query_params = utils.get_query_params(operations.ListCustomerSegmentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCustomerSegmentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCustomerSegmentsResponse])
                res.list_customer_segments_response = out

        return res

    def retrieve_customer_segment(self, request: operations.RetrieveCustomerSegmentRequest, security: operations.RetrieveCustomerSegmentSecurity) -> operations.RetrieveCustomerSegmentResponse:
        r"""RetrieveCustomerSegment
        Retrieves a specific customer segment as identified by the `segment_id` value.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveCustomerSegmentRequest, base_url, '/v2/customers/segments/{segment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveCustomerSegmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveCustomerSegmentResponse])
                res.retrieve_customer_segment_response = out

        return res

    