"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Refunds:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_payment_refund(self, request: operations.GetPaymentRefundRequest, security: operations.GetPaymentRefundSecurity) -> operations.GetPaymentRefundResponse:
        r"""GetPaymentRefund
        Retrieves a specific refund using the `refund_id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPaymentRefundRequest, base_url, '/v2/refunds/{refund_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPaymentRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetPaymentRefundResponse])
                res.get_payment_refund_response = out

        return res

    def list_payment_refunds(self, request: operations.ListPaymentRefundsRequest, security: operations.ListPaymentRefundsSecurity) -> operations.ListPaymentRefundsResponse:
        r"""ListPaymentRefunds
        Retrieves a list of refunds for the account making the request.
        
        Results are eventually consistent, and new refunds or changes to refunds might take several
        seconds to appear.
        
        The maximum results per page is 100.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/refunds'
        
        query_params = utils.get_query_params(operations.ListPaymentRefundsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPaymentRefundsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPaymentRefundsResponse])
                res.list_payment_refunds_response = out

        return res

    def refund_payment(self, request: shared.RefundPaymentRequest, security: operations.RefundPaymentSecurity) -> operations.RefundPaymentResponse:
        r"""RefundPayment
        Refunds a payment. You can refund the entire payment amount or a
        portion of it. You can use this endpoint to refund a card payment or record a 
        refund of a cash or external payment. For more information, see
        [Refund Payment](https://developer.squareup.com/docs/payments-api/refund-payments).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/refunds'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefundPaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RefundPaymentResponse])
                res.refund_payment_response = out

        return res

    