/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * This section shows how you execute credit, balance and number transfers, as well as viewing past transactions.
 */
export class Transfers {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve list of balance transfers
   *
   * @remarks
   * Retrieve a list of balance transfers that have taken place for a primary account within a specified time period.
   *
   */
  retrieveBalanceTransfers(
    req: operations.RetrieveBalanceTransfersRequest,
    security: operations.RetrieveBalanceTransfersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveBalanceTransfersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveBalanceTransfersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/balance-transfers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveBalanceTransfersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveBalanceTransfersResponse =
        new operations.RetrieveBalanceTransfersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listBalanceTransfersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListBalanceTransfersResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveBalanceTransfers401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveBalanceTransfers401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveBalanceTransfers404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveBalanceTransfers404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve list of credit transfers
   *
   * @remarks
   * Retrieve a list of credit transfers that have taken place for a primary account within a specified time period.
   *
   */
  retrieveCreditTransfers(
    req: operations.RetrieveCreditTransfersRequest,
    security: operations.RetrieveCreditTransfersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveCreditTransfersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveCreditTransfersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/credit-transfers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveCreditTransfersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveCreditTransfersResponse =
        new operations.RetrieveCreditTransfersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listCreditTransfersResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListCreditTransfersResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveCreditTransfers401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveCreditTransfers401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveCreditTransfers404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.RetrieveCreditTransfers404ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Transfer balance
   *
   * @remarks
   * Transfer balance between a primary account and one of its subaccounts. Note that balance_available_for_transfer = |account_balance - credit_limit| of the source account.
   *
   */
  transferBalance(
    req: operations.TransferBalanceRequest,
    security: operations.TransferBalanceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TransferBalanceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TransferBalanceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/balance-transfers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "transferBalanceOrCreditRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TransferBalanceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TransferBalanceResponse =
        new operations.TransferBalanceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferBalanceResponse = utils.objectToClass(
              httpRes?.data,
              shared.TransferBalanceResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferBalance401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferBalance401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferBalance404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferBalance404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferBalance422ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferBalance422ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Transfer credit
   *
   * @remarks
   * Transfer credit limit between a primary account and one of its subaccounts.
   *
   */
  transferCredit(
    req: operations.TransferCreditRequest,
    security: operations.TransferCreditSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TransferCreditResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TransferCreditRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/credit-transfers",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "transferBalanceOrCreditRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TransferCreditSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TransferCreditResponse =
        new operations.TransferCreditResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferCreditResponse = utils.objectToClass(
              httpRes?.data,
              shared.TransferCreditResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferCredit401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferCredit401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.unprovisionedErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.UnprovisionedErrorResponse
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferCredit404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferCredit404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferCredit422ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferCredit422ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Transfer number
   *
   * @remarks
   * Transfer number from one account to another.
   *
   */
  transferNumber(
    req: operations.TransferNumberRequest,
    security: operations.TransferNumberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TransferNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TransferNumberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{api_key}/transfer-number",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "transferNumberRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TransferNumberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TransferNumberResponse =
        new operations.TransferNumberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferNumberResponse = utils.objectToClass(
              httpRes?.data,
              shared.TransferNumberResponse
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferNumber401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferNumber401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferNumber403ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferNumber404ApplicationJSONOneOf = httpRes?.data;
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferNumber409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferNumber409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.transferNumber422ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.TransferNumber422ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
