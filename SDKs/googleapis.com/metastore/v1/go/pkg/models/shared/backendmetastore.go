// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// BackendMetastoreMetastoreTypeEnum - The type of the backend metastore.
type BackendMetastoreMetastoreTypeEnum string

const (
	BackendMetastoreMetastoreTypeEnumMetastoreTypeUnspecified BackendMetastoreMetastoreTypeEnum = "METASTORE_TYPE_UNSPECIFIED"
	BackendMetastoreMetastoreTypeEnumDataprocMetastore        BackendMetastoreMetastoreTypeEnum = "DATAPROC_METASTORE"
)

func (e *BackendMetastoreMetastoreTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "METASTORE_TYPE_UNSPECIFIED":
		fallthrough
	case "DATAPROC_METASTORE":
		*e = BackendMetastoreMetastoreTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BackendMetastoreMetastoreTypeEnum: %s", s)
	}
}

// BackendMetastore - Represents a backend metastore for the federation.
type BackendMetastore struct {
	// The type of the backend metastore.
	MetastoreType *BackendMetastoreMetastoreTypeEnum `json:"metastoreType,omitempty"`
	// The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}
	Name *string `json:"name,omitempty"`
}
