/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Alerts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Performs batch delete operation on alerts.
   */
  alertcenterAlertsBatchDelete(
    req: operations.AlertcenterAlertsBatchDeleteRequest,
    security: operations.AlertcenterAlertsBatchDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsBatchDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsBatchDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1beta1/alerts:batchDelete";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchDeleteAlertsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsBatchDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsBatchDeleteResponse =
        new operations.AlertcenterAlertsBatchDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchDeleteAlertsResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchDeleteAlertsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Performs batch undelete operation on alerts.
   */
  alertcenterAlertsBatchUndelete(
    req: operations.AlertcenterAlertsBatchUndeleteRequest,
    security: operations.AlertcenterAlertsBatchUndeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsBatchUndeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsBatchUndeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1beta1/alerts:batchUndelete";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "batchUndeleteAlertsRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsBatchUndeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsBatchUndeleteResponse =
        new operations.AlertcenterAlertsBatchUndeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.batchUndeleteAlertsResponse = utils.objectToClass(
              httpRes?.data,
              shared.BatchUndeleteAlertsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Marks the specified alert for deletion. An alert that has been marked for deletion is removed from Alert Center after 30 days. Marking an alert for deletion has no effect on an alert which has already been marked for deletion. Attempting to mark a nonexistent alert for deletion results in a `NOT_FOUND` error.
   */
  alertcenterAlertsDelete(
    req: operations.AlertcenterAlertsDeleteRequest,
    security: operations.AlertcenterAlertsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/alerts/{alertId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsDeleteResponse =
        new operations.AlertcenterAlertsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates new feedback for an alert. Attempting to create a feedback for a non-existent alert returns `NOT_FOUND` error. Attempting to create a feedback for an alert that is marked for deletion returns `FAILED_PRECONDITION' error.
   */
  alertcenterAlertsFeedbackCreate(
    req: operations.AlertcenterAlertsFeedbackCreateRequest,
    security: operations.AlertcenterAlertsFeedbackCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsFeedbackCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsFeedbackCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/alerts/{alertId}/feedback",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "alertFeedback",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsFeedbackCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsFeedbackCreateResponse =
        new operations.AlertcenterAlertsFeedbackCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alertFeedback = utils.objectToClass(
              httpRes?.data,
              shared.AlertFeedback
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the feedback for an alert. Attempting to list feedbacks for a non-existent alert returns `NOT_FOUND` error.
   */
  alertcenterAlertsFeedbackList(
    req: operations.AlertcenterAlertsFeedbackListRequest,
    security: operations.AlertcenterAlertsFeedbackListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsFeedbackListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsFeedbackListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/alerts/{alertId}/feedback",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsFeedbackListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsFeedbackListResponse =
        new operations.AlertcenterAlertsFeedbackListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAlertFeedbackResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAlertFeedbackResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the specified alert. Attempting to get a nonexistent alert returns `NOT_FOUND` error.
   */
  alertcenterAlertsGet(
    req: operations.AlertcenterAlertsGetRequest,
    security: operations.AlertcenterAlertsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/alerts/{alertId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsGetResponse =
        new operations.AlertcenterAlertsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alert = utils.objectToClass(httpRes?.data, shared.Alert);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the metadata of an alert. Attempting to get metadata for a non-existent alert returns `NOT_FOUND` error.
   */
  alertcenterAlertsGetMetadata(
    req: operations.AlertcenterAlertsGetMetadataRequest,
    security: operations.AlertcenterAlertsGetMetadataSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsGetMetadataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsGetMetadataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/alerts/{alertId}/metadata",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsGetMetadataSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsGetMetadataResponse =
        new operations.AlertcenterAlertsGetMetadataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alertMetadata = utils.objectToClass(
              httpRes?.data,
              shared.AlertMetadata
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the alerts.
   */
  alertcenterAlertsList(
    req: operations.AlertcenterAlertsListRequest,
    security: operations.AlertcenterAlertsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1beta1/alerts";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsListResponse =
        new operations.AlertcenterAlertsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAlertsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAlertsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Restores, or "undeletes", an alert that was marked for deletion within the past 30 days. Attempting to undelete an alert which was marked for deletion over 30 days ago (which has been removed from the Alert Center database) or a nonexistent alert returns a `NOT_FOUND` error. Attempting to undelete an alert which has not been marked for deletion has no effect.
   */
  alertcenterAlertsUndelete(
    req: operations.AlertcenterAlertsUndeleteRequest,
    security: operations.AlertcenterAlertsUndeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AlertcenterAlertsUndeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AlertcenterAlertsUndeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1beta1/alerts/{alertId}:undelete",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "undeleteAlertRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AlertcenterAlertsUndeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AlertcenterAlertsUndeleteResponse =
        new operations.AlertcenterAlertsUndeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.alert = utils.objectToClass(httpRes?.data, shared.Alert);
          }
          break;
      }

      return res;
    });
  }
}
