"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createsoftwareupdatejobresponse as shared_createsoftwareupdatejobresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum(str, Enum):
    r"""The piece of software on the Greengrass core that will be updated."""
    CORE = 'core'
    OTA_AGENT = 'ota_agent'

class CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum(str, Enum):
    r"""The minimum level of log statements that should be logged by the OTA Agent during an update."""
    NONE = 'NONE'
    TRACE = 'TRACE'
    DEBUG = 'DEBUG'
    VERBOSE = 'VERBOSE'
    INFO = 'INFO'
    WARN = 'WARN'
    ERROR = 'ERROR'
    FATAL = 'FATAL'

class CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum(str, Enum):
    r"""The architecture of the cores which are the targets of an update."""
    ARMV6L = 'armv6l'
    ARMV7L = 'armv7l'
    X86_64 = 'x86_64'
    AARCH64 = 'aarch64'

class CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum(str, Enum):
    r"""The operating system of the cores which are the targets of an update."""
    UBUNTU = 'ubuntu'
    RASPBIAN = 'raspbian'
    AMAZON_LINUX = 'amazon_linux'
    OPENWRT = 'openwrt'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSoftwareUpdateJobRequestBody:
    
    s3_url_signer_role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3UrlSignerRole') }})
    r"""The IAM Role that Greengrass will use to create pre-signed URLs pointing towards the update artifact."""  
    software_to_update: CreateSoftwareUpdateJobRequestBodySoftwareToUpdateEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SoftwareToUpdate') }})
    r"""The piece of software on the Greengrass core that will be updated."""  
    update_targets: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateTargets') }})
    r"""The ARNs of the targets (IoT things or IoT thing groups) that this update will be applied to."""  
    update_targets_architecture: CreateSoftwareUpdateJobRequestBodyUpdateTargetsArchitectureEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateTargetsArchitecture') }})
    r"""The architecture of the cores which are the targets of an update."""  
    update_targets_operating_system: CreateSoftwareUpdateJobRequestBodyUpdateTargetsOperatingSystemEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateTargetsOperatingSystem') }})
    r"""The operating system of the cores which are the targets of an update."""  
    update_agent_log_level: Optional[CreateSoftwareUpdateJobRequestBodyUpdateAgentLogLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateAgentLogLevel'), 'exclude': lambda f: f is None }})
    r"""The minimum level of log statements that should be logged by the OTA Agent during an update."""  
    

@dataclasses.dataclass
class CreateSoftwareUpdateJobRequest:
    
    request_body: CreateSoftwareUpdateJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    x_amzn_client_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amzn-Client-Token', 'style': 'simple', 'explode': False }})
    r"""A client token used to correlate requests and responses."""  
    

@dataclasses.dataclass
class CreateSoftwareUpdateJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bad_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""BadRequestException"""  
    create_software_update_job_response: Optional[shared_createsoftwareupdatejobresponse.CreateSoftwareUpdateJobResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_error_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerErrorException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    