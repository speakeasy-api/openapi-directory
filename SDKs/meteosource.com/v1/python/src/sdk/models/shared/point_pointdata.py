"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import point_pointalerts as shared_point_pointalerts
from ..shared import point_pointcurrentdata as shared_point_pointcurrentdata
from ..shared import point_pointdaily as shared_point_pointdaily
from ..shared import point_pointhourly as shared_point_pointhourly
from ..shared import point_pointminutely as shared_point_pointminutely
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PointPointData:
    r"""Successful Response"""
    
    alerts: shared_point_pointalerts.PointPointAlerts = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alerts') }})  
    elevation: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elevation') }})
    r"""Elevation above sea level in metres (for units 'metric', 'uk', 'ca') or feet (for units 'us')"""  
    lat: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat') }})
    r"""Latitude of the point, always in the format <float><N/S>, for example ``23.5S``"""  
    lon: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lon') }})
    r"""Longitude of the point, always in the format <float><E/W>, for example ``23.5W``"""  
    units: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units') }})
    r"""Unit system (metric, uk, ca or us)"""  
    current: Optional[shared_point_pointcurrentdata.PointPointCurrentData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current'), 'exclude': lambda f: f is None }})  
    daily: Optional[shared_point_pointdaily.PointPointDaily] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily'), 'exclude': lambda f: f is None }})  
    hourly: Optional[shared_point_pointhourly.PointPointHourly] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hourly'), 'exclude': lambda f: f is None }})  
    minutely: Optional[shared_point_pointminutely.PointPointMinutely] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minutely'), 'exclude': lambda f: f is None }})  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone'), 'exclude': lambda f: f is None }})
    r"""Name of the timezone in format like 'Europe/London'. Available only when the place is specified through place ID."""  
    