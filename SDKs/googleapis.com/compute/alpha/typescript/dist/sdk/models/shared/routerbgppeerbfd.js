"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouterBgpPeerBfd = exports.RouterBgpPeerBfdSessionInitializationModeEnum = exports.RouterBgpPeerBfdPacketModeEnum = exports.RouterBgpPeerBfdModeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is PASSIVE.
 */
var RouterBgpPeerBfdModeEnum;
(function (RouterBgpPeerBfdModeEnum) {
    RouterBgpPeerBfdModeEnum["Active"] = "ACTIVE";
    RouterBgpPeerBfdModeEnum["Disabled"] = "DISABLED";
    RouterBgpPeerBfdModeEnum["Passive"] = "PASSIVE";
})(RouterBgpPeerBfdModeEnum = exports.RouterBgpPeerBfdModeEnum || (exports.RouterBgpPeerBfdModeEnum = {}));
/**
 * The BFD packet mode for this BGP peer. If set to CONTROL_AND_ECHO, BFD echo mode is enabled for this BGP peer. In this mode, if the peer router also has BFD echo mode enabled, BFD echo packets will be sent to the other router. If the peer router does not have BFD echo mode enabled, only control packets will be sent. If set to CONTROL_ONLY, BFD echo mode is disabled for this BGP peer. If this router and the peer router have a multihop connection, this should be set to CONTROL_ONLY as BFD echo mode is only supported on singlehop connections. The default is CONTROL_AND_ECHO.
 */
var RouterBgpPeerBfdPacketModeEnum;
(function (RouterBgpPeerBfdPacketModeEnum) {
    RouterBgpPeerBfdPacketModeEnum["ControlAndEcho"] = "CONTROL_AND_ECHO";
    RouterBgpPeerBfdPacketModeEnum["ControlOnly"] = "CONTROL_ONLY";
})(RouterBgpPeerBfdPacketModeEnum = exports.RouterBgpPeerBfdPacketModeEnum || (exports.RouterBgpPeerBfdPacketModeEnum = {}));
/**
 * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED.
 */
var RouterBgpPeerBfdSessionInitializationModeEnum;
(function (RouterBgpPeerBfdSessionInitializationModeEnum) {
    RouterBgpPeerBfdSessionInitializationModeEnum["Active"] = "ACTIVE";
    RouterBgpPeerBfdSessionInitializationModeEnum["Disabled"] = "DISABLED";
    RouterBgpPeerBfdSessionInitializationModeEnum["Passive"] = "PASSIVE";
})(RouterBgpPeerBfdSessionInitializationModeEnum = exports.RouterBgpPeerBfdSessionInitializationModeEnum || (exports.RouterBgpPeerBfdSessionInitializationModeEnum = {}));
var RouterBgpPeerBfd = /** @class */ (function (_super) {
    __extends(RouterBgpPeerBfd, _super);
    function RouterBgpPeerBfd() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minReceiveInterval" }),
        __metadata("design:type", Number)
    ], RouterBgpPeerBfd.prototype, "minReceiveInterval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minTransmitInterval" }),
        __metadata("design:type", Number)
    ], RouterBgpPeerBfd.prototype, "minTransmitInterval", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mode" }),
        __metadata("design:type", String)
    ], RouterBgpPeerBfd.prototype, "mode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "multiplier" }),
        __metadata("design:type", Number)
    ], RouterBgpPeerBfd.prototype, "multiplier", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "packetMode" }),
        __metadata("design:type", String)
    ], RouterBgpPeerBfd.prototype, "packetMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sessionInitializationMode" }),
        __metadata("design:type", String)
    ], RouterBgpPeerBfd.prototype, "sessionInitializationMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "slowTimerInterval" }),
        __metadata("design:type", Number)
    ], RouterBgpPeerBfd.prototype, "slowTimerInterval", void 0);
    return RouterBgpPeerBfd;
}(utils_1.SpeakeasyBase));
exports.RouterBgpPeerBfd = RouterBgpPeerBfd;
