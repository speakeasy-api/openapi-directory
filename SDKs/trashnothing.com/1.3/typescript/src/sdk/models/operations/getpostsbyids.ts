/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetPostsByIdsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=query;name=api_key",
  })
  apiKey?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Code?: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2Implicit?: string;
}

export class GetPostsByIdsRequest extends SpeakeasyBase {
  /**
   * A comma separated list of the post IDs. If more than 10 post IDs are passed, only the first 10 posts will be returned.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=post_ids",
  })
  postIds: string;
}

/**
 * The posts.
 */
export class GetPostsByIds200ApplicationJSON extends SpeakeasyBase {
  /**
   * The IDs of posts that are forbidden for the current user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "forbidden" })
  forbidden?: string[];

  /**
   * The IDs of posts that weren't found (may have been deleted or never existed).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not_found" })
  notFound?: string[];

  @SpeakeasyMetadata({ elemType: shared.Post })
  @Expose({ name: "posts" })
  @Type(() => shared.Post)
  posts?: shared.Post[];
}

export class GetPostsByIdsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The posts.
   */
  @SpeakeasyMetadata()
  getPostsByIds200ApplicationJSONObject?: GetPostsByIds200ApplicationJSON;
}
