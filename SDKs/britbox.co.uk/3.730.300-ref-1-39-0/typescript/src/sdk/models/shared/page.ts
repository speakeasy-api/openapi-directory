/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ItemDetail } from "./itemdetail";
import { ItemList } from "./itemlist";
import { PageEntry } from "./pageentry";
import { PageMetadata } from "./pagemetadata";
import { Theme } from "./theme";
import { Expose, Type } from "class-transformer";

/**
 * The page requested.
 */
export class Page extends SpeakeasyBase {
  /**
   * A map of custom fields defined by a curator for a page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customFields" })
  customFields?: Record<string, any>;

  /**
   * Entries of a page
   */
  @SpeakeasyMetadata({ elemType: PageEntry })
  @Expose({ name: "entries" })
  @Type(() => PageEntry)
  entries: PageEntry[];

  /**
   * Unique identifier for the page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * True if this page is static and doesn't have any dynamic content to load.
   *
   * @remarks
   *
   * Static pages don't need to go back to the page endpoint to load page content
   * instead the page summary loaded with the sitemap should be enough to determine
   * the page template type and render based on this.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isStatic" })
  isStatic: boolean;

  /**
   * True if this page is a system page type.
   *
   * @remarks
   *
   * **DEPRECATED** This property doesn't have any real use in client applications
   * anymore so shouldn't be used. It especially shouldn't be used to determine if
   * a page is static or not. Use the `isStatic` property instead.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isSystemPage" })
  isSystemPage: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "item" })
  @Type(() => ItemDetail)
  item?: ItemDetail;

  /**
   * Key used to lookup a known page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  /**
   * A pageable list of items.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "list" })
  @Type(() => ItemList)
  list?: ItemList;

  /**
   * Metadata associated with a page. Primarily intended for SEO usage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => PageMetadata)
  metadata?: PageMetadata;

  /**
   * Unique path for the page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path: string;

  /**
   * Identifier for of the page template to render this page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "template" })
  template: string;

  @SpeakeasyMetadata({ elemType: Theme })
  @Expose({ name: "themes" })
  @Type(() => Theme)
  themes?: Theme[];

  /**
   * Title of the page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}
