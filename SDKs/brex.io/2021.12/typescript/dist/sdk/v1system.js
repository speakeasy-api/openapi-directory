"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1System = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
/**
 * System overview
 */
var V1System = /** @class */ (function () {
    function V1System(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * Returns the health information for the official business registers based on usage.
     *
     * @remarks
     * Returns the health information for the official business registers based on usage.
     */
    V1System.prototype.healthCheck = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/api/v1/system/health";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.HealthCheckResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.healthCheck200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.healthCheck200ApplicationJSONObjects = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.HealthCheck200ApplicationJSON, resFieldDepth);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.healthCheckDefaultApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.HealthCheckDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a list of countries
     *
     * @remarks
     * Retrieve the list of all currently enabled countries
     */
    V1System.prototype.systemCountries = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/api/v1/system/countries";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SystemCountriesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.systemCountries200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.systemCountries200ApplicationJSONObjects = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SystemCountries200ApplicationJSON, resFieldDepth);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.systemCountriesDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SystemCountriesDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Returns a list of products with prices
     *
     * @remarks
     * Retrieve pricing rules for your subscription plan
     */
    V1System.prototype.systemPricelist = function (config) {
        var baseURL = this._serverURL;
        var url = baseURL.replace(/\/$/, "") + "/api/v1/system/pricelist";
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.SystemPricelistResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.systemPricelist200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.systemPricelist200ApplicationJSONObjects = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SystemPricelist200ApplicationJSON, resFieldDepth);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.systemPricelistDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.SystemPricelistDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    return V1System;
}());
exports.V1System = V1System;
