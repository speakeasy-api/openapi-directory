<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class RouteResponsePath
{
    /**
     * The total ascent, in meters.
     * 
     * 
     * 
     * @var ?float $ascend
     */
	#[\JMS\Serializer\Annotation\SerializedName('ascend')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $ascend = null;
    
    /**
     * The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`.
     * 
     * 
     * 
     * @var ?array<float> $bbox
     */
	#[\JMS\Serializer\Annotation\SerializedName('bbox')]
    #[\JMS\Serializer\Annotation\Type('array<float>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $bbox = null;
    
    /**
     * The total descent, in meters.
     * 
     * 
     * 
     * @var ?float $descend
     */
	#[\JMS\Serializer\Annotation\SerializedName('descend')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $descend = null;
    
    /**
     * Details, as requested with the `details` parameter. Consider the value `{"street_name": [[0,2,"Frankfurter Straße"],[2,6,"Zollweg"]]}`.
     * 
     * In this example, the route uses two streets: The first, Frankfurter Straße, is
     * used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`.
     * See [here](https://discuss.graphhopper.com/t/2539) for discussion.
     * 
     * 
     * @var ?array<string, mixed> $details
     */
	#[\JMS\Serializer\Annotation\SerializedName('details')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $details = null;
    
    /**
     * The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
     * 
     * 
     * 
     * @var ?float $distance
     */
	#[\JMS\Serializer\Annotation\SerializedName('distance')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $distance = null;
    
    /**
     * The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading,
     * 
     * so be mindful when using them for navigation.
     * 
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\RouteResponsePathInstructions> $instructions
     */
	#[\JMS\Serializer\Annotation\SerializedName('instructions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\RouteResponsePathInstructions>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $instructions = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('points')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $points = null;
    
    /**
     * Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays
     * 
     * of coordinates. See the field description for more information on the two formats.
     * 
     * 
     * @var ?bool $pointsEncoded
     */
	#[\JMS\Serializer\Annotation\SerializedName('points_encoded')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $pointsEncoded = null;
    
    /**
     * An array of indices (zero-based), specifiying the order in which the input points are visited.
     * 
     * Only present if the `optimize` parameter was used.
     * 
     * 
     * @var ?array<int> $pointsOrder
     */
	#[\JMS\Serializer\Annotation\SerializedName('points_order')]
    #[\JMS\Serializer\Annotation\Type('array<int>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $pointsOrder = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('snapped_waypoints')]
    #[\JMS\Serializer\Annotation\Type('mixed')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public mixed $snappedWaypoints = null;
    
    /**
     * The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/).
     * 
     * 
     * 
     * @var ?int $time
     */
	#[\JMS\Serializer\Annotation\SerializedName('time')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $time = null;
    
	public function __construct()
	{
		$this->ascend = null;
		$this->bbox = null;
		$this->descend = null;
		$this->details = null;
		$this->distance = null;
		$this->instructions = null;
		$this->points = null;
		$this->pointsEncoded = null;
		$this->pointsOrder = null;
		$this->snappedWaypoints = null;
		$this->time = null;
	}
}
