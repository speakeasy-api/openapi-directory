"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Score:
    r"""It allows to record and remove points in the` Score2` fields."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def deletescorebyfield(self, request: operations.DeletescorebyfieldRequest) -> operations.DeletescorebyfieldResponse:
        r"""Delete score by field
        Allows you to remove a key from a specific field.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletescorebyfieldRequest, base_url, '/api/dataentities/{acronym}/documents/{id}/score/{field-name}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "deletescorebyfield_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletescorebyfieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def putscorebyfield(self, request: operations.PutscorebyfieldRequest) -> operations.PutscorebyfieldResponse:
        r"""Put score by field
        It allows to punctuate in a specific field.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutscorebyfieldRequest, base_url, '/api/dataentities/{acronym}/documents/{id}/score/{field-name}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "putscorebyfield_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutscorebyfieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def putscores(self, request: operations.PutscoresRequest) -> operations.PutscoresResponse:
        r"""Put scores
        It allows punctuate in more than one field and more than one key.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutscoresRequest, base_url, '/api/dataentities/{acronym}/documents/{id}/score', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutscoresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    