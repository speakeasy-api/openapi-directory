"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class GetAllApIsRequest:
    
    created_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdBy', 'style': 'form', 'explode': True }})
    r"""Only return APIs that have been created by the user ID represented by the given value."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'description', 'style': 'form', 'explode': True }})
    r"""Only return APIs whose description includes the given value. Matching is case insensitive."""  
    direction: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direction', 'style': 'form', 'explode': True }})
    r"""The sorting direction, which can be ascending or descending. The value can be asc to specify an ascending direction or desc to specify a descending direction. If none is specified, the default sorting direction is descending for timestamp and numeric fields and ascending otherwise. An ID is not considered a numeric field."""  
    is_public: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'isPublic', 'style': 'form', 'explode': True }})
    r"""Only return APIs with the corresponding privacy state. Public APIs have the isPublic value true; private APIs have the isPublic value false."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'name', 'style': 'form', 'explode': True }})
    r"""Only return APIs whose name includes the given value. Matching is case insensitive."""  
    since: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'since', 'style': 'form', 'explode': True }})
    r"""Only return APIs that have been updated after this time. Time is represented using the ISO 8601 date and time format."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""The value of sort can be one of the names of the fields included in the response."""  
    summary: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'summary', 'style': 'form', 'explode': True }})
    r"""Only return APIs whose summary includes the given value. Matching is case insensitive."""  
    until: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'until', 'style': 'form', 'explode': True }})
    r"""Only return APIs that have been updated before this time. Time is represented using the ISO 8601 date and time format."""  
    updated_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updatedBy', 'style': 'form', 'explode': True }})
    r"""Only return APIs that have been updated by the user ID represented by the given value."""  
    workspace: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'workspace', 'style': 'form', 'explode': True }})
    r"""Only return APIs that are inside the given workspace."""  
    

@dataclasses.dataclass
class GetAllApIsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    