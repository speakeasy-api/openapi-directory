// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FlowExecutionEventTypeEnum string

const (
	FlowExecutionEventTypeEnumExecutionStarted           FlowExecutionEventTypeEnum = "EXECUTION_STARTED"
	FlowExecutionEventTypeEnumExecutionFailed            FlowExecutionEventTypeEnum = "EXECUTION_FAILED"
	FlowExecutionEventTypeEnumExecutionAborted           FlowExecutionEventTypeEnum = "EXECUTION_ABORTED"
	FlowExecutionEventTypeEnumExecutionSucceeded         FlowExecutionEventTypeEnum = "EXECUTION_SUCCEEDED"
	FlowExecutionEventTypeEnumStepStarted                FlowExecutionEventTypeEnum = "STEP_STARTED"
	FlowExecutionEventTypeEnumStepFailed                 FlowExecutionEventTypeEnum = "STEP_FAILED"
	FlowExecutionEventTypeEnumStepSucceeded              FlowExecutionEventTypeEnum = "STEP_SUCCEEDED"
	FlowExecutionEventTypeEnumActivityScheduled          FlowExecutionEventTypeEnum = "ACTIVITY_SCHEDULED"
	FlowExecutionEventTypeEnumActivityStarted            FlowExecutionEventTypeEnum = "ACTIVITY_STARTED"
	FlowExecutionEventTypeEnumActivityFailed             FlowExecutionEventTypeEnum = "ACTIVITY_FAILED"
	FlowExecutionEventTypeEnumActivitySucceeded          FlowExecutionEventTypeEnum = "ACTIVITY_SUCCEEDED"
	FlowExecutionEventTypeEnumStartFlowExecutionTask     FlowExecutionEventTypeEnum = "START_FLOW_EXECUTION_TASK"
	FlowExecutionEventTypeEnumScheduleNextReadyStepsTask FlowExecutionEventTypeEnum = "SCHEDULE_NEXT_READY_STEPS_TASK"
	FlowExecutionEventTypeEnumThingActionTask            FlowExecutionEventTypeEnum = "THING_ACTION_TASK"
	FlowExecutionEventTypeEnumThingActionTaskFailed      FlowExecutionEventTypeEnum = "THING_ACTION_TASK_FAILED"
	FlowExecutionEventTypeEnumThingActionTaskSucceeded   FlowExecutionEventTypeEnum = "THING_ACTION_TASK_SUCCEEDED"
	FlowExecutionEventTypeEnumAcknowledgeTaskMessage     FlowExecutionEventTypeEnum = "ACKNOWLEDGE_TASK_MESSAGE"
)

func (e *FlowExecutionEventTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXECUTION_STARTED":
		fallthrough
	case "EXECUTION_FAILED":
		fallthrough
	case "EXECUTION_ABORTED":
		fallthrough
	case "EXECUTION_SUCCEEDED":
		fallthrough
	case "STEP_STARTED":
		fallthrough
	case "STEP_FAILED":
		fallthrough
	case "STEP_SUCCEEDED":
		fallthrough
	case "ACTIVITY_SCHEDULED":
		fallthrough
	case "ACTIVITY_STARTED":
		fallthrough
	case "ACTIVITY_FAILED":
		fallthrough
	case "ACTIVITY_SUCCEEDED":
		fallthrough
	case "START_FLOW_EXECUTION_TASK":
		fallthrough
	case "SCHEDULE_NEXT_READY_STEPS_TASK":
		fallthrough
	case "THING_ACTION_TASK":
		fallthrough
	case "THING_ACTION_TASK_FAILED":
		fallthrough
	case "THING_ACTION_TASK_SUCCEEDED":
		fallthrough
	case "ACKNOWLEDGE_TASK_MESSAGE":
		*e = FlowExecutionEventTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FlowExecutionEventTypeEnum: %s", s)
	}
}
