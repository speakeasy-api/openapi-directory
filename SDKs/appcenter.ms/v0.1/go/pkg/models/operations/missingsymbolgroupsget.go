// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type MissingSymbolGroupsGetSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type MissingSymbolGroupsGetRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// missing symbol crash group id
	SymbolGroupID string `pathParam:"style=simple,explode=false,name=symbol_group_id"`
}

// MissingSymbolGroupsGetDefaultApplicationJSON - failure response object
type MissingSymbolGroupsGetDefaultApplicationJSON struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum - symbol status
type MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum string

const (
	MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnumMissing   MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum = "missing"
	MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnumIgnored   MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum = "ignored"
	MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnumAvailable MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum = "available"
)

func (e *MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing":
		fallthrough
	case "ignored":
		fallthrough
	case "available":
		*e = MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum: %s", s)
	}
}

// MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbols - missing symbol
type MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbols struct {
	// symbol name
	Name string `json:"name"`
	// symbol plarform
	Platform *string `json:"platform,omitempty"`
	// symbol status
	Status MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbolsStatusEnum `json:"status"`
	// symbol id
	SymbolID string `json:"symbol_id"`
}

// MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum - group status
type MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum string

const (
	MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnumActive  MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum = "active"
	MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnumPending MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum = "pending"
	MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnumClosed  MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum = "closed"
)

func (e *MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "pending":
		fallthrough
	case "closed":
		*e = MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum: %s", s)
	}
}

// MissingSymbolGroupsGet200ApplicationJSONGroups - missing symbol crash group object
type MissingSymbolGroupsGet200ApplicationJSONGroups struct {
	// application build
	AppBuild string `json:"app_build"`
	// application id
	AppID string `json:"app_id"`
	// application version
	AppVer string `json:"app_ver"`
	// number of crashes that belong to this group
	CrashCount *int64 `json:"crash_count,omitempty"`
	// number of errors that belong to this group
	ErrorCount *int64 `json:"error_count,omitempty"`
	// last update date for the group
	LastModified time.Time `json:"last_modified"`
	// list of missing symbols
	MissingSymbols []MissingSymbolGroupsGet200ApplicationJSONGroupsMissingSymbols `json:"missing_symbols"`
	// group status
	Status MissingSymbolGroupsGet200ApplicationJSONGroupsStatusEnum `json:"status"`
	// id of the symbol group
	SymbolGroupID string `json:"symbol_group_id"`
}

// MissingSymbolGroupsGet200ApplicationJSON - grouped by missing symbols crashes response object
type MissingSymbolGroupsGet200ApplicationJSON struct {
	// list of crash groups formed by missing symbols combination
	Groups []MissingSymbolGroupsGet200ApplicationJSONGroups `json:"groups"`
	// total number of crashes for all the groups
	TotalCrashCount int64 `json:"total_crash_count"`
}

type MissingSymbolGroupsGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	MissingSymbolGroupsGet200ApplicationJSONObject *MissingSymbolGroupsGet200ApplicationJSON
	// Error
	MissingSymbolGroupsGetDefaultApplicationJSONObject *MissingSymbolGroupsGetDefaultApplicationJSON
}
