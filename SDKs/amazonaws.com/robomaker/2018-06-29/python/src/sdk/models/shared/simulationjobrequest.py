"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compute as shared_compute
from ..shared import datasourceconfig as shared_datasourceconfig
from ..shared import failurebehavior_enum as shared_failurebehavior_enum
from ..shared import loggingconfig as shared_loggingconfig
from ..shared import outputlocation as shared_outputlocation
from ..shared import robotapplicationconfig as shared_robotapplicationconfig
from ..shared import simulationapplicationconfig as shared_simulationapplicationconfig
from ..shared import vpcconfig as shared_vpcconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SimulationJobRequest:
    r"""Information about a simulation job request."""
    
    max_job_duration_in_seconds: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxJobDurationInSeconds') }})  
    compute: Optional[shared_compute.Compute] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compute'), 'exclude': lambda f: f is None }})  
    data_sources: Optional[list[shared_datasourceconfig.DataSourceConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSources'), 'exclude': lambda f: f is None }})  
    failure_behavior: Optional[shared_failurebehavior_enum.FailureBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failureBehavior'), 'exclude': lambda f: f is None }})  
    iam_role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iamRole'), 'exclude': lambda f: f is None }})  
    logging_config: Optional[shared_loggingconfig.LoggingConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('loggingConfig'), 'exclude': lambda f: f is None }})
    r"""The logging configuration."""  
    output_location: Optional[shared_outputlocation.OutputLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputLocation'), 'exclude': lambda f: f is None }})
    r"""The output location."""  
    robot_applications: Optional[list[shared_robotapplicationconfig.RobotApplicationConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('robotApplications'), 'exclude': lambda f: f is None }})  
    simulation_applications: Optional[list[shared_simulationapplicationconfig.SimulationApplicationConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('simulationApplications'), 'exclude': lambda f: f is None }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    use_default_applications: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useDefaultApplications'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_vpcconfig.VPCConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpcConfig'), 'exclude': lambda f: f is None }})
    r"""If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs."""  
    