"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETEnableFastLaunchActionEnum(str, Enum):
    ENABLE_FAST_LAUNCH = 'EnableFastLaunch'


@dataclasses.dataclass
class GETEnableFastLaunchLaunchTemplate:
    r"""<p>Request to create a launch template for a fast-launch enabled Windows AMI.</p> <note> <p>Note - You can specify either the <code>LaunchTemplateName</code> or the <code>LaunchTemplateId</code>, but not both.</p> </note>"""
    
    version: str = dataclasses.field(metadata={'query_param': { 'field_name': 'Version' }})  
    launch_template_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LaunchTemplateId' }})  
    launch_template_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LaunchTemplateName' }})  
    

@dataclasses.dataclass
class GETEnableFastLaunchSnapshotConfiguration:
    r"""Configuration settings for creating and managing pre-provisioned snapshots for a fast-launch enabled Windows AMI."""
    
    target_resource_count: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TargetResourceCount' }})  
    
class GETEnableFastLaunchVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETEnableFastLaunchRequest:
    
    action: GETEnableFastLaunchActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    image_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'ImageId', 'style': 'form', 'explode': True }})
    r"""The ID of the image for which youâ€™re enabling faster launching."""  
    version: GETEnableFastLaunchVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    launch_template: Optional[GETEnableFastLaunchLaunchTemplate] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LaunchTemplate', 'style': 'form', 'explode': True }})
    r"""The launch template to use when launching Windows instances from pre-provisioned snapshots. Launch template parameters can include either the name or ID of the launch template, but not both."""  
    max_parallel_launches: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxParallelLaunches', 'style': 'form', 'explode': True }})
    r"""The maximum number of instances that Amazon EC2 can launch at the same time to create pre-provisioned snapshots for Windows faster launching. Value must be <code>6</code> or greater."""  
    resource_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ResourceType', 'style': 'form', 'explode': True }})
    r"""The type of resource to use for pre-provisioning the Windows AMI for faster launching. Supported values include: <code>snapshot</code>, which is the default value."""  
    snapshot_configuration: Optional[GETEnableFastLaunchSnapshotConfiguration] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SnapshotConfiguration', 'style': 'form', 'explode': True }})
    r"""Configuration settings for creating and managing the snapshots that are used for pre-provisioning the Windows AMI for faster launching. The associated <code>ResourceType</code> must be <code>snapshot</code>."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETEnableFastLaunchResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    