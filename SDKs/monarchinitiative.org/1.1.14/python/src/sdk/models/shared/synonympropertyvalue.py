"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SynonymPropertyValue:
    
    pred: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pred'), 'exclude': lambda f: f is None }})
    r"""predicate (attribute) part"""  
    val: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('val'), 'exclude': lambda f: f is None }})
    r"""value part"""  
    xrefs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('xrefs'), 'exclude': lambda f: f is None }})
    r"""Xrefs provenance for property-value"""  
    