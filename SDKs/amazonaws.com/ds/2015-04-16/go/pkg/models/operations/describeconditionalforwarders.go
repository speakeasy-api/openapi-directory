// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeConditionalForwardersXAmzTargetEnum
type DescribeConditionalForwardersXAmzTargetEnum string

const (
	DescribeConditionalForwardersXAmzTargetEnumDirectoryService20150416DescribeConditionalForwarders DescribeConditionalForwardersXAmzTargetEnum = "DirectoryService_20150416.DescribeConditionalForwarders"
)

func (e DescribeConditionalForwardersXAmzTargetEnum) ToPointer() *DescribeConditionalForwardersXAmzTargetEnum {
	return &e
}

func (e *DescribeConditionalForwardersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DirectoryService_20150416.DescribeConditionalForwarders":
		*e = DescribeConditionalForwardersXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeConditionalForwardersXAmzTargetEnum: %v", v)
	}
}

type DescribeConditionalForwardersRequest struct {
	DescribeConditionalForwardersRequest shared.DescribeConditionalForwardersRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                       *string                                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                             *string                                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                    *string                                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                        *string                                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                    *string                                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                           DescribeConditionalForwardersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeConditionalForwardersResponse struct {
	// ClientException
	ClientException interface{}
	ContentType     string
	// Success
	DescribeConditionalForwardersResult *shared.DescribeConditionalForwardersResult
	// DirectoryUnavailableException
	DirectoryUnavailableException interface{}
	// EntityDoesNotExistException
	EntityDoesNotExistException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceException
	ServiceException interface{}
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
