<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TeamTemplates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List team templates
     * 
     * Fetches multiple team template records. The records can be filtered, paged, and sorted according to
     * the respective parameters.
     * 
     * Team templates are templates that are available team-wide. Admins may use
     * team templates to create original content for the entire team, monitor version control to ensure templates are always up to date,
     * and track template performance across the entire organization. All metrics on a team template reflect usage across the team; individual metrics can be found with the email_templates API endpoint.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesJsonResponse
     */
	public function getV2TeamTemplatesJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team_templates.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Fetch a team template
     * 
     * Fetches a team template, by ID only.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesIdJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesIdJsonResponse
     */
	public function getV2TeamTemplatesIdJson(
        \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesIdJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesIdJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/team_templates/{id}.json', \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesIdJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesIdJsonRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetV2TeamTemplatesIdJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}