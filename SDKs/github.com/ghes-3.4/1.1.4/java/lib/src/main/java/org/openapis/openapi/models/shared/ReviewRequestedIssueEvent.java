/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReviewRequestedIssueEvent - Review Requested Issue Event
 */
public class ReviewRequestedIssueEvent {
    /**
     * A GitHub user.
     */
    @JsonProperty("actor")
    public SimpleUser actor;
    public ReviewRequestedIssueEvent withActor(SimpleUser actor) {
        this.actor = actor;
        return this;
    }
    
    @JsonProperty("commit_id")
    public String commitId;
    public ReviewRequestedIssueEvent withCommitId(String commitId) {
        this.commitId = commitId;
        return this;
    }
    
    @JsonProperty("commit_url")
    public String commitUrl;
    public ReviewRequestedIssueEvent withCommitUrl(String commitUrl) {
        this.commitUrl = commitUrl;
        return this;
    }
    
    @JsonProperty("created_at")
    public String createdAt;
    public ReviewRequestedIssueEvent withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("event")
    public String event;
    public ReviewRequestedIssueEvent withEvent(String event) {
        this.event = event;
        return this;
    }
    
    @JsonProperty("id")
    public Long id;
    public ReviewRequestedIssueEvent withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;
    public ReviewRequestedIssueEvent withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    @JsonProperty("performed_via_github_app")
    public NullableIntegration performedViaGithubApp;
    public ReviewRequestedIssueEvent withPerformedViaGithubApp(NullableIntegration performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
        return this;
    }
    
    /**
     * A GitHub user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requested_reviewer")
    public SimpleUser requestedReviewer;
    public ReviewRequestedIssueEvent withRequestedReviewer(SimpleUser requestedReviewer) {
        this.requestedReviewer = requestedReviewer;
        return this;
    }
    
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requested_team")
    public Team requestedTeam;
    public ReviewRequestedIssueEvent withRequestedTeam(Team requestedTeam) {
        this.requestedTeam = requestedTeam;
        return this;
    }
    
    /**
     * A GitHub user.
     */
    @JsonProperty("review_requester")
    public SimpleUser reviewRequester;
    public ReviewRequestedIssueEvent withReviewRequester(SimpleUser reviewRequester) {
        this.reviewRequester = reviewRequester;
        return this;
    }
    
    @JsonProperty("url")
    public String url;
    public ReviewRequestedIssueEvent withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
