/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Invoice {
    /**
     * Balance of invoice due.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    public Double balance;
    public Invoice withBalance(Double balance) {
        this.balance = balance;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    public Address billingAddress;
    public Invoice withBillingAddress(Address billingAddress) {
        this.billingAddress = billingAddress;
        return this;
    }
    
    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Invoice withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    public String createdBy;
    public Invoice withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public CurrencyEnum currency;
    public Invoice withCurrency(CurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Currency Exchange Rate at the time entity was recorded/generated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency_rate")
    public Double currencyRate;
    public Invoice withCurrencyRate(Double currencyRate) {
        this.currencyRate = currencyRate;
        return this;
    }
    
    /**
     * The customer this entity is linked to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer")
    public LinkedCustomer customer;
    public Invoice withCustomer(LinkedCustomer customer) {
        this.customer = customer;
        return this;
    }
    
    /**
     * Customer memo
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_memo")
    public String customerMemo;
    public Invoice withCustomerMemo(String customerMemo) {
        this.customerMemo = customerMemo;
        return this;
    }
    
    /**
     * Amount of deposit made to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deposit")
    public Double deposit;
    public Invoice withDeposit(Double deposit) {
        this.deposit = deposit;
        return this;
    }
    
    /**
     * Discount amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    public Double discountAmount;
    public Invoice withDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
        return this;
    }
    
    /**
     * Discount percentage applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_percentage")
    public Double discountPercentage;
    public Invoice withDiscountPercentage(Double discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }
    
    /**
     * The third-party API ID of original entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downstream_id")
    public String downstreamId;
    public Invoice withDownstreamId(String downstreamId) {
        this.downstreamId = downstreamId;
        return this;
    }
    
    /**
     * The invoice due date is the date on which a payment or invoice is scheduled to be received by the seller - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("due_date")
    public LocalDate dueDate;
    public Invoice withDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * A unique identifier for an object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Invoice withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Date invoice was issued - YYYY-MM-DD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("invoice_date")
    public LocalDate invoiceDate;
    public Invoice withInvoiceDate(LocalDate invoiceDate) {
        this.invoiceDate = invoiceDate;
        return this;
    }
    
    /**
     * Invoice sent to contact/customer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_sent")
    public Boolean invoiceSent;
    public Invoice withInvoiceSent(Boolean invoiceSent) {
        this.invoiceSent = invoiceSent;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_items")
    public InvoiceLineItem[] lineItems;
    public Invoice withLineItems(InvoiceLineItem[] lineItems) {
        this.lineItems = lineItems;
        return this;
    }
    
    /**
     * Invoice number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public Invoice withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * A PO Number uniquely identifies a purchase order and is generally defined by the buyer. The buyer will match the PO number in the invoice to the Purchase Order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("po_number")
    public String poNumber;
    public Invoice withPoNumber(String poNumber) {
        this.poNumber = poNumber;
        return this;
    }
    
    /**
     * Optional invoice reference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    public String reference;
    public Invoice withReference(String reference) {
        this.reference = reference;
        return this;
    }
    
    /**
     * A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("row_version")
    public String rowVersion;
    public Invoice withRowVersion(String rowVersion) {
        this.rowVersion = rowVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    public Address shippingAddress;
    public Invoice withShippingAddress(Address shippingAddress) {
        this.shippingAddress = shippingAddress;
        return this;
    }
    
    /**
     * URL link to a source document - shown as 'Go to [appName]' in the downstream app. Currently only supported for Xero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_document_url")
    public String sourceDocumentUrl;
    public Invoice withSourceDocumentUrl(String sourceDocumentUrl) {
        this.sourceDocumentUrl = sourceDocumentUrl;
        return this;
    }
    
    /**
     * Invoice status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public InvoiceStatusEnum status;
    public Invoice withStatus(InvoiceStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Sub-total amount, normally before tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_total")
    public Double subTotal;
    public Invoice withSubTotal(Double subTotal) {
        this.subTotal = subTotal;
        return this;
    }
    
    /**
     * Applicable tax id/code override if tax is not supplied on a line item basis.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_code")
    public String taxCode;
    public Invoice withTaxCode(String taxCode) {
        this.taxCode = taxCode;
        return this;
    }
    
    /**
     * Amounts are including tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_inclusive")
    public Boolean taxInclusive;
    public Invoice withTaxInclusive(Boolean taxInclusive) {
        this.taxInclusive = taxInclusive;
        return this;
    }
    
    /**
     * Optional invoice template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    public String templateId;
    public Invoice withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    /**
     * Terms of payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terms")
    public String terms;
    public Invoice withTerms(String terms) {
        this.terms = terms;
        return this;
    }
    
    /**
     * Total amount of invoice, including tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total")
    public Double total;
    public Invoice withTotal(Double total) {
        this.total = total;
        return this;
    }
    
    /**
     * Total tax amount applied to this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    public Double totalTax;
    public Invoice withTotalTax(Double totalTax) {
        this.totalTax = totalTax;
        return this;
    }
    
    /**
     * Invoice type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public InvoiceInvoiceTypeEnum type;
    public Invoice withType(InvoiceInvoiceTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Invoice withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The user who last updated the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    public String updatedBy;
    public Invoice withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
}
