// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// SubContractorSubContractorAddress - The sub contractors' address
type SubContractorSubContractorAddress struct {
	// The addresss' line 1
	Address1 *string `json:"Address1,omitempty"`
	// The addresss' line 2
	Address2 *string `json:"Address2,omitempty"`
	// The addresss' line 3
	Address3 *string `json:"Address3,omitempty"`
	// The addresss' line 4
	Address4 *string `json:"Address4,omitempty"`
	// The addresss' country
	Country *string `json:"Country,omitempty"`
	// The addresss' postcode
	Postcode *string `json:"Postcode,omitempty"`
}

// SubContractorSubContractorBankAccount - The sub contractors' bank account
type SubContractorSubContractorBankAccount struct {
	// The bank accounts' account name
	AccountName *string `json:"AccountName,omitempty"`
	// The bank accounts' account number
	AccountNumber *string `json:"AccountNumber,omitempty"`
	// The bank accounts' branch name
	BranchName *string `json:"BranchName,omitempty"`
	// The bank accounts' reference
	Reference *string `json:"Reference,omitempty"`
	// The bank accounts' sort code
	SortCode *string `json:"SortCode,omitempty"`
}

// SubContractorSubContractorBusinessTypeEnum - The sub contractors' business type
type SubContractorSubContractorBusinessTypeEnum string

const (
	SubContractorSubContractorBusinessTypeEnumSoleTrader  SubContractorSubContractorBusinessTypeEnum = "SoleTrader"
	SubContractorSubContractorBusinessTypeEnumCompany     SubContractorSubContractorBusinessTypeEnum = "Company"
	SubContractorSubContractorBusinessTypeEnumPartnership SubContractorSubContractorBusinessTypeEnum = "Partnership"
	SubContractorSubContractorBusinessTypeEnumTrust       SubContractorSubContractorBusinessTypeEnum = "Trust"
)

func (e *SubContractorSubContractorBusinessTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SoleTrader":
		fallthrough
	case "Company":
		fallthrough
	case "Partnership":
		fallthrough
	case "Trust":
		*e = SubContractorSubContractorBusinessTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubContractorSubContractorBusinessTypeEnum: %s", s)
	}
}

// SubContractorSubContractorPayFrequencyEnum - The sub contractors' pay frequency
type SubContractorSubContractorPayFrequencyEnum string

const (
	SubContractorSubContractorPayFrequencyEnumMonthly SubContractorSubContractorPayFrequencyEnum = "Monthly"
	SubContractorSubContractorPayFrequencyEnumWeekly  SubContractorSubContractorPayFrequencyEnum = "Weekly"
)

func (e *SubContractorSubContractorPayFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Monthly":
		fallthrough
	case "Weekly":
		*e = SubContractorSubContractorPayFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubContractorSubContractorPayFrequencyEnum: %s", s)
	}
}

// SubContractorSubContractorPaymentMethodEnum - The sub contractors' payment method
type SubContractorSubContractorPaymentMethodEnum string

const (
	SubContractorSubContractorPaymentMethodEnumNotSet         SubContractorSubContractorPaymentMethodEnum = "NotSet"
	SubContractorSubContractorPaymentMethodEnumCash           SubContractorSubContractorPaymentMethodEnum = "Cash"
	SubContractorSubContractorPaymentMethodEnumCheque         SubContractorSubContractorPaymentMethodEnum = "Cheque"
	SubContractorSubContractorPaymentMethodEnumBacs           SubContractorSubContractorPaymentMethodEnum = "BACS"
	SubContractorSubContractorPaymentMethodEnumFasterPayments SubContractorSubContractorPaymentMethodEnum = "FasterPayments"
	SubContractorSubContractorPaymentMethodEnumOther          SubContractorSubContractorPaymentMethodEnum = "Other"
)

func (e *SubContractorSubContractorPaymentMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "Cash":
		fallthrough
	case "Cheque":
		fallthrough
	case "BACS":
		fallthrough
	case "FasterPayments":
		fallthrough
	case "Other":
		*e = SubContractorSubContractorPaymentMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubContractorSubContractorPaymentMethodEnum: %s", s)
	}
}

// SubContractorSubContractorRegionEnum - The sub contractors' region
type SubContractorSubContractorRegionEnum string

const (
	SubContractorSubContractorRegionEnumNotSet   SubContractorSubContractorRegionEnum = "NotSet"
	SubContractorSubContractorRegionEnumEngland  SubContractorSubContractorRegionEnum = "England"
	SubContractorSubContractorRegionEnumScotland SubContractorSubContractorRegionEnum = "Scotland"
	SubContractorSubContractorRegionEnumWales    SubContractorSubContractorRegionEnum = "Wales"
)

func (e *SubContractorSubContractorRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "England":
		fallthrough
	case "Scotland":
		fallthrough
	case "Wales":
		*e = SubContractorSubContractorRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubContractorSubContractorRegionEnum: %s", s)
	}
}

// SubContractorSubContractorTaxationStatusEnum - The sub contractors' taxation status
type SubContractorSubContractorTaxationStatusEnum string

const (
	SubContractorSubContractorTaxationStatusEnumUnmatched SubContractorSubContractorTaxationStatusEnum = "Unmatched"
	SubContractorSubContractorTaxationStatusEnumNet       SubContractorSubContractorTaxationStatusEnum = "Net"
	SubContractorSubContractorTaxationStatusEnumGross     SubContractorSubContractorTaxationStatusEnum = "Gross"
)

func (e *SubContractorSubContractorTaxationStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unmatched":
		fallthrough
	case "Net":
		fallthrough
	case "Gross":
		*e = SubContractorSubContractorTaxationStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubContractorSubContractorTaxationStatusEnum: %s", s)
	}
}

// SubContractorSubContractorTerritoryEnum - The sub contractors' territory
type SubContractorSubContractorTerritoryEnum string

const (
	SubContractorSubContractorTerritoryEnumUnitedKingdom SubContractorSubContractorTerritoryEnum = "UnitedKingdom"
)

func (e *SubContractorSubContractorTerritoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UnitedKingdom":
		*e = SubContractorSubContractorTerritoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SubContractorSubContractorTerritoryEnum: %s", s)
	}
}

type SubContractorSubContractor struct {
	// The sub contractors' address
	Address *SubContractorSubContractorAddress `json:"Address,omitempty"`
	// The sub contractors' bank account
	BankAccount *SubContractorSubContractorBankAccount `json:"BankAccount,omitempty"`
	// The sub contractors' business type
	BusinessType *SubContractorSubContractorBusinessTypeEnum `json:"BusinessType,omitempty"`
	// The sub contractors' company name
	CompanyName *string `json:"CompanyName,omitempty"`
	// The sub contractors' company registration number
	CompanyRegistrationNumber *string `json:"CompanyRegistrationNumber,omitempty"`
	// The sub contractors' deactivated
	Deactivated *bool `json:"Deactivated,omitempty"`
	// The sub contractors' effective date
	EffectiveDate *types.Date `json:"EffectiveDate,omitempty"`
	// The sub contractors' first name
	FirstName *string `json:"FirstName,omitempty"`
	// The sub contractors' initials
	Initials *string `json:"Initials,omitempty"`
	// The sub contractors' last name
	LastName *string `json:"LastName,omitempty"`
	// The sub contractors' meta data
	MetaData map[string]interface{} `json:"MetaData,omitempty"`
	// The sub contractors' middle name
	MiddleName *string `json:"MiddleName,omitempty"`
	// The sub contractors' next revision date
	NextRevisionDate *types.Date `json:"NextRevisionDate,omitempty"`
	// The sub contractors' ni number
	NiNumber *string `json:"NiNumber,omitempty"`
	// The sub contractors' partnership name
	PartnershipName *string `json:"PartnershipName,omitempty"`
	// The sub contractors' partnership unique tax reference
	PartnershipUniqueTaxReference *string `json:"PartnershipUniqueTaxReference,omitempty"`
	// The sub contractors' pay frequency
	PayFrequency *SubContractorSubContractorPayFrequencyEnum `json:"PayFrequency,omitempty"`
	// The sub contractors' payment method
	PaymentMethod *SubContractorSubContractorPaymentMethodEnum `json:"PaymentMethod,omitempty"`
	// The sub contractors' region
	Region *SubContractorSubContractorRegionEnum `json:"Region,omitempty"`
	// The sub contractors' revision
	Revision *int `json:"Revision,omitempty"`
	// The sub contractors' taxation status
	TaxationStatus *SubContractorSubContractorTaxationStatusEnum `json:"TaxationStatus,omitempty"`
	// The sub contractors' telephone
	Telephone *string `json:"Telephone,omitempty"`
	// The sub contractors' territory
	Territory *SubContractorSubContractorTerritoryEnum `json:"Territory,omitempty"`
	// The sub contractors' title
	Title *string `json:"Title,omitempty"`
	// The sub contractors' trading name
	TradingName *string `json:"TradingName,omitempty"`
	// The sub contractors' unique tax reference
	UniqueTaxReference *string `json:"UniqueTaxReference,omitempty"`
	// The sub contractors' vat registered
	VatRegistered *bool `json:"VatRegistered,omitempty"`
	// The sub contractors' vat registration number
	VatRegistrationNumber *string `json:"VatRegistrationNumber,omitempty"`
	// The sub contractors' verification date
	VerificationDate *time.Time `json:"VerificationDate,omitempty"`
	// The sub contractors' verification number
	VerificationNumber *string `json:"VerificationNumber,omitempty"`
	// The sub contractors' works number
	WorksNumber *string `json:"WorksNumber,omitempty"`
}

// SubContractor - The sub contractor object.
type SubContractor struct {
	SubContractor *SubContractorSubContractor `json:"SubContractor,omitempty"`
}
