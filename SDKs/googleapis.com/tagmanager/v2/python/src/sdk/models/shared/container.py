"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import containerfeatures as shared_containerfeatures
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ContainerUsageContextEnum(str, Enum):
    USAGE_CONTEXT_UNSPECIFIED = 'usageContextUnspecified'
    WEB = 'web'
    ANDROID = 'android'
    IOS = 'ios'
    ANDROID_SDK5 = 'androidSdk5'
    IOS_SDK5 = 'iosSdk5'
    AMP = 'amp'
    SERVER = 'server'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Container:
    r"""Represents a Google Tag Manager Container, which specifies the platform tags will run on, manages workspaces, and retains container versions."""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountId'), 'exclude': lambda f: f is None }})
    r"""GTM Account ID."""  
    container_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerId'), 'exclude': lambda f: f is None }})
    r"""The Container ID uniquely identifies the GTM Container."""  
    domain_name: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainName'), 'exclude': lambda f: f is None }})
    r"""List of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update"""  
    features: Optional[shared_containerfeatures.ContainerFeatures] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})
    r"""The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update"""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""GTM Container's API relative path."""  
    public_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicId'), 'exclude': lambda f: f is None }})
    r"""Container Public ID."""  
    tagging_server_urls: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taggingServerUrls'), 'exclude': lambda f: f is None }})
    r"""List of server-side container URLs for the Container. If multiple URLs are provided, all URL paths must match. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update"""  
    tag_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagIds'), 'exclude': lambda f: f is None }})
    r"""All Tag IDs that refer to this Container."""  
    tag_manager_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagManagerUrl'), 'exclude': lambda f: f is None }})
    r"""Auto generated link to the tag manager UI"""  
    usage_context: Optional[list[ContainerUsageContextEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usageContext'), 'exclude': lambda f: f is None }})
    r"""List of Usage Contexts for the Container. Valid values include: web, android, or ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update"""  
    