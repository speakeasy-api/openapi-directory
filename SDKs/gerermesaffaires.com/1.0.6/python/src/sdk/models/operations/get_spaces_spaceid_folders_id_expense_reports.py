"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import expensereport as shared_expensereport
from enum import Enum
from typing import Any, Optional

class GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum(str, Enum):
    r"""name of value for sort"""
    EXPENSE_DATE = 'ExpenseDate'
    INCL_VAT = 'InclVAT'
    TITLE = 'Title'

class GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum(str, Enum):
    r"""order of sort (if absent default is asc)"""
    ASC = 'asc'
    DESC = 'desc'

class GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum(str, Enum):
    r"""If present returns also the data extend"""
    TRUE = 'true'
    FALSE = 'false'


@dataclasses.dataclass
class GetSpacesSpaceIDFoldersIDExpenseReportsRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the folder"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Date', 'style': 'form', 'explode': True }})
    r"""date range of the documents"""  
    expense_date: Optional[Any] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ExpenseDate', 'style': 'form', 'explode': True }})
    r"""range of ExpenseDate (valid available)"""  
    folder_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'FolderDate', 'style': 'form', 'explode': True }})
    r"""date range of attachment"""  
    processing_date: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ProcessingDate', 'style': 'form', 'explode': True }})
    r"""range of processing date (boolean available)"""  
    range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Range', 'style': 'form', 'explode': True }})
    r"""index range of the results"""  
    sort_name: Optional[GetSpacesSpaceIDFoldersIDExpenseReportsSortNameEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SortName', 'style': 'form', 'explode': True }})
    r"""name of value for sort"""  
    sort_order: Optional[GetSpacesSpaceIDFoldersIDExpenseReportsSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'SortOrder', 'style': 'form', 'explode': True }})
    r"""order of sort (if absent default is asc)"""  
    with_extend: Optional[GetSpacesSpaceIDFoldersIDExpenseReportsWithExtendEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'WithExtend', 'style': 'form', 'explode': True }})
    r"""If present returns also the data extend"""  
    

@dataclasses.dataclass
class GetSpacesSpaceIDFoldersIDExpenseReportsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_spaces_space_id_folders_id_expense_reports_200_application_json_all_ofs: Optional[list[shared_expensereport.ExpenseReport]] = dataclasses.field(default=None)
    r"""A list of expense reports of the folder (if the folder is social the PersonId is also returned)"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    