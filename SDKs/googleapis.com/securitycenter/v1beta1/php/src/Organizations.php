<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Organizations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Filters an organization's assets and groups them by their specified properties.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupResponse
     */
	public function securitycenterOrganizationsAssetsGroup(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/assets:group', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupAssetsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupAssetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupAssetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists an organization's assets.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListResponse
     */
	public function securitycenterOrganizationsAssetsList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/assets', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAssetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAssetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs asset discovery. The discovery is tracked with a long-running operation. This API can only be called with limited frequency for an organization. If it is called too frequently the caller will receive a TOO_MANY_REQUESTS error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoveryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoverySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoveryResponse
     */
	public function securitycenterOrganizationsAssetsRunDiscovery(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoveryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoverySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoveryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/assets:runDiscovery', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoveryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoveryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsAssetsRunDiscoveryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelResponse
     */
	public function securitycenterOrganizationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteResponse
     */
	public function securitycenterOrganizationsOperationsDelete(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsOperationsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateResponse
     */
	public function securitycenterOrganizationsSourcesCreate(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/sources', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "source", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->source = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Source', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a finding. The corresponding source must exist for finding creation to succeed.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateResponse
     */
	public function securitycenterOrganizationsSourcesFindingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/findings', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudSecuritycenterV1beta1Finding", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1beta1Finding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1beta1Finding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1beta1/organizations/{organization_id}/sources/-/findings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupResponse
     */
	public function securitycenterOrganizationsSourcesFindingsGroup(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/findings:group', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "groupFindingsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->groupFindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GroupFindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1beta1/organizations/{organization_id}/sources/-/findings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListResponse
     */
	public function securitycenterOrganizationsSourcesFindingsList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/findings', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFindingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFindingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the state of a finding.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateResponse
     */
	public function securitycenterOrganizationsSourcesFindingsSetState(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:setState', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setFindingStateRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsSetStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1beta1Finding = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1beta1Finding', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates security marks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksResponse
     */
	public function securitycenterOrganizationsSourcesFindingsUpdateSecurityMarks(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudSecuritycenterV1beta1SecurityMarks", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesFindingsUpdateSecurityMarksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudSecuritycenterV1beta1SecurityMarks = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudSecuritycenterV1beta1SecurityMarks', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetResponse
     */
	public function securitycenterOrganizationsSourcesGet(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->source = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Source', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy on the specified Source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicyResponse
     */
	public function securitycenterOrganizationsSourcesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all sources belonging to an organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListResponse
     */
	public function securitycenterOrganizationsSourcesList(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/sources', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSourcesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListSourcesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified Source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicyResponse
     */
	public function securitycenterOrganizationsSourcesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the permissions that a caller has on the specified source.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsResponse
     */
	public function securitycenterOrganizationsSourcesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SecuritycenterOrganizationsSourcesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}