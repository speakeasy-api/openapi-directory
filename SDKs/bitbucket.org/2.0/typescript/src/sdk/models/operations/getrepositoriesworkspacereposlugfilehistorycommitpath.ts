/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=Authorization",
  })
  apiKey?: string;

  @SpeakeasyMetadata({ data: "security, scheme=true;type=http;subtype=basic" })
  basic?: shared.SchemeBasic;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2?: string;
}

export class GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest extends SpeakeasyBase {
  /**
   * The commit's SHA1.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=commit",
  })
  commit: string;

  /**
   * Path to the file.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=path",
  })
  path: string;

  /**
   *
   * @remarks
   * Query string to narrow down the response as per
   * [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;

  /**
   *
   * @remarks
   * When `true`, Bitbucket will follow the history of the file across
   * renames (this is the default behavior). This can be turned off by
   * specifying `false`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=renames",
  })
  renames?: string;

  /**
   * This can either be the repository slug or the UUID of the repository,
   *
   * @remarks
   * surrounded by curly-braces, for example: `{repository UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo_slug",
  })
  repoSlug: string;

  /**
   *
   * @remarks
   * Name of a response property sort the result by as per
   * [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results).
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * This can either be the workspace ID (slug) or the workspace UUID
   *
   * @remarks
   * surrounded by curly-braces, for example: `{workspace UUID}`.
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=workspace",
  })
  workspace: string;
}

export class GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * If the repository does not exist.
   */
  @SpeakeasyMetadata()
  error?: Record<string, any>;

  /**
   * A paginated list of commits that modified the specified file
   */
  @SpeakeasyMetadata()
  paginatedFiles?: shared.PaginatedFiles;
}
