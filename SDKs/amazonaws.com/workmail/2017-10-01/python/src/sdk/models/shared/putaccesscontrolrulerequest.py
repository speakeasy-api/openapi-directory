"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import accesscontrolruleeffect_enum as shared_accesscontrolruleeffect_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutAccessControlRuleRequest:
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description') }})  
    effect: shared_accesscontrolruleeffect_enum.AccessControlRuleEffectEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Effect') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    organization_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrganizationId') }})  
    actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Actions'), 'exclude': lambda f: f is None }})  
    impersonation_role_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImpersonationRoleIds'), 'exclude': lambda f: f is None }})  
    ip_ranges: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IpRanges'), 'exclude': lambda f: f is None }})  
    not_actions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotActions'), 'exclude': lambda f: f is None }})  
    not_impersonation_role_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotImpersonationRoleIds'), 'exclude': lambda f: f is None }})  
    not_ip_ranges: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotIpRanges'), 'exclude': lambda f: f is None }})  
    not_user_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotUserIds'), 'exclude': lambda f: f is None }})  
    user_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserIds'), 'exclude': lambda f: f is None }})  
    