"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class AEAssessment:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_ae_assessment(self, request: operations.DeleteAEAssessmentRequest) -> operations.DeleteAEAssessmentResponse:
        r"""Delete auto enrolment assessment
        Deletes an existing auto enrolment assessment for the employee. Used to remove historical assessments
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteAEAssessmentRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAEAssessmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_ae_assessment_from_employee(self, request: operations.GetAEAssessmentFromEmployeeRequest) -> operations.GetAEAssessmentFromEmployeeResponse:
        r"""Get the auto enrolment assessment
        Gets the auto enrolment assessment from the specified employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAEAssessmentFromEmployeeRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAEAssessmentFromEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AEAssessment])
                res.ae_assessment = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_ae_assessments_from_employee(self, request: operations.GetAEAssessmentsFromEmployeeRequest) -> operations.GetAEAssessmentsFromEmployeeResponse:
        r"""Get the auto enrolment assessments
        Gets all auto enrolment assessments from the specified employee
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAEAssessmentsFromEmployeeRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessments', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAEAssessmentsFromEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_ae_assessments_from_pay_run(self, request: operations.GetAEAssessmentsFromPayRunRequest) -> operations.GetAEAssessmentsFromPayRunResponse:
        r"""Get the auto enrolment assessments
        Gets all auto enrolment assessments from the specified pay run
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetAEAssessmentsFromPayRunRequest, base_url, '/Employer/{EmployerId}/PaySchedule/{PayScheduleId}/PayRun/{PayRunId}/AEAssessments', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAEAssessmentsFromPayRunResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def post_new_ae_assessment(self, request: operations.PostNewAEAssessmentRequest) -> operations.PostNewAEAssessmentResponse:
        r"""Insert new auto enrolment assessment
        Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostNewAEAssessmentRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessments', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ae_assessment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostNewAEAssessmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Link])
                res.link = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_new_ae_assessment(self, request: operations.PutNewAEAssessmentRequest) -> operations.PutNewAEAssessmentResponse:
        r"""Insert new auto enrolment assessment
        Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutNewAEAssessmentRequest, base_url, '/Employer/{EmployerId}/Employee/{EmployeeId}/AEAssessment/{AEAssessmentId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "ae_assessment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutNewAEAssessmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AEAssessment])
                res.ae_assessment = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    