"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import apikeyusageresponse as shared_apikeyusageresponse
from ..shared import badrequestresponse as shared_badrequestresponse
from typing import Optional


@dataclasses.dataclass
class KeyUsageRequest:
    
    key: str = dataclasses.field(metadata={'path_param': { 'field_name': 'key', 'style': 'simple', 'explode': False }})  
    end: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'end', 'style': 'form', 'explode': False }})
    r"""An end date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no end time is provided, the current time will be used."""  
    licensee: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'licensee', 'style': 'form', 'explode': False }})
    r"""Sublicensed keys only. This will restrict the analysed dataset to a specific licensee."""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': False }})
    r"""A start date/time in the form of a UNIX Timestamp in milliseconds, e.g. `1418556452651`. If no start time is provided, the start time will be assigned to a time 21 days prior to the end time."""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': False }})  
    

@dataclasses.dataclass
class KeyUsageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_key_usage_response: Optional[shared_apikeyusageresponse.APIKeyUsageResponse] = dataclasses.field(default=None)
    r"""Success"""  
    bad_request_response: Optional[shared_badrequestresponse.BadRequestResponse] = dataclasses.field(default=None)
    r"""Bad Request"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    