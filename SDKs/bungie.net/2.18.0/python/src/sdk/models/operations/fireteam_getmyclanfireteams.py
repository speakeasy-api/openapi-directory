"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import searchresultoffireteamresponse as shared_searchresultoffireteamresponse
from typing import Optional


@dataclasses.dataclass
class FireteamGetMyClanFireteamsSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class FireteamGetMyClanFireteamsRequest:
    
    group_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'groupId', 'style': 'simple', 'explode': False }})
    r"""The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true)."""  
    include_closed: bool = dataclasses.field(metadata={'path_param': { 'field_name': 'includeClosed', 'style': 'simple', 'explode': False }})
    r"""If true, return fireteams that have been closed."""  
    page: int = dataclasses.field(metadata={'path_param': { 'field_name': 'page', 'style': 'simple', 'explode': False }})
    r"""Deprecated parameter, ignored."""  
    platform: int = dataclasses.field(metadata={'path_param': { 'field_name': 'platform', 'style': 'simple', 'explode': False }})
    r"""The platform filter."""  
    group_filter: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'groupFilter', 'style': 'form', 'explode': True }})
    r"""If true, filter by clan. Otherwise, ignore the clan and show all of the user's fireteams."""  
    lang_filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'langFilter', 'style': 'form', 'explode': True }})
    r"""An optional language filter."""  
    

@dataclasses.dataclass
class FireteamGetMyClanFireteams200Wildcard:
    r"""Look at the Response property for more information about the nature of this response"""
    
    detailed_error_trace: Optional[str] = dataclasses.field(default=None)  
    error_code: Optional[int] = dataclasses.field(default=None)  
    error_status: Optional[str] = dataclasses.field(default=None)  
    message: Optional[str] = dataclasses.field(default=None)  
    message_data: Optional[dict[str, str]] = dataclasses.field(default=None)  
    response: Optional[shared_searchresultoffireteamresponse.SearchResultOfFireteamResponse] = dataclasses.field(default=None)  
    throttle_seconds: Optional[int] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class FireteamGetMyClanFireteamsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    