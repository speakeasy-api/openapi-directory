// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateTemplateRequest struct {
	// Template configuration as JSON string
	Request shared.TemplateDefinitionNew `request:"mediaType=application/json"`
}

// CreateTemplate500ApplicationJSON - Internal Server Error
type CreateTemplate500ApplicationJSON struct {
	// Error description
	Error *string `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CreateTemplate422ApplicationJSONErrorEnum - Error description
type CreateTemplate422ApplicationJSONErrorEnum string

const (
	CreateTemplate422ApplicationJSONErrorEnumUnableToParseJSONPleaseCheckFormatting               CreateTemplate422ApplicationJSONErrorEnum = "Unable to parse JSON, please check formatting"
	CreateTemplate422ApplicationJSONErrorEnumRequiredParameterMissing                             CreateTemplate422ApplicationJSONErrorEnum = "Required parameter missing"
	CreateTemplate422ApplicationJSONErrorEnumRequiredParameterMissingTemplateDefinitionNotDefined CreateTemplate422ApplicationJSONErrorEnum = "Required parameter missing: template definition not defined"
	CreateTemplate422ApplicationJSONErrorEnumRequiredParameterMissingTemplateNotDefined           CreateTemplate422ApplicationJSONErrorEnum = "Required parameter missing: template not defined"
)

func (e *CreateTemplate422ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unable to parse JSON, please check formatting":
		fallthrough
	case "Required parameter missing":
		fallthrough
	case "Required parameter missing: template definition not defined":
		fallthrough
	case "Required parameter missing: template not defined":
		*e = CreateTemplate422ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTemplate422ApplicationJSONErrorEnum: %s", s)
	}
}

// CreateTemplate422ApplicationJSON - Unprocessable Entity
type CreateTemplate422ApplicationJSON struct {
	// Error description
	Error *CreateTemplate422ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CreateTemplate404ApplicationJSONErrorEnum - Error description
type CreateTemplate404ApplicationJSONErrorEnum string

const (
	CreateTemplate404ApplicationJSONErrorEnumEntityNotFound                               CreateTemplate404ApplicationJSONErrorEnum = "Entity not found"
	CreateTemplate404ApplicationJSONErrorEnumResourceNotFound                             CreateTemplate404ApplicationJSONErrorEnum = "Resource not found"
	CreateTemplate404ApplicationJSONErrorEnumNoneOfTheTemplatesIsAvailableForTheWorkspace CreateTemplate404ApplicationJSONErrorEnum = "None of the templates is available for the workspace."
)

func (e *CreateTemplate404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Entity not found":
		fallthrough
	case "Resource not found":
		fallthrough
	case "None of the templates is available for the workspace.":
		*e = CreateTemplate404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTemplate404ApplicationJSONErrorEnum: %s", s)
	}
}

// CreateTemplate404ApplicationJSON - Not Found
type CreateTemplate404ApplicationJSON struct {
	// Error description
	Error *CreateTemplate404ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CreateTemplate403ApplicationJSONErrorEnum - Error description
type CreateTemplate403ApplicationJSONErrorEnum string

const (
	CreateTemplate403ApplicationJSONErrorEnumYourAccountHasExceededTheMonthlyDocumentGenerationLimit CreateTemplate403ApplicationJSONErrorEnum = "Your account has exceeded the monthly document generation limit."
)

func (e *CreateTemplate403ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Your account has exceeded the monthly document generation limit.":
		*e = CreateTemplate403ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTemplate403ApplicationJSONErrorEnum: %s", s)
	}
}

// CreateTemplate403ApplicationJSON - Forbidden
type CreateTemplate403ApplicationJSON struct {
	// Error description
	Error *CreateTemplate403ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CreateTemplate401ApplicationJSONErrorEnum - Error description
type CreateTemplate401ApplicationJSONErrorEnum string

const (
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedRequestExpired                        CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: request expired"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedSignatureOrSecretMissing              CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: signature or secret missing"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedWorkspaceMissing                      CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: workspace missing"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedKeyMissing                            CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: key missing"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertyIssIssuerMissingInJwt         CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'iss' (issuer) missing in JWT"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertySubSubjectMissingInJwt        CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'sub' (subject) missing in JWT"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedPropertyExpExpirationTimeMissingInJwt CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: property 'exp' (expiration time) missing in JWT"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedInvalidIssIssuer                      CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: invalid 'iss' (issuer)"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailedIncorrectSignature                    CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed: incorrect signature"
	CreateTemplate401ApplicationJSONErrorEnumAuthenticationFailed                                      CreateTemplate401ApplicationJSONErrorEnum = "Authentication failed"
)

func (e *CreateTemplate401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed: request expired":
		fallthrough
	case "Authentication failed: signature or secret missing":
		fallthrough
	case "Authentication failed: workspace missing":
		fallthrough
	case "Authentication failed: key missing":
		fallthrough
	case "Authentication failed: property 'iss' (issuer) missing in JWT":
		fallthrough
	case "Authentication failed: property 'sub' (subject) missing in JWT":
		fallthrough
	case "Authentication failed: property 'exp' (expiration time) missing in JWT":
		fallthrough
	case "Authentication failed: invalid 'iss' (issuer)":
		fallthrough
	case "Authentication failed: incorrect signature":
		fallthrough
	case "Authentication failed":
		*e = CreateTemplate401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTemplate401ApplicationJSONErrorEnum: %s", s)
	}
}

// CreateTemplate401ApplicationJSON - Unauthorized
type CreateTemplate401ApplicationJSON struct {
	// Error description
	Error *CreateTemplate401ApplicationJSONErrorEnum `json:"error,omitempty"`
	// HTTP Error code
	Status *int64 `json:"status,omitempty"`
}

// CreateTemplate200ApplicationJSON - Template configuration as JSON object
type CreateTemplate200ApplicationJSON struct {
	Response *shared.TemplateDefinition `json:"response,omitempty"`
}

type CreateTemplateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Template configuration as JSON object
	CreateTemplate200ApplicationJSONObject *CreateTemplate200ApplicationJSON
	// Unauthorized
	CreateTemplate401ApplicationJSONObject *CreateTemplate401ApplicationJSON
	// Forbidden
	CreateTemplate403ApplicationJSONObject *CreateTemplate403ApplicationJSON
	// Not Found
	CreateTemplate404ApplicationJSONObject *CreateTemplate404ApplicationJSON
	// Unprocessable Entity
	CreateTemplate422ApplicationJSONObject *CreateTemplate422ApplicationJSON
	// Internal Server Error
	CreateTemplate500ApplicationJSONObject *CreateTemplate500ApplicationJSON
}
