// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// GroupCoverageResultLineOfCoverageEnum - The line of coverage requested with the carrier application
type GroupCoverageResultLineOfCoverageEnum string

const (
	GroupCoverageResultLineOfCoverageEnumAccident          GroupCoverageResultLineOfCoverageEnum = "accident"
	GroupCoverageResultLineOfCoverageEnumAdd               GroupCoverageResultLineOfCoverageEnum = "add"
	GroupCoverageResultLineOfCoverageEnumCancer            GroupCoverageResultLineOfCoverageEnum = "cancer"
	GroupCoverageResultLineOfCoverageEnumCriticalIllness   GroupCoverageResultLineOfCoverageEnum = "critical_illness"
	GroupCoverageResultLineOfCoverageEnumDental            GroupCoverageResultLineOfCoverageEnum = "dental"
	GroupCoverageResultLineOfCoverageEnumHospitalIndemnity GroupCoverageResultLineOfCoverageEnum = "hospital_indemnity"
	GroupCoverageResultLineOfCoverageEnumLife              GroupCoverageResultLineOfCoverageEnum = "life"
	GroupCoverageResultLineOfCoverageEnumLtd               GroupCoverageResultLineOfCoverageEnum = "ltd"
	GroupCoverageResultLineOfCoverageEnumMedical           GroupCoverageResultLineOfCoverageEnum = "medical"
	GroupCoverageResultLineOfCoverageEnumStd               GroupCoverageResultLineOfCoverageEnum = "std"
	GroupCoverageResultLineOfCoverageEnumVision            GroupCoverageResultLineOfCoverageEnum = "vision"
)

func (e *GroupCoverageResultLineOfCoverageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "accident":
		fallthrough
	case "add":
		fallthrough
	case "cancer":
		fallthrough
	case "critical_illness":
		fallthrough
	case "dental":
		fallthrough
	case "hospital_indemnity":
		fallthrough
	case "life":
		fallthrough
	case "ltd":
		fallthrough
	case "medical":
		fallthrough
	case "std":
		fallthrough
	case "vision":
		*e = GroupCoverageResultLineOfCoverageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GroupCoverageResultLineOfCoverageEnum: %s", s)
	}
}

// GroupCoverageResult - Successful Response - Returns the new Group Coverage
type GroupCoverageResult struct {
	// Unique identifier of the application in Noyo
	ApplicationID string `json:"application_id"`
	// The date the record was created
	Created int64 `json:"created"`
	// True if this line of coverage is currently active with the carrier
	ExistingCoverage *bool `json:"existing_coverage,omitempty"`
	// Unique identifier of the record in Noyo
	ID string `json:"id"`
	// The line of coverage requested with the carrier application
	LineOfCoverage GroupCoverageResultLineOfCoverageEnum `json:"line_of_coverage"`
	// The date the record was last updated
	Modified int64 `json:"modified"`
	// General platform notes about the group coverage
	Notes *string `json:"notes,omitempty"`
	// Requested effective date for start of coverage
	RequestedEffectiveDate types.Date `json:"requested_effective_date"`
	// Current version of the record
	Version string `json:"version"`
}
