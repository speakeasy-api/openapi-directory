// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type TimeMachineTimeMachineGetSecurity struct {
	APIKeyHeader string `security:"scheme,type=apiKey,subtype=header,name=X-API-Key"`
}

// TimeMachineTimeMachineGetUnitsUnitsEnum - An enumeration.
type TimeMachineTimeMachineGetUnitsUnitsEnum string

const (
	TimeMachineTimeMachineGetUnitsUnitsEnumAuto   TimeMachineTimeMachineGetUnitsUnitsEnum = "auto"
	TimeMachineTimeMachineGetUnitsUnitsEnumMetric TimeMachineTimeMachineGetUnitsUnitsEnum = "metric"
	TimeMachineTimeMachineGetUnitsUnitsEnumUs     TimeMachineTimeMachineGetUnitsUnitsEnum = "us"
	TimeMachineTimeMachineGetUnitsUnitsEnumUk     TimeMachineTimeMachineGetUnitsUnitsEnum = "uk"
	TimeMachineTimeMachineGetUnitsUnitsEnumCa     TimeMachineTimeMachineGetUnitsUnitsEnum = "ca"
)

func (e TimeMachineTimeMachineGetUnitsUnitsEnum) ToPointer() *TimeMachineTimeMachineGetUnitsUnitsEnum {
	return &e
}

func (e *TimeMachineTimeMachineGetUnitsUnitsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "auto":
		fallthrough
	case "metric":
		fallthrough
	case "us":
		fallthrough
	case "uk":
		fallthrough
	case "ca":
		*e = TimeMachineTimeMachineGetUnitsUnitsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeMachineTimeMachineGetUnitsUnitsEnum: %v", v)
	}
}

type TimeMachineTimeMachineGetRequest struct {
	// The day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`.
	//
	Date types.Date `queryParam:"style=form,explode=true,name=date"`
	// Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4
	Lat *string `queryParam:"style=form,explode=true,name=lat"`
	// Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4
	Lon *string `queryParam:"style=form,explode=true,name=lon"`
	// Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
	PlaceID *string `queryParam:"style=form,explode=true,name=place_id"`
	// Timezone to be used for the date fields. If not specified, local timezone of the location will be used.
	// The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
	// Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
	// The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
	//
	Timezone *string `queryParam:"style=form,explode=true,name=timezone"`
	// Unit system to be used. The available values are:
	//
	// * `auto`: Select the system automatically, based on the forecast location.
	// * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`).
	// * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`).
	// * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`.
	// * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`.
	//
	Units *TimeMachineTimeMachineGetUnitsUnitsEnum `queryParam:"style=form,explode=true,name=units"`
}

type TimeMachineTimeMachineGetResponse struct {
	ContentType string
	// Error in passed parameter.
	GeneralRequestError *shared.GeneralRequestError
	// Validation Error
	HTTPValidationError *shared.HTTPValidationError
	StatusCode          int
	RawResponse         *http.Response
	// Successful Response
	TimeMachineTimeMachine *shared.TimeMachineTimeMachine
}
