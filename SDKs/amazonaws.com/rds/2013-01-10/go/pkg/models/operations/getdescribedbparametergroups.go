// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeDBParameterGroupsActionEnum
type GETDescribeDBParameterGroupsActionEnum string

const (
	GETDescribeDBParameterGroupsActionEnumDescribeDbParameterGroups GETDescribeDBParameterGroupsActionEnum = "DescribeDBParameterGroups"
)

func (e *GETDescribeDBParameterGroupsActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeDBParameterGroups":
		*e = GETDescribeDBParameterGroupsActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDBParameterGroupsActionEnum: %s", s)
	}
}

// GETDescribeDBParameterGroupsVersionEnum
type GETDescribeDBParameterGroupsVersionEnum string

const (
	GETDescribeDBParameterGroupsVersionEnumTwoThousandAndThirteen0110 GETDescribeDBParameterGroupsVersionEnum = "2013-01-10"
)

func (e *GETDescribeDBParameterGroupsVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-01-10":
		*e = GETDescribeDBParameterGroupsVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeDBParameterGroupsVersionEnum: %s", s)
	}
}

type GETDescribeDBParameterGroupsQueryParams struct {
	Action               GETDescribeDBParameterGroupsActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	DBParameterGroupName *string                                 `queryParam:"style=form,explode=true,name=DBParameterGroupName"`
	Marker               *string                                 `queryParam:"style=form,explode=true,name=Marker"`
	MaxRecords           *int64                                  `queryParam:"style=form,explode=true,name=MaxRecords"`
	Version              GETDescribeDBParameterGroupsVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeDBParameterGroupsHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeDBParameterGroupsRequest struct {
	QueryParams GETDescribeDBParameterGroupsQueryParams
	Headers     GETDescribeDBParameterGroupsHeaders
}

type GETDescribeDBParameterGroupsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
