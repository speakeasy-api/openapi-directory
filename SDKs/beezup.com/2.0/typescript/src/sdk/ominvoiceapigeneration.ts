/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class OMInvoiceAPIGeneration {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Generate an Order Invoice batch
   */
  generateBatchOrderInvoice(
    req: operations.GenerateBatchOrderInvoiceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GenerateBatchOrderInvoiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenerateBatchOrderInvoiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/v2/user/marketplaces/orders/invoices/generate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenerateBatchOrderInvoiceResponse =
        new operations.GenerateBatchOrderInvoiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 202:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateBatchOrderInvoiceResponse = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.generateBatchOrderInvoiceResponse = utils.objectToClass(
              httpRes?.data,
              shared.GenerateOrderInvoiceResponse,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generateBatchOrderInvoiceErrorResponseItems = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.generateBatchOrderInvoiceErrorResponseItems =
              utils.objectToClass(
                httpRes?.data,
                shared.GenerateBatchOrderInvoiceErrorResponseItem,
                resFieldDepth
              );
          }
          break;
        case [403, 404, 409, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseMessage
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate an Order Invoice
   */
  generateOrderInvoice(
    req: operations.GenerateOrderInvoiceRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GenerateOrderInvoiceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GenerateOrderInvoiceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/marketplaces/orders/invoices/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderUUID}/generate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "generateOrderInvoiceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GenerateOrderInvoiceResponse =
        new operations.GenerateOrderInvoiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 202:
          break;
        case [403, 404, 409, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseMessage
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the PDF version of the invoice
   */
  getOrderInvoicePdf(
    req: shared.GetOrderInvoicePdfFromHtmlInvoiceUrlRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrderInvoicePdfResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.GetOrderInvoicePdfFromHtmlInvoiceUrlRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") +
      "/v2/user/marketplaces/orders/invoices/getPdfInvoice";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrderInvoicePdfResponse =
        new operations.GetOrderInvoicePdfResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/pdf`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.getOrderInvoicePdf200ApplicationPdfBinaryString = out;
          }
          break;
        case [403, 404].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseMessage
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View a preview an Order Invoice
   */
  getOrderInvoicePreview(
    req: operations.GetOrderInvoicePreviewRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetOrderInvoicePreviewResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetOrderInvoicePreviewRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/user/marketplaces/orders/invoices/{marketplaceTechnicalCode}/{accountId}/{beezUPOrderUUID}/preview",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "previewOrderInvoiceRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetOrderInvoicePreviewResponse =
        new operations.GetOrderInvoicePreviewResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.previewOrderInvoiceResponse = utils.objectToClass(
              httpRes?.data,
              shared.PreviewOrderInvoiceResponse
            );
          }
          break;
        case [403, 404, 409].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponseMessage
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beezUPCommonErrorResponseMessage = utils.objectToClass(
              httpRes?.data,
              shared.BeezUPCommonErrorResponseMessage
            );
          }
          break;
      }

      return res;
    });
  }
}
