/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class Ticket {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    public Assignee[] assignees;
    public Ticket withAssignees(Assignee[] assignees) {
        this.assignees = assignees;
        return this;
    }
    
    /**
     * The ticket's collection ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection_id")
    public String collectionId;
    public Ticket withCollectionId(String collectionId) {
        this.collectionId = collectionId;
        return this;
    }
    
    /**
     * When the ticket was completed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("completed_at")
    public OffsetDateTime completedAt;
    public Ticket withCompletedAt(OffsetDateTime completedAt) {
        this.completedAt = completedAt;
        return this;
    }
    
    /**
     * The date and time when the object was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public Ticket withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The user who created the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    public String createdBy;
    public Ticket withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * The ticket's description. HTML version of description is mapped if supported by the third-party platform
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Ticket withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Due date of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("due_date")
    public OffsetDateTime dueDate;
    public Ticket withDueDate(OffsetDateTime dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * A unique identifier for an object.
     */
    @JsonProperty("id")
    public String id;
    public Ticket withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The ticket's parent ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    public String parentId;
    public Ticket withParentId(String parentId) {
        this.parentId = parentId;
        return this;
    }
    
    /**
     * Priority of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public TicketPriorityEnum priority;
    public Ticket withPriority(TicketPriorityEnum priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * The current status of the ticket. Possible values include: open, in_progress, closed, or - in cases where there is no clear mapping - the original value passed through.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public Ticket withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Subject of the ticket
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    public String subject;
    public Ticket withSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public CollectionTag[] tags;
    public Ticket withTags(CollectionTag[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * The ticket's type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public Ticket withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * The date and time when the object was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;
    public Ticket withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
