"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GceClusterConfig = exports.GceClusterConfigPrivateIpv6GoogleAccessEnum = void 0;
var utils_1 = require("../../../internal/utils");
var confidentialinstanceconfig_1 = require("./confidentialinstanceconfig");
var nodegroupaffinity_1 = require("./nodegroupaffinity");
var reservationaffinity_1 = require("./reservationaffinity");
var shieldedinstanceconfig_1 = require("./shieldedinstanceconfig");
var class_transformer_1 = require("class-transformer");
/**
 * Optional. The type of IPv6 access for a cluster.
 */
var GceClusterConfigPrivateIpv6GoogleAccessEnum;
(function (GceClusterConfigPrivateIpv6GoogleAccessEnum) {
    GceClusterConfigPrivateIpv6GoogleAccessEnum["PrivateIpv6GoogleAccessUnspecified"] = "PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED";
    GceClusterConfigPrivateIpv6GoogleAccessEnum["InheritFromSubnetwork"] = "INHERIT_FROM_SUBNETWORK";
    GceClusterConfigPrivateIpv6GoogleAccessEnum["Outbound"] = "OUTBOUND";
    GceClusterConfigPrivateIpv6GoogleAccessEnum["Bidirectional"] = "BIDIRECTIONAL";
})(GceClusterConfigPrivateIpv6GoogleAccessEnum = exports.GceClusterConfigPrivateIpv6GoogleAccessEnum || (exports.GceClusterConfigPrivateIpv6GoogleAccessEnum = {}));
/**
 * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
 */
var GceClusterConfig = /** @class */ (function (_super) {
    __extends(GceClusterConfig, _super);
    function GceClusterConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "confidentialInstanceConfig" }),
        (0, class_transformer_1.Type)(function () { return confidentialinstanceconfig_1.ConfidentialInstanceConfig; }),
        __metadata("design:type", confidentialinstanceconfig_1.ConfidentialInstanceConfig)
    ], GceClusterConfig.prototype, "confidentialInstanceConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "internalIpOnly" }),
        __metadata("design:type", Boolean)
    ], GceClusterConfig.prototype, "internalIpOnly", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "metadata" }),
        __metadata("design:type", Object)
    ], GceClusterConfig.prototype, "metadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkUri" }),
        __metadata("design:type", String)
    ], GceClusterConfig.prototype, "networkUri", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nodeGroupAffinity" }),
        (0, class_transformer_1.Type)(function () { return nodegroupaffinity_1.NodeGroupAffinity; }),
        __metadata("design:type", nodegroupaffinity_1.NodeGroupAffinity)
    ], GceClusterConfig.prototype, "nodeGroupAffinity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "privateIpv6GoogleAccess" }),
        __metadata("design:type", String)
    ], GceClusterConfig.prototype, "privateIpv6GoogleAccess", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "reservationAffinity" }),
        (0, class_transformer_1.Type)(function () { return reservationaffinity_1.ReservationAffinity; }),
        __metadata("design:type", reservationaffinity_1.ReservationAffinity)
    ], GceClusterConfig.prototype, "reservationAffinity", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceAccount" }),
        __metadata("design:type", String)
    ], GceClusterConfig.prototype, "serviceAccount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "serviceAccountScopes" }),
        __metadata("design:type", Array)
    ], GceClusterConfig.prototype, "serviceAccountScopes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "shieldedInstanceConfig" }),
        (0, class_transformer_1.Type)(function () { return shieldedinstanceconfig_1.ShieldedInstanceConfig; }),
        __metadata("design:type", shieldedinstanceconfig_1.ShieldedInstanceConfig)
    ], GceClusterConfig.prototype, "shieldedInstanceConfig", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetworkUri" }),
        __metadata("design:type", String)
    ], GceClusterConfig.prototype, "subnetworkUri", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tags" }),
        __metadata("design:type", Array)
    ], GceClusterConfig.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "zoneUri" }),
        __metadata("design:type", String)
    ], GceClusterConfig.prototype, "zoneUri", void 0);
    return GceClusterConfig;
}(utils_1.SpeakeasyBase));
exports.GceClusterConfig = GceClusterConfig;
