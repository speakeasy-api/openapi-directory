/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PullsCreateReviewCommentRequestBody {
    /**
     * The text of the review comment.
     */
    @JsonProperty("body")
    public String body;

    public PullsCreateReviewCommentRequestBody withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commit_id")
    public String commitId;

    public PullsCreateReviewCommentRequestBody withCommitId(String commitId) {
        this.commitId = commitId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("in_reply_to")
    public Long inReplyTo;

    public PullsCreateReviewCommentRequestBody withInReplyTo(Long inReplyTo) {
        this.inReplyTo = inReplyTo;
        return this;
    }
    
    /**
     * **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line")
    public Long line;

    public PullsCreateReviewCommentRequestBody withLine(Long line) {
        this.line = line;
        return this;
    }
    
    /**
     * The relative path to the file that necessitates a comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("path")
    public String path;

    public PullsCreateReviewCommentRequestBody withPath(String path) {
        this.path = path;
        return this;
    }
    
    /**
     * **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    public Long position;

    public PullsCreateReviewCommentRequestBody withPosition(Long position) {
        this.position = position;
        return this;
    }
    
    /**
     * **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("side")
    public PullsCreateReviewCommentRequestBodySideEnum side;

    public PullsCreateReviewCommentRequestBody withSide(PullsCreateReviewCommentRequestBodySideEnum side) {
        this.side = side;
        return this;
    }
    
    /**
     * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_line")
    public Long startLine;

    public PullsCreateReviewCommentRequestBody withStartLine(Long startLine) {
        this.startLine = startLine;
        return this;
    }
    
    /**
     * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_side")
    public PullsCreateReviewCommentRequestBodyStartSideEnum startSide;

    public PullsCreateReviewCommentRequestBody withStartSide(PullsCreateReviewCommentRequestBodyStartSideEnum startSide) {
        this.startSide = startSide;
        return this;
    }
    
    public PullsCreateReviewCommentRequestBody(@JsonProperty("body") String body) {
        this.body = body;
  }
}
