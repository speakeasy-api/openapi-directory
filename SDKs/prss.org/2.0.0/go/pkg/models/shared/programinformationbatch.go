// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ProgramInformationBatchFormatEnum - The format of the metadata file defining the create or update actions to be performed on one or more EPG programs.
type ProgramInformationBatchFormatEnum string

const (
	ProgramInformationBatchFormatEnumRadiodns ProgramInformationBatchFormatEnum = "radiodns"
)

func (e ProgramInformationBatchFormatEnum) ToPointer() *ProgramInformationBatchFormatEnum {
	return &e
}

func (e *ProgramInformationBatchFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "radiodns":
		*e = ProgramInformationBatchFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProgramInformationBatchFormatEnum: %v", v)
	}
}

// ProgramInformationBatchProgram - The program information to associate the ingested metadata with. This is only required if the metadata format doesn't provide the program title and air date information directly. If this is specified, it will overrite the value specfified in the metadata file. If this is specified, the metadata file should only contain one program.
type ProgramInformationBatchProgram struct {
	// The airDate for the program in ISO 8601 format.
	AirDate string `json:"airDate"`
	// The title of the program.
	Title string `json:"title"`
}

// ProgramInformationBatchStatusEnum - The current processing status.
type ProgramInformationBatchStatusEnum string

const (
	ProgramInformationBatchStatusEnumQueued     ProgramInformationBatchStatusEnum = "queued"
	ProgramInformationBatchStatusEnumProcessing ProgramInformationBatchStatusEnum = "processing"
	ProgramInformationBatchStatusEnumFailed     ProgramInformationBatchStatusEnum = "failed"
	ProgramInformationBatchStatusEnumSuccessful ProgramInformationBatchStatusEnum = "successful"
)

func (e ProgramInformationBatchStatusEnum) ToPointer() *ProgramInformationBatchStatusEnum {
	return &e
}

func (e *ProgramInformationBatchStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queued":
		fallthrough
	case "processing":
		fallthrough
	case "failed":
		fallthrough
	case "successful":
		*e = ProgramInformationBatchStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProgramInformationBatchStatusEnum: %v", v)
	}
}

// ProgramInformationBatch - An electronic program guide (EPG) batch operation to create or update metadata on one or more guide programs.
type ProgramInformationBatch struct {
	// The date and time the batch was created.
	CreatedDate string `json:"createdDate"`
	// The date and time the batch finished (either successful or failed).
	FinishedDate *string `json:"finishedDate,omitempty"`
	// The format of the metadata file defining the create or update actions to be performed on one or more EPG programs.
	Format ProgramInformationBatchFormatEnum `json:"format"`
	// The ID of the batch.
	ID int64 `json:"id"`
	// The human readable success or failure message.
	Message *string `json:"message,omitempty"`
	// The optional name of the batch for human reference.
	Name *string `json:"name,omitempty"`
	// The program information to associate the ingested metadata with. This is only required if the metadata format doesn't provide the program title and air date information directly. If this is specified, it will overrite the value specfified in the metadata file. If this is specified, the metadata file should only contain one program.
	Program *ProgramInformationBatchProgram `json:"program,omitempty"`
	// The current processing status.
	Status ProgramInformationBatchStatusEnum `json:"status"`
	// The URI to the metadata file defining the batch creates/updates.
	URI *string `json:"uri,omitempty"`
}
