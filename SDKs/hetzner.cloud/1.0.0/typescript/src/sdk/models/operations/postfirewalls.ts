/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Configuration for type LabelSelector, required if type is `label_selector`
 */
export class PostFirewallsCreateFirewallRequestApplyToLabelSelector extends SpeakeasyBase {
  /**
   * Label selector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selector" })
  selector: string;
}

/**
 * Configuration for type Server, required if type is `server`
 */
export class PostFirewallsCreateFirewallRequestApplyToServer extends SpeakeasyBase {
  /**
   * ID of the Server
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

/**
 * Type of the resource
 */
export enum PostFirewallsCreateFirewallRequestApplyToTypeEnum {
  Server = "server",
  LabelSelector = "label_selector",
}

export class PostFirewallsCreateFirewallRequestApplyTo extends SpeakeasyBase {
  /**
   * Configuration for type LabelSelector, required if type is `label_selector`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "label_selector" })
  @Type(() => PostFirewallsCreateFirewallRequestApplyToLabelSelector)
  labelSelector?: PostFirewallsCreateFirewallRequestApplyToLabelSelector;

  /**
   * Configuration for type Server, required if type is `server`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(() => PostFirewallsCreateFirewallRequestApplyToServer)
  server?: PostFirewallsCreateFirewallRequestApplyToServer;

  /**
   * Type of the resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostFirewallsCreateFirewallRequestApplyToTypeEnum;
}

/**
 * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
 */
export enum PostFirewallsCreateFirewallRequestRuleDirectionEnum {
  In = "in",
  Out = "out",
}

/**
 * Type of traffic to allow
 */
export enum PostFirewallsCreateFirewallRequestRuleProtocolEnum {
  Tcp = "tcp",
  Udp = "udp",
  Icmp = "icmp",
  Esp = "esp",
  Gre = "gre",
}

export class PostFirewallsCreateFirewallRequestRule extends SpeakeasyBase {
  /**
   * Description of the Rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_ips" })
  destinationIps?: string[];

  /**
   * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction: PostFirewallsCreateFirewallRequestRuleDirectionEnum;

  /**
   * Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * Type of traffic to allow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: PostFirewallsCreateFirewallRequestRuleProtocolEnum;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_ips" })
  sourceIps?: string[];
}

export class PostFirewallsCreateFirewallRequest extends SpeakeasyBase {
  /**
   * Resources the Firewall should be applied to after creation
   */
  @SpeakeasyMetadata({ elemType: PostFirewallsCreateFirewallRequestApplyTo })
  @Expose({ name: "apply_to" })
  @Type(() => PostFirewallsCreateFirewallRequestApplyTo)
  applyTo?: PostFirewallsCreateFirewallRequestApplyTo[];

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  /**
   * Name of the Firewall
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Array of rules
   */
  @SpeakeasyMetadata({ elemType: PostFirewallsCreateFirewallRequestRule })
  @Expose({ name: "rules" })
  @Type(() => PostFirewallsCreateFirewallRequestRule)
  rules?: PostFirewallsCreateFirewallRequestRule[];
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostFirewallsCreateFirewallResponseActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostFirewallsCreateFirewallResponseActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostFirewallsCreateFirewallResponseActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostFirewallsCreateFirewallResponseAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostFirewallsCreateFirewallResponseActionError)
  error: PostFirewallsCreateFirewallResponseActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostFirewallsCreateFirewallResponseActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostFirewallsCreateFirewallResponseActionResources)
  resources: PostFirewallsCreateFirewallResponseActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostFirewallsCreateFirewallResponseActionStatusEnum;
}

export class PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesServer extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

/**
 * Type of resource referenced
 */
export enum PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum {
  Server = "server",
}

export class PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(
    () =>
      PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesServer
  )
  server?: PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesServer;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResourcesTypeEnum;
}

export class PostFirewallsCreateFirewallResponseFirewallAppliedToLabelSelector extends SpeakeasyBase {
  /**
   * Label selector
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selector" })
  selector: string;
}

export class PostFirewallsCreateFirewallResponseFirewallAppliedToServer extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;
}

/**
 * Type of resource referenced
 */
export enum PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum {
  Server = "server",
  LabelSelector = "label_selector",
}

export class PostFirewallsCreateFirewallResponseFirewallAppliedTo extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType:
      PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources,
  })
  @Expose({ name: "applied_to_resources" })
  @Type(
    () => PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources
  )
  appliedToResources?: PostFirewallsCreateFirewallResponseFirewallAppliedToAppliedToResources[];

  @SpeakeasyMetadata()
  @Expose({ name: "label_selector" })
  @Type(() => PostFirewallsCreateFirewallResponseFirewallAppliedToLabelSelector)
  labelSelector?: PostFirewallsCreateFirewallResponseFirewallAppliedToLabelSelector;

  @SpeakeasyMetadata()
  @Expose({ name: "server" })
  @Type(() => PostFirewallsCreateFirewallResponseFirewallAppliedToServer)
  server?: PostFirewallsCreateFirewallResponseFirewallAppliedToServer;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostFirewallsCreateFirewallResponseFirewallAppliedToTypeEnum;
}

/**
 * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
 */
export enum PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum {
  In = "in",
  Out = "out",
}

/**
 * Type of traffic to allow
 */
export enum PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum {
  Tcp = "tcp",
  Udp = "udp",
  Icmp = "icmp",
  Esp = "esp",
  Gre = "gre",
}

export class PostFirewallsCreateFirewallResponseFirewallRule extends SpeakeasyBase {
  /**
   * Description of the Rule
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_ips" })
  destinationIps?: string[];

  /**
   * Select traffic direction on which rule should be applied. Use `source_ips` for direction `in` and `destination_ips` for direction `out`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction: PostFirewallsCreateFirewallResponseFirewallRuleDirectionEnum;

  /**
   * Port or port range to which traffic will be allowed, only applicable for protocols TCP and UDP. A port range can be specified by separating two ports with a dash, e.g `1024-5000`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "port" })
  port?: string;

  /**
   * Type of traffic to allow
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol: PostFirewallsCreateFirewallResponseFirewallRuleProtocolEnum;

  /**
   * List of permitted IPv4/IPv6 addresses in CIDR notation. Use `0.0.0.0/0` to allow all IPv4 addresses and `::/0` to allow all IPv6 addresses. You can specify 100 CIDRs at most.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_ips" })
  sourceIps?: string[];
}

export class PostFirewallsCreateFirewallResponseFirewall extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: PostFirewallsCreateFirewallResponseFirewallAppliedTo,
  })
  @Expose({ name: "applied_to" })
  @Type(() => PostFirewallsCreateFirewallResponseFirewallAppliedTo)
  appliedTo: PostFirewallsCreateFirewallResponseFirewallAppliedTo[];

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  @SpeakeasyMetadata({
    elemType: PostFirewallsCreateFirewallResponseFirewallRule,
  })
  @Expose({ name: "rules" })
  @Type(() => PostFirewallsCreateFirewallResponseFirewallRule)
  rules: PostFirewallsCreateFirewallResponseFirewallRule[];
}

/**
 * The `firewall` key contains the Firewall that was just created
 */
export class PostFirewallsCreateFirewallResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: PostFirewallsCreateFirewallResponseAction })
  @Expose({ name: "actions" })
  @Type(() => PostFirewallsCreateFirewallResponseAction)
  actions?: PostFirewallsCreateFirewallResponseAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "firewall" })
  @Type(() => PostFirewallsCreateFirewallResponseFirewall)
  firewall?: PostFirewallsCreateFirewallResponseFirewall;
}

export class PostFirewallsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The `firewall` key contains the Firewall that was just created
   */
  @SpeakeasyMetadata()
  createFirewallResponse?: PostFirewallsCreateFirewallResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
