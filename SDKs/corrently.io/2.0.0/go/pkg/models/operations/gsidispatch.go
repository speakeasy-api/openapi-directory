// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type GsiDispatchRequest struct {
	// Any valid Stromkonto account (address).
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Zipcode (Postleitzahl) of a city in Germany.
	Zip *string `queryParam:"style=form,explode=true,name=zip"`
}

// GsiDispatch200ApplicationJSONTimeframe - Evaluated timeframe for this request
type GsiDispatch200ApplicationJSONTimeframe struct {
	// Ending time of window evaluated for this request/dispatches.
	End *int64 `json:"end,omitempty"`
	// Starting time of window evaluated in order to get dispatches
	Start *int64 `json:"start,omitempty"`
}

// GsiDispatch200ApplicationJSON - Success
type GsiDispatch200ApplicationJSON struct {
	// Averaged geospatial distance in kilometers between energy generation and usage at requested location.
	AvgDistanceKm *float64 `json:"avg_distance_km,omitempty"`
	// List of current sources of green energy (into requested location)
	DispatchFrom []shared.DispatchLocation `json:"dispatch_from,omitempty"`
	// List of current targets of green energy (out of requested location)
	DispatchTarget []shared.DispatchLocation `json:"dispatch_target,omitempty"`
	// Green Energy Mix after dispatch of given city
	Postmix map[string]interface{} `json:"postmix,omitempty"`
	// Green Energy Mix prior to dispatch of given city
	Premix map[string]interface{} `json:"premix,omitempty"`
	// Evaluated timeframe for this request
	Timeframe *GsiDispatch200ApplicationJSONTimeframe `json:"timeframe,omitempty"`
}

type GsiDispatchResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GsiDispatch200ApplicationJSONObject *GsiDispatch200ApplicationJSON
}
