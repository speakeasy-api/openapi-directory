// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// PortMapping - <p>Port mappings allow containers to access ports on the host container instance to send or receive traffic. Port mappings are specified as part of the container definition.</p> <p>If you use containers in a task with the <code>awsvpc</code> or <code>host</code> network mode, specify the exposed ports using <code>containerPort</code>. The <code>hostPort</code> can be left blank or it must be the same value as the <code>containerPort</code>.</p> <p>Most fields of this parameter (<code>containerPort</code>, <code>hostPort</code>, <code>protocol</code>) maps to <code>PortBindings</code> in the <a href="https://docs.docker.com/engine/api/v1.35/#operation/ContainerCreate">Create a container</a> section of the <a href="https://docs.docker.com/engine/api/v1.35/">Docker Remote API</a> and the <code>--publish</code> option to <a href="https://docs.docker.com/engine/reference/commandline/run/"> <code>docker run</code> </a>. If the network mode of a task definition is set to <code>host</code>, host ports must either be undefined or match the container port in the port mapping.</p> <note> <p>You can't expose the same container port for multiple protocols. If you attempt this, an error is returned.</p> </note> <p>After a task reaches the <code>RUNNING</code> status, manual and automatic host and container port assignments are visible in the <code>networkBindings</code> section of <a>DescribeTasks</a> API responses.</p>
type PortMapping struct {
	AppProtocol        *ApplicationProtocolEnum `json:"appProtocol,omitempty"`
	ContainerPort      *int64                   `json:"containerPort,omitempty"`
	ContainerPortRange *string                  `json:"containerPortRange,omitempty"`
	HostPort           *int64                   `json:"hostPort,omitempty"`
	Name               *string                  `json:"name,omitempty"`
	Protocol           *TransportProtocolEnum   `json:"protocol,omitempty"`
}
